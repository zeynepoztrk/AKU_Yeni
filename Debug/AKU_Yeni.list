
AKU_Yeni.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015cc0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cec  08015e90  08015e90  00016e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016b7c  08016b7c  000181d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016b7c  08016b7c  00017b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016b84  08016b84  000181d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016b84  08016b84  00017b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016b88  08016b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08016b8c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c24  200001d8  08016d64  000181d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dfc  08016d64  00018dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027275  00000000  00000000  00018208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006096  00000000  00000000  0003f47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002198  00000000  00000000  00045518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a03  00000000  00000000  000476b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af18  00000000  00000000  000490b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e8d6  00000000  00000000  00073fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8d40  00000000  00000000  000a28a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b5e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a01c  00000000  00000000  0018b624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00195640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015e78 	.word	0x08015e78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08015e78 	.word	0x08015e78

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <BMI088_Init_I2C>:
 *
 */

uint8_t BMI088_Init_I2C(BMI088 *imu,
                        I2C_HandleTypeDef *i2cHandle,
                        uint8_t accAddress, uint8_t gyrAddress) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	460b      	mov	r3, r1
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	4613      	mov	r3, r2
 8001008:	71bb      	strb	r3, [r7, #6]

    imu->i2cHandle = i2cHandle;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	601a      	str	r2, [r3, #0]
    imu->accAddress = 0x18 << 1;  // = 0x30
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2230      	movs	r2, #48	@ 0x30
 8001014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    imu->gyrAddress = 0x68 << 1;  // = 0xD0
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	22d0      	movs	r2, #208	@ 0xd0
 800101c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    imu->readingAcc = 0;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    imu->readingGyr = 0;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    uint8_t status = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	75fb      	strb	r3, [r7, #23]
    uint8_t data = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	75bb      	strb	r3, [r7, #22]

    if (HAL_I2C_IsDeviceReady(i2cHandle, 0x68 << 1, 3, 100) == HAL_OK) {
 8001038:	2364      	movs	r3, #100	@ 0x64
 800103a:	2203      	movs	r2, #3
 800103c:	21d0      	movs	r1, #208	@ 0xd0
 800103e:	68b8      	ldr	r0, [r7, #8]
 8001040:	f004 fd8c 	bl	8005b5c <HAL_I2C_IsDeviceReady>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <BMI088_Init_I2C+0x5c>
        // BMI bulundu
    	printf("ok");
 800104a:	4891      	ldr	r0, [pc, #580]	@ (8001290 <BMI088_Init_I2C+0x29c>)
 800104c:	f011 ffa2 	bl	8012f94 <iprintf>
    } else {
        // BMI bağlı değil / bus kitli
    }

    if (HAL_I2C_IsDeviceReady(i2cHandle, imu->accAddress, 3, 100) == HAL_OK)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001056:	4619      	mov	r1, r3
 8001058:	2364      	movs	r3, #100	@ 0x64
 800105a:	2203      	movs	r2, #3
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f004 fd7d 	bl	8005b5c <HAL_I2C_IsDeviceReady>
     * ACCELEROMETER
     *
     */

    // Soft reset accelerometer
    data = 0xB6;
 8001062:	23b6      	movs	r3, #182	@ 0xb6
 8001064:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_SOFTRESET, 1, &data, 1, HAL_MAX_DELAY);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2301      	movs	r3, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	f107 0316 	add.w	r3, r7, #22
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	227e      	movs	r2, #126	@ 0x7e
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f004 fa3e 	bl	8005504 <HAL_I2C_Mem_Write>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	4413      	add	r3, r2
 8001090:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(50);
 8001092:	2032      	movs	r0, #50	@ 0x32
 8001094:	f003 f964 	bl	8004360 <HAL_Delay>

    // Read and check chip ID
    status += HAL_I2C_Mem_Read(i2cHandle, imu->accAddress, BMI_ACC_CHIP_ID, 1, &data, 1, HAL_MAX_DELAY);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	2301      	movs	r3, #1
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	f107 0316 	add.w	r3, r7, #22
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	2200      	movs	r2, #0
 80010b4:	68b8      	ldr	r0, [r7, #8]
 80010b6:	f004 fb1f 	bl	80056f8 <HAL_I2C_Mem_Read>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	4413      	add	r3, r2
 80010c2:	75fb      	strb	r3, [r7, #23]
    if (data != 0x1E) {
 80010c4:	7dbb      	ldrb	r3, [r7, #22]
 80010c6:	2b1e      	cmp	r3, #30
 80010c8:	d001      	beq.n	80010ce <BMI088_Init_I2C+0xda>
        return 1; // ACC chip ID mismatch
 80010ca:	2301      	movs	r3, #1
 80010cc:	e175      	b.n	80013ba <BMI088_Init_I2C+0x3c6>
    }

    HAL_Delay(10);
 80010ce:	200a      	movs	r0, #10
 80010d0:	f003 f946 	bl	8004360 <HAL_Delay>

    // Configure accelerometer
    data = 0xA8;
 80010d4:	23a8      	movs	r3, #168	@ 0xa8
 80010d6:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_CONF, 1, &data, 1, HAL_MAX_DELAY);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	9302      	str	r3, [sp, #8]
 80010e6:	2301      	movs	r3, #1
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	f107 0316 	add.w	r3, r7, #22
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	2240      	movs	r2, #64	@ 0x40
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f004 fa05 	bl	8005504 <HAL_I2C_Mem_Write>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	4413      	add	r3, r2
 8001102:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f003 f92b 	bl	8004360 <HAL_Delay>

    data = 0x00; // ±3g
 800110a:	2300      	movs	r3, #0
 800110c:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_RANGE, 1, &data, 1, HAL_MAX_DELAY);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	2301      	movs	r3, #1
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	f107 0316 	add.w	r3, r7, #22
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	2241      	movs	r2, #65	@ 0x41
 800112a:	68b8      	ldr	r0, [r7, #8]
 800112c:	f004 f9ea 	bl	8005504 <HAL_I2C_Mem_Write>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	4413      	add	r3, r2
 8001138:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 800113a:	200a      	movs	r0, #10
 800113c:	f003 f910 	bl	8004360 <HAL_Delay>

    // Enable accelerometer interrupts (optional)
    data = 0x0A;
 8001140:	230a      	movs	r3, #10
 8001142:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_INT1_IO_CONF, 1, &data, 1, HAL_MAX_DELAY);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	f107 0316 	add.w	r3, r7, #22
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	2253      	movs	r2, #83	@ 0x53
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f004 f9cf 	bl	8005504 <HAL_I2C_Mem_Write>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	4413      	add	r3, r2
 800116e:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001170:	200a      	movs	r0, #10
 8001172:	f003 f8f5 	bl	8004360 <HAL_Delay>

    data = 0x04;
 8001176:	2304      	movs	r3, #4
 8001178:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_INT1_INT2_MAP_DATA, 1, &data, 1, HAL_MAX_DELAY);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001180:	4619      	mov	r1, r3
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	2301      	movs	r3, #1
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	f107 0316 	add.w	r3, r7, #22
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	2258      	movs	r2, #88	@ 0x58
 8001196:	68b8      	ldr	r0, [r7, #8]
 8001198:	f004 f9b4 	bl	8005504 <HAL_I2C_Mem_Write>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	4413      	add	r3, r2
 80011a4:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 80011a6:	200a      	movs	r0, #10
 80011a8:	f003 f8da 	bl	8004360 <HAL_Delay>

    // Power ON
    data = 0x00;
 80011ac:	2300      	movs	r3, #0
 80011ae:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_PWR_CONF, 1, &data, 1, HAL_MAX_DELAY);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2301      	movs	r3, #1
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	f107 0316 	add.w	r3, r7, #22
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	227c      	movs	r2, #124	@ 0x7c
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	f004 f999 	bl	8005504 <HAL_I2C_Mem_Write>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	4413      	add	r3, r2
 80011da:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f003 f8bf 	bl	8004360 <HAL_Delay>

    data = 0x04;
 80011e2:	2304      	movs	r3, #4
 80011e4:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_PWR_CTRL, 1, &data, 1, HAL_MAX_DELAY);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f107 0316 	add.w	r3, r7, #22
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	227d      	movs	r2, #125	@ 0x7d
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	f004 f97e 	bl	8005504 <HAL_I2C_Mem_Write>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	4413      	add	r3, r2
 8001210:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001212:	200a      	movs	r0, #10
 8001214:	f003 f8a4 	bl	8004360 <HAL_Delay>

    imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a1e      	ldr	r2, [pc, #120]	@ (8001294 <BMI088_Init_I2C+0x2a0>)
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->accTxBuf[0] = BMI_ACC_DATA;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2212      	movs	r2, #18
 8001222:	711a      	strb	r2, [r3, #4]
     * GYROSCOPE
     *
     */

    // Soft reset gyro
    data = 0xB6;
 8001224:	23b6      	movs	r3, #182	@ 0xb6
 8001226:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_GYR_SOFTRESET, 1, &data, 1, HAL_MAX_DELAY);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	2301      	movs	r3, #1
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	f107 0316 	add.w	r3, r7, #22
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	2214      	movs	r2, #20
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f004 f95d 	bl	8005504 <HAL_I2C_Mem_Write>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	4413      	add	r3, r2
 8001252:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(250);
 8001254:	20fa      	movs	r0, #250	@ 0xfa
 8001256:	f003 f883 	bl	8004360 <HAL_Delay>

    // Read and check chip ID
    status += HAL_I2C_Mem_Read(i2cHandle, imu->gyrAddress, BMI_GYR_CHIP_ID, 1, &data, 1, HAL_MAX_DELAY);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	2301      	movs	r3, #1
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	f107 0316 	add.w	r3, r7, #22
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2301      	movs	r3, #1
 8001274:	2200      	movs	r2, #0
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f004 fa3e 	bl	80056f8 <HAL_I2C_Mem_Read>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	4413      	add	r3, r2
 8001284:	75fb      	strb	r3, [r7, #23]
    if (data != 0x0F) {
 8001286:	7dbb      	ldrb	r3, [r7, #22]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d005      	beq.n	8001298 <BMI088_Init_I2C+0x2a4>
        return 2; // GYR chip ID mismatch
 800128c:	2302      	movs	r3, #2
 800128e:	e094      	b.n	80013ba <BMI088_Init_I2C+0x3c6>
 8001290:	08015e90 	.word	0x08015e90
 8001294:	3a6b70a4 	.word	0x3a6b70a4
    }

    HAL_Delay(10);
 8001298:	200a      	movs	r0, #10
 800129a:	f003 f861 	bl	8004360 <HAL_Delay>

    // Configure gyroscope
    data = 0x01; // ±1000 dps
 800129e:	2301      	movs	r3, #1
 80012a0:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_GYR_RANGE, 1, &data, 1, HAL_MAX_DELAY);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	2301      	movs	r3, #1
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	f107 0316 	add.w	r3, r7, #22
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	220f      	movs	r2, #15
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f004 f920 	bl	8005504 <HAL_I2C_Mem_Write>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	4413      	add	r3, r2
 80012cc:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f003 f846 	bl	8004360 <HAL_Delay>

    data = 0x07;
 80012d4:	2307      	movs	r3, #7
 80012d6:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_GYR_BANDWIDTH, 1, &data, 1, HAL_MAX_DELAY);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 0316 	add.w	r3, r7, #22
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	2210      	movs	r2, #16
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f004 f905 	bl	8005504 <HAL_I2C_Mem_Write>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	4413      	add	r3, r2
 8001302:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001304:	200a      	movs	r0, #10
 8001306:	f003 f82b 	bl	8004360 <HAL_Delay>

    // Gyro interrupts (optional)
    data = 0x80;
 800130a:	2380      	movs	r3, #128	@ 0x80
 800130c:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_GYR_INT_CTRL, 1, &data, 1, HAL_MAX_DELAY);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	2301      	movs	r3, #1
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	f107 0316 	add.w	r3, r7, #22
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	2215      	movs	r2, #21
 800132a:	68b8      	ldr	r0, [r7, #8]
 800132c:	f004 f8ea 	bl	8005504 <HAL_I2C_Mem_Write>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	4413      	add	r3, r2
 8001338:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 800133a:	200a      	movs	r0, #10
 800133c:	f003 f810 	bl	8004360 <HAL_Delay>

    data = 0x01;
 8001340:	2301      	movs	r3, #1
 8001342:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_INT3_INT4_IO_CONF, 1, &data, 1, HAL_MAX_DELAY);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2301      	movs	r3, #1
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	f107 0316 	add.w	r3, r7, #22
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	2216      	movs	r2, #22
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	f004 f8cf 	bl	8005504 <HAL_I2C_Mem_Write>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	4413      	add	r3, r2
 800136e:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001370:	200a      	movs	r0, #10
 8001372:	f002 fff5 	bl	8004360 <HAL_Delay>

    data = 0x01;
 8001376:	2301      	movs	r3, #1
 8001378:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_INT3_INT4_IO_MAP, 1, &data, 1, HAL_MAX_DELAY);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2301      	movs	r3, #1
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	f107 0316 	add.w	r3, r7, #22
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2301      	movs	r3, #1
 8001394:	2218      	movs	r2, #24
 8001396:	68b8      	ldr	r0, [r7, #8]
 8001398:	f004 f8b4 	bl	8005504 <HAL_I2C_Mem_Write>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	4413      	add	r3, r2
 80013a4:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f002 ffda 	bl	8004360 <HAL_Delay>

    imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <BMI088_Init_I2C+0x3d0>)
 80013b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->gyrTxBuf[0] = BMI_GYR_DATA;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2202      	movs	r2, #2
 80013b6:	72da      	strb	r2, [r3, #11]

    return status;
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	3a0ba058 	.word	0x3a0ba058

080013c8 <rollpitchyaw>:

uint8_t rollpitchyaw(BMI088 *imu){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	ed2d 8b02 	vpush	{d8}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
           // Derece cinsinden yön açısı



	    uint32_t now = HAL_GetTick();  // ms
 80013d4:	f002 ffb8 	bl	8004348 <HAL_GetTick>
 80013d8:	61f8      	str	r0, [r7, #28]
	    float dt = (now - lastTime) / 1000.0f;
 80013da:	4b51      	ldr	r3, [pc, #324]	@ (8001520 <rollpitchyaw+0x158>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ea:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8001524 <rollpitchyaw+0x15c>
 80013ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f2:	edc7 7a06 	vstr	s15, [r7, #24]
	    lastTime = now;
 80013f6:	4a4a      	ldr	r2, [pc, #296]	@ (8001520 <rollpitchyaw+0x158>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	6013      	str	r3, [r2, #0]

	    // İvme verilerini oku
	    float acc_x = imu->acc_mps2[0];
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	617b      	str	r3, [r7, #20]
	    float acc_y = imu->acc_mps2[1];
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	613b      	str	r3, [r7, #16]
	    float acc_z = imu->acc_mps2[2];
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	60fb      	str	r3, [r7, #12]

	    // Roll ve pitch hesapla (ivme verisi ile)
	    roll  = atan2f(acc_y, acc_z) * 180.0f / 3.14159f;
 800140e:	edd7 0a03 	vldr	s1, [r7, #12]
 8001412:	ed97 0a04 	vldr	s0, [r7, #16]
 8001416:	f013 ffd3 	bl	80153c0 <atan2f>
 800141a:	eef0 7a40 	vmov.f32	s15, s0
 800141e:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001528 <rollpitchyaw+0x160>
 8001422:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001426:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800152c <rollpitchyaw+0x164>
 800142a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142e:	4b40      	ldr	r3, [pc, #256]	@ (8001530 <rollpitchyaw+0x168>)
 8001430:	edc3 7a00 	vstr	s15, [r3]
	  	pitch = atan2f(-acc_x, sqrtf(acc_y * acc_y + acc_z * acc_z)) * 180.0f / 3.14159f;
 8001434:	edd7 7a05 	vldr	s15, [r7, #20]
 8001438:	eeb1 8a67 	vneg.f32	s16, s15
 800143c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001440:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001444:	edd7 7a03 	vldr	s15, [r7, #12]
 8001448:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800144c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001450:	eeb0 0a67 	vmov.f32	s0, s15
 8001454:	f014 f80e 	bl	8015474 <sqrtf>
 8001458:	eef0 7a40 	vmov.f32	s15, s0
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	eeb0 0a48 	vmov.f32	s0, s16
 8001464:	f013 ffac 	bl	80153c0 <atan2f>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001528 <rollpitchyaw+0x160>
 8001470:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001474:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 800152c <rollpitchyaw+0x164>
 8001478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147c:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <rollpitchyaw+0x16c>)
 800147e:	edc3 7a00 	vstr	s15, [r3]

	    // Yaw hesapla (gyro verisi ile)
	    float gyro_z_deg = (imu->gyr_rps[2] - gyro_z_offset) * 180.0f / 3.14159f;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001488:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <rollpitchyaw+0x170>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001492:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001528 <rollpitchyaw+0x160>
 8001496:	ee27 7a87 	vmul.f32	s14, s15, s14
 800149a:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800152c <rollpitchyaw+0x164>
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	edc7 7a02 	vstr	s15, [r7, #8]
	    yaw += gyro_z_deg * dt;
 80014a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80014aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b2:	4b22      	ldr	r3, [pc, #136]	@ (800153c <rollpitchyaw+0x174>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <rollpitchyaw+0x174>)
 80014be:	edc3 7a00 	vstr	s15, [r3]

	    // Yaw açısını -180 ~ +180 arasında tut
	    if (yaw > 180.0f) yaw -= 360.0f;
 80014c2:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <rollpitchyaw+0x174>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001528 <rollpitchyaw+0x160>
 80014cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	dd09      	ble.n	80014ea <rollpitchyaw+0x122>
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <rollpitchyaw+0x174>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001540 <rollpitchyaw+0x178>
 80014e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014e4:	4b15      	ldr	r3, [pc, #84]	@ (800153c <rollpitchyaw+0x174>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]
	    if (yaw < -180.0f) yaw += 360.0f;
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <rollpitchyaw+0x174>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001544 <rollpitchyaw+0x17c>
 80014f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	d509      	bpl.n	8001512 <rollpitchyaw+0x14a>
 80014fe:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <rollpitchyaw+0x174>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001540 <rollpitchyaw+0x178>
 8001508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <rollpitchyaw+0x174>)
 800150e:	edc3 7a00 	vstr	s15, [r3]

	    return 1;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	ecbd 8b02 	vpop	{d8}
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200001f4 	.word	0x200001f4
 8001524:	447a0000 	.word	0x447a0000
 8001528:	43340000 	.word	0x43340000
 800152c:	40490fd0 	.word	0x40490fd0
 8001530:	20000280 	.word	0x20000280
 8001534:	20000284 	.word	0x20000284
 8001538:	200001f8 	.word	0x200001f8
 800153c:	20000288 	.word	0x20000288
 8001540:	43b40000 	.word	0x43b40000
 8001544:	c3340000 	.word	0xc3340000

08001548 <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b08c      	sub	sp, #48	@ 0x30
 800154c:	af04      	add	r7, sp, #16
 800154e:	6078      	str	r0, [r7, #4]
	uint8_t acc_raw[6];
		  int16_t acc_x_raw, acc_y_raw, acc_z_raw;
		  float accel_range_factor; // ACC_RANGE register'ına göre hesaplanacak

		  // 0x12'den 6 byte oku (X_LSB, X_MSB, Y_LSB, Y_MSB, Z_LSB, Z_MSB)
		  HAL_I2C_Mem_Read(imu->i2cHandle, imu->accAddress, 0x12, 1, acc_raw, 6, 100);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800155a:	4619      	mov	r1, r3
 800155c:	2364      	movs	r3, #100	@ 0x64
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	2306      	movs	r3, #6
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2301      	movs	r3, #1
 800156c:	2212      	movs	r2, #18
 800156e:	f004 f8c3 	bl	80056f8 <HAL_I2C_Mem_Read>

		  // RAW verileri 16-bit signed sayıya dönüştür
		  acc_x_raw = (int16_t)((acc_raw[1] << 8) | acc_raw[0]);
 8001572:	7b7b      	ldrb	r3, [r7, #13]
 8001574:	b21b      	sxth	r3, r3
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7b3b      	ldrb	r3, [r7, #12]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	83fb      	strh	r3, [r7, #30]
		  acc_y_raw = (int16_t)((acc_raw[3] << 8) | acc_raw[2]);
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	b21b      	sxth	r3, r3
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21a      	sxth	r2, r3
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	83bb      	strh	r3, [r7, #28]
		  acc_z_raw = (int16_t)((acc_raw[5] << 8) | acc_raw[4]);
 8001592:	7c7b      	ldrb	r3, [r7, #17]
 8001594:	b21b      	sxth	r3, r3
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	7c3b      	ldrb	r3, [r7, #16]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	837b      	strh	r3, [r7, #26]

		  // ACC_RANGE register (0x41) oku
		  uint8_t acc_range_raw;
		  HAL_I2C_Mem_Read(imu->i2cHandle, imu->accAddress, 0x41, 1, &acc_range_raw, 1, 100);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015ac:	4619      	mov	r1, r3
 80015ae:	2364      	movs	r3, #100	@ 0x64
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	2301      	movs	r3, #1
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	f107 030b 	add.w	r3, r7, #11
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	2241      	movs	r2, #65	@ 0x41
 80015c0:	f004 f89a 	bl	80056f8 <HAL_I2C_Mem_Read>

		  // range: 0 → ±3g, 1 → ±6g, 2 → ±12g, 3 → ±24g gibi olabilir (datasheet'e göre)
		  accel_range_factor = powf(2, (acc_range_raw + 1)) * 1.5f;  // g cinsinden
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	3301      	adds	r3, #1
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d0:	eef0 0a67 	vmov.f32	s1, s15
 80015d4:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80015d8:	f013 fef4 	bl	80153c4 <powf>
 80015dc:	eef0 7a40 	vmov.f32	s15, s0
 80015e0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80015e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e8:	edc7 7a05 	vstr	s15, [r7, #20]

		  // mg → m/s² dönüşüm (1g = 9.80665 m/s²)
		  imu->acc_mps2[0] = ((float)acc_x_raw / 32768.0f) * accel_range_factor * 9.80665f;
 80015ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001674 <BMI088_ReadAccelerometer+0x12c>
 80015fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001600:	edd7 7a05 	vldr	s15, [r7, #20]
 8001604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001608:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001678 <BMI088_ReadAccelerometer+0x130>
 800160c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	edc3 7a05 	vstr	s15, [r3, #20]
		  imu->acc_mps2[1] = ((float)acc_y_raw / 32768.0f) * accel_range_factor * 9.80665f;
 8001616:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001622:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001674 <BMI088_ReadAccelerometer+0x12c>
 8001626:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800162a:	edd7 7a05 	vldr	s15, [r7, #20]
 800162e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001632:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001678 <BMI088_ReadAccelerometer+0x130>
 8001636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	edc3 7a06 	vstr	s15, [r3, #24]
		  imu->acc_mps2[2] = ((float)acc_z_raw / 32768.0f) * accel_range_factor * 9.80665f;
 8001640:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001674 <BMI088_ReadAccelerometer+0x12c>
 8001650:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001654:	edd7 7a05 	vldr	s15, [r7, #20]
 8001658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001678 <BMI088_ReadAccelerometer+0x130>
 8001660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800166a:	bf00      	nop
 800166c:	4618      	mov	r0, r3
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	47000000 	.word	0x47000000
 8001678:	411ce80a 	.word	0x411ce80a

0800167c <BMI088_ReadGyroscope>:



uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	@ 0x30
 8001680:	af04      	add	r7, sp, #16
 8001682:	6078      	str	r0, [r7, #4]
	 uint8_t gyro_raw[6];
	    int16_t gyro_x_raw, gyro_y_raw, gyro_z_raw;
	    float gyro_sensitivity = 2000.0f / 32768.0f; // default range: ±2000 dps
 8001684:	4b3d      	ldr	r3, [pc, #244]	@ (800177c <BMI088_ReadGyroscope+0x100>)
 8001686:	61fb      	str	r3, [r7, #28]

	    // 0x02'den başlayarak 6 byte oku (X_LSB, X_MSB, Y_LSB, Y_MSB, Z_LSB, Z_MSB)
	    if (HAL_I2C_Mem_Read(imu->i2cHandle, imu->gyrAddress, 0x02, 1, gyro_raw, 6, 100) != HAL_OK) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001692:	4619      	mov	r1, r3
 8001694:	2364      	movs	r3, #100	@ 0x64
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2306      	movs	r3, #6
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2202      	movs	r2, #2
 80016a6:	f004 f827 	bl	80056f8 <HAL_I2C_Mem_Read>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <BMI088_ReadGyroscope+0x38>
	        return 1; // Hata
 80016b0:	2301      	movs	r3, #1
 80016b2:	e05f      	b.n	8001774 <BMI088_ReadGyroscope+0xf8>
	    }

	    // 16-bit signed dönüşüm (MSB önce shiftlenir)
	    gyro_x_raw = (int16_t)((gyro_raw[1] << 8) | gyro_raw[0]);
 80016b4:	7a7b      	ldrb	r3, [r7, #9]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	7a3b      	ldrb	r3, [r7, #8]
 80016be:	b21b      	sxth	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	837b      	strh	r3, [r7, #26]
	    gyro_y_raw = (int16_t)((gyro_raw[3] << 8) | gyro_raw[2]);
 80016c4:	7afb      	ldrb	r3, [r7, #11]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	7abb      	ldrb	r3, [r7, #10]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	833b      	strh	r3, [r7, #24]
	    gyro_z_raw = (int16_t)((gyro_raw[5] << 8) | gyro_raw[4]);
 80016d4:	7b7b      	ldrb	r3, [r7, #13]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	7b3b      	ldrb	r3, [r7, #12]
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	82fb      	strh	r3, [r7, #22]
	    // Açısal hızları hesapla (dps cinsinden)
	        imu->gyr_dps[0] = (float)gyro_x_raw * gyro_sensitivity;
 80016e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	        imu->gyr_dps[1] = (float)gyro_y_raw * gyro_sensitivity;
 80016fe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170a:	edd7 7a07 	vldr	s15, [r7, #28]
 800170e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	        imu->gyr_dps[2] = (float)gyro_z_raw * gyro_sensitivity;
 8001718:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001724:	edd7 7a07 	vldr	s15, [r7, #28]
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	        // Eğer rad/s istiyorsan ayrıca şunu da hesaplayabilirsin:
	        float deg2rad = 3.14159f / 180.0f;
 8001732:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <BMI088_ReadGyroscope+0x104>)
 8001734:	613b      	str	r3, [r7, #16]
	        imu->gyr_rps[0] = imu->gyr_dps[0] * deg2rad;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800173c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edc3 7a08 	vstr	s15, [r3, #32]
	        imu->gyr_rps[1] = imu->gyr_dps[1] * deg2rad;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001750:	edd7 7a04 	vldr	s15, [r7, #16]
 8001754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	        imu->gyr_rps[2] = imu->gyr_dps[2] * deg2rad;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001764:	edd7 7a04 	vldr	s15, [r7, #16]
 8001768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	        return 0;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	3d7a0000 	.word	0x3d7a0000
 8001780:	3c8efa2e 	.word	0x3c8efa2e

08001784 <configureLoRa>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
LoRa configureLoRa(){
 8001784:	b4b0      	push	{r4, r5, r7}
 8001786:	b08f      	sub	sp, #60	@ 0x3c
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
	void main(void) {
	    myLoRa = configureLoRa();  // ✅ Geçerli — stack’e kopyalanır
	    LoRa_init(&myLoRa);        // ✅ Pointer olarak gönderilir
	}

	myLoRa.CS_port         = NSS_GPIO_Port;
 8001792:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <configureLoRa+0x74>)
 8001794:	60bb      	str	r3, [r7, #8]
		myLoRa.CS_pin          = NSS_Pin;
 8001796:	2310      	movs	r3, #16
 8001798:	81bb      	strh	r3, [r7, #12]
		myLoRa.reset_port      = RST_GPIO_Port;
 800179a:	4b17      	ldr	r3, [pc, #92]	@ (80017f8 <configureLoRa+0x74>)
 800179c:	613b      	str	r3, [r7, #16]
		myLoRa.reset_pin       = RST_Pin;
 800179e:	2308      	movs	r3, #8
 80017a0:	82bb      	strh	r3, [r7, #20]
		myLoRa.DIO0_port       = DIO0_GPIO_Port;
 80017a2:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <configureLoRa+0x78>)
 80017a4:	61bb      	str	r3, [r7, #24]
		myLoRa.DIO0_pin        = DIO0_Pin;
 80017a6:	2310      	movs	r3, #16
 80017a8:	83bb      	strh	r3, [r7, #28]
		myLoRa.hSPIx           = &hspi1;
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <configureLoRa+0x7c>)
 80017ac:	623b      	str	r3, [r7, #32]

		myLoRa.frequency             = 433.663   ;
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <configureLoRa+0x80>)
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		myLoRa.spredingFactor        = SF_7      ;
 80017b2:	2307      	movs	r3, #7
 80017b4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		myLoRa.bandWidth			 = BW_500KHz ;
 80017b8:	2309      	movs	r3, #9
 80017ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		myLoRa.crcRate               = CR_4_5    ;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		myLoRa.power				 = POWER_20db;
 80017c4:	23ff      	movs	r3, #255	@ 0xff
 80017c6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		myLoRa.overCurrentProtection = 250       ;
 80017ca:	23fa      	movs	r3, #250	@ 0xfa
 80017cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		myLoRa.preamble			     = 8         ;
 80017d0:	2308      	movs	r3, #8
 80017d2:	863b      	strh	r3, [r7, #48]	@ 0x30

	return myLoRa;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	461d      	mov	r5, r3
 80017d8:	f107 0408 	add.w	r4, r7, #8
 80017dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	373c      	adds	r7, #60	@ 0x3c
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bcb0      	pop	{r4, r5, r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020800 	.word	0x40020800
 8001800:	20000e34 	.word	0x20000e34
 8001804:	43d8d4dd 	.word	0x43d8d4dd

08001808 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001812:	2101      	movs	r1, #1
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fa1e 	bl	8001c56 <LoRa_read>
 800181a:	4603      	mov	r3, r0
 800181c:	73bb      	strb	r3, [r7, #14]
	data = read;
 800181e:	7bbb      	ldrb	r3, [r7, #14]
 8001820:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001828:	7bbb      	ldrb	r3, [r7, #14]
 800182a:	f023 0307 	bic.w	r3, r3, #7
 800182e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
 8001836:	e03e      	b.n	80018b6 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d10c      	bne.n	8001858 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800183e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001842:	f023 0307 	bic.w	r3, r3, #7
 8001846:	b25b      	sxtb	r3, r3
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	b25b      	sxtb	r3, r3
 800184e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	61da      	str	r2, [r3, #28]
 8001856:	e02e      	b.n	80018b6 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d10c      	bne.n	8001878 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800185e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001862:	f023 0307 	bic.w	r3, r3, #7
 8001866:	b25b      	sxtb	r3, r3
 8001868:	f043 0303 	orr.w	r3, r3, #3
 800186c:	b25b      	sxtb	r3, r3
 800186e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2203      	movs	r2, #3
 8001874:	61da      	str	r2, [r3, #28]
 8001876:	e01e      	b.n	80018b6 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2b05      	cmp	r3, #5
 800187c:	d10c      	bne.n	8001898 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 800187e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001882:	f023 0307 	bic.w	r3, r3, #7
 8001886:	b25b      	sxtb	r3, r3
 8001888:	f043 0305 	orr.w	r3, r3, #5
 800188c:	b25b      	sxtb	r3, r3
 800188e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2205      	movs	r2, #5
 8001894:	61da      	str	r2, [r3, #28]
 8001896:	e00e      	b.n	80018b6 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	2b06      	cmp	r3, #6
 800189c:	d10b      	bne.n	80018b6 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 800189e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018a2:	f023 0307 	bic.w	r3, r3, #7
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	f043 0306 	orr.w	r3, r3, #6
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2206      	movs	r2, #6
 80018b4:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	461a      	mov	r2, r3
 80018ba:	2101      	movs	r1, #1
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f9e4 	bl	8001c8a <LoRa_write>
	//HAL_Delay(10);
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	4613      	mov	r3, r2
 80018d8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	889b      	ldrh	r3, [r3, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	f003 fc7f 	bl	80051e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6998      	ldr	r0, [r3, #24]
 80018ee:	88fa      	ldrh	r2, [r7, #6]
 80018f0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	f007 f8f2 	bl	8008ade <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80018fa:	bf00      	nop
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4618      	mov	r0, r3
 8001902:	f007 fdfd 	bl	8009500 <HAL_SPI_GetState>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d1f7      	bne.n	80018fc <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6998      	ldr	r0, [r3, #24]
 8001910:	8b3a      	ldrh	r2, [r7, #24]
 8001912:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	f007 fa25 	bl	8008d66 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800191c:	bf00      	nop
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	4618      	mov	r0, r3
 8001924:	f007 fdec 	bl	8009500 <HAL_SPI_GetState>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	d1f7      	bne.n	800191e <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	889b      	ldrh	r3, [r3, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	4619      	mov	r1, r3
 800193a:	f003 fc55 	bl	80051e8 <HAL_GPIO_WritePin>
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4613      	mov	r3, r2
 8001954:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	f003 fc41 	bl	80051e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6998      	ldr	r0, [r3, #24]
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	f007 f8b4 	bl	8008ade <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001976:	bf00      	nop
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4618      	mov	r0, r3
 800197e:	f007 fdbf 	bl	8009500 <HAL_SPI_GetState>
 8001982:	4603      	mov	r3, r0
 8001984:	2b01      	cmp	r3, #1
 8001986:	d1f7      	bne.n	8001978 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6998      	ldr	r0, [r3, #24]
 800198c:	8b3a      	ldrh	r2, [r7, #24]
 800198e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	f007 f8a3 	bl	8008ade <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001998:	bf00      	nop
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 fdae 	bl	8009500 <HAL_SPI_GetState>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d1f7      	bne.n	800199a <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	889b      	ldrh	r3, [r3, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	4619      	mov	r1, r3
 80019b6:	f003 fc17 	bl	80051e8 <HAL_GPIO_WritePin>
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 80019ce:	2126      	movs	r1, #38	@ 0x26
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f940 	bl	8001c56 <LoRa_read>
 80019d6:	4603      	mov	r3, r0
 80019d8:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d004      	beq.n	80019ea <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 80019e0:	7bbb      	ldrb	r3, [r7, #14]
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	e003      	b.n	80019f2 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 80019ea:	7bbb      	ldrb	r3, [r7, #14]
 80019ec:	f023 0308 	bic.w	r3, r3, #8
 80019f0:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	461a      	mov	r2, r3
 80019f6:	2126      	movs	r1, #38	@ 0x26
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f946 	bl	8001c8a <LoRa_write>
	HAL_Delay(10);
 80019fe:	200a      	movs	r0, #10
 8001a00:	f002 fcae 	bl	8004360 <HAL_Delay>
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b096      	sub	sp, #88	@ 0x58
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001a14:	4a17      	ldr	r2, [pc, #92]	@ (8001a74 <LoRa_setAutoLDO+0x68>)
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	2250      	movs	r2, #80	@ 0x50
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f011 fd13 	bl	801344a <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	4093      	lsls	r3, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd97 	bl	8000564 <__aeabi_i2d>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	3358      	adds	r3, #88	@ 0x58
 8001a40:	443b      	add	r3, r7
 8001a42:	3b50      	subs	r3, #80	@ 0x50
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	f7fe ff20 	bl	800088c <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f7ff f8a0 	bl	8000b98 <__aeabi_d2iz>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	bfcc      	ite	gt
 8001a5e:	2301      	movgt	r3, #1
 8001a60:	2300      	movle	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffab 	bl	80019c2 <LoRa_setLowDaraRateOptimization>
}
 8001a6c:	bf00      	nop
 8001a6e:	3758      	adds	r7, #88	@ 0x58
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	08015e98 	.word	0x08015e98

08001a78 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, float freq){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	ed87 0a00 	vstr	s0, [r7]
	uint8_t  data;
	uint32_t F;
	F = (uint32_t)((freq * 1000000.0) / 61.03515625);
 8001a84:	6838      	ldr	r0, [r7, #0]
 8001a86:	f7fe fd7f 	bl	8000588 <__aeabi_f2d>
 8001a8a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001b08 <LoRa_setFrequency+0x90>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fdd2 	bl	8000638 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	a31c      	add	r3, pc, #112	@ (adr r3, 8001b10 <LoRa_setFrequency+0x98>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fef3 	bl	800088c <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f89b 	bl	8000be8 <__aeabi_d2uiz>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2106      	movs	r1, #6
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f8e1 	bl	8001c8a <LoRa_write>
	HAL_Delay(5);
 8001ac8:	2005      	movs	r0, #5
 8001aca:	f002 fc49 	bl	8004360 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2107      	movs	r1, #7
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f8d5 	bl	8001c8a <LoRa_write>
	HAL_Delay(5);
 8001ae0:	2005      	movs	r0, #5
 8001ae2:	f002 fc3d 	bl	8004360 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001aea:	7afb      	ldrb	r3, [r7, #11]
 8001aec:	461a      	mov	r2, r3
 8001aee:	2108      	movs	r1, #8
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f8ca 	bl	8001c8a <LoRa_write>
	HAL_Delay(5);
 8001af6:	2005      	movs	r0, #5
 8001af8:	f002 fc32 	bl	8004360 <HAL_Delay>
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	f3af 8000 	nop.w
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	412e8480 	.word	0x412e8480
 8001b10:	00000000 	.word	0x00000000
 8001b14:	404e8480 	.word	0x404e8480

08001b18 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	dd01      	ble.n	8001b2c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	dc01      	bgt.n	8001b36 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001b32:	2307      	movs	r3, #7
 8001b34:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001b36:	211e      	movs	r1, #30
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f88c 	bl	8001c56 <LoRa_read>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001b42:	200a      	movs	r0, #10
 8001b44:	f002 fc0c 	bl	8004360 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	211e      	movs	r1, #30
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f891 	bl	8001c8a <LoRa_write>
	HAL_Delay(10);
 8001b68:	200a      	movs	r0, #10
 8001b6a:	f002 fbf9 	bl	8004360 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ff4c 	bl	8001a0c <LoRa_setAutoLDO>
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2109      	movs	r1, #9
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f87b 	bl	8001c8a <LoRa_write>
	HAL_Delay(10);
 8001b94:	200a      	movs	r0, #10
 8001b96:	f002 fbe3 	bl	8004360 <HAL_Delay>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	2b2c      	cmp	r3, #44	@ 0x2c
 8001bb8:	d801      	bhi.n	8001bbe <LoRa_setOCP+0x1a>
		current = 45;
 8001bba:	232d      	movs	r3, #45	@ 0x2d
 8001bbc:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	2bf0      	cmp	r3, #240	@ 0xf0
 8001bc2:	d901      	bls.n	8001bc8 <LoRa_setOCP+0x24>
		current = 240;
 8001bc4:	23f0      	movs	r3, #240	@ 0xf0
 8001bc6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	2b78      	cmp	r3, #120	@ 0x78
 8001bcc:	d809      	bhi.n	8001be2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	3b2d      	subs	r3, #45	@ 0x2d
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <LoRa_setOCP+0x78>)
 8001bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8001bd8:	1052      	asrs	r2, r2, #1
 8001bda:	17db      	asrs	r3, r3, #31
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e00b      	b.n	8001bfa <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	2bf0      	cmp	r3, #240	@ 0xf0
 8001be6:	d808      	bhi.n	8001bfa <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	331e      	adds	r3, #30
 8001bec:	4a0b      	ldr	r2, [pc, #44]	@ (8001c1c <LoRa_setOCP+0x78>)
 8001bee:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf2:	1092      	asrs	r2, r2, #2
 8001bf4:	17db      	asrs	r3, r3, #31
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	3320      	adds	r3, #32
 8001bfe:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	461a      	mov	r2, r3
 8001c04:	210b      	movs	r1, #11
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f83f 	bl	8001c8a <LoRa_write>
	HAL_Delay(10);
 8001c0c:	200a      	movs	r0, #10
 8001c0e:	f002 fba7 	bl	8004360 <HAL_Delay>
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	66666667 	.word	0x66666667

08001c20 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001c28:	211e      	movs	r1, #30
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f813 	bl	8001c56 <LoRa_read>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	f043 0307 	orr.w	r3, r3, #7
 8001c3a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	211e      	movs	r1, #30
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f821 	bl	8001c8a <LoRa_write>
	HAL_Delay(10);
 8001c48:	200a      	movs	r0, #10
 8001c4a:	f002 fb89 	bl	8004360 <HAL_Delay>
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af02      	add	r7, sp, #8
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001c6c:	f107 030f 	add.w	r3, r7, #15
 8001c70:	f107 010e 	add.w	r1, r7, #14
 8001c74:	2201      	movs	r2, #1
 8001c76:	9200      	str	r2, [sp, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fe25 	bl	80018ca <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af02      	add	r7, sp, #8
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	70fb      	strb	r3, [r7, #3]
 8001c96:	4613      	mov	r3, r2
 8001c98:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001ca4:	78bb      	ldrb	r3, [r7, #2]
 8001ca6:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001ca8:	f107 030f 	add.w	r3, r7, #15
 8001cac:	f107 010e 	add.w	r1, r7, #14
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	9200      	str	r2, [sp, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fe45 	bl	8001946 <LoRa_writeReg>
	HAL_Delay(5);
 8001cbc:	2005      	movs	r0, #5
 8001cbe:	f002 fb4f 	bl	8004360 <HAL_Delay>
}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	72fb      	strb	r3, [r7, #11]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	889b      	ldrh	r3, [r3, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f003 fa78 	bl	80051e8 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6998      	ldr	r0, [r3, #24]
 8001cfc:	f107 0117 	add.w	r1, r7, #23
 8001d00:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d04:	2201      	movs	r2, #1
 8001d06:	f006 feea 	bl	8008ade <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001d0a:	bf00      	nop
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f007 fbf5 	bl	8009500 <HAL_SPI_GetState>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d1f7      	bne.n	8001d0c <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6998      	ldr	r0, [r3, #24]
 8001d20:	7abb      	ldrb	r3, [r7, #10]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	f006 fed8 	bl	8008ade <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001d2e:	bf00      	nop
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f007 fbe3 	bl	8009500 <HAL_SPI_GetState>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d1f7      	bne.n	8001d30 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	889b      	ldrh	r3, [r3, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f003 fa4c 	bl	80051e8 <HAL_GPIO_WritePin>
}
 8001d50:	bf00      	nop
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

	return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	4611      	mov	r1, r2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	4613      	mov	r3, r2
 8001d82:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff fd3b 	bl	8001808 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001d92:	210e      	movs	r1, #14
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7ff ff5e 	bl	8001c56 <LoRa_read>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001d9e:	7cfb      	ldrb	r3, [r7, #19]
 8001da0:	461a      	mov	r2, r3
 8001da2:	210d      	movs	r1, #13
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7ff ff70 	bl	8001c8a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	461a      	mov	r2, r3
 8001dae:	2122      	movs	r1, #34	@ 0x22
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f7ff ff6a 	bl	8001c8a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	2100      	movs	r1, #0
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff ff84 	bl	8001cca <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f7ff fd1f 	bl	8001808 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001dca:	2112      	movs	r1, #18
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff ff42 	bl	8001c56 <LoRa_read>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001dd6:	7cfb      	ldrb	r3, [r7, #19]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00a      	beq.n	8001df6 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001de0:	22ff      	movs	r2, #255	@ 0xff
 8001de2:	2112      	movs	r1, #18
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7ff ff50 	bl	8001c8a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001dea:	6979      	ldr	r1, [r7, #20]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f7ff fd0b 	bl	8001808 <LoRa_gotoMode>
			return 1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001df6:	88bb      	ldrh	r3, [r7, #4]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	80bb      	strh	r3, [r7, #4]
 8001dfc:	88bb      	ldrh	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001e02:	6979      	ldr	r1, [r7, #20]
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fcff 	bl	8001808 <LoRa_gotoMode>
				return 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e003      	b.n	8001e16 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f002 faa6 	bl	8004360 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001e14:	e7d9      	b.n	8001dca <LoRa_transmit+0x5c>
	}
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001e26:	2105      	movs	r1, #5
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff fced 	bl	8001808 <LoRa_gotoMode>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff8a 	bl	8001d58 <LoRa_isvalid>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8098 	beq.w	8001f7c <LoRa_init+0x146>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fcda 	bl	8001808 <LoRa_gotoMode>
			HAL_Delay(10);
 8001e54:	200a      	movs	r0, #10
 8001e56:	f002 fa83 	bl	8004360 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fefa 	bl	8001c56 <LoRa_read>
 8001e62:	4603      	mov	r3, r0
 8001e64:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001e66:	200a      	movs	r0, #10
 8001e68:	f002 fa7a 	bl	8004360 <HAL_Delay>
			data = read | 0x80;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e72:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	461a      	mov	r2, r3
 8001e78:	2101      	movs	r1, #1
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ff05 	bl	8001c8a <LoRa_write>
			HAL_Delay(100);
 8001e80:	2064      	movs	r0, #100	@ 0x64
 8001e82:	f002 fa6d 	bl	8004360 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff fdf1 	bl	8001a78 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fe6c 	bl	8001b7c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff fe79 	bl	8001ba4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001eb2:	2223      	movs	r2, #35	@ 0x23
 8001eb4:	210c      	movs	r1, #12
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fee7 	bl	8001c8a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff feaf 	bl	8001c20 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fe24 	bl	8001b18 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001ed0:	22ff      	movs	r2, #255	@ 0xff
 8001ed2:	211f      	movs	r1, #31
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fed8 	bl	8001c8a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001ef6:	7bbb      	ldrb	r3, [r7, #14]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	211d      	movs	r1, #29
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff fec4 	bl	8001c8a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fd82 	bl	8001a0c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	2120      	movs	r1, #32
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff feb7 	bl	8001c8a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	2121      	movs	r1, #33	@ 0x21
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff feaf 	bl	8001c8a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001f2c:	2140      	movs	r1, #64	@ 0x40
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fe91 	bl	8001c56 <LoRa_read>
 8001f34:	4603      	mov	r3, r0
 8001f36:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001f3e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001f40:	7bbb      	ldrb	r3, [r7, #14]
 8001f42:	461a      	mov	r2, r3
 8001f44:	2140      	movs	r1, #64	@ 0x40
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fe9f 	bl	8001c8a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fc5a 	bl	8001808 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001f5a:	200a      	movs	r0, #10
 8001f5c:	f002 fa00 	bl	8004360 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001f60:	2142      	movs	r1, #66	@ 0x42
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fe77 	bl	8001c56 <LoRa_read>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b12      	cmp	r3, #18
 8001f70:	d101      	bne.n	8001f76 <LoRa_init+0x140>
				return LORA_OK;
 8001f72:	23c8      	movs	r3, #200	@ 0xc8
 8001f74:	e004      	b.n	8001f80 <LoRa_init+0x14a>
			else
				return LORA_NOT_FOUND;
 8001f76:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001f7a:	e001      	b.n	8001f80 <LoRa_init+0x14a>
	}
	else {
		return LORA_UNAVAILABLE;
 8001f7c:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <bmp5_init>:
*  @brief This API is the entry point.
*  It performs the selection of I2C/I3C/SPI read mechanism according to the
*  selected interface and reads the chip-id of the sensor.
*/
int8_t bmp5_init(struct bmp5_dev *dev)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t chip_id;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fc71 	bl	8002878 <null_ptr_check>
 8001f96:	4603      	mov	r3, r0
 8001f98:	73fb      	strb	r3, [r7, #15]
     chip_id = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	737b      	strb	r3, [r7, #13]
     rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &chip_id, 1, dev);//chip_id neden okundu?sensörün gerçekten bağlı 
 8001f9e:	f107 010d 	add.w	r1, r7, #13
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f000 f843 	bl	8002032 <bmp5_get_regs>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]
     //ve doğru model olduğunu kontrol etmek için

     if (rslt == BMP5_OK)
 8001fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d136      	bne.n	8002026 <bmp5_init+0x9e>
         {
             dev->chip_id = 0;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]

             if (dev->intf == BMP5_SPI_INTF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7d5b      	ldrb	r3, [r3, #21]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d108      	bne.n	8001fd8 <bmp5_init+0x50>
             {
                 /* Performing a single read via SPI of registers,
                  * e.g. registers CHIP_ID, before the actual
                  * SPI communication with the device.
                  */
                 rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &reg_data, 1, dev);
 8001fc6:	f107 010e 	add.w	r1, r7, #14
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f000 f82f 	bl	8002032 <bmp5_get_regs>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	73fb      	strb	r3, [r7, #15]
             }

             if (rslt == BMP5_OK)
 8001fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d122      	bne.n	8002026 <bmp5_init+0x9e>
             {
                 /* Read chip_id */
                 rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &chip_id, 1, dev);
 8001fe0:	f107 010d 	add.w	r1, r7, #13
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f000 f822 	bl	8002032 <bmp5_get_regs>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	73fb      	strb	r3, [r7, #15]

                 if (rslt == BMP5_OK)
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <bmp5_init+0x9e>
                 {
                     if (chip_id != 0)
 8001ffa:	7b7b      	ldrb	r3, [r7, #13]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <bmp5_init+0x84>
                     {
                         /* Validate post power-up procedure */
                         rslt = power_up_check(dev);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 fc75 	bl	80028f0 <power_up_check>
 8002006:	4603      	mov	r3, r0
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	e001      	b.n	8002010 <bmp5_init+0x88>
                     }
                     else
                     {
                         rslt = BMP5_E_INVALID_CHIP_ID;
 800200c:	23fc      	movs	r3, #252	@ 0xfc
 800200e:	73fb      	strb	r3, [r7, #15]
                     }

                     if (rslt == BMP5_OK)
 8002010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d106      	bne.n	8002026 <bmp5_init+0x9e>
                     {
                         rslt = validate_chip_id(chip_id, dev);
 8002018:	7b7b      	ldrb	r3, [r7, #13]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fc4b 	bl	80028b8 <validate_chip_id>
 8002022:	4603      	mov	r3, r0
 8002024:	73fb      	strb	r3, [r7, #15]
                     }
                 }
             }
         }

         return rslt;
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
     }
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <bmp5_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp5_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp5_dev *dev)
{
 8002032:	b590      	push	{r4, r7, lr}
 8002034:	b087      	sub	sp, #28
 8002036:	af00      	add	r7, sp, #0
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4603      	mov	r3, r0
 8002040:	73fb      	strb	r3, [r7, #15]
    //mikrodenetleyici (veya yazılım), sensörün içindeki verileri öğrenmek istiyor. Bu veriler sensörün register denilen hafıza alanlarında tutulur.
    //Bu fonksiyon da gidip o verileri okur ve RAM'deki bir tampon değişkene (reg_data) yazar
    int8_t rslt;
    rslt = null_ptr_check(dev);
 8002042:	6838      	ldr	r0, [r7, #0]
 8002044:	f000 fc18 	bl	8002878 <null_ptr_check>
 8002048:	4603      	mov	r3, r0
 800204a:	75fb      	strb	r3, [r7, #23]


    /* Proceed if null check is fine */
    if ((rslt == BMP5_OK) && (reg_data != NULL))
 800204c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d116      	bne.n	8002082 <bmp5_get_regs+0x50>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d013      	beq.n	8002082 <bmp5_get_regs+0x50>
    {
        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	689c      	ldr	r4, [r3, #8]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	7bf8      	ldrb	r0, [r7, #15]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	47a0      	blx	r4
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	751a      	strb	r2, [r3, #20]

        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <bmp5_get_regs+0x54>
        {
            /* Failure case */
            rslt = BMP5_E_COM_FAIL; //read işlemi başarısız
 800207c:	23fe      	movs	r3, #254	@ 0xfe
 800207e:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 8002080:	e001      	b.n	8002086 <bmp5_get_regs+0x54>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR; //en başta bir şey null ise
 8002082:	23ff      	movs	r3, #255	@ 0xff
 8002084:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800208a:	4618      	mov	r0, r3
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}

08002092 <bmp5_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp5_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp5_dev *dev)
{
 8002092:	b590      	push	{r4, r7, lr}
 8002094:	b087      	sub	sp, #28
 8002096:	af00      	add	r7, sp, #0
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4603      	mov	r3, r0
 80020a0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75bb      	strb	r3, [r7, #22]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80020a6:	6838      	ldr	r0, [r7, #0]
 80020a8:	f000 fbe6 	bl	8002878 <null_ptr_check>
 80020ac:	4603      	mov	r3, r0
 80020ae:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMP5_OK) && (reg_data != NULL))
 80020b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d140      	bne.n	800213a <bmp5_set_regs+0xa8>
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d03d      	beq.n	800213a <bmp5_set_regs+0xa8>
    {
        if (dev->intf == BMP5_SPI_INTF)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	7d5b      	ldrb	r3, [r3, #21]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d11d      	bne.n	8002102 <bmp5_set_regs+0x70>
        {
            /* Write the data to the reg_addr */
            do
            {
                dev->intf_rslt = dev->write((reg_addr + idx), &reg_data[idx], 1, dev->intf_ptr);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68dc      	ldr	r4, [r3, #12]
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	7dbb      	ldrb	r3, [r7, #22]
 80020ce:	4413      	add	r3, r2
 80020d0:	b2d8      	uxtb	r0, r3
 80020d2:	7dbb      	ldrb	r3, [r7, #22]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	18d1      	adds	r1, r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	47a0      	blx	r4
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	751a      	strb	r2, [r3, #20]
                idx++;
 80020e8:	7dbb      	ldrb	r3, [r7, #22]
 80020ea:	3301      	adds	r3, #1
 80020ec:	75bb      	strb	r3, [r7, #22]
            } while ((idx < len) && (dev->intf_rslt == BMP5_INTF_RET_SUCCESS));
 80020ee:	7dbb      	ldrb	r3, [r7, #22]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d919      	bls.n	800212a <bmp5_set_regs+0x98>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0e2      	beq.n	80020c6 <bmp5_set_regs+0x34>
 8002100:	e013      	b.n	800212a <bmp5_set_regs+0x98>
        }
        else if ((dev->intf == BMP5_I2C_INTF) || (dev->intf == BMP5_I3C_INTF))
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	7d5b      	ldrb	r3, [r3, #21]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d003      	beq.n	8002112 <bmp5_set_regs+0x80>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	7d5b      	ldrb	r3, [r3, #21]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d10b      	bne.n	800212a <bmp5_set_regs+0x98>
        {
            /* Write the data to the reg_addr */
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68dc      	ldr	r4, [r3, #12]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	7bf8      	ldrb	r0, [r7, #15]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	47a0      	blx	r4
 8002122:	4603      	mov	r3, r0
 8002124:	461a      	mov	r2, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	751a      	strb	r2, [r3, #20]
        }

        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <bmp5_set_regs+0xac>
        {
            /* Failure case */
            rslt = BMP5_E_COM_FAIL;
 8002134:	23fe      	movs	r3, #254	@ 0xfe
 8002136:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 8002138:	e001      	b.n	800213e <bmp5_set_regs+0xac>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800213a:	23ff      	movs	r3, #255	@ 0xff
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800213e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002142:	4618      	mov	r0, r3
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd90      	pop	{r4, r7, pc}

0800214a <bmp5_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp5_soft_reset(struct bmp5_dev *dev)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t por_status;
    uint8_t data = BMP5_SOFT_RESET_CMD;
 8002152:	23b6      	movs	r3, #182	@ 0xb6
 8002154:	733b      	strb	r3, [r7, #12]

    /* Reset the device */
    rslt = bmp5_set_regs(BMP5_REG_CMD, &data, 1, dev);
 8002156:	f107 010c 	add.w	r1, r7, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	207e      	movs	r0, #126	@ 0x7e
 8002160:	f7ff ff97 	bl	8002092 <bmp5_set_regs>
 8002164:	4603      	mov	r3, r0
 8002166:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d129      	bne.n	80021c4 <bmp5_soft_reset+0x7a>
    {
        /* Soft-reset execution takes 2 ms */
        //dev->delay_us(BMP5_DELAY_US_SOFT_RESET, dev->intf_ptr);
        HAL_Delay(10);
 8002170:	200a      	movs	r0, #10
 8002172:	f002 f8f5 	bl	8004360 <HAL_Delay>
        if (dev->intf == BMP5_SPI_INTF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7d5b      	ldrb	r3, [r3, #21]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d108      	bne.n	8002190 <bmp5_soft_reset+0x46>
        {
            /* Performing a single read via SPI of registers,
            * e.g. registers CHIP_ID, before the actual
            * SPI communication with the device.
            */
            rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &reg_data, 1, dev);
 800217e:	f107 010e 	add.w	r1, r7, #14
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	2001      	movs	r0, #1
 8002188:	f7ff ff53 	bl	8002032 <bmp5_get_regs>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMP5_OK)
 8002190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d115      	bne.n	80021c4 <bmp5_soft_reset+0x7a>
        {
            rslt = bmp5_get_interrupt_status(&por_status, dev);
 8002198:	f107 030d 	add.w	r3, r7, #13
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f816 	bl	80021d0 <bmp5_get_interrupt_status>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 80021a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <bmp5_soft_reset+0x7a>
            {
                if (por_status & BMP5_INT_ASSERTED_POR_SOFTRESET_COMPLETE)
 80021b0:	7b7b      	ldrb	r3, [r7, #13]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <bmp5_soft_reset+0x76>
                {
                    rslt = BMP5_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	e001      	b.n	80021c4 <bmp5_soft_reset+0x7a>
                }
                else
                {
                    rslt = BMP5_E_POR_SOFTRESET;
 80021c0:	23fa      	movs	r3, #250	@ 0xfa
 80021c2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80021c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <bmp5_get_interrupt_status>:

/*!
 *  @brief This API is used to get interrupt status.
 */
int8_t bmp5_get_interrupt_status(uint8_t *int_status, struct bmp5_dev *dev)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (int_status != NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <bmp5_get_interrupt_status+0x22>
    {
        rslt = bmp5_get_regs(BMP5_REG_INT_STATUS, int_status, 1, dev);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2201      	movs	r2, #1
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	201d      	movs	r0, #29
 80021e8:	f7ff ff23 	bl	8002032 <bmp5_get_regs>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e001      	b.n	80021f6 <bmp5_get_interrupt_status+0x26>
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 80021f2:	23ff      	movs	r3, #255	@ 0xff
 80021f4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80021f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <bmp5_get_power_mode>:

/*!
 *  @brief This API is used to get powermode of the sensor.
 */
int8_t bmp5_get_power_mode(enum bmp5_powermode *powermode, struct bmp5_dev *dev)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t deep_dis;
    uint8_t reg_data;
    uint8_t pwrmode;

    if (powermode != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d03f      	beq.n	8002294 <bmp5_get_power_mode+0x90>
    {
        /* Read the power mode register */
        rslt = bmp5_get_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 8002214:	f107 010c 	add.w	r1, r7, #12
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2201      	movs	r2, #1
 800221c:	2037      	movs	r0, #55	@ 0x37
 800221e:	f7ff ff08 	bl	8002032 <bmp5_get_regs>
 8002222:	4603      	mov	r3, r0
 8002224:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 8002226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d134      	bne.n	8002298 <bmp5_get_power_mode+0x94>
        {
            pwrmode = BMP5_GET_BITS_POS_0(reg_data, BMP5_POWERMODE);
 800222e:	7b3b      	ldrb	r3, [r7, #12]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	73bb      	strb	r3, [r7, #14]

            switch (pwrmode)
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d828      	bhi.n	800228e <bmp5_get_power_mode+0x8a>
 800223c:	a201      	add	r2, pc, #4	@ (adr r2, 8002244 <bmp5_get_power_mode+0x40>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002255 	.word	0x08002255
 8002248:	08002277 	.word	0x08002277
 800224c:	0800227f 	.word	0x0800227f
 8002250:	08002287 	.word	0x08002287
            {
                case BMP5_POWERMODE_STANDBY:

                    /* Getting deep disable status */
                    deep_dis = BMP5_GET_BITSLICE(reg_data, BMP5_DEEP_DISABLE);
 8002254:	7b3b      	ldrb	r3, [r7, #12]
 8002256:	09db      	lsrs	r3, r3, #7
 8002258:	737b      	strb	r3, [r7, #13]
                    /* Checking deepstandby status only when powermode is in standby mode */

                    /* If deep_dis = 0(BMP5_DEEP_ENABLED) then deepstandby mode is enabled.
                     * If deep_dis = 1(BMP5_DEEP_DISABLED) then deepstandby mode is disabled
                     */
                    if (deep_dis == BMP5_DEEP_ENABLED)
 800225a:	7b7b      	ldrb	r3, [r7, #13]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <bmp5_get_power_mode+0x6a>
                    {
                        rslt = check_deepstandby_mode(powermode, dev);
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fb83 	bl	800296e <check_deepstandby_mode>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        *powermode = BMP5_POWERMODE_STANDBY;
                    }

                    break;
 800226c:	e014      	b.n	8002298 <bmp5_get_power_mode+0x94>
                        *powermode = BMP5_POWERMODE_STANDBY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
                    break;
 8002274:	e010      	b.n	8002298 <bmp5_get_power_mode+0x94>
                case BMP5_POWERMODE_NORMAL:
                    *powermode = BMP5_POWERMODE_NORMAL;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
                    break;
 800227c:	e00c      	b.n	8002298 <bmp5_get_power_mode+0x94>
                case BMP5_POWERMODE_FORCED:
                    *powermode = BMP5_POWERMODE_FORCED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	701a      	strb	r2, [r3, #0]
                    break;
 8002284:	e008      	b.n	8002298 <bmp5_get_power_mode+0x94>
                case BMP5_POWERMODE_CONTINOUS:
                    *powermode = BMP5_POWERMODE_CONTINOUS;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	701a      	strb	r2, [r3, #0]
                    break;
 800228c:	e004      	b.n	8002298 <bmp5_get_power_mode+0x94>
                default:
                    rslt = BMP5_E_INVALID_POWERMODE;
 800228e:	23f9      	movs	r3, #249	@ 0xf9
 8002290:	73fb      	strb	r3, [r7, #15]
                    break;
 8002292:	e001      	b.n	8002298 <bmp5_get_power_mode+0x94>
            }
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8002294:	23ff      	movs	r3, #255	@ 0xff
 8002296:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002298:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <bmp5_set_power_mode>:

/*!
 *  @brief This API is used to set powermode of the sensor.
 */
int8_t bmp5_set_power_mode(enum bmp5_powermode powermode, struct bmp5_dev *dev)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    enum bmp5_powermode lst_pwrmode;

    /* Existing power mode of the device is received in lst_pwrmode */
    rslt = bmp5_get_power_mode(&lst_pwrmode, dev);//Sensör şu anda hangi güç modunda?
 80022b0:	f107 030e 	add.w	r3, r7, #14
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ffa4 	bl	8002204 <bmp5_get_power_mode>
 80022bc:	4603      	mov	r3, r0
 80022be:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 80022c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d132      	bne.n	800232e <bmp5_set_power_mode+0x8a>
    {
        /* If the sensor is not in standby mode set the device to
         *  standby mode.
         */
        if (lst_pwrmode != BMP5_POWERMODE_STANDBY)
 80022c8:	7bbb      	ldrb	r3, [r7, #14]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00c      	beq.n	80022e8 <bmp5_set_power_mode+0x44>
        {
            /* Device should be set to standby before transiting to
             * forced mode or normal mode or continous mode.
             */
            rslt = set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 80022ce:	6839      	ldr	r1, [r7, #0]
 80022d0:	2000      	movs	r0, #0
 80022d2:	f000 fc00 	bl	8002ad6 <set_power_mode>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]
            //STANDBY moduna al.Sensörün modunu değiştirmeden önce STANDBY modunda olması gerekir.

            if (rslt == BMP5_OK)
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <bmp5_set_power_mode+0x44>
            {
                /* Give t_standby(as per data sheet) time for device to go into standby mode */
                //dev->delay_us(BMP5_DELAY_US_STANDBY, dev->intf_ptr);
            	HAL_Delay(10);
 80022e2:	200a      	movs	r0, #10
 80022e4:	f002 f83c 	bl	8004360 <HAL_Delay>
            }
        }

        /* Set the desired power mode */
        if (rslt == BMP5_OK)
 80022e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d11e      	bne.n	800232e <bmp5_set_power_mode+0x8a>
        {
            switch (powermode)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d009      	beq.n	800230a <bmp5_set_power_mode+0x66>
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	dc15      	bgt.n	8002326 <bmp5_set_power_mode+0x82>
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <bmp5_set_power_mode+0x88>
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db11      	blt.n	8002326 <bmp5_set_power_mode+0x82>
 8002302:	3b01      	subs	r3, #1
 8002304:	2b02      	cmp	r3, #2
 8002306:	d80e      	bhi.n	8002326 <bmp5_set_power_mode+0x82>
 8002308:	e005      	b.n	8002316 <bmp5_set_power_mode+0x72>
            {
                case BMP5_POWERMODE_DEEP_STANDBY:
                    rslt = set_deep_standby_mode(dev);
 800230a:	6838      	ldr	r0, [r7, #0]
 800230c:	f000 fb76 	bl	80029fc <set_deep_standby_mode>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]
                    break;
 8002314:	e00b      	b.n	800232e <bmp5_set_power_mode+0x8a>
                     */
                    break;
                case BMP5_POWERMODE_NORMAL:
                case BMP5_POWERMODE_FORCED:
                case BMP5_POWERMODE_CONTINOUS:
                    rslt = set_power_mode(powermode, dev);//İstenen moda geç
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	6839      	ldr	r1, [r7, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fbdb 	bl	8002ad6 <set_power_mode>
 8002320:	4603      	mov	r3, r0
 8002322:	73fb      	strb	r3, [r7, #15]
                    break;
 8002324:	e003      	b.n	800232e <bmp5_set_power_mode+0x8a>
                default:
                    rslt = BMP5_E_INVALID_POWERMODE;
 8002326:	23f9      	movs	r3, #249	@ 0xf9
 8002328:	73fb      	strb	r3, [r7, #15]
                    break;
 800232a:	e000      	b.n	800232e <bmp5_set_power_mode+0x8a>
                    break;
 800232c:	bf00      	nop
            }
        }
    }

    return rslt;
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <bmp5_get_sensor_data>:
 * sensor and store it in the bmp5_sensor_data structure instance passed by the user.
 */
int8_t bmp5_get_sensor_data(struct bmp5_sensor_data *sensor_data,
                            const struct bmp5_osr_odr_press_config *osr_odr_press_cfg,
                            struct bmp5_dev *dev)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	@ 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[6] = { 0 };
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	809a      	strh	r2, [r3, #4]
    int32_t raw_data_t;
    uint32_t raw_data_p;

    rslt = bmp5_get_regs(BMP5_REG_TEMP_DATA_XLSB, reg_data, 6, dev);
 8002352:	f107 0114 	add.w	r1, r7, #20
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2206      	movs	r2, #6
 800235a:	201d      	movs	r0, #29
 800235c:	f7ff fe69 	bl	8002032 <bmp5_get_regs>
 8002360:	4603      	mov	r3, r0
 8002362:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP5_OK)
 8002366:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800236a:	2b00      	cmp	r3, #0
 800236c:	d13d      	bne.n	80023ea <bmp5_get_sensor_data+0xae>
    {
        raw_data_t = (int32_t) ((int32_t) ((uint32_t)(((uint32_t)reg_data[2] << 16) | ((uint16_t)reg_data[1] << 8) | reg_data[0]) << 8) >> 8);
 800236e:	7dbb      	ldrb	r3, [r7, #22]
 8002370:	041a      	lsls	r2, r3, #16
 8002372:	7d7b      	ldrb	r3, [r7, #21]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	4313      	orrs	r3, r2
 8002378:	7d3a      	ldrb	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	121b      	asrs	r3, r3, #8
 8002380:	623b      	str	r3, [r7, #32]
        sensor_data->temperature =
            (int64_t)((raw_data_t / (float)65536.0) * (power(10, BMP5_FIXED_POINT_DIGIT_PRECISION)));
#else

        /* Division by 2^16(whose equivalent value is 65536) is performed to get temperature data in deg C */
        sensor_data->temperature = (float)(raw_data_t / 65536.0);
 8002382:	6a38      	ldr	r0, [r7, #32]
 8002384:	f7fe f8ee 	bl	8000564 <__aeabi_i2d>
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <bmp5_get_sensor_data+0xbc>)
 800238e:	f7fe fa7d 	bl	800088c <__aeabi_ddiv>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	f7fe fc45 	bl	8000c28 <__aeabi_d2f>
 800239e:	4602      	mov	r2, r0
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	605a      	str	r2, [r3, #4]
#endif

        if (osr_odr_press_cfg->press_en == BMP5_ENABLE)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	789b      	ldrb	r3, [r3, #2]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d11a      	bne.n	80023e2 <bmp5_get_sensor_data+0xa6>
        {
            raw_data_p = (uint32_t)((uint32_t)(reg_data[5] << 16) | (uint16_t)(reg_data[4] << 8) | reg_data[3]);
 80023ac:	7e7b      	ldrb	r3, [r7, #25]
 80023ae:	041b      	lsls	r3, r3, #16
 80023b0:	7e3a      	ldrb	r2, [r7, #24]
 80023b2:	0212      	lsls	r2, r2, #8
 80023b4:	b292      	uxth	r2, r2
 80023b6:	4313      	orrs	r3, r2
 80023b8:	7dfa      	ldrb	r2, [r7, #23]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61fb      	str	r3, [r7, #28]
            sensor_data->pressure =
                (uint64_t)((raw_data_p / (float)64.0) * (power(10, BMP5_FIXED_POINT_DIGIT_PRECISION)));
#else

            /* Division by 2^6(whose equivalent value is 64) is performed to get pressure data in Pa */
            sensor_data->pressure = (float)(raw_data_p / 64.0);
 80023be:	69f8      	ldr	r0, [r7, #28]
 80023c0:	f7fe f8c0 	bl	8000544 <__aeabi_ui2d>
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <bmp5_get_sensor_data+0xc0>)
 80023ca:	f7fe fa5f 	bl	800088c <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe fc27 	bl	8000c28 <__aeabi_d2f>
 80023da:	4602      	mov	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e003      	b.n	80023ea <bmp5_get_sensor_data+0xae>
#endif
        }
        else
        {
            sensor_data->pressure = 0.0;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
        }
    }

    return rslt;
 80023ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3728      	adds	r7, #40	@ 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40f00000 	.word	0x40f00000
 80023fc:	40500000 	.word	0x40500000

08002400 <bmp5_int_source_select>:
/*!
 *  @brief This API is used to enable the interrupts(drdy interrupt, fifo full interrupt,
 *   fifo threshold enable and pressure data out of range interrupt).
 */
int8_t bmp5_int_source_select(const struct bmp5_int_source_select *int_source_select, struct bmp5_dev *dev)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    if (int_source_select != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d058      	beq.n	80024c2 <bmp5_int_source_select+0xc2>
    {
        rslt = bmp5_get_regs(BMP5_REG_INT_SOURCE, &reg_data, 1, dev);
 8002410:	f107 010e 	add.w	r1, r7, #14
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2201      	movs	r2, #1
 8002418:	2015      	movs	r0, #21
 800241a:	f7ff fe0a 	bl	8002032 <bmp5_get_regs>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d14d      	bne.n	80024c6 <bmp5_int_source_select+0xc6>
        {
            reg_data = BMP5_SET_BITS_POS_0(reg_data, BMP5_INT_DRDY_EN, int_source_select->drdy_en);
 800242a:	7bbb      	ldrb	r3, [r7, #14]
 800242c:	b25b      	sxtb	r3, r3
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	b25a      	sxtb	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	b25b      	sxtb	r3, r3
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	b25b      	sxtb	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b25b      	sxtb	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	73bb      	strb	r3, [r7, #14]

            reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_FIFO_FULL_EN, int_source_select->fifo_full_en);
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	b25b      	sxtb	r3, r3
 800244c:	f023 0302 	bic.w	r3, r3, #2
 8002450:	b25a      	sxtb	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	b25b      	sxtb	r3, r3
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	b25b      	sxtb	r3, r3
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	b25b      	sxtb	r3, r3
 8002462:	4313      	orrs	r3, r2
 8002464:	b25b      	sxtb	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	73bb      	strb	r3, [r7, #14]

            reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_FIFO_THRES_EN, int_source_select->fifo_thres_en);
 800246a:	7bbb      	ldrb	r3, [r7, #14]
 800246c:	b25b      	sxtb	r3, r3
 800246e:	f023 0304 	bic.w	r3, r3, #4
 8002472:	b25a      	sxtb	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	789b      	ldrb	r3, [r3, #2]
 8002478:	b25b      	sxtb	r3, r3
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	b25b      	sxtb	r3, r3
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	b25b      	sxtb	r3, r3
 8002484:	4313      	orrs	r3, r2
 8002486:	b25b      	sxtb	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	73bb      	strb	r3, [r7, #14]

            reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_OOR_PRESS_EN, int_source_select->oor_press_en);
 800248c:	7bbb      	ldrb	r3, [r7, #14]
 800248e:	b25b      	sxtb	r3, r3
 8002490:	f023 0308 	bic.w	r3, r3, #8
 8002494:	b25a      	sxtb	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	78db      	ldrb	r3, [r3, #3]
 800249a:	b25b      	sxtb	r3, r3
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	b25b      	sxtb	r3, r3
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	b25b      	sxtb	r3, r3
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	73bb      	strb	r3, [r7, #14]

            rslt = bmp5_set_regs(BMP5_REG_INT_SOURCE, &reg_data, 1, dev);
 80024ae:	f107 010e 	add.w	r1, r7, #14
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	2015      	movs	r0, #21
 80024b8:	f7ff fdeb 	bl	8002092 <bmp5_set_regs>
 80024bc:	4603      	mov	r3, r0
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e001      	b.n	80024c6 <bmp5_int_source_select+0xc6>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 80024c2:	23ff      	movs	r3, #255	@ 0xff
 80024c4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <bmp5_configure_interrupt>:
int8_t bmp5_configure_interrupt(enum bmp5_intr_mode int_mode,
                                enum bmp5_intr_polarity int_pol,
                                enum bmp5_intr_drive int_od,
                                enum bmp5_intr_en_dis int_en,
                                struct bmp5_dev *dev)
{
 80024d2:	b590      	push	{r4, r7, lr}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4604      	mov	r4, r0
 80024da:	4608      	mov	r0, r1
 80024dc:	4611      	mov	r1, r2
 80024de:	461a      	mov	r2, r3
 80024e0:	4623      	mov	r3, r4
 80024e2:	71fb      	strb	r3, [r7, #7]
 80024e4:	4603      	mov	r3, r0
 80024e6:	71bb      	strb	r3, [r7, #6]
 80024e8:	460b      	mov	r3, r1
 80024ea:	717b      	strb	r3, [r7, #5]
 80024ec:	4613      	mov	r3, r2
 80024ee:	713b      	strb	r3, [r7, #4]
    /* Variable to store the function result */
    int8_t rslt;

    /* Variable to get interrupt configuration */
    uint8_t reg_data = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73bb      	strb	r3, [r7, #14]

    /* Variable to set interrupt source */
    uint8_t int_source = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	737b      	strb	r3, [r7, #13]

    /* Variable to get interrupt status */
    uint8_t int_status = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	733b      	strb	r3, [r7, #12]

    /* Get interrupt configuration */
    rslt = bmp5_get_regs(BMP5_REG_INT_CONFIG, &reg_data, 1, dev);
 80024fc:	f107 010e 	add.w	r1, r7, #14
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	2201      	movs	r2, #1
 8002504:	2014      	movs	r0, #20
 8002506:	f7ff fd94 	bl	8002032 <bmp5_get_regs>
 800250a:	4603      	mov	r3, r0
 800250c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 800250e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d160      	bne.n	80025d8 <bmp5_configure_interrupt+0x106>
    {
        /* Any change between latched/pulsed mode has to be applied while interrupt is disabled */
        /* Step 1 : Turn off all INT sources (INT_SOURCE -> 0x00) */
        rslt = bmp5_set_regs(BMP5_REG_INT_SOURCE, &int_source, 1, dev);
 8002516:	f107 010d 	add.w	r1, r7, #13
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	2201      	movs	r2, #1
 800251e:	2015      	movs	r0, #21
 8002520:	f7ff fdb7 	bl	8002092 <bmp5_set_regs>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 8002528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d153      	bne.n	80025d8 <bmp5_configure_interrupt+0x106>
        {
            /* Step 2 : Read the INT_STATUS register to clear the status */
            rslt = bmp5_get_regs(BMP5_REG_INT_STATUS, &int_status, 1, dev);
 8002530:	f107 010c 	add.w	r1, r7, #12
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	2201      	movs	r2, #1
 8002538:	201d      	movs	r0, #29
 800253a:	f7ff fd7a 	bl	8002032 <bmp5_get_regs>
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 8002542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d146      	bne.n	80025d8 <bmp5_configure_interrupt+0x106>
            {
                /* Step 3 : Set the desired mode in INT_CONFIG.int_mode */
                reg_data = BMP5_SET_BITS_POS_0(reg_data, BMP5_INT_MODE, int_mode);
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	b25b      	sxtb	r3, r3
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	b25a      	sxtb	r2, r3
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	b25b      	sxtb	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	b25b      	sxtb	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	73bb      	strb	r3, [r7, #14]
                reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_POL, int_pol);
 8002566:	7bbb      	ldrb	r3, [r7, #14]
 8002568:	b25b      	sxtb	r3, r3
 800256a:	f023 0302 	bic.w	r3, r3, #2
 800256e:	b25a      	sxtb	r2, r3
 8002570:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	b25b      	sxtb	r3, r3
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	b25b      	sxtb	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b25b      	sxtb	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	73bb      	strb	r3, [r7, #14]
                reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_OD, int_od);
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	b25b      	sxtb	r3, r3
 800258a:	f023 0304 	bic.w	r3, r3, #4
 800258e:	b25a      	sxtb	r2, r3
 8002590:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	b25b      	sxtb	r3, r3
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	b25b      	sxtb	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	73bb      	strb	r3, [r7, #14]
                reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_EN, int_en);
 80025a6:	7bbb      	ldrb	r3, [r7, #14]
 80025a8:	b25b      	sxtb	r3, r3
 80025aa:	f023 0308 	bic.w	r3, r3, #8
 80025ae:	b25a      	sxtb	r2, r3
 80025b0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	4313      	orrs	r3, r2
 80025c0:	b25b      	sxtb	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	73bb      	strb	r3, [r7, #14]

                /* Finally transfer the interrupt configurations */
                rslt = bmp5_set_regs(BMP5_REG_INT_CONFIG, &reg_data, 1, dev);
 80025c6:	f107 010e 	add.w	r1, r7, #14
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	2201      	movs	r2, #1
 80025ce:	2014      	movs	r0, #20
 80025d0:	f7ff fd5f 	bl	8002092 <bmp5_set_regs>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80025d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd90      	pop	{r4, r7, pc}

080025e4 <bmp5_get_osr_odr_press_config>:
/*!
 *  @brief This API gets the configuration for oversampling of temperature, oversampling of
 *  pressure and ODR configuration along with pressure enable.
 */
int8_t bmp5_get_osr_odr_press_config(struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store OSR and ODR config */
    uint8_t reg_data[2];

    if (osr_odr_press_cfg != NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d02b      	beq.n	800264c <bmp5_get_osr_odr_press_config+0x68>
    {
        /* Get OSR and ODR configuration in burst read */
        rslt = bmp5_get_regs(BMP5_REG_OSR_CONFIG, reg_data, 2, dev);
 80025f4:	f107 010c 	add.w	r1, r7, #12
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2202      	movs	r2, #2
 80025fc:	2036      	movs	r0, #54	@ 0x36
 80025fe:	f7ff fd18 	bl	8002032 <bmp5_get_regs>
 8002602:	4603      	mov	r3, r0
 8002604:	73fb      	strb	r3, [r7, #15]
        //BMP5_REG_OSR_CONFIG adresinden başla ve 2 bayt oku.
        //Bu iki bayt içinde hem OSR hem ODR ayarları bulunur.

        if (rslt == BMP5_OK)
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d120      	bne.n	8002650 <bmp5_get_osr_odr_press_config+0x6c>
        {
            //Bitleri parçala ve yapı içine doldur:
            osr_odr_press_cfg->osr_t = BMP5_GET_BITS_POS_0(reg_data[0], BMP5_TEMP_OS);
 800260e:	7b3b      	ldrb	r3, [r7, #12]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	b2da      	uxtb	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	701a      	strb	r2, [r3, #0]
            osr_odr_press_cfg->osr_p = BMP5_GET_BITSLICE(reg_data[0], BMP5_PRESS_OS);
 800261a:	7b3b      	ldrb	r3, [r7, #12]
 800261c:	10db      	asrs	r3, r3, #3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	b2da      	uxtb	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	705a      	strb	r2, [r3, #1]
            osr_odr_press_cfg->press_en = BMP5_GET_BITSLICE(reg_data[0], BMP5_PRESS_EN);
 800262a:	7b3b      	ldrb	r3, [r7, #12]
 800262c:	119b      	asrs	r3, r3, #6
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	b2da      	uxtb	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	709a      	strb	r2, [r3, #2]
            osr_odr_press_cfg->odr = BMP5_GET_BITSLICE(reg_data[1], BMP5_ODR);
 800263a:	7b7b      	ldrb	r3, [r7, #13]
 800263c:	109b      	asrs	r3, r3, #2
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	b2da      	uxtb	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	70da      	strb	r2, [r3, #3]
 800264a:	e001      	b.n	8002650 <bmp5_get_osr_odr_press_config+0x6c>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800264c:	23ff      	movs	r3, #255	@ 0xff
 800264e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <bmp5_set_osr_odr_press_config>:
 *
 *  @note If ODR is set to a value higher than 5Hz then powermode is set as standby mode, as ODR value greater than 5HZ
 *  without disabling deep-standby mode makes powermode invalid.
 */
int8_t bmp5_set_osr_odr_press_config(const struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
    /* Variable to store the function result */
    int8_t rslt = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]

    /* Variable to set ODR and OSR config */
    uint8_t reg_data[2] = { 0 };
 800266a:	2300      	movs	r3, #0
 800266c:	81bb      	strh	r3, [r7, #12]

    if (osr_odr_press_cfg != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d065      	beq.n	8002740 <bmp5_set_osr_odr_press_config+0xe4>
        /* If ODR is set to a value higher than 5Hz then powermode is set as standby mode, as ODR value greater than 5HZ
         * without disabling deep-standby mode makes powermode invalid.
         * NOTE: Register value for 5Hz is greater compared to ODRs higher than it. Thus in this below condition odr
         * is checked whether less than 5Hz macro.
         */
        if (osr_odr_press_cfg->odr < BMP5_ODR_05_HZ)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	78db      	ldrb	r3, [r3, #3]
 8002678:	2b17      	cmp	r3, #23
 800267a:	d804      	bhi.n	8002686 <bmp5_set_osr_odr_press_config+0x2a>
        {
            rslt = set_standby_mode(dev);
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	f000 fa5f 	bl	8002b40 <set_standby_mode>
 8002682:	4603      	mov	r3, r0
 8002684:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMP5_OK)
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d15a      	bne.n	8002744 <bmp5_set_osr_odr_press_config+0xe8>
        {
            rslt = bmp5_get_regs(BMP5_REG_OSR_CONFIG, reg_data, 2, dev);
 800268e:	f107 010c 	add.w	r1, r7, #12
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2202      	movs	r2, #2
 8002696:	2036      	movs	r0, #54	@ 0x36
 8002698:	f7ff fccb 	bl	8002032 <bmp5_get_regs>
 800269c:	4603      	mov	r3, r0
 800269e:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 80026a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d14d      	bne.n	8002744 <bmp5_set_osr_odr_press_config+0xe8>
            {
                reg_data[0] = BMP5_SET_BITS_POS_0(reg_data[0], BMP5_TEMP_OS, osr_odr_press_cfg->osr_t);
 80026a8:	7b3b      	ldrb	r3, [r7, #12]
 80026aa:	b25b      	sxtb	r3, r3
 80026ac:	f023 0307 	bic.w	r3, r3, #7
 80026b0:	b25a      	sxtb	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b25b      	sxtb	r3, r3
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	4313      	orrs	r3, r2
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	733b      	strb	r3, [r7, #12]
                reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_PRESS_OS, osr_odr_press_cfg->osr_p);
 80026c6:	7b3b      	ldrb	r3, [r7, #12]
 80026c8:	b25b      	sxtb	r3, r3
 80026ca:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80026ce:	b25a      	sxtb	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	b25b      	sxtb	r3, r3
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	b25b      	sxtb	r3, r3
 80026da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026de:	b25b      	sxtb	r3, r3
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	733b      	strb	r3, [r7, #12]
                reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_PRESS_EN, osr_odr_press_cfg->press_en);
 80026e8:	7b3b      	ldrb	r3, [r7, #12]
 80026ea:	b25b      	sxtb	r3, r3
 80026ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026f0:	b25a      	sxtb	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	789b      	ldrb	r3, [r3, #2]
 80026f6:	b25b      	sxtb	r3, r3
 80026f8:	019b      	lsls	r3, r3, #6
 80026fa:	b25b      	sxtb	r3, r3
 80026fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002700:	b25b      	sxtb	r3, r3
 8002702:	4313      	orrs	r3, r2
 8002704:	b25b      	sxtb	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	733b      	strb	r3, [r7, #12]
                reg_data[1] = BMP5_SET_BITSLICE(reg_data[1], BMP5_ODR, osr_odr_press_cfg->odr);
 800270a:	7b7b      	ldrb	r3, [r7, #13]
 800270c:	b25b      	sxtb	r3, r3
 800270e:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8002712:	b25a      	sxtb	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	78db      	ldrb	r3, [r3, #3]
 8002718:	b25b      	sxtb	r3, r3
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	b25b      	sxtb	r3, r3
 800271e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8002722:	b25b      	sxtb	r3, r3
 8002724:	4313      	orrs	r3, r2
 8002726:	b25b      	sxtb	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	737b      	strb	r3, [r7, #13]

                /* Set ODR and OSR configuration */
                rslt = bmp5_set_regs(BMP5_REG_OSR_CONFIG, reg_data, 2, dev);
 800272c:	f107 010c 	add.w	r1, r7, #12
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2202      	movs	r2, #2
 8002734:	2036      	movs	r0, #54	@ 0x36
 8002736:	f7ff fcac 	bl	8002092 <bmp5_set_regs>
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]
 800273e:	e001      	b.n	8002744 <bmp5_set_osr_odr_press_config+0xe8>
            }
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8002740:	23ff      	movs	r3, #255	@ 0xff
 8002742:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <bmp5_get_iir_config>:

/*!
 *  @brief This API gets the configuration for IIR of temperature and pressure.
 */
int8_t bmp5_get_iir_config(struct bmp5_iir_config *iir_cfg, struct bmp5_dev *dev)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to get IIR config */
    uint8_t reg_data[2];

    if (iir_cfg != NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d02f      	beq.n	80027c0 <bmp5_get_iir_config+0x70>
    {
        /* Get IIR configuration */
        rslt = bmp5_get_regs(BMP5_REG_DSP_CONFIG, reg_data, 2, dev);
 8002760:	f107 010c 	add.w	r1, r7, #12
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2202      	movs	r2, #2
 8002768:	2030      	movs	r0, #48	@ 0x30
 800276a:	f7ff fc62 	bl	8002032 <bmp5_get_regs>
 800276e:	4603      	mov	r3, r0
 8002770:	73fb      	strb	r3, [r7, #15]

        iir_cfg->shdw_set_iir_t = BMP5_GET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_TEMP);
 8002772:	7b3b      	ldrb	r3, [r7, #12]
 8002774:	10db      	asrs	r3, r3, #3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	b2da      	uxtb	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	709a      	strb	r2, [r3, #2]
        iir_cfg->shdw_set_iir_p = BMP5_GET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_PRESS);
 8002782:	7b3b      	ldrb	r3, [r7, #12]
 8002784:	115b      	asrs	r3, r3, #5
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	b2da      	uxtb	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	70da      	strb	r2, [r3, #3]
        iir_cfg->iir_flush_forced_en = BMP5_GET_BITSLICE(reg_data[0], BMP5_IIR_FLUSH_FORCED_EN);
 8002792:	7b3b      	ldrb	r3, [r7, #12]
 8002794:	109b      	asrs	r3, r3, #2
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	b2da      	uxtb	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	711a      	strb	r2, [r3, #4]

        iir_cfg->set_iir_t = BMP5_GET_BITS_POS_0(reg_data[1], BMP5_SET_IIR_TEMP);
 80027a2:	7b7b      	ldrb	r3, [r7, #13]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	701a      	strb	r2, [r3, #0]
        iir_cfg->set_iir_p = BMP5_GET_BITSLICE(reg_data[1], BMP5_SET_IIR_PRESS);
 80027ae:	7b7b      	ldrb	r3, [r7, #13]
 80027b0:	10db      	asrs	r3, r3, #3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	705a      	strb	r2, [r3, #1]
 80027be:	e001      	b.n	80027c4 <bmp5_get_iir_config+0x74>
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 80027c0:	23ff      	movs	r3, #255	@ 0xff
 80027c2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80027c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <bmp5_set_iir_config>:
 *
 *  @note If IIR value for both temperature and pressure is set a value other than bypass then powermode is set
 *  as standby mode, as IIR with value other than bypass without disabling deep-standby mode makes powermode invalid.
 */
int8_t bmp5_set_iir_config(const struct bmp5_iir_config *iir_cfg, struct bmp5_dev *dev)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
    /* Variable to store the function result */
    int8_t rslt = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]

    /* Variable to store existing powermode */
    enum bmp5_powermode curr_pwrmode;

    if (iir_cfg != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d041      	beq.n	8002868 <bmp5_set_iir_config+0x98>
    {
        /* If IIR value for both temperature and pressure is set a value other than bypass then powermode is set
         * as standby mode, as IIR with value other than bypass without disabling deep-standby mode makes powermode
         * invalid.
         */
        if ((iir_cfg->set_iir_t != BMP5_IIR_FILTER_BYPASS) || (iir_cfg->set_iir_p != BMP5_IIR_FILTER_BYPASS))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d103      	bne.n	80027f4 <bmp5_set_iir_config+0x24>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <bmp5_set_iir_config+0x2e>
        {
            rslt = set_standby_mode(dev);
 80027f4:	6838      	ldr	r0, [r7, #0]
 80027f6:	f000 f9a3 	bl	8002b40 <set_standby_mode>
 80027fa:	4603      	mov	r3, r0
 80027fc:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMP5_OK)
 80027fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d132      	bne.n	800286c <bmp5_set_iir_config+0x9c>
        {
            rslt = bmp5_get_power_mode(&curr_pwrmode, dev);
 8002806:	f107 030e 	add.w	r3, r7, #14
 800280a:	6839      	ldr	r1, [r7, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fcf9 	bl	8002204 <bmp5_get_power_mode>
 8002812:	4603      	mov	r3, r0
 8002814:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d126      	bne.n	800286c <bmp5_set_iir_config+0x9c>
            {
                /* IIR configuration is writable only during STANDBY mode(as per datasheet) */
                if (curr_pwrmode != BMP5_POWERMODE_STANDBY)
 800281e:	7bbb      	ldrb	r3, [r7, #14]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <bmp5_set_iir_config+0x60>
                {
                    /* If sensor is not in standby mode, set sensor in standby mode */
                    rslt = bmp5_set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 8002824:	6839      	ldr	r1, [r7, #0]
 8002826:	2000      	movs	r0, #0
 8002828:	f7ff fd3c 	bl	80022a4 <bmp5_set_power_mode>
 800282c:	4603      	mov	r3, r0
 800282e:	73fb      	strb	r3, [r7, #15]
                }

                if (rslt == BMP5_OK)
 8002830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d105      	bne.n	8002844 <bmp5_set_iir_config+0x74>
                {
                    rslt = set_iir_config(iir_cfg, dev);
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f99f 	bl	8002b7e <set_iir_config>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
                }

                /* If previous mode is not standbymode return sensor to that previous mode
                * after setting iir configuration
                */
                if (rslt == BMP5_OK)
 8002844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10f      	bne.n	800286c <bmp5_set_iir_config+0x9c>
                {
                    /* Since IIR works only in standby mode we are not re-writing to deepstandby mode
                    * as deep standby mode resets the IIR settings to default
                    */
                    if ((curr_pwrmode != BMP5_POWERMODE_STANDBY) && (curr_pwrmode != BMP5_POWERMODE_DEEP_STANDBY))
 800284c:	7bbb      	ldrb	r3, [r7, #14]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00c      	beq.n	800286c <bmp5_set_iir_config+0x9c>
 8002852:	7bbb      	ldrb	r3, [r7, #14]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d009      	beq.n	800286c <bmp5_set_iir_config+0x9c>
                    {
                        rslt = bmp5_set_power_mode(curr_pwrmode, dev);
 8002858:	7bbb      	ldrb	r3, [r7, #14]
 800285a:	6839      	ldr	r1, [r7, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fd21 	bl	80022a4 <bmp5_set_power_mode>
 8002862:	4603      	mov	r3, r0
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	e001      	b.n	800286c <bmp5_set_iir_config+0x9c>
            }
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8002868:	23ff      	movs	r3, #255	@ 0xff
 800286a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800286c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp5_dev *dev)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
    //dev yapısı ve içindeki fonksiyonların atanmış (null olmayan) olup olmadığını kontrol eder
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <null_ptr_check+0x26>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <null_ptr_check+0x26>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <null_ptr_check+0x26>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BMP5_E_NULL_PTR;
 800289e:	23ff      	movs	r3, #255	@ 0xff
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	e001      	b.n	80028a8 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP5_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <validate_chip_id>:

/*!
 * @brief This internal API is used to validate the chip id of the sensor.
 */
static int8_t validate_chip_id(uint8_t chip_id, struct bmp5_dev *dev)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    if ((chip_id == BMP5_CHIP_ID_PRIM) || (chip_id == BMP5_CHIP_ID_SEC))
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	2b50      	cmp	r3, #80	@ 0x50
 80028c8:	d002      	beq.n	80028d0 <validate_chip_id+0x18>
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	2b51      	cmp	r3, #81	@ 0x51
 80028ce:	d105      	bne.n	80028dc <validate_chip_id+0x24>
    {
        /* Updating chip_id in device structure */
        dev->chip_id = chip_id;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	79fa      	ldrb	r2, [r7, #7]
 80028d4:	701a      	strb	r2, [r3, #0]
        rslt = BMP5_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	e001      	b.n	80028e0 <validate_chip_id+0x28>
    }
    else
    {
        rslt = BMP5_E_DEV_NOT_FOUND;
 80028dc:	23fd      	movs	r3, #253	@ 0xfd
 80028de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <power_up_check>:
/*!
 * @brief This internal API is used to validate the post power-up procedure.
 */

static int8_t power_up_check(struct bmp5_dev *dev)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t nvm_status;
    uint8_t por_status;

    bmp5_soft_reset(dev); //Sensör yazılımsal olarak resetleniyor.
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fc26 	bl	800214a <bmp5_soft_reset>
    HAL_Delay(10);
 80028fe:	200a      	movs	r0, #10
 8002900:	f001 fd2e 	bl	8004360 <HAL_Delay>

    rslt = get_nvm_status(&nvm_status, dev); //Sensör içindeki NVM (kalıcı bellek) hazır mı?
 8002904:	f107 030e 	add.w	r3, r7, #14
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f99f 	bl	8002c4e <get_nvm_status>
 8002910:	4603      	mov	r3, r0
 8002912:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d122      	bne.n	8002962 <power_up_check+0x72>
    {
        /* Check if nvm_rdy status = 1 and nvm_err status = 0 to proceed */
        if ((nvm_status & BMP5_INT_NVM_RDY) && (!(nvm_status & BMP5_INT_NVM_ERR)))
 800291c:	7bbb      	ldrb	r3, [r7, #14]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d01b      	beq.n	800295e <power_up_check+0x6e>
 8002926:	7bbb      	ldrb	r3, [r7, #14]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d116      	bne.n	800295e <power_up_check+0x6e>
        {
            rslt = bmp5_get_interrupt_status(&por_status, dev); //Bu, sensörün "açılış/reset işlemi tamamlandı mı?" bilgisini alır.
 8002930:	f107 030d 	add.w	r3, r7, #13
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fc4a 	bl	80021d0 <bmp5_get_interrupt_status>
 800293c:	4603      	mov	r3, r0
 800293e:	73fb      	strb	r3, [r7, #15]
            //POR (Power-On Reset) durumu kontrol edilir
            if (rslt == BMP5_OK)
 8002940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10c      	bne.n	8002962 <power_up_check+0x72>
            {
                /* Check if por/soft-reset complete status = 1 to proceed */
                //POR( bir cihazın ilk defa enerji verildiğinde kendini resetlemesi anlamına gelir.) tamamlanmış mı?
                if (por_status & BMP5_INT_ASSERTED_POR_SOFTRESET_COMPLETE)
 8002948:	7b7b      	ldrb	r3, [r7, #13]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <power_up_check+0x68>
                {
                    rslt = BMP5_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP5_OK)
 8002956:	e004      	b.n	8002962 <power_up_check+0x72>
                }
                else
                {
                    rslt = BMP5_E_POWER_UP;
 8002958:	23fb      	movs	r3, #251	@ 0xfb
 800295a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP5_OK)
 800295c:	e001      	b.n	8002962 <power_up_check+0x72>
                }
            }
        }
        else
        {
            rslt = BMP5_E_POWER_UP;
 800295e:	23fb      	movs	r3, #251	@ 0xfb
 8002960:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002962:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <check_deepstandby_mode>:

/*!
 * @brief This internal API is used to check if sensor is in deepstandby mode.
 */
static int8_t check_deepstandby_mode(enum bmp5_powermode *powermode, struct bmp5_dev *dev)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t fifo_frame_sel;
    struct bmp5_iir_config iir_cfg = { 0 };
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	711a      	strb	r2, [r3, #4]
    struct bmp5_osr_odr_press_config osr_odr_press_cfg = { 0 };
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]

    rslt = bmp5_get_regs(BMP5_REG_FIFO_SEL, &fifo_frame_sel, 1, dev);
 8002986:	f107 0116 	add.w	r1, r7, #22
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2201      	movs	r2, #1
 800298e:	2018      	movs	r0, #24
 8002990:	f7ff fb4f 	bl	8002032 <bmp5_get_regs>
 8002994:	4603      	mov	r3, r0
 8002996:	75fb      	strb	r3, [r7, #23]
    fifo_frame_sel = BMP5_GET_BITS_POS_0(fifo_frame_sel, BMP5_FIFO_FRAME_SEL);
 8002998:	7dbb      	ldrb	r3, [r7, #22]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	75bb      	strb	r3, [r7, #22]

    if (rslt == BMP5_OK)
 80029a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d113      	bne.n	80029d2 <check_deepstandby_mode+0x64>
    {
        rslt = bmp5_get_osr_odr_press_config(&osr_odr_press_cfg, dev);
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	6839      	ldr	r1, [r7, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fe17 	bl	80025e4 <bmp5_get_osr_odr_press_config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP5_OK)
 80029ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d107      	bne.n	80029d2 <check_deepstandby_mode+0x64>
        {
            rslt = bmp5_get_iir_config(&iir_cfg, dev);
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	6839      	ldr	r1, [r7, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fec1 	bl	8002750 <bmp5_get_iir_config>
 80029ce:	4603      	mov	r3, r0
 80029d0:	75fb      	strb	r3, [r7, #23]
    }

    /* As per datasheet odr should be less than 5Hz. But register value for 5Hz is less than 4Hz and so,
     * thus in this below condition odr is checked whether greater than 5Hz macro.
     */
    if ((osr_odr_press_cfg.odr > BMP5_ODR_05_HZ) && (fifo_frame_sel == BMP5_DISABLE) &&
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	2b18      	cmp	r3, #24
 80029d6:	d90b      	bls.n	80029f0 <check_deepstandby_mode+0x82>
 80029d8:	7dbb      	ldrb	r3, [r7, #22]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <check_deepstandby_mode+0x82>
        (iir_cfg.set_iir_t == BMP5_IIR_FILTER_BYPASS) && (iir_cfg.set_iir_p == BMP5_IIR_FILTER_BYPASS))
 80029de:	7c3b      	ldrb	r3, [r7, #16]
    if ((osr_odr_press_cfg.odr > BMP5_ODR_05_HZ) && (fifo_frame_sel == BMP5_DISABLE) &&
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <check_deepstandby_mode+0x82>
        (iir_cfg.set_iir_t == BMP5_IIR_FILTER_BYPASS) && (iir_cfg.set_iir_p == BMP5_IIR_FILTER_BYPASS))
 80029e4:	7c7b      	ldrb	r3, [r7, #17]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <check_deepstandby_mode+0x82>
    {
        *powermode = BMP5_POWERMODE_DEEP_STANDBY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2204      	movs	r2, #4
 80029ee:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80029f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <set_deep_standby_mode>:

/*!
 * @brief This internal API is used to set sensor in deep standby mode.
 */
static int8_t set_deep_standby_mode(struct bmp5_dev *dev)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp5_get_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 8002a04:	f107 010e 	add.w	r1, r7, #14
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2037      	movs	r0, #55	@ 0x37
 8002a0e:	f7ff fb10 	bl	8002032 <bmp5_get_regs>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d155      	bne.n	8002aca <set_deep_standby_mode+0xce>
    {
        /* Setting deep_dis = 0(BMP5_DEEP_ENABLED) enables the deep standby mode */
        reg_data = BMP5_SET_BIT_VAL_0(reg_data, BMP5_DEEP_DISABLE);
 8002a1e:	7bbb      	ldrb	r3, [r7, #14]
 8002a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	73bb      	strb	r3, [r7, #14]

        /* Set ODR less then 5Hz - ODR used is 1Hz */
        reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_ODR, BMP5_ODR_01_HZ);
 8002a28:	7bbb      	ldrb	r3, [r7, #14]
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002a36:	b25b      	sxtb	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	73bb      	strb	r3, [r7, #14]

        /* Write the value to the odr config register(0x37) */
        rslt = bmp5_set_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 8002a3c:	f107 010e 	add.w	r1, r7, #14
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	2037      	movs	r0, #55	@ 0x37
 8002a46:	f7ff fb24 	bl	8002092 <bmp5_set_regs>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 8002a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d11a      	bne.n	8002a8c <set_deep_standby_mode+0x90>
        {
            rslt = bmp5_get_regs(BMP5_REG_DSP_IIR, &reg_data, 1, dev);
 8002a56:	f107 010e 	add.w	r1, r7, #14
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	2031      	movs	r0, #49	@ 0x31
 8002a60:	f7ff fae7 	bl	8002032 <bmp5_get_regs>
 8002a64:	4603      	mov	r3, r0
 8002a66:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 8002a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10d      	bne.n	8002a8c <set_deep_standby_mode+0x90>
                /* Set iir_t and iir_p as Bypass(0x00) */

                /* The register holds only iir_t and iir_p and the last 2 bits are reserved.
                 * Thus using the macro BMP5_IIR_BYPASS(0xC0) the register value is set as zero.
                 */
                reg_data = reg_data & BMP5_IIR_BYPASS;
 8002a70:	7bbb      	ldrb	r3, [r7, #14]
 8002a72:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	73bb      	strb	r3, [r7, #14]

                /* Write the value to the IIR register(0x31) */
                rslt = bmp5_set_regs(BMP5_REG_DSP_IIR, &reg_data, 1, dev);
 8002a7a:	f107 010e 	add.w	r1, r7, #14
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	2031      	movs	r0, #49	@ 0x31
 8002a84:	f7ff fb05 	bl	8002092 <bmp5_set_regs>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	73fb      	strb	r3, [r7, #15]
            }
        }

        if (rslt == BMP5_OK)
 8002a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11a      	bne.n	8002aca <set_deep_standby_mode+0xce>
        {
            rslt = bmp5_get_regs(BMP5_REG_FIFO_SEL, &reg_data, 1, dev);
 8002a94:	f107 010e 	add.w	r1, r7, #14
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	2018      	movs	r0, #24
 8002a9e:	f7ff fac8 	bl	8002032 <bmp5_get_regs>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 8002aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <set_deep_standby_mode+0xce>
            {
                /* Disable fifo frame selct */
                reg_data = BMP5_SET_BIT_VAL_0(reg_data, BMP5_FIFO_FRAME_SEL);
 8002aae:	7bbb      	ldrb	r3, [r7, #14]
 8002ab0:	f023 0303 	bic.w	r3, r3, #3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	73bb      	strb	r3, [r7, #14]

                /* Write the value to the fifo select register(0x18) */
                rslt = bmp5_set_regs(BMP5_REG_FIFO_SEL, &reg_data, 1, dev);
 8002ab8:	f107 010e 	add.w	r1, r7, #14
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2018      	movs	r0, #24
 8002ac2:	f7ff fae6 	bl	8002092 <bmp5_set_regs>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <set_power_mode>:

/*!
 * @brief This internal API is used to set sensor in standby or normal or forced or continous powermode.
 */
static int8_t set_power_mode(enum bmp5_powermode powermode, struct bmp5_dev *dev)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	4603      	mov	r3, r0
 8002ade:	6039      	str	r1, [r7, #0]
 8002ae0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp5_get_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 8002ae2:	f107 010e 	add.w	r1, r7, #14
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2037      	movs	r0, #55	@ 0x37
 8002aec:	f7ff faa1 	bl	8002032 <bmp5_get_regs>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d11b      	bne.n	8002b34 <set_power_mode+0x5e>
    {
        /* Setting deep_dis = 1(BMP5_DEEP_DISABLED) disables the deep standby mode */
        reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_DEEP_DISABLE, BMP5_DEEP_DISABLED);
 8002afc:	7bbb      	ldrb	r3, [r7, #14]
 8002afe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	73bb      	strb	r3, [r7, #14]

        reg_data = BMP5_SET_BITS_POS_0(reg_data, BMP5_POWERMODE, powermode);
 8002b06:	7bbb      	ldrb	r3, [r7, #14]
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	b25a      	sxtb	r2, r3
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	b25b      	sxtb	r3, r3
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b25b      	sxtb	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	73bb      	strb	r3, [r7, #14]

        rslt = bmp5_set_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 8002b22:	f107 010e 	add.w	r1, r7, #14
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	2037      	movs	r0, #55	@ 0x37
 8002b2c:	f7ff fab1 	bl	8002092 <bmp5_set_regs>
 8002b30:	4603      	mov	r3, r0
 8002b32:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <set_standby_mode>:

/*!
 * @brief This internal API is used to set sensor in standby powermode when powermode is deepstandby mode.
 */
static int8_t set_standby_mode(struct bmp5_dev *dev)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    enum bmp5_powermode pwrmode;

    rslt = bmp5_get_power_mode(&pwrmode, dev);
 8002b48:	f107 030e 	add.w	r3, r7, #14
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fb58 	bl	8002204 <bmp5_get_power_mode>
 8002b54:	4603      	mov	r3, r0
 8002b56:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d108      	bne.n	8002b72 <set_standby_mode+0x32>
    {
        if (pwrmode == BMP5_POWERMODE_DEEP_STANDBY)
 8002b60:	7bbb      	ldrb	r3, [r7, #14]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d105      	bne.n	8002b72 <set_standby_mode+0x32>
        {
            rslt = bmp5_set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7ff fb9b 	bl	80022a4 <bmp5_set_power_mode>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <set_iir_config>:

/*!
 * @brief This internal API is used to set the IIR for temperature and pressure.
 */
static int8_t set_iir_config(const struct bmp5_iir_config *iir_cfg, struct bmp5_dev *dev)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to set IIR config */
    uint8_t reg_data[2];

    rslt = bmp5_get_regs(BMP5_REG_DSP_CONFIG, reg_data, 2, dev);
 8002b88:	f107 010c 	add.w	r1, r7, #12
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	2030      	movs	r0, #48	@ 0x30
 8002b92:	f7ff fa4e 	bl	8002032 <bmp5_get_regs>
 8002b96:	4603      	mov	r3, r0
 8002b98:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d14f      	bne.n	8002c42 <set_iir_config+0xc4>
    {
        reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_TEMP, iir_cfg->shdw_set_iir_t);
 8002ba2:	7b3b      	ldrb	r3, [r7, #12]
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	f023 0308 	bic.w	r3, r3, #8
 8002baa:	b25a      	sxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	789b      	ldrb	r3, [r3, #2]
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	b25b      	sxtb	r3, r3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	b25b      	sxtb	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	733b      	strb	r3, [r7, #12]
        reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_PRESS, iir_cfg->shdw_set_iir_p);
 8002bc4:	7b3b      	ldrb	r3, [r7, #12]
 8002bc6:	b25b      	sxtb	r3, r3
 8002bc8:	f023 0320 	bic.w	r3, r3, #32
 8002bcc:	b25a      	sxtb	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	78db      	ldrb	r3, [r3, #3]
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	015b      	lsls	r3, r3, #5
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	4313      	orrs	r3, r2
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	733b      	strb	r3, [r7, #12]
        reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_IIR_FLUSH_FORCED_EN, iir_cfg->iir_flush_forced_en);
 8002be6:	7b3b      	ldrb	r3, [r7, #12]
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	f023 0304 	bic.w	r3, r3, #4
 8002bee:	b25a      	sxtb	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	791b      	ldrb	r3, [r3, #4]
 8002bf4:	b25b      	sxtb	r3, r3
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	b25b      	sxtb	r3, r3
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	b25b      	sxtb	r3, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	733b      	strb	r3, [r7, #12]

        reg_data[1] = iir_cfg->set_iir_t;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	737b      	strb	r3, [r7, #13]
        reg_data[1] = BMP5_SET_BITSLICE(reg_data[1], BMP5_SET_IIR_PRESS, iir_cfg->set_iir_p);
 8002c0e:	7b7b      	ldrb	r3, [r7, #13]
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002c16:	b25a      	sxtb	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	785b      	ldrb	r3, [r3, #1]
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	b25b      	sxtb	r3, r3
 8002c22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c26:	b25b      	sxtb	r3, r3
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b25b      	sxtb	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	737b      	strb	r3, [r7, #13]

        /* Set IIR configuration */
        rslt = bmp5_set_regs(BMP5_REG_DSP_CONFIG, reg_data, 2, dev);
 8002c30:	f107 010c 	add.w	r1, r7, #12
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2202      	movs	r2, #2
 8002c38:	2030      	movs	r0, #48	@ 0x30
 8002c3a:	f7ff fa2a 	bl	8002092 <bmp5_set_regs>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <get_nvm_status>:

/*!
 *  @brief This API is used to get nvm status.
 */
static int8_t get_nvm_status(uint8_t *nvm_status, struct bmp5_dev *dev)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (nvm_status != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <get_nvm_status+0x22>
    {
        rslt = bmp5_get_regs(BMP5_REG_STATUS, nvm_status, 1, dev);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2201      	movs	r2, #1
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	2028      	movs	r0, #40	@ 0x28
 8002c66:	f7ff f9e4 	bl	8002032 <bmp5_get_regs>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	e001      	b.n	8002c74 <get_nvm_status+0x26>
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8002c70:	23ff      	movs	r3, #255	@ 0xff
 8002c72:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <bmp5_i2c_read>:
 */
BMP5_INTF_RET_TYPE bmp5_i2c_read(uint8_t reg_addr,
                                  uint8_t *reg_data,
                                  uint32_t length,
                                  void *intf_ptr)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08c      	sub	sp, #48	@ 0x30
 8002c84:	af04      	add	r7, sp, #16
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	73fb      	strb	r3, [r7, #15]
	uint8_t device_addr = BMP581_I2C_ADDR<<1;
 8002c90:	238c      	movs	r3, #140	@ 0x8c
 8002c92:	77fb      	strb	r3, [r7, #31]

	    (void)intf_ptr;
    HAL_StatusTypeDef status;
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	61bb      	str	r3, [r7, #24]

    // Hattın meşgul olup olmadığını kontrol et

        HAL_I2C_DeInit(hi2c);
 8002c98:	69b8      	ldr	r0, [r7, #24]
 8002c9a:	f002 fc03 	bl	80054a4 <HAL_I2C_DeInit>
        HAL_Delay(10);
 8002c9e:	200a      	movs	r0, #10
 8002ca0:	f001 fb5e 	bl	8004360 <HAL_Delay>
        HAL_I2C_Init(hi2c);
 8002ca4:	69b8      	ldr	r0, [r7, #24]
 8002ca6:	f002 fab9 	bl	800521c <HAL_I2C_Init>



    // Cihaz hazır mı?
    if (HAL_I2C_IsDeviceReady(hi2c, device_addr, 3, 10) != HAL_OK)
 8002caa:	7ffb      	ldrb	r3, [r7, #31]
 8002cac:	b299      	uxth	r1, r3
 8002cae:	230a      	movs	r3, #10
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	69b8      	ldr	r0, [r7, #24]
 8002cb4:	f002 ff52 	bl	8005b5c <HAL_I2C_IsDeviceReady>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <bmp5_i2c_read+0x4e>
    {
        printf("I2C Cihaz hazır değil! Adres: 0x%02X\n", device_addr);
 8002cbe:	7ffb      	ldrb	r3, [r7, #31]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4826      	ldr	r0, [pc, #152]	@ (8002d5c <bmp5_i2c_read+0xdc>)
 8002cc4:	f010 f966 	bl	8012f94 <iprintf>
        return BMP5_E_COM_FAIL;
 8002cc8:	f06f 0301 	mvn.w	r3, #1
 8002ccc:	e041      	b.n	8002d52 <bmp5_i2c_read+0xd2>
    }
    status = HAL_I2C_IsDeviceReady(hi2c, 0x8C, 3, 10);
 8002cce:	230a      	movs	r3, #10
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	218c      	movs	r1, #140	@ 0x8c
 8002cd4:	69b8      	ldr	r0, [r7, #24]
 8002cd6:	f002 ff41 	bl	8005b5c <HAL_I2C_IsDeviceReady>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	75fb      	strb	r3, [r7, #23]
    printf("IsDeviceReady: %s\n", (status == HAL_OK) ? "OK" : "FAIL");
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <bmp5_i2c_read+0x68>
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d60 <bmp5_i2c_read+0xe0>)
 8002ce6:	e000      	b.n	8002cea <bmp5_i2c_read+0x6a>
 8002ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d64 <bmp5_i2c_read+0xe4>)
 8002cea:	4619      	mov	r1, r3
 8002cec:	481e      	ldr	r0, [pc, #120]	@ (8002d68 <bmp5_i2c_read+0xe8>)
 8002cee:	f010 f951 	bl	8012f94 <iprintf>


    // Okuma işlemi
    status = HAL_I2C_Mem_Read(hi2c,
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	210a      	movs	r1, #10
 8002cfc:	9102      	str	r1, [sp, #8]
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2301      	movs	r3, #1
 8002d06:	218c      	movs	r1, #140	@ 0x8c
 8002d08:	69b8      	ldr	r0, [r7, #24]
 8002d0a:	f002 fcf5 	bl	80056f8 <HAL_I2C_Mem_Read>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	75fb      	strb	r3, [r7, #23]
                               reg_addr,
                               I2C_MEMADD_SIZE_8BIT,
                               reg_data,
                               length,
                               10);
    printf("READ: addr=0x%02X reg=0x%02X len=%lu\n", dev_addr, reg_addr, length);
 8002d12:	4b16      	ldr	r3, [pc, #88]	@ (8002d6c <bmp5_i2c_read+0xec>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4814      	ldr	r0, [pc, #80]	@ (8002d70 <bmp5_i2c_read+0xf0>)
 8002d1e:	f010 f939 	bl	8012f94 <iprintf>

    if (status != HAL_OK)
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <bmp5_i2c_read+0xb8>
    {
        printf("HAL_I2C_Mem_Read FAILED! Status=%d\n", status);
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4811      	ldr	r0, [pc, #68]	@ (8002d74 <bmp5_i2c_read+0xf4>)
 8002d2e:	f010 f931 	bl	8012f94 <iprintf>
        return BMP5_E_COM_FAIL;
 8002d32:	f06f 0301 	mvn.w	r3, #1
 8002d36:	e00c      	b.n	8002d52 <bmp5_i2c_read+0xd2>
    }




    if (status != HAL_OK)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <bmp5_i2c_read+0xd0>
    {
        printf("I2C READ ERROR: Reg=0x%02X Len=%lu Status=%d\n", reg_addr, length, status);
 8002d3e:	7bf9      	ldrb	r1, [r7, #15]
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	480c      	ldr	r0, [pc, #48]	@ (8002d78 <bmp5_i2c_read+0xf8>)
 8002d46:	f010 f925 	bl	8012f94 <iprintf>
        return BMP5_E_COM_FAIL;
 8002d4a:	f06f 0301 	mvn.w	r3, #1
 8002d4e:	e000      	b.n	8002d52 <bmp5_i2c_read+0xd2>
    }

    return BMP5_INTF_RET_SUCCESS;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3720      	adds	r7, #32
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	08015ee8 	.word	0x08015ee8
 8002d60:	08015f10 	.word	0x08015f10
 8002d64:	08015f14 	.word	0x08015f14
 8002d68:	08015f1c 	.word	0x08015f1c
 8002d6c:	200001fc 	.word	0x200001fc
 8002d70:	08015f30 	.word	0x08015f30
 8002d74:	08015f58 	.word	0x08015f58
 8002d78:	08015f7c 	.word	0x08015f7c

08002d7c <bmp5_i2c_write>:
 */
BMP5_INTF_RET_TYPE bmp5_i2c_write(uint8_t reg_addr,
                                   const uint8_t *reg_data,
                                   uint32_t length,
                                   void *intf_ptr)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af04      	add	r7, sp, #16
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4603      	mov	r3, r0
 8002d8a:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;

    // I2C handle'ı interface pointer'dan al
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	617b      	str	r3, [r7, #20]

    // I2C 8-bit adres (0x46 << 1 = 0x8C, veya 0x47 << 1 = 0x8E)
    uint8_t dev_addr = BMP581_I2C_ADDR;  // Örn: #define BMP581_I2C_ADDR (0x46 << 1)
 8002d90:	2346      	movs	r3, #70	@ 0x46
 8002d92:	74fb      	strb	r3, [r7, #19]

    // Yazma işlemini gerçekleştir
    status = HAL_I2C_Mem_Write(hi2c,
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	210a      	movs	r1, #10
 8002d9e:	9102      	str	r1, [sp, #8]
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2301      	movs	r3, #1
 8002da8:	218c      	movs	r1, #140	@ 0x8c
 8002daa:	6978      	ldr	r0, [r7, #20]
 8002dac:	f002 fbaa 	bl	8005504 <HAL_I2C_Mem_Write>
 8002db0:	4603      	mov	r3, r0
 8002db2:	74bb      	strb	r3, [r7, #18]
                               (uint8_t *)reg_data,
                               length,
                               10);  // timeout: 100 ms

    // Başarı kontrolü
    if (status != HAL_OK)
 8002db4:	7cbb      	ldrb	r3, [r7, #18]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <bmp5_i2c_write+0x50>
    {
        printf("I2C WRITE FAIL: Reg=0x%02X Len=%lu Status=%d\n", reg_addr, length, status);
 8002dba:	7bf9      	ldrb	r1, [r7, #15]
 8002dbc:	7cbb      	ldrb	r3, [r7, #18]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4805      	ldr	r0, [pc, #20]	@ (8002dd8 <bmp5_i2c_write+0x5c>)
 8002dc2:	f010 f8e7 	bl	8012f94 <iprintf>
        return BMP5_E_COM_FAIL;
 8002dc6:	f06f 0301 	mvn.w	r3, #1
 8002dca:	e000      	b.n	8002dce <bmp5_i2c_write+0x52>
    }

    return BMP5_INTF_RET_SUCCESS;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	08015fac 	.word	0x08015fac

08002ddc <bmp5_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmp5_error_codes_print_result(const char api_name[], int8_t rslt)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMP5_OK)
 8002de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d05d      	beq.n	8002eac <bmp5_error_codes_print_result+0xd0>
    {
        printf("%s\t", api_name);
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4830      	ldr	r0, [pc, #192]	@ (8002eb4 <bmp5_error_codes_print_result+0xd8>)
 8002df4:	f010 f8ce 	bl	8012f94 <iprintf>
        if (rslt == BMP5_E_NULL_PTR)
 8002df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d106      	bne.n	8002e10 <bmp5_error_codes_print_result+0x34>
        {
            printf("Error [%d] : Null pointer\r\n", rslt);
 8002e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e06:	4619      	mov	r1, r3
 8002e08:	482b      	ldr	r0, [pc, #172]	@ (8002eb8 <bmp5_error_codes_print_result+0xdc>)
 8002e0a:	f010 f8c3 	bl	8012f94 <iprintf>
        {
            /* For more error codes refer "*_defs.h" */
            printf("Error [%d] : Unknown error code\r\n", rslt);
        }
    }
}
 8002e0e:	e04d      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_COM_FAIL)
 8002e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e14:	f113 0f02 	cmn.w	r3, #2
 8002e18:	d106      	bne.n	8002e28 <bmp5_error_codes_print_result+0x4c>
            printf("Error [%d] : Communication failure\r\n", rslt);
 8002e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4826      	ldr	r0, [pc, #152]	@ (8002ebc <bmp5_error_codes_print_result+0xe0>)
 8002e22:	f010 f8b7 	bl	8012f94 <iprintf>
}
 8002e26:	e041      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_DEV_NOT_FOUND)
 8002e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e2c:	f113 0f03 	cmn.w	r3, #3
 8002e30:	d106      	bne.n	8002e40 <bmp5_error_codes_print_result+0x64>
            printf("Error [%d] : Device not found\r\n", rslt);
 8002e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e36:	4619      	mov	r1, r3
 8002e38:	4821      	ldr	r0, [pc, #132]	@ (8002ec0 <bmp5_error_codes_print_result+0xe4>)
 8002e3a:	f010 f8ab 	bl	8012f94 <iprintf>
}
 8002e3e:	e035      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_INVALID_CHIP_ID)
 8002e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e44:	f113 0f04 	cmn.w	r3, #4
 8002e48:	d106      	bne.n	8002e58 <bmp5_error_codes_print_result+0x7c>
            printf("Error [%d] : Invalid chip id\r\n", rslt);
 8002e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	481c      	ldr	r0, [pc, #112]	@ (8002ec4 <bmp5_error_codes_print_result+0xe8>)
 8002e52:	f010 f89f 	bl	8012f94 <iprintf>
}
 8002e56:	e029      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_POWER_UP)
 8002e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5c:	f113 0f05 	cmn.w	r3, #5
 8002e60:	d106      	bne.n	8002e70 <bmp5_error_codes_print_result+0x94>
            printf("Error [%d] : Power up error\r\n", rslt);
 8002e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e66:	4619      	mov	r1, r3
 8002e68:	4817      	ldr	r0, [pc, #92]	@ (8002ec8 <bmp5_error_codes_print_result+0xec>)
 8002e6a:	f010 f893 	bl	8012f94 <iprintf>
}
 8002e6e:	e01d      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_POR_SOFTRESET)
 8002e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e74:	f113 0f06 	cmn.w	r3, #6
 8002e78:	d106      	bne.n	8002e88 <bmp5_error_codes_print_result+0xac>
            printf("Error [%d] : Power-on reset/softreset failure\r\n", rslt);
 8002e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4812      	ldr	r0, [pc, #72]	@ (8002ecc <bmp5_error_codes_print_result+0xf0>)
 8002e82:	f010 f887 	bl	8012f94 <iprintf>
}
 8002e86:	e011      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_INVALID_POWERMODE)
 8002e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8c:	f113 0f07 	cmn.w	r3, #7
 8002e90:	d106      	bne.n	8002ea0 <bmp5_error_codes_print_result+0xc4>
            printf("Error [%d] : Invalid powermode\r\n", rslt);
 8002e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e96:	4619      	mov	r1, r3
 8002e98:	480d      	ldr	r0, [pc, #52]	@ (8002ed0 <bmp5_error_codes_print_result+0xf4>)
 8002e9a:	f010 f87b 	bl	8012f94 <iprintf>
}
 8002e9e:	e005      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
            printf("Error [%d] : Unknown error code\r\n", rslt);
 8002ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	480b      	ldr	r0, [pc, #44]	@ (8002ed4 <bmp5_error_codes_print_result+0xf8>)
 8002ea8:	f010 f874 	bl	8012f94 <iprintf>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	08015fdc 	.word	0x08015fdc
 8002eb8:	08015fe0 	.word	0x08015fe0
 8002ebc:	08015ffc 	.word	0x08015ffc
 8002ec0:	08016024 	.word	0x08016024
 8002ec4:	08016044 	.word	0x08016044
 8002ec8:	08016064 	.word	0x08016064
 8002ecc:	08016084 	.word	0x08016084
 8002ed0:	080160b4 	.word	0x080160b4
 8002ed4:	080160d8 	.word	0x080160d8

08002ed8 <init_bmp5_interface>:

/*!
 *  @brief Function to select the interface between SPI and I2C.
 */
int8_t init_bmp5_interface(struct bmp5_dev *bmp5_dev, uint8_t intf)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	@ 0x28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
    int8_t rslt = BMP5_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (bmp5_dev == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <init_bmp5_interface+0x1e>
    {
        return BMP5_E_NULL_PTR;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	e039      	b.n	8002f6a <init_bmp5_interface+0x92>
    }

    // I2C arayüzü kullanılacaksa
    if (intf == BMP5_I2C_INTF)
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d134      	bne.n	8002f66 <init_bmp5_interface+0x8e>
    {
        printf("I2C Interface\n");
 8002efc:	481d      	ldr	r0, [pc, #116]	@ (8002f74 <init_bmp5_interface+0x9c>)
 8002efe:	f010 f8b1 	bl	8013064 <puts>

        bmp5_dev->intf_ptr = &hi2c1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1c      	ldr	r2, [pc, #112]	@ (8002f78 <init_bmp5_interface+0xa0>)
 8002f06:	605a      	str	r2, [r3, #4]
        bmp5_dev->read = bmp5_i2c_read;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f7c <init_bmp5_interface+0xa4>)
 8002f0c:	609a      	str	r2, [r3, #8]
        bmp5_dev->write = bmp5_i2c_write;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1b      	ldr	r2, [pc, #108]	@ (8002f80 <init_bmp5_interface+0xa8>)
 8002f12:	60da      	str	r2, [r3, #12]
        bmp5_dev->intf = BMP5_I2C_INTF;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	755a      	strb	r2, [r3, #21]
        //bmp5_dev->delay_us = bmp5_delay;

        // INT pini ayarla (PB6)
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1a:	f107 0310 	add.w	r3, r7, #16
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	611a      	str	r2, [r3, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <init_bmp5_interface+0xac>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	4a14      	ldr	r2, [pc, #80]	@ (8002f84 <init_bmp5_interface+0xac>)
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3a:	4b12      	ldr	r3, [pc, #72]	@ (8002f84 <init_bmp5_interface+0xac>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f46:	2340      	movs	r3, #64	@ 0x40
 8002f48:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f4e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f54:	f107 0310 	add.w	r3, r7, #16
 8002f58:	4619      	mov	r1, r3
 8002f5a:	480b      	ldr	r0, [pc, #44]	@ (8002f88 <init_bmp5_interface+0xb0>)
 8002f5c:	f001 fea4 	bl	8004ca8 <HAL_GPIO_Init>
    else
    {
        return BMP5_E_COM_FAIL;  // Geçersiz arayüz tipi
    }

    return rslt;  // Başarıyla tamamlandıysa BMP5_OK döner
 8002f60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002f64:	e001      	b.n	8002f6a <init_bmp5_interface+0x92>
        return BMP5_E_COM_FAIL;  // Geçersiz arayüz tipi
 8002f66:	f06f 0301 	mvn.w	r3, #1
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3728      	adds	r7, #40	@ 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	080160fc 	.word	0x080160fc
 8002f78:	20000c48 	.word	0x20000c48
 8002f7c:	08002c81 	.word	0x08002c81
 8002f80:	08002d7d 	.word	0x08002d7d
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40020400 	.word	0x40020400

08002f8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	4b10      	ldr	r3, [pc, #64]	@ (8002fd8 <MX_DMA_Init+0x4c>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8002fd8 <MX_DMA_Init+0x4c>)
 8002f9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <MX_DMA_Init+0x4c>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2105      	movs	r1, #5
 8002fb2:	203b      	movs	r0, #59	@ 0x3b
 8002fb4:	f001 fab0 	bl	8004518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002fb8:	203b      	movs	r0, #59	@ 0x3b
 8002fba:	f001 fac9 	bl	8004550 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2105      	movs	r1, #5
 8002fc2:	2045      	movs	r0, #69	@ 0x45
 8002fc4:	f001 faa8 	bl	8004518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002fc8:	2045      	movs	r0, #69	@ 0x45
 8002fca:	f001 fac1 	bl	8004550 <HAL_NVIC_EnableIRQ>

}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800

08002fdc <vApplicationIdleHook>:
void vApplicationTickHook(void);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <vApplicationMallocFailedHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a07      	ldr	r2, [pc, #28]	@ (8003034 <vApplicationGetIdleTaskMemory+0x2c>)
 8003018:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4a06      	ldr	r2, [pc, #24]	@ (8003038 <vApplicationGetIdleTaskMemory+0x30>)
 800301e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003026:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	200003a8 	.word	0x200003a8
 8003038:	20000448 	.word	0x20000448

0800303c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800303c:	b5b0      	push	{r4, r5, r7, lr}
 800303e:	b0a4      	sub	sp, #144	@ 0x90
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

	spiMutex = xSemaphoreCreateMutex();
 8003042:	2001      	movs	r0, #1
 8003044:	f00c ff11 	bl	800fe6a <xQueueCreateMutex>
 8003048:	4603      	mov	r3, r0
 800304a:	4a34      	ldr	r2, [pc, #208]	@ (800311c <MX_FREERTOS_Init+0xe0>)
 800304c:	6013      	str	r3, [r2, #0]
	sdMutex = xSemaphoreCreateMutex();
 800304e:	2001      	movs	r0, #1
 8003050:	f00c ff0b 	bl	800fe6a <xQueueCreateMutex>
 8003054:	4603      	mov	r3, r0
 8003056:	4a32      	ldr	r2, [pc, #200]	@ (8003120 <MX_FREERTOS_Init+0xe4>)
 8003058:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800305a:	4b32      	ldr	r3, [pc, #200]	@ (8003124 <MX_FREERTOS_Init+0xe8>)
 800305c:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8003060:	461d      	mov	r5, r3
 8003062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003066:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800306a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800306e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f00c fafd 	bl	800f674 <osThreadCreate>
 800307a:	4603      	mov	r3, r0
 800307c:	4a2a      	ldr	r2, [pc, #168]	@ (8003128 <MX_FREERTOS_Init+0xec>)
 800307e:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_BMI088 */
  osThreadDef(YRT_BMI088, BMI088_fonk, osPriorityBelowNormal, 0, 512);
 8003080:	4b2a      	ldr	r3, [pc, #168]	@ (800312c <MX_FREERTOS_Init+0xf0>)
 8003082:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8003086:	461d      	mov	r5, r3
 8003088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800308a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800308c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003090:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_BMI088Handle = osThreadCreate(osThread(YRT_BMI088), NULL);
 8003094:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f00c faea 	bl	800f674 <osThreadCreate>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4a23      	ldr	r2, [pc, #140]	@ (8003130 <MX_FREERTOS_Init+0xf4>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_BMP581 */
  osThreadDef(YRT_BMP581, BMP581_fonk, osPriorityNormal, 0, 512);
 80030a6:	4b23      	ldr	r3, [pc, #140]	@ (8003134 <MX_FREERTOS_Init+0xf8>)
 80030a8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80030ac:	461d      	mov	r5, r3
 80030ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_BMP581Handle = osThreadCreate(osThread(YRT_BMP581), NULL);
 80030ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f00c fad7 	bl	800f674 <osThreadCreate>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <MX_FREERTOS_Init+0xfc>)
 80030ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_TRANSMIT */
  osThreadDef(YRT_TRANSMIT, Transmit_veri, osPriorityAboveNormal, 0, 512);
 80030cc:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <MX_FREERTOS_Init+0x100>)
 80030ce:	f107 0420 	add.w	r4, r7, #32
 80030d2:	461d      	mov	r5, r3
 80030d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_TRANSMITHandle = osThreadCreate(osThread(YRT_TRANSMIT), NULL);
 80030e0:	f107 0320 	add.w	r3, r7, #32
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f00c fac4 	bl	800f674 <osThreadCreate>
 80030ec:	4603      	mov	r3, r0
 80030ee:	4a14      	ldr	r2, [pc, #80]	@ (8003140 <MX_FREERTOS_Init+0x104>)
 80030f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_SDCARD */
  osThreadDef(YRT_SDCARD, SDfonk, osPriorityNormal, 0, 512);
 80030f2:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <MX_FREERTOS_Init+0x108>)
 80030f4:	1d3c      	adds	r4, r7, #4
 80030f6:	461d      	mov	r5, r3
 80030f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003100:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_SDCARDHandle = osThreadCreate(osThread(YRT_SDCARD), NULL);
 8003104:	1d3b      	adds	r3, r7, #4
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f00c fab3 	bl	800f674 <osThreadCreate>
 800310e:	4603      	mov	r3, r0
 8003110:	4a0d      	ldr	r2, [pc, #52]	@ (8003148 <MX_FREERTOS_Init+0x10c>)
 8003112:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003114:	bf00      	nop
 8003116:	3790      	adds	r7, #144	@ 0x90
 8003118:	46bd      	mov	sp, r7
 800311a:	bdb0      	pop	{r4, r5, r7, pc}
 800311c:	20000200 	.word	0x20000200
 8003120:	20000204 	.word	0x20000204
 8003124:	08016118 	.word	0x08016118
 8003128:	20000394 	.word	0x20000394
 800312c:	08016140 	.word	0x08016140
 8003130:	20000398 	.word	0x20000398
 8003134:	08016168 	.word	0x08016168
 8003138:	2000039c 	.word	0x2000039c
 800313c:	08016194 	.word	0x08016194
 8003140:	200003a0 	.word	0x200003a0
 8003144:	080161bc 	.word	0x080161bc
 8003148:	200003a4 	.word	0x200003a4

0800314c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003154:	2001      	movs	r0, #1
 8003156:	f00c fad9 	bl	800f70c <osDelay>
 800315a:	e7fb      	b.n	8003154 <StartDefaultTask+0x8>

0800315c <BMI088_fonk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BMI088_fonk */
void BMI088_fonk(void const * argument)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BMI088_fonk */
	 BMI088_Init_I2C(&imu, &hi2c3, 0x18 << 1, 0x69 << 1);
 8003164:	23d2      	movs	r3, #210	@ 0xd2
 8003166:	2230      	movs	r2, #48	@ 0x30
 8003168:	4908      	ldr	r1, [pc, #32]	@ (800318c <BMI088_fonk+0x30>)
 800316a:	4809      	ldr	r0, [pc, #36]	@ (8003190 <BMI088_fonk+0x34>)
 800316c:	f7fd ff42 	bl	8000ff4 <BMI088_Init_I2C>
  /* Infinite loop */
  for(;;)
  {
	  BMI088_ReadAccelerometer(&imu);
 8003170:	4807      	ldr	r0, [pc, #28]	@ (8003190 <BMI088_fonk+0x34>)
 8003172:	f7fe f9e9 	bl	8001548 <BMI088_ReadAccelerometer>
	 	 	  BMI088_ReadGyroscope(&imu);
 8003176:	4806      	ldr	r0, [pc, #24]	@ (8003190 <BMI088_fonk+0x34>)
 8003178:	f7fe fa80 	bl	800167c <BMI088_ReadGyroscope>
	 	 	  rollpitchyaw(&imu);
 800317c:	4804      	ldr	r0, [pc, #16]	@ (8003190 <BMI088_fonk+0x34>)
 800317e:	f7fe f923 	bl	80013c8 <rollpitchyaw>
	 vTaskDelay(pdMS_TO_TICKS(50));
 8003182:	2032      	movs	r0, #50	@ 0x32
 8003184:	f00d fefe 	bl	8010f84 <vTaskDelay>
  {
 8003188:	bf00      	nop
 800318a:	e7f1      	b.n	8003170 <BMI088_fonk+0x14>
 800318c:	20000c9c 	.word	0x20000c9c
 8003190:	20000208 	.word	0x20000208

08003194 <BMP581_fonk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BMP581_fonk */
void BMP581_fonk(void const * argument)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BMP581_fonk */
  /* Infinite loop */
  for(;;)
  {
	  BMP581();
 800319c:	f000 fca6 	bl	8003aec <BMP581>
	  vTaskDelay(pdMS_TO_TICKS(100));
 80031a0:	2064      	movs	r0, #100	@ 0x64
 80031a2:	f00d feef 	bl	8010f84 <vTaskDelay>
  {
 80031a6:	bf00      	nop
 80031a8:	e7f8      	b.n	800319c <BMP581_fonk+0x8>
	...

080031ac <Transmit_veri>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Transmit_veri */
void Transmit_veri(void const * argument)
{
 80031ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b0:	b09e      	sub	sp, #120	@ 0x78
 80031b2:	af0c      	add	r7, sp, #48	@ 0x30
 80031b4:	6478      	str	r0, [r7, #68]	@ 0x44
  /* USER CODE BEGIN Transmit_veri */

	    // SPI ile Lora işlem
	 myLoRa = configureLoRa();
 80031b6:	4c64      	ldr	r4, [pc, #400]	@ (8003348 <Transmit_veri+0x19c>)
 80031b8:	f107 0310 	add.w	r3, r7, #16
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe fae1 	bl	8001784 <configureLoRa>
 80031c2:	4625      	mov	r5, r4
 80031c4:	f107 0410 	add.w	r4, r7, #16
 80031c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	 if(LoRa_init(&myLoRa)== LORA_OK){
 80031d8:	485b      	ldr	r0, [pc, #364]	@ (8003348 <Transmit_veri+0x19c>)
 80031da:	f7fe fe2c 	bl	8001e36 <LoRa_init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80031e2:	d102      	bne.n	80031ea <Transmit_veri+0x3e>
	    LoRa_stat = 1;
 80031e4:	4b59      	ldr	r3, [pc, #356]	@ (800334c <Transmit_veri+0x1a0>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
	    }
	   LoRa_startReceiving(&myLoRa);
 80031ea:	4857      	ldr	r0, [pc, #348]	@ (8003348 <Transmit_veri+0x19c>)
 80031ec:	f7fe fe17 	bl	8001e1e <LoRa_startReceiving>

	   snprintf(logBuf,sizeof(logBuf), "ivme_x: %.3f,\nivme_y: %.3f,\nivme_z: %.3f,\nroll: %.3f,\npitch: %.3f,\nyaw: %.3f\n\r", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 80031f0:	4b57      	ldr	r3, [pc, #348]	@ (8003350 <Transmit_veri+0x1a4>)
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f9c7 	bl	8000588 <__aeabi_f2d>
 80031fa:	4604      	mov	r4, r0
 80031fc:	460d      	mov	r5, r1
 80031fe:	4b54      	ldr	r3, [pc, #336]	@ (8003350 <Transmit_veri+0x1a4>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd f9c0 	bl	8000588 <__aeabi_f2d>
 8003208:	4680      	mov	r8, r0
 800320a:	4689      	mov	r9, r1
 800320c:	4b50      	ldr	r3, [pc, #320]	@ (8003350 <Transmit_veri+0x1a4>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd f9b9 	bl	8000588 <__aeabi_f2d>
 8003216:	4682      	mov	sl, r0
 8003218:	468b      	mov	fp, r1
 800321a:	4b4e      	ldr	r3, [pc, #312]	@ (8003354 <Transmit_veri+0x1a8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd f9b2 	bl	8000588 <__aeabi_f2d>
 8003224:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003228:	4b4b      	ldr	r3, [pc, #300]	@ (8003358 <Transmit_veri+0x1ac>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd f9ab 	bl	8000588 <__aeabi_f2d>
 8003232:	e9c7 0100 	strd	r0, r1, [r7]
 8003236:	4b49      	ldr	r3, [pc, #292]	@ (800335c <Transmit_veri+0x1b0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f9a4 	bl	8000588 <__aeabi_f2d>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8003248:	ed97 7b00 	vldr	d7, [r7]
 800324c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003250:	ed97 7b02 	vldr	d7, [r7, #8]
 8003254:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003258:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800325c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003260:	e9cd 4500 	strd	r4, r5, [sp]
 8003264:	4a3e      	ldr	r2, [pc, #248]	@ (8003360 <Transmit_veri+0x1b4>)
 8003266:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800326a:	483e      	ldr	r0, [pc, #248]	@ (8003364 <Transmit_veri+0x1b8>)
 800326c:	f00f ff02 	bl	8013074 <sniprintf>
	   	 		  roll, pitch, yaw);

	   LoRa_transmit(&myLoRa, (uint8_t*)logBuf, strlen(logBuf), 10);
 8003270:	483c      	ldr	r0, [pc, #240]	@ (8003364 <Transmit_veri+0x1b8>)
 8003272:	f7fd f81d 	bl	80002b0 <strlen>
 8003276:	4603      	mov	r3, r0
 8003278:	b2da      	uxtb	r2, r3
 800327a:	230a      	movs	r3, #10
 800327c:	4939      	ldr	r1, [pc, #228]	@ (8003364 <Transmit_veri+0x1b8>)
 800327e:	4832      	ldr	r0, [pc, #200]	@ (8003348 <Transmit_veri+0x19c>)
 8003280:	f7fe fd75 	bl	8001d6e <LoRa_transmit>
  /* Infinite loop */
  for(;;)
  {
	  snprintf(logBuf,sizeof(logBuf), "ivme_x: %.3f,\nivme_y: %.3f,\nivme_z: %.3f,\nroll: %.3f,\npitch: %.3f,\nyaw: %.3f\n\r", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 8003284:	4b32      	ldr	r3, [pc, #200]	@ (8003350 <Transmit_veri+0x1a4>)
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd f97d 	bl	8000588 <__aeabi_f2d>
 800328e:	4604      	mov	r4, r0
 8003290:	460d      	mov	r5, r1
 8003292:	4b2f      	ldr	r3, [pc, #188]	@ (8003350 <Transmit_veri+0x1a4>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd f976 	bl	8000588 <__aeabi_f2d>
 800329c:	4680      	mov	r8, r0
 800329e:	4689      	mov	r9, r1
 80032a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003350 <Transmit_veri+0x1a4>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd f96f 	bl	8000588 <__aeabi_f2d>
 80032aa:	4682      	mov	sl, r0
 80032ac:	468b      	mov	fp, r1
 80032ae:	4b29      	ldr	r3, [pc, #164]	@ (8003354 <Transmit_veri+0x1a8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd f968 	bl	8000588 <__aeabi_f2d>
 80032b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80032bc:	4b26      	ldr	r3, [pc, #152]	@ (8003358 <Transmit_veri+0x1ac>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f961 	bl	8000588 <__aeabi_f2d>
 80032c6:	e9c7 0100 	strd	r0, r1, [r7]
 80032ca:	4b24      	ldr	r3, [pc, #144]	@ (800335c <Transmit_veri+0x1b0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd f95a 	bl	8000588 <__aeabi_f2d>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80032dc:	ed97 7b00 	vldr	d7, [r7]
 80032e0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80032e4:	ed97 7b02 	vldr	d7, [r7, #8]
 80032e8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80032ec:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80032f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80032f4:	e9cd 4500 	strd	r4, r5, [sp]
 80032f8:	4a19      	ldr	r2, [pc, #100]	@ (8003360 <Transmit_veri+0x1b4>)
 80032fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032fe:	4819      	ldr	r0, [pc, #100]	@ (8003364 <Transmit_veri+0x1b8>)
 8003300:	f00f feb8 	bl	8013074 <sniprintf>
	 	   	 		  roll, pitch, yaw);
	  if (xSemaphoreTake(spiMutex, portMAX_DELAY) == pdTRUE) {
 8003304:	4b18      	ldr	r3, [pc, #96]	@ (8003368 <Transmit_veri+0x1bc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	4618      	mov	r0, r3
 800330e:	f00d f8f1 	bl	80104f4 <xQueueSemaphoreTake>
 8003312:	4603      	mov	r3, r0
 8003314:	2b01      	cmp	r3, #1
 8003316:	d1b5      	bne.n	8003284 <Transmit_veri+0xd8>

	 	   LoRa_transmit(&myLoRa, (uint8_t*)logBuf, strlen(logBuf), 10);
 8003318:	4812      	ldr	r0, [pc, #72]	@ (8003364 <Transmit_veri+0x1b8>)
 800331a:	f7fc ffc9 	bl	80002b0 <strlen>
 800331e:	4603      	mov	r3, r0
 8003320:	b2da      	uxtb	r2, r3
 8003322:	230a      	movs	r3, #10
 8003324:	490f      	ldr	r1, [pc, #60]	@ (8003364 <Transmit_veri+0x1b8>)
 8003326:	4808      	ldr	r0, [pc, #32]	@ (8003348 <Transmit_veri+0x19c>)
 8003328:	f7fe fd21 	bl	8001d6e <LoRa_transmit>
    osDelay(1);
 800332c:	2001      	movs	r0, #1
 800332e:	f00c f9ed 	bl	800f70c <osDelay>
    xSemaphoreGive(spiMutex); // işi bitince bırak
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <Transmit_veri+0x1bc>)
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	2200      	movs	r2, #0
 800333a:	2100      	movs	r1, #0
 800333c:	f00c fdc8 	bl	800fed0 <xQueueGenericSend>
    vTaskDelay(pdMS_TO_TICKS(200));
 8003340:	20c8      	movs	r0, #200	@ 0xc8
 8003342:	f00d fe1f 	bl	8010f84 <vTaskDelay>
	  snprintf(logBuf,sizeof(logBuf), "ivme_x: %.3f,\nivme_y: %.3f,\nivme_z: %.3f,\nroll: %.3f,\npitch: %.3f,\nyaw: %.3f\n\r", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 8003346:	e79d      	b.n	8003284 <Transmit_veri+0xd8>
 8003348:	2000024c 	.word	0x2000024c
 800334c:	20000278 	.word	0x20000278
 8003350:	20000208 	.word	0x20000208
 8003354:	20000280 	.word	0x20000280
 8003358:	20000284 	.word	0x20000284
 800335c:	20000288 	.word	0x20000288
 8003360:	080161d8 	.word	0x080161d8
 8003364:	2000028c 	.word	0x2000028c
 8003368:	20000200 	.word	0x20000200

0800336c <SDfonk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SDfonk */
void SDfonk(void const * argument)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 8003372:	af00      	add	r7, sp, #0
 8003374:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8003378:	f2a3 43a4 	subw	r3, r3, #1188	@ 0x4a4
 800337c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN SDfonk */

	bool isCardInserted = true;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
	extern SD_HandleTypeDef hsd;
	  if (xSemaphoreTake(sdMutex, portMAX_DELAY) == pdTRUE) {
 8003384:	4b38      	ldr	r3, [pc, #224]	@ (8003468 <SDfonk+0xfc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	4618      	mov	r0, r3
 800338e:	f00d f8b1 	bl	80104f4 <xQueueSemaphoreTake>
 8003392:	4603      	mov	r3, r0
 8003394:	2b01      	cmp	r3, #1
 8003396:	d161      	bne.n	800345c <SDfonk+0xf0>
	FATFS fs;
	FIL file;
	UINT bw;
	FRESULT res;
	 HAL_Delay(100);  // Kartı taktıktan sonra SDIO stabil hale gelsin
 8003398:	2064      	movs	r0, #100	@ 0x64
 800339a:	f000 ffe1 	bl	8004360 <HAL_Delay>

	    if (HAL_SD_Init(&hsd) != HAL_OK) {
 800339e:	4833      	ldr	r0, [pc, #204]	@ (800346c <SDfonk+0x100>)
 80033a0:	f004 fa02 	bl	80077a8 <HAL_SD_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <SDfonk+0x4a>
	        printf("SD Init ERROR!\r\n");
 80033aa:	4831      	ldr	r0, [pc, #196]	@ (8003470 <SDfonk+0x104>)
 80033ac:	f00f fe5a 	bl	8013064 <puts>
	        vTaskDelete(NULL);
 80033b0:	2000      	movs	r0, #0
 80033b2:	f00d fd57 	bl	8010e64 <vTaskDelete>
	    }

	    if (f_mount(&fs, "0:", 1) != FR_OK) {
 80033b6:	f107 030c 	add.w	r3, r7, #12
 80033ba:	2201      	movs	r2, #1
 80033bc:	492d      	ldr	r1, [pc, #180]	@ (8003474 <SDfonk+0x108>)
 80033be:	4618      	mov	r0, r3
 80033c0:	f00a ff6a 	bl	800e298 <f_mount>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <SDfonk+0x6a>
	        printf("f_mount failed\r\n");
 80033ca:	482b      	ldr	r0, [pc, #172]	@ (8003478 <SDfonk+0x10c>)
 80033cc:	f00f fe4a 	bl	8013064 <puts>
	        vTaskDelete(NULL);
 80033d0:	2000      	movs	r0, #0
 80033d2:	f00d fd47 	bl	8010e64 <vTaskDelete>
	    }

	    if (f_open(&file, "test.txt", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 80033d6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80033da:	220a      	movs	r2, #10
 80033dc:	4927      	ldr	r1, [pc, #156]	@ (800347c <SDfonk+0x110>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f00a ffbe 	bl	800e360 <f_open>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d110      	bne.n	800340c <SDfonk+0xa0>
	        f_write(&file, "Hello SD Card!\r\n", 17, &bw);
 80033ea:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80033ee:	f507 7012 	add.w	r0, r7, #584	@ 0x248
 80033f2:	2211      	movs	r2, #17
 80033f4:	4922      	ldr	r1, [pc, #136]	@ (8003480 <SDfonk+0x114>)
 80033f6:	f00b fbba 	bl	800eb6e <f_write>
	        f_close(&file);
 80033fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80033fe:	4618      	mov	r0, r3
 8003400:	f00b ff4e 	bl	800f2a0 <f_close>
	        printf("SD Write Success\r\n");
 8003404:	481f      	ldr	r0, [pc, #124]	@ (8003484 <SDfonk+0x118>)
 8003406:	f00f fe2d 	bl	8013064 <puts>
 800340a:	e002      	b.n	8003412 <SDfonk+0xa6>
	    } else {
	        printf("f_open failed\r\n");
 800340c:	481e      	ldr	r0, [pc, #120]	@ (8003488 <SDfonk+0x11c>)
 800340e:	f00f fe29 	bl	8013064 <puts>
  for(;;)
  {


	  	             // Dosyayı aç (yoksa oluştur)
	  	             res = f_open(&file, "zeynep.txt", FA_OPEN_APPEND | FA_WRITE);
 8003412:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8003416:	2232      	movs	r2, #50	@ 0x32
 8003418:	491c      	ldr	r1, [pc, #112]	@ (800348c <SDfonk+0x120>)
 800341a:	4618      	mov	r0, r3
 800341c:	f00a ffa0 	bl	800e360 <f_open>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 34a6 	strb.w	r3, [r7, #1190]	@ 0x4a6
	  	             if(res==FR_OK)
 8003426:	f897 34a6 	ldrb.w	r3, [r7, #1190]	@ 0x4a6
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f1      	bne.n	8003412 <SDfonk+0xa6>
	  	             {
	  	            	f_write(&file, logBuf, strlen(logBuf), &bytesWritten);
 800342e:	4818      	ldr	r0, [pc, #96]	@ (8003490 <SDfonk+0x124>)
 8003430:	f7fc ff3e 	bl	80002b0 <strlen>
 8003434:	4602      	mov	r2, r0
 8003436:	f507 7012 	add.w	r0, r7, #584	@ 0x248
 800343a:	4b16      	ldr	r3, [pc, #88]	@ (8003494 <SDfonk+0x128>)
 800343c:	4914      	ldr	r1, [pc, #80]	@ (8003490 <SDfonk+0x124>)
 800343e:	f00b fb96 	bl	800eb6e <f_write>
	  	            	 f_close(&file);
 8003442:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8003446:	4618      	mov	r0, r3
 8003448:	f00b ff2a 	bl	800f2a0 <f_close>
	  	  	           xSemaphoreGive(sdMutex);
 800344c:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <SDfonk+0xfc>)
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	2300      	movs	r3, #0
 8003452:	2200      	movs	r2, #0
 8003454:	2100      	movs	r1, #0
 8003456:	f00c fd3b 	bl	800fed0 <xQueueGenericSend>
	  	             res = f_open(&file, "zeynep.txt", FA_OPEN_APPEND | FA_WRITE);
 800345a:	e7da      	b.n	8003412 <SDfonk+0xa6>
	  	             }
	  	         }
    osDelay(1);
  }
  /* USER CODE END SDfonk */
}
 800345c:	bf00      	nop
 800345e:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000204 	.word	0x20000204
 800346c:	20000cf0 	.word	0x20000cf0
 8003470:	08016228 	.word	0x08016228
 8003474:	08016238 	.word	0x08016238
 8003478:	0801623c 	.word	0x0801623c
 800347c:	0801624c 	.word	0x0801624c
 8003480:	08016258 	.word	0x08016258
 8003484:	0801626c 	.word	0x0801626c
 8003488:	08016280 	.word	0x08016280
 800348c:	08016290 	.word	0x08016290
 8003490:	2000028c 	.word	0x2000028c
 8003494:	2000027c 	.word	0x2000027c

08003498 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	@ 0x28
 800349c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349e:	f107 0314 	add.w	r3, r7, #20
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	4b48      	ldr	r3, [pc, #288]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	4a47      	ldr	r2, [pc, #284]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034be:	4b45      	ldr	r3, [pc, #276]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	4b41      	ldr	r3, [pc, #260]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	4a40      	ldr	r2, [pc, #256]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034da:	4b3e      	ldr	r3, [pc, #248]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	4b3a      	ldr	r3, [pc, #232]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4a39      	ldr	r2, [pc, #228]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4b37      	ldr	r3, [pc, #220]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	4b33      	ldr	r3, [pc, #204]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	4a32      	ldr	r2, [pc, #200]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	6313      	str	r3, [r2, #48]	@ 0x30
 8003512:	4b30      	ldr	r3, [pc, #192]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	607b      	str	r3, [r7, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	4b2c      	ldr	r3, [pc, #176]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	4a2b      	ldr	r2, [pc, #172]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	6313      	str	r3, [r2, #48]	@ 0x30
 800352e:	4b29      	ldr	r3, [pc, #164]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_SET);
 800353a:	2201      	movs	r2, #1
 800353c:	2118      	movs	r1, #24
 800353e:	4826      	ldr	r0, [pc, #152]	@ (80035d8 <MX_GPIO_Init+0x140>)
 8003540:	f001 fe52 	bl	80051e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 8003544:	2318      	movs	r3, #24
 8003546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003548:	2301      	movs	r3, #1
 800354a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2300      	movs	r3, #0
 8003552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4619      	mov	r1, r3
 800355a:	481f      	ldr	r0, [pc, #124]	@ (80035d8 <MX_GPIO_Init+0x140>)
 800355c:	f001 fba4 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8003560:	2310      	movs	r3, #16
 8003562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003564:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4619      	mov	r1, r3
 8003574:	4819      	ldr	r0, [pc, #100]	@ (80035dc <MX_GPIO_Init+0x144>)
 8003576:	f001 fb97 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800357a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800357e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003580:	2300      	movs	r3, #0
 8003582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003584:	2302      	movs	r3, #2
 8003586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4619      	mov	r1, r3
 800358e:	4814      	ldr	r0, [pc, #80]	@ (80035e0 <MX_GPIO_Init+0x148>)
 8003590:	f001 fb8a 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8003594:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800359a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800359e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	4619      	mov	r1, r3
 80035aa:	480b      	ldr	r0, [pc, #44]	@ (80035d8 <MX_GPIO_Init+0x140>)
 80035ac:	f001 fb7c 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMP_INT_Pin */
  GPIO_InitStruct.Pin = BMP_INT_Pin;
 80035b0:	2320      	movs	r3, #32
 80035b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80035b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMP_INT_GPIO_Port, &GPIO_InitStruct);
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	4619      	mov	r1, r3
 80035c4:	4806      	ldr	r0, [pc, #24]	@ (80035e0 <MX_GPIO_Init+0x148>)
 80035c6:	f001 fb6f 	bl	8004ca8 <HAL_GPIO_Init>

}
 80035ca:	bf00      	nop
 80035cc:	3728      	adds	r7, #40	@ 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40020000 	.word	0x40020000
 80035dc:	40020800 	.word	0x40020800
 80035e0:	40020400 	.word	0x40020400

080035e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035e8:	4b12      	ldr	r3, [pc, #72]	@ (8003634 <MX_I2C1_Init+0x50>)
 80035ea:	4a13      	ldr	r2, [pc, #76]	@ (8003638 <MX_I2C1_Init+0x54>)
 80035ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80035ee:	4b11      	ldr	r3, [pc, #68]	@ (8003634 <MX_I2C1_Init+0x50>)
 80035f0:	4a12      	ldr	r2, [pc, #72]	@ (800363c <MX_I2C1_Init+0x58>)
 80035f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003634 <MX_I2C1_Init+0x50>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80035fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003634 <MX_I2C1_Init+0x50>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <MX_I2C1_Init+0x50>)
 8003602:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003608:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <MX_I2C1_Init+0x50>)
 800360a:	2200      	movs	r2, #0
 800360c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800360e:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <MX_I2C1_Init+0x50>)
 8003610:	2200      	movs	r2, #0
 8003612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003614:	4b07      	ldr	r3, [pc, #28]	@ (8003634 <MX_I2C1_Init+0x50>)
 8003616:	2200      	movs	r2, #0
 8003618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800361a:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <MX_I2C1_Init+0x50>)
 800361c:	2200      	movs	r2, #0
 800361e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003620:	4804      	ldr	r0, [pc, #16]	@ (8003634 <MX_I2C1_Init+0x50>)
 8003622:	f001 fdfb 	bl	800521c <HAL_I2C_Init>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800362c:	f000 f9b2 	bl	8003994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000c48 	.word	0x20000c48
 8003638:	40005400 	.word	0x40005400
 800363c:	000186a0 	.word	0x000186a0

08003640 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003644:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <MX_I2C3_Init+0x50>)
 8003646:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <MX_I2C3_Init+0x54>)
 8003648:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800364a:	4b11      	ldr	r3, [pc, #68]	@ (8003690 <MX_I2C3_Init+0x50>)
 800364c:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <MX_I2C3_Init+0x58>)
 800364e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003650:	4b0f      	ldr	r3, [pc, #60]	@ (8003690 <MX_I2C3_Init+0x50>)
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003656:	4b0e      	ldr	r3, [pc, #56]	@ (8003690 <MX_I2C3_Init+0x50>)
 8003658:	2200      	movs	r2, #0
 800365a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800365c:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <MX_I2C3_Init+0x50>)
 800365e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003662:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003664:	4b0a      	ldr	r3, [pc, #40]	@ (8003690 <MX_I2C3_Init+0x50>)
 8003666:	2200      	movs	r2, #0
 8003668:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800366a:	4b09      	ldr	r3, [pc, #36]	@ (8003690 <MX_I2C3_Init+0x50>)
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003670:	4b07      	ldr	r3, [pc, #28]	@ (8003690 <MX_I2C3_Init+0x50>)
 8003672:	2200      	movs	r2, #0
 8003674:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003676:	4b06      	ldr	r3, [pc, #24]	@ (8003690 <MX_I2C3_Init+0x50>)
 8003678:	2200      	movs	r2, #0
 800367a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800367c:	4804      	ldr	r0, [pc, #16]	@ (8003690 <MX_I2C3_Init+0x50>)
 800367e:	f001 fdcd 	bl	800521c <HAL_I2C_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003688:	f000 f984 	bl	8003994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800368c:	bf00      	nop
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000c9c 	.word	0x20000c9c
 8003694:	40005c00 	.word	0x40005c00
 8003698:	000186a0 	.word	0x000186a0

0800369c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	@ 0x30
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 031c 	add.w	r3, r7, #28
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a42      	ldr	r2, [pc, #264]	@ (80037c4 <HAL_I2C_MspInit+0x128>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d12c      	bne.n	8003718 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	4b41      	ldr	r3, [pc, #260]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	4a40      	ldr	r2, [pc, #256]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ce:	4b3e      	ldr	r3, [pc, #248]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036da:	23c0      	movs	r3, #192	@ 0xc0
 80036dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036de:	2312      	movs	r3, #18
 80036e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036e2:	2301      	movs	r3, #1
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e6:	2303      	movs	r3, #3
 80036e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036ea:	2304      	movs	r3, #4
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ee:	f107 031c 	add.w	r3, r7, #28
 80036f2:	4619      	mov	r1, r3
 80036f4:	4835      	ldr	r0, [pc, #212]	@ (80037cc <HAL_I2C_MspInit+0x130>)
 80036f6:	f001 fad7 	bl	8004ca8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	4b32      	ldr	r3, [pc, #200]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	4a31      	ldr	r2, [pc, #196]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003708:	6413      	str	r3, [r2, #64]	@ 0x40
 800370a:	4b2f      	ldr	r3, [pc, #188]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003716:	e050      	b.n	80037ba <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a2c      	ldr	r2, [pc, #176]	@ (80037d0 <HAL_I2C_MspInit+0x134>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d14b      	bne.n	80037ba <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	4b28      	ldr	r3, [pc, #160]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	4a27      	ldr	r2, [pc, #156]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	6313      	str	r3, [r2, #48]	@ 0x30
 8003732:	4b25      	ldr	r3, [pc, #148]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	4b21      	ldr	r3, [pc, #132]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003746:	4a20      	ldr	r2, [pc, #128]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6313      	str	r3, [r2, #48]	@ 0x30
 800374e:	4b1e      	ldr	r3, [pc, #120]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800375a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800375e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003760:	2312      	movs	r3, #18
 8003762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003764:	2301      	movs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800376c:	2304      	movs	r3, #4
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003770:	f107 031c 	add.w	r3, r7, #28
 8003774:	4619      	mov	r1, r3
 8003776:	4817      	ldr	r0, [pc, #92]	@ (80037d4 <HAL_I2C_MspInit+0x138>)
 8003778:	f001 fa96 	bl	8004ca8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800377c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003782:	2312      	movs	r3, #18
 8003784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003786:	2301      	movs	r3, #1
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378a:	2303      	movs	r3, #3
 800378c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800378e:	2304      	movs	r3, #4
 8003790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003792:	f107 031c 	add.w	r3, r7, #28
 8003796:	4619      	mov	r1, r3
 8003798:	480f      	ldr	r0, [pc, #60]	@ (80037d8 <HAL_I2C_MspInit+0x13c>)
 800379a:	f001 fa85 	bl	8004ca8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	4a08      	ldr	r2, [pc, #32]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 80037a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ae:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]
}
 80037ba:	bf00      	nop
 80037bc:	3730      	adds	r7, #48	@ 0x30
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40005400 	.word	0x40005400
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40020400 	.word	0x40020400
 80037d0:	40005c00 	.word	0x40005c00
 80037d4:	40020800 	.word	0x40020800
 80037d8:	40020000 	.word	0x40020000

080037dc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a15      	ldr	r2, [pc, #84]	@ (8003840 <HAL_I2C_MspDeInit+0x64>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10e      	bne.n	800380c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80037ee:	4b15      	ldr	r3, [pc, #84]	@ (8003844 <HAL_I2C_MspDeInit+0x68>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	4a14      	ldr	r2, [pc, #80]	@ (8003844 <HAL_I2C_MspDeInit+0x68>)
 80037f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037f8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80037fa:	2140      	movs	r1, #64	@ 0x40
 80037fc:	4812      	ldr	r0, [pc, #72]	@ (8003848 <HAL_I2C_MspDeInit+0x6c>)
 80037fe:	f001 fbe7 	bl	8004fd0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003802:	2180      	movs	r1, #128	@ 0x80
 8003804:	4810      	ldr	r0, [pc, #64]	@ (8003848 <HAL_I2C_MspDeInit+0x6c>)
 8003806:	f001 fbe3 	bl	8004fd0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800380a:	e014      	b.n	8003836 <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C3)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0e      	ldr	r2, [pc, #56]	@ (800384c <HAL_I2C_MspDeInit+0x70>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d10f      	bne.n	8003836 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003816:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <HAL_I2C_MspDeInit+0x68>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	4a0a      	ldr	r2, [pc, #40]	@ (8003844 <HAL_I2C_MspDeInit+0x68>)
 800381c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003820:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8003822:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003826:	480a      	ldr	r0, [pc, #40]	@ (8003850 <HAL_I2C_MspDeInit+0x74>)
 8003828:	f001 fbd2 	bl	8004fd0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800382c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003830:	4808      	ldr	r0, [pc, #32]	@ (8003854 <HAL_I2C_MspDeInit+0x78>)
 8003832:	f001 fbcd 	bl	8004fd0 <HAL_GPIO_DeInit>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40005400 	.word	0x40005400
 8003844:	40023800 	.word	0x40023800
 8003848:	40020400 	.word	0x40020400
 800384c:	40005c00 	.word	0x40005c00
 8003850:	40020800 	.word	0x40020800
 8003854:	40020000 	.word	0x40020000

08003858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800385c:	f000 fd3e 	bl	80042dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003860:	f000 f81a 	bl	8003898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003864:	f7ff fe18 	bl	8003498 <MX_GPIO_Init>
  MX_DMA_Init();
 8003868:	f7ff fb90 	bl	8002f8c <MX_DMA_Init>
  MX_I2C1_Init();
 800386c:	f7ff feba 	bl	80035e4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003870:	f7ff fee6 	bl	8003640 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003874:	f000 fabc 	bl	8003df0 <MX_SPI1_Init>
  MX_SDIO_SD_Init();
 8003878:	f000 f96c 	bl	8003b54 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800387c:	f006 ff72 	bl	800a764 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_SD_Init(&hsd);
 8003880:	4804      	ldr	r0, [pc, #16]	@ (8003894 <main+0x3c>)
 8003882:	f003 ff91 	bl	80077a8 <HAL_SD_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003886:	f7ff fbd9 	bl	800303c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800388a:	f00b fed0 	bl	800f62e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800388e:	bf00      	nop
 8003890:	e7fd      	b.n	800388e <main+0x36>
 8003892:	bf00      	nop
 8003894:	20000cf0 	.word	0x20000cf0

08003898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b094      	sub	sp, #80	@ 0x50
 800389c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800389e:	f107 031c 	add.w	r3, r7, #28
 80038a2:	2234      	movs	r2, #52	@ 0x34
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f00f fcf2 	bl	8013290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038ac:	f107 0308 	add.w	r3, r7, #8
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038bc:	2300      	movs	r3, #0
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	4b29      	ldr	r3, [pc, #164]	@ (8003968 <SystemClock_Config+0xd0>)
 80038c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c4:	4a28      	ldr	r2, [pc, #160]	@ (8003968 <SystemClock_Config+0xd0>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80038cc:	4b26      	ldr	r3, [pc, #152]	@ (8003968 <SystemClock_Config+0xd0>)
 80038ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038d8:	2300      	movs	r3, #0
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4b23      	ldr	r3, [pc, #140]	@ (800396c <SystemClock_Config+0xd4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a22      	ldr	r2, [pc, #136]	@ (800396c <SystemClock_Config+0xd4>)
 80038e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b20      	ldr	r3, [pc, #128]	@ (800396c <SystemClock_Config+0xd4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038fe:	2302      	movs	r3, #2
 8003900:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003902:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003906:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003908:	2304      	movs	r3, #4
 800390a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 800390c:	2390      	movs	r3, #144	@ 0x90
 800390e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003910:	2302      	movs	r3, #2
 8003912:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8003914:	2306      	movs	r3, #6
 8003916:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003918:	2302      	movs	r3, #2
 800391a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800391c:	f107 031c 	add.w	r3, r7, #28
 8003920:	4618      	mov	r0, r3
 8003922:	f003 fca3 	bl	800726c <HAL_RCC_OscConfig>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800392c:	f000 f832 	bl	8003994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003930:	230f      	movs	r3, #15
 8003932:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003934:	2302      	movs	r3, #2
 8003936:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800393c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003946:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003948:	f107 0308 	add.w	r3, r7, #8
 800394c:	2104      	movs	r1, #4
 800394e:	4618      	mov	r0, r3
 8003950:	f002 fde6 	bl	8006520 <HAL_RCC_ClockConfig>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800395a:	f000 f81b 	bl	8003994 <Error_Handler>
  }
}
 800395e:	bf00      	nop
 8003960:	3750      	adds	r7, #80	@ 0x50
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800
 800396c:	40007000 	.word	0x40007000

08003970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a04      	ldr	r2, [pc, #16]	@ (8003990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003982:	f000 fccd 	bl	8004320 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40010000 	.word	0x40010000

08003994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003998:	b672      	cpsid	i
}
 800399a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800399c:	bf00      	nop
 800399e:	e7fd      	b.n	800399c <Error_Handler+0x8>

080039a0 <set_config>:

/******************************************************************************/
/*!            Functions                                        */

static int8_t set_config(struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
    //BMP5 sensörünü ölçüm yapmaya hazır hale getirecek şekilde konfigüre etmek
    int8_t rslt;
    struct bmp5_iir_config set_iir_cfg;
    struct bmp5_int_source_select int_source_select;

    rslt = bmp5_set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 80039aa:	6839      	ldr	r1, [r7, #0]
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7fe fc79 	bl	80022a4 <bmp5_set_power_mode>
 80039b2:	4603      	mov	r3, r0
 80039b4:	75fb      	strb	r3, [r7, #23]
    //bmp5_error_codes_print_result("bmp5_set_power_mode1", rslt);

    if (rslt == BMP5_OK)
 80039b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d148      	bne.n	8003a50 <set_config+0xb0>
    {
        /* Get default odr */
        rslt = bmp5_get_osr_odr_press_config(osr_odr_press_cfg, dev);
 80039be:	6839      	ldr	r1, [r7, #0]
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fe fe0f 	bl	80025e4 <bmp5_get_osr_odr_press_config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	75fb      	strb	r3, [r7, #23]
        //şu anki sıcaklık/basınç oversampling ve data rate bilgileri okunur.
        //bmp5_error_codes_print_result("bmp5_get_osr_odr_press_config", rslt);

        if (rslt == BMP5_OK)
 80039ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d108      	bne.n	80039e4 <set_config+0x44>
        {
            /* Enable pressure */
            osr_odr_press_cfg->press_en = BMP5_ENABLE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	709a      	strb	r2, [r3, #2]
            rslt = bmp5_set_osr_odr_press_config(osr_odr_press_cfg, dev);
 80039d8:	6839      	ldr	r1, [r7, #0]
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fe fe3e 	bl	800265c <bmp5_set_osr_odr_press_config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	75fb      	strb	r3, [r7, #23]
            //Basınç ölçümünü etkinleştir ve yeni ayarı yaz
            //bmp5_error_codes_print_result("bmp5_set_osr_odr_press_config", rslt);
        }

        if (rslt == BMP5_OK)
 80039e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10f      	bne.n	8003a0c <set_config+0x6c>
        {
            //IIR (Filtre) ayarlarını yap:
            set_iir_cfg.set_iir_t = BMP5_IIR_FILTER_COEFF_1;
 80039ec:	2301      	movs	r3, #1
 80039ee:	743b      	strb	r3, [r7, #16]
            set_iir_cfg.set_iir_p = BMP5_IIR_FILTER_COEFF_1; //COEFF_1 = en hafif filtreleme (hızlı tepki, daha az yumuşatma).
 80039f0:	2301      	movs	r3, #1
 80039f2:	747b      	strb	r3, [r7, #17]
            set_iir_cfg.shdw_set_iir_t = BMP5_ENABLE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	74bb      	strb	r3, [r7, #18]
            set_iir_cfg.shdw_set_iir_p = BMP5_ENABLE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	74fb      	strb	r3, [r7, #19]

            rslt = bmp5_set_iir_config(&set_iir_cfg, dev);
 80039fc:	f107 0310 	add.w	r3, r7, #16
 8003a00:	6839      	ldr	r1, [r7, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fee4 	bl	80027d0 <bmp5_set_iir_config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]
            //bmp5_error_codes_print_result("bmp5_set_iir_config", rslt);
        }

        if (rslt == BMP5_OK)
 8003a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d117      	bne.n	8003a44 <set_config+0xa4>
        {
            rslt = bmp5_configure_interrupt(BMP5_PULSED, BMP5_ACTIVE_HIGH, BMP5_INTR_PUSH_PULL, BMP5_INTR_ENABLE, dev);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f7fe fd57 	bl	80024d2 <bmp5_configure_interrupt>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]
            //bmp5_error_codes_print_result("bmp5_configure_interrupt", rslt);

            if (rslt == BMP5_OK)
 8003a28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <set_config+0xa4>
            {
                /* Note : Select INT_SOURCE after configuring interrupt */
                int_source_select.drdy_en = BMP5_ENABLE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	733b      	strb	r3, [r7, #12]
                rslt = bmp5_int_source_select(&int_source_select, dev);
 8003a34:	f107 030c 	add.w	r3, r7, #12
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fce0 	bl	8002400 <bmp5_int_source_select>
 8003a40:	4603      	mov	r3, r0
 8003a42:	75fb      	strb	r3, [r7, #23]
            }
        }

        /* Set powermode as continous */
        //Sensörü sürekli ölçüm moduna al (continuous):
        rslt = bmp5_set_power_mode(BMP5_POWERMODE_CONTINOUS, dev);
 8003a44:	6839      	ldr	r1, [r7, #0]
 8003a46:	2003      	movs	r0, #3
 8003a48:	f7fe fc2c 	bl	80022a4 <bmp5_set_power_mode>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	75fb      	strb	r3, [r7, #23]
        //bmp5_error_codes_print_result("bmp5_set_power_mode", rslt);
    }

    return rslt;
 8003a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <get_sensor_data>:

static int8_t get_sensor_data(const struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 8003a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
	int8_t rslt = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]
	    uint8_t idx = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	73bb      	strb	r3, [r7, #14]
	    extern struct bmp5_sensor_data sensor_data;

	    while (idx < 3)
 8003a6e:	e02d      	b.n	8003acc <get_sensor_data+0x70>
	    {
            //BMP5 sensöründen 3 defa ölçüm alarak sıcaklık ve basınç verilerini okumak
	        rslt = bmp5_get_sensor_data(&sensor_data, osr_odr_press_cfg, dev);
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	481a      	ldr	r0, [pc, #104]	@ (8003ae0 <get_sensor_data+0x84>)
 8003a76:	f7fe fc61 	bl	800233c <bmp5_get_sensor_data>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	73fb      	strb	r3, [r7, #15]
	        bmp5_error_codes_print_result("bmp5_get_sensor_data", rslt);
 8003a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a82:	4619      	mov	r1, r3
 8003a84:	4817      	ldr	r0, [pc, #92]	@ (8003ae4 <get_sensor_data+0x88>)
 8003a86:	f7ff f9a9 	bl	8002ddc <bmp5_error_codes_print_result>

	        if (rslt == BMP5_OK)
 8003a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d119      	bne.n	8003ac6 <get_sensor_data+0x6a>
	        {
	#ifdef BMP5_USE_FIXED_POINT
	            //printf("%d, %lu, %ld\n", idx, pressure, temperature);
	#else
	            printf("%d, %f, %f\n", idx, sensor_data.pressure, sensor_data.temperature);
 8003a92:	7bbe      	ldrb	r6, [r7, #14]
 8003a94:	4b12      	ldr	r3, [pc, #72]	@ (8003ae0 <get_sensor_data+0x84>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fc fd75 	bl	8000588 <__aeabi_f2d>
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	460d      	mov	r5, r1
 8003aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae0 <get_sensor_data+0x84>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fc fd6e 	bl	8000588 <__aeabi_f2d>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	e9cd 2300 	strd	r2, r3, [sp]
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	462b      	mov	r3, r5
 8003ab8:	4631      	mov	r1, r6
 8003aba:	480b      	ldr	r0, [pc, #44]	@ (8003ae8 <get_sensor_data+0x8c>)
 8003abc:	f00f fa6a 	bl	8012f94 <iprintf>
	#endif
	            idx++;
 8003ac0:	7bbb      	ldrb	r3, [r7, #14]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	73bb      	strb	r3, [r7, #14]
	        }

	        HAL_Delay(10);  // 20ms bekle, sensör ODR'sine göre ayarla
 8003ac6:	200a      	movs	r0, #10
 8003ac8:	f000 fc4a 	bl	8004360 <HAL_Delay>
	    while (idx < 3)
 8003acc:	7bbb      	ldrb	r3, [r7, #14]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d9ce      	bls.n	8003a70 <get_sensor_data+0x14>
	    }

	    return rslt;
 8003ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
	}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	2000038c 	.word	0x2000038c
 8003ae4:	0801629c 	.word	0x0801629c
 8003ae8:	080162b4 	.word	0x080162b4

08003aec <BMP581>:

void BMP581(void){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
int8_t rslt;
	      struct bmp5_dev dev;
	      struct bmp5_osr_odr_press_config osr_odr_press_cfg = { 0 };
 8003af2:	2300      	movs	r3, #0
 8003af4:	603b      	str	r3, [r7, #0]

	      /* Interface reference is given as a parameter
	       * For I2C : BMP5_I2C_INTF
	       * For SPI : BMP5_SPI_INTF
	       */
	      rslt = init_bmp5_interface(&dev, BMP5_I2C_INTF);
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	2101      	movs	r1, #1
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff f9ec 	bl	8002ed8 <init_bmp5_interface>
 8003b00:	4603      	mov	r3, r0
 8003b02:	77fb      	strb	r3, [r7, #31]
	      bmp5_error_codes_print_result("bmp5_interface_init", rslt);
 8003b04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4811      	ldr	r0, [pc, #68]	@ (8003b50 <BMP581+0x64>)
 8003b0c:	f7ff f966 	bl	8002ddc <bmp5_error_codes_print_result>

	      if (rslt == BMP5_OK)
 8003b10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d116      	bne.n	8003b46 <BMP581+0x5a>
	      {
	          rslt = bmp5_init(&dev);
 8003b18:	1d3b      	adds	r3, r7, #4
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe fa34 	bl	8001f88 <bmp5_init>
 8003b20:	4603      	mov	r3, r0
 8003b22:	77fb      	strb	r3, [r7, #31]
	          //bmp5_error_codes_print_result("bmp5_init", rslt);
	          rslt = set_config(&osr_odr_press_cfg, &dev);
 8003b24:	1d3a      	adds	r2, r7, #4
 8003b26:	463b      	mov	r3, r7
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ff38 	bl	80039a0 <set_config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	77fb      	strb	r3, [r7, #31]
	          //bmp5_error_codes_print_result("set_config", rslt);
	          rslt = get_sensor_data(&osr_odr_press_cfg, &dev);
 8003b34:	1d3a      	adds	r2, r7, #4
 8003b36:	463b      	mov	r3, r7
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff8e 	bl	8003a5c <get_sensor_data>
 8003b40:	4603      	mov	r3, r0
 8003b42:	77fb      	strb	r3, [r7, #31]
	          //bmp5_error_codes_print_result("get_sensor_data", rslt);
	          
	      }
	      return rslt;
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
        }
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	080162c0 	.word	0x080162c0

08003b54 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <MX_SDIO_SD_Init+0x38>)
 8003b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8003b90 <MX_SDIO_SD_Init+0x3c>)
 8003b5c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <MX_SDIO_SD_Init+0x38>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003b64:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <MX_SDIO_SD_Init+0x38>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003b6a:	4b08      	ldr	r3, [pc, #32]	@ (8003b8c <MX_SDIO_SD_Init+0x38>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <MX_SDIO_SD_Init+0x38>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003b76:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <MX_SDIO_SD_Init+0x38>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003b7c:	4b03      	ldr	r3, [pc, #12]	@ (8003b8c <MX_SDIO_SD_Init+0x38>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003b82:	bf00      	nop
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	20000cf0 	.word	0x20000cf0
 8003b90:	40012c00 	.word	0x40012c00

08003b94 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b0a2      	sub	sp, #136	@ 0x88
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bac:	f107 0318 	add.w	r3, r7, #24
 8003bb0:	225c      	movs	r2, #92	@ 0x5c
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f00f fb6b 	bl	8013290 <memset>
  if(sdHandle->Instance==SDIO)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a83      	ldr	r2, [pc, #524]	@ (8003dcc <HAL_SD_MspInit+0x238>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	f040 80fe 	bne.w	8003dc2 <HAL_SD_MspInit+0x22e>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003bc6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003bca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bd4:	f107 0318 	add.w	r3, r7, #24
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f002 fded 	bl	80067b8 <HAL_RCCEx_PeriphCLKConfig>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8003be4:	f7ff fed6 	bl	8003994 <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	4b78      	ldr	r3, [pc, #480]	@ (8003dd0 <HAL_SD_MspInit+0x23c>)
 8003bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf0:	4a77      	ldr	r2, [pc, #476]	@ (8003dd0 <HAL_SD_MspInit+0x23c>)
 8003bf2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bf6:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bf8:	4b75      	ldr	r3, [pc, #468]	@ (8003dd0 <HAL_SD_MspInit+0x23c>)
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c04:	2300      	movs	r3, #0
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	4b71      	ldr	r3, [pc, #452]	@ (8003dd0 <HAL_SD_MspInit+0x23c>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	4a70      	ldr	r2, [pc, #448]	@ (8003dd0 <HAL_SD_MspInit+0x23c>)
 8003c0e:	f043 0302 	orr.w	r3, r3, #2
 8003c12:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c14:	4b6e      	ldr	r3, [pc, #440]	@ (8003dd0 <HAL_SD_MspInit+0x23c>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	4b6a      	ldr	r3, [pc, #424]	@ (8003dd0 <HAL_SD_MspInit+0x23c>)
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	4a69      	ldr	r2, [pc, #420]	@ (8003dd0 <HAL_SD_MspInit+0x23c>)
 8003c2a:	f043 0304 	orr.w	r3, r3, #4
 8003c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c30:	4b67      	ldr	r3, [pc, #412]	@ (8003dd0 <HAL_SD_MspInit+0x23c>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	4b63      	ldr	r3, [pc, #396]	@ (8003dd0 <HAL_SD_MspInit+0x23c>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	4a62      	ldr	r2, [pc, #392]	@ (8003dd0 <HAL_SD_MspInit+0x23c>)
 8003c46:	f043 0308 	orr.w	r3, r3, #8
 8003c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4c:	4b60      	ldr	r3, [pc, #384]	@ (8003dd0 <HAL_SD_MspInit+0x23c>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c58:	2304      	movs	r3, #4
 8003c5a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c64:	2303      	movs	r3, #3
 8003c66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c70:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003c74:	4619      	mov	r1, r3
 8003c76:	4857      	ldr	r0, [pc, #348]	@ (8003dd4 <HAL_SD_MspInit+0x240>)
 8003c78:	f001 f816 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c80:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c82:	2302      	movs	r3, #2
 8003c84:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c86:	2301      	movs	r3, #1
 8003c88:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c90:	230c      	movs	r3, #12
 8003c92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c96:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	484e      	ldr	r0, [pc, #312]	@ (8003dd8 <HAL_SD_MspInit+0x244>)
 8003c9e:	f001 f803 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ca2:	2304      	movs	r3, #4
 8003ca4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003caa:	2301      	movs	r3, #1
 8003cac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003cb4:	230c      	movs	r3, #12
 8003cb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4846      	ldr	r0, [pc, #280]	@ (8003ddc <HAL_SD_MspInit+0x248>)
 8003cc2:	f000 fff1 	bl	8004ca8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003cc6:	4b46      	ldr	r3, [pc, #280]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003cc8:	4a46      	ldr	r2, [pc, #280]	@ (8003de4 <HAL_SD_MspInit+0x250>)
 8003cca:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003ccc:	4b44      	ldr	r3, [pc, #272]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003cce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003cd2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cd4:	4b42      	ldr	r3, [pc, #264]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cda:	4b41      	ldr	r3, [pc, #260]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ce0:	4b3f      	ldr	r3, [pc, #252]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003ce2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ce6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003cea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003cee:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003cf2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003cf6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003cf8:	4b39      	ldr	r3, [pc, #228]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cfe:	4b38      	ldr	r3, [pc, #224]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d04:	4b36      	ldr	r3, [pc, #216]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003d06:	2204      	movs	r2, #4
 8003d08:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d0a:	4b35      	ldr	r3, [pc, #212]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003d10:	4b33      	ldr	r3, [pc, #204]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003d12:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d16:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d18:	4b31      	ldr	r3, [pc, #196]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003d1a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003d20:	482f      	ldr	r0, [pc, #188]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003d22:	f000 fc23 	bl	800456c <HAL_DMA_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8003d2c:	f7ff fe32 	bl	8003994 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a2b      	ldr	r2, [pc, #172]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003d34:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d36:	4a2a      	ldr	r2, [pc, #168]	@ (8003de0 <HAL_SD_MspInit+0x24c>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003dec <HAL_SD_MspInit+0x258>)
 8003d40:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003d42:	4b29      	ldr	r3, [pc, #164]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003d48:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d4a:	4b27      	ldr	r3, [pc, #156]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d4c:	2240      	movs	r2, #64	@ 0x40
 8003d4e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d50:	4b25      	ldr	r3, [pc, #148]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d56:	4b24      	ldr	r3, [pc, #144]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d5c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d5e:	4b22      	ldr	r3, [pc, #136]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d64:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d66:	4b20      	ldr	r3, [pc, #128]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d68:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d6c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d70:	2220      	movs	r2, #32
 8003d72:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d74:	4b1c      	ldr	r3, [pc, #112]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d80:	4b19      	ldr	r3, [pc, #100]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d82:	2203      	movs	r2, #3
 8003d84:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003d86:	4b18      	ldr	r3, [pc, #96]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d8e:	4b16      	ldr	r3, [pc, #88]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d90:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003d94:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003d96:	4814      	ldr	r0, [pc, #80]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003d98:	f000 fbe8 	bl	800456c <HAL_DMA_Init>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_SD_MspInit+0x212>
    {
      Error_Handler();
 8003da2:	f7ff fdf7 	bl	8003994 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a0f      	ldr	r2, [pc, #60]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003daa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003dac:	4a0e      	ldr	r2, [pc, #56]	@ (8003de8 <HAL_SD_MspInit+0x254>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8003db2:	2200      	movs	r2, #0
 8003db4:	2105      	movs	r1, #5
 8003db6:	2031      	movs	r0, #49	@ 0x31
 8003db8:	f000 fbae 	bl	8004518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003dbc:	2031      	movs	r0, #49	@ 0x31
 8003dbe:	f000 fbc7 	bl	8004550 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	3788      	adds	r7, #136	@ 0x88
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40020400 	.word	0x40020400
 8003dd8:	40020800 	.word	0x40020800
 8003ddc:	40020c00 	.word	0x40020c00
 8003de0:	20000d74 	.word	0x20000d74
 8003de4:	40026458 	.word	0x40026458
 8003de8:	20000dd4 	.word	0x20000dd4
 8003dec:	400264a0 	.word	0x400264a0

08003df0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003df4:	4b17      	ldr	r3, [pc, #92]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003df6:	4a18      	ldr	r2, [pc, #96]	@ (8003e58 <MX_SPI1_Init+0x68>)
 8003df8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003dfa:	4b16      	ldr	r3, [pc, #88]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003dfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003e00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e02:	4b14      	ldr	r3, [pc, #80]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e08:	4b12      	ldr	r3, [pc, #72]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e0e:	4b11      	ldr	r3, [pc, #68]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e14:	4b0f      	ldr	r3, [pc, #60]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003e22:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003e24:	2210      	movs	r2, #16
 8003e26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e28:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e2e:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e34:	4b07      	ldr	r3, [pc, #28]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003e3c:	220a      	movs	r2, #10
 8003e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e40:	4804      	ldr	r0, [pc, #16]	@ (8003e54 <MX_SPI1_Init+0x64>)
 8003e42:	f004 fdc3 	bl	80089cc <HAL_SPI_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003e4c:	f7ff fda2 	bl	8003994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003e50:	bf00      	nop
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000e34 	.word	0x20000e34
 8003e58:	40013000 	.word	0x40013000

08003e5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	@ 0x28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <HAL_SPI_MspInit+0x94>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d133      	bne.n	8003ee6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef4 <HAL_SPI_MspInit+0x98>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e86:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef4 <HAL_SPI_MspInit+0x98>)
 8003e88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e8e:	4b19      	ldr	r3, [pc, #100]	@ (8003ef4 <HAL_SPI_MspInit+0x98>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	4b15      	ldr	r3, [pc, #84]	@ (8003ef4 <HAL_SPI_MspInit+0x98>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	4a14      	ldr	r2, [pc, #80]	@ (8003ef4 <HAL_SPI_MspInit+0x98>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eaa:	4b12      	ldr	r3, [pc, #72]	@ (8003ef4 <HAL_SPI_MspInit+0x98>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003eb6:	23e0      	movs	r3, #224	@ 0xe0
 8003eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ec6:	2305      	movs	r3, #5
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eca:	f107 0314 	add.w	r3, r7, #20
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4809      	ldr	r0, [pc, #36]	@ (8003ef8 <HAL_SPI_MspInit+0x9c>)
 8003ed2:	f000 fee9 	bl	8004ca8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2105      	movs	r1, #5
 8003eda:	2023      	movs	r0, #35	@ 0x23
 8003edc:	f000 fb1c 	bl	8004518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003ee0:	2023      	movs	r0, #35	@ 0x23
 8003ee2:	f000 fb35 	bl	8004550 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	3728      	adds	r7, #40	@ 0x28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40013000 	.word	0x40013000
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40020000 	.word	0x40020000

08003efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	607b      	str	r3, [r7, #4]
 8003f06:	4b12      	ldr	r3, [pc, #72]	@ (8003f50 <HAL_MspInit+0x54>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	4a11      	ldr	r2, [pc, #68]	@ (8003f50 <HAL_MspInit+0x54>)
 8003f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f12:	4b0f      	ldr	r3, [pc, #60]	@ (8003f50 <HAL_MspInit+0x54>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <HAL_MspInit+0x54>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	4a0a      	ldr	r2, [pc, #40]	@ (8003f50 <HAL_MspInit+0x54>)
 8003f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f2e:	4b08      	ldr	r3, [pc, #32]	@ (8003f50 <HAL_MspInit+0x54>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	210f      	movs	r1, #15
 8003f3e:	f06f 0001 	mvn.w	r0, #1
 8003f42:	f000 fae9 	bl	8004518 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800

08003f54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08c      	sub	sp, #48	@ 0x30
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	4b2f      	ldr	r3, [pc, #188]	@ (8004028 <HAL_InitTick+0xd4>)
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004028 <HAL_InitTick+0xd4>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f74:	4b2c      	ldr	r3, [pc, #176]	@ (8004028 <HAL_InitTick+0xd4>)
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f80:	f107 020c 	add.w	r2, r7, #12
 8003f84:	f107 0310 	add.w	r3, r7, #16
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f002 fbe2 	bl	8006754 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003f90:	f002 fbcc 	bl	800672c <HAL_RCC_GetPCLK2Freq>
 8003f94:	4603      	mov	r3, r0
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9c:	4a23      	ldr	r2, [pc, #140]	@ (800402c <HAL_InitTick+0xd8>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	0c9b      	lsrs	r3, r3, #18
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003fa8:	4b21      	ldr	r3, [pc, #132]	@ (8004030 <HAL_InitTick+0xdc>)
 8003faa:	4a22      	ldr	r2, [pc, #136]	@ (8004034 <HAL_InitTick+0xe0>)
 8003fac:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003fae:	4b20      	ldr	r3, [pc, #128]	@ (8004030 <HAL_InitTick+0xdc>)
 8003fb0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003fb4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004030 <HAL_InitTick+0xdc>)
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8004030 <HAL_InitTick+0xdc>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004030 <HAL_InitTick+0xdc>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc8:	4b19      	ldr	r3, [pc, #100]	@ (8004030 <HAL_InitTick+0xdc>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003fce:	4818      	ldr	r0, [pc, #96]	@ (8004030 <HAL_InitTick+0xdc>)
 8003fd0:	f005 fbfa 	bl	80097c8 <HAL_TIM_Base_Init>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003fda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11b      	bne.n	800401a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003fe2:	4813      	ldr	r0, [pc, #76]	@ (8004030 <HAL_InitTick+0xdc>)
 8003fe4:	f005 fc4a 	bl	800987c <HAL_TIM_Base_Start_IT>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003fee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d111      	bne.n	800401a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003ff6:	2019      	movs	r0, #25
 8003ff8:	f000 faaa 	bl	8004550 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b0f      	cmp	r3, #15
 8004000:	d808      	bhi.n	8004014 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8004002:	2200      	movs	r2, #0
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	2019      	movs	r0, #25
 8004008:	f000 fa86 	bl	8004518 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800400c:	4a0a      	ldr	r2, [pc, #40]	@ (8004038 <HAL_InitTick+0xe4>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e002      	b.n	800401a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800401a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800401e:	4618      	mov	r0, r3
 8004020:	3730      	adds	r7, #48	@ 0x30
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800
 800402c:	431bde83 	.word	0x431bde83
 8004030:	20000e8c 	.word	0x20000e8c
 8004034:	40010000 	.word	0x40010000
 8004038:	20000004 	.word	0x20000004

0800403c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <NMI_Handler+0x4>

08004044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004048:	bf00      	nop
 800404a:	e7fd      	b.n	8004048 <HardFault_Handler+0x4>

0800404c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004050:	bf00      	nop
 8004052:	e7fd      	b.n	8004050 <MemManage_Handler+0x4>

08004054 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <BusFault_Handler+0x4>

0800405c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <UsageFault_Handler+0x4>

08004064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004078:	4802      	ldr	r0, [pc, #8]	@ (8004084 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800407a:	f005 fc6f 	bl	800995c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000e8c 	.word	0x20000e8c

08004088 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800408c:	4802      	ldr	r0, [pc, #8]	@ (8004098 <SPI1_IRQHandler+0x10>)
 800408e:	f005 f92d 	bl	80092ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000e34 	.word	0x20000e34

0800409c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80040a0:	4802      	ldr	r0, [pc, #8]	@ (80040ac <SDIO_IRQHandler+0x10>)
 80040a2:	f003 fdeb 	bl	8007c7c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000cf0 	.word	0x20000cf0

080040b0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80040b4:	4802      	ldr	r0, [pc, #8]	@ (80040c0 <DMA2_Stream3_IRQHandler+0x10>)
 80040b6:	f000 fb81 	bl	80047bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000d74 	.word	0x20000d74

080040c4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80040c8:	4802      	ldr	r0, [pc, #8]	@ (80040d4 <DMA2_Stream6_IRQHandler+0x10>)
 80040ca:	f000 fb77 	bl	80047bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000dd4 	.word	0x20000dd4

080040d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return 1;
 80040dc:	2301      	movs	r3, #1
}
 80040de:	4618      	mov	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <_kill>:

int _kill(int pid, int sig)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040f2:	f00f f97d 	bl	80133f0 <__errno>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2216      	movs	r2, #22
 80040fa:	601a      	str	r2, [r3, #0]
  return -1;
 80040fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <_exit>:

void _exit (int status)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004110:	f04f 31ff 	mov.w	r1, #4294967295
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff ffe7 	bl	80040e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800411a:	bf00      	nop
 800411c:	e7fd      	b.n	800411a <_exit+0x12>

0800411e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	e00a      	b.n	8004146 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004130:	f3af 8000 	nop.w
 8004134:	4601      	mov	r1, r0
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	60ba      	str	r2, [r7, #8]
 800413c:	b2ca      	uxtb	r2, r1
 800413e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	3301      	adds	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	429a      	cmp	r2, r3
 800414c:	dbf0      	blt.n	8004130 <_read+0x12>
  }

  return len;
 800414e:	687b      	ldr	r3, [r7, #4]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e009      	b.n	800417e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	60ba      	str	r2, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	3301      	adds	r3, #1
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	dbf1      	blt.n	800416a <_write+0x12>
  }
  return len;
 8004186:	687b      	ldr	r3, [r7, #4]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_close>:

int _close(int file)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041b8:	605a      	str	r2, [r3, #4]
  return 0;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <_isatty>:

int _isatty(int file)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041d0:	2301      	movs	r3, #1
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004200:	4a14      	ldr	r2, [pc, #80]	@ (8004254 <_sbrk+0x5c>)
 8004202:	4b15      	ldr	r3, [pc, #84]	@ (8004258 <_sbrk+0x60>)
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800420c:	4b13      	ldr	r3, [pc, #76]	@ (800425c <_sbrk+0x64>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004214:	4b11      	ldr	r3, [pc, #68]	@ (800425c <_sbrk+0x64>)
 8004216:	4a12      	ldr	r2, [pc, #72]	@ (8004260 <_sbrk+0x68>)
 8004218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800421a:	4b10      	ldr	r3, [pc, #64]	@ (800425c <_sbrk+0x64>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4413      	add	r3, r2
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	429a      	cmp	r2, r3
 8004226:	d207      	bcs.n	8004238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004228:	f00f f8e2 	bl	80133f0 <__errno>
 800422c:	4603      	mov	r3, r0
 800422e:	220c      	movs	r2, #12
 8004230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004232:	f04f 33ff 	mov.w	r3, #4294967295
 8004236:	e009      	b.n	800424c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004238:	4b08      	ldr	r3, [pc, #32]	@ (800425c <_sbrk+0x64>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800423e:	4b07      	ldr	r3, [pc, #28]	@ (800425c <_sbrk+0x64>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	4a05      	ldr	r2, [pc, #20]	@ (800425c <_sbrk+0x64>)
 8004248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800424a:	68fb      	ldr	r3, [r7, #12]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20020000 	.word	0x20020000
 8004258:	00000400 	.word	0x00000400
 800425c:	20000ed4 	.word	0x20000ed4
 8004260:	20004e00 	.word	0x20004e00

08004264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004268:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <SystemInit+0x20>)
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426e:	4a05      	ldr	r2, [pc, #20]	@ (8004284 <SystemInit+0x20>)
 8004270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004274:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004278:	bf00      	nop
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800428c:	f7ff ffea 	bl	8004264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004290:	480c      	ldr	r0, [pc, #48]	@ (80042c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004292:	490d      	ldr	r1, [pc, #52]	@ (80042c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004294:	4a0d      	ldr	r2, [pc, #52]	@ (80042cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004298:	e002      	b.n	80042a0 <LoopCopyDataInit>

0800429a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800429a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800429c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429e:	3304      	adds	r3, #4

080042a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a4:	d3f9      	bcc.n	800429a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a6:	4a0a      	ldr	r2, [pc, #40]	@ (80042d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042a8:	4c0a      	ldr	r4, [pc, #40]	@ (80042d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042ac:	e001      	b.n	80042b2 <LoopFillZerobss>

080042ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b0:	3204      	adds	r2, #4

080042b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b4:	d3fb      	bcc.n	80042ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80042b6:	f00f f8a1 	bl	80133fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ba:	f7ff facd 	bl	8003858 <main>
  bx  lr    
 80042be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042c8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80042cc:	08016b8c 	.word	0x08016b8c
  ldr r2, =_sbss
 80042d0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80042d4:	20004dfc 	.word	0x20004dfc

080042d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042d8:	e7fe      	b.n	80042d8 <ADC_IRQHandler>
	...

080042dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042e0:	4b0e      	ldr	r3, [pc, #56]	@ (800431c <HAL_Init+0x40>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a0d      	ldr	r2, [pc, #52]	@ (800431c <HAL_Init+0x40>)
 80042e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <HAL_Init+0x40>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0a      	ldr	r2, [pc, #40]	@ (800431c <HAL_Init+0x40>)
 80042f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042f8:	4b08      	ldr	r3, [pc, #32]	@ (800431c <HAL_Init+0x40>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a07      	ldr	r2, [pc, #28]	@ (800431c <HAL_Init+0x40>)
 80042fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004304:	2003      	movs	r0, #3
 8004306:	f000 f8fc 	bl	8004502 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800430a:	200f      	movs	r0, #15
 800430c:	f7ff fe22 	bl	8003f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004310:	f7ff fdf4 	bl	8003efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023c00 	.word	0x40023c00

08004320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004324:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_IncTick+0x20>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <HAL_IncTick+0x24>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4413      	add	r3, r2
 8004330:	4a04      	ldr	r2, [pc, #16]	@ (8004344 <HAL_IncTick+0x24>)
 8004332:	6013      	str	r3, [r2, #0]
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	20000008 	.word	0x20000008
 8004344:	20000ed8 	.word	0x20000ed8

08004348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return uwTick;
 800434c:	4b03      	ldr	r3, [pc, #12]	@ (800435c <HAL_GetTick+0x14>)
 800434e:	681b      	ldr	r3, [r3, #0]
}
 8004350:	4618      	mov	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	20000ed8 	.word	0x20000ed8

08004360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004368:	f7ff ffee 	bl	8004348 <HAL_GetTick>
 800436c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d005      	beq.n	8004386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800437a:	4b0a      	ldr	r3, [pc, #40]	@ (80043a4 <HAL_Delay+0x44>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004386:	bf00      	nop
 8004388:	f7ff ffde 	bl	8004348 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	429a      	cmp	r2, r3
 8004396:	d8f7      	bhi.n	8004388 <HAL_Delay+0x28>
  {
  }
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000008 	.word	0x20000008

080043a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b8:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043c4:	4013      	ands	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043da:	4a04      	ldr	r2, [pc, #16]	@ (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	60d3      	str	r3, [r2, #12]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f4:	4b04      	ldr	r3, [pc, #16]	@ (8004408 <__NVIC_GetPriorityGrouping+0x18>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 0307 	and.w	r3, r3, #7
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	2b00      	cmp	r3, #0
 800441c:	db0b      	blt.n	8004436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	4907      	ldr	r1, [pc, #28]	@ (8004444 <__NVIC_EnableIRQ+0x38>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2001      	movs	r0, #1
 800442e:	fa00 f202 	lsl.w	r2, r0, r2
 8004432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	e000e100 	.word	0xe000e100

08004448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004458:	2b00      	cmp	r3, #0
 800445a:	db0a      	blt.n	8004472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	490c      	ldr	r1, [pc, #48]	@ (8004494 <__NVIC_SetPriority+0x4c>)
 8004462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004466:	0112      	lsls	r2, r2, #4
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	440b      	add	r3, r1
 800446c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004470:	e00a      	b.n	8004488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4908      	ldr	r1, [pc, #32]	@ (8004498 <__NVIC_SetPriority+0x50>)
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	3b04      	subs	r3, #4
 8004480:	0112      	lsls	r2, r2, #4
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	440b      	add	r3, r1
 8004486:	761a      	strb	r2, [r3, #24]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000e100 	.word	0xe000e100
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	@ 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f1c3 0307 	rsb	r3, r3, #7
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	bf28      	it	cs
 80044ba:	2304      	movcs	r3, #4
 80044bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3304      	adds	r3, #4
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d902      	bls.n	80044cc <NVIC_EncodePriority+0x30>
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3b03      	subs	r3, #3
 80044ca:	e000      	b.n	80044ce <NVIC_EncodePriority+0x32>
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43da      	mvns	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	401a      	ands	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e4:	f04f 31ff 	mov.w	r1, #4294967295
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	fa01 f303 	lsl.w	r3, r1, r3
 80044ee:	43d9      	mvns	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f4:	4313      	orrs	r3, r2
         );
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3724      	adds	r7, #36	@ 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff ff4c 	bl	80043a8 <__NVIC_SetPriorityGrouping>
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800452a:	f7ff ff61 	bl	80043f0 <__NVIC_GetPriorityGrouping>
 800452e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	6978      	ldr	r0, [r7, #20]
 8004536:	f7ff ffb1 	bl	800449c <NVIC_EncodePriority>
 800453a:	4602      	mov	r2, r0
 800453c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004540:	4611      	mov	r1, r2
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff ff80 	bl	8004448 <__NVIC_SetPriority>
}
 8004548:	bf00      	nop
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff ff54 	bl	800440c <__NVIC_EnableIRQ>
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004578:	f7ff fee6 	bl	8004348 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e099      	b.n	80046bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045a8:	e00f      	b.n	80045ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045aa:	f7ff fecd 	bl	8004348 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b05      	cmp	r3, #5
 80045b6:	d908      	bls.n	80045ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2203      	movs	r2, #3
 80045c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e078      	b.n	80046bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e8      	bne.n	80045aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4b38      	ldr	r3, [pc, #224]	@ (80046c4 <HAL_DMA_Init+0x158>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004602:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800460e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	2b04      	cmp	r3, #4
 8004622:	d107      	bne.n	8004634 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462c:	4313      	orrs	r3, r2
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f023 0307 	bic.w	r3, r3, #7
 800464a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	2b04      	cmp	r3, #4
 800465c:	d117      	bne.n	800468e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00e      	beq.n	800468e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fa9d 	bl	8004bb0 <DMA_CheckFifoParam>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2240      	movs	r2, #64	@ 0x40
 8004680:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800468a:	2301      	movs	r3, #1
 800468c:	e016      	b.n	80046bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fa54 	bl	8004b44 <DMA_CalcBaseAndBitshift>
 800469c:	4603      	mov	r3, r0
 800469e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a4:	223f      	movs	r2, #63	@ 0x3f
 80046a6:	409a      	lsls	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	f010803f 	.word	0xf010803f

080046c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_DMA_Start_IT+0x26>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e040      	b.n	8004770 <HAL_DMA_Start_IT+0xa8>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d12f      	bne.n	8004762 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f9e6 	bl	8004ae8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004720:	223f      	movs	r2, #63	@ 0x3f
 8004722:	409a      	lsls	r2, r3
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0216 	orr.w	r2, r2, #22
 8004736:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0208 	orr.w	r2, r2, #8
 800474e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	e005      	b.n	800476e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800476a:	2302      	movs	r3, #2
 800476c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800476e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d004      	beq.n	8004796 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2280      	movs	r2, #128	@ 0x80
 8004790:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e00c      	b.n	80047b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2205      	movs	r2, #5
 800479a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047c8:	4b8e      	ldr	r3, [pc, #568]	@ (8004a04 <HAL_DMA_IRQHandler+0x248>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a8e      	ldr	r2, [pc, #568]	@ (8004a08 <HAL_DMA_IRQHandler+0x24c>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	0a9b      	lsrs	r3, r3, #10
 80047d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e6:	2208      	movs	r2, #8
 80047e8:	409a      	lsls	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d01a      	beq.n	8004828 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d013      	beq.n	8004828 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0204 	bic.w	r2, r2, #4
 800480e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004814:	2208      	movs	r2, #8
 8004816:	409a      	lsls	r2, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004820:	f043 0201 	orr.w	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482c:	2201      	movs	r2, #1
 800482e:	409a      	lsls	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d012      	beq.n	800485e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00b      	beq.n	800485e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484a:	2201      	movs	r2, #1
 800484c:	409a      	lsls	r2, r3
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004856:	f043 0202 	orr.w	r2, r3, #2
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004862:	2204      	movs	r2, #4
 8004864:	409a      	lsls	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4013      	ands	r3, r2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d012      	beq.n	8004894 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00b      	beq.n	8004894 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004880:	2204      	movs	r2, #4
 8004882:	409a      	lsls	r2, r3
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800488c:	f043 0204 	orr.w	r2, r3, #4
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004898:	2210      	movs	r2, #16
 800489a:	409a      	lsls	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d043      	beq.n	800492c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d03c      	beq.n	800492c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b6:	2210      	movs	r2, #16
 80048b8:	409a      	lsls	r2, r3
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d018      	beq.n	80048fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d108      	bne.n	80048ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d024      	beq.n	800492c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
 80048ea:	e01f      	b.n	800492c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01b      	beq.n	800492c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	4798      	blx	r3
 80048fc:	e016      	b.n	800492c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d107      	bne.n	800491c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0208 	bic.w	r2, r2, #8
 800491a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004930:	2220      	movs	r2, #32
 8004932:	409a      	lsls	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4013      	ands	r3, r2
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 808f 	beq.w	8004a5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8087 	beq.w	8004a5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004952:	2220      	movs	r2, #32
 8004954:	409a      	lsls	r2, r3
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b05      	cmp	r3, #5
 8004964:	d136      	bne.n	80049d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0216 	bic.w	r2, r2, #22
 8004974:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004984:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d103      	bne.n	8004996 <HAL_DMA_IRQHandler+0x1da>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004992:	2b00      	cmp	r3, #0
 8004994:	d007      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0208 	bic.w	r2, r2, #8
 80049a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049aa:	223f      	movs	r2, #63	@ 0x3f
 80049ac:	409a      	lsls	r2, r3
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d07e      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	4798      	blx	r3
        }
        return;
 80049d2:	e079      	b.n	8004ac8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01d      	beq.n	8004a1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10d      	bne.n	8004a0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d031      	beq.n	8004a5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
 8004a00:	e02c      	b.n	8004a5c <HAL_DMA_IRQHandler+0x2a0>
 8004a02:	bf00      	nop
 8004a04:	20000000 	.word	0x20000000
 8004a08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d023      	beq.n	8004a5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	4798      	blx	r3
 8004a1c:	e01e      	b.n	8004a5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10f      	bne.n	8004a4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0210 	bic.w	r2, r2, #16
 8004a3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d032      	beq.n	8004aca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d022      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2205      	movs	r2, #5
 8004a74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d307      	bcc.n	8004aa4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f2      	bne.n	8004a88 <HAL_DMA_IRQHandler+0x2cc>
 8004aa2:	e000      	b.n	8004aa6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004aa4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	4798      	blx	r3
 8004ac6:	e000      	b.n	8004aca <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ac8:	bf00      	nop
    }
  }
}
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b40      	cmp	r3, #64	@ 0x40
 8004b14:	d108      	bne.n	8004b28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b26:	e007      	b.n	8004b38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	60da      	str	r2, [r3, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	3b10      	subs	r3, #16
 8004b54:	4a14      	ldr	r2, [pc, #80]	@ (8004ba8 <DMA_CalcBaseAndBitshift+0x64>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b5e:	4a13      	ldr	r2, [pc, #76]	@ (8004bac <DMA_CalcBaseAndBitshift+0x68>)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d909      	bls.n	8004b86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	1d1a      	adds	r2, r3, #4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b84:	e007      	b.n	8004b96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b8e:	f023 0303 	bic.w	r3, r3, #3
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	aaaaaaab 	.word	0xaaaaaaab
 8004bac:	08016358 	.word	0x08016358

08004bb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d11f      	bne.n	8004c0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d856      	bhi.n	8004c7e <DMA_CheckFifoParam+0xce>
 8004bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd8 <DMA_CheckFifoParam+0x28>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bfb 	.word	0x08004bfb
 8004be0:	08004be9 	.word	0x08004be9
 8004be4:	08004c7f 	.word	0x08004c7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d046      	beq.n	8004c82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf8:	e043      	b.n	8004c82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c02:	d140      	bne.n	8004c86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c08:	e03d      	b.n	8004c86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c12:	d121      	bne.n	8004c58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d837      	bhi.n	8004c8a <DMA_CheckFifoParam+0xda>
 8004c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c20 <DMA_CheckFifoParam+0x70>)
 8004c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c20:	08004c31 	.word	0x08004c31
 8004c24:	08004c37 	.word	0x08004c37
 8004c28:	08004c31 	.word	0x08004c31
 8004c2c:	08004c49 	.word	0x08004c49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      break;
 8004c34:	e030      	b.n	8004c98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d025      	beq.n	8004c8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c46:	e022      	b.n	8004c8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c50:	d11f      	bne.n	8004c92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c56:	e01c      	b.n	8004c92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d903      	bls.n	8004c66 <DMA_CheckFifoParam+0xb6>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d003      	beq.n	8004c6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c64:	e018      	b.n	8004c98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
      break;
 8004c6a:	e015      	b.n	8004c98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00e      	beq.n	8004c96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7c:	e00b      	b.n	8004c96 <DMA_CheckFifoParam+0xe6>
      break;
 8004c7e:	bf00      	nop
 8004c80:	e00a      	b.n	8004c98 <DMA_CheckFifoParam+0xe8>
      break;
 8004c82:	bf00      	nop
 8004c84:	e008      	b.n	8004c98 <DMA_CheckFifoParam+0xe8>
      break;
 8004c86:	bf00      	nop
 8004c88:	e006      	b.n	8004c98 <DMA_CheckFifoParam+0xe8>
      break;
 8004c8a:	bf00      	nop
 8004c8c:	e004      	b.n	8004c98 <DMA_CheckFifoParam+0xe8>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e002      	b.n	8004c98 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c92:	bf00      	nop
 8004c94:	e000      	b.n	8004c98 <DMA_CheckFifoParam+0xe8>
      break;
 8004c96:	bf00      	nop
    }
  } 
  
  return status; 
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop

08004ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b089      	sub	sp, #36	@ 0x24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	e165      	b.n	8004f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	f040 8154 	bne.w	8004f8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d005      	beq.n	8004cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d130      	bne.n	8004d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	2203      	movs	r2, #3
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d30:	2201      	movs	r2, #1
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	f003 0201 	and.w	r2, r3, #1
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d017      	beq.n	8004d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	2203      	movs	r2, #3
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d123      	bne.n	8004dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	08da      	lsrs	r2, r3, #3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3208      	adds	r2, #8
 8004dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	220f      	movs	r2, #15
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	08da      	lsrs	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3208      	adds	r2, #8
 8004de6:	69b9      	ldr	r1, [r7, #24]
 8004de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	2203      	movs	r2, #3
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f003 0203 	and.w	r2, r3, #3
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80ae 	beq.w	8004f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	4b5d      	ldr	r3, [pc, #372]	@ (8004fa8 <HAL_GPIO_Init+0x300>)
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	4a5c      	ldr	r2, [pc, #368]	@ (8004fa8 <HAL_GPIO_Init+0x300>)
 8004e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8004fa8 <HAL_GPIO_Init+0x300>)
 8004e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e4a:	4a58      	ldr	r2, [pc, #352]	@ (8004fac <HAL_GPIO_Init+0x304>)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	3302      	adds	r3, #2
 8004e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	220f      	movs	r2, #15
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43db      	mvns	r3, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a4f      	ldr	r2, [pc, #316]	@ (8004fb0 <HAL_GPIO_Init+0x308>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d025      	beq.n	8004ec2 <HAL_GPIO_Init+0x21a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a4e      	ldr	r2, [pc, #312]	@ (8004fb4 <HAL_GPIO_Init+0x30c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01f      	beq.n	8004ebe <HAL_GPIO_Init+0x216>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a4d      	ldr	r2, [pc, #308]	@ (8004fb8 <HAL_GPIO_Init+0x310>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d019      	beq.n	8004eba <HAL_GPIO_Init+0x212>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a4c      	ldr	r2, [pc, #304]	@ (8004fbc <HAL_GPIO_Init+0x314>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <HAL_GPIO_Init+0x20e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a4b      	ldr	r2, [pc, #300]	@ (8004fc0 <HAL_GPIO_Init+0x318>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00d      	beq.n	8004eb2 <HAL_GPIO_Init+0x20a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a4a      	ldr	r2, [pc, #296]	@ (8004fc4 <HAL_GPIO_Init+0x31c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d007      	beq.n	8004eae <HAL_GPIO_Init+0x206>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a49      	ldr	r2, [pc, #292]	@ (8004fc8 <HAL_GPIO_Init+0x320>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d101      	bne.n	8004eaa <HAL_GPIO_Init+0x202>
 8004ea6:	2306      	movs	r3, #6
 8004ea8:	e00c      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004eaa:	2307      	movs	r3, #7
 8004eac:	e00a      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004eae:	2305      	movs	r3, #5
 8004eb0:	e008      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	e006      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e004      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e002      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	f002 0203 	and.w	r2, r2, #3
 8004eca:	0092      	lsls	r2, r2, #2
 8004ecc:	4093      	lsls	r3, r2
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ed4:	4935      	ldr	r1, [pc, #212]	@ (8004fac <HAL_GPIO_Init+0x304>)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	3302      	adds	r3, #2
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8004fcc <HAL_GPIO_Init+0x324>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f06:	4a31      	ldr	r2, [pc, #196]	@ (8004fcc <HAL_GPIO_Init+0x324>)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8004fcc <HAL_GPIO_Init+0x324>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f30:	4a26      	ldr	r2, [pc, #152]	@ (8004fcc <HAL_GPIO_Init+0x324>)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f36:	4b25      	ldr	r3, [pc, #148]	@ (8004fcc <HAL_GPIO_Init+0x324>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4013      	ands	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fcc <HAL_GPIO_Init+0x324>)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f60:	4b1a      	ldr	r3, [pc, #104]	@ (8004fcc <HAL_GPIO_Init+0x324>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f84:	4a11      	ldr	r2, [pc, #68]	@ (8004fcc <HAL_GPIO_Init+0x324>)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	f67f ae96 	bls.w	8004cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	3724      	adds	r7, #36	@ 0x24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40013800 	.word	0x40013800
 8004fb0:	40020000 	.word	0x40020000
 8004fb4:	40020400 	.word	0x40020400
 8004fb8:	40020800 	.word	0x40020800
 8004fbc:	40020c00 	.word	0x40020c00
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40021400 	.word	0x40021400
 8004fc8:	40021800 	.word	0x40021800
 8004fcc:	40013c00 	.word	0x40013c00

08004fd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e0c7      	b.n	800517c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fec:	2201      	movs	r2, #1
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	429a      	cmp	r2, r3
 8005004:	f040 80b7 	bne.w	8005176 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005008:	4a62      	ldr	r2, [pc, #392]	@ (8005194 <HAL_GPIO_DeInit+0x1c4>)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	3302      	adds	r3, #2
 8005010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005014:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	220f      	movs	r2, #15
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	4013      	ands	r3, r2
 8005028:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a5a      	ldr	r2, [pc, #360]	@ (8005198 <HAL_GPIO_DeInit+0x1c8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d025      	beq.n	800507e <HAL_GPIO_DeInit+0xae>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a59      	ldr	r2, [pc, #356]	@ (800519c <HAL_GPIO_DeInit+0x1cc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d01f      	beq.n	800507a <HAL_GPIO_DeInit+0xaa>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a58      	ldr	r2, [pc, #352]	@ (80051a0 <HAL_GPIO_DeInit+0x1d0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d019      	beq.n	8005076 <HAL_GPIO_DeInit+0xa6>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a57      	ldr	r2, [pc, #348]	@ (80051a4 <HAL_GPIO_DeInit+0x1d4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <HAL_GPIO_DeInit+0xa2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a56      	ldr	r2, [pc, #344]	@ (80051a8 <HAL_GPIO_DeInit+0x1d8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00d      	beq.n	800506e <HAL_GPIO_DeInit+0x9e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a55      	ldr	r2, [pc, #340]	@ (80051ac <HAL_GPIO_DeInit+0x1dc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d007      	beq.n	800506a <HAL_GPIO_DeInit+0x9a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a54      	ldr	r2, [pc, #336]	@ (80051b0 <HAL_GPIO_DeInit+0x1e0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d101      	bne.n	8005066 <HAL_GPIO_DeInit+0x96>
 8005062:	2306      	movs	r3, #6
 8005064:	e00c      	b.n	8005080 <HAL_GPIO_DeInit+0xb0>
 8005066:	2307      	movs	r3, #7
 8005068:	e00a      	b.n	8005080 <HAL_GPIO_DeInit+0xb0>
 800506a:	2305      	movs	r3, #5
 800506c:	e008      	b.n	8005080 <HAL_GPIO_DeInit+0xb0>
 800506e:	2304      	movs	r3, #4
 8005070:	e006      	b.n	8005080 <HAL_GPIO_DeInit+0xb0>
 8005072:	2303      	movs	r3, #3
 8005074:	e004      	b.n	8005080 <HAL_GPIO_DeInit+0xb0>
 8005076:	2302      	movs	r3, #2
 8005078:	e002      	b.n	8005080 <HAL_GPIO_DeInit+0xb0>
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <HAL_GPIO_DeInit+0xb0>
 800507e:	2300      	movs	r3, #0
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	f002 0203 	and.w	r2, r2, #3
 8005086:	0092      	lsls	r2, r2, #2
 8005088:	4093      	lsls	r3, r2
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	429a      	cmp	r2, r3
 800508e:	d132      	bne.n	80050f6 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005090:	4b48      	ldr	r3, [pc, #288]	@ (80051b4 <HAL_GPIO_DeInit+0x1e4>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	43db      	mvns	r3, r3
 8005098:	4946      	ldr	r1, [pc, #280]	@ (80051b4 <HAL_GPIO_DeInit+0x1e4>)
 800509a:	4013      	ands	r3, r2
 800509c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800509e:	4b45      	ldr	r3, [pc, #276]	@ (80051b4 <HAL_GPIO_DeInit+0x1e4>)
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	43db      	mvns	r3, r3
 80050a6:	4943      	ldr	r1, [pc, #268]	@ (80051b4 <HAL_GPIO_DeInit+0x1e4>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80050ac:	4b41      	ldr	r3, [pc, #260]	@ (80051b4 <HAL_GPIO_DeInit+0x1e4>)
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	43db      	mvns	r3, r3
 80050b4:	493f      	ldr	r1, [pc, #252]	@ (80051b4 <HAL_GPIO_DeInit+0x1e4>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80050ba:	4b3e      	ldr	r3, [pc, #248]	@ (80051b4 <HAL_GPIO_DeInit+0x1e4>)
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	43db      	mvns	r3, r3
 80050c2:	493c      	ldr	r1, [pc, #240]	@ (80051b4 <HAL_GPIO_DeInit+0x1e4>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	220f      	movs	r2, #15
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80050d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005194 <HAL_GPIO_DeInit+0x1c4>)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	3302      	adds	r3, #2
 80050e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	43da      	mvns	r2, r3
 80050e8:	482a      	ldr	r0, [pc, #168]	@ (8005194 <HAL_GPIO_DeInit+0x1c4>)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	089b      	lsrs	r3, r3, #2
 80050ee:	400a      	ands	r2, r1
 80050f0:	3302      	adds	r3, #2
 80050f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	2103      	movs	r1, #3
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	43db      	mvns	r3, r3
 8005106:	401a      	ands	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	08da      	lsrs	r2, r3, #3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3208      	adds	r2, #8
 8005114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	220f      	movs	r2, #15
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43db      	mvns	r3, r3
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	08d2      	lsrs	r2, r2, #3
 800512c:	4019      	ands	r1, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3208      	adds	r2, #8
 8005132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	2103      	movs	r1, #3
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	43db      	mvns	r3, r3
 8005146:	401a      	ands	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	2101      	movs	r1, #1
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	fa01 f303 	lsl.w	r3, r1, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	401a      	ands	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	2103      	movs	r1, #3
 800516a:	fa01 f303 	lsl.w	r3, r1, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	401a      	ands	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	3301      	adds	r3, #1
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b0f      	cmp	r3, #15
 8005180:	f67f af34 	bls.w	8004fec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40013800 	.word	0x40013800
 8005198:	40020000 	.word	0x40020000
 800519c:	40020400 	.word	0x40020400
 80051a0:	40020800 	.word	0x40020800
 80051a4:	40020c00 	.word	0x40020c00
 80051a8:	40021000 	.word	0x40021000
 80051ac:	40021400 	.word	0x40021400
 80051b0:	40021800 	.word	0x40021800
 80051b4:	40013c00 	.word	0x40013c00

080051b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	887b      	ldrh	r3, [r7, #2]
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
 80051d4:	e001      	b.n	80051da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051d6:	2300      	movs	r3, #0
 80051d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	807b      	strh	r3, [r7, #2]
 80051f4:	4613      	mov	r3, r2
 80051f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051f8:	787b      	ldrb	r3, [r7, #1]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051fe:	887a      	ldrh	r2, [r7, #2]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005204:	e003      	b.n	800520e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005206:	887b      	ldrh	r3, [r7, #2]
 8005208:	041a      	lsls	r2, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	619a      	str	r2, [r3, #24]
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e12b      	b.n	8005486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fe fa2a 	bl	800369c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2224      	movs	r2, #36	@ 0x24
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0201 	bic.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800526e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800527e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005280:	f001 fa40 	bl	8006704 <HAL_RCC_GetPCLK1Freq>
 8005284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	4a81      	ldr	r2, [pc, #516]	@ (8005490 <HAL_I2C_Init+0x274>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d807      	bhi.n	80052a0 <HAL_I2C_Init+0x84>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4a80      	ldr	r2, [pc, #512]	@ (8005494 <HAL_I2C_Init+0x278>)
 8005294:	4293      	cmp	r3, r2
 8005296:	bf94      	ite	ls
 8005298:	2301      	movls	r3, #1
 800529a:	2300      	movhi	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e006      	b.n	80052ae <HAL_I2C_Init+0x92>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a7d      	ldr	r2, [pc, #500]	@ (8005498 <HAL_I2C_Init+0x27c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	bf94      	ite	ls
 80052a8:	2301      	movls	r3, #1
 80052aa:	2300      	movhi	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0e7      	b.n	8005486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a78      	ldr	r2, [pc, #480]	@ (800549c <HAL_I2C_Init+0x280>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	0c9b      	lsrs	r3, r3, #18
 80052c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4a6a      	ldr	r2, [pc, #424]	@ (8005490 <HAL_I2C_Init+0x274>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d802      	bhi.n	80052f0 <HAL_I2C_Init+0xd4>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	3301      	adds	r3, #1
 80052ee:	e009      	b.n	8005304 <HAL_I2C_Init+0xe8>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	4a69      	ldr	r2, [pc, #420]	@ (80054a0 <HAL_I2C_Init+0x284>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	099b      	lsrs	r3, r3, #6
 8005302:	3301      	adds	r3, #1
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	430b      	orrs	r3, r1
 800530a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005316:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	495c      	ldr	r1, [pc, #368]	@ (8005490 <HAL_I2C_Init+0x274>)
 8005320:	428b      	cmp	r3, r1
 8005322:	d819      	bhi.n	8005358 <HAL_I2C_Init+0x13c>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1e59      	subs	r1, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005332:	1c59      	adds	r1, r3, #1
 8005334:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005338:	400b      	ands	r3, r1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_I2C_Init+0x138>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1e59      	subs	r1, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	fbb1 f3f3 	udiv	r3, r1, r3
 800534c:	3301      	adds	r3, #1
 800534e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005352:	e051      	b.n	80053f8 <HAL_I2C_Init+0x1dc>
 8005354:	2304      	movs	r3, #4
 8005356:	e04f      	b.n	80053f8 <HAL_I2C_Init+0x1dc>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d111      	bne.n	8005384 <HAL_I2C_Init+0x168>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	1e58      	subs	r0, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6859      	ldr	r1, [r3, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	440b      	add	r3, r1
 800536e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005372:	3301      	adds	r3, #1
 8005374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005378:	2b00      	cmp	r3, #0
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e012      	b.n	80053aa <HAL_I2C_Init+0x18e>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1e58      	subs	r0, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6859      	ldr	r1, [r3, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	0099      	lsls	r1, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	fbb0 f3f3 	udiv	r3, r0, r3
 800539a:	3301      	adds	r3, #1
 800539c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf0c      	ite	eq
 80053a4:	2301      	moveq	r3, #1
 80053a6:	2300      	movne	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_I2C_Init+0x196>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e022      	b.n	80053f8 <HAL_I2C_Init+0x1dc>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10e      	bne.n	80053d8 <HAL_I2C_Init+0x1bc>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1e58      	subs	r0, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6859      	ldr	r1, [r3, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	440b      	add	r3, r1
 80053c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80053cc:	3301      	adds	r3, #1
 80053ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053d6:	e00f      	b.n	80053f8 <HAL_I2C_Init+0x1dc>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1e58      	subs	r0, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	0099      	lsls	r1, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ee:	3301      	adds	r3, #1
 80053f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	6809      	ldr	r1, [r1, #0]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005426:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6911      	ldr	r1, [r2, #16]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68d2      	ldr	r2, [r2, #12]
 8005432:	4311      	orrs	r1, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	430b      	orrs	r3, r1
 800543a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695a      	ldr	r2, [r3, #20]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	000186a0 	.word	0x000186a0
 8005494:	001e847f 	.word	0x001e847f
 8005498:	003d08ff 	.word	0x003d08ff
 800549c:	431bde83 	.word	0x431bde83
 80054a0:	10624dd3 	.word	0x10624dd3

080054a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e021      	b.n	80054fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2224      	movs	r2, #36	@ 0x24
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fe f984 	bl	80037dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	4608      	mov	r0, r1
 800550e:	4611      	mov	r1, r2
 8005510:	461a      	mov	r2, r3
 8005512:	4603      	mov	r3, r0
 8005514:	817b      	strh	r3, [r7, #10]
 8005516:	460b      	mov	r3, r1
 8005518:	813b      	strh	r3, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800551e:	f7fe ff13 	bl	8004348 <HAL_GetTick>
 8005522:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b20      	cmp	r3, #32
 800552e:	f040 80d9 	bne.w	80056e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	2319      	movs	r3, #25
 8005538:	2201      	movs	r2, #1
 800553a:	496d      	ldr	r1, [pc, #436]	@ (80056f0 <HAL_I2C_Mem_Write+0x1ec>)
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 fdb9 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005548:	2302      	movs	r3, #2
 800554a:	e0cc      	b.n	80056e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_I2C_Mem_Write+0x56>
 8005556:	2302      	movs	r3, #2
 8005558:	e0c5      	b.n	80056e6 <HAL_I2C_Mem_Write+0x1e2>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b01      	cmp	r3, #1
 800556e:	d007      	beq.n	8005580 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800558e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2221      	movs	r2, #33	@ 0x21
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2240      	movs	r2, #64	@ 0x40
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a3a      	ldr	r2, [r7, #32]
 80055aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a4d      	ldr	r2, [pc, #308]	@ (80056f4 <HAL_I2C_Mem_Write+0x1f0>)
 80055c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055c2:	88f8      	ldrh	r0, [r7, #6]
 80055c4:	893a      	ldrh	r2, [r7, #8]
 80055c6:	8979      	ldrh	r1, [r7, #10]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	4603      	mov	r3, r0
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fbf0 	bl	8005db8 <I2C_RequestMemoryWrite>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d052      	beq.n	8005684 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e081      	b.n	80056e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fe7e 	bl	80062e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00d      	beq.n	800560e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d107      	bne.n	800560a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005608:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e06b      	b.n	80056e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005612:	781a      	ldrb	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b04      	cmp	r3, #4
 800564a:	d11b      	bne.n	8005684 <HAL_I2C_Mem_Write+0x180>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005650:	2b00      	cmp	r3, #0
 8005652:	d017      	beq.n	8005684 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005658:	781a      	ldrb	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1aa      	bne.n	80055e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 fe71 	bl	8006378 <I2C_WaitOnBTFFlagUntilTimeout>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00d      	beq.n	80056b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d107      	bne.n	80056b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e016      	b.n	80056e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e000      	b.n	80056e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80056e4:	2302      	movs	r3, #2
  }
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	00100002 	.word	0x00100002
 80056f4:	ffff0000 	.word	0xffff0000

080056f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	@ 0x30
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	4608      	mov	r0, r1
 8005702:	4611      	mov	r1, r2
 8005704:	461a      	mov	r2, r3
 8005706:	4603      	mov	r3, r0
 8005708:	817b      	strh	r3, [r7, #10]
 800570a:	460b      	mov	r3, r1
 800570c:	813b      	strh	r3, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005712:	f7fe fe19 	bl	8004348 <HAL_GetTick>
 8005716:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b20      	cmp	r3, #32
 8005722:	f040 8214 	bne.w	8005b4e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	2319      	movs	r3, #25
 800572c:	2201      	movs	r2, #1
 800572e:	497b      	ldr	r1, [pc, #492]	@ (800591c <HAL_I2C_Mem_Read+0x224>)
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 fcbf 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800573c:	2302      	movs	r3, #2
 800573e:	e207      	b.n	8005b50 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_I2C_Mem_Read+0x56>
 800574a:	2302      	movs	r3, #2
 800574c:	e200      	b.n	8005b50 <HAL_I2C_Mem_Read+0x458>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b01      	cmp	r3, #1
 8005762:	d007      	beq.n	8005774 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005782:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2222      	movs	r2, #34	@ 0x22
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2240      	movs	r2, #64	@ 0x40
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800579e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80057a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a5b      	ldr	r2, [pc, #364]	@ (8005920 <HAL_I2C_Mem_Read+0x228>)
 80057b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057b6:	88f8      	ldrh	r0, [r7, #6]
 80057b8:	893a      	ldrh	r2, [r7, #8]
 80057ba:	8979      	ldrh	r1, [r7, #10]
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	4603      	mov	r3, r0
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 fb8c 	bl	8005ee4 <I2C_RequestMemoryRead>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e1bc      	b.n	8005b50 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d113      	bne.n	8005806 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057de:	2300      	movs	r3, #0
 80057e0:	623b      	str	r3, [r7, #32]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	623b      	str	r3, [r7, #32]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	623b      	str	r3, [r7, #32]
 80057f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	e190      	b.n	8005b28 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580a:	2b01      	cmp	r3, #1
 800580c:	d11b      	bne.n	8005846 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800581c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e170      	b.n	8005b28 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584a:	2b02      	cmp	r3, #2
 800584c:	d11b      	bne.n	8005886 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800585c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800586c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	e150      	b.n	8005b28 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800589c:	e144      	b.n	8005b28 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	f200 80f1 	bhi.w	8005a8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d123      	bne.n	80058f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fda7 	bl	8006408 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e145      	b.n	8005b50 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058f6:	e117      	b.n	8005b28 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d14e      	bne.n	800599e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005906:	2200      	movs	r2, #0
 8005908:	4906      	ldr	r1, [pc, #24]	@ (8005924 <HAL_I2C_Mem_Read+0x22c>)
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 fbd2 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e11a      	b.n	8005b50 <HAL_I2C_Mem_Read+0x458>
 800591a:	bf00      	nop
 800591c:	00100002 	.word	0x00100002
 8005920:	ffff0000 	.word	0xffff0000
 8005924:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800599c:	e0c4      	b.n	8005b28 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a4:	2200      	movs	r2, #0
 80059a6:	496c      	ldr	r1, [pc, #432]	@ (8005b58 <HAL_I2C_Mem_Read+0x460>)
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fb83 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0cb      	b.n	8005b50 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a00:	2200      	movs	r2, #0
 8005a02:	4955      	ldr	r1, [pc, #340]	@ (8005b58 <HAL_I2C_Mem_Read+0x460>)
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fb55 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e09d      	b.n	8005b50 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a88:	e04e      	b.n	8005b28 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fcba 	bl	8006408 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e058      	b.n	8005b50 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d124      	bne.n	8005b28 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d107      	bne.n	8005af6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691a      	ldr	r2, [r3, #16]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f47f aeb6 	bne.w	800589e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e000      	b.n	8005b50 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005b4e:	2302      	movs	r3, #2
  }
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3728      	adds	r7, #40	@ 0x28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	00010004 	.word	0x00010004

08005b5c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	@ 0x28
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005b6c:	f7fe fbec 	bl	8004348 <HAL_GetTick>
 8005b70:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	f040 8111 	bne.w	8005da6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	2319      	movs	r3, #25
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	4988      	ldr	r1, [pc, #544]	@ (8005db0 <HAL_I2C_IsDeviceReady+0x254>)
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fa90 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e104      	b.n	8005da8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_I2C_IsDeviceReady+0x50>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e0fd      	b.n	8005da8 <HAL_I2C_IsDeviceReady+0x24c>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d007      	beq.n	8005bd2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005be0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2224      	movs	r2, #36	@ 0x24
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4a70      	ldr	r2, [pc, #448]	@ (8005db4 <HAL_I2C_IsDeviceReady+0x258>)
 8005bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c04:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 fa4e 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00d      	beq.n	8005c3a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c2c:	d103      	bne.n	8005c36 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c34:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e0b6      	b.n	8005da8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c3a:	897b      	ldrh	r3, [r7, #10]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c48:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005c4a:	f7fe fb7d 	bl	8004348 <HAL_GetTick>
 8005c4e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	bf0c      	ite	eq
 8005c5e:	2301      	moveq	r3, #1
 8005c60:	2300      	movne	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005c7e:	e025      	b.n	8005ccc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c80:	f7fe fb62 	bl	8004348 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d302      	bcc.n	8005c96 <HAL_I2C_IsDeviceReady+0x13a>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d103      	bne.n	8005c9e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	22a0      	movs	r2, #160	@ 0xa0
 8005c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cc2:	bf0c      	ite	eq
 8005cc4:	2301      	moveq	r3, #1
 8005cc6:	2300      	movne	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2ba0      	cmp	r3, #160	@ 0xa0
 8005cd6:	d005      	beq.n	8005ce4 <HAL_I2C_IsDeviceReady+0x188>
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d102      	bne.n	8005ce4 <HAL_I2C_IsDeviceReady+0x188>
 8005cde:	7dbb      	ldrb	r3, [r7, #22]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0cd      	beq.n	8005c80 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d129      	bne.n	8005d4e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	613b      	str	r3, [r7, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	2319      	movs	r3, #25
 8005d26:	2201      	movs	r2, #1
 8005d28:	4921      	ldr	r1, [pc, #132]	@ (8005db0 <HAL_I2C_IsDeviceReady+0x254>)
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f9c2 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e036      	b.n	8005da8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e02c      	b.n	8005da8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2319      	movs	r3, #25
 8005d6e:	2201      	movs	r2, #1
 8005d70:	490f      	ldr	r1, [pc, #60]	@ (8005db0 <HAL_I2C_IsDeviceReady+0x254>)
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 f99e 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e012      	b.n	8005da8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	3301      	adds	r3, #1
 8005d86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	f4ff af32 	bcc.w	8005bf6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005da6:	2302      	movs	r3, #2
  }
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3720      	adds	r7, #32
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	00100002 	.word	0x00100002
 8005db4:	ffff0000 	.word	0xffff0000

08005db8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	817b      	strh	r3, [r7, #10]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	813b      	strh	r3, [r7, #8]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005de0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f960 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00d      	beq.n	8005e16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e08:	d103      	bne.n	8005e12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e05f      	b.n	8005ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e16:	897b      	ldrh	r3, [r7, #10]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	6a3a      	ldr	r2, [r7, #32]
 8005e2a:	492d      	ldr	r1, [pc, #180]	@ (8005ee0 <I2C_RequestMemoryWrite+0x128>)
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f9bb 	bl	80061a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e04c      	b.n	8005ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e54:	6a39      	ldr	r1, [r7, #32]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fa46 	bl	80062e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00d      	beq.n	8005e7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d107      	bne.n	8005e7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e02b      	b.n	8005ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e7e:	88fb      	ldrh	r3, [r7, #6]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d105      	bne.n	8005e90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e84:	893b      	ldrh	r3, [r7, #8]
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	611a      	str	r2, [r3, #16]
 8005e8e:	e021      	b.n	8005ed4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e90:	893b      	ldrh	r3, [r7, #8]
 8005e92:	0a1b      	lsrs	r3, r3, #8
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ea0:	6a39      	ldr	r1, [r7, #32]
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 fa20 	bl	80062e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00d      	beq.n	8005eca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d107      	bne.n	8005ec6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ec4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e005      	b.n	8005ed6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eca:	893b      	ldrh	r3, [r7, #8]
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	00010002 	.word	0x00010002

08005ee4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	4608      	mov	r0, r1
 8005eee:	4611      	mov	r1, r2
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	817b      	strh	r3, [r7, #10]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	813b      	strh	r3, [r7, #8]
 8005efa:	4613      	mov	r3, r2
 8005efc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f8c2 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00d      	beq.n	8005f52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f44:	d103      	bne.n	8005f4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e0aa      	b.n	80060a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f52:	897b      	ldrh	r3, [r7, #10]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	6a3a      	ldr	r2, [r7, #32]
 8005f66:	4952      	ldr	r1, [pc, #328]	@ (80060b0 <I2C_RequestMemoryRead+0x1cc>)
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f91d 	bl	80061a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e097      	b.n	80060a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f90:	6a39      	ldr	r1, [r7, #32]
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 f9a8 	bl	80062e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00d      	beq.n	8005fba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d107      	bne.n	8005fb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e076      	b.n	80060a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d105      	bne.n	8005fcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fc0:	893b      	ldrh	r3, [r7, #8]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	611a      	str	r2, [r3, #16]
 8005fca:	e021      	b.n	8006010 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fcc:	893b      	ldrh	r3, [r7, #8]
 8005fce:	0a1b      	lsrs	r3, r3, #8
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fdc:	6a39      	ldr	r1, [r7, #32]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f982 	bl	80062e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00d      	beq.n	8006006 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d107      	bne.n	8006002 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006000:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e050      	b.n	80060a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006006:	893b      	ldrh	r3, [r7, #8]
 8006008:	b2da      	uxtb	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006012:	6a39      	ldr	r1, [r7, #32]
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f967 	bl	80062e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00d      	beq.n	800603c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006024:	2b04      	cmp	r3, #4
 8006026:	d107      	bne.n	8006038 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006036:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e035      	b.n	80060a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800604a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	2200      	movs	r2, #0
 8006054:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f82b 	bl	80060b4 <I2C_WaitOnFlagUntilTimeout>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00d      	beq.n	8006080 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800606e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006072:	d103      	bne.n	800607c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800607a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e013      	b.n	80060a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006080:	897b      	ldrh	r3, [r7, #10]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	b2da      	uxtb	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	6a3a      	ldr	r2, [r7, #32]
 8006094:	4906      	ldr	r1, [pc, #24]	@ (80060b0 <I2C_RequestMemoryRead+0x1cc>)
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 f886 	bl	80061a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	00010002 	.word	0x00010002

080060b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	4613      	mov	r3, r2
 80060c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060c4:	e048      	b.n	8006158 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d044      	beq.n	8006158 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ce:	f7fe f93b 	bl	8004348 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d302      	bcc.n	80060e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d139      	bne.n	8006158 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	0c1b      	lsrs	r3, r3, #16
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d10d      	bne.n	800610a <I2C_WaitOnFlagUntilTimeout+0x56>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	43da      	mvns	r2, r3
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4013      	ands	r3, r2
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bf0c      	ite	eq
 8006100:	2301      	moveq	r3, #1
 8006102:	2300      	movne	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	e00c      	b.n	8006124 <I2C_WaitOnFlagUntilTimeout+0x70>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	43da      	mvns	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	4013      	ands	r3, r2
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	bf0c      	ite	eq
 800611c:	2301      	moveq	r3, #1
 800611e:	2300      	movne	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	461a      	mov	r2, r3
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	429a      	cmp	r2, r3
 8006128:	d116      	bne.n	8006158 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2220      	movs	r2, #32
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006144:	f043 0220 	orr.w	r2, r3, #32
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e023      	b.n	80061a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	0c1b      	lsrs	r3, r3, #16
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d10d      	bne.n	800617e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	43da      	mvns	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	e00c      	b.n	8006198 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	43da      	mvns	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4013      	ands	r3, r2
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	429a      	cmp	r2, r3
 800619c:	d093      	beq.n	80060c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061b6:	e071      	b.n	800629c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c6:	d123      	bne.n	8006210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fc:	f043 0204 	orr.w	r2, r3, #4
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e067      	b.n	80062e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006216:	d041      	beq.n	800629c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006218:	f7fe f896 	bl	8004348 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	429a      	cmp	r2, r3
 8006226:	d302      	bcc.n	800622e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d136      	bne.n	800629c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	0c1b      	lsrs	r3, r3, #16
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	d10c      	bne.n	8006252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	43da      	mvns	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4013      	ands	r3, r2
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	bf14      	ite	ne
 800624a:	2301      	movne	r3, #1
 800624c:	2300      	moveq	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	e00b      	b.n	800626a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	43da      	mvns	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	4013      	ands	r3, r2
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	bf14      	ite	ne
 8006264:	2301      	movne	r3, #1
 8006266:	2300      	moveq	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d016      	beq.n	800629c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006288:	f043 0220 	orr.w	r2, r3, #32
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e021      	b.n	80062e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	0c1b      	lsrs	r3, r3, #16
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d10c      	bne.n	80062c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	43da      	mvns	r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4013      	ands	r3, r2
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bf14      	ite	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	2300      	moveq	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	e00b      	b.n	80062d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	43da      	mvns	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4013      	ands	r3, r2
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	bf14      	ite	ne
 80062d2:	2301      	movne	r3, #1
 80062d4:	2300      	moveq	r3, #0
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f47f af6d 	bne.w	80061b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062f4:	e034      	b.n	8006360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 f8e3 	bl	80064c2 <I2C_IsAcknowledgeFailed>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e034      	b.n	8006370 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d028      	beq.n	8006360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630e:	f7fe f81b 	bl	8004348 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	429a      	cmp	r2, r3
 800631c:	d302      	bcc.n	8006324 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d11d      	bne.n	8006360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800632e:	2b80      	cmp	r3, #128	@ 0x80
 8006330:	d016      	beq.n	8006360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634c:	f043 0220 	orr.w	r2, r3, #32
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e007      	b.n	8006370 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800636a:	2b80      	cmp	r3, #128	@ 0x80
 800636c:	d1c3      	bne.n	80062f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006384:	e034      	b.n	80063f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f89b 	bl	80064c2 <I2C_IsAcknowledgeFailed>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e034      	b.n	8006400 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	d028      	beq.n	80063f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639e:	f7fd ffd3 	bl	8004348 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d302      	bcc.n	80063b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d11d      	bne.n	80063f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d016      	beq.n	80063f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063dc:	f043 0220 	orr.w	r2, r3, #32
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e007      	b.n	8006400 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d1c3      	bne.n	8006386 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006414:	e049      	b.n	80064aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b10      	cmp	r3, #16
 8006422:	d119      	bne.n	8006458 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0210 	mvn.w	r2, #16
 800642c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e030      	b.n	80064ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006458:	f7fd ff76 	bl	8004348 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	429a      	cmp	r2, r3
 8006466:	d302      	bcc.n	800646e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d11d      	bne.n	80064aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006478:	2b40      	cmp	r3, #64	@ 0x40
 800647a:	d016      	beq.n	80064aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006496:	f043 0220 	orr.w	r2, r3, #32
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e007      	b.n	80064ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b4:	2b40      	cmp	r3, #64	@ 0x40
 80064b6:	d1ae      	bne.n	8006416 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d8:	d11b      	bne.n	8006512 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fe:	f043 0204 	orr.w	r2, r3, #4
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e000      	b.n	8006514 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0cc      	b.n	80066ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006534:	4b68      	ldr	r3, [pc, #416]	@ (80066d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d90c      	bls.n	800655c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006542:	4b65      	ldr	r3, [pc, #404]	@ (80066d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800654a:	4b63      	ldr	r3, [pc, #396]	@ (80066d8 <HAL_RCC_ClockConfig+0x1b8>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d001      	beq.n	800655c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e0b8      	b.n	80066ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d020      	beq.n	80065aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006574:	4b59      	ldr	r3, [pc, #356]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	4a58      	ldr	r2, [pc, #352]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 800657a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800657e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800658c:	4b53      	ldr	r3, [pc, #332]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	4a52      	ldr	r2, [pc, #328]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006598:	4b50      	ldr	r3, [pc, #320]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	494d      	ldr	r1, [pc, #308]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d044      	beq.n	8006640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d107      	bne.n	80065ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065be:	4b47      	ldr	r3, [pc, #284]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d119      	bne.n	80065fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e07f      	b.n	80066ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d003      	beq.n	80065de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d107      	bne.n	80065ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065de:	4b3f      	ldr	r3, [pc, #252]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e06f      	b.n	80066ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ee:	4b3b      	ldr	r3, [pc, #236]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e067      	b.n	80066ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065fe:	4b37      	ldr	r3, [pc, #220]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f023 0203 	bic.w	r2, r3, #3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	4934      	ldr	r1, [pc, #208]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 800660c:	4313      	orrs	r3, r2
 800660e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006610:	f7fd fe9a 	bl	8004348 <HAL_GetTick>
 8006614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006616:	e00a      	b.n	800662e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006618:	f7fd fe96 	bl	8004348 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006626:	4293      	cmp	r3, r2
 8006628:	d901      	bls.n	800662e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e04f      	b.n	80066ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800662e:	4b2b      	ldr	r3, [pc, #172]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 020c 	and.w	r2, r3, #12
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	429a      	cmp	r2, r3
 800663e:	d1eb      	bne.n	8006618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006640:	4b25      	ldr	r3, [pc, #148]	@ (80066d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d20c      	bcs.n	8006668 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800664e:	4b22      	ldr	r3, [pc, #136]	@ (80066d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006656:	4b20      	ldr	r3, [pc, #128]	@ (80066d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	429a      	cmp	r2, r3
 8006662:	d001      	beq.n	8006668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e032      	b.n	80066ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d008      	beq.n	8006686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006674:	4b19      	ldr	r3, [pc, #100]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	4916      	ldr	r1, [pc, #88]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 8006682:	4313      	orrs	r3, r2
 8006684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0308 	and.w	r3, r3, #8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006692:	4b12      	ldr	r3, [pc, #72]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	490e      	ldr	r1, [pc, #56]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80066a6:	f000 fbb1 	bl	8006e0c <HAL_RCC_GetSysClockFreq>
 80066aa:	4602      	mov	r2, r0
 80066ac:	4b0b      	ldr	r3, [pc, #44]	@ (80066dc <HAL_RCC_ClockConfig+0x1bc>)
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	091b      	lsrs	r3, r3, #4
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	490a      	ldr	r1, [pc, #40]	@ (80066e0 <HAL_RCC_ClockConfig+0x1c0>)
 80066b8:	5ccb      	ldrb	r3, [r1, r3]
 80066ba:	fa22 f303 	lsr.w	r3, r2, r3
 80066be:	4a09      	ldr	r2, [pc, #36]	@ (80066e4 <HAL_RCC_ClockConfig+0x1c4>)
 80066c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80066c2:	4b09      	ldr	r3, [pc, #36]	@ (80066e8 <HAL_RCC_ClockConfig+0x1c8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fd fc44 	bl	8003f54 <HAL_InitTick>

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40023c00 	.word	0x40023c00
 80066dc:	40023800 	.word	0x40023800
 80066e0:	08016340 	.word	0x08016340
 80066e4:	20000000 	.word	0x20000000
 80066e8:	20000004 	.word	0x20000004

080066ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066f0:	4b03      	ldr	r3, [pc, #12]	@ (8006700 <HAL_RCC_GetHCLKFreq+0x14>)
 80066f2:	681b      	ldr	r3, [r3, #0]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20000000 	.word	0x20000000

08006704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006708:	f7ff fff0 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 800670c:	4602      	mov	r2, r0
 800670e:	4b05      	ldr	r3, [pc, #20]	@ (8006724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	0a9b      	lsrs	r3, r3, #10
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	4903      	ldr	r1, [pc, #12]	@ (8006728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800671a:	5ccb      	ldrb	r3, [r1, r3]
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006720:	4618      	mov	r0, r3
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40023800 	.word	0x40023800
 8006728:	08016350 	.word	0x08016350

0800672c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006730:	f7ff ffdc 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 8006734:	4602      	mov	r2, r0
 8006736:	4b05      	ldr	r3, [pc, #20]	@ (800674c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	0b5b      	lsrs	r3, r3, #13
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	4903      	ldr	r1, [pc, #12]	@ (8006750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006742:	5ccb      	ldrb	r3, [r1, r3]
 8006744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006748:	4618      	mov	r0, r3
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40023800 	.word	0x40023800
 8006750:	08016350 	.word	0x08016350

08006754 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	220f      	movs	r2, #15
 8006762:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006764:	4b12      	ldr	r3, [pc, #72]	@ (80067b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 0203 	and.w	r2, r3, #3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006770:	4b0f      	ldr	r3, [pc, #60]	@ (80067b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800677c:	4b0c      	ldr	r3, [pc, #48]	@ (80067b0 <HAL_RCC_GetClockConfig+0x5c>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006788:	4b09      	ldr	r3, [pc, #36]	@ (80067b0 <HAL_RCC_GetClockConfig+0x5c>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	08db      	lsrs	r3, r3, #3
 800678e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006796:	4b07      	ldr	r3, [pc, #28]	@ (80067b4 <HAL_RCC_GetClockConfig+0x60>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 020f 	and.w	r2, r3, #15
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	601a      	str	r2, [r3, #0]
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40023800 	.word	0x40023800
 80067b4:	40023c00 	.word	0x40023c00

080067b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08c      	sub	sp, #48	@ 0x30
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d010      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80067f0:	4b6f      	ldr	r3, [pc, #444]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067f6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fe:	496c      	ldr	r1, [pc, #432]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006800:	4313      	orrs	r3, r2
 8006802:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800680e:	2301      	movs	r3, #1
 8006810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d010      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800681e:	4b64      	ldr	r3, [pc, #400]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006824:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800682c:	4960      	ldr	r1, [pc, #384]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800683c:	2301      	movs	r3, #1
 800683e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d017      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800684c:	4b58      	ldr	r3, [pc, #352]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800684e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006852:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685a:	4955      	ldr	r1, [pc, #340]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800686a:	d101      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800686c:	2301      	movs	r3, #1
 800686e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006878:	2301      	movs	r3, #1
 800687a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b00      	cmp	r3, #0
 8006886:	d017      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006888:	4b49      	ldr	r3, [pc, #292]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800688a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800688e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006896:	4946      	ldr	r1, [pc, #280]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006898:	4313      	orrs	r3, r2
 800689a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068a6:	d101      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80068a8:	2301      	movs	r3, #1
 80068aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80068b4:	2301      	movs	r3, #1
 80068b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 808a 	beq.w	80069da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068c6:	2300      	movs	r3, #0
 80068c8:	60bb      	str	r3, [r7, #8]
 80068ca:	4b39      	ldr	r3, [pc, #228]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ce:	4a38      	ldr	r2, [pc, #224]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80068d6:	4b36      	ldr	r3, [pc, #216]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068e2:	4b34      	ldr	r3, [pc, #208]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a33      	ldr	r2, [pc, #204]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80068e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068ee:	f7fd fd2b 	bl	8004348 <HAL_GetTick>
 80068f2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80068f4:	e008      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f6:	f7fd fd27 	bl	8004348 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d901      	bls.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e278      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006908:	4b2a      	ldr	r3, [pc, #168]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0f0      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006914:	4b26      	ldr	r3, [pc, #152]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006918:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800691c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d02f      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006928:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800692c:	6a3a      	ldr	r2, [r7, #32]
 800692e:	429a      	cmp	r2, r3
 8006930:	d028      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006932:	4b1f      	ldr	r3, [pc, #124]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800693a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800693c:	4b1e      	ldr	r3, [pc, #120]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800693e:	2201      	movs	r2, #1
 8006940:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006942:	4b1d      	ldr	r3, [pc, #116]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006948:	4a19      	ldr	r2, [pc, #100]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800694e:	4b18      	ldr	r3, [pc, #96]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b01      	cmp	r3, #1
 8006958:	d114      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800695a:	f7fd fcf5 	bl	8004348 <HAL_GetTick>
 800695e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006960:	e00a      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006962:	f7fd fcf1 	bl	8004348 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006970:	4293      	cmp	r3, r2
 8006972:	d901      	bls.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e240      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006978:	4b0d      	ldr	r3, [pc, #52]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800697a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0ee      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006988:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800698c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006990:	d114      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006992:	4b07      	ldr	r3, [pc, #28]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80069a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069a6:	4902      	ldr	r1, [pc, #8]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	608b      	str	r3, [r1, #8]
 80069ac:	e00c      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80069ae:	bf00      	nop
 80069b0:	40023800 	.word	0x40023800
 80069b4:	40007000 	.word	0x40007000
 80069b8:	42470e40 	.word	0x42470e40
 80069bc:	4b4a      	ldr	r3, [pc, #296]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	4a49      	ldr	r2, [pc, #292]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80069c6:	6093      	str	r3, [r2, #8]
 80069c8:	4b47      	ldr	r3, [pc, #284]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d4:	4944      	ldr	r1, [pc, #272]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80069ec:	4b3f      	ldr	r3, [pc, #252]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80069ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80069fc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a0a:	4937      	ldr	r1, [pc, #220]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a1e:	4b32      	ldr	r3, [pc, #200]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a24:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a2c:	492e      	ldr	r1, [pc, #184]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d011      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006a40:	4b29      	ldr	r3, [pc, #164]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a46:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a4e:	4926      	ldr	r1, [pc, #152]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a5e:	d101      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006a60:	2301      	movs	r3, #1
 8006a62:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006a70:	4b1d      	ldr	r3, [pc, #116]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a7e:	491a      	ldr	r1, [pc, #104]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d011      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006a92:	4b15      	ldr	r3, [pc, #84]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a98:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa0:	4911      	ldr	r1, [pc, #68]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ab0:	d101      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d005      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ac4:	f040 80ff 	bne.w	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ac8:	4b09      	ldr	r3, [pc, #36]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ace:	f7fd fc3b 	bl	8004348 <HAL_GetTick>
 8006ad2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ad4:	e00e      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ad6:	f7fd fc37 	bl	8004348 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d907      	bls.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e188      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	424711e0 	.word	0x424711e0
 8006af0:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006af4:	4b7e      	ldr	r3, [pc, #504]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1ea      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d009      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d028      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d124      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006b28:	4b71      	ldr	r3, [pc, #452]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b2e:	0c1b      	lsrs	r3, r3, #16
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	3301      	adds	r3, #1
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b40:	0e1b      	lsrs	r3, r3, #24
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	019b      	lsls	r3, r3, #6
 8006b52:	431a      	orrs	r2, r3
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	085b      	lsrs	r3, r3, #1
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	041b      	lsls	r3, r3, #16
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	061b      	lsls	r3, r3, #24
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	071b      	lsls	r3, r3, #28
 8006b6a:	4961      	ldr	r1, [pc, #388]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d004      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b86:	d00a      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d035      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b9c:	d130      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006b9e:	4b54      	ldr	r3, [pc, #336]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ba4:	0c1b      	lsrs	r3, r3, #16
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	3301      	adds	r3, #1
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bb6:	0f1b      	lsrs	r3, r3, #28
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	019b      	lsls	r3, r3, #6
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	085b      	lsrs	r3, r3, #1
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	041b      	lsls	r3, r3, #16
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	061b      	lsls	r3, r3, #24
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	071b      	lsls	r3, r3, #28
 8006be0:	4943      	ldr	r1, [pc, #268]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006be8:	4b41      	ldr	r3, [pc, #260]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bee:	f023 021f 	bic.w	r2, r3, #31
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	493d      	ldr	r1, [pc, #244]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d029      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c14:	d124      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006c16:	4b36      	ldr	r3, [pc, #216]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c1c:	0c1b      	lsrs	r3, r3, #16
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	3301      	adds	r3, #1
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c28:	4b31      	ldr	r3, [pc, #196]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c2e:	0f1b      	lsrs	r3, r3, #28
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	019b      	lsls	r3, r3, #6
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	041b      	lsls	r3, r3, #16
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	061b      	lsls	r3, r3, #24
 8006c52:	431a      	orrs	r2, r3
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	071b      	lsls	r3, r3, #28
 8006c58:	4925      	ldr	r1, [pc, #148]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d016      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	019b      	lsls	r3, r3, #6
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	085b      	lsrs	r3, r3, #1
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	041b      	lsls	r3, r3, #16
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	061b      	lsls	r3, r3, #24
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	071b      	lsls	r3, r3, #28
 8006c92:	4917      	ldr	r1, [pc, #92]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c9a:	4b16      	ldr	r3, [pc, #88]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ca0:	f7fd fb52 	bl	8004348 <HAL_GetTick>
 8006ca4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ca6:	e008      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ca8:	f7fd fb4e 	bl	8004348 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e09f      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cba:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0f0      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	f040 8095 	bne.w	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006cce:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cd4:	f7fd fb38 	bl	8004348 <HAL_GetTick>
 8006cd8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cda:	e00f      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006cdc:	f7fd fb34 	bl	8004348 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d908      	bls.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e085      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006cee:	bf00      	nop
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	42470068 	.word	0x42470068
 8006cf8:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cfc:	4b41      	ldr	r3, [pc, #260]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d08:	d0e8      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d02b      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d127      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006d32:	4b34      	ldr	r3, [pc, #208]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d38:	0c1b      	lsrs	r3, r3, #16
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	3301      	adds	r3, #1
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	019b      	lsls	r3, r3, #6
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	3b01      	subs	r3, #1
 8006d56:	041b      	lsls	r3, r3, #16
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5e:	061b      	lsls	r3, r3, #24
 8006d60:	4928      	ldr	r1, [pc, #160]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d68:	4b26      	ldr	r3, [pc, #152]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d6e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d76:	3b01      	subs	r3, #1
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	4922      	ldr	r1, [pc, #136]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d01d      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d96:	d118      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d98:	4b1a      	ldr	r3, [pc, #104]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9e:	0e1b      	lsrs	r3, r3, #24
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	699a      	ldr	r2, [r3, #24]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	019b      	lsls	r3, r3, #6
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	085b      	lsrs	r3, r3, #1
 8006db8:	3b01      	subs	r3, #1
 8006dba:	041b      	lsls	r3, r3, #16
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	061b      	lsls	r3, r3, #24
 8006dc2:	4910      	ldr	r1, [pc, #64]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006dca:	4b0f      	ldr	r3, [pc, #60]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dd0:	f7fd faba 	bl	8004348 <HAL_GetTick>
 8006dd4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dd6:	e008      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006dd8:	f7fd fab6 	bl	8004348 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d901      	bls.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e007      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dea:	4b06      	ldr	r3, [pc, #24]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df6:	d1ef      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3730      	adds	r7, #48	@ 0x30
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	40023800 	.word	0x40023800
 8006e08:	42470070 	.word	0x42470070

08006e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e10:	b0ae      	sub	sp, #184	@ 0xb8
 8006e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e32:	4bcb      	ldr	r3, [pc, #812]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 030c 	and.w	r3, r3, #12
 8006e3a:	2b0c      	cmp	r3, #12
 8006e3c:	f200 8206 	bhi.w	800724c <HAL_RCC_GetSysClockFreq+0x440>
 8006e40:	a201      	add	r2, pc, #4	@ (adr r2, 8006e48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e7d 	.word	0x08006e7d
 8006e4c:	0800724d 	.word	0x0800724d
 8006e50:	0800724d 	.word	0x0800724d
 8006e54:	0800724d 	.word	0x0800724d
 8006e58:	08006e85 	.word	0x08006e85
 8006e5c:	0800724d 	.word	0x0800724d
 8006e60:	0800724d 	.word	0x0800724d
 8006e64:	0800724d 	.word	0x0800724d
 8006e68:	08006e8d 	.word	0x08006e8d
 8006e6c:	0800724d 	.word	0x0800724d
 8006e70:	0800724d 	.word	0x0800724d
 8006e74:	0800724d 	.word	0x0800724d
 8006e78:	0800707d 	.word	0x0800707d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e7c:	4bb9      	ldr	r3, [pc, #740]	@ (8007164 <HAL_RCC_GetSysClockFreq+0x358>)
 8006e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006e82:	e1e7      	b.n	8007254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e84:	4bb8      	ldr	r3, [pc, #736]	@ (8007168 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006e86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006e8a:	e1e3      	b.n	8007254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e8c:	4bb4      	ldr	r3, [pc, #720]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e98:	4bb1      	ldr	r3, [pc, #708]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d071      	beq.n	8006f88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ea4:	4bae      	ldr	r3, [pc, #696]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x354>)
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	099b      	lsrs	r3, r3, #6
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006eb0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ec6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006eca:	4622      	mov	r2, r4
 8006ecc:	462b      	mov	r3, r5
 8006ece:	f04f 0000 	mov.w	r0, #0
 8006ed2:	f04f 0100 	mov.w	r1, #0
 8006ed6:	0159      	lsls	r1, r3, #5
 8006ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006edc:	0150      	lsls	r0, r2, #5
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	1a51      	subs	r1, r2, r1
 8006ee6:	6439      	str	r1, [r7, #64]	@ 0x40
 8006ee8:	4629      	mov	r1, r5
 8006eea:	eb63 0301 	sbc.w	r3, r3, r1
 8006eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006efc:	4649      	mov	r1, r9
 8006efe:	018b      	lsls	r3, r1, #6
 8006f00:	4641      	mov	r1, r8
 8006f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f06:	4641      	mov	r1, r8
 8006f08:	018a      	lsls	r2, r1, #6
 8006f0a:	4641      	mov	r1, r8
 8006f0c:	1a51      	subs	r1, r2, r1
 8006f0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f10:	4649      	mov	r1, r9
 8006f12:	eb63 0301 	sbc.w	r3, r3, r1
 8006f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006f24:	4649      	mov	r1, r9
 8006f26:	00cb      	lsls	r3, r1, #3
 8006f28:	4641      	mov	r1, r8
 8006f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f2e:	4641      	mov	r1, r8
 8006f30:	00ca      	lsls	r2, r1, #3
 8006f32:	4610      	mov	r0, r2
 8006f34:	4619      	mov	r1, r3
 8006f36:	4603      	mov	r3, r0
 8006f38:	4622      	mov	r2, r4
 8006f3a:	189b      	adds	r3, r3, r2
 8006f3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f3e:	462b      	mov	r3, r5
 8006f40:	460a      	mov	r2, r1
 8006f42:	eb42 0303 	adc.w	r3, r2, r3
 8006f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f54:	4629      	mov	r1, r5
 8006f56:	024b      	lsls	r3, r1, #9
 8006f58:	4621      	mov	r1, r4
 8006f5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f5e:	4621      	mov	r1, r4
 8006f60:	024a      	lsls	r2, r1, #9
 8006f62:	4610      	mov	r0, r2
 8006f64:	4619      	mov	r1, r3
 8006f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006f78:	f7f9 fea6 	bl	8000cc8 <__aeabi_uldivmod>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4613      	mov	r3, r2
 8006f82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f86:	e067      	b.n	8007058 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f88:	4b75      	ldr	r3, [pc, #468]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	099b      	lsrs	r3, r3, #6
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f94:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006fa6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006faa:	4622      	mov	r2, r4
 8006fac:	462b      	mov	r3, r5
 8006fae:	f04f 0000 	mov.w	r0, #0
 8006fb2:	f04f 0100 	mov.w	r1, #0
 8006fb6:	0159      	lsls	r1, r3, #5
 8006fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fbc:	0150      	lsls	r0, r2, #5
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	1a51      	subs	r1, r2, r1
 8006fc6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006fc8:	4629      	mov	r1, r5
 8006fca:	eb63 0301 	sbc.w	r3, r3, r1
 8006fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006fdc:	4649      	mov	r1, r9
 8006fde:	018b      	lsls	r3, r1, #6
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fe6:	4641      	mov	r1, r8
 8006fe8:	018a      	lsls	r2, r1, #6
 8006fea:	4641      	mov	r1, r8
 8006fec:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ff6:	f04f 0200 	mov.w	r2, #0
 8006ffa:	f04f 0300 	mov.w	r3, #0
 8006ffe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007002:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007006:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800700a:	4692      	mov	sl, r2
 800700c:	469b      	mov	fp, r3
 800700e:	4623      	mov	r3, r4
 8007010:	eb1a 0303 	adds.w	r3, sl, r3
 8007014:	623b      	str	r3, [r7, #32]
 8007016:	462b      	mov	r3, r5
 8007018:	eb4b 0303 	adc.w	r3, fp, r3
 800701c:	627b      	str	r3, [r7, #36]	@ 0x24
 800701e:	f04f 0200 	mov.w	r2, #0
 8007022:	f04f 0300 	mov.w	r3, #0
 8007026:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800702a:	4629      	mov	r1, r5
 800702c:	028b      	lsls	r3, r1, #10
 800702e:	4621      	mov	r1, r4
 8007030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007034:	4621      	mov	r1, r4
 8007036:	028a      	lsls	r2, r1, #10
 8007038:	4610      	mov	r0, r2
 800703a:	4619      	mov	r1, r3
 800703c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007040:	2200      	movs	r2, #0
 8007042:	673b      	str	r3, [r7, #112]	@ 0x70
 8007044:	677a      	str	r2, [r7, #116]	@ 0x74
 8007046:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800704a:	f7f9 fe3d 	bl	8000cc8 <__aeabi_uldivmod>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4613      	mov	r3, r2
 8007054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007058:	4b41      	ldr	r3, [pc, #260]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x354>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	0c1b      	lsrs	r3, r3, #16
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	3301      	adds	r3, #1
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800706a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800706e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007072:	fbb2 f3f3 	udiv	r3, r2, r3
 8007076:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800707a:	e0eb      	b.n	8007254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800707c:	4b38      	ldr	r3, [pc, #224]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x354>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007084:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007088:	4b35      	ldr	r3, [pc, #212]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x354>)
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d06b      	beq.n	800716c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007094:	4b32      	ldr	r3, [pc, #200]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x354>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	099b      	lsrs	r3, r3, #6
 800709a:	2200      	movs	r2, #0
 800709c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800709e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80070a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80070a8:	2300      	movs	r3, #0
 80070aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80070ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80070b0:	4622      	mov	r2, r4
 80070b2:	462b      	mov	r3, r5
 80070b4:	f04f 0000 	mov.w	r0, #0
 80070b8:	f04f 0100 	mov.w	r1, #0
 80070bc:	0159      	lsls	r1, r3, #5
 80070be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070c2:	0150      	lsls	r0, r2, #5
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4621      	mov	r1, r4
 80070ca:	1a51      	subs	r1, r2, r1
 80070cc:	61b9      	str	r1, [r7, #24]
 80070ce:	4629      	mov	r1, r5
 80070d0:	eb63 0301 	sbc.w	r3, r3, r1
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	f04f 0300 	mov.w	r3, #0
 80070de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80070e2:	4659      	mov	r1, fp
 80070e4:	018b      	lsls	r3, r1, #6
 80070e6:	4651      	mov	r1, sl
 80070e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070ec:	4651      	mov	r1, sl
 80070ee:	018a      	lsls	r2, r1, #6
 80070f0:	4651      	mov	r1, sl
 80070f2:	ebb2 0801 	subs.w	r8, r2, r1
 80070f6:	4659      	mov	r1, fp
 80070f8:	eb63 0901 	sbc.w	r9, r3, r1
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	f04f 0300 	mov.w	r3, #0
 8007104:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007108:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800710c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007110:	4690      	mov	r8, r2
 8007112:	4699      	mov	r9, r3
 8007114:	4623      	mov	r3, r4
 8007116:	eb18 0303 	adds.w	r3, r8, r3
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	462b      	mov	r3, r5
 800711e:	eb49 0303 	adc.w	r3, r9, r3
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	f04f 0300 	mov.w	r3, #0
 800712c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007130:	4629      	mov	r1, r5
 8007132:	024b      	lsls	r3, r1, #9
 8007134:	4621      	mov	r1, r4
 8007136:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800713a:	4621      	mov	r1, r4
 800713c:	024a      	lsls	r2, r1, #9
 800713e:	4610      	mov	r0, r2
 8007140:	4619      	mov	r1, r3
 8007142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007146:	2200      	movs	r2, #0
 8007148:	65bb      	str	r3, [r7, #88]	@ 0x58
 800714a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800714c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007150:	f7f9 fdba 	bl	8000cc8 <__aeabi_uldivmod>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4613      	mov	r3, r2
 800715a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800715e:	e065      	b.n	800722c <HAL_RCC_GetSysClockFreq+0x420>
 8007160:	40023800 	.word	0x40023800
 8007164:	00f42400 	.word	0x00f42400
 8007168:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800716c:	4b3d      	ldr	r3, [pc, #244]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x458>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	099b      	lsrs	r3, r3, #6
 8007172:	2200      	movs	r2, #0
 8007174:	4618      	mov	r0, r3
 8007176:	4611      	mov	r1, r2
 8007178:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800717c:	653b      	str	r3, [r7, #80]	@ 0x50
 800717e:	2300      	movs	r3, #0
 8007180:	657b      	str	r3, [r7, #84]	@ 0x54
 8007182:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007186:	4642      	mov	r2, r8
 8007188:	464b      	mov	r3, r9
 800718a:	f04f 0000 	mov.w	r0, #0
 800718e:	f04f 0100 	mov.w	r1, #0
 8007192:	0159      	lsls	r1, r3, #5
 8007194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007198:	0150      	lsls	r0, r2, #5
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4641      	mov	r1, r8
 80071a0:	1a51      	subs	r1, r2, r1
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	4649      	mov	r1, r9
 80071a6:	eb63 0301 	sbc.w	r3, r3, r1
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	f04f 0300 	mov.w	r3, #0
 80071b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80071b8:	4659      	mov	r1, fp
 80071ba:	018b      	lsls	r3, r1, #6
 80071bc:	4651      	mov	r1, sl
 80071be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071c2:	4651      	mov	r1, sl
 80071c4:	018a      	lsls	r2, r1, #6
 80071c6:	4651      	mov	r1, sl
 80071c8:	1a54      	subs	r4, r2, r1
 80071ca:	4659      	mov	r1, fp
 80071cc:	eb63 0501 	sbc.w	r5, r3, r1
 80071d0:	f04f 0200 	mov.w	r2, #0
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	00eb      	lsls	r3, r5, #3
 80071da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071de:	00e2      	lsls	r2, r4, #3
 80071e0:	4614      	mov	r4, r2
 80071e2:	461d      	mov	r5, r3
 80071e4:	4643      	mov	r3, r8
 80071e6:	18e3      	adds	r3, r4, r3
 80071e8:	603b      	str	r3, [r7, #0]
 80071ea:	464b      	mov	r3, r9
 80071ec:	eb45 0303 	adc.w	r3, r5, r3
 80071f0:	607b      	str	r3, [r7, #4]
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071fe:	4629      	mov	r1, r5
 8007200:	028b      	lsls	r3, r1, #10
 8007202:	4621      	mov	r1, r4
 8007204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007208:	4621      	mov	r1, r4
 800720a:	028a      	lsls	r2, r1, #10
 800720c:	4610      	mov	r0, r2
 800720e:	4619      	mov	r1, r3
 8007210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007214:	2200      	movs	r2, #0
 8007216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007218:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800721a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800721e:	f7f9 fd53 	bl	8000cc8 <__aeabi_uldivmod>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4613      	mov	r3, r2
 8007228:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800722c:	4b0d      	ldr	r3, [pc, #52]	@ (8007264 <HAL_RCC_GetSysClockFreq+0x458>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	0f1b      	lsrs	r3, r3, #28
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800723a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800723e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007242:	fbb2 f3f3 	udiv	r3, r2, r3
 8007246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800724a:	e003      	b.n	8007254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800724c:	4b06      	ldr	r3, [pc, #24]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x45c>)
 800724e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007252:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007258:	4618      	mov	r0, r3
 800725a:	37b8      	adds	r7, #184	@ 0xb8
 800725c:	46bd      	mov	sp, r7
 800725e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007262:	bf00      	nop
 8007264:	40023800 	.word	0x40023800
 8007268:	00f42400 	.word	0x00f42400

0800726c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e28d      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 8083 	beq.w	8007392 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800728c:	4b94      	ldr	r3, [pc, #592]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 030c 	and.w	r3, r3, #12
 8007294:	2b04      	cmp	r3, #4
 8007296:	d019      	beq.n	80072cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007298:	4b91      	ldr	r3, [pc, #580]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f003 030c 	and.w	r3, r3, #12
        || \
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d106      	bne.n	80072b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80072a4:	4b8e      	ldr	r3, [pc, #568]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072b0:	d00c      	beq.n	80072cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072b2:	4b8b      	ldr	r3, [pc, #556]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80072ba:	2b0c      	cmp	r3, #12
 80072bc:	d112      	bne.n	80072e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072be:	4b88      	ldr	r3, [pc, #544]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072ca:	d10b      	bne.n	80072e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072cc:	4b84      	ldr	r3, [pc, #528]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d05b      	beq.n	8007390 <HAL_RCC_OscConfig+0x124>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d157      	bne.n	8007390 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e25a      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072ec:	d106      	bne.n	80072fc <HAL_RCC_OscConfig+0x90>
 80072ee:	4b7c      	ldr	r3, [pc, #496]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a7b      	ldr	r2, [pc, #492]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80072f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072f8:	6013      	str	r3, [r2, #0]
 80072fa:	e01d      	b.n	8007338 <HAL_RCC_OscConfig+0xcc>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007304:	d10c      	bne.n	8007320 <HAL_RCC_OscConfig+0xb4>
 8007306:	4b76      	ldr	r3, [pc, #472]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a75      	ldr	r2, [pc, #468]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 800730c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	4b73      	ldr	r3, [pc, #460]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a72      	ldr	r2, [pc, #456]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 8007318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	e00b      	b.n	8007338 <HAL_RCC_OscConfig+0xcc>
 8007320:	4b6f      	ldr	r3, [pc, #444]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a6e      	ldr	r2, [pc, #440]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 8007326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	4b6c      	ldr	r3, [pc, #432]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a6b      	ldr	r2, [pc, #428]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 8007332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d013      	beq.n	8007368 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007340:	f7fd f802 	bl	8004348 <HAL_GetTick>
 8007344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007346:	e008      	b.n	800735a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007348:	f7fc fffe 	bl	8004348 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	2b64      	cmp	r3, #100	@ 0x64
 8007354:	d901      	bls.n	800735a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e21f      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800735a:	4b61      	ldr	r3, [pc, #388]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0f0      	beq.n	8007348 <HAL_RCC_OscConfig+0xdc>
 8007366:	e014      	b.n	8007392 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007368:	f7fc ffee 	bl	8004348 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007370:	f7fc ffea 	bl	8004348 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b64      	cmp	r3, #100	@ 0x64
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e20b      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007382:	4b57      	ldr	r3, [pc, #348]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f0      	bne.n	8007370 <HAL_RCC_OscConfig+0x104>
 800738e:	e000      	b.n	8007392 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d06f      	beq.n	800747e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800739e:	4b50      	ldr	r3, [pc, #320]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 030c 	and.w	r3, r3, #12
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d017      	beq.n	80073da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80073aa:	4b4d      	ldr	r3, [pc, #308]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80073b2:	2b08      	cmp	r3, #8
 80073b4:	d105      	bne.n	80073c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80073b6:	4b4a      	ldr	r3, [pc, #296]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073c2:	4b47      	ldr	r3, [pc, #284]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80073ca:	2b0c      	cmp	r3, #12
 80073cc:	d11c      	bne.n	8007408 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073ce:	4b44      	ldr	r3, [pc, #272]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d116      	bne.n	8007408 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073da:	4b41      	ldr	r3, [pc, #260]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <HAL_RCC_OscConfig+0x186>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d001      	beq.n	80073f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e1d3      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f2:	4b3b      	ldr	r3, [pc, #236]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	4937      	ldr	r1, [pc, #220]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 8007402:	4313      	orrs	r3, r2
 8007404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007406:	e03a      	b.n	800747e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d020      	beq.n	8007452 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007410:	4b34      	ldr	r3, [pc, #208]	@ (80074e4 <HAL_RCC_OscConfig+0x278>)
 8007412:	2201      	movs	r2, #1
 8007414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007416:	f7fc ff97 	bl	8004348 <HAL_GetTick>
 800741a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800741c:	e008      	b.n	8007430 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800741e:	f7fc ff93 	bl	8004348 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d901      	bls.n	8007430 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e1b4      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007430:	4b2b      	ldr	r3, [pc, #172]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0f0      	beq.n	800741e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800743c:	4b28      	ldr	r3, [pc, #160]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	4925      	ldr	r1, [pc, #148]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 800744c:	4313      	orrs	r3, r2
 800744e:	600b      	str	r3, [r1, #0]
 8007450:	e015      	b.n	800747e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007452:	4b24      	ldr	r3, [pc, #144]	@ (80074e4 <HAL_RCC_OscConfig+0x278>)
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007458:	f7fc ff76 	bl	8004348 <HAL_GetTick>
 800745c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800745e:	e008      	b.n	8007472 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007460:	f7fc ff72 	bl	8004348 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b02      	cmp	r3, #2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e193      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007472:	4b1b      	ldr	r3, [pc, #108]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1f0      	bne.n	8007460 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	2b00      	cmp	r3, #0
 8007488:	d036      	beq.n	80074f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d016      	beq.n	80074c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007492:	4b15      	ldr	r3, [pc, #84]	@ (80074e8 <HAL_RCC_OscConfig+0x27c>)
 8007494:	2201      	movs	r2, #1
 8007496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007498:	f7fc ff56 	bl	8004348 <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074a0:	f7fc ff52 	bl	8004348 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e173      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074b2:	4b0b      	ldr	r3, [pc, #44]	@ (80074e0 <HAL_RCC_OscConfig+0x274>)
 80074b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCC_OscConfig+0x234>
 80074be:	e01b      	b.n	80074f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074c0:	4b09      	ldr	r3, [pc, #36]	@ (80074e8 <HAL_RCC_OscConfig+0x27c>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c6:	f7fc ff3f 	bl	8004348 <HAL_GetTick>
 80074ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074cc:	e00e      	b.n	80074ec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ce:	f7fc ff3b 	bl	8004348 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d907      	bls.n	80074ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e15c      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
 80074e0:	40023800 	.word	0x40023800
 80074e4:	42470000 	.word	0x42470000
 80074e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074ec:	4b8a      	ldr	r3, [pc, #552]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 80074ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1ea      	bne.n	80074ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8097 	beq.w	8007634 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007506:	2300      	movs	r3, #0
 8007508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800750a:	4b83      	ldr	r3, [pc, #524]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 800750c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10f      	bne.n	8007536 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007516:	2300      	movs	r3, #0
 8007518:	60bb      	str	r3, [r7, #8]
 800751a:	4b7f      	ldr	r3, [pc, #508]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751e:	4a7e      	ldr	r2, [pc, #504]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 8007520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007524:	6413      	str	r3, [r2, #64]	@ 0x40
 8007526:	4b7c      	ldr	r3, [pc, #496]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800752e:	60bb      	str	r3, [r7, #8]
 8007530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007532:	2301      	movs	r3, #1
 8007534:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007536:	4b79      	ldr	r3, [pc, #484]	@ (800771c <HAL_RCC_OscConfig+0x4b0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800753e:	2b00      	cmp	r3, #0
 8007540:	d118      	bne.n	8007574 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007542:	4b76      	ldr	r3, [pc, #472]	@ (800771c <HAL_RCC_OscConfig+0x4b0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a75      	ldr	r2, [pc, #468]	@ (800771c <HAL_RCC_OscConfig+0x4b0>)
 8007548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800754c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800754e:	f7fc fefb 	bl	8004348 <HAL_GetTick>
 8007552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007554:	e008      	b.n	8007568 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007556:	f7fc fef7 	bl	8004348 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d901      	bls.n	8007568 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e118      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007568:	4b6c      	ldr	r3, [pc, #432]	@ (800771c <HAL_RCC_OscConfig+0x4b0>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0f0      	beq.n	8007556 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d106      	bne.n	800758a <HAL_RCC_OscConfig+0x31e>
 800757c:	4b66      	ldr	r3, [pc, #408]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 800757e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007580:	4a65      	ldr	r2, [pc, #404]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 8007582:	f043 0301 	orr.w	r3, r3, #1
 8007586:	6713      	str	r3, [r2, #112]	@ 0x70
 8007588:	e01c      	b.n	80075c4 <HAL_RCC_OscConfig+0x358>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	2b05      	cmp	r3, #5
 8007590:	d10c      	bne.n	80075ac <HAL_RCC_OscConfig+0x340>
 8007592:	4b61      	ldr	r3, [pc, #388]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007596:	4a60      	ldr	r2, [pc, #384]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 8007598:	f043 0304 	orr.w	r3, r3, #4
 800759c:	6713      	str	r3, [r2, #112]	@ 0x70
 800759e:	4b5e      	ldr	r3, [pc, #376]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a2:	4a5d      	ldr	r2, [pc, #372]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 80075a4:	f043 0301 	orr.w	r3, r3, #1
 80075a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80075aa:	e00b      	b.n	80075c4 <HAL_RCC_OscConfig+0x358>
 80075ac:	4b5a      	ldr	r3, [pc, #360]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075b0:	4a59      	ldr	r2, [pc, #356]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 80075b2:	f023 0301 	bic.w	r3, r3, #1
 80075b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80075b8:	4b57      	ldr	r3, [pc, #348]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 80075ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075bc:	4a56      	ldr	r2, [pc, #344]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 80075be:	f023 0304 	bic.w	r3, r3, #4
 80075c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d015      	beq.n	80075f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075cc:	f7fc febc 	bl	8004348 <HAL_GetTick>
 80075d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075d2:	e00a      	b.n	80075ea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075d4:	f7fc feb8 	bl	8004348 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e0d7      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 80075ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0ee      	beq.n	80075d4 <HAL_RCC_OscConfig+0x368>
 80075f6:	e014      	b.n	8007622 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f8:	f7fc fea6 	bl	8004348 <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075fe:	e00a      	b.n	8007616 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007600:	f7fc fea2 	bl	8004348 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800760e:	4293      	cmp	r3, r2
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e0c1      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007616:	4b40      	ldr	r3, [pc, #256]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 8007618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1ee      	bne.n	8007600 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d105      	bne.n	8007634 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007628:	4b3b      	ldr	r3, [pc, #236]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 800762a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762c:	4a3a      	ldr	r2, [pc, #232]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 800762e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007632:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 80ad 	beq.w	8007798 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800763e:	4b36      	ldr	r3, [pc, #216]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 030c 	and.w	r3, r3, #12
 8007646:	2b08      	cmp	r3, #8
 8007648:	d060      	beq.n	800770c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d145      	bne.n	80076de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007652:	4b33      	ldr	r3, [pc, #204]	@ (8007720 <HAL_RCC_OscConfig+0x4b4>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007658:	f7fc fe76 	bl	8004348 <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800765e:	e008      	b.n	8007672 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007660:	f7fc fe72 	bl	8004348 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d901      	bls.n	8007672 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e093      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007672:	4b29      	ldr	r3, [pc, #164]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f0      	bne.n	8007660 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69da      	ldr	r2, [r3, #28]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768c:	019b      	lsls	r3, r3, #6
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007694:	085b      	lsrs	r3, r3, #1
 8007696:	3b01      	subs	r3, #1
 8007698:	041b      	lsls	r3, r3, #16
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	061b      	lsls	r3, r3, #24
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076a8:	071b      	lsls	r3, r3, #28
 80076aa:	491b      	ldr	r1, [pc, #108]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007720 <HAL_RCC_OscConfig+0x4b4>)
 80076b2:	2201      	movs	r2, #1
 80076b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b6:	f7fc fe47 	bl	8004348 <HAL_GetTick>
 80076ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076bc:	e008      	b.n	80076d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076be:	f7fc fe43 	bl	8004348 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e064      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076d0:	4b11      	ldr	r3, [pc, #68]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d0f0      	beq.n	80076be <HAL_RCC_OscConfig+0x452>
 80076dc:	e05c      	b.n	8007798 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076de:	4b10      	ldr	r3, [pc, #64]	@ (8007720 <HAL_RCC_OscConfig+0x4b4>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e4:	f7fc fe30 	bl	8004348 <HAL_GetTick>
 80076e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076ec:	f7fc fe2c 	bl	8004348 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e04d      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076fe:	4b06      	ldr	r3, [pc, #24]	@ (8007718 <HAL_RCC_OscConfig+0x4ac>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f0      	bne.n	80076ec <HAL_RCC_OscConfig+0x480>
 800770a:	e045      	b.n	8007798 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d107      	bne.n	8007724 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e040      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
 8007718:	40023800 	.word	0x40023800
 800771c:	40007000 	.word	0x40007000
 8007720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007724:	4b1f      	ldr	r3, [pc, #124]	@ (80077a4 <HAL_RCC_OscConfig+0x538>)
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d030      	beq.n	8007794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800773c:	429a      	cmp	r2, r3
 800773e:	d129      	bne.n	8007794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800774a:	429a      	cmp	r2, r3
 800774c:	d122      	bne.n	8007794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007754:	4013      	ands	r3, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800775a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800775c:	4293      	cmp	r3, r2
 800775e:	d119      	bne.n	8007794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776a:	085b      	lsrs	r3, r3, #1
 800776c:	3b01      	subs	r3, #1
 800776e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007770:	429a      	cmp	r2, r3
 8007772:	d10f      	bne.n	8007794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007780:	429a      	cmp	r2, r3
 8007782:	d107      	bne.n	8007794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800778e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007790:	429a      	cmp	r2, r3
 8007792:	d001      	beq.n	8007798 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e000      	b.n	800779a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	40023800 	.word	0x40023800

080077a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e022      	b.n	8007800 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d105      	bne.n	80077d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7fc f9e1 	bl	8003b94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2203      	movs	r2, #3
 80077d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f814 	bl	8007808 <HAL_SD_InitCard>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e00a      	b.n	8007800 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007808:	b5b0      	push	{r4, r5, r7, lr}
 800780a:	b08e      	sub	sp, #56	@ 0x38
 800780c:	af04      	add	r7, sp, #16
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007810:	2300      	movs	r3, #0
 8007812:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007814:	2300      	movs	r3, #0
 8007816:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007818:	2300      	movs	r3, #0
 800781a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800781c:	2300      	movs	r3, #0
 800781e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007820:	2300      	movs	r3, #0
 8007822:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007824:	2376      	movs	r3, #118	@ 0x76
 8007826:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681d      	ldr	r5, [r3, #0]
 800782c:	466c      	mov	r4, sp
 800782e:	f107 0318 	add.w	r3, r7, #24
 8007832:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007836:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800783a:	f107 030c 	add.w	r3, r7, #12
 800783e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007840:	4628      	mov	r0, r5
 8007842:	f002 fa5d 	bl	8009d00 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007846:	4b2a      	ldr	r3, [pc, #168]	@ (80078f0 <HAL_SD_InitCard+0xe8>)
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f002 fa9e 	bl	8009d92 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007856:	4b26      	ldr	r3, [pc, #152]	@ (80078f0 <HAL_SD_InitCard+0xe8>)
 8007858:	2201      	movs	r2, #1
 800785a:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800785c:	2002      	movs	r0, #2
 800785e:	f7fc fd7f 	bl	8004360 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 ff56 	bl	8008714 <SD_PowerON>
 8007868:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800786a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00b      	beq.n	8007888 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e02e      	b.n	80078e6 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fe75 	bl	8008578 <SD_InitCard>
 800788e:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00b      	beq.n	80078ae <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a4:	431a      	orrs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e01b      	b.n	80078e6 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80078b6:	4618      	mov	r0, r3
 80078b8:	f002 fafd 	bl	8009eb6 <SDMMC_CmdBlockLength>
 80078bc:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80078be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00f      	beq.n	80078e4 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a0a      	ldr	r2, [pc, #40]	@ (80078f4 <HAL_SD_InitCard+0xec>)
 80078ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e000      	b.n	80078e6 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3728      	adds	r7, #40	@ 0x28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bdb0      	pop	{r4, r5, r7, pc}
 80078ee:	bf00      	nop
 80078f0:	422580a0 	.word	0x422580a0
 80078f4:	004005ff 	.word	0x004005ff

080078f8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b08c      	sub	sp, #48	@ 0x30
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d107      	bne.n	8007920 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007914:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e0be      	b.n	8007a9e <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b01      	cmp	r3, #1
 800792a:	f040 80b7 	bne.w	8007a9c <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007934:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	441a      	add	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800793e:	429a      	cmp	r2, r3
 8007940:	d907      	bls.n	8007952 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007946:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e0a5      	b.n	8007a9e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2203      	movs	r2, #3
 8007956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2200      	movs	r2, #0
 8007960:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007970:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007976:	4a4c      	ldr	r2, [pc, #304]	@ (8007aa8 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8007978:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797e:	4a4b      	ldr	r2, [pc, #300]	@ (8007aac <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007980:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007986:	2200      	movs	r2, #0
 8007988:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798e:	2200      	movs	r2, #0
 8007990:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3380      	adds	r3, #128	@ 0x80
 80079b8:	4619      	mov	r1, r3
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	025b      	lsls	r3, r3, #9
 80079c0:	089b      	lsrs	r3, r3, #2
 80079c2:	f7fc fe81 	bl	80046c8 <HAL_DMA_Start_IT>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d017      	beq.n	80079fc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80079da:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a33      	ldr	r2, [pc, #204]	@ (8007ab0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80079e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e050      	b.n	8007a9e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80079fc:	4b2d      	ldr	r3, [pc, #180]	@ (8007ab4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d002      	beq.n	8007a10 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8007a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0c:	025b      	lsls	r3, r3, #9
 8007a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a10:	f04f 33ff 	mov.w	r3, #4294967295
 8007a14:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	025b      	lsls	r3, r3, #9
 8007a1a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007a1c:	2390      	movs	r3, #144	@ 0x90
 8007a1e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007a20:	2302      	movs	r3, #2
 8007a22:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f107 0210 	add.w	r2, r7, #16
 8007a34:	4611      	mov	r1, r2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f002 fa11 	bl	8009e5e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d90a      	bls.n	8007a58 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2282      	movs	r2, #130	@ 0x82
 8007a46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f002 fa75 	bl	8009f3e <SDMMC_CmdReadMultiBlock>
 8007a54:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007a56:	e009      	b.n	8007a6c <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2281      	movs	r2, #129	@ 0x81
 8007a5c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a64:	4618      	mov	r0, r3
 8007a66:	f002 fa48 	bl	8009efa <SDMMC_CmdReadSingleBlock>
 8007a6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d012      	beq.n	8007a98 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a0e      	ldr	r2, [pc, #56]	@ (8007ab0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007a78:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a80:	431a      	orrs	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e002      	b.n	8007a9e <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	e000      	b.n	8007a9e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007a9c:	2302      	movs	r3, #2
  }
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3730      	adds	r7, #48	@ 0x30
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	08008387 	.word	0x08008387
 8007aac:	080083f9 	.word	0x080083f9
 8007ab0:	004005ff 	.word	0x004005ff
 8007ab4:	4225858c 	.word	0x4225858c

08007ab8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08c      	sub	sp, #48	@ 0x30
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d107      	bne.n	8007ae0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e0c1      	b.n	8007c64 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	f040 80ba 	bne.w	8007c62 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007af4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	441a      	add	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d907      	bls.n	8007b12 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b06:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e0a8      	b.n	8007c64 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2203      	movs	r2, #3
 8007b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f042 021a 	orr.w	r2, r2, #26
 8007b30:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b36:	4a4d      	ldr	r2, [pc, #308]	@ (8007c6c <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8007b38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b3e:	4a4c      	ldr	r2, [pc, #304]	@ (8007c70 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8007b40:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b46:	2200      	movs	r2, #0
 8007b48:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d002      	beq.n	8007b58 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b54:	025b      	lsls	r3, r3, #9
 8007b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d90a      	bls.n	8007b74 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	22a0      	movs	r2, #160	@ 0xa0
 8007b62:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f002 fa2b 	bl	8009fc6 <SDMMC_CmdWriteMultiBlock>
 8007b70:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007b72:	e009      	b.n	8007b88 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2290      	movs	r2, #144	@ 0x90
 8007b78:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b80:	4618      	mov	r0, r3
 8007b82:	f002 f9fe 	bl	8009f82 <SDMMC_CmdWriteSingleBlock>
 8007b86:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d012      	beq.n	8007bb4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a38      	ldr	r2, [pc, #224]	@ (8007c74 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007b94:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e057      	b.n	8007c64 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007bb4:	4b30      	ldr	r3, [pc, #192]	@ (8007c78 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bbe:	2240      	movs	r2, #64	@ 0x40
 8007bc0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3380      	adds	r3, #128	@ 0x80
 8007bea:	461a      	mov	r2, r3
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	025b      	lsls	r3, r3, #9
 8007bf0:	089b      	lsrs	r3, r3, #2
 8007bf2:	f7fc fd69 	bl	80046c8 <HAL_DMA_Start_IT>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01a      	beq.n	8007c32 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 021a 	bic.w	r2, r2, #26
 8007c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a18      	ldr	r2, [pc, #96]	@ (8007c74 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007c12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c18:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e018      	b.n	8007c64 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c32:	f04f 33ff 	mov.w	r3, #4294967295
 8007c36:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	025b      	lsls	r3, r3, #9
 8007c3c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007c3e:	2390      	movs	r3, #144	@ 0x90
 8007c40:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007c42:	2300      	movs	r3, #0
 8007c44:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f107 0210 	add.w	r2, r7, #16
 8007c56:	4611      	mov	r1, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f002 f900 	bl	8009e5e <SDIO_ConfigData>

      return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e000      	b.n	8007c64 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8007c62:	2302      	movs	r3, #2
  }
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3730      	adds	r7, #48	@ 0x30
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	0800835d 	.word	0x0800835d
 8007c70:	080083f9 	.word	0x080083f9
 8007c74:	004005ff 	.word	0x004005ff
 8007c78:	4225858c 	.word	0x4225858c

08007c7c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c88:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <HAL_SD_IRQHandler+0x2e>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0308 	and.w	r3, r3, #8
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fdec 	bl	8008880 <SD_Read_IT>
 8007ca8:	e155      	b.n	8007f56 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 808f 	beq.w	8007dd8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cc2:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8007cd2:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8007cd6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 0201 	bic.w	r2, r2, #1
 8007ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f003 0308 	and.w	r3, r3, #8
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d039      	beq.n	8007d66 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d104      	bne.n	8007d06 <HAL_SD_IRQHandler+0x8a>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d011      	beq.n	8007d2a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f002 f97e 	bl	800a00c <SDMMC_CmdStopTransfer>
 8007d10:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d008      	beq.n	8007d2a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f91f 	bl	8007f68 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007d32:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d104      	bne.n	8007d56 <HAL_SD_IRQHandler+0xda>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f003 0302 	and.w	r3, r3, #2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f002 fd9c 	bl	800a894 <HAL_SD_RxCpltCallback>
 8007d5c:	e0fb      	b.n	8007f56 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f002 fd8e 	bl	800a880 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007d64:	e0f7      	b.n	8007f56 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 80f2 	beq.w	8007f56 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f003 0320 	and.w	r3, r3, #32
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d011      	beq.n	8007da0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f002 f943 	bl	800a00c <SDMMC_CmdStopTransfer>
 8007d86:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d008      	beq.n	8007da0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	431a      	orrs	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f8e4 	bl	8007f68 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f040 80d5 	bne.w	8007f56 <HAL_SD_IRQHandler+0x2da>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f040 80cf 	bne.w	8007f56 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0208 	bic.w	r2, r2, #8
 8007dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f002 fd55 	bl	800a880 <HAL_SD_TxCpltCallback>
}
 8007dd6:	e0be      	b.n	8007f56 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d008      	beq.n	8007df8 <HAL_SD_IRQHandler+0x17c>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fd96 	bl	8008922 <SD_Write_IT>
 8007df6:	e0ae      	b.n	8007f56 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dfe:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80a7 	beq.w	8007f56 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d005      	beq.n	8007e22 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1a:	f043 0202 	orr.w	r2, r3, #2
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e34:	f043 0208 	orr.w	r2, r3, #8
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d005      	beq.n	8007e56 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4e:	f043 0220 	orr.w	r2, r3, #32
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e5c:	f003 0310 	and.w	r3, r3, #16
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e68:	f043 0210 	orr.w	r2, r3, #16
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007e78:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007e88:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f002 f8bc 	bl	800a00c <SDMMC_CmdStopTransfer>
 8007e94:	4602      	mov	r2, r0
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f855 	bl	8007f68 <HAL_SD_ErrorCallback>
}
 8007ebe:	e04a      	b.n	8007f56 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d045      	beq.n	8007f56 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d104      	bne.n	8007ede <HAL_SD_IRQHandler+0x262>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d011      	beq.n	8007f02 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8007f60 <HAL_SD_IRQHandler+0x2e4>)
 8007ee4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fc fc44 	bl	8004778 <HAL_DMA_Abort_IT>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d02f      	beq.n	8007f56 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 face 	bl	800849c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007f00:	e029      	b.n	8007f56 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <HAL_SD_IRQHandler+0x29a>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f003 0302 	and.w	r3, r3, #2
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d011      	beq.n	8007f3a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1a:	4a12      	ldr	r2, [pc, #72]	@ (8007f64 <HAL_SD_IRQHandler+0x2e8>)
 8007f1c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fc fc28 	bl	8004778 <HAL_DMA_Abort_IT>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d013      	beq.n	8007f56 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fae9 	bl	800850a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007f38:	e00d      	b.n	8007f56 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f002 fc8c 	bl	800a86c <HAL_SD_AbortCallback>
}
 8007f54:	e7ff      	b.n	8007f56 <HAL_SD_IRQHandler+0x2da>
 8007f56:	bf00      	nop
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	0800849d 	.word	0x0800849d
 8007f64:	0800850b 	.word	0x0800850b

08007f68 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f8a:	0f9b      	lsrs	r3, r3, #30
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f96:	0e9b      	lsrs	r3, r3, #26
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fa8:	0e1b      	lsrs	r3, r3, #24
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fba:	0c1b      	lsrs	r3, r3, #16
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fc6:	0a1b      	lsrs	r3, r3, #8
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fdc:	0d1b      	lsrs	r3, r3, #20
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fe8:	0c1b      	lsrs	r3, r3, #16
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ffa:	0bdb      	lsrs	r3, r3, #15
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	b2da      	uxtb	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800800c:	0b9b      	lsrs	r3, r3, #14
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	b2da      	uxtb	r2, r3
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800801e:	0b5b      	lsrs	r3, r3, #13
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	b2da      	uxtb	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008030:	0b1b      	lsrs	r3, r3, #12
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	b2da      	uxtb	r2, r3
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2200      	movs	r2, #0
 8008042:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008048:	2b00      	cmp	r3, #0
 800804a:	d163      	bne.n	8008114 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008050:	009a      	lsls	r2, r3, #2
 8008052:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008056:	4013      	ands	r3, r2
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800805c:	0f92      	lsrs	r2, r2, #30
 800805e:	431a      	orrs	r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008068:	0edb      	lsrs	r3, r3, #27
 800806a:	b2db      	uxtb	r3, r3
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	b2da      	uxtb	r2, r3
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800807a:	0e1b      	lsrs	r3, r3, #24
 800807c:	b2db      	uxtb	r3, r3
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	b2da      	uxtb	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800808c:	0d5b      	lsrs	r3, r3, #21
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f003 0307 	and.w	r3, r3, #7
 8008094:	b2da      	uxtb	r2, r3
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800809e:	0c9b      	lsrs	r3, r3, #18
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0307 	and.w	r3, r3, #7
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080b0:	0bdb      	lsrs	r3, r3, #15
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	7e1b      	ldrb	r3, [r3, #24]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	3302      	adds	r3, #2
 80080d4:	2201      	movs	r2, #1
 80080d6:	fa02 f303 	lsl.w	r3, r2, r3
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80080de:	fb03 f202 	mul.w	r2, r3, r2
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	7a1b      	ldrb	r3, [r3, #8]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	2201      	movs	r2, #1
 80080f2:	409a      	lsls	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008100:	0a52      	lsrs	r2, r2, #9
 8008102:	fb03 f202 	mul.w	r2, r3, r2
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008110:	661a      	str	r2, [r3, #96]	@ 0x60
 8008112:	e031      	b.n	8008178 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008118:	2b01      	cmp	r3, #1
 800811a:	d11d      	bne.n	8008158 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008120:	041b      	lsls	r3, r3, #16
 8008122:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800812a:	0c1b      	lsrs	r3, r3, #16
 800812c:	431a      	orrs	r2, r3
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	3301      	adds	r3, #1
 8008138:	029a      	lsls	r2, r3, #10
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800814c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	661a      	str	r2, [r3, #96]	@ 0x60
 8008156:	e00f      	b.n	8008178 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a58      	ldr	r2, [pc, #352]	@ (80082c0 <HAL_SD_GetCardCSD+0x344>)
 800815e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008164:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e09d      	b.n	80082b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800817c:	0b9b      	lsrs	r3, r3, #14
 800817e:	b2db      	uxtb	r3, r3
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	b2da      	uxtb	r2, r3
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800818e:	09db      	lsrs	r3, r3, #7
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008196:	b2da      	uxtb	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081b0:	0fdb      	lsrs	r3, r3, #31
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081bc:	0f5b      	lsrs	r3, r3, #29
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ce:	0e9b      	lsrs	r3, r3, #26
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e0:	0d9b      	lsrs	r3, r3, #22
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f2:	0d5b      	lsrs	r3, r3, #21
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800820e:	0c1b      	lsrs	r3, r3, #16
 8008210:	b2db      	uxtb	r3, r3
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	b2da      	uxtb	r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008222:	0bdb      	lsrs	r3, r3, #15
 8008224:	b2db      	uxtb	r3, r3
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	b2da      	uxtb	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008236:	0b9b      	lsrs	r3, r3, #14
 8008238:	b2db      	uxtb	r3, r3
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	b2da      	uxtb	r2, r3
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824a:	0b5b      	lsrs	r3, r3, #13
 800824c:	b2db      	uxtb	r3, r3
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	b2da      	uxtb	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800825e:	0b1b      	lsrs	r3, r3, #12
 8008260:	b2db      	uxtb	r3, r3
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	b2da      	uxtb	r2, r3
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008272:	0a9b      	lsrs	r3, r3, #10
 8008274:	b2db      	uxtb	r3, r3
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	b2da      	uxtb	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008286:	0a1b      	lsrs	r3, r3, #8
 8008288:	b2db      	uxtb	r3, r3
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	b2da      	uxtb	r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	b2db      	uxtb	r3, r3
 800829e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	004005ff 	.word	0x004005ff

080082c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008328:	f107 030c 	add.w	r3, r7, #12
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa7e 	bl	8008830 <SD_SendStatus>
 8008334:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	0a5b      	lsrs	r3, r3, #9
 800834c:	f003 030f 	and.w	r3, r3, #15
 8008350:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008352:	693b      	ldr	r3, [r7, #16]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008368:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008378:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800837a:	bf00      	nop
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008392:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008398:	2b82      	cmp	r3, #130	@ 0x82
 800839a:	d111      	bne.n	80083c0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 fe33 	bl	800a00c <SDMMC_CmdStopTransfer>
 80083a6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d008      	beq.n	80083c0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	431a      	orrs	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f7ff fdd4 	bl	8007f68 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0208 	bic.w	r2, r2, #8
 80083ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80083d8:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f002 fa53 	bl	800a894 <HAL_SD_RxCpltCallback>
#endif
}
 80083ee:	bf00      	nop
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
	...

080083f8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008404:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7fc fb62 	bl	8004ad0 <HAL_DMA_GetError>
 800840c:	4603      	mov	r3, r0
 800840e:	2b02      	cmp	r3, #2
 8008410:	d03e      	beq.n	8008490 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008418:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008420:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d002      	beq.n	800842e <SD_DMAError+0x36>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d12d      	bne.n	800848a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a19      	ldr	r2, [pc, #100]	@ (8008498 <SD_DMAError+0xa0>)
 8008434:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008444:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008452:	6978      	ldr	r0, [r7, #20]
 8008454:	f7ff ff62 	bl	800831c <HAL_SD_GetCardState>
 8008458:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2b06      	cmp	r3, #6
 800845e:	d002      	beq.n	8008466 <SD_DMAError+0x6e>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b05      	cmp	r3, #5
 8008464:	d10a      	bne.n	800847c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4618      	mov	r0, r3
 800846c:	f001 fdce 	bl	800a00c <SDMMC_CmdStopTransfer>
 8008470:	4602      	mov	r2, r0
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008476:	431a      	orrs	r2, r3
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2200      	movs	r2, #0
 8008488:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800848a:	6978      	ldr	r0, [r7, #20]
 800848c:	f7ff fd6c 	bl	8007f68 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008490:	bf00      	nop
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	004005ff 	.word	0x004005ff

0800849c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f240 523a 	movw	r2, #1338	@ 0x53a
 80084b2:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f7ff ff31 	bl	800831c <HAL_SD_GetCardState>
 80084ba:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b06      	cmp	r3, #6
 80084ce:	d002      	beq.n	80084d6 <SD_DMATxAbort+0x3a>
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	d10a      	bne.n	80084ec <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 fd96 	bl	800a00c <SDMMC_CmdStopTransfer>
 80084e0:	4602      	mov	r2, r0
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e6:	431a      	orrs	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d103      	bne.n	80084fc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f002 f9b9 	bl	800a86c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80084fa:	e002      	b.n	8008502 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f7ff fd33 	bl	8007f68 <HAL_SD_ErrorCallback>
}
 8008502:	bf00      	nop
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008516:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008520:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7ff fefa 	bl	800831c <HAL_SD_GetCardState>
 8008528:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b06      	cmp	r3, #6
 800853c:	d002      	beq.n	8008544 <SD_DMARxAbort+0x3a>
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2b05      	cmp	r3, #5
 8008542:	d10a      	bne.n	800855a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4618      	mov	r0, r3
 800854a:	f001 fd5f 	bl	800a00c <SDMMC_CmdStopTransfer>
 800854e:	4602      	mov	r2, r0
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008554:	431a      	orrs	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855e:	2b00      	cmp	r3, #0
 8008560:	d103      	bne.n	800856a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f002 f982 	bl	800a86c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008568:	e002      	b.n	8008570 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff fcfc 	bl	8007f68 <HAL_SD_ErrorCallback>
}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008578:	b5b0      	push	{r4, r5, r7, lr}
 800857a:	b094      	sub	sp, #80	@ 0x50
 800857c:	af04      	add	r7, sp, #16
 800857e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008580:	2301      	movs	r3, #1
 8008582:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4618      	mov	r0, r3
 800858a:	f001 fc10 	bl	8009dae <SDIO_GetPowerState>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d102      	bne.n	800859a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008594:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008598:	e0b8      	b.n	800870c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d02f      	beq.n	8008602 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 fdf7 	bl	800a19a <SDMMC_CmdSendCID>
 80085ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <SD_InitCard+0x40>
    {
      return errorstate;
 80085b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085b6:	e0a9      	b.n	800870c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2100      	movs	r1, #0
 80085be:	4618      	mov	r0, r3
 80085c0:	f001 fc3a 	bl	8009e38 <SDIO_GetResponse>
 80085c4:	4602      	mov	r2, r0
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2104      	movs	r1, #4
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 fc31 	bl	8009e38 <SDIO_GetResponse>
 80085d6:	4602      	mov	r2, r0
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2108      	movs	r1, #8
 80085e2:	4618      	mov	r0, r3
 80085e4:	f001 fc28 	bl	8009e38 <SDIO_GetResponse>
 80085e8:	4602      	mov	r2, r0
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	210c      	movs	r1, #12
 80085f4:	4618      	mov	r0, r3
 80085f6:	f001 fc1f 	bl	8009e38 <SDIO_GetResponse>
 80085fa:	4602      	mov	r2, r0
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008606:	2b03      	cmp	r3, #3
 8008608:	d00d      	beq.n	8008626 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f107 020e 	add.w	r2, r7, #14
 8008612:	4611      	mov	r1, r2
 8008614:	4618      	mov	r0, r3
 8008616:	f001 fdfd 	bl	800a214 <SDMMC_CmdSetRelAdd>
 800861a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800861c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <SD_InitCard+0xae>
    {
      return errorstate;
 8008622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008624:	e072      	b.n	800870c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800862a:	2b03      	cmp	r3, #3
 800862c:	d036      	beq.n	800869c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800862e:	89fb      	ldrh	r3, [r7, #14]
 8008630:	461a      	mov	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800863e:	041b      	lsls	r3, r3, #16
 8008640:	4619      	mov	r1, r3
 8008642:	4610      	mov	r0, r2
 8008644:	f001 fdc7 	bl	800a1d6 <SDMMC_CmdSendCSD>
 8008648:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800864a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008652:	e05b      	b.n	800870c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2100      	movs	r1, #0
 800865a:	4618      	mov	r0, r3
 800865c:	f001 fbec 	bl	8009e38 <SDIO_GetResponse>
 8008660:	4602      	mov	r2, r0
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2104      	movs	r1, #4
 800866c:	4618      	mov	r0, r3
 800866e:	f001 fbe3 	bl	8009e38 <SDIO_GetResponse>
 8008672:	4602      	mov	r2, r0
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2108      	movs	r1, #8
 800867e:	4618      	mov	r0, r3
 8008680:	f001 fbda 	bl	8009e38 <SDIO_GetResponse>
 8008684:	4602      	mov	r2, r0
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	210c      	movs	r1, #12
 8008690:	4618      	mov	r0, r3
 8008692:	f001 fbd1 	bl	8009e38 <SDIO_GetResponse>
 8008696:	4602      	mov	r2, r0
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2104      	movs	r1, #4
 80086a2:	4618      	mov	r0, r3
 80086a4:	f001 fbc8 	bl	8009e38 <SDIO_GetResponse>
 80086a8:	4603      	mov	r3, r0
 80086aa:	0d1a      	lsrs	r2, r3, #20
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80086b0:	f107 0310 	add.w	r3, r7, #16
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff fc60 	bl	8007f7c <HAL_SD_GetCardCSD>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80086c6:	e021      	b.n	800870c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6819      	ldr	r1, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086d0:	041b      	lsls	r3, r3, #16
 80086d2:	2200      	movs	r2, #0
 80086d4:	461c      	mov	r4, r3
 80086d6:	4615      	mov	r5, r2
 80086d8:	4622      	mov	r2, r4
 80086da:	462b      	mov	r3, r5
 80086dc:	4608      	mov	r0, r1
 80086de:	f001 fcb7 	bl	800a050 <SDMMC_CmdSelDesel>
 80086e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80086e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <SD_InitCard+0x176>
  {
    return errorstate;
 80086ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ec:	e00e      	b.n	800870c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681d      	ldr	r5, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	466c      	mov	r4, sp
 80086f6:	f103 0210 	add.w	r2, r3, #16
 80086fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80086fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008700:	3304      	adds	r3, #4
 8008702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008704:	4628      	mov	r0, r5
 8008706:	f001 fafb 	bl	8009d00 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3740      	adds	r7, #64	@ 0x40
 8008710:	46bd      	mov	sp, r7
 8008712:	bdb0      	pop	{r4, r5, r7, pc}

08008714 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	617b      	str	r3, [r7, #20]
 8008724:	2300      	movs	r3, #0
 8008726:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4618      	mov	r0, r3
 800872e:	f001 fcb2 	bl	800a096 <SDMMC_CmdGoIdleState>
 8008732:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <SD_PowerON+0x2a>
  {
    return errorstate;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	e072      	b.n	8008824 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4618      	mov	r0, r3
 8008744:	f001 fcc5 	bl	800a0d2 <SDMMC_CmdOperCond>
 8008748:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00d      	beq.n	800876c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f001 fc9b 	bl	800a096 <SDMMC_CmdGoIdleState>
 8008760:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d004      	beq.n	8008772 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	e05b      	b.n	8008824 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008776:	2b01      	cmp	r3, #1
 8008778:	d137      	bne.n	80087ea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2100      	movs	r1, #0
 8008780:	4618      	mov	r0, r3
 8008782:	f001 fcc5 	bl	800a110 <SDMMC_CmdAppCommand>
 8008786:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d02d      	beq.n	80087ea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800878e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008792:	e047      	b.n	8008824 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2100      	movs	r1, #0
 800879a:	4618      	mov	r0, r3
 800879c:	f001 fcb8 	bl	800a110 <SDMMC_CmdAppCommand>
 80087a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <SD_PowerON+0x98>
    {
      return errorstate;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	e03b      	b.n	8008824 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	491e      	ldr	r1, [pc, #120]	@ (800882c <SD_PowerON+0x118>)
 80087b2:	4618      	mov	r0, r3
 80087b4:	f001 fcce 	bl	800a154 <SDMMC_CmdAppOperCommand>
 80087b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80087c4:	e02e      	b.n	8008824 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2100      	movs	r1, #0
 80087cc:	4618      	mov	r0, r3
 80087ce:	f001 fb33 	bl	8009e38 <SDIO_GetResponse>
 80087d2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	0fdb      	lsrs	r3, r3, #31
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d101      	bne.n	80087e0 <SD_PowerON+0xcc>
 80087dc:	2301      	movs	r3, #1
 80087de:	e000      	b.n	80087e2 <SD_PowerON+0xce>
 80087e0:	2300      	movs	r3, #0
 80087e2:	613b      	str	r3, [r7, #16]

    count++;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	3301      	adds	r3, #1
 80087e8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d802      	bhi.n	80087fa <SD_PowerON+0xe6>
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0cc      	beq.n	8008794 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008800:	4293      	cmp	r3, r2
 8008802:	d902      	bls.n	800880a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008804:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008808:	e00c      	b.n	8008824 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	645a      	str	r2, [r3, #68]	@ 0x44
 800881a:	e002      	b.n	8008822 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	c1100000 	.word	0xc1100000

08008830 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d102      	bne.n	8008846 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008840:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008844:	e018      	b.n	8008878 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800884e:	041b      	lsls	r3, r3, #16
 8008850:	4619      	mov	r1, r3
 8008852:	4610      	mov	r0, r2
 8008854:	f001 fcff 	bl	800a256 <SDMMC_CmdSendStatus>
 8008858:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	e009      	b.n	8008878 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f001 fae4 	bl	8009e38 <SDIO_GetResponse>
 8008870:	4602      	mov	r2, r0
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008892:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d03f      	beq.n	800891a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e033      	b.n	8008908 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f001 fa56 	bl	8009d56 <SDIO_ReadFIFO>
 80088aa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	3301      	adds	r3, #1
 80088b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	3b01      	subs	r3, #1
 80088be:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	0a1b      	lsrs	r3, r3, #8
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3301      	adds	r3, #1
 80088ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	0c1b      	lsrs	r3, r3, #16
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3301      	adds	r3, #1
 80088e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	0e1b      	lsrs	r3, r3, #24
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3301      	adds	r3, #1
 80088fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	3b01      	subs	r3, #1
 8008900:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	3301      	adds	r3, #1
 8008906:	617b      	str	r3, [r7, #20]
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2b07      	cmp	r3, #7
 800890c:	d9c8      	bls.n	80088a0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800891a:	bf00      	nop
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b086      	sub	sp, #24
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008934:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d043      	beq.n	80089c4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800893c:	2300      	movs	r3, #0
 800893e:	617b      	str	r3, [r7, #20]
 8008940:	e037      	b.n	80089b2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3301      	adds	r3, #1
 800894c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	3b01      	subs	r3, #1
 8008952:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	021a      	lsls	r2, r3, #8
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	4313      	orrs	r3, r2
 800895e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3301      	adds	r3, #1
 8008964:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	3b01      	subs	r3, #1
 800896a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	041a      	lsls	r2, r3, #16
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	4313      	orrs	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3301      	adds	r3, #1
 800897c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	3b01      	subs	r3, #1
 8008982:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	061a      	lsls	r2, r3, #24
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	4313      	orrs	r3, r2
 800898e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3301      	adds	r3, #1
 8008994:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	3b01      	subs	r3, #1
 800899a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f107 0208 	add.w	r2, r7, #8
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f001 f9e2 	bl	8009d70 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	3301      	adds	r3, #1
 80089b0:	617b      	str	r3, [r7, #20]
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b07      	cmp	r3, #7
 80089b6:	d9c4      	bls.n	8008942 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80089c4:	bf00      	nop
 80089c6:	3718      	adds	r7, #24
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e07b      	b.n	8008ad6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d108      	bne.n	80089f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089ee:	d009      	beq.n	8008a04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	61da      	str	r2, [r3, #28]
 80089f6:	e005      	b.n	8008a04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d106      	bne.n	8008a24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7fb fa1c 	bl	8003e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008a4c:	431a      	orrs	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a56:	431a      	orrs	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	431a      	orrs	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a74:	431a      	orrs	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a88:	ea42 0103 	orr.w	r1, r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	0c1b      	lsrs	r3, r3, #16
 8008aa2:	f003 0104 	and.w	r1, r3, #4
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aaa:	f003 0210 	and.w	r2, r3, #16
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	69da      	ldr	r2, [r3, #28]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ac4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b088      	sub	sp, #32
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	603b      	str	r3, [r7, #0]
 8008aea:	4613      	mov	r3, r2
 8008aec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008aee:	f7fb fc2b 	bl	8004348 <HAL_GetTick>
 8008af2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008af4:	88fb      	ldrh	r3, [r7, #6]
 8008af6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d001      	beq.n	8008b08 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008b04:	2302      	movs	r3, #2
 8008b06:	e12a      	b.n	8008d5e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <HAL_SPI_Transmit+0x36>
 8008b0e:	88fb      	ldrh	r3, [r7, #6]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e122      	b.n	8008d5e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d101      	bne.n	8008b26 <HAL_SPI_Transmit+0x48>
 8008b22:	2302      	movs	r3, #2
 8008b24:	e11b      	b.n	8008d5e <HAL_SPI_Transmit+0x280>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2203      	movs	r2, #3
 8008b32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	88fa      	ldrh	r2, [r7, #6]
 8008b46:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	88fa      	ldrh	r2, [r7, #6]
 8008b4c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b74:	d10f      	bne.n	8008b96 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba0:	2b40      	cmp	r3, #64	@ 0x40
 8008ba2:	d007      	beq.n	8008bb4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bbc:	d152      	bne.n	8008c64 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <HAL_SPI_Transmit+0xee>
 8008bc6:	8b7b      	ldrh	r3, [r7, #26]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d145      	bne.n	8008c58 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd0:	881a      	ldrh	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bdc:	1c9a      	adds	r2, r3, #2
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	3b01      	subs	r3, #1
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008bf0:	e032      	b.n	8008c58 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d112      	bne.n	8008c26 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c04:	881a      	ldrh	r2, [r3, #0]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c10:	1c9a      	adds	r2, r3, #2
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008c24:	e018      	b.n	8008c58 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c26:	f7fb fb8f 	bl	8004348 <HAL_GetTick>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d803      	bhi.n	8008c3e <HAL_SPI_Transmit+0x160>
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3c:	d102      	bne.n	8008c44 <HAL_SPI_Transmit+0x166>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e082      	b.n	8008d5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1c7      	bne.n	8008bf2 <HAL_SPI_Transmit+0x114>
 8008c62:	e053      	b.n	8008d0c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <HAL_SPI_Transmit+0x194>
 8008c6c:	8b7b      	ldrh	r3, [r7, #26]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d147      	bne.n	8008d02 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	330c      	adds	r3, #12
 8008c7c:	7812      	ldrb	r2, [r2, #0]
 8008c7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	3b01      	subs	r3, #1
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c98:	e033      	b.n	8008d02 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d113      	bne.n	8008cd0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	330c      	adds	r3, #12
 8008cb2:	7812      	ldrb	r2, [r2, #0]
 8008cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008cce:	e018      	b.n	8008d02 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cd0:	f7fb fb3a 	bl	8004348 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d803      	bhi.n	8008ce8 <HAL_SPI_Transmit+0x20a>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d102      	bne.n	8008cee <HAL_SPI_Transmit+0x210>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e02d      	b.n	8008d5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1c6      	bne.n	8008c9a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d0c:	69fa      	ldr	r2, [r7, #28]
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fd05 	bl	8009720 <SPI_EndRxTxTransaction>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10a      	bne.n	8008d40 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	617b      	str	r3, [r7, #20]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	617b      	str	r3, [r7, #20]
 8008d3e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e000      	b.n	8008d5e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
  }
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3720      	adds	r7, #32
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b088      	sub	sp, #32
 8008d6a:	af02      	add	r7, sp, #8
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	603b      	str	r3, [r7, #0]
 8008d72:	4613      	mov	r3, r2
 8008d74:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d001      	beq.n	8008d86 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008d82:	2302      	movs	r3, #2
 8008d84:	e104      	b.n	8008f90 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <HAL_SPI_Receive+0x2c>
 8008d8c:	88fb      	ldrh	r3, [r7, #6]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e0fc      	b.n	8008f90 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d9e:	d112      	bne.n	8008dc6 <HAL_SPI_Receive+0x60>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10e      	bne.n	8008dc6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2204      	movs	r2, #4
 8008dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008db0:	88fa      	ldrh	r2, [r7, #6]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	4613      	mov	r3, r2
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 f8eb 	bl	8008f98 <HAL_SPI_TransmitReceive>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	e0e4      	b.n	8008f90 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008dc6:	f7fb fabf 	bl	8004348 <HAL_GetTick>
 8008dca:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d101      	bne.n	8008dda <HAL_SPI_Receive+0x74>
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	e0da      	b.n	8008f90 <HAL_SPI_Receive+0x22a>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2204      	movs	r2, #4
 8008de6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	88fa      	ldrh	r2, [r7, #6]
 8008dfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	88fa      	ldrh	r2, [r7, #6]
 8008e00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e28:	d10f      	bne.n	8008e4a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e54:	2b40      	cmp	r3, #64	@ 0x40
 8008e56:	d007      	beq.n	8008e68 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d170      	bne.n	8008f52 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008e70:	e035      	b.n	8008ede <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d115      	bne.n	8008eac <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f103 020c 	add.w	r2, r3, #12
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8c:	7812      	ldrb	r2, [r2, #0]
 8008e8e:	b2d2      	uxtb	r2, r2
 8008e90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008eaa:	e018      	b.n	8008ede <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eac:	f7fb fa4c 	bl	8004348 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d803      	bhi.n	8008ec4 <HAL_SPI_Receive+0x15e>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec2:	d102      	bne.n	8008eca <HAL_SPI_Receive+0x164>
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d109      	bne.n	8008ede <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e058      	b.n	8008f90 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1c4      	bne.n	8008e72 <HAL_SPI_Receive+0x10c>
 8008ee8:	e038      	b.n	8008f5c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d113      	bne.n	8008f20 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f02:	b292      	uxth	r2, r2
 8008f04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f0a:	1c9a      	adds	r2, r3, #2
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008f1e:	e018      	b.n	8008f52 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f20:	f7fb fa12 	bl	8004348 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d803      	bhi.n	8008f38 <HAL_SPI_Receive+0x1d2>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f36:	d102      	bne.n	8008f3e <HAL_SPI_Receive+0x1d8>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d109      	bne.n	8008f52 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e01e      	b.n	8008f90 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1c6      	bne.n	8008eea <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 fb77 	bl	8009654 <SPI_EndRxTransaction>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e000      	b.n	8008f90 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
  }
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3718      	adds	r7, #24
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08a      	sub	sp, #40	@ 0x28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008faa:	f7fb f9cd 	bl	8004348 <HAL_GetTick>
 8008fae:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008fb6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008fbe:	887b      	ldrh	r3, [r7, #2]
 8008fc0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008fc2:	7ffb      	ldrb	r3, [r7, #31]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d00c      	beq.n	8008fe2 <HAL_SPI_TransmitReceive+0x4a>
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fce:	d106      	bne.n	8008fde <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d102      	bne.n	8008fde <HAL_SPI_TransmitReceive+0x46>
 8008fd8:	7ffb      	ldrb	r3, [r7, #31]
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	d001      	beq.n	8008fe2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008fde:	2302      	movs	r3, #2
 8008fe0:	e17f      	b.n	80092e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d005      	beq.n	8008ff4 <HAL_SPI_TransmitReceive+0x5c>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <HAL_SPI_TransmitReceive+0x5c>
 8008fee:	887b      	ldrh	r3, [r7, #2]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e174      	b.n	80092e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d101      	bne.n	8009006 <HAL_SPI_TransmitReceive+0x6e>
 8009002:	2302      	movs	r3, #2
 8009004:	e16d      	b.n	80092e2 <HAL_SPI_TransmitReceive+0x34a>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b04      	cmp	r3, #4
 8009018:	d003      	beq.n	8009022 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2205      	movs	r2, #5
 800901e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	887a      	ldrh	r2, [r7, #2]
 8009032:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	887a      	ldrh	r2, [r7, #2]
 8009038:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	887a      	ldrh	r2, [r7, #2]
 8009044:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	887a      	ldrh	r2, [r7, #2]
 800904a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009062:	2b40      	cmp	r3, #64	@ 0x40
 8009064:	d007      	beq.n	8009076 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009074:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800907e:	d17e      	bne.n	800917e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <HAL_SPI_TransmitReceive+0xf6>
 8009088:	8afb      	ldrh	r3, [r7, #22]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d16c      	bne.n	8009168 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009092:	881a      	ldrh	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909e:	1c9a      	adds	r2, r3, #2
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	3b01      	subs	r3, #1
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090b2:	e059      	b.n	8009168 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d11b      	bne.n	80090fa <HAL_SPI_TransmitReceive+0x162>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d016      	beq.n	80090fa <HAL_SPI_TransmitReceive+0x162>
 80090cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d113      	bne.n	80090fa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d6:	881a      	ldrh	r2, [r3, #0]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e2:	1c9a      	adds	r2, r3, #2
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	2b01      	cmp	r3, #1
 8009106:	d119      	bne.n	800913c <HAL_SPI_TransmitReceive+0x1a4>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800910c:	b29b      	uxth	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d014      	beq.n	800913c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68da      	ldr	r2, [r3, #12]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800911c:	b292      	uxth	r2, r2
 800911e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009124:	1c9a      	adds	r2, r3, #2
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800912e:	b29b      	uxth	r3, r3
 8009130:	3b01      	subs	r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009138:	2301      	movs	r3, #1
 800913a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800913c:	f7fb f904 	bl	8004348 <HAL_GetTick>
 8009140:	4602      	mov	r2, r0
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009148:	429a      	cmp	r2, r3
 800914a:	d80d      	bhi.n	8009168 <HAL_SPI_TransmitReceive+0x1d0>
 800914c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009152:	d009      	beq.n	8009168 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e0bc      	b.n	80092e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800916c:	b29b      	uxth	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1a0      	bne.n	80090b4 <HAL_SPI_TransmitReceive+0x11c>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009176:	b29b      	uxth	r3, r3
 8009178:	2b00      	cmp	r3, #0
 800917a:	d19b      	bne.n	80090b4 <HAL_SPI_TransmitReceive+0x11c>
 800917c:	e082      	b.n	8009284 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <HAL_SPI_TransmitReceive+0x1f4>
 8009186:	8afb      	ldrh	r3, [r7, #22]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d171      	bne.n	8009270 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	330c      	adds	r3, #12
 8009196:	7812      	ldrb	r2, [r2, #0]
 8009198:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	3b01      	subs	r3, #1
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091b2:	e05d      	b.n	8009270 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f003 0302 	and.w	r3, r3, #2
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d11c      	bne.n	80091fc <HAL_SPI_TransmitReceive+0x264>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d017      	beq.n	80091fc <HAL_SPI_TransmitReceive+0x264>
 80091cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d114      	bne.n	80091fc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	330c      	adds	r3, #12
 80091dc:	7812      	ldrb	r2, [r2, #0]
 80091de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	3b01      	subs	r3, #1
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b01      	cmp	r3, #1
 8009208:	d119      	bne.n	800923e <HAL_SPI_TransmitReceive+0x2a6>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800920e:	b29b      	uxth	r3, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	d014      	beq.n	800923e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68da      	ldr	r2, [r3, #12]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921e:	b2d2      	uxtb	r2, r2
 8009220:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009230:	b29b      	uxth	r3, r3
 8009232:	3b01      	subs	r3, #1
 8009234:	b29a      	uxth	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800923a:	2301      	movs	r3, #1
 800923c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800923e:	f7fb f883 	bl	8004348 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800924a:	429a      	cmp	r2, r3
 800924c:	d803      	bhi.n	8009256 <HAL_SPI_TransmitReceive+0x2be>
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009254:	d102      	bne.n	800925c <HAL_SPI_TransmitReceive+0x2c4>
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	2b00      	cmp	r3, #0
 800925a:	d109      	bne.n	8009270 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e038      	b.n	80092e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009274:	b29b      	uxth	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d19c      	bne.n	80091b4 <HAL_SPI_TransmitReceive+0x21c>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800927e:	b29b      	uxth	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d197      	bne.n	80091b4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009284:	6a3a      	ldr	r2, [r7, #32]
 8009286:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 fa49 	bl	8009720 <SPI_EndRxTxTransaction>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d008      	beq.n	80092a6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2220      	movs	r2, #32
 8009298:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e01d      	b.n	80092e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10a      	bne.n	80092c4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092ae:	2300      	movs	r3, #0
 80092b0:	613b      	str	r3, [r7, #16]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	613b      	str	r3, [r7, #16]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	613b      	str	r3, [r7, #16]
 80092c2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d001      	beq.n	80092e0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e000      	b.n	80092e2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80092e0:	2300      	movs	r3, #0
  }
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3728      	adds	r7, #40	@ 0x28
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	099b      	lsrs	r3, r3, #6
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10f      	bne.n	8009330 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00a      	beq.n	8009330 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	099b      	lsrs	r3, r3, #6
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d004      	beq.n	8009330 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
    return;
 800932e:	e0d7      	b.n	80094e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	085b      	lsrs	r3, r3, #1
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00a      	beq.n	8009352 <HAL_SPI_IRQHandler+0x66>
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	09db      	lsrs	r3, r3, #7
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	2b00      	cmp	r3, #0
 8009346:	d004      	beq.n	8009352 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	4798      	blx	r3
    return;
 8009350:	e0c6      	b.n	80094e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	095b      	lsrs	r3, r3, #5
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10c      	bne.n	8009378 <HAL_SPI_IRQHandler+0x8c>
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	099b      	lsrs	r3, r3, #6
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d106      	bne.n	8009378 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	0a1b      	lsrs	r3, r3, #8
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 80b4 	beq.w	80094e0 <HAL_SPI_IRQHandler+0x1f4>
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	095b      	lsrs	r3, r3, #5
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80ad 	beq.w	80094e0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	099b      	lsrs	r3, r3, #6
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d023      	beq.n	80093da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009398:	b2db      	uxtb	r3, r3
 800939a:	2b03      	cmp	r3, #3
 800939c:	d011      	beq.n	80093c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a2:	f043 0204 	orr.w	r2, r3, #4
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093aa:	2300      	movs	r3, #0
 80093ac:	617b      	str	r3, [r7, #20]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	617b      	str	r3, [r7, #20]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	617b      	str	r3, [r7, #20]
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	e00b      	b.n	80093da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093c2:	2300      	movs	r3, #0
 80093c4:	613b      	str	r3, [r7, #16]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	613b      	str	r3, [r7, #16]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	613b      	str	r3, [r7, #16]
 80093d6:	693b      	ldr	r3, [r7, #16]
        return;
 80093d8:	e082      	b.n	80094e0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	095b      	lsrs	r3, r3, #5
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d014      	beq.n	8009410 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ea:	f043 0201 	orr.w	r2, r3, #1
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	0a1b      	lsrs	r3, r3, #8
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00c      	beq.n	8009436 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009420:	f043 0208 	orr.w	r2, r3, #8
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009428:	2300      	movs	r3, #0
 800942a:	60bb      	str	r3, [r7, #8]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	60bb      	str	r3, [r7, #8]
 8009434:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800943a:	2b00      	cmp	r3, #0
 800943c:	d04f      	beq.n	80094de <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800944c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <HAL_SPI_IRQHandler+0x17e>
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d034      	beq.n	80094d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f022 0203 	bic.w	r2, r2, #3
 8009478:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800947e:	2b00      	cmp	r3, #0
 8009480:	d011      	beq.n	80094a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009486:	4a18      	ldr	r2, [pc, #96]	@ (80094e8 <HAL_SPI_IRQHandler+0x1fc>)
 8009488:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800948e:	4618      	mov	r0, r3
 8009490:	f7fb f972 	bl	8004778 <HAL_DMA_Abort_IT>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d005      	beq.n	80094a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800949e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d016      	beq.n	80094dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094b2:	4a0d      	ldr	r2, [pc, #52]	@ (80094e8 <HAL_SPI_IRQHandler+0x1fc>)
 80094b4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fb f95c 	bl	8004778 <HAL_DMA_Abort_IT>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00a      	beq.n	80094dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80094d2:	e003      	b.n	80094dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f809 	bl	80094ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80094da:	e000      	b.n	80094de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80094dc:	bf00      	nop
    return;
 80094de:	bf00      	nop
  }
}
 80094e0:	3720      	adds	r7, #32
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	0800951d 	.word	0x0800951d

080094ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800950e:	b2db      	uxtb	r3, r3
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009528:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7ff ffd8 	bl	80094ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b088      	sub	sp, #32
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	603b      	str	r3, [r7, #0]
 8009550:	4613      	mov	r3, r2
 8009552:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009554:	f7fa fef8 	bl	8004348 <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955c:	1a9b      	subs	r3, r3, r2
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	4413      	add	r3, r2
 8009562:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009564:	f7fa fef0 	bl	8004348 <HAL_GetTick>
 8009568:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800956a:	4b39      	ldr	r3, [pc, #228]	@ (8009650 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	015b      	lsls	r3, r3, #5
 8009570:	0d1b      	lsrs	r3, r3, #20
 8009572:	69fa      	ldr	r2, [r7, #28]
 8009574:	fb02 f303 	mul.w	r3, r2, r3
 8009578:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800957a:	e055      	b.n	8009628 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009582:	d051      	beq.n	8009628 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009584:	f7fa fee0 	bl	8004348 <HAL_GetTick>
 8009588:	4602      	mov	r2, r0
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	69fa      	ldr	r2, [r7, #28]
 8009590:	429a      	cmp	r2, r3
 8009592:	d902      	bls.n	800959a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d13d      	bne.n	8009616 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80095a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095b2:	d111      	bne.n	80095d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095bc:	d004      	beq.n	80095c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095c6:	d107      	bne.n	80095d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095e0:	d10f      	bne.n	8009602 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009600:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	e018      	b.n	8009648 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d102      	bne.n	8009622 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	61fb      	str	r3, [r7, #28]
 8009620:	e002      	b.n	8009628 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	3b01      	subs	r3, #1
 8009626:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689a      	ldr	r2, [r3, #8]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	4013      	ands	r3, r2
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	429a      	cmp	r2, r3
 8009636:	bf0c      	ite	eq
 8009638:	2301      	moveq	r3, #1
 800963a:	2300      	movne	r3, #0
 800963c:	b2db      	uxtb	r3, r3
 800963e:	461a      	mov	r2, r3
 8009640:	79fb      	ldrb	r3, [r7, #7]
 8009642:	429a      	cmp	r2, r3
 8009644:	d19a      	bne.n	800957c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3720      	adds	r7, #32
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	20000000 	.word	0x20000000

08009654 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af02      	add	r7, sp, #8
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009668:	d111      	bne.n	800968e <SPI_EndRxTransaction+0x3a>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009672:	d004      	beq.n	800967e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800967c:	d107      	bne.n	800968e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800968c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009696:	d12a      	bne.n	80096ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096a0:	d012      	beq.n	80096c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2200      	movs	r2, #0
 80096aa:	2180      	movs	r1, #128	@ 0x80
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f7ff ff49 	bl	8009544 <SPI_WaitFlagStateUntilTimeout>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d02d      	beq.n	8009714 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096bc:	f043 0220 	orr.w	r2, r3, #32
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e026      	b.n	8009716 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2200      	movs	r2, #0
 80096d0:	2101      	movs	r1, #1
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f7ff ff36 	bl	8009544 <SPI_WaitFlagStateUntilTimeout>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d01a      	beq.n	8009714 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e2:	f043 0220 	orr.w	r2, r3, #32
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e013      	b.n	8009716 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2200      	movs	r2, #0
 80096f6:	2101      	movs	r1, #1
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7ff ff23 	bl	8009544 <SPI_WaitFlagStateUntilTimeout>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d007      	beq.n	8009714 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009708:	f043 0220 	orr.w	r2, r3, #32
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	e000      	b.n	8009716 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af02      	add	r7, sp, #8
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2201      	movs	r2, #1
 8009734:	2102      	movs	r1, #2
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f7ff ff04 	bl	8009544 <SPI_WaitFlagStateUntilTimeout>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d007      	beq.n	8009752 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009746:	f043 0220 	orr.w	r2, r3, #32
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	e032      	b.n	80097b8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009752:	4b1b      	ldr	r3, [pc, #108]	@ (80097c0 <SPI_EndRxTxTransaction+0xa0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a1b      	ldr	r2, [pc, #108]	@ (80097c4 <SPI_EndRxTxTransaction+0xa4>)
 8009758:	fba2 2303 	umull	r2, r3, r2, r3
 800975c:	0d5b      	lsrs	r3, r3, #21
 800975e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009762:	fb02 f303 	mul.w	r3, r2, r3
 8009766:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009770:	d112      	bne.n	8009798 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2200      	movs	r2, #0
 800977a:	2180      	movs	r1, #128	@ 0x80
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f7ff fee1 	bl	8009544 <SPI_WaitFlagStateUntilTimeout>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d016      	beq.n	80097b6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800978c:	f043 0220 	orr.w	r2, r3, #32
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e00f      	b.n	80097b8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ae:	2b80      	cmp	r3, #128	@ 0x80
 80097b0:	d0f2      	beq.n	8009798 <SPI_EndRxTxTransaction+0x78>
 80097b2:	e000      	b.n	80097b6 <SPI_EndRxTxTransaction+0x96>
        break;
 80097b4:	bf00      	nop
  }

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	20000000 	.word	0x20000000
 80097c4:	165e9f81 	.word	0x165e9f81

080097c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d101      	bne.n	80097da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e041      	b.n	800985e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d106      	bne.n	80097f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f839 	bl	8009866 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2202      	movs	r2, #2
 80097f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3304      	adds	r3, #4
 8009804:	4619      	mov	r1, r3
 8009806:	4610      	mov	r0, r2
 8009808:	f000 f9c0 	bl	8009b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009866:	b480      	push	{r7}
 8009868:	b083      	sub	sp, #12
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800986e:	bf00      	nop
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
	...

0800987c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b01      	cmp	r3, #1
 800988e:	d001      	beq.n	8009894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e04e      	b.n	8009932 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2202      	movs	r2, #2
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68da      	ldr	r2, [r3, #12]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f042 0201 	orr.w	r2, r2, #1
 80098aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a23      	ldr	r2, [pc, #140]	@ (8009940 <HAL_TIM_Base_Start_IT+0xc4>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d022      	beq.n	80098fc <HAL_TIM_Base_Start_IT+0x80>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098be:	d01d      	beq.n	80098fc <HAL_TIM_Base_Start_IT+0x80>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a1f      	ldr	r2, [pc, #124]	@ (8009944 <HAL_TIM_Base_Start_IT+0xc8>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d018      	beq.n	80098fc <HAL_TIM_Base_Start_IT+0x80>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a1e      	ldr	r2, [pc, #120]	@ (8009948 <HAL_TIM_Base_Start_IT+0xcc>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d013      	beq.n	80098fc <HAL_TIM_Base_Start_IT+0x80>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a1c      	ldr	r2, [pc, #112]	@ (800994c <HAL_TIM_Base_Start_IT+0xd0>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d00e      	beq.n	80098fc <HAL_TIM_Base_Start_IT+0x80>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a1b      	ldr	r2, [pc, #108]	@ (8009950 <HAL_TIM_Base_Start_IT+0xd4>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d009      	beq.n	80098fc <HAL_TIM_Base_Start_IT+0x80>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a19      	ldr	r2, [pc, #100]	@ (8009954 <HAL_TIM_Base_Start_IT+0xd8>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d004      	beq.n	80098fc <HAL_TIM_Base_Start_IT+0x80>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a18      	ldr	r2, [pc, #96]	@ (8009958 <HAL_TIM_Base_Start_IT+0xdc>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d111      	bne.n	8009920 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f003 0307 	and.w	r3, r3, #7
 8009906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b06      	cmp	r3, #6
 800990c:	d010      	beq.n	8009930 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f042 0201 	orr.w	r2, r2, #1
 800991c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800991e:	e007      	b.n	8009930 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f042 0201 	orr.w	r2, r2, #1
 800992e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	40010000 	.word	0x40010000
 8009944:	40000400 	.word	0x40000400
 8009948:	40000800 	.word	0x40000800
 800994c:	40000c00 	.word	0x40000c00
 8009950:	40010400 	.word	0x40010400
 8009954:	40014000 	.word	0x40014000
 8009958:	40001800 	.word	0x40001800

0800995c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d020      	beq.n	80099c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f003 0302 	and.w	r3, r3, #2
 8009984:	2b00      	cmp	r3, #0
 8009986:	d01b      	beq.n	80099c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f06f 0202 	mvn.w	r2, #2
 8009990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	f003 0303 	and.w	r3, r3, #3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f8d2 	bl	8009b50 <HAL_TIM_IC_CaptureCallback>
 80099ac:	e005      	b.n	80099ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f8c4 	bl	8009b3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f8d5 	bl	8009b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f003 0304 	and.w	r3, r3, #4
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d020      	beq.n	8009a0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f003 0304 	and.w	r3, r3, #4
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d01b      	beq.n	8009a0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f06f 0204 	mvn.w	r2, #4
 80099dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2202      	movs	r2, #2
 80099e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f8ac 	bl	8009b50 <HAL_TIM_IC_CaptureCallback>
 80099f8:	e005      	b.n	8009a06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f89e 	bl	8009b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f8af 	bl	8009b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	f003 0308 	and.w	r3, r3, #8
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d020      	beq.n	8009a58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f003 0308 	and.w	r3, r3, #8
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01b      	beq.n	8009a58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f06f 0208 	mvn.w	r2, #8
 8009a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2204      	movs	r2, #4
 8009a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	f003 0303 	and.w	r3, r3, #3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f886 	bl	8009b50 <HAL_TIM_IC_CaptureCallback>
 8009a44:	e005      	b.n	8009a52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f878 	bl	8009b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f889 	bl	8009b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	f003 0310 	and.w	r3, r3, #16
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d020      	beq.n	8009aa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f003 0310 	and.w	r3, r3, #16
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d01b      	beq.n	8009aa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f06f 0210 	mvn.w	r2, #16
 8009a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2208      	movs	r2, #8
 8009a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f860 	bl	8009b50 <HAL_TIM_IC_CaptureCallback>
 8009a90:	e005      	b.n	8009a9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f852 	bl	8009b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f863 	bl	8009b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00c      	beq.n	8009ac8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f003 0301 	and.w	r3, r3, #1
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d007      	beq.n	8009ac8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f06f 0201 	mvn.w	r2, #1
 8009ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7f9 ff54 	bl	8003970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00c      	beq.n	8009aec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f900 	bl	8009cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00c      	beq.n	8009b10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d007      	beq.n	8009b10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f834 	bl	8009b78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00c      	beq.n	8009b34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f003 0320 	and.w	r3, r3, #32
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d007      	beq.n	8009b34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f06f 0220 	mvn.w	r2, #32
 8009b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f8d2 	bl	8009cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b34:	bf00      	nop
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a43      	ldr	r2, [pc, #268]	@ (8009cac <TIM_Base_SetConfig+0x120>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d013      	beq.n	8009bcc <TIM_Base_SetConfig+0x40>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009baa:	d00f      	beq.n	8009bcc <TIM_Base_SetConfig+0x40>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a40      	ldr	r2, [pc, #256]	@ (8009cb0 <TIM_Base_SetConfig+0x124>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d00b      	beq.n	8009bcc <TIM_Base_SetConfig+0x40>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a3f      	ldr	r2, [pc, #252]	@ (8009cb4 <TIM_Base_SetConfig+0x128>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d007      	beq.n	8009bcc <TIM_Base_SetConfig+0x40>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a3e      	ldr	r2, [pc, #248]	@ (8009cb8 <TIM_Base_SetConfig+0x12c>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d003      	beq.n	8009bcc <TIM_Base_SetConfig+0x40>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a3d      	ldr	r2, [pc, #244]	@ (8009cbc <TIM_Base_SetConfig+0x130>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d108      	bne.n	8009bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a32      	ldr	r2, [pc, #200]	@ (8009cac <TIM_Base_SetConfig+0x120>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d02b      	beq.n	8009c3e <TIM_Base_SetConfig+0xb2>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bec:	d027      	beq.n	8009c3e <TIM_Base_SetConfig+0xb2>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8009cb0 <TIM_Base_SetConfig+0x124>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d023      	beq.n	8009c3e <TIM_Base_SetConfig+0xb2>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8009cb4 <TIM_Base_SetConfig+0x128>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d01f      	beq.n	8009c3e <TIM_Base_SetConfig+0xb2>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a2d      	ldr	r2, [pc, #180]	@ (8009cb8 <TIM_Base_SetConfig+0x12c>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d01b      	beq.n	8009c3e <TIM_Base_SetConfig+0xb2>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a2c      	ldr	r2, [pc, #176]	@ (8009cbc <TIM_Base_SetConfig+0x130>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d017      	beq.n	8009c3e <TIM_Base_SetConfig+0xb2>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a2b      	ldr	r2, [pc, #172]	@ (8009cc0 <TIM_Base_SetConfig+0x134>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d013      	beq.n	8009c3e <TIM_Base_SetConfig+0xb2>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a2a      	ldr	r2, [pc, #168]	@ (8009cc4 <TIM_Base_SetConfig+0x138>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d00f      	beq.n	8009c3e <TIM_Base_SetConfig+0xb2>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a29      	ldr	r2, [pc, #164]	@ (8009cc8 <TIM_Base_SetConfig+0x13c>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d00b      	beq.n	8009c3e <TIM_Base_SetConfig+0xb2>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a28      	ldr	r2, [pc, #160]	@ (8009ccc <TIM_Base_SetConfig+0x140>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d007      	beq.n	8009c3e <TIM_Base_SetConfig+0xb2>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a27      	ldr	r2, [pc, #156]	@ (8009cd0 <TIM_Base_SetConfig+0x144>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d003      	beq.n	8009c3e <TIM_Base_SetConfig+0xb2>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a26      	ldr	r2, [pc, #152]	@ (8009cd4 <TIM_Base_SetConfig+0x148>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d108      	bne.n	8009c50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	689a      	ldr	r2, [r3, #8]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a0e      	ldr	r2, [pc, #56]	@ (8009cac <TIM_Base_SetConfig+0x120>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d003      	beq.n	8009c7e <TIM_Base_SetConfig+0xf2>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a10      	ldr	r2, [pc, #64]	@ (8009cbc <TIM_Base_SetConfig+0x130>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d103      	bne.n	8009c86 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	691a      	ldr	r2, [r3, #16]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f043 0204 	orr.w	r2, r3, #4
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	601a      	str	r2, [r3, #0]
}
 8009c9e:	bf00      	nop
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	40010000 	.word	0x40010000
 8009cb0:	40000400 	.word	0x40000400
 8009cb4:	40000800 	.word	0x40000800
 8009cb8:	40000c00 	.word	0x40000c00
 8009cbc:	40010400 	.word	0x40010400
 8009cc0:	40014000 	.word	0x40014000
 8009cc4:	40014400 	.word	0x40014400
 8009cc8:	40014800 	.word	0x40014800
 8009ccc:	40001800 	.word	0x40001800
 8009cd0:	40001c00 	.word	0x40001c00
 8009cd4:	40002000 	.word	0x40002000

08009cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009d00:	b084      	sub	sp, #16
 8009d02:	b480      	push	{r7}
 8009d04:	b085      	sub	sp, #20
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	f107 001c 	add.w	r0, r7, #28
 8009d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009d16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009d18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009d1a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009d1e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009d22:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009d26:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009d2a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8009d3a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	431a      	orrs	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	b004      	add	sp, #16
 8009d54:	4770      	bx	lr

08009d56 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b083      	sub	sp, #12
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009d92:	b480      	push	{r7}
 8009d94:	b083      	sub	sp, #12
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2203      	movs	r2, #3
 8009d9e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009dae:	b480      	push	{r7}
 8009db0:	b083      	sub	sp, #12
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 0303 	and.w	r3, r3, #3
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b085      	sub	sp, #20
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009de8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009dee:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009df4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009e04:	f023 030f 	bic.w	r3, r3, #15
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b083      	sub	sp, #12
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	b2db      	uxtb	r3, r3
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	3314      	adds	r3, #20
 8009e46:	461a      	mov	r2, r3
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
}  
 8009e52:	4618      	mov	r0, r3
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b085      	sub	sp, #20
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e84:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009e8a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009e90:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e9c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009ea8:	2300      	movs	r3, #0

}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b088      	sub	sp, #32
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ec8:	2340      	movs	r3, #64	@ 0x40
 8009eca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ed0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ed4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ed6:	f107 0308 	add.w	r3, r7, #8
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7ff ff74 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ee6:	2110      	movs	r1, #16
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f9d7 	bl	800a29c <SDMMC_GetCmdResp1>
 8009eee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ef0:	69fb      	ldr	r3, [r7, #28]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3720      	adds	r7, #32
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b088      	sub	sp, #32
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009f08:	2311      	movs	r3, #17
 8009f0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f0c:	2340      	movs	r3, #64	@ 0x40
 8009f0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f10:	2300      	movs	r3, #0
 8009f12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f1a:	f107 0308 	add.w	r3, r7, #8
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff ff52 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f2a:	2111      	movs	r1, #17
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f9b5 	bl	800a29c <SDMMC_GetCmdResp1>
 8009f32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f34:	69fb      	ldr	r3, [r7, #28]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3720      	adds	r7, #32
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b088      	sub	sp, #32
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009f4c:	2312      	movs	r3, #18
 8009f4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f50:	2340      	movs	r3, #64	@ 0x40
 8009f52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f54:	2300      	movs	r3, #0
 8009f56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f5e:	f107 0308 	add.w	r3, r7, #8
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff ff30 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f6e:	2112      	movs	r1, #18
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f993 	bl	800a29c <SDMMC_GetCmdResp1>
 8009f76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f78:	69fb      	ldr	r3, [r7, #28]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3720      	adds	r7, #32
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b088      	sub	sp, #32
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009f90:	2318      	movs	r3, #24
 8009f92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f94:	2340      	movs	r3, #64	@ 0x40
 8009f96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fa0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fa2:	f107 0308 	add.w	r3, r7, #8
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7ff ff0e 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fb2:	2118      	movs	r1, #24
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 f971 	bl	800a29c <SDMMC_GetCmdResp1>
 8009fba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fbc:	69fb      	ldr	r3, [r7, #28]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3720      	adds	r7, #32
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b088      	sub	sp, #32
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009fd4:	2319      	movs	r3, #25
 8009fd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fd8:	2340      	movs	r3, #64	@ 0x40
 8009fda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fe4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fe6:	f107 0308 	add.w	r3, r7, #8
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff feec 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ff6:	2119      	movs	r1, #25
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f94f 	bl	800a29c <SDMMC_GetCmdResp1>
 8009ffe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a000:	69fb      	ldr	r3, [r7, #28]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3720      	adds	r7, #32
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b088      	sub	sp, #32
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a014:	2300      	movs	r3, #0
 800a016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a018:	230c      	movs	r3, #12
 800a01a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a01c:	2340      	movs	r3, #64	@ 0x40
 800a01e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a020:	2300      	movs	r3, #0
 800a022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a024:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a028:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a02a:	f107 0308 	add.w	r3, r7, #8
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff feca 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a036:	4a05      	ldr	r2, [pc, #20]	@ (800a04c <SDMMC_CmdStopTransfer+0x40>)
 800a038:	210c      	movs	r1, #12
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f92e 	bl	800a29c <SDMMC_GetCmdResp1>
 800a040:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a042:	69fb      	ldr	r3, [r7, #28]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3720      	adds	r7, #32
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	05f5e100 	.word	0x05f5e100

0800a050 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08a      	sub	sp, #40	@ 0x28
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a060:	2307      	movs	r3, #7
 800a062:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a064:	2340      	movs	r3, #64	@ 0x40
 800a066:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a068:	2300      	movs	r3, #0
 800a06a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a06c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a070:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a072:	f107 0310 	add.w	r3, r7, #16
 800a076:	4619      	mov	r1, r3
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f7ff fea6 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a07e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a082:	2107      	movs	r1, #7
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 f909 	bl	800a29c <SDMMC_GetCmdResp1>
 800a08a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3728      	adds	r7, #40	@ 0x28
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b088      	sub	sp, #32
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0b4:	f107 0308 	add.w	r3, r7, #8
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff fe85 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fb23 	bl	800a70c <SDMMC_GetCmdError>
 800a0c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0c8:	69fb      	ldr	r3, [r7, #28]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b088      	sub	sp, #32
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a0da:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a0de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a0e0:	2308      	movs	r3, #8
 800a0e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0e4:	2340      	movs	r3, #64	@ 0x40
 800a0e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0f2:	f107 0308 	add.w	r3, r7, #8
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7ff fe66 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fab6 	bl	800a670 <SDMMC_GetCmdResp7>
 800a104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a106:	69fb      	ldr	r3, [r7, #28]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3720      	adds	r7, #32
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b088      	sub	sp, #32
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a11e:	2337      	movs	r3, #55	@ 0x37
 800a120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a122:	2340      	movs	r3, #64	@ 0x40
 800a124:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a126:	2300      	movs	r3, #0
 800a128:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a12a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a12e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a130:	f107 0308 	add.w	r3, r7, #8
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7ff fe47 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a13c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a140:	2137      	movs	r1, #55	@ 0x37
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f8aa 	bl	800a29c <SDMMC_GetCmdResp1>
 800a148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a14a:	69fb      	ldr	r3, [r7, #28]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3720      	adds	r7, #32
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a164:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a16a:	2329      	movs	r3, #41	@ 0x29
 800a16c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a16e:	2340      	movs	r3, #64	@ 0x40
 800a170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a172:	2300      	movs	r3, #0
 800a174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a17a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a17c:	f107 0308 	add.w	r3, r7, #8
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7ff fe21 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f9bd 	bl	800a508 <SDMMC_GetCmdResp3>
 800a18e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a190:	69fb      	ldr	r3, [r7, #28]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3720      	adds	r7, #32
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b088      	sub	sp, #32
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a1aa:	23c0      	movs	r3, #192	@ 0xc0
 800a1ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1b8:	f107 0308 	add.w	r3, r7, #8
 800a1bc:	4619      	mov	r1, r3
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7ff fe03 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f957 	bl	800a478 <SDMMC_GetCmdResp2>
 800a1ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1cc:	69fb      	ldr	r3, [r7, #28]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3720      	adds	r7, #32
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b088      	sub	sp, #32
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a1e4:	2309      	movs	r3, #9
 800a1e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a1e8:	23c0      	movs	r3, #192	@ 0xc0
 800a1ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1f6:	f107 0308 	add.w	r3, r7, #8
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7ff fde4 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f938 	bl	800a478 <SDMMC_GetCmdResp2>
 800a208:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a20a:	69fb      	ldr	r3, [r7, #28]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3720      	adds	r7, #32
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b088      	sub	sp, #32
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a21e:	2300      	movs	r3, #0
 800a220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a222:	2303      	movs	r3, #3
 800a224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a226:	2340      	movs	r3, #64	@ 0x40
 800a228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a22e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a232:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a234:	f107 0308 	add.w	r3, r7, #8
 800a238:	4619      	mov	r1, r3
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7ff fdc5 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	2103      	movs	r1, #3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f99d 	bl	800a584 <SDMMC_GetCmdResp6>
 800a24a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a24c:	69fb      	ldr	r3, [r7, #28]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3720      	adds	r7, #32
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b088      	sub	sp, #32
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a264:	230d      	movs	r3, #13
 800a266:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a268:	2340      	movs	r3, #64	@ 0x40
 800a26a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a26c:	2300      	movs	r3, #0
 800a26e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a274:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a276:	f107 0308 	add.w	r3, r7, #8
 800a27a:	4619      	mov	r1, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7ff fda4 	bl	8009dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a282:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a286:	210d      	movs	r1, #13
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f807 	bl	800a29c <SDMMC_GetCmdResp1>
 800a28e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a290:	69fb      	ldr	r3, [r7, #28]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3720      	adds	r7, #32
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b088      	sub	sp, #32
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	607a      	str	r2, [r7, #4]
 800a2a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a2aa:	4b70      	ldr	r3, [pc, #448]	@ (800a46c <SDMMC_GetCmdResp1+0x1d0>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a70      	ldr	r2, [pc, #448]	@ (800a470 <SDMMC_GetCmdResp1+0x1d4>)
 800a2b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b4:	0a5a      	lsrs	r2, r3, #9
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	fb02 f303 	mul.w	r3, r2, r3
 800a2bc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	1e5a      	subs	r2, r3, #1
 800a2c2:	61fa      	str	r2, [r7, #28]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d102      	bne.n	800a2ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a2cc:	e0c9      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2d2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0ef      	beq.n	800a2be <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1ea      	bne.n	800a2be <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2ec:	f003 0304 	and.w	r3, r3, #4
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d004      	beq.n	800a2fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2204      	movs	r2, #4
 800a2f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2fa:	2304      	movs	r3, #4
 800a2fc:	e0b1      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a302:	f003 0301 	and.w	r3, r3, #1
 800a306:	2b00      	cmp	r3, #0
 800a308:	d004      	beq.n	800a314 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2201      	movs	r2, #1
 800a30e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a310:	2301      	movs	r3, #1
 800a312:	e0a6      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	22c5      	movs	r2, #197	@ 0xc5
 800a318:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f7ff fd7f 	bl	8009e1e <SDIO_GetCommandResponse>
 800a320:	4603      	mov	r3, r0
 800a322:	461a      	mov	r2, r3
 800a324:	7afb      	ldrb	r3, [r7, #11]
 800a326:	4293      	cmp	r3, r2
 800a328:	d001      	beq.n	800a32e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e099      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a32e:	2100      	movs	r1, #0
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f7ff fd81 	bl	8009e38 <SDIO_GetResponse>
 800a336:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a338:	697a      	ldr	r2, [r7, #20]
 800a33a:	4b4e      	ldr	r3, [pc, #312]	@ (800a474 <SDMMC_GetCmdResp1+0x1d8>)
 800a33c:	4013      	ands	r3, r2
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a342:	2300      	movs	r3, #0
 800a344:	e08d      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	da02      	bge.n	800a352 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a34c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a350:	e087      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a35c:	2340      	movs	r3, #64	@ 0x40
 800a35e:	e080      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a36a:	2380      	movs	r3, #128	@ 0x80
 800a36c:	e079      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a374:	2b00      	cmp	r3, #0
 800a376:	d002      	beq.n	800a37e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a378:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a37c:	e071      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a388:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a38c:	e069      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a398:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a39c:	e061      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a3a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a3ac:	e059      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3bc:	e051      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a3c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a3cc:	e049      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a3d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a3dc:	e041      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a3e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3ec:	e039      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a3f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a3fc:	e031      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a408:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a40c:	e029      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a418:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a41c:	e021      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a428:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a42c:	e019      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a438:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a43c:	e011      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a448:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a44c:	e009      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f003 0308 	and.w	r3, r3, #8
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a458:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a45c:	e001      	b.n	800a462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a45e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a462:	4618      	mov	r0, r3
 800a464:	3720      	adds	r7, #32
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	20000000 	.word	0x20000000
 800a470:	10624dd3 	.word	0x10624dd3
 800a474:	fdffe008 	.word	0xfdffe008

0800a478 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a480:	4b1f      	ldr	r3, [pc, #124]	@ (800a500 <SDMMC_GetCmdResp2+0x88>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a1f      	ldr	r2, [pc, #124]	@ (800a504 <SDMMC_GetCmdResp2+0x8c>)
 800a486:	fba2 2303 	umull	r2, r3, r2, r3
 800a48a:	0a5b      	lsrs	r3, r3, #9
 800a48c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a490:	fb02 f303 	mul.w	r3, r2, r3
 800a494:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	1e5a      	subs	r2, r3, #1
 800a49a:	60fa      	str	r2, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4a4:	e026      	b.n	800a4f4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d0ef      	beq.n	800a496 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1ea      	bne.n	800a496 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d004      	beq.n	800a4d6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2204      	movs	r2, #4
 800a4d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4d2:	2304      	movs	r3, #4
 800a4d4:	e00e      	b.n	800a4f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d004      	beq.n	800a4ec <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e003      	b.n	800a4f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	22c5      	movs	r2, #197	@ 0xc5
 800a4f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	20000000 	.word	0x20000000
 800a504:	10624dd3 	.word	0x10624dd3

0800a508 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a510:	4b1a      	ldr	r3, [pc, #104]	@ (800a57c <SDMMC_GetCmdResp3+0x74>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a1a      	ldr	r2, [pc, #104]	@ (800a580 <SDMMC_GetCmdResp3+0x78>)
 800a516:	fba2 2303 	umull	r2, r3, r2, r3
 800a51a:	0a5b      	lsrs	r3, r3, #9
 800a51c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a520:	fb02 f303 	mul.w	r3, r2, r3
 800a524:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	1e5a      	subs	r2, r3, #1
 800a52a:	60fa      	str	r2, [r7, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d102      	bne.n	800a536 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a530:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a534:	e01b      	b.n	800a56e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a53a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0ef      	beq.n	800a526 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1ea      	bne.n	800a526 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a554:	f003 0304 	and.w	r3, r3, #4
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d004      	beq.n	800a566 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2204      	movs	r2, #4
 800a560:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a562:	2304      	movs	r3, #4
 800a564:	e003      	b.n	800a56e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	22c5      	movs	r2, #197	@ 0xc5
 800a56a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	20000000 	.word	0x20000000
 800a580:	10624dd3 	.word	0x10624dd3

0800a584 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b088      	sub	sp, #32
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	460b      	mov	r3, r1
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a592:	4b35      	ldr	r3, [pc, #212]	@ (800a668 <SDMMC_GetCmdResp6+0xe4>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a35      	ldr	r2, [pc, #212]	@ (800a66c <SDMMC_GetCmdResp6+0xe8>)
 800a598:	fba2 2303 	umull	r2, r3, r2, r3
 800a59c:	0a5b      	lsrs	r3, r3, #9
 800a59e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5a2:	fb02 f303 	mul.w	r3, r2, r3
 800a5a6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	1e5a      	subs	r2, r3, #1
 800a5ac:	61fa      	str	r2, [r7, #28]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d102      	bne.n	800a5b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a5b6:	e052      	b.n	800a65e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5bc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d0ef      	beq.n	800a5a8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1ea      	bne.n	800a5a8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5d6:	f003 0304 	and.w	r3, r3, #4
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d004      	beq.n	800a5e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	e03a      	b.n	800a65e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ec:	f003 0301 	and.w	r3, r3, #1
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d004      	beq.n	800a5fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e02f      	b.n	800a65e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f7ff fc0d 	bl	8009e1e <SDIO_GetCommandResponse>
 800a604:	4603      	mov	r3, r0
 800a606:	461a      	mov	r2, r3
 800a608:	7afb      	ldrb	r3, [r7, #11]
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d001      	beq.n	800a612 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a60e:	2301      	movs	r3, #1
 800a610:	e025      	b.n	800a65e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	22c5      	movs	r2, #197	@ 0xc5
 800a616:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a618:	2100      	movs	r1, #0
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f7ff fc0c 	bl	8009e38 <SDIO_GetResponse>
 800a620:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d106      	bne.n	800a63a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	0c1b      	lsrs	r3, r3, #16
 800a630:	b29a      	uxth	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a636:	2300      	movs	r3, #0
 800a638:	e011      	b.n	800a65e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a644:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a648:	e009      	b.n	800a65e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a658:	e001      	b.n	800a65e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a65a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3720      	adds	r7, #32
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20000000 	.word	0x20000000
 800a66c:	10624dd3 	.word	0x10624dd3

0800a670 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a678:	4b22      	ldr	r3, [pc, #136]	@ (800a704 <SDMMC_GetCmdResp7+0x94>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a22      	ldr	r2, [pc, #136]	@ (800a708 <SDMMC_GetCmdResp7+0x98>)
 800a67e:	fba2 2303 	umull	r2, r3, r2, r3
 800a682:	0a5b      	lsrs	r3, r3, #9
 800a684:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a688:	fb02 f303 	mul.w	r3, r2, r3
 800a68c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	1e5a      	subs	r2, r3, #1
 800a692:	60fa      	str	r2, [r7, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d102      	bne.n	800a69e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a698:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a69c:	e02c      	b.n	800a6f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0ef      	beq.n	800a68e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d1ea      	bne.n	800a68e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d004      	beq.n	800a6ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2204      	movs	r2, #4
 800a6c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6ca:	2304      	movs	r3, #4
 800a6cc:	e014      	b.n	800a6f8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d004      	beq.n	800a6e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e009      	b.n	800a6f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2240      	movs	r2, #64	@ 0x40
 800a6f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a6f6:	2300      	movs	r3, #0
  
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	20000000 	.word	0x20000000
 800a708:	10624dd3 	.word	0x10624dd3

0800a70c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a714:	4b11      	ldr	r3, [pc, #68]	@ (800a75c <SDMMC_GetCmdError+0x50>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a11      	ldr	r2, [pc, #68]	@ (800a760 <SDMMC_GetCmdError+0x54>)
 800a71a:	fba2 2303 	umull	r2, r3, r2, r3
 800a71e:	0a5b      	lsrs	r3, r3, #9
 800a720:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a724:	fb02 f303 	mul.w	r3, r2, r3
 800a728:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	1e5a      	subs	r2, r3, #1
 800a72e:	60fa      	str	r2, [r7, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a734:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a738:	e009      	b.n	800a74e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a73e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a742:	2b00      	cmp	r3, #0
 800a744:	d0f1      	beq.n	800a72a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	22c5      	movs	r2, #197	@ 0xc5
 800a74a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3714      	adds	r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	20000000 	.word	0x20000000
 800a760:	10624dd3 	.word	0x10624dd3

0800a764 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a768:	4904      	ldr	r1, [pc, #16]	@ (800a77c <MX_FATFS_Init+0x18>)
 800a76a:	4805      	ldr	r0, [pc, #20]	@ (800a780 <MX_FATFS_Init+0x1c>)
 800a76c:	f004 fe14 	bl	800f398 <FATFS_LinkDriver>
 800a770:	4603      	mov	r3, r0
 800a772:	461a      	mov	r2, r3
 800a774:	4b03      	ldr	r3, [pc, #12]	@ (800a784 <MX_FATFS_Init+0x20>)
 800a776:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a778:	bf00      	nop
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	20000ee0 	.word	0x20000ee0
 800a780:	08016360 	.word	0x08016360
 800a784:	20000edc 	.word	0x20000edc

0800a788 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a788:	b480      	push	{r7}
 800a78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a78c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a78e:	4618      	mov	r0, r3
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a7a2:	f000 f888 	bl	800a8b6 <BSP_SD_IsDetected>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d001      	beq.n	800a7b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e005      	b.n	800a7bc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a7b0:	4804      	ldr	r0, [pc, #16]	@ (800a7c4 <BSP_SD_Init+0x2c>)
 800a7b2:	f7fc fff9 	bl	80077a8 <HAL_SD_Init>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	20000cf0 	.word	0x20000cf0

0800a7c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	68f9      	ldr	r1, [r7, #12]
 800a7de:	4806      	ldr	r0, [pc, #24]	@ (800a7f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a7e0:	f7fd f88a 	bl	80078f8 <HAL_SD_ReadBlocks_DMA>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	20000cf0 	.word	0x20000cf0

0800a7fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	68f9      	ldr	r1, [r7, #12]
 800a812:	4806      	ldr	r0, [pc, #24]	@ (800a82c <BSP_SD_WriteBlocks_DMA+0x30>)
 800a814:	f7fd f950 	bl	8007ab8 <HAL_SD_WriteBlocks_DMA>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d001      	beq.n	800a822 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a822:	7dfb      	ldrb	r3, [r7, #23]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	20000cf0 	.word	0x20000cf0

0800a830 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a834:	4805      	ldr	r0, [pc, #20]	@ (800a84c <BSP_SD_GetCardState+0x1c>)
 800a836:	f7fd fd71 	bl	800831c <HAL_SD_GetCardState>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	bf14      	ite	ne
 800a840:	2301      	movne	r3, #1
 800a842:	2300      	moveq	r3, #0
 800a844:	b2db      	uxtb	r3, r3
}
 800a846:	4618      	mov	r0, r3
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	20000cf0 	.word	0x20000cf0

0800a850 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a858:	6879      	ldr	r1, [r7, #4]
 800a85a:	4803      	ldr	r0, [pc, #12]	@ (800a868 <BSP_SD_GetCardInfo+0x18>)
 800a85c:	f7fd fd32 	bl	80082c4 <HAL_SD_GetCardInfo>
}
 800a860:	bf00      	nop
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	20000cf0 	.word	0x20000cf0

0800a86c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a874:	f000 f818 	bl	800a8a8 <BSP_SD_AbortCallback>
}
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a888:	f000 f9c4 	bl	800ac14 <BSP_SD_WriteCpltCallback>
}
 800a88c:	bf00      	nop
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a89c:	f000 f9c8 	bl	800ac30 <BSP_SD_ReadCpltCallback>
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	af00      	add	r7, sp, #0

}
 800a8ac:	bf00      	nop
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a8c0:	f000 f80c 	bl	800a8dc <BSP_PlatformIsDetected>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d101      	bne.n	800a8ce <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a8ce:	79fb      	ldrb	r3, [r7, #7]
 800a8d0:	b2db      	uxtb	r3, r3
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a8e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a8ea:	4806      	ldr	r0, [pc, #24]	@ (800a904 <BSP_PlatformIsDetected+0x28>)
 800a8ec:	f7fa fc64 	bl	80051b8 <HAL_GPIO_ReadPin>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a8fa:	79fb      	ldrb	r3, [r7, #7]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	40020400 	.word	0x40020400

0800a908 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800a910:	f004 fea0 	bl	800f654 <osKernelSysTick>
 800a914:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800a916:	e006      	b.n	800a926 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a918:	f7ff ff8a 	bl	800a830 <BSP_SD_GetCardState>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a922:	2300      	movs	r3, #0
 800a924:	e009      	b.n	800a93a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800a926:	f004 fe95 	bl	800f654 <osKernelSysTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	429a      	cmp	r2, r3
 800a934:	d8f0      	bhi.n	800a918 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
	...

0800a944 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a94e:	4b0b      	ldr	r3, [pc, #44]	@ (800a97c <SD_CheckStatus+0x38>)
 800a950:	2201      	movs	r2, #1
 800a952:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a954:	f7ff ff6c 	bl	800a830 <BSP_SD_GetCardState>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d107      	bne.n	800a96e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a95e:	4b07      	ldr	r3, [pc, #28]	@ (800a97c <SD_CheckStatus+0x38>)
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f023 0301 	bic.w	r3, r3, #1
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	4b04      	ldr	r3, [pc, #16]	@ (800a97c <SD_CheckStatus+0x38>)
 800a96c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a96e:	4b03      	ldr	r3, [pc, #12]	@ (800a97c <SD_CheckStatus+0x38>)
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	b2db      	uxtb	r3, r3
}
 800a974:	4618      	mov	r0, r3
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	20000009 	.word	0x20000009

0800a980 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a980:	b590      	push	{r4, r7, lr}
 800a982:	b087      	sub	sp, #28
 800a984:	af00      	add	r7, sp, #0
 800a986:	4603      	mov	r3, r0
 800a988:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a98a:	4b20      	ldr	r3, [pc, #128]	@ (800aa0c <SD_initialize+0x8c>)
 800a98c:	2201      	movs	r2, #1
 800a98e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800a990:	f004 fe54 	bl	800f63c <osKernelRunning>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d030      	beq.n	800a9fc <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a99a:	f7ff fefd 	bl	800a798 <BSP_SD_Init>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d107      	bne.n	800a9b4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a9a4:	79fb      	ldrb	r3, [r7, #7]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7ff ffcc 	bl	800a944 <SD_CheckStatus>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4b16      	ldr	r3, [pc, #88]	@ (800aa0c <SD_initialize+0x8c>)
 800a9b2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a9b4:	4b15      	ldr	r3, [pc, #84]	@ (800aa0c <SD_initialize+0x8c>)
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d01e      	beq.n	800a9fc <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800a9be:	4b14      	ldr	r3, [pc, #80]	@ (800aa10 <SD_initialize+0x90>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10e      	bne.n	800a9e4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800a9c6:	4b13      	ldr	r3, [pc, #76]	@ (800aa14 <SD_initialize+0x94>)
 800a9c8:	f107 0408 	add.w	r4, r7, #8
 800a9cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a9ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800a9d2:	f107 0308 	add.w	r3, r7, #8
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f004 ff5a 	bl	800f892 <osMessageCreate>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	4a0b      	ldr	r2, [pc, #44]	@ (800aa10 <SD_initialize+0x90>)
 800a9e2:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800a9e4:	4b0a      	ldr	r3, [pc, #40]	@ (800aa10 <SD_initialize+0x90>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d107      	bne.n	800a9fc <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800a9ec:	4b07      	ldr	r3, [pc, #28]	@ (800aa0c <SD_initialize+0x8c>)
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	f043 0301 	orr.w	r3, r3, #1
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	4b04      	ldr	r3, [pc, #16]	@ (800aa0c <SD_initialize+0x8c>)
 800a9fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a9fc:	4b03      	ldr	r3, [pc, #12]	@ (800aa0c <SD_initialize+0x8c>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	b2db      	uxtb	r3, r3
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	371c      	adds	r7, #28
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd90      	pop	{r4, r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20000009 	.word	0x20000009
 800aa10:	20000ee4 	.word	0x20000ee4
 800aa14:	080162d4 	.word	0x080162d4

0800aa18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800aa22:	79fb      	ldrb	r3, [r7, #7]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7ff ff8d 	bl	800a944 <SD_CheckStatus>
 800aa2a:	4603      	mov	r3, r0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08a      	sub	sp, #40	@ 0x28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60b9      	str	r1, [r7, #8]
 800aa3c:	607a      	str	r2, [r7, #4]
 800aa3e:	603b      	str	r3, [r7, #0]
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa4a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800aa4e:	f7ff ff5b 	bl	800a908 <SD_CheckStatusWithTimeout>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	da02      	bge.n	800aa5e <SD_read+0x2a>
  {
    return res;
 800aa58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa5c:	e032      	b.n	800aac4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	6879      	ldr	r1, [r7, #4]
 800aa62:	68b8      	ldr	r0, [r7, #8]
 800aa64:	f7ff feb0 	bl	800a7c8 <BSP_SD_ReadBlocks_DMA>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800aa6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d124      	bne.n	800aac0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800aa76:	4b15      	ldr	r3, [pc, #84]	@ (800aacc <SD_read+0x98>)
 800aa78:	6819      	ldr	r1, [r3, #0]
 800aa7a:	f107 0314 	add.w	r3, r7, #20
 800aa7e:	f247 5230 	movw	r2, #30000	@ 0x7530
 800aa82:	4618      	mov	r0, r3
 800aa84:	f004 ff6e 	bl	800f964 <osMessageGet>

    if (event.status == osEventMessage)
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2b10      	cmp	r3, #16
 800aa8c:	d118      	bne.n	800aac0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d115      	bne.n	800aac0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800aa94:	f004 fdde 	bl	800f654 <osKernelSysTick>
 800aa98:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800aa9a:	e008      	b.n	800aaae <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aa9c:	f7ff fec8 	bl	800a830 <BSP_SD_GetCardState>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d103      	bne.n	800aaae <SD_read+0x7a>
              {
                res = RES_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800aaac:	e008      	b.n	800aac0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800aaae:	f004 fdd1 	bl	800f654 <osKernelSysTick>
 800aab2:	4602      	mov	r2, r0
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d9ed      	bls.n	800aa9c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800aac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3728      	adds	r7, #40	@ 0x28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	20000ee4 	.word	0x20000ee4

0800aad0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b08a      	sub	sp, #40	@ 0x28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60b9      	str	r1, [r7, #8]
 800aad8:	607a      	str	r2, [r7, #4]
 800aada:	603b      	str	r3, [r7, #0]
 800aadc:	4603      	mov	r3, r0
 800aade:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aae6:	f247 5030 	movw	r0, #30000	@ 0x7530
 800aaea:	f7ff ff0d 	bl	800a908 <SD_CheckStatusWithTimeout>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	da02      	bge.n	800aafa <SD_write+0x2a>
  {
    return res;
 800aaf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aaf8:	e02e      	b.n	800ab58 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	6879      	ldr	r1, [r7, #4]
 800aafe:	68b8      	ldr	r0, [r7, #8]
 800ab00:	f7ff fe7c 	bl	800a7fc <BSP_SD_WriteBlocks_DMA>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d124      	bne.n	800ab54 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ab0a:	4b15      	ldr	r3, [pc, #84]	@ (800ab60 <SD_write+0x90>)
 800ab0c:	6819      	ldr	r1, [r3, #0]
 800ab0e:	f107 0314 	add.w	r3, r7, #20
 800ab12:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ab16:	4618      	mov	r0, r3
 800ab18:	f004 ff24 	bl	800f964 <osMessageGet>

    if (event.status == osEventMessage)
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	2b10      	cmp	r3, #16
 800ab20:	d118      	bne.n	800ab54 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d115      	bne.n	800ab54 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800ab28:	f004 fd94 	bl	800f654 <osKernelSysTick>
 800ab2c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ab2e:	e008      	b.n	800ab42 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab30:	f7ff fe7e 	bl	800a830 <BSP_SD_GetCardState>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d103      	bne.n	800ab42 <SD_write+0x72>
          {
            res = RES_OK;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ab40:	e008      	b.n	800ab54 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ab42:	f004 fd87 	bl	800f654 <osKernelSysTick>
 800ab46:	4602      	mov	r2, r0
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d9ed      	bls.n	800ab30 <SD_write+0x60>
        res = RES_OK;
    }

#endif

  return res;
 800ab54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3728      	adds	r7, #40	@ 0x28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20000ee4 	.word	0x20000ee4

0800ab64 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08c      	sub	sp, #48	@ 0x30
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	603a      	str	r2, [r7, #0]
 800ab6e:	71fb      	strb	r3, [r7, #7]
 800ab70:	460b      	mov	r3, r1
 800ab72:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ab7a:	4b25      	ldr	r3, [pc, #148]	@ (800ac10 <SD_ioctl+0xac>)
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	f003 0301 	and.w	r3, r3, #1
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <SD_ioctl+0x28>
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e03c      	b.n	800ac06 <SD_ioctl+0xa2>

  switch (cmd)
 800ab8c:	79bb      	ldrb	r3, [r7, #6]
 800ab8e:	2b03      	cmp	r3, #3
 800ab90:	d834      	bhi.n	800abfc <SD_ioctl+0x98>
 800ab92:	a201      	add	r2, pc, #4	@ (adr r2, 800ab98 <SD_ioctl+0x34>)
 800ab94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab98:	0800aba9 	.word	0x0800aba9
 800ab9c:	0800abb1 	.word	0x0800abb1
 800aba0:	0800abc9 	.word	0x0800abc9
 800aba4:	0800abe3 	.word	0x0800abe3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800abae:	e028      	b.n	800ac02 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800abb0:	f107 030c 	add.w	r3, r7, #12
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7ff fe4b 	bl	800a850 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800abba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800abc6:	e01c      	b.n	800ac02 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800abc8:	f107 030c 	add.w	r3, r7, #12
 800abcc:	4618      	mov	r0, r3
 800abce:	f7ff fe3f 	bl	800a850 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800abd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800abe0:	e00f      	b.n	800ac02 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800abe2:	f107 030c 	add.w	r3, r7, #12
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7ff fe32 	bl	800a850 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800abec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abee:	0a5a      	lsrs	r2, r3, #9
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800abfa:	e002      	b.n	800ac02 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800abfc:	2304      	movs	r3, #4
 800abfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800ac02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3730      	adds	r7, #48	@ 0x30
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	20000009 	.word	0x20000009

0800ac14 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800ac18:	4b04      	ldr	r3, [pc, #16]	@ (800ac2c <BSP_SD_WriteCpltCallback+0x18>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2102      	movs	r1, #2
 800ac20:	4618      	mov	r0, r3
 800ac22:	f004 fe5f 	bl	800f8e4 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800ac26:	bf00      	nop
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	20000ee4 	.word	0x20000ee4

0800ac30 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ac34:	4b04      	ldr	r3, [pc, #16]	@ (800ac48 <BSP_SD_ReadCpltCallback+0x18>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f004 fe51 	bl	800f8e4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800ac42:	bf00      	nop
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	20000ee4 	.word	0x20000ee4

0800ac4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ac56:	79fb      	ldrb	r3, [r7, #7]
 800ac58:	4a08      	ldr	r2, [pc, #32]	@ (800ac7c <disk_status+0x30>)
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	79fa      	ldrb	r2, [r7, #7]
 800ac64:	4905      	ldr	r1, [pc, #20]	@ (800ac7c <disk_status+0x30>)
 800ac66:	440a      	add	r2, r1
 800ac68:	7a12      	ldrb	r2, [r2, #8]
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	4798      	blx	r3
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	20000f10 	.word	0x20000f10

0800ac80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	4603      	mov	r3, r0
 800ac88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ac8e:	79fb      	ldrb	r3, [r7, #7]
 800ac90:	4a0e      	ldr	r2, [pc, #56]	@ (800accc <disk_initialize+0x4c>)
 800ac92:	5cd3      	ldrb	r3, [r2, r3]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d114      	bne.n	800acc2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ac98:	79fb      	ldrb	r3, [r7, #7]
 800ac9a:	4a0c      	ldr	r2, [pc, #48]	@ (800accc <disk_initialize+0x4c>)
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4413      	add	r3, r2
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	79fa      	ldrb	r2, [r7, #7]
 800aca6:	4909      	ldr	r1, [pc, #36]	@ (800accc <disk_initialize+0x4c>)
 800aca8:	440a      	add	r2, r1
 800acaa:	7a12      	ldrb	r2, [r2, #8]
 800acac:	4610      	mov	r0, r2
 800acae:	4798      	blx	r3
 800acb0:	4603      	mov	r3, r0
 800acb2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800acb4:	7bfb      	ldrb	r3, [r7, #15]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d103      	bne.n	800acc2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800acba:	79fb      	ldrb	r3, [r7, #7]
 800acbc:	4a03      	ldr	r2, [pc, #12]	@ (800accc <disk_initialize+0x4c>)
 800acbe:	2101      	movs	r1, #1
 800acc0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20000f10 	.word	0x20000f10

0800acd0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800acd0:	b590      	push	{r4, r7, lr}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60b9      	str	r1, [r7, #8]
 800acd8:	607a      	str	r2, [r7, #4]
 800acda:	603b      	str	r3, [r7, #0]
 800acdc:	4603      	mov	r3, r0
 800acde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	4a0a      	ldr	r2, [pc, #40]	@ (800ad0c <disk_read+0x3c>)
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4413      	add	r3, r2
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	689c      	ldr	r4, [r3, #8]
 800acec:	7bfb      	ldrb	r3, [r7, #15]
 800acee:	4a07      	ldr	r2, [pc, #28]	@ (800ad0c <disk_read+0x3c>)
 800acf0:	4413      	add	r3, r2
 800acf2:	7a18      	ldrb	r0, [r3, #8]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	47a0      	blx	r4
 800acfc:	4603      	mov	r3, r0
 800acfe:	75fb      	strb	r3, [r7, #23]
  return res;
 800ad00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	371c      	adds	r7, #28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd90      	pop	{r4, r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20000f10 	.word	0x20000f10

0800ad10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ad10:	b590      	push	{r4, r7, lr}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60b9      	str	r1, [r7, #8]
 800ad18:	607a      	str	r2, [r7, #4]
 800ad1a:	603b      	str	r3, [r7, #0]
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
 800ad22:	4a0a      	ldr	r2, [pc, #40]	@ (800ad4c <disk_write+0x3c>)
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	68dc      	ldr	r4, [r3, #12]
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
 800ad2e:	4a07      	ldr	r2, [pc, #28]	@ (800ad4c <disk_write+0x3c>)
 800ad30:	4413      	add	r3, r2
 800ad32:	7a18      	ldrb	r0, [r3, #8]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	68b9      	ldr	r1, [r7, #8]
 800ad3a:	47a0      	blx	r4
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ad40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	371c      	adds	r7, #28
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd90      	pop	{r4, r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20000f10 	.word	0x20000f10

0800ad50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	4603      	mov	r3, r0
 800ad58:	603a      	str	r2, [r7, #0]
 800ad5a:	71fb      	strb	r3, [r7, #7]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ad60:	79fb      	ldrb	r3, [r7, #7]
 800ad62:	4a09      	ldr	r2, [pc, #36]	@ (800ad88 <disk_ioctl+0x38>)
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4413      	add	r3, r2
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	79fa      	ldrb	r2, [r7, #7]
 800ad6e:	4906      	ldr	r1, [pc, #24]	@ (800ad88 <disk_ioctl+0x38>)
 800ad70:	440a      	add	r2, r1
 800ad72:	7a10      	ldrb	r0, [r2, #8]
 800ad74:	79b9      	ldrb	r1, [r7, #6]
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	4798      	blx	r3
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	73fb      	strb	r3, [r7, #15]
  return res;
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	20000f10 	.word	0x20000f10

0800ad8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3301      	adds	r3, #1
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ad9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ada0:	021b      	lsls	r3, r3, #8
 800ada2:	b21a      	sxth	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	b21b      	sxth	r3, r3
 800adaa:	4313      	orrs	r3, r2
 800adac:	b21b      	sxth	r3, r3
 800adae:	81fb      	strh	r3, [r7, #14]
	return rv;
 800adb0:	89fb      	ldrh	r3, [r7, #14]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800adbe:	b480      	push	{r7}
 800adc0:	b085      	sub	sp, #20
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3303      	adds	r3, #3
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	021b      	lsls	r3, r3, #8
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	3202      	adds	r2, #2
 800add6:	7812      	ldrb	r2, [r2, #0]
 800add8:	4313      	orrs	r3, r2
 800adda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	021b      	lsls	r3, r3, #8
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	3201      	adds	r2, #1
 800ade4:	7812      	ldrb	r2, [r2, #0]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	021b      	lsls	r3, r3, #8
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	7812      	ldrb	r2, [r2, #0]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	60fb      	str	r3, [r7, #12]
	return rv;
 800adf6:	68fb      	ldr	r3, [r7, #12]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800ae04:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ae08:	b09d      	sub	sp, #116	@ 0x74
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800ae0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae10:	3307      	adds	r3, #7
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2200      	movs	r2, #0
 800ae18:	469a      	mov	sl, r3
 800ae1a:	4693      	mov	fp, r2
 800ae1c:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800ae20:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800ae24:	f04f 0000 	mov.w	r0, #0
 800ae28:	f04f 0100 	mov.w	r1, #0
 800ae2c:	0219      	lsls	r1, r3, #8
 800ae2e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ae32:	0210      	lsls	r0, r2, #8
 800ae34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae36:	3306      	adds	r3, #6
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	461c      	mov	r4, r3
 800ae40:	4615      	mov	r5, r2
 800ae42:	ea40 0804 	orr.w	r8, r0, r4
 800ae46:	ea41 0905 	orr.w	r9, r1, r5
 800ae4a:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800ae4e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800ae52:	f04f 0000 	mov.w	r0, #0
 800ae56:	f04f 0100 	mov.w	r1, #0
 800ae5a:	0219      	lsls	r1, r3, #8
 800ae5c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ae60:	0210      	lsls	r0, r2, #8
 800ae62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae64:	3305      	adds	r3, #5
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae6e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800ae70:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800ae74:	4623      	mov	r3, r4
 800ae76:	4303      	orrs	r3, r0
 800ae78:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae7a:	462b      	mov	r3, r5
 800ae7c:	430b      	orrs	r3, r1
 800ae7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae80:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800ae84:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800ae88:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800ae8c:	f04f 0000 	mov.w	r0, #0
 800ae90:	f04f 0100 	mov.w	r1, #0
 800ae94:	0219      	lsls	r1, r3, #8
 800ae96:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ae9a:	0210      	lsls	r0, r2, #8
 800ae9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae9e:	3304      	adds	r3, #4
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2200      	movs	r2, #0
 800aea6:	653b      	str	r3, [r7, #80]	@ 0x50
 800aea8:	657a      	str	r2, [r7, #84]	@ 0x54
 800aeaa:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800aeae:	4623      	mov	r3, r4
 800aeb0:	4303      	orrs	r3, r0
 800aeb2:	623b      	str	r3, [r7, #32]
 800aeb4:	462b      	mov	r3, r5
 800aeb6:	430b      	orrs	r3, r1
 800aeb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800aebe:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800aec2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800aec6:	f04f 0000 	mov.w	r0, #0
 800aeca:	f04f 0100 	mov.w	r1, #0
 800aece:	0219      	lsls	r1, r3, #8
 800aed0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aed4:	0210      	lsls	r0, r2, #8
 800aed6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aed8:	3303      	adds	r3, #3
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	2200      	movs	r2, #0
 800aee0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aee2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800aee4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800aee8:	4623      	mov	r3, r4
 800aeea:	4303      	orrs	r3, r0
 800aeec:	61bb      	str	r3, [r7, #24]
 800aeee:	462b      	mov	r3, r5
 800aef0:	430b      	orrs	r3, r1
 800aef2:	61fb      	str	r3, [r7, #28]
 800aef4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800aef8:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800aefc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800af00:	f04f 0000 	mov.w	r0, #0
 800af04:	f04f 0100 	mov.w	r1, #0
 800af08:	0219      	lsls	r1, r3, #8
 800af0a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800af0e:	0210      	lsls	r0, r2, #8
 800af10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af12:	3302      	adds	r3, #2
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2200      	movs	r2, #0
 800af1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800af1c:	647a      	str	r2, [r7, #68]	@ 0x44
 800af1e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800af22:	4623      	mov	r3, r4
 800af24:	4303      	orrs	r3, r0
 800af26:	613b      	str	r3, [r7, #16]
 800af28:	462b      	mov	r3, r5
 800af2a:	430b      	orrs	r3, r1
 800af2c:	617b      	str	r3, [r7, #20]
 800af2e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800af32:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800af36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800af3a:	f04f 0200 	mov.w	r2, #0
 800af3e:	f04f 0300 	mov.w	r3, #0
 800af42:	020b      	lsls	r3, r1, #8
 800af44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af48:	0202      	lsls	r2, r0, #8
 800af4a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800af4c:	3101      	adds	r1, #1
 800af4e:	7809      	ldrb	r1, [r1, #0]
 800af50:	b2c9      	uxtb	r1, r1
 800af52:	2000      	movs	r0, #0
 800af54:	63b9      	str	r1, [r7, #56]	@ 0x38
 800af56:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800af58:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800af5c:	4621      	mov	r1, r4
 800af5e:	4311      	orrs	r1, r2
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	4629      	mov	r1, r5
 800af64:	4319      	orrs	r1, r3
 800af66:	60f9      	str	r1, [r7, #12]
 800af68:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800af6c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800af70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800af74:	f04f 0200 	mov.w	r2, #0
 800af78:	f04f 0300 	mov.w	r3, #0
 800af7c:	020b      	lsls	r3, r1, #8
 800af7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af82:	0202      	lsls	r2, r0, #8
 800af84:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800af86:	7809      	ldrb	r1, [r1, #0]
 800af88:	b2c9      	uxtb	r1, r1
 800af8a:	2000      	movs	r0, #0
 800af8c:	6339      	str	r1, [r7, #48]	@ 0x30
 800af8e:	6378      	str	r0, [r7, #52]	@ 0x34
 800af90:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800af94:	4621      	mov	r1, r4
 800af96:	4311      	orrs	r1, r2
 800af98:	6039      	str	r1, [r7, #0]
 800af9a:	4629      	mov	r1, r5
 800af9c:	4319      	orrs	r1, r3
 800af9e:	6079      	str	r1, [r7, #4]
 800afa0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800afa4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800afa8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800afac:	4610      	mov	r0, r2
 800afae:	4619      	mov	r1, r3
 800afb0:	3774      	adds	r7, #116	@ 0x74
 800afb2:	46bd      	mov	sp, r7
 800afb4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800afb8:	4770      	bx	lr

0800afba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800afba:	b480      	push	{r7}
 800afbc:	b083      	sub	sp, #12
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	460b      	mov	r3, r1
 800afc4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	1c5a      	adds	r2, r3, #1
 800afca:	607a      	str	r2, [r7, #4]
 800afcc:	887a      	ldrh	r2, [r7, #2]
 800afce:	b2d2      	uxtb	r2, r2
 800afd0:	701a      	strb	r2, [r3, #0]
 800afd2:	887b      	ldrh	r3, [r7, #2]
 800afd4:	0a1b      	lsrs	r3, r3, #8
 800afd6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	607a      	str	r2, [r7, #4]
 800afde:	887a      	ldrh	r2, [r7, #2]
 800afe0:	b2d2      	uxtb	r2, r2
 800afe2:	701a      	strb	r2, [r3, #0]
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	1c5a      	adds	r2, r3, #1
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	b2d2      	uxtb	r2, r2
 800b004:	701a      	strb	r2, [r3, #0]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	0a1b      	lsrs	r3, r3, #8
 800b00a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	1c5a      	adds	r2, r3, #1
 800b010:	607a      	str	r2, [r7, #4]
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	b2d2      	uxtb	r2, r2
 800b016:	701a      	strb	r2, [r3, #0]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	0a1b      	lsrs	r3, r3, #8
 800b01c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	1c5a      	adds	r2, r3, #1
 800b022:	607a      	str	r2, [r7, #4]
 800b024:	683a      	ldr	r2, [r7, #0]
 800b026:	b2d2      	uxtb	r2, r2
 800b028:	701a      	strb	r2, [r3, #0]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	0a1b      	lsrs	r3, r3, #8
 800b02e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	1c5a      	adds	r2, r3, #1
 800b034:	607a      	str	r2, [r7, #4]
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	b2d2      	uxtb	r2, r2
 800b03a:	701a      	strb	r2, [r3, #0]
}
 800b03c:	bf00      	nop
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	60fa      	str	r2, [r7, #12]
 800b05a:	783a      	ldrb	r2, [r7, #0]
 800b05c:	701a      	strb	r2, [r3, #0]
 800b05e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b062:	f04f 0200 	mov.w	r2, #0
 800b066:	f04f 0300 	mov.w	r3, #0
 800b06a:	0a02      	lsrs	r2, r0, #8
 800b06c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b070:	0a0b      	lsrs	r3, r1, #8
 800b072:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	1c5a      	adds	r2, r3, #1
 800b07a:	60fa      	str	r2, [r7, #12]
 800b07c:	783a      	ldrb	r2, [r7, #0]
 800b07e:	701a      	strb	r2, [r3, #0]
 800b080:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b084:	f04f 0200 	mov.w	r2, #0
 800b088:	f04f 0300 	mov.w	r3, #0
 800b08c:	0a02      	lsrs	r2, r0, #8
 800b08e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b092:	0a0b      	lsrs	r3, r1, #8
 800b094:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	1c5a      	adds	r2, r3, #1
 800b09c:	60fa      	str	r2, [r7, #12]
 800b09e:	783a      	ldrb	r2, [r7, #0]
 800b0a0:	701a      	strb	r2, [r3, #0]
 800b0a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0a6:	f04f 0200 	mov.w	r2, #0
 800b0aa:	f04f 0300 	mov.w	r3, #0
 800b0ae:	0a02      	lsrs	r2, r0, #8
 800b0b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b0b4:	0a0b      	lsrs	r3, r1, #8
 800b0b6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	1c5a      	adds	r2, r3, #1
 800b0be:	60fa      	str	r2, [r7, #12]
 800b0c0:	783a      	ldrb	r2, [r7, #0]
 800b0c2:	701a      	strb	r2, [r3, #0]
 800b0c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0c8:	f04f 0200 	mov.w	r2, #0
 800b0cc:	f04f 0300 	mov.w	r3, #0
 800b0d0:	0a02      	lsrs	r2, r0, #8
 800b0d2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b0d6:	0a0b      	lsrs	r3, r1, #8
 800b0d8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	60fa      	str	r2, [r7, #12]
 800b0e2:	783a      	ldrb	r2, [r7, #0]
 800b0e4:	701a      	strb	r2, [r3, #0]
 800b0e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0ea:	f04f 0200 	mov.w	r2, #0
 800b0ee:	f04f 0300 	mov.w	r3, #0
 800b0f2:	0a02      	lsrs	r2, r0, #8
 800b0f4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b0f8:	0a0b      	lsrs	r3, r1, #8
 800b0fa:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	1c5a      	adds	r2, r3, #1
 800b102:	60fa      	str	r2, [r7, #12]
 800b104:	783a      	ldrb	r2, [r7, #0]
 800b106:	701a      	strb	r2, [r3, #0]
 800b108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b10c:	f04f 0200 	mov.w	r2, #0
 800b110:	f04f 0300 	mov.w	r3, #0
 800b114:	0a02      	lsrs	r2, r0, #8
 800b116:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b11a:	0a0b      	lsrs	r3, r1, #8
 800b11c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	60fa      	str	r2, [r7, #12]
 800b126:	783a      	ldrb	r2, [r7, #0]
 800b128:	701a      	strb	r2, [r3, #0]
 800b12a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b12e:	f04f 0200 	mov.w	r2, #0
 800b132:	f04f 0300 	mov.w	r3, #0
 800b136:	0a02      	lsrs	r2, r0, #8
 800b138:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b13c:	0a0b      	lsrs	r3, r1, #8
 800b13e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	1c5a      	adds	r2, r3, #1
 800b146:	60fa      	str	r2, [r7, #12]
 800b148:	783a      	ldrb	r2, [r7, #0]
 800b14a:	701a      	strb	r2, [r3, #0]
}
 800b14c:	bf00      	nop
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b158:	b480      	push	{r7}
 800b15a:	b087      	sub	sp, #28
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00d      	beq.n	800b18e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	1c53      	adds	r3, r2, #1
 800b176:	613b      	str	r3, [r7, #16]
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	1c59      	adds	r1, r3, #1
 800b17c:	6179      	str	r1, [r7, #20]
 800b17e:	7812      	ldrb	r2, [r2, #0]
 800b180:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	3b01      	subs	r3, #1
 800b186:	607b      	str	r3, [r7, #4]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1f1      	bne.n	800b172 <mem_cpy+0x1a>
	}
}
 800b18e:	bf00      	nop
 800b190:	371c      	adds	r7, #28
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b19a:	b480      	push	{r7}
 800b19c:	b087      	sub	sp, #28
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	60f8      	str	r0, [r7, #12]
 800b1a2:	60b9      	str	r1, [r7, #8]
 800b1a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	1c5a      	adds	r2, r3, #1
 800b1ae:	617a      	str	r2, [r7, #20]
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	b2d2      	uxtb	r2, r2
 800b1b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	607b      	str	r3, [r7, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d1f3      	bne.n	800b1aa <mem_set+0x10>
}
 800b1c2:	bf00      	nop
 800b1c4:	bf00      	nop
 800b1c6:	371c      	adds	r7, #28
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b1d0:	b480      	push	{r7}
 800b1d2:	b089      	sub	sp, #36	@ 0x24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	61fb      	str	r3, [r7, #28]
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	61fa      	str	r2, [r7, #28]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	61ba      	str	r2, [r7, #24]
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	1acb      	subs	r3, r1, r3
 800b1fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	3b01      	subs	r3, #1
 800b202:	607b      	str	r3, [r7, #4]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d002      	beq.n	800b210 <mem_cmp+0x40>
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d0eb      	beq.n	800b1e8 <mem_cmp+0x18>

	return r;
 800b210:	697b      	ldr	r3, [r7, #20]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3724      	adds	r7, #36	@ 0x24
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b21e:	b480      	push	{r7}
 800b220:	b083      	sub	sp, #12
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b228:	e002      	b.n	800b230 <chk_chr+0x12>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3301      	adds	r3, #1
 800b22e:	607b      	str	r3, [r7, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d005      	beq.n	800b244 <chk_chr+0x26>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	461a      	mov	r2, r3
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	4293      	cmp	r3, r2
 800b242:	d1f2      	bne.n	800b22a <chk_chr+0xc>
	return *str;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	781b      	ldrb	r3, [r3, #0]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d009      	beq.n	800b276 <lock_fs+0x22>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	695b      	ldr	r3, [r3, #20]
 800b266:	4618      	mov	r0, r3
 800b268:	f004 f997 	bl	800f59a <ff_req_grant>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d001      	beq.n	800b276 <lock_fs+0x22>
 800b272:	2301      	movs	r3, #1
 800b274:	e000      	b.n	800b278 <lock_fs+0x24>
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	460b      	mov	r3, r1
 800b28a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00d      	beq.n	800b2ae <unlock_fs+0x2e>
 800b292:	78fb      	ldrb	r3, [r7, #3]
 800b294:	2b0c      	cmp	r3, #12
 800b296:	d00a      	beq.n	800b2ae <unlock_fs+0x2e>
 800b298:	78fb      	ldrb	r3, [r7, #3]
 800b29a:	2b0b      	cmp	r3, #11
 800b29c:	d007      	beq.n	800b2ae <unlock_fs+0x2e>
 800b29e:	78fb      	ldrb	r3, [r7, #3]
 800b2a0:	2b0f      	cmp	r3, #15
 800b2a2:	d004      	beq.n	800b2ae <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	695b      	ldr	r3, [r3, #20]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f004 f98b 	bl	800f5c4 <ff_rel_grant>
	}
}
 800b2ae:	bf00      	nop
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60bb      	str	r3, [r7, #8]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	60fb      	str	r3, [r7, #12]
 800b2ca:	e029      	b.n	800b320 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b2cc:	4a27      	ldr	r2, [pc, #156]	@ (800b36c <chk_lock+0xb4>)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	011b      	lsls	r3, r3, #4
 800b2d2:	4413      	add	r3, r2
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d01d      	beq.n	800b316 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b2da:	4a24      	ldr	r2, [pc, #144]	@ (800b36c <chk_lock+0xb4>)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	011b      	lsls	r3, r3, #4
 800b2e0:	4413      	add	r3, r2
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d116      	bne.n	800b31a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b2ec:	4a1f      	ldr	r2, [pc, #124]	@ (800b36c <chk_lock+0xb4>)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	011b      	lsls	r3, r3, #4
 800b2f2:	4413      	add	r3, r2
 800b2f4:	3304      	adds	r3, #4
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d10c      	bne.n	800b31a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b300:	4a1a      	ldr	r2, [pc, #104]	@ (800b36c <chk_lock+0xb4>)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	011b      	lsls	r3, r3, #4
 800b306:	4413      	add	r3, r2
 800b308:	3308      	adds	r3, #8
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800b310:	429a      	cmp	r2, r3
 800b312:	d102      	bne.n	800b31a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b314:	e007      	b.n	800b326 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b316:	2301      	movs	r3, #1
 800b318:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	3301      	adds	r3, #1
 800b31e:	60fb      	str	r3, [r7, #12]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d9d2      	bls.n	800b2cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d109      	bne.n	800b340 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d102      	bne.n	800b338 <chk_lock+0x80>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	2b02      	cmp	r3, #2
 800b336:	d101      	bne.n	800b33c <chk_lock+0x84>
 800b338:	2300      	movs	r3, #0
 800b33a:	e010      	b.n	800b35e <chk_lock+0xa6>
 800b33c:	2312      	movs	r3, #18
 800b33e:	e00e      	b.n	800b35e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d108      	bne.n	800b358 <chk_lock+0xa0>
 800b346:	4a09      	ldr	r2, [pc, #36]	@ (800b36c <chk_lock+0xb4>)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	011b      	lsls	r3, r3, #4
 800b34c:	4413      	add	r3, r2
 800b34e:	330c      	adds	r3, #12
 800b350:	881b      	ldrh	r3, [r3, #0]
 800b352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b356:	d101      	bne.n	800b35c <chk_lock+0xa4>
 800b358:	2310      	movs	r3, #16
 800b35a:	e000      	b.n	800b35e <chk_lock+0xa6>
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	20000ef0 	.word	0x20000ef0

0800b370 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b376:	2300      	movs	r3, #0
 800b378:	607b      	str	r3, [r7, #4]
 800b37a:	e002      	b.n	800b382 <enq_lock+0x12>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	3301      	adds	r3, #1
 800b380:	607b      	str	r3, [r7, #4]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d806      	bhi.n	800b396 <enq_lock+0x26>
 800b388:	4a09      	ldr	r2, [pc, #36]	@ (800b3b0 <enq_lock+0x40>)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	011b      	lsls	r3, r3, #4
 800b38e:	4413      	add	r3, r2
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1f2      	bne.n	800b37c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b02      	cmp	r3, #2
 800b39a:	bf14      	ite	ne
 800b39c:	2301      	movne	r3, #1
 800b39e:	2300      	moveq	r3, #0
 800b3a0:	b2db      	uxtb	r3, r3
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	20000ef0 	.word	0x20000ef0

0800b3b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60fb      	str	r3, [r7, #12]
 800b3c2:	e01f      	b.n	800b404 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b3c4:	4a41      	ldr	r2, [pc, #260]	@ (800b4cc <inc_lock+0x118>)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	011b      	lsls	r3, r3, #4
 800b3ca:	4413      	add	r3, r2
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d113      	bne.n	800b3fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b3d6:	4a3d      	ldr	r2, [pc, #244]	@ (800b4cc <inc_lock+0x118>)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	011b      	lsls	r3, r3, #4
 800b3dc:	4413      	add	r3, r2
 800b3de:	3304      	adds	r3, #4
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d109      	bne.n	800b3fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b3ea:	4a38      	ldr	r2, [pc, #224]	@ (800b4cc <inc_lock+0x118>)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	011b      	lsls	r3, r3, #4
 800b3f0:	4413      	add	r3, r2
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d006      	beq.n	800b40c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3301      	adds	r3, #1
 800b402:	60fb      	str	r3, [r7, #12]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d9dc      	bls.n	800b3c4 <inc_lock+0x10>
 800b40a:	e000      	b.n	800b40e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b40c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2b02      	cmp	r3, #2
 800b412:	d132      	bne.n	800b47a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b414:	2300      	movs	r3, #0
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	e002      	b.n	800b420 <inc_lock+0x6c>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	3301      	adds	r3, #1
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d806      	bhi.n	800b434 <inc_lock+0x80>
 800b426:	4a29      	ldr	r2, [pc, #164]	@ (800b4cc <inc_lock+0x118>)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	011b      	lsls	r3, r3, #4
 800b42c:	4413      	add	r3, r2
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1f2      	bne.n	800b41a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b02      	cmp	r3, #2
 800b438:	d101      	bne.n	800b43e <inc_lock+0x8a>
 800b43a:	2300      	movs	r3, #0
 800b43c:	e040      	b.n	800b4c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	4922      	ldr	r1, [pc, #136]	@ (800b4cc <inc_lock+0x118>)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	011b      	lsls	r3, r3, #4
 800b448:	440b      	add	r3, r1
 800b44a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	689a      	ldr	r2, [r3, #8]
 800b450:	491e      	ldr	r1, [pc, #120]	@ (800b4cc <inc_lock+0x118>)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	011b      	lsls	r3, r3, #4
 800b456:	440b      	add	r3, r1
 800b458:	3304      	adds	r3, #4
 800b45a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b460:	491a      	ldr	r1, [pc, #104]	@ (800b4cc <inc_lock+0x118>)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	011b      	lsls	r3, r3, #4
 800b466:	440b      	add	r3, r1
 800b468:	3308      	adds	r3, #8
 800b46a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b46c:	4a17      	ldr	r2, [pc, #92]	@ (800b4cc <inc_lock+0x118>)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	011b      	lsls	r3, r3, #4
 800b472:	4413      	add	r3, r2
 800b474:	330c      	adds	r3, #12
 800b476:	2200      	movs	r2, #0
 800b478:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d009      	beq.n	800b494 <inc_lock+0xe0>
 800b480:	4a12      	ldr	r2, [pc, #72]	@ (800b4cc <inc_lock+0x118>)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	011b      	lsls	r3, r3, #4
 800b486:	4413      	add	r3, r2
 800b488:	330c      	adds	r3, #12
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <inc_lock+0xe0>
 800b490:	2300      	movs	r3, #0
 800b492:	e015      	b.n	800b4c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d108      	bne.n	800b4ac <inc_lock+0xf8>
 800b49a:	4a0c      	ldr	r2, [pc, #48]	@ (800b4cc <inc_lock+0x118>)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	011b      	lsls	r3, r3, #4
 800b4a0:	4413      	add	r3, r2
 800b4a2:	330c      	adds	r3, #12
 800b4a4:	881b      	ldrh	r3, [r3, #0]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	e001      	b.n	800b4b0 <inc_lock+0xfc>
 800b4ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b4b0:	4906      	ldr	r1, [pc, #24]	@ (800b4cc <inc_lock+0x118>)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	011b      	lsls	r3, r3, #4
 800b4b6:	440b      	add	r3, r1
 800b4b8:	330c      	adds	r3, #12
 800b4ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3301      	adds	r3, #1
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	20000ef0 	.word	0x20000ef0

0800b4d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	607b      	str	r3, [r7, #4]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d825      	bhi.n	800b530 <dec_lock+0x60>
		n = Files[i].ctr;
 800b4e4:	4a17      	ldr	r2, [pc, #92]	@ (800b544 <dec_lock+0x74>)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	011b      	lsls	r3, r3, #4
 800b4ea:	4413      	add	r3, r2
 800b4ec:	330c      	adds	r3, #12
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b4f2:	89fb      	ldrh	r3, [r7, #14]
 800b4f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4f8:	d101      	bne.n	800b4fe <dec_lock+0x2e>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b4fe:	89fb      	ldrh	r3, [r7, #14]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <dec_lock+0x3a>
 800b504:	89fb      	ldrh	r3, [r7, #14]
 800b506:	3b01      	subs	r3, #1
 800b508:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b50a:	4a0e      	ldr	r2, [pc, #56]	@ (800b544 <dec_lock+0x74>)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	011b      	lsls	r3, r3, #4
 800b510:	4413      	add	r3, r2
 800b512:	330c      	adds	r3, #12
 800b514:	89fa      	ldrh	r2, [r7, #14]
 800b516:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b518:	89fb      	ldrh	r3, [r7, #14]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d105      	bne.n	800b52a <dec_lock+0x5a>
 800b51e:	4a09      	ldr	r2, [pc, #36]	@ (800b544 <dec_lock+0x74>)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	011b      	lsls	r3, r3, #4
 800b524:	4413      	add	r3, r2
 800b526:	2200      	movs	r2, #0
 800b528:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b52a:	2300      	movs	r3, #0
 800b52c:	737b      	strb	r3, [r7, #13]
 800b52e:	e001      	b.n	800b534 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b530:	2302      	movs	r3, #2
 800b532:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b534:	7b7b      	ldrb	r3, [r7, #13]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3714      	adds	r7, #20
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	20000ef0 	.word	0x20000ef0

0800b548 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b550:	2300      	movs	r3, #0
 800b552:	60fb      	str	r3, [r7, #12]
 800b554:	e010      	b.n	800b578 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b556:	4a0d      	ldr	r2, [pc, #52]	@ (800b58c <clear_lock+0x44>)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	011b      	lsls	r3, r3, #4
 800b55c:	4413      	add	r3, r2
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	429a      	cmp	r2, r3
 800b564:	d105      	bne.n	800b572 <clear_lock+0x2a>
 800b566:	4a09      	ldr	r2, [pc, #36]	@ (800b58c <clear_lock+0x44>)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	011b      	lsls	r3, r3, #4
 800b56c:	4413      	add	r3, r2
 800b56e:	2200      	movs	r2, #0
 800b570:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	3301      	adds	r3, #1
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d9eb      	bls.n	800b556 <clear_lock+0xe>
	}
}
 800b57e:	bf00      	nop
 800b580:	bf00      	nop
 800b582:	3714      	adds	r7, #20
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	20000ef0 	.word	0x20000ef0

0800b590 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	78db      	ldrb	r3, [r3, #3]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d034      	beq.n	800b60e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	7858      	ldrb	r0, [r3, #1]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	697a      	ldr	r2, [r7, #20]
 800b5b8:	f7ff fbaa 	bl	800ad10 <disk_write>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	73fb      	strb	r3, [r7, #15]
 800b5c6:	e022      	b.n	800b60e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d2:	697a      	ldr	r2, [r7, #20]
 800b5d4:	1ad2      	subs	r2, r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d217      	bcs.n	800b60e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	789b      	ldrb	r3, [r3, #2]
 800b5e2:	613b      	str	r3, [r7, #16]
 800b5e4:	e010      	b.n	800b608 <sync_window+0x78>
					wsect += fs->fsize;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	7858      	ldrb	r0, [r3, #1]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	f7ff fb87 	bl	800ad10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	3b01      	subs	r3, #1
 800b606:	613b      	str	r3, [r7, #16]
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d8eb      	bhi.n	800b5e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3718      	adds	r7, #24
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b622:	2300      	movs	r3, #0
 800b624:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d01b      	beq.n	800b668 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f7ff ffad 	bl	800b590 <sync_window>
 800b636:	4603      	mov	r3, r0
 800b638:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d113      	bne.n	800b668 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	7858      	ldrb	r0, [r3, #1]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b64a:	2301      	movs	r3, #1
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	f7ff fb3f 	bl	800acd0 <disk_read>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d004      	beq.n	800b662 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b658:	f04f 33ff 	mov.w	r3, #4294967295
 800b65c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b65e:	2301      	movs	r3, #1
 800b660:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800b668:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
	...

0800b674 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7ff ff87 	bl	800b590 <sync_window>
 800b682:	4603      	mov	r3, r0
 800b684:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b686:	7bfb      	ldrb	r3, [r7, #15]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d158      	bne.n	800b73e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b03      	cmp	r3, #3
 800b692:	d148      	bne.n	800b726 <sync_fs+0xb2>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	791b      	ldrb	r3, [r3, #4]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d144      	bne.n	800b726 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	333c      	adds	r3, #60	@ 0x3c
 800b6a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7ff fd77 	bl	800b19a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	333c      	adds	r3, #60	@ 0x3c
 800b6b0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b6b4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff fc7e 	bl	800afba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	333c      	adds	r3, #60	@ 0x3c
 800b6c2:	4921      	ldr	r1, [pc, #132]	@ (800b748 <sync_fs+0xd4>)
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff fc93 	bl	800aff0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	333c      	adds	r3, #60	@ 0x3c
 800b6ce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b6d2:	491e      	ldr	r1, [pc, #120]	@ (800b74c <sync_fs+0xd8>)
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7ff fc8b 	bl	800aff0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	333c      	adds	r3, #60	@ 0x3c
 800b6de:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	69db      	ldr	r3, [r3, #28]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	4610      	mov	r0, r2
 800b6ea:	f7ff fc81 	bl	800aff0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	333c      	adds	r3, #60	@ 0x3c
 800b6f2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	f7ff fc77 	bl	800aff0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	7858      	ldrb	r0, [r3, #1]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b71a:	2301      	movs	r3, #1
 800b71c:	f7ff faf8 	bl	800ad10 <disk_write>
			fs->fsi_flag = 0;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	785b      	ldrb	r3, [r3, #1]
 800b72a:	2200      	movs	r2, #0
 800b72c:	2100      	movs	r1, #0
 800b72e:	4618      	mov	r0, r3
 800b730:	f7ff fb0e 	bl	800ad50 <disk_ioctl>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <sync_fs+0xca>
 800b73a:	2301      	movs	r3, #1
 800b73c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	41615252 	.word	0x41615252
 800b74c:	61417272 	.word	0x61417272

0800b750 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	3b02      	subs	r3, #2
 800b75e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6a1b      	ldr	r3, [r3, #32]
 800b764:	3b02      	subs	r3, #2
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d301      	bcc.n	800b770 <clust2sect+0x20>
 800b76c:	2300      	movs	r3, #0
 800b76e:	e008      	b.n	800b782 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	895b      	ldrh	r3, [r3, #10]
 800b774:	461a      	mov	r2, r3
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	fb03 f202 	mul.w	r2, r3, r2
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b780:	4413      	add	r3, r2
}
 800b782:	4618      	mov	r0, r3
 800b784:	370c      	adds	r7, #12
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
	...

0800b790 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b088      	sub	sp, #32
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b79a:	6879      	ldr	r1, [r7, #4]
 800b79c:	6809      	ldr	r1, [r1, #0]
 800b79e:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	2901      	cmp	r1, #1
 800b7a4:	d904      	bls.n	800b7b0 <get_fat+0x20>
 800b7a6:	69b9      	ldr	r1, [r7, #24]
 800b7a8:	6a09      	ldr	r1, [r1, #32]
 800b7aa:	6838      	ldr	r0, [r7, #0]
 800b7ac:	4288      	cmp	r0, r1
 800b7ae:	d302      	bcc.n	800b7b6 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	61fb      	str	r3, [r7, #28]
 800b7b4:	e100      	b.n	800b9b8 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b7b6:	f04f 31ff 	mov.w	r1, #4294967295
 800b7ba:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800b7bc:	69b9      	ldr	r1, [r7, #24]
 800b7be:	7809      	ldrb	r1, [r1, #0]
 800b7c0:	3901      	subs	r1, #1
 800b7c2:	2903      	cmp	r1, #3
 800b7c4:	f200 80ec 	bhi.w	800b9a0 <get_fat+0x210>
 800b7c8:	a001      	add	r0, pc, #4	@ (adr r0, 800b7d0 <get_fat+0x40>)
 800b7ca:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b7ce:	bf00      	nop
 800b7d0:	0800b7e1 	.word	0x0800b7e1
 800b7d4:	0800b867 	.word	0x0800b867
 800b7d8:	0800b89d 	.word	0x0800b89d
 800b7dc:	0800b8d5 	.word	0x0800b8d5
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	60fb      	str	r3, [r7, #12]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	085b      	lsrs	r3, r3, #1
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	0a5b      	lsrs	r3, r3, #9
 800b7f6:	4413      	add	r3, r2
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	69b8      	ldr	r0, [r7, #24]
 800b7fc:	f7ff ff0c 	bl	800b618 <move_window>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	f040 80cf 	bne.w	800b9a6 <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	1c5a      	adds	r2, r3, #1
 800b80c:	60fa      	str	r2, [r7, #12]
 800b80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b812:	69ba      	ldr	r2, [r7, #24]
 800b814:	4413      	add	r3, r2
 800b816:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b81a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	0a5b      	lsrs	r3, r3, #9
 800b824:	4413      	add	r3, r2
 800b826:	4619      	mov	r1, r3
 800b828:	69b8      	ldr	r0, [r7, #24]
 800b82a:	f7ff fef5 	bl	800b618 <move_window>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	f040 80ba 	bne.w	800b9aa <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b83c:	69ba      	ldr	r2, [r7, #24]
 800b83e:	4413      	add	r3, r2
 800b840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b844:	021b      	lsls	r3, r3, #8
 800b846:	68ba      	ldr	r2, [r7, #8]
 800b848:	4313      	orrs	r3, r2
 800b84a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	f003 0301 	and.w	r3, r3, #1
 800b852:	2b00      	cmp	r3, #0
 800b854:	d002      	beq.n	800b85c <get_fat+0xcc>
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	091b      	lsrs	r3, r3, #4
 800b85a:	e002      	b.n	800b862 <get_fat+0xd2>
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b862:	61fb      	str	r3, [r7, #28]
			break;
 800b864:	e0a8      	b.n	800b9b8 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	0a1b      	lsrs	r3, r3, #8
 800b86e:	4413      	add	r3, r2
 800b870:	4619      	mov	r1, r3
 800b872:	69b8      	ldr	r0, [r7, #24]
 800b874:	f7ff fed0 	bl	800b618 <move_window>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f040 8097 	bne.w	800b9ae <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b88e:	4413      	add	r3, r2
 800b890:	4618      	mov	r0, r3
 800b892:	f7ff fa7b 	bl	800ad8c <ld_word>
 800b896:	4603      	mov	r3, r0
 800b898:	61fb      	str	r3, [r7, #28]
			break;
 800b89a:	e08d      	b.n	800b9b8 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	09db      	lsrs	r3, r3, #7
 800b8a4:	4413      	add	r3, r2
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	69b8      	ldr	r0, [r7, #24]
 800b8aa:	f7ff feb5 	bl	800b618 <move_window>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d17e      	bne.n	800b9b2 <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b8c2:	4413      	add	r3, r2
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7ff fa7a 	bl	800adbe <ld_dword>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b8d0:	61fb      	str	r3, [r7, #28]
			break;
 800b8d2:	e071      	b.n	800b9b8 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800b8d4:	6879      	ldr	r1, [r7, #4]
 800b8d6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b8da:	4301      	orrs	r1, r0
 800b8dc:	d060      	beq.n	800b9a0 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	6889      	ldr	r1, [r1, #8]
 800b8e2:	6838      	ldr	r0, [r7, #0]
 800b8e4:	1a41      	subs	r1, r0, r1
 800b8e6:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800b8e8:	6879      	ldr	r1, [r7, #4]
 800b8ea:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b8ee:	1e42      	subs	r2, r0, #1
 800b8f0:	f141 33ff 	adc.w	r3, r1, #4294967295
 800b8f4:	f04f 0000 	mov.w	r0, #0
 800b8f8:	f04f 0100 	mov.w	r1, #0
 800b8fc:	0a50      	lsrs	r0, r2, #9
 800b8fe:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b902:	0a59      	lsrs	r1, r3, #9
 800b904:	4602      	mov	r2, r0
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	895b      	ldrh	r3, [r3, #10]
 800b90a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b90e:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	79db      	ldrb	r3, [r3, #7]
 800b914:	2b02      	cmp	r3, #2
 800b916:	d10e      	bne.n	800b936 <get_fat+0x1a6>
					if (cofs <= clen) {
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d80a      	bhi.n	800b936 <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	429a      	cmp	r2, r3
 800b926:	d002      	beq.n	800b92e <get_fat+0x19e>
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	3301      	adds	r3, #1
 800b92c:	e001      	b.n	800b932 <get_fat+0x1a2>
 800b92e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b932:	61fb      	str	r3, [r7, #28]
						break;
 800b934:	e040      	b.n	800b9b8 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	79db      	ldrb	r3, [r3, #7]
 800b93a:	2b03      	cmp	r3, #3
 800b93c:	d108      	bne.n	800b950 <get_fat+0x1c0>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	697a      	ldr	r2, [r7, #20]
 800b944:	429a      	cmp	r2, r3
 800b946:	d203      	bcs.n	800b950 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	3301      	adds	r3, #1
 800b94c:	61fb      	str	r3, [r7, #28]
					break;
 800b94e:	e033      	b.n	800b9b8 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	79db      	ldrb	r3, [r3, #7]
 800b954:	2b02      	cmp	r3, #2
 800b956:	d023      	beq.n	800b9a0 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	69db      	ldr	r3, [r3, #28]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d003      	beq.n	800b968 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800b960:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b964:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800b966:	e027      	b.n	800b9b8 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	09db      	lsrs	r3, r3, #7
 800b970:	4413      	add	r3, r2
 800b972:	4619      	mov	r1, r3
 800b974:	69b8      	ldr	r0, [r7, #24]
 800b976:	f7ff fe4f 	bl	800b618 <move_window>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d11a      	bne.n	800b9b6 <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b98e:	4413      	add	r3, r2
 800b990:	4618      	mov	r0, r3
 800b992:	f7ff fa14 	bl	800adbe <ld_dword>
 800b996:	4603      	mov	r3, r0
 800b998:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b99c:	61fb      	str	r3, [r7, #28]
					break;
 800b99e:	e00b      	b.n	800b9b8 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	61fb      	str	r3, [r7, #28]
 800b9a4:	e008      	b.n	800b9b8 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b9a6:	bf00      	nop
 800b9a8:	e006      	b.n	800b9b8 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b9aa:	bf00      	nop
 800b9ac:	e004      	b.n	800b9b8 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b9ae:	bf00      	nop
 800b9b0:	e002      	b.n	800b9b8 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b9b2:	bf00      	nop
 800b9b4:	e000      	b.n	800b9b8 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b9b6:	bf00      	nop
		}
	}

	return val;
 800b9b8:	69fb      	ldr	r3, [r7, #28]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3720      	adds	r7, #32
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop

0800b9c4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b9c4:	b590      	push	{r4, r7, lr}
 800b9c6:	b089      	sub	sp, #36	@ 0x24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	f240 80dd 	bls.w	800bb96 <put_fat+0x1d2>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6a1b      	ldr	r3, [r3, #32]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	f080 80d7 	bcs.w	800bb96 <put_fat+0x1d2>
		switch (fs->fs_type) {
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	2b04      	cmp	r3, #4
 800b9ee:	f300 80d2 	bgt.w	800bb96 <put_fat+0x1d2>
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	f280 8093 	bge.w	800bb1e <put_fat+0x15a>
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d002      	beq.n	800ba02 <put_fat+0x3e>
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d06e      	beq.n	800bade <put_fat+0x11a>
 800ba00:	e0c9      	b.n	800bb96 <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	61bb      	str	r3, [r7, #24]
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	085b      	lsrs	r3, r3, #1
 800ba0a:	69ba      	ldr	r2, [r7, #24]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	0a5b      	lsrs	r3, r3, #9
 800ba18:	4413      	add	r3, r2
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f7ff fdfb 	bl	800b618 <move_window>
 800ba22:	4603      	mov	r3, r0
 800ba24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba26:	7ffb      	ldrb	r3, [r7, #31]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f040 80ad 	bne.w	800bb88 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	1c59      	adds	r1, r3, #1
 800ba38:	61b9      	str	r1, [r7, #24]
 800ba3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba3e:	4413      	add	r3, r2
 800ba40:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	f003 0301 	and.w	r3, r3, #1
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00d      	beq.n	800ba68 <put_fat+0xa4>
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	b25b      	sxtb	r3, r3
 800ba52:	f003 030f 	and.w	r3, r3, #15
 800ba56:	b25a      	sxtb	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	b25b      	sxtb	r3, r3
 800ba5c:	011b      	lsls	r3, r3, #4
 800ba5e:	b25b      	sxtb	r3, r3
 800ba60:	4313      	orrs	r3, r2
 800ba62:	b25b      	sxtb	r3, r3
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	e001      	b.n	800ba6c <put_fat+0xa8>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2201      	movs	r2, #1
 800ba74:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	0a5b      	lsrs	r3, r3, #9
 800ba7e:	4413      	add	r3, r2
 800ba80:	4619      	mov	r1, r3
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f7ff fdc8 	bl	800b618 <move_window>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba8c:	7ffb      	ldrb	r3, [r7, #31]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d17c      	bne.n	800bb8c <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba9e:	4413      	add	r3, r2
 800baa0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	f003 0301 	and.w	r3, r3, #1
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d003      	beq.n	800bab4 <put_fat+0xf0>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	091b      	lsrs	r3, r3, #4
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	e00e      	b.n	800bad2 <put_fat+0x10e>
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	b25b      	sxtb	r3, r3
 800baba:	f023 030f 	bic.w	r3, r3, #15
 800babe:	b25a      	sxtb	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	0a1b      	lsrs	r3, r3, #8
 800bac4:	b25b      	sxtb	r3, r3
 800bac6:	f003 030f 	and.w	r3, r3, #15
 800baca:	b25b      	sxtb	r3, r3
 800bacc:	4313      	orrs	r3, r2
 800bace:	b25b      	sxtb	r3, r3
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	697a      	ldr	r2, [r7, #20]
 800bad4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2201      	movs	r2, #1
 800bada:	70da      	strb	r2, [r3, #3]
			break;
 800badc:	e05b      	b.n	800bb96 <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	0a1b      	lsrs	r3, r3, #8
 800bae6:	4413      	add	r3, r2
 800bae8:	4619      	mov	r1, r3
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f7ff fd94 	bl	800b618 <move_window>
 800baf0:	4603      	mov	r3, r0
 800baf2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800baf4:	7ffb      	ldrb	r3, [r7, #31]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d14a      	bne.n	800bb90 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	005b      	lsls	r3, r3, #1
 800bb04:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bb08:	4413      	add	r3, r2
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	b292      	uxth	r2, r2
 800bb0e:	4611      	mov	r1, r2
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7ff fa52 	bl	800afba <st_word>
			fs->wflag = 1;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	70da      	strb	r2, [r3, #3]
			break;
 800bb1c:	e03b      	b.n	800bb96 <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	09db      	lsrs	r3, r3, #7
 800bb26:	4413      	add	r3, r2
 800bb28:	4619      	mov	r1, r3
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f7ff fd74 	bl	800b618 <move_window>
 800bb30:	4603      	mov	r3, r0
 800bb32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb34:	7ffb      	ldrb	r3, [r7, #31]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d12c      	bne.n	800bb94 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b04      	cmp	r3, #4
 800bb40:	d012      	beq.n	800bb68 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bb56:	4413      	add	r3, r2
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7ff f930 	bl	800adbe <ld_dword>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bb64:	4323      	orrs	r3, r4
 800bb66:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bb76:	4413      	add	r3, r2
 800bb78:	6879      	ldr	r1, [r7, #4]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7ff fa38 	bl	800aff0 <st_dword>
			fs->wflag = 1;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2201      	movs	r2, #1
 800bb84:	70da      	strb	r2, [r3, #3]
			break;
 800bb86:	e006      	b.n	800bb96 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800bb88:	bf00      	nop
 800bb8a:	e004      	b.n	800bb96 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800bb8c:	bf00      	nop
 800bb8e:	e002      	b.n	800bb96 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800bb90:	bf00      	nop
 800bb92:	e000      	b.n	800bb96 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800bb94:	bf00      	nop
		}
	}
	return res;
 800bb96:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3724      	adds	r7, #36	@ 0x24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd90      	pop	{r4, r7, pc}

0800bba0 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b08a      	sub	sp, #40	@ 0x28
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	3b02      	subs	r3, #2
 800bbb0:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	3b02      	subs	r3, #2
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d301      	bcc.n	800bbc2 <find_bitmap+0x22>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	61fb      	str	r3, [r7, #28]
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	61bb      	str	r3, [r7, #24]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	0b1b      	lsrs	r3, r3, #12
 800bbd6:	4413      	add	r3, r2
 800bbd8:	4619      	mov	r1, r3
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f7ff fd1c 	bl	800b618 <move_window>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d002      	beq.n	800bbec <find_bitmap+0x4c>
 800bbe6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbea:	e051      	b.n	800bc90 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	08db      	lsrs	r3, r3, #3
 800bbf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbf4:	623b      	str	r3, [r7, #32]
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	f003 0307 	and.w	r3, r3, #7
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	fa02 f303 	lsl.w	r3, r2, r3
 800bc02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	6a3b      	ldr	r3, [r7, #32]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	333c      	adds	r3, #60	@ 0x3c
 800bc0e:	781a      	ldrb	r2, [r3, #0]
 800bc10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc14:	4013      	ands	r3, r2
 800bc16:	74fb      	strb	r3, [r7, #19]
 800bc18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc1c:	005b      	lsls	r3, r3, #1
 800bc1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	3301      	adds	r3, #1
 800bc26:	61fb      	str	r3, [r7, #28]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6a1b      	ldr	r3, [r3, #32]
 800bc2c:	3b02      	subs	r3, #2
 800bc2e:	69fa      	ldr	r2, [r7, #28]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d307      	bcc.n	800bc44 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800bc34:	2300      	movs	r3, #0
 800bc36:	61fb      	str	r3, [r7, #28]
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bc3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc42:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800bc44:	7cfb      	ldrb	r3, [r7, #19]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d109      	bne.n	800bc5e <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	617b      	str	r3, [r7, #20]
 800bc50:	697a      	ldr	r2, [r7, #20]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d106      	bne.n	800bc66 <find_bitmap+0xc6>
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	3302      	adds	r3, #2
 800bc5c:	e018      	b.n	800bc90 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	61bb      	str	r3, [r7, #24]
 800bc62:	2300      	movs	r3, #0
 800bc64:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800bc66:	69fa      	ldr	r2, [r7, #28]
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d101      	bne.n	800bc72 <find_bitmap+0xd2>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e00e      	b.n	800bc90 <find_bitmap+0xf0>
			} while (bm);
 800bc72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1c5      	bne.n	800bc06 <find_bitmap+0x66>
			bm = 1;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	3301      	adds	r3, #1
 800bc84:	623b      	str	r3, [r7, #32]
 800bc86:	6a3b      	ldr	r3, [r7, #32]
 800bc88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc8c:	d3bb      	bcc.n	800bc06 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800bc8e:	e79e      	b.n	800bbce <find_bitmap+0x2e>
	}
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3728      	adds	r7, #40	@ 0x28
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b088      	sub	sp, #32
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	3b02      	subs	r3, #2
 800bcaa:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	0b1b      	lsrs	r3, r3, #12
 800bcb4:	4413      	add	r3, r2
 800bcb6:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	08db      	lsrs	r3, r3, #3
 800bcbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	f003 0307 	and.w	r3, r3, #7
 800bcc8:	2201      	movs	r2, #1
 800bcca:	fa02 f303 	lsl.w	r3, r2, r3
 800bcce:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	1c5a      	adds	r2, r3, #1
 800bcd4:	617a      	str	r2, [r7, #20]
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f7ff fc9d 	bl	800b618 <move_window>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d001      	beq.n	800bce8 <change_bitmap+0x50>
 800bce4:	2301      	movs	r3, #1
 800bce6:	e03d      	b.n	800bd64 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	4413      	add	r3, r2
 800bcee:	333c      	adds	r3, #60	@ 0x3c
 800bcf0:	781a      	ldrb	r2, [r3, #0]
 800bcf2:	7ffb      	ldrb	r3, [r7, #31]
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	bf14      	ite	ne
 800bcfc:	2301      	movne	r3, #1
 800bcfe:	2300      	moveq	r3, #0
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	461a      	mov	r2, r3
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d101      	bne.n	800bd0e <change_bitmap+0x76>
 800bd0a:	2302      	movs	r3, #2
 800bd0c:	e02a      	b.n	800bd64 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	4413      	add	r3, r2
 800bd14:	333c      	adds	r3, #60	@ 0x3c
 800bd16:	781a      	ldrb	r2, [r3, #0]
 800bd18:	7ffb      	ldrb	r3, [r7, #31]
 800bd1a:	4053      	eors	r3, r2
 800bd1c:	b2d9      	uxtb	r1, r3
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	4413      	add	r3, r2
 800bd24:	333c      	adds	r3, #60	@ 0x3c
 800bd26:	460a      	mov	r2, r1
 800bd28:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	607b      	str	r3, [r7, #4]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <change_bitmap+0xa8>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	e011      	b.n	800bd64 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800bd40:	7ffb      	ldrb	r3, [r7, #31]
 800bd42:	005b      	lsls	r3, r3, #1
 800bd44:	77fb      	strb	r3, [r7, #31]
 800bd46:	7ffb      	ldrb	r3, [r7, #31]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1cd      	bne.n	800bce8 <change_bitmap+0x50>
			bm = 1;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	3301      	adds	r3, #1
 800bd54:	61bb      	str	r3, [r7, #24]
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd5c:	d3c4      	bcc.n	800bce8 <change_bitmap+0x50>
		i = 0;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800bd62:	e7b5      	b.n	800bcd0 <change_bitmap+0x38>
	}
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3720      	adds	r7, #32
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	79db      	ldrb	r3, [r3, #7]
 800bd78:	2b03      	cmp	r3, #3
 800bd7a:	d121      	bne.n	800bdc0 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	617b      	str	r3, [r7, #20]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	613b      	str	r3, [r7, #16]
 800bd88:	e014      	b.n	800bdb4 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6818      	ldr	r0, [r3, #0]
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	3301      	adds	r3, #1
 800bd92:	461a      	mov	r2, r3
 800bd94:	6979      	ldr	r1, [r7, #20]
 800bd96:	f7ff fe15 	bl	800b9c4 <put_fat>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d001      	beq.n	800bda8 <fill_first_frag+0x3c>
 800bda4:	7bfb      	ldrb	r3, [r7, #15]
 800bda6:	e00c      	b.n	800bdc2 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	617b      	str	r3, [r7, #20]
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	3b01      	subs	r3, #1
 800bdb2:	613b      	str	r3, [r7, #16]
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1e7      	bne.n	800bd8a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3718      	adds	r7, #24
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b086      	sub	sp, #24
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	60f8      	str	r0, [r7, #12]
 800bdd2:	60b9      	str	r1, [r7, #8]
 800bdd4:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800bdd6:	e020      	b.n	800be1a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6818      	ldr	r0, [r3, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	69db      	ldr	r3, [r3, #28]
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	1ad3      	subs	r3, r2, r3
 800bde4:	1c59      	adds	r1, r3, #1
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d905      	bls.n	800bdfa <fill_last_frag+0x30>
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	69db      	ldr	r3, [r3, #28]
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	1ad3      	subs	r3, r2, r3
 800bdf6:	3302      	adds	r3, #2
 800bdf8:	e000      	b.n	800bdfc <fill_last_frag+0x32>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	f7ff fde1 	bl	800b9c4 <put_fat>
 800be02:	4603      	mov	r3, r0
 800be04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800be06:	7dfb      	ldrb	r3, [r7, #23]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <fill_last_frag+0x46>
 800be0c:	7dfb      	ldrb	r3, [r7, #23]
 800be0e:	e009      	b.n	800be24 <fill_last_frag+0x5a>
		obj->n_frag--;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	69db      	ldr	r3, [r3, #28]
 800be14:	1e5a      	subs	r2, r3, #1
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	69db      	ldr	r3, [r3, #28]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d1da      	bne.n	800bdd8 <fill_last_frag+0xe>
	}
	return FR_OK;
 800be22:	2300      	movs	r3, #0
}
 800be24:	4618      	mov	r0, r3
 800be26:	3718      	adds	r7, #24
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b08a      	sub	sp, #40	@ 0x28
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800be38:	2300      	movs	r3, #0
 800be3a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	627b      	str	r3, [r7, #36]	@ 0x24
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d904      	bls.n	800be5a <remove_chain+0x2e>
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	6a1b      	ldr	r3, [r3, #32]
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	429a      	cmp	r2, r3
 800be58:	d301      	bcc.n	800be5e <remove_chain+0x32>
 800be5a:	2302      	movs	r3, #2
 800be5c:	e096      	b.n	800bf8c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d014      	beq.n	800be8e <remove_chain+0x62>
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2b04      	cmp	r3, #4
 800be6a:	d103      	bne.n	800be74 <remove_chain+0x48>
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	79db      	ldrb	r3, [r3, #7]
 800be70:	2b02      	cmp	r3, #2
 800be72:	d00c      	beq.n	800be8e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800be74:	f04f 32ff 	mov.w	r2, #4294967295
 800be78:	6879      	ldr	r1, [r7, #4]
 800be7a:	69b8      	ldr	r0, [r7, #24]
 800be7c:	f7ff fda2 	bl	800b9c4 <put_fat>
 800be80:	4603      	mov	r3, r0
 800be82:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800be84:	7ffb      	ldrb	r3, [r7, #31]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <remove_chain+0x62>
 800be8a:	7ffb      	ldrb	r3, [r7, #31]
 800be8c:	e07e      	b.n	800bf8c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800be8e:	68b9      	ldr	r1, [r7, #8]
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7ff fc7d 	bl	800b790 <get_fat>
 800be96:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d055      	beq.n	800bf4a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d101      	bne.n	800bea8 <remove_chain+0x7c>
 800bea4:	2302      	movs	r3, #2
 800bea6:	e071      	b.n	800bf8c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beae:	d101      	bne.n	800beb4 <remove_chain+0x88>
 800beb0:	2301      	movs	r3, #1
 800beb2:	e06b      	b.n	800bf8c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b04      	cmp	r3, #4
 800beba:	d00b      	beq.n	800bed4 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bebc:	2200      	movs	r2, #0
 800bebe:	68b9      	ldr	r1, [r7, #8]
 800bec0:	69b8      	ldr	r0, [r7, #24]
 800bec2:	f7ff fd7f 	bl	800b9c4 <put_fat>
 800bec6:	4603      	mov	r3, r0
 800bec8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800beca:	7ffb      	ldrb	r3, [r7, #31]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <remove_chain+0xa8>
 800bed0:	7ffb      	ldrb	r3, [r7, #31]
 800bed2:	e05b      	b.n	800bf8c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	69da      	ldr	r2, [r3, #28]
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	6a1b      	ldr	r3, [r3, #32]
 800bedc:	3b02      	subs	r3, #2
 800bede:	429a      	cmp	r2, r3
 800bee0:	d20b      	bcs.n	800befa <remove_chain+0xce>
			fs->free_clst++;
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	69db      	ldr	r3, [r3, #28]
 800bee6:	1c5a      	adds	r2, r3, #1
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	791b      	ldrb	r3, [r3, #4]
 800bef0:	f043 0301 	orr.w	r3, r3, #1
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800befa:	6a3b      	ldr	r3, [r7, #32]
 800befc:	3301      	adds	r3, #1
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d102      	bne.n	800bf0a <remove_chain+0xde>
			ecl = nxt;
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	623b      	str	r3, [r7, #32]
 800bf08:	e017      	b.n	800bf3a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	2b04      	cmp	r3, #4
 800bf10:	d10f      	bne.n	800bf32 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800bf12:	6a3a      	ldr	r2, [r7, #32]
 800bf14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf1e:	69b8      	ldr	r0, [r7, #24]
 800bf20:	f7ff feba 	bl	800bc98 <change_bitmap>
 800bf24:	4603      	mov	r3, r0
 800bf26:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800bf28:	7ffb      	ldrb	r3, [r7, #31]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <remove_chain+0x106>
 800bf2e:	7ffb      	ldrb	r3, [r7, #31]
 800bf30:	e02c      	b.n	800bf8c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	623b      	str	r3, [r7, #32]
 800bf36:	6a3b      	ldr	r3, [r7, #32]
 800bf38:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d3a2      	bcc.n	800be8e <remove_chain+0x62>
 800bf48:	e000      	b.n	800bf4c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800bf4a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	2b04      	cmp	r3, #4
 800bf52:	d11a      	bne.n	800bf8a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d103      	bne.n	800bf62 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	71da      	strb	r2, [r3, #7]
 800bf60:	e013      	b.n	800bf8a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	79db      	ldrb	r3, [r3, #7]
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d10f      	bne.n	800bf8a <remove_chain+0x15e>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d30a      	bcc.n	800bf8a <remove_chain+0x15e>
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	689a      	ldr	r2, [r3, #8]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d802      	bhi.n	800bf8a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2202      	movs	r2, #2
 800bf88:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3728      	adds	r7, #40	@ 0x28
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b088      	sub	sp, #32
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10d      	bne.n	800bfc6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d004      	beq.n	800bfc0 <create_chain+0x2c>
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	6a1b      	ldr	r3, [r3, #32]
 800bfba:	69ba      	ldr	r2, [r7, #24]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d31b      	bcc.n	800bff8 <create_chain+0x64>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	61bb      	str	r3, [r7, #24]
 800bfc4:	e018      	b.n	800bff8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bfc6:	6839      	ldr	r1, [r7, #0]
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f7ff fbe1 	bl	800b790 <get_fat>
 800bfce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d801      	bhi.n	800bfda <create_chain+0x46>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e0d9      	b.n	800c18e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe0:	d101      	bne.n	800bfe6 <create_chain+0x52>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	e0d3      	b.n	800c18e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	6a1b      	ldr	r3, [r3, #32]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d201      	bcs.n	800bff4 <create_chain+0x60>
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	e0cc      	b.n	800c18e <create_chain+0x1fa>
		scl = clst;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	2b04      	cmp	r3, #4
 800bffe:	d164      	bne.n	800c0ca <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800c000:	2201      	movs	r2, #1
 800c002:	69b9      	ldr	r1, [r7, #24]
 800c004:	6938      	ldr	r0, [r7, #16]
 800c006:	f7ff fdcb 	bl	800bba0 <find_bitmap>
 800c00a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d003      	beq.n	800c01a <create_chain+0x86>
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c018:	d101      	bne.n	800c01e <create_chain+0x8a>
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	e0b7      	b.n	800c18e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800c01e:	2301      	movs	r3, #1
 800c020:	2201      	movs	r2, #1
 800c022:	69f9      	ldr	r1, [r7, #28]
 800c024:	6938      	ldr	r0, [r7, #16]
 800c026:	f7ff fe37 	bl	800bc98 <change_bitmap>
 800c02a:	4603      	mov	r3, r0
 800c02c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	2b02      	cmp	r3, #2
 800c032:	d101      	bne.n	800c038 <create_chain+0xa4>
 800c034:	2301      	movs	r3, #1
 800c036:	e0aa      	b.n	800c18e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800c038:	7dfb      	ldrb	r3, [r7, #23]
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d102      	bne.n	800c044 <create_chain+0xb0>
 800c03e:	f04f 33ff 	mov.w	r3, #4294967295
 800c042:	e0a4      	b.n	800c18e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d103      	bne.n	800c052 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2202      	movs	r2, #2
 800c04e:	71da      	strb	r2, [r3, #7]
 800c050:	e011      	b.n	800c076 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	79db      	ldrb	r3, [r3, #7]
 800c056:	2b02      	cmp	r3, #2
 800c058:	d10d      	bne.n	800c076 <create_chain+0xe2>
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	3301      	adds	r3, #1
 800c05e:	69fa      	ldr	r2, [r7, #28]
 800c060:	429a      	cmp	r2, r3
 800c062:	d008      	beq.n	800c076 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	69ba      	ldr	r2, [r7, #24]
 800c06a:	1ad2      	subs	r2, r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2203      	movs	r2, #3
 800c074:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	79db      	ldrb	r3, [r3, #7]
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d064      	beq.n	800c148 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	3301      	adds	r3, #1
 800c082:	69fa      	ldr	r2, [r7, #28]
 800c084:	429a      	cmp	r2, r3
 800c086:	d10b      	bne.n	800c0a0 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	69db      	ldr	r3, [r3, #28]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d003      	beq.n	800c098 <create_chain+0x104>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	69db      	ldr	r3, [r3, #28]
 800c094:	3301      	adds	r3, #1
 800c096:	e000      	b.n	800c09a <create_chain+0x106>
 800c098:	2302      	movs	r3, #2
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	61d3      	str	r3, [r2, #28]
 800c09e:	e053      	b.n	800c148 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	69db      	ldr	r3, [r3, #28]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d102      	bne.n	800c0ae <create_chain+0x11a>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800c0ae:	69fa      	ldr	r2, [r7, #28]
 800c0b0:	6839      	ldr	r1, [r7, #0]
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7ff fe89 	bl	800bdca <fill_last_frag>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800c0bc:	7dfb      	ldrb	r3, [r7, #23]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d142      	bne.n	800c148 <create_chain+0x1b4>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	61da      	str	r2, [r3, #28]
 800c0c8:	e03e      	b.n	800c148 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	6a1b      	ldr	r3, [r3, #32]
 800c0d8:	69fa      	ldr	r2, [r7, #28]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d307      	bcc.n	800c0ee <create_chain+0x15a>
				ncl = 2;
 800c0de:	2302      	movs	r3, #2
 800c0e0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c0e2:	69fa      	ldr	r2, [r7, #28]
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d901      	bls.n	800c0ee <create_chain+0x15a>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	e04f      	b.n	800c18e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c0ee:	69f9      	ldr	r1, [r7, #28]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f7ff fb4d 	bl	800b790 <get_fat>
 800c0f6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00e      	beq.n	800c11c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d003      	beq.n	800c10c <create_chain+0x178>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10a:	d101      	bne.n	800c110 <create_chain+0x17c>
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	e03e      	b.n	800c18e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800c110:	69fa      	ldr	r2, [r7, #28]
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	429a      	cmp	r2, r3
 800c116:	d1da      	bne.n	800c0ce <create_chain+0x13a>
 800c118:	2300      	movs	r3, #0
 800c11a:	e038      	b.n	800c18e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800c11c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c11e:	f04f 32ff 	mov.w	r2, #4294967295
 800c122:	69f9      	ldr	r1, [r7, #28]
 800c124:	6938      	ldr	r0, [r7, #16]
 800c126:	f7ff fc4d 	bl	800b9c4 <put_fat>
 800c12a:	4603      	mov	r3, r0
 800c12c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c12e:	7dfb      	ldrb	r3, [r7, #23]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d109      	bne.n	800c148 <create_chain+0x1b4>
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d006      	beq.n	800c148 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c13a:	69fa      	ldr	r2, [r7, #28]
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	6938      	ldr	r0, [r7, #16]
 800c140:	f7ff fc40 	bl	800b9c4 <put_fat>
 800c144:	4603      	mov	r3, r0
 800c146:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c148:	7dfb      	ldrb	r3, [r7, #23]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d116      	bne.n	800c17c <create_chain+0x1e8>
		fs->last_clst = ncl;
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	69fa      	ldr	r2, [r7, #28]
 800c152:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	69da      	ldr	r2, [r3, #28]
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	6a1b      	ldr	r3, [r3, #32]
 800c15c:	3b02      	subs	r3, #2
 800c15e:	429a      	cmp	r2, r3
 800c160:	d804      	bhi.n	800c16c <create_chain+0x1d8>
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	1e5a      	subs	r2, r3, #1
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	791b      	ldrb	r3, [r3, #4]
 800c170:	f043 0301 	orr.w	r3, r3, #1
 800c174:	b2da      	uxtb	r2, r3
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	711a      	strb	r2, [r3, #4]
 800c17a:	e007      	b.n	800c18c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c17c:	7dfb      	ldrb	r3, [r7, #23]
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d102      	bne.n	800c188 <create_chain+0x1f4>
 800c182:	f04f 33ff 	mov.w	r3, #4294967295
 800c186:	e000      	b.n	800c18a <create_chain+0x1f6>
 800c188:	2301      	movs	r3, #1
 800c18a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c18c:	69fb      	ldr	r3, [r7, #28]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3720      	adds	r7, #32
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c196:	b5b0      	push	{r4, r5, r7, lr}
 800c198:	b088      	sub	sp, #32
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	60f8      	str	r0, [r7, #12]
 800c19e:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c1b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1b4:	f04f 0000 	mov.w	r0, #0
 800c1b8:	f04f 0100 	mov.w	r1, #0
 800c1bc:	0a50      	lsrs	r0, r2, #9
 800c1be:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c1c2:	0a59      	lsrs	r1, r3, #9
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	895b      	ldrh	r3, [r3, #10]
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	461c      	mov	r4, r3
 800c1ce:	4615      	mov	r5, r2
 800c1d0:	4622      	mov	r2, r4
 800c1d2:	462b      	mov	r3, r5
 800c1d4:	f7f4 fd78 	bl	8000cc8 <__aeabi_uldivmod>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	460b      	mov	r3, r1
 800c1dc:	4613      	mov	r3, r2
 800c1de:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	1d1a      	adds	r2, r3, #4
 800c1e4:	61ba      	str	r2, [r7, #24]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <clmt_clust+0x5e>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	e010      	b.n	800c216 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800c1f4:	69fa      	ldr	r2, [r7, #28]
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d307      	bcc.n	800c20c <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800c1fc:	69fa      	ldr	r2, [r7, #28]
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	61fb      	str	r3, [r7, #28]
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	3304      	adds	r3, #4
 800c208:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c20a:	e7e9      	b.n	800c1e0 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800c20c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	4413      	add	r3, r2
}
 800c216:	4618      	mov	r0, r3
 800c218:	3720      	adds	r7, #32
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bdb0      	pop	{r4, r5, r7, pc}

0800c21e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b086      	sub	sp, #24
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	2b04      	cmp	r3, #4
 800c234:	d102      	bne.n	800c23c <dir_sdi+0x1e>
 800c236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c23a:	e001      	b.n	800c240 <dir_sdi+0x22>
 800c23c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	429a      	cmp	r2, r3
 800c244:	d904      	bls.n	800c250 <dir_sdi+0x32>
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	f003 031f 	and.w	r3, r3, #31
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d001      	beq.n	800c254 <dir_sdi+0x36>
		return FR_INT_ERR;
 800c250:	2302      	movs	r3, #2
 800c252:	e066      	b.n	800c322 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d109      	bne.n	800c27a <dir_sdi+0x5c>
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	2b02      	cmp	r3, #2
 800c26c:	d905      	bls.n	800c27a <dir_sdi+0x5c>
		clst = fs->dirbase;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c272:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10c      	bne.n	800c29a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	095b      	lsrs	r3, r3, #5
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	8912      	ldrh	r2, [r2, #8]
 800c288:	4293      	cmp	r3, r2
 800c28a:	d301      	bcc.n	800c290 <dir_sdi+0x72>
 800c28c:	2302      	movs	r3, #2
 800c28e:	e048      	b.n	800c322 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	639a      	str	r2, [r3, #56]	@ 0x38
 800c298:	e029      	b.n	800c2ee <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	895b      	ldrh	r3, [r3, #10]
 800c29e:	025b      	lsls	r3, r3, #9
 800c2a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2a2:	e019      	b.n	800c2d8 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6979      	ldr	r1, [r7, #20]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7ff fa71 	bl	800b790 <get_fat>
 800c2ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b6:	d101      	bne.n	800c2bc <dir_sdi+0x9e>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e032      	b.n	800c322 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d904      	bls.n	800c2cc <dir_sdi+0xae>
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	6a1b      	ldr	r3, [r3, #32]
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d301      	bcc.n	800c2d0 <dir_sdi+0xb2>
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	e028      	b.n	800c322 <dir_sdi+0x104>
			ofs -= csz;
 800c2d0:	683a      	ldr	r2, [r7, #0]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d2e1      	bcs.n	800c2a4 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800c2e0:	6979      	ldr	r1, [r7, #20]
 800c2e2:	6938      	ldr	r0, [r7, #16]
 800c2e4:	f7ff fa34 	bl	800b750 <clust2sect>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	697a      	ldr	r2, [r7, #20]
 800c2f2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d101      	bne.n	800c300 <dir_sdi+0xe2>
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	e010      	b.n	800c322 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	0a5b      	lsrs	r3, r3, #9
 800c308:	441a      	add	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c31a:	441a      	add	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b086      	sub	sp, #24
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c33e:	3320      	adds	r3, #32
 800c340:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00b      	beq.n	800c362 <dir_next+0x38>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	2b04      	cmp	r3, #4
 800c350:	d102      	bne.n	800c358 <dir_next+0x2e>
 800c352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c356:	e001      	b.n	800c35c <dir_next+0x32>
 800c358:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d801      	bhi.n	800c366 <dir_next+0x3c>
 800c362:	2304      	movs	r3, #4
 800c364:	e0b2      	b.n	800c4cc <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f040 80a0 	bne.w	800c4b2 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c376:	1c5a      	adds	r2, r3, #1
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10b      	bne.n	800c39c <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	095b      	lsrs	r3, r3, #5
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	8912      	ldrh	r2, [r2, #8]
 800c38c:	4293      	cmp	r3, r2
 800c38e:	f0c0 8090 	bcc.w	800c4b2 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2200      	movs	r2, #0
 800c396:	639a      	str	r2, [r3, #56]	@ 0x38
 800c398:	2304      	movs	r3, #4
 800c39a:	e097      	b.n	800c4cc <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	0a5b      	lsrs	r3, r3, #9
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	8952      	ldrh	r2, [r2, #10]
 800c3a4:	3a01      	subs	r2, #1
 800c3a6:	4013      	ands	r3, r2
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f040 8082 	bne.w	800c4b2 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	f7ff f9ea 	bl	800b790 <get_fat>
 800c3bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d801      	bhi.n	800c3c8 <dir_next+0x9e>
 800c3c4:	2302      	movs	r3, #2
 800c3c6:	e081      	b.n	800c4cc <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ce:	d101      	bne.n	800c3d4 <dir_next+0xaa>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e07b      	b.n	800c4cc <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6a1b      	ldr	r3, [r3, #32]
 800c3d8:	697a      	ldr	r2, [r7, #20]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d35f      	bcc.n	800c49e <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d104      	bne.n	800c3ee <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	639a      	str	r2, [r3, #56]	@ 0x38
 800c3ea:	2304      	movs	r3, #4
 800c3ec:	e06e      	b.n	800c4cc <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	4610      	mov	r0, r2
 800c3f8:	f7ff fdcc 	bl	800bf94 <create_chain>
 800c3fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d101      	bne.n	800c408 <dir_next+0xde>
 800c404:	2307      	movs	r3, #7
 800c406:	e061      	b.n	800c4cc <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d101      	bne.n	800c412 <dir_next+0xe8>
 800c40e:	2302      	movs	r3, #2
 800c410:	e05c      	b.n	800c4cc <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c418:	d101      	bne.n	800c41e <dir_next+0xf4>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e056      	b.n	800c4cc <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	79db      	ldrb	r3, [r3, #7]
 800c422:	f043 0304 	orr.w	r3, r3, #4
 800c426:	b2da      	uxtb	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f7ff f8af 	bl	800b590 <sync_window>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <dir_next+0x112>
 800c438:	2301      	movs	r3, #1
 800c43a:	e047      	b.n	800c4cc <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	333c      	adds	r3, #60	@ 0x3c
 800c440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c444:	2100      	movs	r1, #0
 800c446:	4618      	mov	r0, r3
 800c448:	f7fe fea7 	bl	800b19a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c44c:	2300      	movs	r3, #0
 800c44e:	613b      	str	r3, [r7, #16]
 800c450:	6979      	ldr	r1, [r7, #20]
 800c452:	68f8      	ldr	r0, [r7, #12]
 800c454:	f7ff f97c 	bl	800b750 <clust2sect>
 800c458:	4602      	mov	r2, r0
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	639a      	str	r2, [r3, #56]	@ 0x38
 800c45e:	e012      	b.n	800c486 <dir_next+0x15c>
						fs->wflag = 1;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2201      	movs	r2, #1
 800c464:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f7ff f892 	bl	800b590 <sync_window>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d001      	beq.n	800c476 <dir_next+0x14c>
 800c472:	2301      	movs	r3, #1
 800c474:	e02a      	b.n	800c4cc <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	3301      	adds	r3, #1
 800c47a:	613b      	str	r3, [r7, #16]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c480:	1c5a      	adds	r2, r3, #1
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	639a      	str	r2, [r3, #56]	@ 0x38
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	895b      	ldrh	r3, [r3, #10]
 800c48a:	461a      	mov	r2, r3
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	4293      	cmp	r3, r2
 800c490:	d3e6      	bcc.n	800c460 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	1ad2      	subs	r2, r2, r3
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800c4a4:	6979      	ldr	r1, [r7, #20]
 800c4a6:	68f8      	ldr	r0, [r7, #12]
 800c4a8:	f7ff f952 	bl	800b750 <clust2sect>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c4:	441a      	add	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3718      	adds	r7, #24
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b086      	sub	sp, #24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7ff fe99 	bl	800c21e <dir_sdi>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d140      	bne.n	800c578 <dir_alloc+0xa4>
		n = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4fe:	4619      	mov	r1, r3
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f7ff f889 	bl	800b618 <move_window>
 800c506:	4603      	mov	r3, r0
 800c508:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c50a:	7dfb      	ldrb	r3, [r7, #23]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d132      	bne.n	800c576 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	2b04      	cmp	r3, #4
 800c516:	d108      	bne.n	800c52a <dir_alloc+0x56>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	b25b      	sxtb	r3, r3
 800c520:	43db      	mvns	r3, r3
 800c522:	b2db      	uxtb	r3, r3
 800c524:	09db      	lsrs	r3, r3, #7
 800c526:	b2db      	uxtb	r3, r3
 800c528:	e00f      	b.n	800c54a <dir_alloc+0x76>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	2be5      	cmp	r3, #229	@ 0xe5
 800c532:	d004      	beq.n	800c53e <dir_alloc+0x6a>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d101      	bne.n	800c542 <dir_alloc+0x6e>
 800c53e:	2301      	movs	r3, #1
 800c540:	e000      	b.n	800c544 <dir_alloc+0x70>
 800c542:	2300      	movs	r3, #0
 800c544:	f003 0301 	and.w	r3, r3, #1
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d007      	beq.n	800c55e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	3301      	adds	r3, #1
 800c552:	613b      	str	r3, [r7, #16]
 800c554:	693a      	ldr	r2, [r7, #16]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d102      	bne.n	800c562 <dir_alloc+0x8e>
 800c55c:	e00c      	b.n	800c578 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c55e:	2300      	movs	r3, #0
 800c560:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c562:	2101      	movs	r1, #1
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7ff fee0 	bl	800c32a <dir_next>
 800c56a:	4603      	mov	r3, r0
 800c56c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d0c2      	beq.n	800c4fa <dir_alloc+0x26>
 800c574:	e000      	b.n	800c578 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800c576:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c578:	7dfb      	ldrb	r3, [r7, #23]
 800c57a:	2b04      	cmp	r3, #4
 800c57c:	d101      	bne.n	800c582 <dir_alloc+0xae>
 800c57e:	2307      	movs	r3, #7
 800c580:	75fb      	strb	r3, [r7, #23]
	return res;
 800c582:	7dfb      	ldrb	r3, [r7, #23]
}
 800c584:	4618      	mov	r0, r3
 800c586:	3718      	adds	r7, #24
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	331a      	adds	r3, #26
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fe fbf6 	bl	800ad8c <ld_word>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b03      	cmp	r3, #3
 800c5aa:	d109      	bne.n	800c5c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	3314      	adds	r3, #20
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7fe fbeb 	bl	800ad8c <ld_word>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	041b      	lsls	r3, r3, #16
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b084      	sub	sp, #16
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	60f8      	str	r0, [r7, #12]
 800c5d2:	60b9      	str	r1, [r7, #8]
 800c5d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	331a      	adds	r3, #26
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	b292      	uxth	r2, r2
 800c5de:	4611      	mov	r1, r2
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fe fcea 	bl	800afba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d109      	bne.n	800c602 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	f103 0214 	add.w	r2, r3, #20
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	0c1b      	lsrs	r3, r3, #16
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	f7fe fcdc 	bl	800afba <st_word>
	}
}
 800c602:	bf00      	nop
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
	...

0800c60c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c60c:	b590      	push	{r4, r7, lr}
 800c60e:	b087      	sub	sp, #28
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	331a      	adds	r3, #26
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fe fbb6 	bl	800ad8c <ld_word>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <cmp_lfn+0x1e>
 800c626:	2300      	movs	r3, #0
 800c628:	e059      	b.n	800c6de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c632:	1e5a      	subs	r2, r3, #1
 800c634:	4613      	mov	r3, r2
 800c636:	005b      	lsls	r3, r3, #1
 800c638:	4413      	add	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c640:	2301      	movs	r3, #1
 800c642:	81fb      	strh	r3, [r7, #14]
 800c644:	2300      	movs	r3, #0
 800c646:	613b      	str	r3, [r7, #16]
 800c648:	e033      	b.n	800c6b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c64a:	4a27      	ldr	r2, [pc, #156]	@ (800c6e8 <cmp_lfn+0xdc>)
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	4413      	add	r3, r2
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	461a      	mov	r2, r3
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	4413      	add	r3, r2
 800c658:	4618      	mov	r0, r3
 800c65a:	f7fe fb97 	bl	800ad8c <ld_word>
 800c65e:	4603      	mov	r3, r0
 800c660:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c662:	89fb      	ldrh	r3, [r7, #14]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d01a      	beq.n	800c69e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2bfe      	cmp	r3, #254	@ 0xfe
 800c66c:	d812      	bhi.n	800c694 <cmp_lfn+0x88>
 800c66e:	89bb      	ldrh	r3, [r7, #12]
 800c670:	4618      	mov	r0, r3
 800c672:	f002 fedd 	bl	800f430 <ff_wtoupper>
 800c676:	4603      	mov	r3, r0
 800c678:	461c      	mov	r4, r3
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	1c5a      	adds	r2, r3, #1
 800c67e:	617a      	str	r2, [r7, #20]
 800c680:	005b      	lsls	r3, r3, #1
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	4413      	add	r3, r2
 800c686:	881b      	ldrh	r3, [r3, #0]
 800c688:	4618      	mov	r0, r3
 800c68a:	f002 fed1 	bl	800f430 <ff_wtoupper>
 800c68e:	4603      	mov	r3, r0
 800c690:	429c      	cmp	r4, r3
 800c692:	d001      	beq.n	800c698 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c694:	2300      	movs	r3, #0
 800c696:	e022      	b.n	800c6de <cmp_lfn+0xd2>
			}
			wc = uc;
 800c698:	89bb      	ldrh	r3, [r7, #12]
 800c69a:	81fb      	strh	r3, [r7, #14]
 800c69c:	e006      	b.n	800c6ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c69e:	89bb      	ldrh	r3, [r7, #12]
 800c6a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d001      	beq.n	800c6ac <cmp_lfn+0xa0>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	e018      	b.n	800c6de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	613b      	str	r3, [r7, #16]
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	2b0c      	cmp	r3, #12
 800c6b6:	d9c8      	bls.n	800c64a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00b      	beq.n	800c6dc <cmp_lfn+0xd0>
 800c6c4:	89fb      	ldrh	r3, [r7, #14]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d008      	beq.n	800c6dc <cmp_lfn+0xd0>
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	005b      	lsls	r3, r3, #1
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	881b      	ldrh	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d001      	beq.n	800c6dc <cmp_lfn+0xd0>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	e000      	b.n	800c6de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c6dc:	2301      	movs	r3, #1
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	371c      	adds	r7, #28
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd90      	pop	{r4, r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	080163f4 	.word	0x080163f4

0800c6ec <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b086      	sub	sp, #24
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	331a      	adds	r3, #26
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7fe fb46 	bl	800ad8c <ld_word>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d001      	beq.n	800c70a <pick_lfn+0x1e>
 800c706:	2300      	movs	r3, #0
 800c708:	e04d      	b.n	800c7a6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c712:	1e5a      	subs	r2, r3, #1
 800c714:	4613      	mov	r3, r2
 800c716:	005b      	lsls	r3, r3, #1
 800c718:	4413      	add	r3, r2
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	4413      	add	r3, r2
 800c71e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c720:	2301      	movs	r3, #1
 800c722:	81fb      	strh	r3, [r7, #14]
 800c724:	2300      	movs	r3, #0
 800c726:	613b      	str	r3, [r7, #16]
 800c728:	e028      	b.n	800c77c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c72a:	4a21      	ldr	r2, [pc, #132]	@ (800c7b0 <pick_lfn+0xc4>)
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	4413      	add	r3, r2
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	461a      	mov	r2, r3
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	4413      	add	r3, r2
 800c738:	4618      	mov	r0, r3
 800c73a:	f7fe fb27 	bl	800ad8c <ld_word>
 800c73e:	4603      	mov	r3, r0
 800c740:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c742:	89fb      	ldrh	r3, [r7, #14]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00f      	beq.n	800c768 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	2bfe      	cmp	r3, #254	@ 0xfe
 800c74c:	d901      	bls.n	800c752 <pick_lfn+0x66>
 800c74e:	2300      	movs	r3, #0
 800c750:	e029      	b.n	800c7a6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c752:	89bb      	ldrh	r3, [r7, #12]
 800c754:	81fb      	strh	r3, [r7, #14]
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	1c5a      	adds	r2, r3, #1
 800c75a:	617a      	str	r2, [r7, #20]
 800c75c:	005b      	lsls	r3, r3, #1
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	4413      	add	r3, r2
 800c762:	89fa      	ldrh	r2, [r7, #14]
 800c764:	801a      	strh	r2, [r3, #0]
 800c766:	e006      	b.n	800c776 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c768:	89bb      	ldrh	r3, [r7, #12]
 800c76a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c76e:	4293      	cmp	r3, r2
 800c770:	d001      	beq.n	800c776 <pick_lfn+0x8a>
 800c772:	2300      	movs	r3, #0
 800c774:	e017      	b.n	800c7a6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	3301      	adds	r3, #1
 800c77a:	613b      	str	r3, [r7, #16]
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	2b0c      	cmp	r3, #12
 800c780:	d9d3      	bls.n	800c72a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00a      	beq.n	800c7a4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	2bfe      	cmp	r3, #254	@ 0xfe
 800c792:	d901      	bls.n	800c798 <pick_lfn+0xac>
 800c794:	2300      	movs	r3, #0
 800c796:	e006      	b.n	800c7a6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	005b      	lsls	r3, r3, #1
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	4413      	add	r3, r2
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c7a4:	2301      	movs	r3, #1
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3718      	adds	r7, #24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	080163f4 	.word	0x080163f4

0800c7b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b088      	sub	sp, #32
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	4611      	mov	r1, r2
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	71fb      	strb	r3, [r7, #7]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	330d      	adds	r3, #13
 800c7ce:	79ba      	ldrb	r2, [r7, #6]
 800c7d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	330b      	adds	r3, #11
 800c7d6:	220f      	movs	r2, #15
 800c7d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	330c      	adds	r3, #12
 800c7de:	2200      	movs	r2, #0
 800c7e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	331a      	adds	r3, #26
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fe fbe6 	bl	800afba <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c7ee:	79fb      	ldrb	r3, [r7, #7]
 800c7f0:	1e5a      	subs	r2, r3, #1
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	005b      	lsls	r3, r3, #1
 800c7f6:	4413      	add	r3, r2
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	4413      	add	r3, r2
 800c7fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	82fb      	strh	r3, [r7, #22]
 800c802:	2300      	movs	r3, #0
 800c804:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c806:	8afb      	ldrh	r3, [r7, #22]
 800c808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d007      	beq.n	800c820 <put_lfn+0x6c>
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	1c5a      	adds	r2, r3, #1
 800c814:	61fa      	str	r2, [r7, #28]
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	4413      	add	r3, r2
 800c81c:	881b      	ldrh	r3, [r3, #0]
 800c81e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c820:	4a17      	ldr	r2, [pc, #92]	@ (800c880 <put_lfn+0xcc>)
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	4413      	add	r3, r2
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	461a      	mov	r2, r3
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	4413      	add	r3, r2
 800c82e:	8afa      	ldrh	r2, [r7, #22]
 800c830:	4611      	mov	r1, r2
 800c832:	4618      	mov	r0, r3
 800c834:	f7fe fbc1 	bl	800afba <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c838:	8afb      	ldrh	r3, [r7, #22]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d102      	bne.n	800c844 <put_lfn+0x90>
 800c83e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c842:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	3301      	adds	r3, #1
 800c848:	61bb      	str	r3, [r7, #24]
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	2b0c      	cmp	r3, #12
 800c84e:	d9da      	bls.n	800c806 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c850:	8afb      	ldrh	r3, [r7, #22]
 800c852:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c856:	4293      	cmp	r3, r2
 800c858:	d006      	beq.n	800c868 <put_lfn+0xb4>
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	005b      	lsls	r3, r3, #1
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	4413      	add	r3, r2
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d103      	bne.n	800c870 <put_lfn+0xbc>
 800c868:	79fb      	ldrb	r3, [r7, #7]
 800c86a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c86e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	79fa      	ldrb	r2, [r7, #7]
 800c874:	701a      	strb	r2, [r3, #0]
}
 800c876:	bf00      	nop
 800c878:	3720      	adds	r7, #32
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	080163f4 	.word	0x080163f4

0800c884 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b08c      	sub	sp, #48	@ 0x30
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
 800c890:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c892:	220b      	movs	r2, #11
 800c894:	68b9      	ldr	r1, [r7, #8]
 800c896:	68f8      	ldr	r0, [r7, #12]
 800c898:	f7fe fc5e 	bl	800b158 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	2b05      	cmp	r3, #5
 800c8a0:	d92b      	bls.n	800c8fa <gen_numname+0x76>
		sr = seq;
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c8a6:	e022      	b.n	800c8ee <gen_numname+0x6a>
			wc = *lfn++;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	1c9a      	adds	r2, r3, #2
 800c8ac:	607a      	str	r2, [r7, #4]
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8b6:	e017      	b.n	800c8e8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	005a      	lsls	r2, r3, #1
 800c8bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8be:	f003 0301 	and.w	r3, r3, #1
 800c8c2:	4413      	add	r3, r2
 800c8c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c8c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8c8:	085b      	lsrs	r3, r3, #1
 800c8ca:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d005      	beq.n	800c8e2 <gen_numname+0x5e>
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800c8dc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800c8e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ea:	2b0f      	cmp	r3, #15
 800c8ec:	d9e4      	bls.n	800c8b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	881b      	ldrh	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1d8      	bne.n	800c8a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c8fa:	2307      	movs	r3, #7
 800c8fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	b2db      	uxtb	r3, r3
 800c902:	f003 030f 	and.w	r3, r3, #15
 800c906:	b2db      	uxtb	r3, r3
 800c908:	3330      	adds	r3, #48	@ 0x30
 800c90a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800c90e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c912:	2b39      	cmp	r3, #57	@ 0x39
 800c914:	d904      	bls.n	800c920 <gen_numname+0x9c>
 800c916:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c91a:	3307      	adds	r3, #7
 800c91c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c922:	1e5a      	subs	r2, r3, #1
 800c924:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c926:	3330      	adds	r3, #48	@ 0x30
 800c928:	443b      	add	r3, r7
 800c92a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c92e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	091b      	lsrs	r3, r3, #4
 800c936:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1df      	bne.n	800c8fe <gen_numname+0x7a>
	ns[i] = '~';
 800c93e:	f107 0214 	add.w	r2, r7, #20
 800c942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c944:	4413      	add	r3, r2
 800c946:	227e      	movs	r2, #126	@ 0x7e
 800c948:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c94a:	2300      	movs	r3, #0
 800c94c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c94e:	e002      	b.n	800c956 <gen_numname+0xd2>
 800c950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c952:	3301      	adds	r3, #1
 800c954:	627b      	str	r3, [r7, #36]	@ 0x24
 800c956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d205      	bcs.n	800c96a <gen_numname+0xe6>
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c962:	4413      	add	r3, r2
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	2b20      	cmp	r3, #32
 800c968:	d1f2      	bne.n	800c950 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96c:	2b07      	cmp	r3, #7
 800c96e:	d807      	bhi.n	800c980 <gen_numname+0xfc>
 800c970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c972:	1c5a      	adds	r2, r3, #1
 800c974:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c976:	3330      	adds	r3, #48	@ 0x30
 800c978:	443b      	add	r3, r7
 800c97a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c97e:	e000      	b.n	800c982 <gen_numname+0xfe>
 800c980:	2120      	movs	r1, #32
 800c982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c984:	1c5a      	adds	r2, r3, #1
 800c986:	627a      	str	r2, [r7, #36]	@ 0x24
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	4413      	add	r3, r2
 800c98c:	460a      	mov	r2, r1
 800c98e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c992:	2b07      	cmp	r3, #7
 800c994:	d9e9      	bls.n	800c96a <gen_numname+0xe6>
}
 800c996:	bf00      	nop
 800c998:	bf00      	nop
 800c99a:	3730      	adds	r7, #48	@ 0x30
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c9ac:	230b      	movs	r3, #11
 800c9ae:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c9b0:	7bfb      	ldrb	r3, [r7, #15]
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	0852      	lsrs	r2, r2, #1
 800c9b6:	01db      	lsls	r3, r3, #7
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	1c59      	adds	r1, r3, #1
 800c9c0:	6079      	str	r1, [r7, #4]
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	60bb      	str	r3, [r7, #8]
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1ed      	bne.n	800c9b0 <sum_sfn+0x10>
	return sum;
 800c9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3714      	adds	r7, #20
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800c9e2:	b480      	push	{r7}
 800c9e4:	b087      	sub	sp, #28
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	015b      	lsls	r3, r3, #5
 800c9f4:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	827b      	strh	r3, [r7, #18]
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	617b      	str	r3, [r7, #20]
 800c9fe:	e015      	b.n	800ca2c <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	d103      	bne.n	800ca0e <xdir_sum+0x2c>
			i++;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	617b      	str	r3, [r7, #20]
 800ca0c:	e00b      	b.n	800ca26 <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ca0e:	8a7b      	ldrh	r3, [r7, #18]
 800ca10:	b29a      	uxth	r2, r3
 800ca12:	0852      	lsrs	r2, r2, #1
 800ca14:	03db      	lsls	r3, r3, #15
 800ca16:	4313      	orrs	r3, r2
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	6879      	ldr	r1, [r7, #4]
 800ca1c:	697a      	ldr	r2, [r7, #20]
 800ca1e:	440a      	add	r2, r1
 800ca20:	7812      	ldrb	r2, [r2, #0]
 800ca22:	4413      	add	r3, r2
 800ca24:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	697a      	ldr	r2, [r7, #20]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d3e5      	bcc.n	800ca00 <xdir_sum+0x1e>
		}
	}
	return sum;
 800ca34:	8a7b      	ldrh	r3, [r7, #18]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	371c      	adds	r7, #28
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b084      	sub	sp, #16
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800ca4e:	e01b      	b.n	800ca88 <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800ca50:	89bb      	ldrh	r3, [r7, #12]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f002 fcec 	bl	800f430 <ff_wtoupper>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800ca5c:	89fb      	ldrh	r3, [r7, #14]
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	0852      	lsrs	r2, r2, #1
 800ca62:	03db      	lsls	r3, r3, #15
 800ca64:	4313      	orrs	r3, r2
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	89bb      	ldrh	r3, [r7, #12]
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	4413      	add	r3, r2
 800ca70:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800ca72:	89fb      	ldrh	r3, [r7, #14]
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	0852      	lsrs	r2, r2, #1
 800ca78:	03db      	lsls	r3, r3, #15
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	89bb      	ldrh	r3, [r7, #12]
 800ca80:	0a1b      	lsrs	r3, r3, #8
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	4413      	add	r3, r2
 800ca86:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	1c9a      	adds	r2, r3, #2
 800ca8c:	607a      	str	r2, [r7, #4]
 800ca8e:	881b      	ldrh	r3, [r3, #0]
 800ca90:	81bb      	strh	r3, [r7, #12]
 800ca92:	89bb      	ldrh	r3, [r7, #12]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1db      	bne.n	800ca50 <xname_sum+0xe>
	}
	return sum;
 800ca98:	89fb      	ldrh	r3, [r7, #14]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
	...

0800caa4 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800caa4:	b590      	push	{r4, r7, lr}
 800caa6:	b087      	sub	sp, #28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cabc:	4619      	mov	r1, r3
 800cabe:	4610      	mov	r0, r2
 800cac0:	f7fe fdaa 	bl	800b618 <move_window>
 800cac4:	4603      	mov	r3, r0
 800cac6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <load_xdir+0x2e>
 800cace:	7bfb      	ldrb	r3, [r7, #15]
 800cad0:	e09f      	b.n	800cc12 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	2b85      	cmp	r3, #133	@ 0x85
 800cada:	d001      	beq.n	800cae0 <load_xdir+0x3c>
 800cadc:	2302      	movs	r3, #2
 800cade:	e098      	b.n	800cc12 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cae4:	2220      	movs	r2, #32
 800cae6:	4619      	mov	r1, r3
 800cae8:	6938      	ldr	r0, [r7, #16]
 800caea:	f7fe fb35 	bl	800b158 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	3301      	adds	r3, #1
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	3301      	adds	r3, #1
 800caf6:	015b      	lsls	r3, r3, #5
 800caf8:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	2b5f      	cmp	r3, #95	@ 0x5f
 800cafe:	d903      	bls.n	800cb08 <load_xdir+0x64>
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800cb06:	d901      	bls.n	800cb0c <load_xdir+0x68>
 800cb08:	2302      	movs	r3, #2
 800cb0a:	e082      	b.n	800cc12 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7ff fc0b 	bl	800c32a <dir_next>
 800cb14:	4603      	mov	r3, r0
 800cb16:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d001      	beq.n	800cb22 <load_xdir+0x7e>
 800cb1e:	7bfb      	ldrb	r3, [r7, #15]
 800cb20:	e077      	b.n	800cc12 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	4610      	mov	r0, r2
 800cb2e:	f7fe fd73 	bl	800b618 <move_window>
 800cb32:	4603      	mov	r3, r0
 800cb34:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800cb36:	7bfb      	ldrb	r3, [r7, #15]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <load_xdir+0x9c>
 800cb3c:	7bfb      	ldrb	r3, [r7, #15]
 800cb3e:	e068      	b.n	800cc12 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb48:	d001      	beq.n	800cb4e <load_xdir+0xaa>
 800cb4a:	2302      	movs	r3, #2
 800cb4c:	e061      	b.n	800cc12 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	f103 0020 	add.w	r0, r3, #32
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb58:	2220      	movs	r2, #32
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	f7fe fafc 	bl	800b158 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	3323      	adds	r3, #35	@ 0x23
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	332c      	adds	r3, #44	@ 0x2c
 800cb68:	4a2c      	ldr	r2, [pc, #176]	@ (800cc1c <load_xdir+0x178>)
 800cb6a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb6e:	08db      	lsrs	r3, r3, #3
 800cb70:	015b      	lsls	r3, r3, #5
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d201      	bcs.n	800cb7c <load_xdir+0xd8>
 800cb78:	2302      	movs	r3, #2
 800cb7a:	e04a      	b.n	800cc12 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800cb7c:	2340      	movs	r3, #64	@ 0x40
 800cb7e:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800cb80:	2100      	movs	r1, #0
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7ff fbd1 	bl	800c32a <dir_next>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800cb8c:	7bfb      	ldrb	r3, [r7, #15]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d001      	beq.n	800cb96 <load_xdir+0xf2>
 800cb92:	7bfb      	ldrb	r3, [r7, #15]
 800cb94:	e03d      	b.n	800cc12 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4610      	mov	r0, r2
 800cba2:	f7fe fd39 	bl	800b618 <move_window>
 800cba6:	4603      	mov	r3, r0
 800cba8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800cbaa:	7bfb      	ldrb	r3, [r7, #15]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d001      	beq.n	800cbb4 <load_xdir+0x110>
 800cbb0:	7bfb      	ldrb	r3, [r7, #15]
 800cbb2:	e02e      	b.n	800cc12 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2bc1      	cmp	r3, #193	@ 0xc1
 800cbbc:	d001      	beq.n	800cbc2 <load_xdir+0x11e>
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	e027      	b.n	800cc12 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800cbc8:	d208      	bcs.n	800cbdc <load_xdir+0x138>
 800cbca:	693a      	ldr	r2, [r7, #16]
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	18d0      	adds	r0, r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbd4:	2220      	movs	r2, #32
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	f7fe fabe 	bl	800b158 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	3320      	adds	r3, #32
 800cbe0:	617b      	str	r3, [r7, #20]
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d3ca      	bcc.n	800cb80 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800cbf0:	d80e      	bhi.n	800cc10 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800cbf2:	6938      	ldr	r0, [r7, #16]
 800cbf4:	f7ff fef5 	bl	800c9e2 <xdir_sum>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	461c      	mov	r4, r3
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	3302      	adds	r3, #2
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7fe f8c3 	bl	800ad8c <ld_word>
 800cc06:	4603      	mov	r3, r0
 800cc08:	429c      	cmp	r4, r3
 800cc0a:	d001      	beq.n	800cc10 <load_xdir+0x16c>
 800cc0c:	2302      	movs	r3, #2
 800cc0e:	e000      	b.n	800cc12 <load_xdir+0x16e>
	}
	return FR_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	371c      	adds	r7, #28
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd90      	pop	{r4, r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	88888889 	.word	0x88888889

0800cc20 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800cc20:	b5b0      	push	{r4, r5, r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800cc2a:	6839      	ldr	r1, [r7, #0]
 800cc2c:	6808      	ldr	r0, [r1, #0]
 800cc2e:	6879      	ldr	r1, [r7, #4]
 800cc30:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6a08      	ldr	r0, [r1, #32]
 800cc36:	6879      	ldr	r1, [r7, #4]
 800cc38:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800cc3e:	b2c8      	uxtb	r0, r1
 800cc40:	6879      	ldr	r1, [r7, #4]
 800cc42:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800cc44:	6839      	ldr	r1, [r7, #0]
 800cc46:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800cc48:	2000      	movs	r0, #0
 800cc4a:	460c      	mov	r4, r1
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800cc52:	2300      	movs	r3, #0
 800cc54:	6879      	ldr	r1, [r7, #4]
 800cc56:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc66:	4619      	mov	r1, r3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7ff fad8 	bl	800c21e <dir_sdi>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cc72:	7bfb      	ldrb	r3, [r7, #15]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d104      	bne.n	800cc82 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f7ff ff13 	bl	800caa4 <load_xdir>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bdb0      	pop	{r4, r5, r7, pc}

0800cc8c <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800cc8c:	b590      	push	{r4, r7, lr}
 800cc8e:	b087      	sub	sp, #28
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	1c9c      	adds	r4, r3, #2
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f7ff fe9e 	bl	800c9e2 <xdir_sum>
 800cca6:	4603      	mov	r3, r0
 800cca8:	4619      	mov	r1, r3
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f7fe f985 	bl	800afba <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f7ff faac 	bl	800c21e <dir_sdi>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ccca:	e026      	b.n	800cd1a <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	4610      	mov	r0, r2
 800ccd8:	f7fe fc9e 	bl	800b618 <move_window>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cce0:	7dfb      	ldrb	r3, [r7, #23]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d11d      	bne.n	800cd22 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccea:	2220      	movs	r2, #32
 800ccec:	68f9      	ldr	r1, [r7, #12]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7fe fa32 	bl	800b158 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	613b      	str	r3, [r7, #16]
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00e      	beq.n	800cd26 <store_xdir+0x9a>
		dirb += SZDIRE;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	3320      	adds	r3, #32
 800cd0c:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800cd0e:	2100      	movs	r1, #0
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7ff fb0a 	bl	800c32a <dir_next>
 800cd16:	4603      	mov	r3, r0
 800cd18:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800cd1a:	7dfb      	ldrb	r3, [r7, #23]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d0d5      	beq.n	800cccc <store_xdir+0x40>
 800cd20:	e002      	b.n	800cd28 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800cd22:	bf00      	nop
 800cd24:	e000      	b.n	800cd28 <store_xdir+0x9c>
		if (--nent == 0) break;
 800cd26:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800cd28:	7dfb      	ldrb	r3, [r7, #23]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d002      	beq.n	800cd34 <store_xdir+0xa8>
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d101      	bne.n	800cd38 <store_xdir+0xac>
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
 800cd36:	e000      	b.n	800cd3a <store_xdir+0xae>
 800cd38:	2302      	movs	r3, #2
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	371c      	adds	r7, #28
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd90      	pop	{r4, r7, pc}

0800cd42 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800cd42:	b590      	push	{r4, r7, lr}
 800cd44:	b085      	sub	sp, #20
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
 800cd4a:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800cd4c:	2240      	movs	r2, #64	@ 0x40
 800cd4e:	2100      	movs	r1, #0
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7fe fa22 	bl	800b19a <mem_set>
	dirb[XDIR_Type] = 0x85;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2285      	movs	r2, #133	@ 0x85
 800cd5a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	3320      	adds	r3, #32
 800cd60:	22c0      	movs	r2, #192	@ 0xc0
 800cd62:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800cd64:	2300      	movs	r3, #0
 800cd66:	72bb      	strb	r3, [r7, #10]
 800cd68:	2301      	movs	r3, #1
 800cd6a:	72fb      	strb	r3, [r7, #11]
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	813b      	strh	r3, [r7, #8]
 800cd70:	2340      	movs	r3, #64	@ 0x40
 800cd72:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	1c5a      	adds	r2, r3, #1
 800cd78:	60fa      	str	r2, [r7, #12]
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	22c1      	movs	r2, #193	@ 0xc1
 800cd80:	701a      	strb	r2, [r3, #0]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	1c5a      	adds	r2, r3, #1
 800cd86:	60fa      	str	r2, [r7, #12]
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800cd90:	893b      	ldrh	r3, [r7, #8]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d00b      	beq.n	800cdae <create_xdir+0x6c>
 800cd96:	7abb      	ldrb	r3, [r7, #10]
 800cd98:	005b      	lsls	r3, r3, #1
 800cd9a:	683a      	ldr	r2, [r7, #0]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	881b      	ldrh	r3, [r3, #0]
 800cda0:	813b      	strh	r3, [r7, #8]
 800cda2:	893b      	ldrh	r3, [r7, #8]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <create_xdir+0x6c>
 800cda8:	7abb      	ldrb	r3, [r7, #10]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	893a      	ldrh	r2, [r7, #8]
 800cdb6:	4611      	mov	r1, r2
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fe f8fe 	bl	800afba <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	3302      	adds	r3, #2
 800cdc2:	60fb      	str	r3, [r7, #12]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f003 031f 	and.w	r3, r3, #31
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1e0      	bne.n	800cd90 <create_xdir+0x4e>
		nb++;
 800cdce:	7afb      	ldrb	r3, [r7, #11]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800cdd4:	7abb      	ldrb	r3, [r7, #10]
 800cdd6:	005b      	lsls	r3, r3, #1
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	4413      	add	r3, r2
 800cddc:	881b      	ldrh	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d1c8      	bne.n	800cd74 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	3323      	adds	r3, #35	@ 0x23
 800cde6:	7aba      	ldrb	r2, [r7, #10]
 800cde8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	3301      	adds	r3, #1
 800cdee:	7afa      	ldrb	r2, [r7, #11]
 800cdf0:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800cdf8:	6838      	ldr	r0, [r7, #0]
 800cdfa:	f7ff fe22 	bl	800ca42 <xname_sum>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	4619      	mov	r1, r3
 800ce02:	4620      	mov	r0, r4
 800ce04:	f7fe f8d9 	bl	800afba <st_word>
}
 800ce08:	bf00      	nop
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd90      	pop	{r4, r7, pc}

0800ce10 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ce1a:	2304      	movs	r3, #4
 800ce1c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ce24:	23ff      	movs	r3, #255	@ 0xff
 800ce26:	757b      	strb	r3, [r7, #21]
 800ce28:	23ff      	movs	r3, #255	@ 0xff
 800ce2a:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ce2c:	e09f      	b.n	800cf6e <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce32:	4619      	mov	r1, r3
 800ce34:	6938      	ldr	r0, [r7, #16]
 800ce36:	f7fe fbef 	bl	800b618 <move_window>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ce3e:	7dfb      	ldrb	r3, [r7, #23]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f040 809a 	bne.w	800cf7a <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ce4e:	7dbb      	ldrb	r3, [r7, #22]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d102      	bne.n	800ce5a <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ce54:	2304      	movs	r3, #4
 800ce56:	75fb      	strb	r3, [r7, #23]
 800ce58:	e096      	b.n	800cf88 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	2b04      	cmp	r3, #4
 800ce60:	d118      	bne.n	800ce94 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800ce62:	7dbb      	ldrb	r3, [r7, #22]
 800ce64:	2b85      	cmp	r3, #133	@ 0x85
 800ce66:	d179      	bne.n	800cf5c <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7ff fe17 	bl	800caa4 <load_xdir>
 800ce76:	4603      	mov	r3, r0
 800ce78:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800ce7a:	7dfb      	ldrb	r3, [r7, #23]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d17e      	bne.n	800cf7e <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	3304      	adds	r3, #4
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce8c:	b2da      	uxtb	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	719a      	strb	r2, [r3, #6]
					}
					break;
 800ce92:	e074      	b.n	800cf7e <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce98:	330b      	adds	r3, #11
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cea0:	73fb      	strb	r3, [r7, #15]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	7bfa      	ldrb	r2, [r7, #15]
 800cea6:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cea8:	7dbb      	ldrb	r3, [r7, #22]
 800ceaa:	2be5      	cmp	r3, #229	@ 0xe5
 800ceac:	d00e      	beq.n	800cecc <dir_read+0xbc>
 800ceae:	7dbb      	ldrb	r3, [r7, #22]
 800ceb0:	2b2e      	cmp	r3, #46	@ 0x2e
 800ceb2:	d00b      	beq.n	800cecc <dir_read+0xbc>
 800ceb4:	7bfb      	ldrb	r3, [r7, #15]
 800ceb6:	f023 0320 	bic.w	r3, r3, #32
 800ceba:	2b08      	cmp	r3, #8
 800cebc:	bf0c      	ite	eq
 800cebe:	2301      	moveq	r3, #1
 800cec0:	2300      	movne	r3, #0
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	461a      	mov	r2, r3
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d002      	beq.n	800ced2 <dir_read+0xc2>
				ord = 0xFF;
 800cecc:	23ff      	movs	r3, #255	@ 0xff
 800cece:	757b      	strb	r3, [r7, #21]
 800ced0:	e044      	b.n	800cf5c <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ced2:	7bfb      	ldrb	r3, [r7, #15]
 800ced4:	2b0f      	cmp	r3, #15
 800ced6:	d12f      	bne.n	800cf38 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ced8:	7dbb      	ldrb	r3, [r7, #22]
 800ceda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00d      	beq.n	800cefe <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cee6:	7b5b      	ldrb	r3, [r3, #13]
 800cee8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ceea:	7dbb      	ldrb	r3, [r7, #22]
 800ceec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cef0:	75bb      	strb	r3, [r7, #22]
 800cef2:	7dbb      	ldrb	r3, [r7, #22]
 800cef4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cefe:	7dba      	ldrb	r2, [r7, #22]
 800cf00:	7d7b      	ldrb	r3, [r7, #21]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d115      	bne.n	800cf32 <dir_read+0x122>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf0a:	330d      	adds	r3, #13
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	7d3a      	ldrb	r2, [r7, #20]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d10e      	bne.n	800cf32 <dir_read+0x122>
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	68da      	ldr	r2, [r3, #12]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	4610      	mov	r0, r2
 800cf20:	f7ff fbe4 	bl	800c6ec <pick_lfn>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d003      	beq.n	800cf32 <dir_read+0x122>
 800cf2a:	7d7b      	ldrb	r3, [r7, #21]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	e000      	b.n	800cf34 <dir_read+0x124>
 800cf32:	23ff      	movs	r3, #255	@ 0xff
 800cf34:	757b      	strb	r3, [r7, #21]
 800cf36:	e011      	b.n	800cf5c <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cf38:	7d7b      	ldrb	r3, [r7, #21]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d109      	bne.n	800cf52 <dir_read+0x142>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7ff fd2c 	bl	800c9a0 <sum_sfn>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	7d3b      	ldrb	r3, [r7, #20]
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d017      	beq.n	800cf82 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f04f 32ff 	mov.w	r2, #4294967295
 800cf58:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800cf5a:	e012      	b.n	800cf82 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7ff f9e3 	bl	800c32a <dir_next>
 800cf64:	4603      	mov	r3, r0
 800cf66:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10b      	bne.n	800cf86 <dir_read+0x176>
	while (dp->sect) {
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f47f af5b 	bne.w	800ce2e <dir_read+0x1e>
 800cf78:	e006      	b.n	800cf88 <dir_read+0x178>
		if (res != FR_OK) break;
 800cf7a:	bf00      	nop
 800cf7c:	e004      	b.n	800cf88 <dir_read+0x178>
					break;
 800cf7e:	bf00      	nop
 800cf80:	e002      	b.n	800cf88 <dir_read+0x178>
					break;
 800cf82:	bf00      	nop
 800cf84:	e000      	b.n	800cf88 <dir_read+0x178>
		if (res != FR_OK) break;
 800cf86:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cf88:	7dfb      	ldrb	r3, [r7, #23]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d002      	beq.n	800cf94 <dir_read+0x184>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800cf94:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3718      	adds	r7, #24
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cf9e:	b590      	push	{r4, r7, lr}
 800cfa0:	b089      	sub	sp, #36	@ 0x24
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cfac:	2100      	movs	r1, #0
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff f935 	bl	800c21e <dir_sdi>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800cfb8:	7ffb      	ldrb	r3, [r7, #31]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d001      	beq.n	800cfc2 <dir_find+0x24>
 800cfbe:	7ffb      	ldrb	r3, [r7, #31]
 800cfc0:	e113      	b.n	800d1ea <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	2b04      	cmp	r3, #4
 800cfc8:	d165      	bne.n	800d096 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7ff fd37 	bl	800ca42 <xname_sum>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800cfd8:	e050      	b.n	800d07c <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	691b      	ldr	r3, [r3, #16]
 800cfde:	3324      	adds	r3, #36	@ 0x24
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fd fed3 	bl	800ad8c <ld_word>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	461a      	mov	r2, r3
 800cfea:	893b      	ldrh	r3, [r7, #8]
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d144      	bne.n	800d07a <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800cff8:	76fb      	strb	r3, [r7, #27]
 800cffa:	2340      	movs	r3, #64	@ 0x40
 800cffc:	617b      	str	r3, [r7, #20]
 800cffe:	2300      	movs	r3, #0
 800d000:	613b      	str	r3, [r7, #16]
 800d002:	e029      	b.n	800d058 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	f003 031f 	and.w	r3, r3, #31
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d102      	bne.n	800d014 <dir_find+0x76>
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	3302      	adds	r3, #2
 800d012:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	691a      	ldr	r2, [r3, #16]
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	4413      	add	r3, r2
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fd feb5 	bl	800ad8c <ld_word>
 800d022:	4603      	mov	r3, r0
 800d024:	4618      	mov	r0, r3
 800d026:	f002 fa03 	bl	800f430 <ff_wtoupper>
 800d02a:	4603      	mov	r3, r0
 800d02c:	461c      	mov	r4, r3
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	68da      	ldr	r2, [r3, #12]
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	005b      	lsls	r3, r3, #1
 800d036:	4413      	add	r3, r2
 800d038:	881b      	ldrh	r3, [r3, #0]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f002 f9f8 	bl	800f430 <ff_wtoupper>
 800d040:	4603      	mov	r3, r0
 800d042:	429c      	cmp	r4, r3
 800d044:	d10c      	bne.n	800d060 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d046:	7efb      	ldrb	r3, [r7, #27]
 800d048:	3b01      	subs	r3, #1
 800d04a:	76fb      	strb	r3, [r7, #27]
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	3302      	adds	r3, #2
 800d050:	617b      	str	r3, [r7, #20]
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	3301      	adds	r3, #1
 800d056:	613b      	str	r3, [r7, #16]
 800d058:	7efb      	ldrb	r3, [r7, #27]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d1d2      	bne.n	800d004 <dir_find+0x66>
 800d05e:	e000      	b.n	800d062 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d060:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d062:	7efb      	ldrb	r3, [r7, #27]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d109      	bne.n	800d07c <dir_find+0xde>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	68da      	ldr	r2, [r3, #12]
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	005b      	lsls	r3, r3, #1
 800d070:	4413      	add	r3, r2
 800d072:	881b      	ldrh	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d00b      	beq.n	800d090 <dir_find+0xf2>
 800d078:	e000      	b.n	800d07c <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800d07a:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800d07c:	2100      	movs	r1, #0
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7ff fec6 	bl	800ce10 <dir_read>
 800d084:	4603      	mov	r3, r0
 800d086:	77fb      	strb	r3, [r7, #31]
 800d088:	7ffb      	ldrb	r3, [r7, #31]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d0a5      	beq.n	800cfda <dir_find+0x3c>
 800d08e:	e000      	b.n	800d092 <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d090:	bf00      	nop
		}
		return res;
 800d092:	7ffb      	ldrb	r3, [r7, #31]
 800d094:	e0a9      	b.n	800d1ea <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d096:	23ff      	movs	r3, #255	@ 0xff
 800d098:	773b      	strb	r3, [r7, #28]
 800d09a:	7f3b      	ldrb	r3, [r7, #28]
 800d09c:	777b      	strb	r3, [r7, #29]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f7fe fab3 	bl	800b618 <move_window>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800d0b6:	7ffb      	ldrb	r3, [r7, #31]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f040 8090 	bne.w	800d1de <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d0c6:	7fbb      	ldrb	r3, [r7, #30]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d102      	bne.n	800d0d2 <dir_find+0x134>
 800d0cc:	2304      	movs	r3, #4
 800d0ce:	77fb      	strb	r3, [r7, #31]
 800d0d0:	e08a      	b.n	800d1e8 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0d6:	330b      	adds	r3, #11
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d0de:	72fb      	strb	r3, [r7, #11]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	7afa      	ldrb	r2, [r7, #11]
 800d0e4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d0e6:	7fbb      	ldrb	r3, [r7, #30]
 800d0e8:	2be5      	cmp	r3, #229	@ 0xe5
 800d0ea:	d007      	beq.n	800d0fc <dir_find+0x15e>
 800d0ec:	7afb      	ldrb	r3, [r7, #11]
 800d0ee:	f003 0308 	and.w	r3, r3, #8
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d009      	beq.n	800d10a <dir_find+0x16c>
 800d0f6:	7afb      	ldrb	r3, [r7, #11]
 800d0f8:	2b0f      	cmp	r3, #15
 800d0fa:	d006      	beq.n	800d10a <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d0fc:	23ff      	movs	r3, #255	@ 0xff
 800d0fe:	777b      	strb	r3, [r7, #29]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f04f 32ff 	mov.w	r2, #4294967295
 800d106:	64da      	str	r2, [r3, #76]	@ 0x4c
 800d108:	e05e      	b.n	800d1c8 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d10a:	7afb      	ldrb	r3, [r7, #11]
 800d10c:	2b0f      	cmp	r3, #15
 800d10e:	d136      	bne.n	800d17e <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d154      	bne.n	800d1c8 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d11e:	7fbb      	ldrb	r3, [r7, #30]
 800d120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d124:	2b00      	cmp	r3, #0
 800d126:	d00d      	beq.n	800d144 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d12c:	7b5b      	ldrb	r3, [r3, #13]
 800d12e:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d130:	7fbb      	ldrb	r3, [r7, #30]
 800d132:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d136:	77bb      	strb	r3, [r7, #30]
 800d138:	7fbb      	ldrb	r3, [r7, #30]
 800d13a:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d144:	7fba      	ldrb	r2, [r7, #30]
 800d146:	7f7b      	ldrb	r3, [r7, #29]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d115      	bne.n	800d178 <dir_find+0x1da>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d150:	330d      	adds	r3, #13
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	7f3a      	ldrb	r2, [r7, #28]
 800d156:	429a      	cmp	r2, r3
 800d158:	d10e      	bne.n	800d178 <dir_find+0x1da>
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	68da      	ldr	r2, [r3, #12]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d162:	4619      	mov	r1, r3
 800d164:	4610      	mov	r0, r2
 800d166:	f7ff fa51 	bl	800c60c <cmp_lfn>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d003      	beq.n	800d178 <dir_find+0x1da>
 800d170:	7f7b      	ldrb	r3, [r7, #29]
 800d172:	3b01      	subs	r3, #1
 800d174:	b2db      	uxtb	r3, r3
 800d176:	e000      	b.n	800d17a <dir_find+0x1dc>
 800d178:	23ff      	movs	r3, #255	@ 0xff
 800d17a:	777b      	strb	r3, [r7, #29]
 800d17c:	e024      	b.n	800d1c8 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d17e:	7f7b      	ldrb	r3, [r7, #29]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d109      	bne.n	800d198 <dir_find+0x1fa>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d188:	4618      	mov	r0, r3
 800d18a:	f7ff fc09 	bl	800c9a0 <sum_sfn>
 800d18e:	4603      	mov	r3, r0
 800d190:	461a      	mov	r2, r3
 800d192:	7f3b      	ldrb	r3, [r7, #28]
 800d194:	4293      	cmp	r3, r2
 800d196:	d024      	beq.n	800d1e2 <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d19e:	f003 0301 	and.w	r3, r3, #1
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10a      	bne.n	800d1bc <dir_find+0x21e>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	3340      	adds	r3, #64	@ 0x40
 800d1ae:	220b      	movs	r2, #11
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	f7fe f80d 	bl	800b1d0 <mem_cmp>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d014      	beq.n	800d1e6 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d1bc:	23ff      	movs	r3, #255	@ 0xff
 800d1be:	777b      	strb	r3, [r7, #29]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1c6:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff f8ad 	bl	800c32a <dir_next>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800d1d4:	7ffb      	ldrb	r3, [r7, #31]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f43f af65 	beq.w	800d0a6 <dir_find+0x108>
 800d1dc:	e004      	b.n	800d1e8 <dir_find+0x24a>
		if (res != FR_OK) break;
 800d1de:	bf00      	nop
 800d1e0:	e002      	b.n	800d1e8 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d1e2:	bf00      	nop
 800d1e4:	e000      	b.n	800d1e8 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d1e6:	bf00      	nop

	return res;
 800d1e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3724      	adds	r7, #36	@ 0x24
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd90      	pop	{r4, r7, pc}
	...

0800d1f4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d1f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d1f8:	b0a0      	sub	sp, #128	@ 0x80
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d20a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d001      	beq.n	800d216 <dir_register+0x22>
 800d212:	2306      	movs	r3, #6
 800d214:	e18e      	b.n	800d534 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d216:	2300      	movs	r3, #0
 800d218:	677b      	str	r3, [r7, #116]	@ 0x74
 800d21a:	e002      	b.n	800d222 <dir_register+0x2e>
 800d21c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d21e:	3301      	adds	r3, #1
 800d220:	677b      	str	r3, [r7, #116]	@ 0x74
 800d222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d224:	68da      	ldr	r2, [r3, #12]
 800d226:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	4413      	add	r3, r2
 800d22c:	881b      	ldrh	r3, [r3, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1f4      	bne.n	800d21c <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2b04      	cmp	r3, #4
 800d238:	f040 809f 	bne.w	800d37a <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d23c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d23e:	330e      	adds	r3, #14
 800d240:	4aa2      	ldr	r2, [pc, #648]	@ (800d4cc <dir_register+0x2d8>)
 800d242:	fba2 2303 	umull	r2, r3, r2, r3
 800d246:	08db      	lsrs	r3, r3, #3
 800d248:	3302      	adds	r3, #2
 800d24a:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800d24c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f7ff f940 	bl	800c4d4 <dir_alloc>
 800d254:	4603      	mov	r3, r0
 800d256:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800d25a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d002      	beq.n	800d268 <dir_register+0x74>
 800d262:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d266:	e165      	b.n	800d534 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d26c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d26e:	3b01      	subs	r3, #1
 800d270:	015b      	lsls	r3, r3, #5
 800d272:	1ad2      	subs	r2, r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d072      	beq.n	800d366 <dir_register+0x172>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	79db      	ldrb	r3, [r3, #7]
 800d284:	f003 0304 	and.w	r3, r3, #4
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d06c      	beq.n	800d366 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d292:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d294:	8949      	ldrh	r1, [r1, #10]
 800d296:	0249      	lsls	r1, r1, #9
 800d298:	2000      	movs	r0, #0
 800d29a:	460c      	mov	r4, r1
 800d29c:	4605      	mov	r5, r0
 800d29e:	eb12 0804 	adds.w	r8, r2, r4
 800d2a2:	eb43 0905 	adc.w	r9, r3, r5
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fe fd5c 	bl	800bd6c <fill_first_frag>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d2ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d002      	beq.n	800d2c8 <dir_register+0xd4>
 800d2c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d2c6:	e135      	b.n	800d534 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	f7fe fd79 	bl	800bdca <fill_last_frag>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d2de:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d002      	beq.n	800d2ec <dir_register+0xf8>
 800d2e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d2ea:	e123      	b.n	800d534 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	f107 0308 	add.w	r3, r7, #8
 800d2f2:	4611      	mov	r1, r2
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7ff fc93 	bl	800cc20 <load_obj_dir>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d300:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d304:	2b00      	cmp	r3, #0
 800d306:	d002      	beq.n	800d30e <dir_register+0x11a>
 800d308:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d30c:	e112      	b.n	800d534 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800d30e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d310:	691b      	ldr	r3, [r3, #16]
 800d312:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d31c:	4608      	mov	r0, r1
 800d31e:	f7fd fe93 	bl	800b048 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800d322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d330:	4608      	mov	r0, r1
 800d332:	f7fd fe89 	bl	800b048 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	79da      	ldrb	r2, [r3, #7]
 800d33a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	3321      	adds	r3, #33	@ 0x21
 800d340:	f042 0201 	orr.w	r2, r2, #1
 800d344:	b2d2      	uxtb	r2, r2
 800d346:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800d348:	f107 0308 	add.w	r3, r7, #8
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7ff fc9d 	bl	800cc8c <store_xdir>
 800d352:	4603      	mov	r3, r0
 800d354:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d358:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d002      	beq.n	800d366 <dir_register+0x172>
 800d360:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d364:	e0e6      	b.n	800d534 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800d366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d368:	691a      	ldr	r2, [r3, #16]
 800d36a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	4619      	mov	r1, r3
 800d370:	4610      	mov	r0, r2
 800d372:	f7ff fce6 	bl	800cd42 <create_xdir>
		return FR_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	e0dc      	b.n	800d534 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800d380:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d384:	220c      	movs	r2, #12
 800d386:	4618      	mov	r0, r3
 800d388:	f7fd fee6 	bl	800b158 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d38c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d390:	f003 0301 	and.w	r3, r3, #1
 800d394:	2b00      	cmp	r3, #0
 800d396:	d033      	beq.n	800d400 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2240      	movs	r2, #64	@ 0x40
 800d39c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d3a4:	e016      	b.n	800d3d4 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800d3ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3ae:	68da      	ldr	r2, [r3, #12]
 800d3b0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800d3b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3b6:	f7ff fa65 	bl	800c884 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7ff fdef 	bl	800cf9e <dir_find>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800d3c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d106      	bne.n	800d3dc <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800d3ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d3d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3d6:	2b63      	cmp	r3, #99	@ 0x63
 800d3d8:	d9e5      	bls.n	800d3a6 <dir_register+0x1b2>
 800d3da:	e000      	b.n	800d3de <dir_register+0x1ea>
			if (res != FR_OK) break;
 800d3dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d3de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d3e0:	2b64      	cmp	r3, #100	@ 0x64
 800d3e2:	d101      	bne.n	800d3e8 <dir_register+0x1f4>
 800d3e4:	2307      	movs	r3, #7
 800d3e6:	e0a5      	b.n	800d534 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d3e8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d3ec:	2b04      	cmp	r3, #4
 800d3ee:	d002      	beq.n	800d3f6 <dir_register+0x202>
 800d3f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d3f4:	e09e      	b.n	800d534 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d3f6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d400:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d404:	f003 0302 	and.w	r3, r3, #2
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d007      	beq.n	800d41c <dir_register+0x228>
 800d40c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d40e:	330c      	adds	r3, #12
 800d410:	4a2f      	ldr	r2, [pc, #188]	@ (800d4d0 <dir_register+0x2dc>)
 800d412:	fba2 2303 	umull	r2, r3, r2, r3
 800d416:	089b      	lsrs	r3, r3, #2
 800d418:	3301      	adds	r3, #1
 800d41a:	e000      	b.n	800d41e <dir_register+0x22a>
 800d41c:	2301      	movs	r3, #1
 800d41e:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d420:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7ff f856 	bl	800c4d4 <dir_alloc>
 800d428:	4603      	mov	r3, r0
 800d42a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d42e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d432:	2b00      	cmp	r3, #0
 800d434:	d14f      	bne.n	800d4d6 <dir_register+0x2e2>
 800d436:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d438:	3b01      	subs	r3, #1
 800d43a:	673b      	str	r3, [r7, #112]	@ 0x70
 800d43c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d049      	beq.n	800d4d6 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d446:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d448:	015b      	lsls	r3, r3, #5
 800d44a:	1ad3      	subs	r3, r2, r3
 800d44c:	4619      	mov	r1, r3
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f7fe fee5 	bl	800c21e <dir_sdi>
 800d454:	4603      	mov	r3, r0
 800d456:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800d45a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d139      	bne.n	800d4d6 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	3340      	adds	r3, #64	@ 0x40
 800d466:	4618      	mov	r0, r3
 800d468:	f7ff fa9a 	bl	800c9a0 <sum_sfn>
 800d46c:	4603      	mov	r3, r0
 800d46e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d476:	4619      	mov	r1, r3
 800d478:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d47a:	f7fe f8cd 	bl	800b618 <move_window>
 800d47e:	4603      	mov	r3, r0
 800d480:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800d484:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d123      	bne.n	800d4d4 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d48c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d48e:	68d8      	ldr	r0, [r3, #12]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d494:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d496:	b2da      	uxtb	r2, r3
 800d498:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d49c:	f7ff f98a 	bl	800c7b4 <put_lfn>
				fs->wflag = 1;
 800d4a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7fe ff3e 	bl	800c32a <dir_next>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800d4b4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d10c      	bne.n	800d4d6 <dir_register+0x2e2>
 800d4bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d4c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d1d4      	bne.n	800d472 <dir_register+0x27e>
 800d4c8:	e005      	b.n	800d4d6 <dir_register+0x2e2>
 800d4ca:	bf00      	nop
 800d4cc:	88888889 	.word	0x88888889
 800d4d0:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800d4d4:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d4d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d128      	bne.n	800d530 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d4e6:	f7fe f897 	bl	800b618 <move_window>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800d4f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d11b      	bne.n	800d530 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4fc:	2220      	movs	r2, #32
 800d4fe:	2100      	movs	r1, #0
 800d500:	4618      	mov	r0, r3
 800d502:	f7fd fe4a 	bl	800b19a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	3340      	adds	r3, #64	@ 0x40
 800d50e:	220b      	movs	r2, #11
 800d510:	4619      	mov	r1, r3
 800d512:	f7fd fe21 	bl	800b158 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d520:	330c      	adds	r3, #12
 800d522:	f002 0218 	and.w	r2, r2, #24
 800d526:	b2d2      	uxtb	r2, r2
 800d528:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d52a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d52c:	2201      	movs	r2, #1
 800d52e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d530:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800d534:	4618      	mov	r0, r3
 800d536:	3780      	adds	r7, #128	@ 0x80
 800d538:	46bd      	mov	sp, r7
 800d53a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d53e:	bf00      	nop

0800d540 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b08a      	sub	sp, #40	@ 0x28
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	613b      	str	r3, [r7, #16]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	60fb      	str	r3, [r7, #12]
 800d558:	2300      	movs	r3, #0
 800d55a:	617b      	str	r3, [r7, #20]
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	1c5a      	adds	r2, r3, #1
 800d564:	61ba      	str	r2, [r7, #24]
 800d566:	693a      	ldr	r2, [r7, #16]
 800d568:	4413      	add	r3, r2
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d56e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d570:	2b1f      	cmp	r3, #31
 800d572:	d940      	bls.n	800d5f6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d574:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d576:	2b2f      	cmp	r3, #47	@ 0x2f
 800d578:	d006      	beq.n	800d588 <create_name+0x48>
 800d57a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d57c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d57e:	d110      	bne.n	800d5a2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d580:	e002      	b.n	800d588 <create_name+0x48>
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	3301      	adds	r3, #1
 800d586:	61bb      	str	r3, [r7, #24]
 800d588:	693a      	ldr	r2, [r7, #16]
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	4413      	add	r3, r2
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	2b2f      	cmp	r3, #47	@ 0x2f
 800d592:	d0f6      	beq.n	800d582 <create_name+0x42>
 800d594:	693a      	ldr	r2, [r7, #16]
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	4413      	add	r3, r2
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d59e:	d0f0      	beq.n	800d582 <create_name+0x42>
			break;
 800d5a0:	e02a      	b.n	800d5f8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	2bfe      	cmp	r3, #254	@ 0xfe
 800d5a6:	d901      	bls.n	800d5ac <create_name+0x6c>
 800d5a8:	2306      	movs	r3, #6
 800d5aa:	e17d      	b.n	800d8a8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d5ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d5b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f001 fefe 	bl	800f3b8 <ff_convert>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d5c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d101      	bne.n	800d5ca <create_name+0x8a>
 800d5c6:	2306      	movs	r3, #6
 800d5c8:	e16e      	b.n	800d8a8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d5ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5cc:	2b7f      	cmp	r3, #127	@ 0x7f
 800d5ce:	d809      	bhi.n	800d5e4 <create_name+0xa4>
 800d5d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	488d      	ldr	r0, [pc, #564]	@ (800d80c <create_name+0x2cc>)
 800d5d6:	f7fd fe22 	bl	800b21e <chk_chr>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d001      	beq.n	800d5e4 <create_name+0xa4>
 800d5e0:	2306      	movs	r3, #6
 800d5e2:	e161      	b.n	800d8a8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	1c5a      	adds	r2, r3, #1
 800d5e8:	617a      	str	r2, [r7, #20]
 800d5ea:	005b      	lsls	r3, r3, #1
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	4413      	add	r3, r2
 800d5f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d5f2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d5f4:	e7b4      	b.n	800d560 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d5f6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d5f8:	693a      	ldr	r2, [r7, #16]
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	441a      	add	r2, r3
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d602:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d604:	2b1f      	cmp	r3, #31
 800d606:	d801      	bhi.n	800d60c <create_name+0xcc>
 800d608:	2304      	movs	r3, #4
 800d60a:	e000      	b.n	800d60e <create_name+0xce>
 800d60c:	2300      	movs	r3, #0
 800d60e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d612:	e011      	b.n	800d638 <create_name+0xf8>
		w = lfn[di - 1];
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d61a:	3b01      	subs	r3, #1
 800d61c:	005b      	lsls	r3, r3, #1
 800d61e:	68fa      	ldr	r2, [r7, #12]
 800d620:	4413      	add	r3, r2
 800d622:	881b      	ldrh	r3, [r3, #0]
 800d624:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800d626:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d628:	2b20      	cmp	r3, #32
 800d62a:	d002      	beq.n	800d632 <create_name+0xf2>
 800d62c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d62e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d630:	d106      	bne.n	800d640 <create_name+0x100>
		di--;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	3b01      	subs	r3, #1
 800d636:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1ea      	bne.n	800d614 <create_name+0xd4>
 800d63e:	e000      	b.n	800d642 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d640:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	005b      	lsls	r3, r3, #1
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	4413      	add	r3, r2
 800d64a:	2200      	movs	r2, #0
 800d64c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d101      	bne.n	800d658 <create_name+0x118>
 800d654:	2306      	movs	r3, #6
 800d656:	e127      	b.n	800d8a8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	3340      	adds	r3, #64	@ 0x40
 800d65c:	220b      	movs	r2, #11
 800d65e:	2120      	movs	r1, #32
 800d660:	4618      	mov	r0, r3
 800d662:	f7fd fd9a 	bl	800b19a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d666:	2300      	movs	r3, #0
 800d668:	61bb      	str	r3, [r7, #24]
 800d66a:	e002      	b.n	800d672 <create_name+0x132>
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	3301      	adds	r3, #1
 800d670:	61bb      	str	r3, [r7, #24]
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	005b      	lsls	r3, r3, #1
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	4413      	add	r3, r2
 800d67a:	881b      	ldrh	r3, [r3, #0]
 800d67c:	2b20      	cmp	r3, #32
 800d67e:	d0f5      	beq.n	800d66c <create_name+0x12c>
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	005b      	lsls	r3, r3, #1
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	4413      	add	r3, r2
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d68c:	d0ee      	beq.n	800d66c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d009      	beq.n	800d6a8 <create_name+0x168>
 800d694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d698:	f043 0303 	orr.w	r3, r3, #3
 800d69c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d6a0:	e002      	b.n	800d6a8 <create_name+0x168>
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	617b      	str	r3, [r7, #20]
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d009      	beq.n	800d6c2 <create_name+0x182>
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	005b      	lsls	r3, r3, #1
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	881b      	ldrh	r3, [r3, #0]
 800d6be:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6c0:	d1ef      	bne.n	800d6a2 <create_name+0x162>

	i = b = 0; ni = 8;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	623b      	str	r3, [r7, #32]
 800d6cc:	2308      	movs	r3, #8
 800d6ce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	1c5a      	adds	r2, r3, #1
 800d6d4:	61ba      	str	r2, [r7, #24]
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	4413      	add	r3, r2
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d6e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	f000 8090 	beq.w	800d808 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d6e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6ea:	2b20      	cmp	r3, #32
 800d6ec:	d006      	beq.n	800d6fc <create_name+0x1bc>
 800d6ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6f2:	d10a      	bne.n	800d70a <create_name+0x1ca>
 800d6f4:	69ba      	ldr	r2, [r7, #24]
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d006      	beq.n	800d70a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d700:	f043 0303 	orr.w	r3, r3, #3
 800d704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d708:	e07d      	b.n	800d806 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d70a:	6a3a      	ldr	r2, [r7, #32]
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d203      	bcs.n	800d71a <create_name+0x1da>
 800d712:	69ba      	ldr	r2, [r7, #24]
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	429a      	cmp	r2, r3
 800d718:	d123      	bne.n	800d762 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	2b0b      	cmp	r3, #11
 800d71e:	d106      	bne.n	800d72e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d724:	f043 0303 	orr.w	r3, r3, #3
 800d728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d72c:	e075      	b.n	800d81a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d72e:	69ba      	ldr	r2, [r7, #24]
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	429a      	cmp	r2, r3
 800d734:	d005      	beq.n	800d742 <create_name+0x202>
 800d736:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d73a:	f043 0303 	orr.w	r3, r3, #3
 800d73e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800d742:	69ba      	ldr	r2, [r7, #24]
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	429a      	cmp	r2, r3
 800d748:	d866      	bhi.n	800d818 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	61bb      	str	r3, [r7, #24]
 800d74e:	2308      	movs	r3, #8
 800d750:	623b      	str	r3, [r7, #32]
 800d752:	230b      	movs	r3, #11
 800d754:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d756:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d760:	e051      	b.n	800d806 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d762:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d764:	2b7f      	cmp	r3, #127	@ 0x7f
 800d766:	d914      	bls.n	800d792 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d768:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d76a:	2100      	movs	r1, #0
 800d76c:	4618      	mov	r0, r3
 800d76e:	f001 fe23 	bl	800f3b8 <ff_convert>
 800d772:	4603      	mov	r3, r0
 800d774:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d776:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d004      	beq.n	800d786 <create_name+0x246>
 800d77c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d77e:	3b80      	subs	r3, #128	@ 0x80
 800d780:	4a23      	ldr	r2, [pc, #140]	@ (800d810 <create_name+0x2d0>)
 800d782:	5cd3      	ldrb	r3, [r2, r3]
 800d784:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d78a:	f043 0302 	orr.w	r3, r3, #2
 800d78e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d794:	2b00      	cmp	r3, #0
 800d796:	d007      	beq.n	800d7a8 <create_name+0x268>
 800d798:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d79a:	4619      	mov	r1, r3
 800d79c:	481d      	ldr	r0, [pc, #116]	@ (800d814 <create_name+0x2d4>)
 800d79e:	f7fd fd3e 	bl	800b21e <chk_chr>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d008      	beq.n	800d7ba <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d7a8:	235f      	movs	r3, #95	@ 0x5f
 800d7aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7b0:	f043 0303 	orr.w	r3, r3, #3
 800d7b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d7b8:	e01b      	b.n	800d7f2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d7ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7bc:	2b40      	cmp	r3, #64	@ 0x40
 800d7be:	d909      	bls.n	800d7d4 <create_name+0x294>
 800d7c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7c2:	2b5a      	cmp	r3, #90	@ 0x5a
 800d7c4:	d806      	bhi.n	800d7d4 <create_name+0x294>
					b |= 2;
 800d7c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d7ca:	f043 0302 	orr.w	r3, r3, #2
 800d7ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d7d2:	e00e      	b.n	800d7f2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d7d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7d6:	2b60      	cmp	r3, #96	@ 0x60
 800d7d8:	d90b      	bls.n	800d7f2 <create_name+0x2b2>
 800d7da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7dc:	2b7a      	cmp	r3, #122	@ 0x7a
 800d7de:	d808      	bhi.n	800d7f2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d7e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d7e4:	f043 0301 	orr.w	r3, r3, #1
 800d7e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d7ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7ee:	3b20      	subs	r3, #32
 800d7f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d7f2:	6a3b      	ldr	r3, [r7, #32]
 800d7f4:	1c5a      	adds	r2, r3, #1
 800d7f6:	623a      	str	r2, [r7, #32]
 800d7f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d7fa:	b2d1      	uxtb	r1, r2
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	4413      	add	r3, r2
 800d800:	460a      	mov	r2, r1
 800d802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800d806:	e763      	b.n	800d6d0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d808:	bf00      	nop
 800d80a:	e006      	b.n	800d81a <create_name+0x2da>
 800d80c:	080162e4 	.word	0x080162e4
 800d810:	08016374 	.word	0x08016374
 800d814:	080162f0 	.word	0x080162f0
			if (si > di) break;			/* No extension */
 800d818:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d820:	2be5      	cmp	r3, #229	@ 0xe5
 800d822:	d103      	bne.n	800d82c <create_name+0x2ec>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2205      	movs	r2, #5
 800d828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	2b08      	cmp	r3, #8
 800d830:	d104      	bne.n	800d83c <create_name+0x2fc>
 800d832:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d83c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d840:	f003 030c 	and.w	r3, r3, #12
 800d844:	2b0c      	cmp	r3, #12
 800d846:	d005      	beq.n	800d854 <create_name+0x314>
 800d848:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d84c:	f003 0303 	and.w	r3, r3, #3
 800d850:	2b03      	cmp	r3, #3
 800d852:	d105      	bne.n	800d860 <create_name+0x320>
 800d854:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d858:	f043 0302 	orr.w	r3, r3, #2
 800d85c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d864:	f003 0302 	and.w	r3, r3, #2
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d117      	bne.n	800d89c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d86c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d870:	f003 0303 	and.w	r3, r3, #3
 800d874:	2b01      	cmp	r3, #1
 800d876:	d105      	bne.n	800d884 <create_name+0x344>
 800d878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d87c:	f043 0310 	orr.w	r3, r3, #16
 800d880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d884:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d888:	f003 030c 	and.w	r3, r3, #12
 800d88c:	2b04      	cmp	r3, #4
 800d88e:	d105      	bne.n	800d89c <create_name+0x35c>
 800d890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d894:	f043 0308 	orr.w	r3, r3, #8
 800d898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d8a2:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800d8a6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3728      	adds	r7, #40	@ 0x28
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d8c4:	e002      	b.n	800d8cc <follow_path+0x1c>
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	603b      	str	r3, [r7, #0]
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d8d2:	d0f8      	beq.n	800d8c6 <follow_path+0x16>
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d8da:	d0f4      	beq.n	800d8c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	2b1f      	cmp	r3, #31
 800d8ee:	d80a      	bhi.n	800d906 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2280      	movs	r2, #128	@ 0x80
 800d8f4:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f7fe fc8f 	bl	800c21e <dir_sdi>
 800d900:	4603      	mov	r3, r0
 800d902:	75fb      	strb	r3, [r7, #23]
 800d904:	e078      	b.n	800d9f8 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d906:	463b      	mov	r3, r7
 800d908:	4619      	mov	r1, r3
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f7ff fe18 	bl	800d540 <create_name>
 800d910:	4603      	mov	r3, r0
 800d912:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d914:	7dfb      	ldrb	r3, [r7, #23]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d169      	bne.n	800d9ee <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f7ff fb3f 	bl	800cf9e <dir_find>
 800d920:	4603      	mov	r3, r0
 800d922:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d92a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d92c:	7dfb      	ldrb	r3, [r7, #23]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00a      	beq.n	800d948 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d932:	7dfb      	ldrb	r3, [r7, #23]
 800d934:	2b04      	cmp	r3, #4
 800d936:	d15c      	bne.n	800d9f2 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d938:	7afb      	ldrb	r3, [r7, #11]
 800d93a:	f003 0304 	and.w	r3, r3, #4
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d157      	bne.n	800d9f2 <follow_path+0x142>
 800d942:	2305      	movs	r3, #5
 800d944:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d946:	e054      	b.n	800d9f2 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d948:	7afb      	ldrb	r3, [r7, #11]
 800d94a:	f003 0304 	and.w	r3, r3, #4
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d151      	bne.n	800d9f6 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	799b      	ldrb	r3, [r3, #6]
 800d956:	f003 0310 	and.w	r3, r3, #16
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d102      	bne.n	800d964 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800d95e:	2305      	movs	r3, #5
 800d960:	75fb      	strb	r3, [r7, #23]
 800d962:	e049      	b.n	800d9f8 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	2b04      	cmp	r3, #4
 800d96a:	d130      	bne.n	800d9ce <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	689a      	ldr	r2, [r3, #8]
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d97a:	4613      	mov	r3, r2
 800d97c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d980:	693a      	ldr	r2, [r7, #16]
 800d982:	79d2      	ldrb	r2, [r2, #7]
 800d984:	431a      	orrs	r2, r3
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	691b      	ldr	r3, [r3, #16]
 800d996:	3334      	adds	r3, #52	@ 0x34
 800d998:	4618      	mov	r0, r3
 800d99a:	f7fd fa10 	bl	800adbe <ld_dword>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	691b      	ldr	r3, [r3, #16]
 800d9a8:	3321      	adds	r3, #33	@ 0x21
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	f003 0302 	and.w	r3, r3, #2
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	691b      	ldr	r3, [r3, #16]
 800d9ba:	3338      	adds	r3, #56	@ 0x38
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7fd fa21 	bl	800ae04 <ld_qword>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	6939      	ldr	r1, [r7, #16]
 800d9c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d9cc:	e79b      	b.n	800d906 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9dc:	4413      	add	r3, r2
 800d9de:	4619      	mov	r1, r3
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f7fe fdd3 	bl	800c58c <ld_clust>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d9ec:	e78b      	b.n	800d906 <follow_path+0x56>
			if (res != FR_OK) break;
 800d9ee:	bf00      	nop
 800d9f0:	e002      	b.n	800d9f8 <follow_path+0x148>
				break;
 800d9f2:	bf00      	nop
 800d9f4:	e000      	b.n	800d9f8 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d9f6:	bf00      	nop
			}
		}
	}

	return res;
 800d9f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3718      	adds	r7, #24
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800da02:	b480      	push	{r7}
 800da04:	b087      	sub	sp, #28
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800da0a:	f04f 33ff 	mov.w	r3, #4294967295
 800da0e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d031      	beq.n	800da7c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	617b      	str	r3, [r7, #20]
 800da1e:	e002      	b.n	800da26 <get_ldnumber+0x24>
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	3301      	adds	r3, #1
 800da24:	617b      	str	r3, [r7, #20]
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	2b1f      	cmp	r3, #31
 800da2c:	d903      	bls.n	800da36 <get_ldnumber+0x34>
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	2b3a      	cmp	r3, #58	@ 0x3a
 800da34:	d1f4      	bne.n	800da20 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b3a      	cmp	r3, #58	@ 0x3a
 800da3c:	d11c      	bne.n	800da78 <get_ldnumber+0x76>
			tp = *path;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	1c5a      	adds	r2, r3, #1
 800da48:	60fa      	str	r2, [r7, #12]
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	3b30      	subs	r3, #48	@ 0x30
 800da4e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	2b09      	cmp	r3, #9
 800da54:	d80e      	bhi.n	800da74 <get_ldnumber+0x72>
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d10a      	bne.n	800da74 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d107      	bne.n	800da74 <get_ldnumber+0x72>
					vol = (int)i;
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	3301      	adds	r3, #1
 800da6c:	617b      	str	r3, [r7, #20]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	697a      	ldr	r2, [r7, #20]
 800da72:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	e002      	b.n	800da7e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800da78:	2300      	movs	r3, #0
 800da7a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800da7c:	693b      	ldr	r3, [r7, #16]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	371c      	adds	r7, #28
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
	...

0800da8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	70da      	strb	r2, [r3, #3]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f04f 32ff 	mov.w	r2, #4294967295
 800daa2:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800daa4:	6839      	ldr	r1, [r7, #0]
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7fd fdb6 	bl	800b618 <move_window>
 800daac:	4603      	mov	r3, r0
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d001      	beq.n	800dab6 <check_fs+0x2a>
 800dab2:	2304      	movs	r3, #4
 800dab4:	e044      	b.n	800db40 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	333c      	adds	r3, #60	@ 0x3c
 800daba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7fd f964 	bl	800ad8c <ld_word>
 800dac4:	4603      	mov	r3, r0
 800dac6:	461a      	mov	r2, r3
 800dac8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dacc:	429a      	cmp	r2, r3
 800dace:	d001      	beq.n	800dad4 <check_fs+0x48>
 800dad0:	2303      	movs	r3, #3
 800dad2:	e035      	b.n	800db40 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dada:	2be9      	cmp	r3, #233	@ 0xe9
 800dadc:	d009      	beq.n	800daf2 <check_fs+0x66>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dae4:	2beb      	cmp	r3, #235	@ 0xeb
 800dae6:	d11e      	bne.n	800db26 <check_fs+0x9a>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800daee:	2b90      	cmp	r3, #144	@ 0x90
 800daf0:	d119      	bne.n	800db26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	333c      	adds	r3, #60	@ 0x3c
 800daf6:	3336      	adds	r3, #54	@ 0x36
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fd f960 	bl	800adbe <ld_dword>
 800dafe:	4603      	mov	r3, r0
 800db00:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800db04:	4a10      	ldr	r2, [pc, #64]	@ (800db48 <check_fs+0xbc>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d101      	bne.n	800db0e <check_fs+0x82>
 800db0a:	2300      	movs	r3, #0
 800db0c:	e018      	b.n	800db40 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	333c      	adds	r3, #60	@ 0x3c
 800db12:	3352      	adds	r3, #82	@ 0x52
 800db14:	4618      	mov	r0, r3
 800db16:	f7fd f952 	bl	800adbe <ld_dword>
 800db1a:	4603      	mov	r3, r0
 800db1c:	4a0b      	ldr	r2, [pc, #44]	@ (800db4c <check_fs+0xc0>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d101      	bne.n	800db26 <check_fs+0x9a>
 800db22:	2300      	movs	r3, #0
 800db24:	e00c      	b.n	800db40 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	333c      	adds	r3, #60	@ 0x3c
 800db2a:	220b      	movs	r2, #11
 800db2c:	4908      	ldr	r1, [pc, #32]	@ (800db50 <check_fs+0xc4>)
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fd fb4e 	bl	800b1d0 <mem_cmp>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d101      	bne.n	800db3e <check_fs+0xb2>
 800db3a:	2301      	movs	r3, #1
 800db3c:	e000      	b.n	800db40 <check_fs+0xb4>
#endif
	return 2;
 800db3e:	2302      	movs	r3, #2
}
 800db40:	4618      	mov	r0, r3
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	00544146 	.word	0x00544146
 800db4c:	33544146 	.word	0x33544146
 800db50:	080162f8 	.word	0x080162f8

0800db54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800db54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db58:	b09c      	sub	sp, #112	@ 0x70
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	61f8      	str	r0, [r7, #28]
 800db5e:	61b9      	str	r1, [r7, #24]
 800db60:	4613      	mov	r3, r2
 800db62:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	2200      	movs	r2, #0
 800db68:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800db6a:	69f8      	ldr	r0, [r7, #28]
 800db6c:	f7ff ff49 	bl	800da02 <get_ldnumber>
 800db70:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800db72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db74:	2b00      	cmp	r3, #0
 800db76:	da01      	bge.n	800db7c <find_volume+0x28>
 800db78:	230b      	movs	r3, #11
 800db7a:	e339      	b.n	800e1f0 <find_volume+0x69c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800db7c:	4a9d      	ldr	r2, [pc, #628]	@ (800ddf4 <find_volume+0x2a0>)
 800db7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db84:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800db86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d101      	bne.n	800db90 <find_volume+0x3c>
 800db8c:	230c      	movs	r3, #12
 800db8e:	e32f      	b.n	800e1f0 <find_volume+0x69c>

	ENTER_FF(fs);						/* Lock the volume */
 800db90:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800db92:	f7fd fb5f 	bl	800b254 <lock_fs>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d101      	bne.n	800dba0 <find_volume+0x4c>
 800db9c:	230f      	movs	r3, #15
 800db9e:	e327      	b.n	800e1f0 <find_volume+0x69c>
	*rfs = fs;							/* Return pointer to the file system object */
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dba4:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dba6:	7dfb      	ldrb	r3, [r7, #23]
 800dba8:	f023 0301 	bic.w	r3, r3, #1
 800dbac:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dbae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d01a      	beq.n	800dbec <find_volume+0x98>
		stat = disk_status(fs->drv);
 800dbb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbb8:	785b      	ldrb	r3, [r3, #1]
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fd f846 	bl	800ac4c <disk_status>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dbc6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dbca:	f003 0301 	and.w	r3, r3, #1
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d10c      	bne.n	800dbec <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dbd2:	7dfb      	ldrb	r3, [r7, #23]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d007      	beq.n	800dbe8 <find_volume+0x94>
 800dbd8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dbdc:	f003 0304 	and.w	r3, r3, #4
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d001      	beq.n	800dbe8 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800dbe4:	230a      	movs	r3, #10
 800dbe6:	e303      	b.n	800e1f0 <find_volume+0x69c>
			}
			return FR_OK;				/* The file system object is valid */
 800dbe8:	2300      	movs	r3, #0
 800dbea:	e301      	b.n	800e1f0 <find_volume+0x69c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dbec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbee:	2200      	movs	r2, #0
 800dbf0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dbf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbf8:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dbfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbfc:	785b      	ldrb	r3, [r3, #1]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fd f83e 	bl	800ac80 <disk_initialize>
 800dc04:	4603      	mov	r3, r0
 800dc06:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dc0a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dc0e:	f003 0301 	and.w	r3, r3, #1
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d001      	beq.n	800dc1a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dc16:	2303      	movs	r3, #3
 800dc18:	e2ea      	b.n	800e1f0 <find_volume+0x69c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dc1a:	7dfb      	ldrb	r3, [r7, #23]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d007      	beq.n	800dc30 <find_volume+0xdc>
 800dc20:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dc24:	f003 0304 	and.w	r3, r3, #4
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d001      	beq.n	800dc30 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800dc2c:	230a      	movs	r3, #10
 800dc2e:	e2df      	b.n	800e1f0 <find_volume+0x69c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dc34:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dc36:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800dc38:	f7ff ff28 	bl	800da8c <check_fs>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dc42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	d14d      	bne.n	800dce6 <find_volume+0x192>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dc4e:	e020      	b.n	800dc92 <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dc50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc52:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800dc56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc58:	011b      	lsls	r3, r3, #4
 800dc5a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800dc5e:	4413      	add	r3, r2
 800dc60:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dc62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc64:	3304      	adds	r3, #4
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d006      	beq.n	800dc7a <find_volume+0x126>
 800dc6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc6e:	3308      	adds	r3, #8
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7fd f8a4 	bl	800adbe <ld_dword>
 800dc76:	4602      	mov	r2, r0
 800dc78:	e000      	b.n	800dc7c <find_volume+0x128>
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	3360      	adds	r3, #96	@ 0x60
 800dc82:	f107 0110 	add.w	r1, r7, #16
 800dc86:	440b      	add	r3, r1
 800dc88:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc8e:	3301      	adds	r3, #1
 800dc90:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dc92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc94:	2b03      	cmp	r3, #3
 800dc96:	d9db      	bls.n	800dc50 <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dc98:	2300      	movs	r3, #0
 800dc9a:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800dc9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d002      	beq.n	800dca8 <find_volume+0x154>
 800dca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dca4:	3b01      	subs	r3, #1
 800dca6:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dca8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	3360      	adds	r3, #96	@ 0x60
 800dcae:	f107 0210 	add.w	r2, r7, #16
 800dcb2:	4413      	add	r3, r2
 800dcb4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800dcb8:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dcba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d005      	beq.n	800dccc <find_volume+0x178>
 800dcc0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dcc2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800dcc4:	f7ff fee2 	bl	800da8c <check_fs>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	e000      	b.n	800dcce <find_volume+0x17a>
 800dccc:	2303      	movs	r3, #3
 800dcce:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dcd2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d905      	bls.n	800dce6 <find_volume+0x192>
 800dcda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dcdc:	3301      	adds	r3, #1
 800dcde:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dce0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dce2:	2b03      	cmp	r3, #3
 800dce4:	d9e0      	bls.n	800dca8 <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dce6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dcea:	2b04      	cmp	r3, #4
 800dcec:	d101      	bne.n	800dcf2 <find_volume+0x19e>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e27e      	b.n	800e1f0 <find_volume+0x69c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dcf2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d901      	bls.n	800dcfe <find_volume+0x1aa>
 800dcfa:	230d      	movs	r3, #13
 800dcfc:	e278      	b.n	800e1f0 <find_volume+0x69c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800dcfe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	f040 80fa 	bne.w	800defc <find_volume+0x3a8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800dd08:	230b      	movs	r3, #11
 800dd0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dd0c:	e002      	b.n	800dd14 <find_volume+0x1c0>
 800dd0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd10:	3301      	adds	r3, #1
 800dd12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dd14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd16:	2b3f      	cmp	r3, #63	@ 0x3f
 800dd18:	d806      	bhi.n	800dd28 <find_volume+0x1d4>
 800dd1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dd1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd1e:	4413      	add	r3, r2
 800dd20:	333c      	adds	r3, #60	@ 0x3c
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d0f2      	beq.n	800dd0e <find_volume+0x1ba>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800dd28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd2a:	2b3f      	cmp	r3, #63	@ 0x3f
 800dd2c:	d801      	bhi.n	800dd32 <find_volume+0x1de>
 800dd2e:	230d      	movs	r3, #13
 800dd30:	e25e      	b.n	800e1f0 <find_volume+0x69c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800dd32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd34:	333c      	adds	r3, #60	@ 0x3c
 800dd36:	3368      	adds	r3, #104	@ 0x68
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7fd f827 	bl	800ad8c <ld_word>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd44:	d001      	beq.n	800dd4a <find_volume+0x1f6>
 800dd46:	230d      	movs	r3, #13
 800dd48:	e252      	b.n	800e1f0 <find_volume+0x69c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800dd4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd4c:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800dd50:	2b09      	cmp	r3, #9
 800dd52:	d001      	beq.n	800dd58 <find_volume+0x204>
			return FR_NO_FILESYSTEM;
 800dd54:	230d      	movs	r3, #13
 800dd56:	e24b      	b.n	800e1f0 <find_volume+0x69c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800dd58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd5a:	333c      	adds	r3, #60	@ 0x3c
 800dd5c:	3348      	adds	r3, #72	@ 0x48
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fd f850 	bl	800ae04 <ld_qword>
 800dd64:	4602      	mov	r2, r0
 800dd66:	460b      	mov	r3, r1
 800dd68:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dd6a:	2000      	movs	r0, #0
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	68b9      	ldr	r1, [r7, #8]
 800dd72:	1851      	adds	r1, r2, r1
 800dd74:	6039      	str	r1, [r7, #0]
 800dd76:	68f9      	ldr	r1, [r7, #12]
 800dd78:	eb43 0101 	adc.w	r1, r3, r1
 800dd7c:	6079      	str	r1, [r7, #4]
 800dd7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd82:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800dd86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d301      	bcc.n	800dd92 <find_volume+0x23e>
 800dd8e:	230d      	movs	r3, #13
 800dd90:	e22e      	b.n	800e1f0 <find_volume+0x69c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800dd92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd94:	333c      	adds	r3, #60	@ 0x3c
 800dd96:	3354      	adds	r3, #84	@ 0x54
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fd f810 	bl	800adbe <ld_dword>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dda2:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800dda4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dda6:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800ddaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddac:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800ddae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddb0:	789b      	ldrb	r3, [r3, #2]
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d001      	beq.n	800ddba <find_volume+0x266>
 800ddb6:	230d      	movs	r3, #13
 800ddb8:	e21a      	b.n	800e1f0 <find_volume+0x69c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800ddba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddbc:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	4093      	lsls	r3, r2
 800ddc6:	b29a      	uxth	r2, r3
 800ddc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddca:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800ddcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddce:	895b      	ldrh	r3, [r3, #10]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d101      	bne.n	800ddd8 <find_volume+0x284>
 800ddd4:	230d      	movs	r3, #13
 800ddd6:	e20b      	b.n	800e1f0 <find_volume+0x69c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800ddd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddda:	333c      	adds	r3, #60	@ 0x3c
 800dddc:	335c      	adds	r3, #92	@ 0x5c
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fc ffed 	bl	800adbe <ld_dword>
 800dde4:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800dde6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dde8:	4a03      	ldr	r2, [pc, #12]	@ (800ddf8 <find_volume+0x2a4>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d906      	bls.n	800ddfc <find_volume+0x2a8>
 800ddee:	230d      	movs	r3, #13
 800ddf0:	e1fe      	b.n	800e1f0 <find_volume+0x69c>
 800ddf2:	bf00      	nop
 800ddf4:	20000ee8 	.word	0x20000ee8
 800ddf8:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800ddfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddfe:	1c9a      	adds	r2, r3, #2
 800de00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de02:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800de04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de06:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800de08:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800de0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de0c:	333c      	adds	r3, #60	@ 0x3c
 800de0e:	3358      	adds	r3, #88	@ 0x58
 800de10:	4618      	mov	r0, r3
 800de12:	f7fc ffd4 	bl	800adbe <ld_dword>
 800de16:	4602      	mov	r2, r0
 800de18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de1a:	441a      	add	r2, r3
 800de1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de1e:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800de20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de22:	333c      	adds	r3, #60	@ 0x3c
 800de24:	3350      	adds	r3, #80	@ 0x50
 800de26:	4618      	mov	r0, r3
 800de28:	f7fc ffc9 	bl	800adbe <ld_dword>
 800de2c:	4602      	mov	r2, r0
 800de2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de30:	441a      	add	r2, r3
 800de32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de34:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800de36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de3a:	2200      	movs	r2, #0
 800de3c:	469a      	mov	sl, r3
 800de3e:	4693      	mov	fp, r2
 800de40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de42:	895b      	ldrh	r3, [r3, #10]
 800de44:	461a      	mov	r2, r3
 800de46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de48:	fb02 f303 	mul.w	r3, r2, r3
 800de4c:	2200      	movs	r2, #0
 800de4e:	4698      	mov	r8, r3
 800de50:	4691      	mov	r9, r2
 800de52:	eb1a 0408 	adds.w	r4, sl, r8
 800de56:	eb4b 0509 	adc.w	r5, fp, r9
 800de5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800de5e:	42a2      	cmp	r2, r4
 800de60:	41ab      	sbcs	r3, r5
 800de62:	d201      	bcs.n	800de68 <find_volume+0x314>
 800de64:	230d      	movs	r3, #13
 800de66:	e1c3      	b.n	800e1f0 <find_volume+0x69c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800de68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de6a:	333c      	adds	r3, #60	@ 0x3c
 800de6c:	3360      	adds	r3, #96	@ 0x60
 800de6e:	4618      	mov	r0, r3
 800de70:	f7fc ffa5 	bl	800adbe <ld_dword>
 800de74:	4602      	mov	r2, r0
 800de76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de78:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800de7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de7e:	4619      	mov	r1, r3
 800de80:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800de82:	f7fd fc65 	bl	800b750 <clust2sect>
 800de86:	4603      	mov	r3, r0
 800de88:	4619      	mov	r1, r3
 800de8a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800de8c:	f7fd fbc4 	bl	800b618 <move_window>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d001      	beq.n	800de9a <find_volume+0x346>
 800de96:	2301      	movs	r3, #1
 800de98:	e1aa      	b.n	800e1f0 <find_volume+0x69c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800de9a:	2300      	movs	r3, #0
 800de9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de9e:	e015      	b.n	800decc <find_volume+0x378>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800dea0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dea2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dea4:	4413      	add	r3, r2
 800dea6:	333c      	adds	r3, #60	@ 0x3c
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	2b81      	cmp	r3, #129	@ 0x81
 800deac:	d10b      	bne.n	800dec6 <find_volume+0x372>
 800deae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800deb0:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800deb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800deb6:	3314      	adds	r3, #20
 800deb8:	4413      	add	r3, r2
 800deba:	4618      	mov	r0, r3
 800debc:	f7fc ff7f 	bl	800adbe <ld_dword>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b02      	cmp	r3, #2
 800dec4:	d007      	beq.n	800ded6 <find_volume+0x382>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800dec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dec8:	3320      	adds	r3, #32
 800deca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800decc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ded2:	d3e5      	bcc.n	800dea0 <find_volume+0x34c>
 800ded4:	e000      	b.n	800ded8 <find_volume+0x384>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ded6:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800ded8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800deda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dede:	d101      	bne.n	800dee4 <find_volume+0x390>
 800dee0:	230d      	movs	r3, #13
 800dee2:	e185      	b.n	800e1f0 <find_volume+0x69c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dee6:	f04f 32ff 	mov.w	r2, #4294967295
 800deea:	61da      	str	r2, [r3, #28]
 800deec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800deee:	69da      	ldr	r2, [r3, #28]
 800def0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800def2:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800def4:	2304      	movs	r3, #4
 800def6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800defa:	e167      	b.n	800e1cc <find_volume+0x678>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800defc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800defe:	333c      	adds	r3, #60	@ 0x3c
 800df00:	330b      	adds	r3, #11
 800df02:	4618      	mov	r0, r3
 800df04:	f7fc ff42 	bl	800ad8c <ld_word>
 800df08:	4603      	mov	r3, r0
 800df0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df0e:	d001      	beq.n	800df14 <find_volume+0x3c0>
 800df10:	230d      	movs	r3, #13
 800df12:	e16d      	b.n	800e1f0 <find_volume+0x69c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800df14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df16:	333c      	adds	r3, #60	@ 0x3c
 800df18:	3316      	adds	r3, #22
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fc ff36 	bl	800ad8c <ld_word>
 800df20:	4603      	mov	r3, r0
 800df22:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800df24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df26:	2b00      	cmp	r3, #0
 800df28:	d106      	bne.n	800df38 <find_volume+0x3e4>
 800df2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df2c:	333c      	adds	r3, #60	@ 0x3c
 800df2e:	3324      	adds	r3, #36	@ 0x24
 800df30:	4618      	mov	r0, r3
 800df32:	f7fc ff44 	bl	800adbe <ld_dword>
 800df36:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800df38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df3a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800df3c:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800df3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df40:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800df44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800df48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df4a:	789b      	ldrb	r3, [r3, #2]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d005      	beq.n	800df5c <find_volume+0x408>
 800df50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df52:	789b      	ldrb	r3, [r3, #2]
 800df54:	2b02      	cmp	r3, #2
 800df56:	d001      	beq.n	800df5c <find_volume+0x408>
 800df58:	230d      	movs	r3, #13
 800df5a:	e149      	b.n	800e1f0 <find_volume+0x69c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800df5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df5e:	789b      	ldrb	r3, [r3, #2]
 800df60:	461a      	mov	r2, r3
 800df62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df64:	fb02 f303 	mul.w	r3, r2, r3
 800df68:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800df6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df6c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800df70:	461a      	mov	r2, r3
 800df72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800df76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df78:	895b      	ldrh	r3, [r3, #10]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d008      	beq.n	800df90 <find_volume+0x43c>
 800df7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df80:	895b      	ldrh	r3, [r3, #10]
 800df82:	461a      	mov	r2, r3
 800df84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df86:	895b      	ldrh	r3, [r3, #10]
 800df88:	3b01      	subs	r3, #1
 800df8a:	4013      	ands	r3, r2
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d001      	beq.n	800df94 <find_volume+0x440>
 800df90:	230d      	movs	r3, #13
 800df92:	e12d      	b.n	800e1f0 <find_volume+0x69c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800df94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df96:	333c      	adds	r3, #60	@ 0x3c
 800df98:	3311      	adds	r3, #17
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fc fef6 	bl	800ad8c <ld_word>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfa6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dfa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfaa:	891b      	ldrh	r3, [r3, #8]
 800dfac:	f003 030f 	and.w	r3, r3, #15
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <find_volume+0x466>
 800dfb6:	230d      	movs	r3, #13
 800dfb8:	e11a      	b.n	800e1f0 <find_volume+0x69c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dfba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfbc:	333c      	adds	r3, #60	@ 0x3c
 800dfbe:	3313      	adds	r3, #19
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7fc fee3 	bl	800ad8c <ld_word>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dfca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d106      	bne.n	800dfde <find_volume+0x48a>
 800dfd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfd2:	333c      	adds	r3, #60	@ 0x3c
 800dfd4:	3320      	adds	r3, #32
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7fc fef1 	bl	800adbe <ld_dword>
 800dfdc:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dfde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfe0:	333c      	adds	r3, #60	@ 0x3c
 800dfe2:	330e      	adds	r3, #14
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fc fed1 	bl	800ad8c <ld_word>
 800dfea:	4603      	mov	r3, r0
 800dfec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dff0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d101      	bne.n	800dffc <find_volume+0x4a8>
 800dff8:	230d      	movs	r3, #13
 800dffa:	e0f9      	b.n	800e1f0 <find_volume+0x69c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dffc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e002:	4413      	add	r3, r2
 800e004:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e006:	8912      	ldrh	r2, [r2, #8]
 800e008:	0912      	lsrs	r2, r2, #4
 800e00a:	b292      	uxth	r2, r2
 800e00c:	4413      	add	r3, r2
 800e00e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e010:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e014:	429a      	cmp	r2, r3
 800e016:	d201      	bcs.n	800e01c <find_volume+0x4c8>
 800e018:	230d      	movs	r3, #13
 800e01a:	e0e9      	b.n	800e1f0 <find_volume+0x69c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e01c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e01e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e020:	1ad3      	subs	r3, r2, r3
 800e022:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e024:	8952      	ldrh	r2, [r2, #10]
 800e026:	fbb3 f3f2 	udiv	r3, r3, r2
 800e02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d101      	bne.n	800e036 <find_volume+0x4e2>
 800e032:	230d      	movs	r3, #13
 800e034:	e0dc      	b.n	800e1f0 <find_volume+0x69c>
		fmt = FS_FAT32;
 800e036:	2303      	movs	r3, #3
 800e038:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e03c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e03e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e042:	4293      	cmp	r3, r2
 800e044:	d802      	bhi.n	800e04c <find_volume+0x4f8>
 800e046:	2302      	movs	r3, #2
 800e048:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e04e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e052:	4293      	cmp	r3, r2
 800e054:	d802      	bhi.n	800e05c <find_volume+0x508>
 800e056:	2301      	movs	r3, #1
 800e058:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e05c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e05e:	1c9a      	adds	r2, r3, #2
 800e060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e062:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800e064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e066:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e068:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e06a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e06e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e070:	441a      	add	r2, r3
 800e072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e074:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800e076:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e07a:	441a      	add	r2, r3
 800e07c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e07e:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800e080:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e084:	2b03      	cmp	r3, #3
 800e086:	d11e      	bne.n	800e0c6 <find_volume+0x572>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e08a:	333c      	adds	r3, #60	@ 0x3c
 800e08c:	332a      	adds	r3, #42	@ 0x2a
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fc fe7c 	bl	800ad8c <ld_word>
 800e094:	4603      	mov	r3, r0
 800e096:	2b00      	cmp	r3, #0
 800e098:	d001      	beq.n	800e09e <find_volume+0x54a>
 800e09a:	230d      	movs	r3, #13
 800e09c:	e0a8      	b.n	800e1f0 <find_volume+0x69c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e09e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0a0:	891b      	ldrh	r3, [r3, #8]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d001      	beq.n	800e0aa <find_volume+0x556>
 800e0a6:	230d      	movs	r3, #13
 800e0a8:	e0a2      	b.n	800e1f0 <find_volume+0x69c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0ac:	333c      	adds	r3, #60	@ 0x3c
 800e0ae:	332c      	adds	r3, #44	@ 0x2c
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7fc fe84 	bl	800adbe <ld_dword>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0ba:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e0bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0be:	6a1b      	ldr	r3, [r3, #32]
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e0c4:	e01f      	b.n	800e106 <find_volume+0x5b2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e0c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0c8:	891b      	ldrh	r3, [r3, #8]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d101      	bne.n	800e0d2 <find_volume+0x57e>
 800e0ce:	230d      	movs	r3, #13
 800e0d0:	e08e      	b.n	800e1f0 <find_volume+0x69c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e0d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0d8:	441a      	add	r2, r3
 800e0da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0dc:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e0de:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e0e2:	2b02      	cmp	r3, #2
 800e0e4:	d103      	bne.n	800e0ee <find_volume+0x59a>
 800e0e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0e8:	6a1b      	ldr	r3, [r3, #32]
 800e0ea:	005b      	lsls	r3, r3, #1
 800e0ec:	e00a      	b.n	800e104 <find_volume+0x5b0>
 800e0ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0f0:	6a1a      	ldr	r2, [r3, #32]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	005b      	lsls	r3, r3, #1
 800e0f6:	4413      	add	r3, r2
 800e0f8:	085a      	lsrs	r2, r3, #1
 800e0fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0fc:	6a1b      	ldr	r3, [r3, #32]
 800e0fe:	f003 0301 	and.w	r3, r3, #1
 800e102:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e104:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e10a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e10c:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e110:	0a5b      	lsrs	r3, r3, #9
 800e112:	429a      	cmp	r2, r3
 800e114:	d201      	bcs.n	800e11a <find_volume+0x5c6>
 800e116:	230d      	movs	r3, #13
 800e118:	e06a      	b.n	800e1f0 <find_volume+0x69c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e11a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e11c:	f04f 32ff 	mov.w	r2, #4294967295
 800e120:	61da      	str	r2, [r3, #28]
 800e122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e124:	69da      	ldr	r2, [r3, #28]
 800e126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e128:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800e12a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e12c:	2280      	movs	r2, #128	@ 0x80
 800e12e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e130:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e134:	2b03      	cmp	r3, #3
 800e136:	d149      	bne.n	800e1cc <find_volume+0x678>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e13a:	333c      	adds	r3, #60	@ 0x3c
 800e13c:	3330      	adds	r3, #48	@ 0x30
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fc fe24 	bl	800ad8c <ld_word>
 800e144:	4603      	mov	r3, r0
 800e146:	2b01      	cmp	r3, #1
 800e148:	d140      	bne.n	800e1cc <find_volume+0x678>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e14a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e14c:	3301      	adds	r3, #1
 800e14e:	4619      	mov	r1, r3
 800e150:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e152:	f7fd fa61 	bl	800b618 <move_window>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d137      	bne.n	800e1cc <find_volume+0x678>
		{
			fs->fsi_flag = 0;
 800e15c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e15e:	2200      	movs	r2, #0
 800e160:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e164:	333c      	adds	r3, #60	@ 0x3c
 800e166:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fc fe0e 	bl	800ad8c <ld_word>
 800e170:	4603      	mov	r3, r0
 800e172:	461a      	mov	r2, r3
 800e174:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e178:	429a      	cmp	r2, r3
 800e17a:	d127      	bne.n	800e1cc <find_volume+0x678>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e17c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e17e:	333c      	adds	r3, #60	@ 0x3c
 800e180:	4618      	mov	r0, r3
 800e182:	f7fc fe1c 	bl	800adbe <ld_dword>
 800e186:	4603      	mov	r3, r0
 800e188:	4a1c      	ldr	r2, [pc, #112]	@ (800e1fc <find_volume+0x6a8>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d11e      	bne.n	800e1cc <find_volume+0x678>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e18e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e190:	333c      	adds	r3, #60	@ 0x3c
 800e192:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e196:	4618      	mov	r0, r3
 800e198:	f7fc fe11 	bl	800adbe <ld_dword>
 800e19c:	4603      	mov	r3, r0
 800e19e:	4a18      	ldr	r2, [pc, #96]	@ (800e200 <find_volume+0x6ac>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d113      	bne.n	800e1cc <find_volume+0x678>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e1a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1a6:	333c      	adds	r3, #60	@ 0x3c
 800e1a8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7fc fe06 	bl	800adbe <ld_dword>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1b6:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e1b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1ba:	333c      	adds	r3, #60	@ 0x3c
 800e1bc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7fc fdfc 	bl	800adbe <ld_dword>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1ca:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e1cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1ce:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800e1d2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e1d4:	4b0b      	ldr	r3, [pc, #44]	@ (800e204 <find_volume+0x6b0>)
 800e1d6:	881b      	ldrh	r3, [r3, #0]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	4b09      	ldr	r3, [pc, #36]	@ (800e204 <find_volume+0x6b0>)
 800e1de:	801a      	strh	r2, [r3, #0]
 800e1e0:	4b08      	ldr	r3, [pc, #32]	@ (800e204 <find_volume+0x6b0>)
 800e1e2:	881a      	ldrh	r2, [r3, #0]
 800e1e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1e6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e1e8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e1ea:	f7fd f9ad 	bl	800b548 <clear_lock>
#endif
	return FR_OK;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3770      	adds	r7, #112	@ 0x70
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1fa:	bf00      	nop
 800e1fc:	41615252 	.word	0x41615252
 800e200:	61417272 	.word	0x61417272
 800e204:	20000eec 	.word	0x20000eec

0800e208 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e212:	2309      	movs	r3, #9
 800e214:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d02e      	beq.n	800e27a <validate+0x72>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d02a      	beq.n	800e27a <validate+0x72>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d025      	beq.n	800e27a <validate+0x72>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	889a      	ldrh	r2, [r3, #4]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	88db      	ldrh	r3, [r3, #6]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d11e      	bne.n	800e27a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4618      	mov	r0, r3
 800e242:	f7fd f807 	bl	800b254 <lock_fs>
 800e246:	4603      	mov	r3, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d014      	beq.n	800e276 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	785b      	ldrb	r3, [r3, #1]
 800e252:	4618      	mov	r0, r3
 800e254:	f7fc fcfa 	bl	800ac4c <disk_status>
 800e258:	4603      	mov	r3, r0
 800e25a:	f003 0301 	and.w	r3, r3, #1
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d102      	bne.n	800e268 <validate+0x60>
				res = FR_OK;
 800e262:	2300      	movs	r3, #0
 800e264:	73fb      	strb	r3, [r7, #15]
 800e266:	e008      	b.n	800e27a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2100      	movs	r1, #0
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fd f806 	bl	800b280 <unlock_fs>
 800e274:	e001      	b.n	800e27a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e276:	230f      	movs	r3, #15
 800e278:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e27a:	7bfb      	ldrb	r3, [r7, #15]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d102      	bne.n	800e286 <validate+0x7e>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	e000      	b.n	800e288 <validate+0x80>
 800e286:	2300      	movs	r3, #0
 800e288:	683a      	ldr	r2, [r7, #0]
 800e28a:	6013      	str	r3, [r2, #0]
	return res;
 800e28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3710      	adds	r7, #16
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
	...

0800e298 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b088      	sub	sp, #32
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e2aa:	f107 0310 	add.w	r3, r7, #16
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7ff fba7 	bl	800da02 <get_ldnumber>
 800e2b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	da01      	bge.n	800e2c0 <f_mount+0x28>
 800e2bc:	230b      	movs	r3, #11
 800e2be:	e048      	b.n	800e352 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e2c0:	4a26      	ldr	r2, [pc, #152]	@ (800e35c <f_mount+0xc4>)
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00f      	beq.n	800e2f0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e2d0:	69b8      	ldr	r0, [r7, #24]
 800e2d2:	f7fd f939 	bl	800b548 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	695b      	ldr	r3, [r3, #20]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f001 f951 	bl	800f582 <ff_del_syncobj>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d101      	bne.n	800e2ea <f_mount+0x52>
 800e2e6:	2302      	movs	r3, #2
 800e2e8:	e033      	b.n	800e352 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00f      	beq.n	800e316 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	3314      	adds	r3, #20
 800e304:	4619      	mov	r1, r3
 800e306:	4610      	mov	r0, r2
 800e308:	f001 f91c 	bl	800f544 <ff_cre_syncobj>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d101      	bne.n	800e316 <f_mount+0x7e>
 800e312:	2302      	movs	r3, #2
 800e314:	e01d      	b.n	800e352 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e316:	68fa      	ldr	r2, [r7, #12]
 800e318:	4910      	ldr	r1, [pc, #64]	@ (800e35c <f_mount+0xc4>)
 800e31a:	69fb      	ldr	r3, [r7, #28]
 800e31c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d002      	beq.n	800e32c <f_mount+0x94>
 800e326:	79fb      	ldrb	r3, [r7, #7]
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d001      	beq.n	800e330 <f_mount+0x98>
 800e32c:	2300      	movs	r3, #0
 800e32e:	e010      	b.n	800e352 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e330:	f107 010c 	add.w	r1, r7, #12
 800e334:	f107 0308 	add.w	r3, r7, #8
 800e338:	2200      	movs	r2, #0
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7ff fc0a 	bl	800db54 <find_volume>
 800e340:	4603      	mov	r3, r0
 800e342:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	7dfa      	ldrb	r2, [r7, #23]
 800e348:	4611      	mov	r1, r2
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fc ff98 	bl	800b280 <unlock_fs>
 800e350:	7dfb      	ldrb	r3, [r7, #23]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3720      	adds	r7, #32
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	20000ee8 	.word	0x20000ee8

0800e360 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e364:	f5ad 6d9f 	sub.w	sp, sp, #1272	@ 0x4f8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e36e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e372:	6018      	str	r0, [r3, #0]
 800e374:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e378:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 800e37c:	6019      	str	r1, [r3, #0]
 800e37e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e382:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e386:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e388:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e38c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d101      	bne.n	800e39a <f_open+0x3a>
 800e396:	2309      	movs	r3, #9
 800e398:	e3e3      	b.n	800eb62 <f_open+0x802>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e39a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e39e:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e3a2:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800e3a6:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800e3aa:	7812      	ldrb	r2, [r2, #0]
 800e3ac:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e3b0:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800e3b2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e3b6:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e3ba:	781a      	ldrb	r2, [r3, #0]
 800e3bc:	f207 4184 	addw	r1, r7, #1156	@ 0x484
 800e3c0:	f107 0318 	add.w	r3, r7, #24
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7ff fbc5 	bl	800db54 <find_volume>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
	if (res == FR_OK) {
 800e3d0:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f040 83af 	bne.w	800eb38 <f_open+0x7d8>
		dj.obj.fs = fs;
 800e3da:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e3de:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
		INIT_NAMBUF(fs);
 800e3e2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e3e6:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 800e3ea:	60da      	str	r2, [r3, #12]
 800e3ec:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e3f0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e3f4:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e3f6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e3fa:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e404:	4611      	mov	r1, r2
 800e406:	4618      	mov	r0, r3
 800e408:	f7ff fa52 	bl	800d8b0 <follow_path>
 800e40c:	4603      	mov	r3, r0
 800e40e:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e412:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e416:	2b00      	cmp	r3, #0
 800e418:	d11c      	bne.n	800e454 <f_open+0xf4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e41a:	f897 34d3 	ldrb.w	r3, [r7, #1235]	@ 0x4d3
 800e41e:	b25b      	sxtb	r3, r3
 800e420:	2b00      	cmp	r3, #0
 800e422:	da03      	bge.n	800e42c <f_open+0xcc>
				res = FR_INVALID_NAME;
 800e424:	2306      	movs	r3, #6
 800e426:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800e42a:	e013      	b.n	800e454 <f_open+0xf4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e42c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e430:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	2b01      	cmp	r3, #1
 800e438:	bf8c      	ite	hi
 800e43a:	2301      	movhi	r3, #1
 800e43c:	2300      	movls	r3, #0
 800e43e:	b2db      	uxtb	r3, r3
 800e440:	461a      	mov	r2, r3
 800e442:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e446:	4611      	mov	r1, r2
 800e448:	4618      	mov	r0, r3
 800e44a:	f7fc ff35 	bl	800b2b8 <chk_lock>
 800e44e:	4603      	mov	r3, r0
 800e450:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e454:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e458:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	f003 031c 	and.w	r3, r3, #28
 800e462:	2b00      	cmp	r3, #0
 800e464:	f000 8166 	beq.w	800e734 <f_open+0x3d4>
			if (res != FR_OK) {					/* No file, create new */
 800e468:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d01f      	beq.n	800e4b0 <f_open+0x150>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e470:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e474:	2b04      	cmp	r3, #4
 800e476:	d10e      	bne.n	800e496 <f_open+0x136>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e478:	f7fc ff7a 	bl	800b370 <enq_lock>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d006      	beq.n	800e490 <f_open+0x130>
 800e482:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e486:	4618      	mov	r0, r3
 800e488:	f7fe feb4 	bl	800d1f4 <dir_register>
 800e48c:	4603      	mov	r3, r0
 800e48e:	e000      	b.n	800e492 <f_open+0x132>
 800e490:	2312      	movs	r3, #18
 800e492:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e496:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e49a:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e49e:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800e4a2:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800e4a6:	7812      	ldrb	r2, [r2, #0]
 800e4a8:	f042 0208 	orr.w	r2, r2, #8
 800e4ac:	701a      	strb	r2, [r3, #0]
 800e4ae:	e015      	b.n	800e4dc <f_open+0x17c>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e4b0:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 800e4b4:	f003 0311 	and.w	r3, r3, #17
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d003      	beq.n	800e4c4 <f_open+0x164>
					res = FR_DENIED;
 800e4bc:	2307      	movs	r3, #7
 800e4be:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800e4c2:	e00b      	b.n	800e4dc <f_open+0x17c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e4c4:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e4c8:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	f003 0304 	and.w	r3, r3, #4
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d002      	beq.n	800e4dc <f_open+0x17c>
 800e4d6:	2308      	movs	r3, #8
 800e4d8:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e4dc:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f040 8147 	bne.w	800e774 <f_open+0x414>
 800e4e6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e4ea:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	f003 0308 	and.w	r3, r3, #8
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f000 813d 	beq.w	800e774 <f_open+0x414>
				dw = GET_FATTIME();
 800e4fa:	f7fc f945 	bl	800a788 <get_fattime>
 800e4fe:	f8c7 04e4 	str.w	r0, [r7, #1252]	@ 0x4e4
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800e502:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	2b04      	cmp	r3, #4
 800e50a:	f040 80b8 	bne.w	800e67e <f_open+0x31e>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800e50e:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800e512:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e516:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800e51e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	3334      	adds	r3, #52	@ 0x34
 800e526:	4618      	mov	r0, r3
 800e528:	f7fc fc49 	bl	800adbe <ld_dword>
 800e52c:	4602      	mov	r2, r0
 800e52e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e532:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e53a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e53e:	691b      	ldr	r3, [r3, #16]
 800e540:	3338      	adds	r3, #56	@ 0x38
 800e542:	4618      	mov	r0, r3
 800e544:	f7fc fc5e 	bl	800ae04 <ld_qword>
 800e548:	4602      	mov	r2, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	f507 619f 	add.w	r1, r7, #1272	@ 0x4f8
 800e550:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800e554:	6809      	ldr	r1, [r1, #0]
 800e556:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e55a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e55e:	691b      	ldr	r3, [r3, #16]
 800e560:	3321      	adds	r3, #33	@ 0x21
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	f003 0302 	and.w	r3, r3, #2
 800e568:	b2da      	uxtb	r2, r3
 800e56a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e56e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800e576:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e57a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2200      	movs	r2, #0
 800e582:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800e584:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e588:	691b      	ldr	r3, [r3, #16]
 800e58a:	3308      	adds	r3, #8
 800e58c:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800e590:	4618      	mov	r0, r3
 800e592:	f7fc fd2d 	bl	800aff0 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800e596:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e59a:	691b      	ldr	r3, [r3, #16]
 800e59c:	3314      	adds	r3, #20
 800e59e:	2200      	movs	r2, #0
 800e5a0:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800e5a2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e5a6:	691b      	ldr	r3, [r3, #16]
 800e5a8:	330c      	adds	r3, #12
 800e5aa:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fc fd1e 	bl	800aff0 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800e5b4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e5b8:	691b      	ldr	r3, [r3, #16]
 800e5ba:	3315      	adds	r3, #21
 800e5bc:	2200      	movs	r2, #0
 800e5be:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800e5c0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e5c4:	691b      	ldr	r3, [r3, #16]
 800e5c6:	3304      	adds	r3, #4
 800e5c8:	2220      	movs	r2, #32
 800e5ca:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800e5cc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e5d0:	691b      	ldr	r3, [r3, #16]
 800e5d2:	3334      	adds	r3, #52	@ 0x34
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fc fd0a 	bl	800aff0 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800e5dc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e5e0:	691b      	ldr	r3, [r3, #16]
 800e5e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e5e6:	f04f 0200 	mov.w	r2, #0
 800e5ea:	f04f 0300 	mov.w	r3, #0
 800e5ee:	4608      	mov	r0, r1
 800e5f0:	f7fc fd2a 	bl	800b048 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800e5f4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e5f8:	691b      	ldr	r3, [r3, #16]
 800e5fa:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800e5fe:	f04f 0200 	mov.w	r2, #0
 800e602:	f04f 0300 	mov.w	r3, #0
 800e606:	4608      	mov	r0, r1
 800e608:	f7fc fd1e 	bl	800b048 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800e60c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e610:	691b      	ldr	r3, [r3, #16]
 800e612:	3321      	adds	r3, #33	@ 0x21
 800e614:	2201      	movs	r2, #1
 800e616:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800e618:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fe fb35 	bl	800cc8c <store_xdir>
 800e622:	4603      	mov	r3, r0
 800e624:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800e628:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f040 80a1 	bne.w	800e774 <f_open+0x414>
 800e632:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e636:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	689b      	ldr	r3, [r3, #8]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f000 8098 	beq.w	800e774 <f_open+0x414>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800e644:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e648:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e64c:	6818      	ldr	r0, [r3, #0]
 800e64e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e652:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	2200      	movs	r2, #0
 800e65c:	4619      	mov	r1, r3
 800e65e:	f7fd fbe5 	bl	800be2c <remove_chain>
 800e662:	4603      	mov	r3, r0
 800e664:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800e668:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e66c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	689a      	ldr	r2, [r3, #8]
 800e674:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e678:	3a01      	subs	r2, #1
 800e67a:	619a      	str	r2, [r3, #24]
 800e67c:	e07a      	b.n	800e774 <f_open+0x414>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e67e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800e682:	330e      	adds	r3, #14
 800e684:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800e688:	4618      	mov	r0, r3
 800e68a:	f7fc fcb1 	bl	800aff0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e68e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800e692:	3316      	adds	r3, #22
 800e694:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fc fca9 	bl	800aff0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e69e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800e6a2:	330b      	adds	r3, #11
 800e6a4:	2220      	movs	r2, #32
 800e6a6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e6a8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e6ac:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800e6b0:	4611      	mov	r1, r2
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fd ff6a 	bl	800c58c <ld_clust>
 800e6b8:	f8c7 04e0 	str.w	r0, [r7, #1248]	@ 0x4e0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e6bc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e6c0:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fd ff7f 	bl	800c5ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e6cc:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800e6d0:	331c      	adds	r3, #28
 800e6d2:	2100      	movs	r1, #0
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fc fc8b 	bl	800aff0 <st_dword>
					fs->wflag = 1;
 800e6da:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e6de:	2201      	movs	r2, #1
 800e6e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e6e2:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d044      	beq.n	800e774 <f_open+0x414>
						dw = fs->winsect;
 800e6ea:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e6ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6f0:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
						res = remove_chain(&dj.obj, cl, 0);
 800e6f4:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	@ 0x4e0
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7fd fb94 	bl	800be2c <remove_chain>
 800e704:	4603      	mov	r3, r0
 800e706:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
						if (res == FR_OK) {
 800e70a:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d130      	bne.n	800e774 <f_open+0x414>
							res = move_window(fs, dw);
 800e712:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e716:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fc ff7c 	bl	800b618 <move_window>
 800e720:	4603      	mov	r3, r0
 800e722:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e726:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e72a:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 800e72e:	3a01      	subs	r2, #1
 800e730:	619a      	str	r2, [r3, #24]
 800e732:	e01f      	b.n	800e774 <f_open+0x414>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e734:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d11b      	bne.n	800e774 <f_open+0x414>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e73c:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 800e740:	f003 0310 	and.w	r3, r3, #16
 800e744:	2b00      	cmp	r3, #0
 800e746:	d003      	beq.n	800e750 <f_open+0x3f0>
					res = FR_NO_FILE;
 800e748:	2304      	movs	r3, #4
 800e74a:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800e74e:	e011      	b.n	800e774 <f_open+0x414>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e750:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e754:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	f003 0302 	and.w	r3, r3, #2
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d008      	beq.n	800e774 <f_open+0x414>
 800e762:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 800e766:	f003 0301 	and.w	r3, r3, #1
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d002      	beq.n	800e774 <f_open+0x414>
						res = FR_DENIED;
 800e76e:	2307      	movs	r3, #7
 800e770:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					}
				}
			}
		}
		if (res == FR_OK) {
 800e774:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d148      	bne.n	800e80e <f_open+0x4ae>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e77c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e780:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	f003 0308 	and.w	r3, r3, #8
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00b      	beq.n	800e7a6 <f_open+0x446>
				mode |= FA_MODIFIED;
 800e78e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e792:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e796:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800e79a:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800e79e:	7812      	ldrb	r2, [r2, #0]
 800e7a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e7a4:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e7a6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e7aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e7ac:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e7b0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800e7b8:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800e7bc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e7c0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e7c8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e7cc:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	bf8c      	ite	hi
 800e7d6:	2301      	movhi	r3, #1
 800e7d8:	2300      	movls	r3, #0
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	461a      	mov	r2, r3
 800e7de:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e7e2:	4611      	mov	r1, r2
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fc fde5 	bl	800b3b4 <inc_lock>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e7f0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e7f8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e7fc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e804:	2b00      	cmp	r3, #0
 800e806:	d102      	bne.n	800e80e <f_open+0x4ae>
 800e808:	2302      	movs	r3, #2
 800e80a:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e80e:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e812:	2b00      	cmp	r3, #0
 800e814:	f040 8190 	bne.w	800eb38 <f_open+0x7d8>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e818:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	2b04      	cmp	r3, #4
 800e820:	d14c      	bne.n	800e8bc <f_open+0x55c>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800e822:	f8d7 2490 	ldr.w	r2, [r7, #1168]	@ 0x490
 800e826:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e82a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e832:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 800e836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83a:	4613      	mov	r3, r2
 800e83c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e840:	f897 248f 	ldrb.w	r2, [r7, #1167]	@ 0x48f
 800e844:	431a      	orrs	r2, r3
 800e846:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e84a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800e852:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 800e856:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e85a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800e862:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e866:	691b      	ldr	r3, [r3, #16]
 800e868:	3334      	adds	r3, #52	@ 0x34
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fc faa7 	bl	800adbe <ld_dword>
 800e870:	4602      	mov	r2, r0
 800e872:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e876:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e87e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e882:	691b      	ldr	r3, [r3, #16]
 800e884:	3338      	adds	r3, #56	@ 0x38
 800e886:	4618      	mov	r0, r3
 800e888:	f7fc fabc 	bl	800ae04 <ld_qword>
 800e88c:	4602      	mov	r2, r0
 800e88e:	460b      	mov	r3, r1
 800e890:	f507 619f 	add.w	r1, r7, #1272	@ 0x4f8
 800e894:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800e898:	6809      	ldr	r1, [r1, #0]
 800e89a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e89e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e8a2:	691b      	ldr	r3, [r3, #16]
 800e8a4:	3321      	adds	r3, #33	@ 0x21
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	f003 0302 	and.w	r3, r3, #2
 800e8ac:	b2da      	uxtb	r2, r3
 800e8ae:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e8b2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	71da      	strb	r2, [r3, #7]
 800e8ba:	e021      	b.n	800e900 <f_open+0x5a0>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e8bc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e8c0:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fd fe60 	bl	800c58c <ld_clust>
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e8d2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e8da:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800e8de:	331c      	adds	r3, #28
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fc fa6c 	bl	800adbe <ld_dword>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	60bb      	str	r3, [r7, #8]
 800e8ec:	60fa      	str	r2, [r7, #12]
 800e8ee:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e8f2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e8fc:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e900:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e904:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2200      	movs	r2, #0
 800e90c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e90e:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800e912:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e916:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e91e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e922:	88da      	ldrh	r2, [r3, #6]
 800e924:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e928:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e930:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e934:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800e93e:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800e942:	7812      	ldrb	r2, [r2, #0]
 800e944:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800e948:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e94c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2200      	movs	r2, #0
 800e954:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800e958:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e95c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	2200      	movs	r2, #0
 800e964:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e966:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e96a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e96e:	6819      	ldr	r1, [r3, #0]
 800e970:	f04f 0200 	mov.w	r2, #0
 800e974:	f04f 0300 	mov.w	r3, #0
 800e978:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e97c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e980:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	3354      	adds	r3, #84	@ 0x54
 800e988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e98c:	2100      	movs	r1, #0
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fc fc03 	bl	800b19a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e994:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e998:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	f003 0320 	and.w	r3, r3, #32
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	f000 80c8 	beq.w	800eb38 <f_open+0x7d8>
 800e9a8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e9ac:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	f000 80be 	beq.w	800eb38 <f_open+0x7d8>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e9bc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e9c0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e9ca:	f507 619f 	add.w	r1, r7, #1272	@ 0x4f8
 800e9ce:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800e9d2:	6809      	ldr	r1, [r1, #0]
 800e9d4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e9d8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e9dc:	895b      	ldrh	r3, [r3, #10]
 800e9de:	025b      	lsls	r3, r3, #9
 800e9e0:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e9e4:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e9e8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e9f4:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e9f8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ea02:	f507 619d 	add.w	r1, r7, #1256	@ 0x4e8
 800ea06:	e9c1 2300 	strd	r2, r3, [r1]
 800ea0a:	e02f      	b.n	800ea6c <f_open+0x70c>
					clst = get_fat(&fp->obj, clst);
 800ea0c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea10:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	@ 0x4f0
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fc feb8 	bl	800b790 <get_fat>
 800ea20:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
					if (clst <= 1) res = FR_INT_ERR;
 800ea24:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d802      	bhi.n	800ea32 <f_open+0x6d2>
 800ea2c:	2302      	movs	r3, #2
 800ea2e:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ea32:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800ea36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea3a:	d102      	bne.n	800ea42 <f_open+0x6e2>
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea42:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 800ea46:	2200      	movs	r2, #0
 800ea48:	469a      	mov	sl, r3
 800ea4a:	4693      	mov	fp, r2
 800ea4c:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea54:	ebb2 010a 	subs.w	r1, r2, sl
 800ea58:	6039      	str	r1, [r7, #0]
 800ea5a:	eb63 030b 	sbc.w	r3, r3, fp
 800ea5e:	607b      	str	r3, [r7, #4]
 800ea60:	f507 619d 	add.w	r1, r7, #1256	@ 0x4e8
 800ea64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea68:	e9c1 2300 	strd	r2, r3, [r1]
 800ea6c:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d10c      	bne.n	800ea8e <f_open+0x72e>
 800ea74:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 800ea78:	2200      	movs	r2, #0
 800ea7a:	4698      	mov	r8, r3
 800ea7c:	4691      	mov	r9, r2
 800ea7e:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	4590      	cmp	r8, r2
 800ea88:	eb79 0303 	sbcs.w	r3, r9, r3
 800ea8c:	d3be      	bcc.n	800ea0c <f_open+0x6ac>
				}
				fp->clust = clst;
 800ea8e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea92:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f8d7 24f0 	ldr.w	r2, [r7, #1264]	@ 0x4f0
 800ea9c:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ea9e:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d148      	bne.n	800eb38 <f_open+0x7d8>
 800eaa6:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800eaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaae:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800eab2:	2500      	movs	r5, #0
 800eab4:	ea54 0305 	orrs.w	r3, r4, r5
 800eab8:	d03e      	beq.n	800eb38 <f_open+0x7d8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eaba:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eabe:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	@ 0x4f0
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fc fe44 	bl	800b750 <clust2sect>
 800eac8:	f8c7 04d8 	str.w	r0, [r7, #1240]	@ 0x4d8
 800eacc:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d103      	bne.n	800eadc <f_open+0x77c>
						res = FR_INT_ERR;
 800ead4:	2302      	movs	r3, #2
 800ead6:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800eada:	e02d      	b.n	800eb38 <f_open+0x7d8>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800eadc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800eae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eae4:	f04f 0200 	mov.w	r2, #0
 800eae8:	f04f 0300 	mov.w	r3, #0
 800eaec:	0a42      	lsrs	r2, r0, #9
 800eaee:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800eaf2:	0a4b      	lsrs	r3, r1, #9
 800eaf4:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 800eaf8:	441a      	add	r2, r3
 800eafa:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eafe:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eb06:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eb0a:	7858      	ldrb	r0, [r3, #1]
 800eb0c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb10:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800eb1a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb1e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eb26:	2301      	movs	r3, #1
 800eb28:	f7fc f8d2 	bl	800acd0 <disk_read>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d002      	beq.n	800eb38 <f_open+0x7d8>
 800eb32:	2301      	movs	r3, #1
 800eb34:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eb38:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d006      	beq.n	800eb4e <f_open+0x7ee>
 800eb40:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb44:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eb4e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eb52:	f897 24f7 	ldrb.w	r2, [r7, #1271]	@ 0x4f7
 800eb56:	4611      	mov	r1, r2
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7fc fb91 	bl	800b280 <unlock_fs>
 800eb5e:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	f507 679f 	add.w	r7, r7, #1272	@ 0x4f8
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800eb6e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eb6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb72:	b08d      	sub	sp, #52	@ 0x34
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	607a      	str	r2, [r7, #4]
 800eb7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	2200      	movs	r2, #0
 800eb86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	f107 0210 	add.w	r2, r7, #16
 800eb8e:	4611      	mov	r1, r2
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7ff fb39 	bl	800e208 <validate>
 800eb96:	4603      	mov	r3, r0
 800eb98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d108      	bne.n	800ebb6 <f_write+0x48>
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ebaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ebae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d009      	beq.n	800ebca <f_write+0x5c>
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ebbc:	4611      	mov	r1, r2
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fc fb5e 	bl	800b280 <unlock_fs>
 800ebc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ebc8:	e1af      	b.n	800ef2a <f_write+0x3bc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ebd0:	f003 0302 	and.w	r3, r3, #2
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d106      	bne.n	800ebe6 <f_write+0x78>
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	2107      	movs	r1, #7
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7fc fb4f 	bl	800b280 <unlock_fs>
 800ebe2:	2307      	movs	r3, #7
 800ebe4:	e1a1      	b.n	800ef2a <f_write+0x3bc>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	2b04      	cmp	r3, #4
 800ebec:	f000 8188 	beq.w	800ef00 <f_write+0x392>
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	18d1      	adds	r1, r2, r3
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ec00:	4613      	mov	r3, r2
 800ec02:	4299      	cmp	r1, r3
 800ec04:	f080 817c 	bcs.w	800ef00 <f_write+0x392>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ec0e:	4613      	mov	r3, r2
 800ec10:	43db      	mvns	r3, r3
 800ec12:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ec14:	e174      	b.n	800ef00 <f_write+0x392>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ec1c:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800ec20:	2500      	movs	r5, #0
 800ec22:	ea54 0305 	orrs.w	r3, r4, r5
 800ec26:	f040 8119 	bne.w	800ee5c <f_write+0x2ee>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ec30:	f04f 0200 	mov.w	r2, #0
 800ec34:	f04f 0300 	mov.w	r3, #0
 800ec38:	0a42      	lsrs	r2, r0, #9
 800ec3a:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800ec3e:	0a4b      	lsrs	r3, r1, #9
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	895b      	ldrh	r3, [r3, #10]
 800ec44:	3b01      	subs	r3, #1
 800ec46:	4013      	ands	r3, r2
 800ec48:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d150      	bne.n	800ecf2 <f_write+0x184>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ec56:	4313      	orrs	r3, r2
 800ec58:	d10c      	bne.n	800ec74 <f_write+0x106>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ec60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d11a      	bne.n	800ec9c <f_write+0x12e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2100      	movs	r1, #0
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7fd f992 	bl	800bf94 <create_chain>
 800ec70:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ec72:	e013      	b.n	800ec9c <f_write+0x12e>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d007      	beq.n	800ec8c <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f7fd fa87 	bl	800c196 <clmt_clust>
 800ec88:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ec8a:	e007      	b.n	800ec9c <f_write+0x12e>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ec8c:	68fa      	ldr	r2, [r7, #12]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec92:	4619      	mov	r1, r3
 800ec94:	4610      	mov	r0, r2
 800ec96:	f7fd f97d 	bl	800bf94 <create_chain>
 800ec9a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ec9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f000 8133 	beq.w	800ef0a <f_write+0x39c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d10a      	bne.n	800ecc0 <f_write+0x152>
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2202      	movs	r2, #2
 800ecae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	2102      	movs	r1, #2
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fc fae2 	bl	800b280 <unlock_fs>
 800ecbc:	2302      	movs	r3, #2
 800ecbe:	e134      	b.n	800ef2a <f_write+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ecc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecc6:	d10a      	bne.n	800ecde <f_write+0x170>
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2201      	movs	r2, #1
 800eccc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	2101      	movs	r1, #1
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fc fad3 	bl	800b280 <unlock_fs>
 800ecda:	2301      	movs	r3, #1
 800ecdc:	e125      	b.n	800ef2a <f_write+0x3bc>
				fp->clust = clst;			/* Update current cluster */
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ece2:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d102      	bne.n	800ecf2 <f_write+0x184>
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ecf0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ecf8:	b25b      	sxtb	r3, r3
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	da20      	bge.n	800ed40 <f_write+0x1d2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	7858      	ldrb	r0, [r3, #1]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	f7fb ffff 	bl	800ad10 <disk_write>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d00a      	beq.n	800ed2e <f_write+0x1c0>
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	2101      	movs	r1, #1
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7fc faab 	bl	800b280 <unlock_fs>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e0fd      	b.n	800ef2a <f_write+0x3bc>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ed34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed38:	b2da      	uxtb	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ed40:	693a      	ldr	r2, [r7, #16]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed46:	4619      	mov	r1, r3
 800ed48:	4610      	mov	r0, r2
 800ed4a:	f7fc fd01 	bl	800b750 <clust2sect>
 800ed4e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d10a      	bne.n	800ed6c <f_write+0x1fe>
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2202      	movs	r2, #2
 800ed5a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	2102      	movs	r1, #2
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fc fa8c 	bl	800b280 <unlock_fs>
 800ed68:	2302      	movs	r3, #2
 800ed6a:	e0de      	b.n	800ef2a <f_write+0x3bc>
			sect += csect;
 800ed6c:	697a      	ldr	r2, [r7, #20]
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	4413      	add	r3, r2
 800ed72:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	0a5b      	lsrs	r3, r3, #9
 800ed78:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ed7a:	6a3b      	ldr	r3, [r7, #32]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d044      	beq.n	800ee0a <f_write+0x29c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ed80:	69ba      	ldr	r2, [r7, #24]
 800ed82:	6a3b      	ldr	r3, [r7, #32]
 800ed84:	4413      	add	r3, r2
 800ed86:	693a      	ldr	r2, [r7, #16]
 800ed88:	8952      	ldrh	r2, [r2, #10]
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d905      	bls.n	800ed9a <f_write+0x22c>
					cc = fs->csize - csect;
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	895b      	ldrh	r3, [r3, #10]
 800ed92:	461a      	mov	r2, r3
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	1ad3      	subs	r3, r2, r3
 800ed98:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	7858      	ldrb	r0, [r3, #1]
 800ed9e:	6a3b      	ldr	r3, [r7, #32]
 800eda0:	697a      	ldr	r2, [r7, #20]
 800eda2:	69f9      	ldr	r1, [r7, #28]
 800eda4:	f7fb ffb4 	bl	800ad10 <disk_write>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d00a      	beq.n	800edc4 <f_write+0x256>
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2201      	movs	r2, #1
 800edb2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	2101      	movs	r1, #1
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fc fa60 	bl	800b280 <unlock_fs>
 800edc0:	2301      	movs	r3, #1
 800edc2:	e0b2      	b.n	800ef2a <f_write+0x3bc>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	1ad3      	subs	r3, r2, r3
 800edcc:	6a3a      	ldr	r2, [r7, #32]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d917      	bls.n	800ee02 <f_write+0x294>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	1ad3      	subs	r3, r2, r3
 800ede0:	025b      	lsls	r3, r3, #9
 800ede2:	69fa      	ldr	r2, [r7, #28]
 800ede4:	4413      	add	r3, r2
 800ede6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edea:	4619      	mov	r1, r3
 800edec:	f7fc f9b4 	bl	800b158 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800edf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800edfa:	b2da      	uxtb	r2, r3
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ee02:	6a3b      	ldr	r3, [r7, #32]
 800ee04:	025b      	lsls	r3, r3, #9
 800ee06:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800ee08:	e04f      	b.n	800eeaa <f_write+0x33c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee0e:	697a      	ldr	r2, [r7, #20]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d020      	beq.n	800ee56 <f_write+0x2e8>
				fp->fptr < fp->obj.objsize &&
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ee20:	4290      	cmp	r0, r2
 800ee22:	eb71 0303 	sbcs.w	r3, r1, r3
 800ee26:	d216      	bcs.n	800ee56 <f_write+0x2e8>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	7858      	ldrb	r0, [r3, #1]
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ee32:	2301      	movs	r3, #1
 800ee34:	697a      	ldr	r2, [r7, #20]
 800ee36:	f7fb ff4b 	bl	800acd0 <disk_read>
 800ee3a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d00a      	beq.n	800ee56 <f_write+0x2e8>
					ABORT(fs, FR_DISK_ERR);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2201      	movs	r2, #1
 800ee44:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	2101      	movs	r1, #1
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7fc fa17 	bl	800b280 <unlock_fs>
 800ee52:	2301      	movs	r3, #1
 800ee54:	e069      	b.n	800ef2a <f_write+0x3bc>
			}
#endif
			fp->sect = sect;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	697a      	ldr	r2, [r7, #20]
 800ee5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ee62:	4613      	mov	r3, r2
 800ee64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee68:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ee6c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ee6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d901      	bls.n	800ee7a <f_write+0x30c>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ee86:	4613      	mov	r3, r2
 800ee88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee8c:	440b      	add	r3, r1
 800ee8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee90:	69f9      	ldr	r1, [r7, #28]
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fc f960 	bl	800b158 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ee9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800eeaa:	69fa      	ldr	r2, [r7, #28]
 800eeac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeae:	4413      	add	r3, r2
 800eeb0:	61fb      	str	r3, [r7, #28]
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800eeb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eeba:	2000      	movs	r0, #0
 800eebc:	4688      	mov	r8, r1
 800eebe:	4681      	mov	r9, r0
 800eec0:	eb12 0a08 	adds.w	sl, r2, r8
 800eec4:	eb43 0b09 	adc.w	fp, r3, r9
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eed4:	68f9      	ldr	r1, [r7, #12]
 800eed6:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800eeda:	4282      	cmp	r2, r0
 800eedc:	eb73 0601 	sbcs.w	r6, r3, r1
 800eee0:	d201      	bcs.n	800eee6 <f_write+0x378>
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	68f9      	ldr	r1, [r7, #12]
 800eee8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef2:	441a      	add	r2, r3
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	601a      	str	r2, [r3, #0]
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	f47f ae87 	bne.w	800ec16 <f_write+0xa8>
 800ef08:	e000      	b.n	800ef0c <f_write+0x39e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ef0a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef16:	b2da      	uxtb	r2, r3
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	2100      	movs	r1, #0
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fc f9ac 	bl	800b280 <unlock_fs>
 800ef28:	2300      	movs	r3, #0
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3734      	adds	r7, #52	@ 0x34
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef34 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800ef40:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800ef44:	6018      	str	r0, [r3, #0]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ef46:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800ef4a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 800ef54:	4611      	mov	r1, r2
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7ff f956 	bl	800e208 <validate>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	if (res == FR_OK) {
 800ef62:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	f040 818b 	bne.w	800f282 <f_sync+0x34e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ef6c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800ef70:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	f000 817f 	beq.w	800f282 <f_sync+0x34e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ef84:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800ef88:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef92:	b25b      	sxtb	r3, r3
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	da2e      	bge.n	800eff6 <f_sync+0xc2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ef98:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800ef9c:	7858      	ldrb	r0, [r3, #1]
 800ef9e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800efa2:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800efac:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800efb0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800efb8:	2301      	movs	r3, #1
 800efba:	f7fb fea9 	bl	800ad10 <disk_write>
 800efbe:	4603      	mov	r3, r0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d007      	beq.n	800efd4 <f_sync+0xa0>
 800efc4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800efc8:	2101      	movs	r1, #1
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fc f958 	bl	800b280 <unlock_fs>
 800efd0:	2301      	movs	r3, #1
 800efd2:	e160      	b.n	800f296 <f_sync+0x362>
				fp->flag &= (BYTE)~FA_DIRTY;
 800efd4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800efd8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800efe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800efe6:	b2da      	uxtb	r2, r3
 800efe8:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800efec:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eff6:	f7fb fbc7 	bl	800a788 <get_fattime>
 800effa:	f8c7 04c0 	str.w	r0, [r7, #1216]	@ 0x4c0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800effe:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	2b04      	cmp	r3, #4
 800f006:	f040 80ca 	bne.w	800f19e <f_sync+0x26a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800f00a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f00e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4618      	mov	r0, r3
 800f016:	f7fc fea9 	bl	800bd6c <fill_first_frag>
 800f01a:	4603      	mov	r3, r0
 800f01c:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 800f020:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f024:	2b00      	cmp	r3, #0
 800f026:	d112      	bne.n	800f04e <f_sync+0x11a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f028:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f02c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f030:	6818      	ldr	r0, [r3, #0]
 800f032:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f036:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f03e:	f04f 32ff 	mov.w	r2, #4294967295
 800f042:	4619      	mov	r1, r3
 800f044:	f7fc fec1 	bl	800bdca <fill_last_frag>
 800f048:	4603      	mov	r3, r0
 800f04a:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				}
				if (res == FR_OK) {
 800f04e:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f052:	2b00      	cmp	r3, #0
 800f054:	f040 8115 	bne.w	800f282 <f_sync+0x34e>
					INIT_NAMBUF(fs);
 800f058:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f05c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f060:	60da      	str	r2, [r3, #12]
 800f062:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f066:	f107 0208 	add.w	r2, r7, #8
 800f06a:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800f06c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f070:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800f07a:	4611      	mov	r1, r2
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7fd fdcf 	bl	800cc20 <load_obj_dir>
 800f082:	4603      	mov	r3, r0
 800f084:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					if (res == FR_OK) {
 800f088:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	f040 80f8 	bne.w	800f282 <f_sync+0x34e>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800f092:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f096:	691b      	ldr	r3, [r3, #16]
 800f098:	3304      	adds	r3, #4
 800f09a:	781a      	ldrb	r2, [r3, #0]
 800f09c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f0a0:	691b      	ldr	r3, [r3, #16]
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	f042 0220 	orr.w	r2, r2, #32
 800f0a8:	b2d2      	uxtb	r2, r2
 800f0aa:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800f0ac:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f0b0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	79da      	ldrb	r2, [r3, #7]
 800f0b8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f0bc:	691b      	ldr	r3, [r3, #16]
 800f0be:	3321      	adds	r3, #33	@ 0x21
 800f0c0:	f042 0201 	orr.w	r2, r2, #1
 800f0c4:	b2d2      	uxtb	r2, r2
 800f0c6:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800f0c8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f0cc:	691b      	ldr	r3, [r3, #16]
 800f0ce:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f0d2:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f0d6:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	689b      	ldr	r3, [r3, #8]
 800f0de:	4619      	mov	r1, r3
 800f0e0:	4610      	mov	r0, r2
 800f0e2:	f7fb ff85 	bl	800aff0 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800f0e6:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f0f0:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f0f4:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f0fe:	4608      	mov	r0, r1
 800f100:	f7fb ffa2 	bl	800b048 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800f104:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f108:	691b      	ldr	r3, [r3, #16]
 800f10a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800f10e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f112:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f11c:	4608      	mov	r0, r1
 800f11e:	f7fb ff93 	bl	800b048 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800f122:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f126:	691b      	ldr	r3, [r3, #16]
 800f128:	330c      	adds	r3, #12
 800f12a:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fb ff5e 	bl	800aff0 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800f134:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f138:	691b      	ldr	r3, [r3, #16]
 800f13a:	3315      	adds	r3, #21
 800f13c:	2200      	movs	r2, #0
 800f13e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800f140:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f144:	691b      	ldr	r3, [r3, #16]
 800f146:	3310      	adds	r3, #16
 800f148:	2100      	movs	r1, #0
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fb ff50 	bl	800aff0 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800f150:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800f154:	4618      	mov	r0, r3
 800f156:	f7fd fd99 	bl	800cc8c <store_xdir>
 800f15a:	4603      	mov	r3, r0
 800f15c:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
						if (res == FR_OK) {
 800f160:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f164:	2b00      	cmp	r3, #0
 800f166:	f040 808c 	bne.w	800f282 <f_sync+0x34e>
							res = sync_fs(fs);
 800f16a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f16e:	4618      	mov	r0, r3
 800f170:	f7fc fa80 	bl	800b674 <sync_fs>
 800f174:	4603      	mov	r3, r0
 800f176:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
							fp->flag &= (BYTE)~FA_MODIFIED;
 800f17a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f17e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f18c:	b2da      	uxtb	r2, r3
 800f18e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f192:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800f19c:	e071      	b.n	800f282 <f_sync+0x34e>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f19e:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	@ 0x4b8
 800f1a2:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f1a6:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	4610      	mov	r0, r2
 800f1b2:	f7fc fa31 	bl	800b618 <move_window>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 800f1bc:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d15e      	bne.n	800f282 <f_sync+0x34e>
					dir = fp->dir_ptr;
 800f1c4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f1c8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1d0:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f1d4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f1d8:	330b      	adds	r3, #11
 800f1da:	781a      	ldrb	r2, [r3, #0]
 800f1dc:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f1e0:	330b      	adds	r3, #11
 800f1e2:	f042 0220 	orr.w	r2, r2, #32
 800f1e6:	b2d2      	uxtb	r2, r2
 800f1e8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f1ea:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f1ee:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	6818      	ldr	r0, [r3, #0]
 800f1f6:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f1fa:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	461a      	mov	r2, r3
 800f204:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 800f208:	f7fd f9df 	bl	800c5ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f20c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f210:	f103 001c 	add.w	r0, r3, #28
 800f214:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f218:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f222:	4613      	mov	r3, r2
 800f224:	4619      	mov	r1, r3
 800f226:	f7fb fee3 	bl	800aff0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f22a:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f22e:	3316      	adds	r3, #22
 800f230:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 800f234:	4618      	mov	r0, r3
 800f236:	f7fb fedb 	bl	800aff0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f23a:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f23e:	3312      	adds	r3, #18
 800f240:	2100      	movs	r1, #0
 800f242:	4618      	mov	r0, r3
 800f244:	f7fb feb9 	bl	800afba <st_word>
					fs->wflag = 1;
 800f248:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f24c:	2201      	movs	r2, #1
 800f24e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f250:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f254:	4618      	mov	r0, r3
 800f256:	f7fc fa0d 	bl	800b674 <sync_fs>
 800f25a:	4603      	mov	r3, r0
 800f25c:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f260:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f264:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f26e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f272:	b2da      	uxtb	r2, r3
 800f274:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f278:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f282:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f286:	f897 24c7 	ldrb.w	r2, [r7, #1223]	@ 0x4c7
 800f28a:	4611      	mov	r1, r2
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fb fff7 	bl	800b280 <unlock_fs>
 800f292:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
}
 800f296:	4618      	mov	r0, r3
 800f298:	f507 6799 	add.w	r7, r7, #1224	@ 0x4c8
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7ff fe43 	bl	800ef34 <f_sync>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f2b2:	7bfb      	ldrb	r3, [r7, #15]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d11d      	bne.n	800f2f4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f107 0208 	add.w	r2, r7, #8
 800f2be:	4611      	mov	r1, r2
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fe ffa1 	bl	800e208 <validate>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f2ca:	7bfb      	ldrb	r3, [r7, #15]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d111      	bne.n	800f2f4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7fc f8fb 	bl	800b4d0 <dec_lock>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f2de:	7bfb      	ldrb	r3, [r7, #15]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d102      	bne.n	800f2ea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fb ffc6 	bl	800b280 <unlock_fs>
#endif
		}
	}
	return res;
 800f2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
	...

0800f300 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f300:	b480      	push	{r7}
 800f302:	b087      	sub	sp, #28
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	4613      	mov	r3, r2
 800f30c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f30e:	2301      	movs	r3, #1
 800f310:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f312:	2300      	movs	r3, #0
 800f314:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f316:	4b1f      	ldr	r3, [pc, #124]	@ (800f394 <FATFS_LinkDriverEx+0x94>)
 800f318:	7a5b      	ldrb	r3, [r3, #9]
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d131      	bne.n	800f384 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f320:	4b1c      	ldr	r3, [pc, #112]	@ (800f394 <FATFS_LinkDriverEx+0x94>)
 800f322:	7a5b      	ldrb	r3, [r3, #9]
 800f324:	b2db      	uxtb	r3, r3
 800f326:	461a      	mov	r2, r3
 800f328:	4b1a      	ldr	r3, [pc, #104]	@ (800f394 <FATFS_LinkDriverEx+0x94>)
 800f32a:	2100      	movs	r1, #0
 800f32c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f32e:	4b19      	ldr	r3, [pc, #100]	@ (800f394 <FATFS_LinkDriverEx+0x94>)
 800f330:	7a5b      	ldrb	r3, [r3, #9]
 800f332:	b2db      	uxtb	r3, r3
 800f334:	4a17      	ldr	r2, [pc, #92]	@ (800f394 <FATFS_LinkDriverEx+0x94>)
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	4413      	add	r3, r2
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f33e:	4b15      	ldr	r3, [pc, #84]	@ (800f394 <FATFS_LinkDriverEx+0x94>)
 800f340:	7a5b      	ldrb	r3, [r3, #9]
 800f342:	b2db      	uxtb	r3, r3
 800f344:	461a      	mov	r2, r3
 800f346:	4b13      	ldr	r3, [pc, #76]	@ (800f394 <FATFS_LinkDriverEx+0x94>)
 800f348:	4413      	add	r3, r2
 800f34a:	79fa      	ldrb	r2, [r7, #7]
 800f34c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f34e:	4b11      	ldr	r3, [pc, #68]	@ (800f394 <FATFS_LinkDriverEx+0x94>)
 800f350:	7a5b      	ldrb	r3, [r3, #9]
 800f352:	b2db      	uxtb	r3, r3
 800f354:	1c5a      	adds	r2, r3, #1
 800f356:	b2d1      	uxtb	r1, r2
 800f358:	4a0e      	ldr	r2, [pc, #56]	@ (800f394 <FATFS_LinkDriverEx+0x94>)
 800f35a:	7251      	strb	r1, [r2, #9]
 800f35c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f35e:	7dbb      	ldrb	r3, [r7, #22]
 800f360:	3330      	adds	r3, #48	@ 0x30
 800f362:	b2da      	uxtb	r2, r3
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	3301      	adds	r3, #1
 800f36c:	223a      	movs	r2, #58	@ 0x3a
 800f36e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	3302      	adds	r3, #2
 800f374:	222f      	movs	r2, #47	@ 0x2f
 800f376:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	3303      	adds	r3, #3
 800f37c:	2200      	movs	r2, #0
 800f37e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f380:	2300      	movs	r3, #0
 800f382:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f384:	7dfb      	ldrb	r3, [r7, #23]
}
 800f386:	4618      	mov	r0, r3
 800f388:	371c      	adds	r7, #28
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	20000f10 	.word	0x20000f10

0800f398 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	6839      	ldr	r1, [r7, #0]
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f7ff ffaa 	bl	800f300 <FATFS_LinkDriverEx>
 800f3ac:	4603      	mov	r3, r0
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3708      	adds	r7, #8
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
	...

0800f3b8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	4603      	mov	r3, r0
 800f3c0:	6039      	str	r1, [r7, #0]
 800f3c2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f3c4:	88fb      	ldrh	r3, [r7, #6]
 800f3c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f3c8:	d802      	bhi.n	800f3d0 <ff_convert+0x18>
		c = chr;
 800f3ca:	88fb      	ldrh	r3, [r7, #6]
 800f3cc:	81fb      	strh	r3, [r7, #14]
 800f3ce:	e025      	b.n	800f41c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d00b      	beq.n	800f3ee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f3d6:	88fb      	ldrh	r3, [r7, #6]
 800f3d8:	2bff      	cmp	r3, #255	@ 0xff
 800f3da:	d805      	bhi.n	800f3e8 <ff_convert+0x30>
 800f3dc:	88fb      	ldrh	r3, [r7, #6]
 800f3de:	3b80      	subs	r3, #128	@ 0x80
 800f3e0:	4a12      	ldr	r2, [pc, #72]	@ (800f42c <ff_convert+0x74>)
 800f3e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3e6:	e000      	b.n	800f3ea <ff_convert+0x32>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	81fb      	strh	r3, [r7, #14]
 800f3ec:	e016      	b.n	800f41c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	81fb      	strh	r3, [r7, #14]
 800f3f2:	e009      	b.n	800f408 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f3f4:	89fb      	ldrh	r3, [r7, #14]
 800f3f6:	4a0d      	ldr	r2, [pc, #52]	@ (800f42c <ff_convert+0x74>)
 800f3f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3fc:	88fa      	ldrh	r2, [r7, #6]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d006      	beq.n	800f410 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f402:	89fb      	ldrh	r3, [r7, #14]
 800f404:	3301      	adds	r3, #1
 800f406:	81fb      	strh	r3, [r7, #14]
 800f408:	89fb      	ldrh	r3, [r7, #14]
 800f40a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f40c:	d9f2      	bls.n	800f3f4 <ff_convert+0x3c>
 800f40e:	e000      	b.n	800f412 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f410:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f412:	89fb      	ldrh	r3, [r7, #14]
 800f414:	3380      	adds	r3, #128	@ 0x80
 800f416:	b29b      	uxth	r3, r3
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f41c:	89fb      	ldrh	r3, [r7, #14]
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3714      	adds	r7, #20
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop
 800f42c:	08016404 	.word	0x08016404

0800f430 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f430:	b480      	push	{r7}
 800f432:	b087      	sub	sp, #28
 800f434:	af00      	add	r7, sp, #0
 800f436:	4603      	mov	r3, r0
 800f438:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f43a:	88fb      	ldrh	r3, [r7, #6]
 800f43c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f440:	d201      	bcs.n	800f446 <ff_wtoupper+0x16>
 800f442:	4b3e      	ldr	r3, [pc, #248]	@ (800f53c <ff_wtoupper+0x10c>)
 800f444:	e000      	b.n	800f448 <ff_wtoupper+0x18>
 800f446:	4b3e      	ldr	r3, [pc, #248]	@ (800f540 <ff_wtoupper+0x110>)
 800f448:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	1c9a      	adds	r2, r3, #2
 800f44e:	617a      	str	r2, [r7, #20]
 800f450:	881b      	ldrh	r3, [r3, #0]
 800f452:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f454:	8a7b      	ldrh	r3, [r7, #18]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d068      	beq.n	800f52c <ff_wtoupper+0xfc>
 800f45a:	88fa      	ldrh	r2, [r7, #6]
 800f45c:	8a7b      	ldrh	r3, [r7, #18]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d364      	bcc.n	800f52c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	1c9a      	adds	r2, r3, #2
 800f466:	617a      	str	r2, [r7, #20]
 800f468:	881b      	ldrh	r3, [r3, #0]
 800f46a:	823b      	strh	r3, [r7, #16]
 800f46c:	8a3b      	ldrh	r3, [r7, #16]
 800f46e:	0a1b      	lsrs	r3, r3, #8
 800f470:	81fb      	strh	r3, [r7, #14]
 800f472:	8a3b      	ldrh	r3, [r7, #16]
 800f474:	b2db      	uxtb	r3, r3
 800f476:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f478:	88fa      	ldrh	r2, [r7, #6]
 800f47a:	8a79      	ldrh	r1, [r7, #18]
 800f47c:	8a3b      	ldrh	r3, [r7, #16]
 800f47e:	440b      	add	r3, r1
 800f480:	429a      	cmp	r2, r3
 800f482:	da49      	bge.n	800f518 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f484:	89fb      	ldrh	r3, [r7, #14]
 800f486:	2b08      	cmp	r3, #8
 800f488:	d84f      	bhi.n	800f52a <ff_wtoupper+0xfa>
 800f48a:	a201      	add	r2, pc, #4	@ (adr r2, 800f490 <ff_wtoupper+0x60>)
 800f48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f490:	0800f4b5 	.word	0x0800f4b5
 800f494:	0800f4c7 	.word	0x0800f4c7
 800f498:	0800f4dd 	.word	0x0800f4dd
 800f49c:	0800f4e5 	.word	0x0800f4e5
 800f4a0:	0800f4ed 	.word	0x0800f4ed
 800f4a4:	0800f4f5 	.word	0x0800f4f5
 800f4a8:	0800f4fd 	.word	0x0800f4fd
 800f4ac:	0800f505 	.word	0x0800f505
 800f4b0:	0800f50d 	.word	0x0800f50d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f4b4:	88fa      	ldrh	r2, [r7, #6]
 800f4b6:	8a7b      	ldrh	r3, [r7, #18]
 800f4b8:	1ad3      	subs	r3, r2, r3
 800f4ba:	005b      	lsls	r3, r3, #1
 800f4bc:	697a      	ldr	r2, [r7, #20]
 800f4be:	4413      	add	r3, r2
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	80fb      	strh	r3, [r7, #6]
 800f4c4:	e027      	b.n	800f516 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f4c6:	88fa      	ldrh	r2, [r7, #6]
 800f4c8:	8a7b      	ldrh	r3, [r7, #18]
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	f003 0301 	and.w	r3, r3, #1
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	88fa      	ldrh	r2, [r7, #6]
 800f4d6:	1ad3      	subs	r3, r2, r3
 800f4d8:	80fb      	strh	r3, [r7, #6]
 800f4da:	e01c      	b.n	800f516 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f4dc:	88fb      	ldrh	r3, [r7, #6]
 800f4de:	3b10      	subs	r3, #16
 800f4e0:	80fb      	strh	r3, [r7, #6]
 800f4e2:	e018      	b.n	800f516 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f4e4:	88fb      	ldrh	r3, [r7, #6]
 800f4e6:	3b20      	subs	r3, #32
 800f4e8:	80fb      	strh	r3, [r7, #6]
 800f4ea:	e014      	b.n	800f516 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f4ec:	88fb      	ldrh	r3, [r7, #6]
 800f4ee:	3b30      	subs	r3, #48	@ 0x30
 800f4f0:	80fb      	strh	r3, [r7, #6]
 800f4f2:	e010      	b.n	800f516 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f4f4:	88fb      	ldrh	r3, [r7, #6]
 800f4f6:	3b1a      	subs	r3, #26
 800f4f8:	80fb      	strh	r3, [r7, #6]
 800f4fa:	e00c      	b.n	800f516 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f4fc:	88fb      	ldrh	r3, [r7, #6]
 800f4fe:	3308      	adds	r3, #8
 800f500:	80fb      	strh	r3, [r7, #6]
 800f502:	e008      	b.n	800f516 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f504:	88fb      	ldrh	r3, [r7, #6]
 800f506:	3b50      	subs	r3, #80	@ 0x50
 800f508:	80fb      	strh	r3, [r7, #6]
 800f50a:	e004      	b.n	800f516 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f50c:	88fb      	ldrh	r3, [r7, #6]
 800f50e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f512:	80fb      	strh	r3, [r7, #6]
 800f514:	bf00      	nop
			}
			break;
 800f516:	e008      	b.n	800f52a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f518:	89fb      	ldrh	r3, [r7, #14]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d195      	bne.n	800f44a <ff_wtoupper+0x1a>
 800f51e:	8a3b      	ldrh	r3, [r7, #16]
 800f520:	005b      	lsls	r3, r3, #1
 800f522:	697a      	ldr	r2, [r7, #20]
 800f524:	4413      	add	r3, r2
 800f526:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f528:	e78f      	b.n	800f44a <ff_wtoupper+0x1a>
			break;
 800f52a:	bf00      	nop
	}

	return chr;
 800f52c:	88fb      	ldrh	r3, [r7, #6]
}
 800f52e:	4618      	mov	r0, r3
 800f530:	371c      	adds	r7, #28
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr
 800f53a:	bf00      	nop
 800f53c:	08016504 	.word	0x08016504
 800f540:	080166f8 	.word	0x080166f8

0800f544 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	4603      	mov	r3, r0
 800f54c:	6039      	str	r1, [r7, #0]
 800f54e:	71fb      	strb	r3, [r7, #7]

    int ret;
#if _USE_MUTEX

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
 800f550:	2300      	movs	r3, #0
 800f552:	60fb      	str	r3, [r7, #12]
 800f554:	2300      	movs	r3, #0
 800f556:	613b      	str	r3, [r7, #16]
    *sobj = osMutexCreate(osMutex(MTX));
 800f558:	f107 030c 	add.w	r3, r7, #12
 800f55c:	4618      	mov	r0, r3
 800f55e:	f000 f8e9 	bl	800f734 <osMutexCreate>
 800f562:	4602      	mov	r2, r0
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	bf14      	ite	ne
 800f570:	2301      	movne	r3, #1
 800f572:	2300      	moveq	r3, #0
 800f574:	b2db      	uxtb	r3, r3
 800f576:	617b      	str	r3, [r7, #20]

    return ret;
 800f578:	697b      	ldr	r3, [r7, #20]
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3718      	adds	r7, #24
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b082      	sub	sp, #8
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 f96e 	bl	800f86c <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800f590:	2301      	movs	r3, #1
}
 800f592:	4618      	mov	r0, r3
 800f594:	3708      	adds	r7, #8
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b084      	sub	sp, #16
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
 800f5a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f000 f8da 	bl	800f764 <osMutexWait>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d101      	bne.n	800f5ba <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3710      	adds	r7, #16
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 f917 	bl	800f800 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800f5d2:	bf00      	nop
 800f5d4:	3708      	adds	r7, #8
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}

0800f5da <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f5da:	b480      	push	{r7}
 800f5dc:	b085      	sub	sp, #20
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f5e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f5ec:	2b84      	cmp	r3, #132	@ 0x84
 800f5ee:	d005      	beq.n	800f5fc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f5f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	3303      	adds	r3, #3
 800f5fa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3714      	adds	r7, #20
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f60a:	b480      	push	{r7}
 800f60c:	b083      	sub	sp, #12
 800f60e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f610:	f3ef 8305 	mrs	r3, IPSR
 800f614:	607b      	str	r3, [r7, #4]
  return(result);
 800f616:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f618:	2b00      	cmp	r3, #0
 800f61a:	bf14      	ite	ne
 800f61c:	2301      	movne	r3, #1
 800f61e:	2300      	moveq	r3, #0
 800f620:	b2db      	uxtb	r3, r3
}
 800f622:	4618      	mov	r0, r3
 800f624:	370c      	adds	r7, #12
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr

0800f62e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f62e:	b580      	push	{r7, lr}
 800f630:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f632:	f001 fcdd 	bl	8010ff0 <vTaskStartScheduler>
  
  return osOK;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800f640:	f002 f922 	bl	8011888 <xTaskGetSchedulerState>
 800f644:	4603      	mov	r3, r0
 800f646:	2b01      	cmp	r3, #1
 800f648:	d101      	bne.n	800f64e <osKernelRunning+0x12>
    return 0;
 800f64a:	2300      	movs	r3, #0
 800f64c:	e000      	b.n	800f650 <osKernelRunning+0x14>
  else
    return 1;
 800f64e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800f650:	4618      	mov	r0, r3
 800f652:	bd80      	pop	{r7, pc}

0800f654 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f658:	f7ff ffd7 	bl	800f60a <inHandlerMode>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d003      	beq.n	800f66a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f662:	f001 fdeb 	bl	801123c <xTaskGetTickCountFromISR>
 800f666:	4603      	mov	r3, r0
 800f668:	e002      	b.n	800f670 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f66a:	f001 fdd7 	bl	801121c <xTaskGetTickCount>
 800f66e:	4603      	mov	r3, r0
  }
}
 800f670:	4618      	mov	r0, r3
 800f672:	bd80      	pop	{r7, pc}

0800f674 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f676:	b089      	sub	sp, #36	@ 0x24
 800f678:	af04      	add	r7, sp, #16
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	695b      	ldr	r3, [r3, #20]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d020      	beq.n	800f6c8 <osThreadCreate+0x54>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	699b      	ldr	r3, [r3, #24]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d01c      	beq.n	800f6c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	685c      	ldr	r4, [r3, #4]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	691e      	ldr	r6, [r3, #16]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7ff ff9a 	bl	800f5da <makeFreeRtosPriority>
 800f6a6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	695b      	ldr	r3, [r3, #20]
 800f6ac:	687a      	ldr	r2, [r7, #4]
 800f6ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f6b0:	9202      	str	r2, [sp, #8]
 800f6b2:	9301      	str	r3, [sp, #4]
 800f6b4:	9100      	str	r1, [sp, #0]
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	4632      	mov	r2, r6
 800f6ba:	4629      	mov	r1, r5
 800f6bc:	4620      	mov	r0, r4
 800f6be:	f001 fa21 	bl	8010b04 <xTaskCreateStatic>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	60fb      	str	r3, [r7, #12]
 800f6c6:	e01c      	b.n	800f702 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	685c      	ldr	r4, [r3, #4]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f6d4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7ff ff7c 	bl	800f5da <makeFreeRtosPriority>
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	f107 030c 	add.w	r3, r7, #12
 800f6e8:	9301      	str	r3, [sp, #4]
 800f6ea:	9200      	str	r2, [sp, #0]
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	4632      	mov	r2, r6
 800f6f0:	4629      	mov	r1, r5
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	f001 fa66 	bl	8010bc4 <xTaskCreate>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d001      	beq.n	800f702 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f6fe:	2300      	movs	r3, #0
 800f700:	e000      	b.n	800f704 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f702:	68fb      	ldr	r3, [r7, #12]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3714      	adds	r7, #20
 800f708:	46bd      	mov	sp, r7
 800f70a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f70c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d001      	beq.n	800f722 <osDelay+0x16>
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	e000      	b.n	800f724 <osDelay+0x18>
 800f722:	2301      	movs	r3, #1
 800f724:	4618      	mov	r0, r3
 800f726:	f001 fc2d 	bl	8010f84 <vTaskDelay>
  
  return osOK;
 800f72a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d007      	beq.n	800f754 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	685b      	ldr	r3, [r3, #4]
 800f748:	4619      	mov	r1, r3
 800f74a:	2001      	movs	r0, #1
 800f74c:	f000 fba5 	bl	800fe9a <xQueueCreateMutexStatic>
 800f750:	4603      	mov	r3, r0
 800f752:	e003      	b.n	800f75c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800f754:	2001      	movs	r0, #1
 800f756:	f000 fb88 	bl	800fe6a <xQueueCreateMutex>
 800f75a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f76e:	2300      	movs	r3, #0
 800f770:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d101      	bne.n	800f77c <osMutexWait+0x18>
    return osErrorParameter;
 800f778:	2380      	movs	r3, #128	@ 0x80
 800f77a:	e03a      	b.n	800f7f2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800f77c:	2300      	movs	r3, #0
 800f77e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f786:	d103      	bne.n	800f790 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800f788:	f04f 33ff 	mov.w	r3, #4294967295
 800f78c:	60fb      	str	r3, [r7, #12]
 800f78e:	e009      	b.n	800f7a4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d006      	beq.n	800f7a4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d101      	bne.n	800f7a4 <osMutexWait+0x40>
      ticks = 1;
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f7a4:	f7ff ff31 	bl	800f60a <inHandlerMode>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d017      	beq.n	800f7de <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f7ae:	f107 0308 	add.w	r3, r7, #8
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 ffac 	bl	8010714 <xQueueReceiveFromISR>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	2b01      	cmp	r3, #1
 800f7c0:	d001      	beq.n	800f7c6 <osMutexWait+0x62>
      return osErrorOS;
 800f7c2:	23ff      	movs	r3, #255	@ 0xff
 800f7c4:	e015      	b.n	800f7f2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d011      	beq.n	800f7f0 <osMutexWait+0x8c>
 800f7cc:	4b0b      	ldr	r3, [pc, #44]	@ (800f7fc <osMutexWait+0x98>)
 800f7ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	e008      	b.n	800f7f0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800f7de:	68f9      	ldr	r1, [r7, #12]
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f000 fe87 	bl	80104f4 <xQueueSemaphoreTake>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d001      	beq.n	800f7f0 <osMutexWait+0x8c>
    return osErrorOS;
 800f7ec:	23ff      	movs	r3, #255	@ 0xff
 800f7ee:	e000      	b.n	800f7f2 <osMutexWait+0x8e>
  }
  
  return osOK;
 800f7f0:	2300      	movs	r3, #0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	e000ed04 	.word	0xe000ed04

0800f800 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f808:	2300      	movs	r3, #0
 800f80a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f80c:	2300      	movs	r3, #0
 800f80e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800f810:	f7ff fefb 	bl	800f60a <inHandlerMode>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d016      	beq.n	800f848 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f81a:	f107 0308 	add.w	r3, r7, #8
 800f81e:	4619      	mov	r1, r3
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f000 fcf5 	bl	8010210 <xQueueGiveFromISR>
 800f826:	4603      	mov	r3, r0
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d001      	beq.n	800f830 <osMutexRelease+0x30>
      return osErrorOS;
 800f82c:	23ff      	movs	r3, #255	@ 0xff
 800f82e:	e017      	b.n	800f860 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d013      	beq.n	800f85e <osMutexRelease+0x5e>
 800f836:	4b0c      	ldr	r3, [pc, #48]	@ (800f868 <osMutexRelease+0x68>)
 800f838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f83c:	601a      	str	r2, [r3, #0]
 800f83e:	f3bf 8f4f 	dsb	sy
 800f842:	f3bf 8f6f 	isb	sy
 800f846:	e00a      	b.n	800f85e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800f848:	2300      	movs	r3, #0
 800f84a:	2200      	movs	r2, #0
 800f84c:	2100      	movs	r1, #0
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 fb3e 	bl	800fed0 <xQueueGenericSend>
 800f854:	4603      	mov	r3, r0
 800f856:	2b01      	cmp	r3, #1
 800f858:	d001      	beq.n	800f85e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800f85a:	23ff      	movs	r3, #255	@ 0xff
 800f85c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800f85e:	68fb      	ldr	r3, [r7, #12]
}
 800f860:	4618      	mov	r0, r3
 800f862:	3710      	adds	r7, #16
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	e000ed04 	.word	0xe000ed04

0800f86c <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f874:	f7ff fec9 	bl	800f60a <inHandlerMode>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d001      	beq.n	800f882 <osMutexDelete+0x16>
    return osErrorISR;
 800f87e:	2382      	movs	r3, #130	@ 0x82
 800f880:	e003      	b.n	800f88a <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 ffc8 	bl	8010818 <vQueueDelete>

  return osOK;
 800f888:	2300      	movs	r3, #0
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3708      	adds	r7, #8
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}

0800f892 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800f892:	b590      	push	{r4, r7, lr}
 800f894:	b085      	sub	sp, #20
 800f896:	af02      	add	r7, sp, #8
 800f898:	6078      	str	r0, [r7, #4]
 800f89a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d011      	beq.n	800f8c8 <osMessageCreate+0x36>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	68db      	ldr	r3, [r3, #12]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00d      	beq.n	800f8c8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6818      	ldr	r0, [r3, #0]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6859      	ldr	r1, [r3, #4]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	689a      	ldr	r2, [r3, #8]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	2400      	movs	r4, #0
 800f8be:	9400      	str	r4, [sp, #0]
 800f8c0:	f000 f9e2 	bl	800fc88 <xQueueGenericCreateStatic>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	e008      	b.n	800f8da <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6818      	ldr	r0, [r3, #0]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	f000 fa55 	bl	800fd82 <xQueueGenericCreate>
 800f8d8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	370c      	adds	r7, #12
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd90      	pop	{r4, r7, pc}
	...

0800f8e4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b086      	sub	sp, #24
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d101      	bne.n	800f902 <osMessagePut+0x1e>
    ticks = 1;
 800f8fe:	2301      	movs	r3, #1
 800f900:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800f902:	f7ff fe82 	bl	800f60a <inHandlerMode>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d018      	beq.n	800f93e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800f90c:	f107 0210 	add.w	r2, r7, #16
 800f910:	f107 0108 	add.w	r1, r7, #8
 800f914:	2300      	movs	r3, #0
 800f916:	68f8      	ldr	r0, [r7, #12]
 800f918:	f000 fbdc 	bl	80100d4 <xQueueGenericSendFromISR>
 800f91c:	4603      	mov	r3, r0
 800f91e:	2b01      	cmp	r3, #1
 800f920:	d001      	beq.n	800f926 <osMessagePut+0x42>
      return osErrorOS;
 800f922:	23ff      	movs	r3, #255	@ 0xff
 800f924:	e018      	b.n	800f958 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d014      	beq.n	800f956 <osMessagePut+0x72>
 800f92c:	4b0c      	ldr	r3, [pc, #48]	@ (800f960 <osMessagePut+0x7c>)
 800f92e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f932:	601a      	str	r2, [r3, #0]
 800f934:	f3bf 8f4f 	dsb	sy
 800f938:	f3bf 8f6f 	isb	sy
 800f93c:	e00b      	b.n	800f956 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800f93e:	f107 0108 	add.w	r1, r7, #8
 800f942:	2300      	movs	r3, #0
 800f944:	697a      	ldr	r2, [r7, #20]
 800f946:	68f8      	ldr	r0, [r7, #12]
 800f948:	f000 fac2 	bl	800fed0 <xQueueGenericSend>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d001      	beq.n	800f956 <osMessagePut+0x72>
      return osErrorOS;
 800f952:	23ff      	movs	r3, #255	@ 0xff
 800f954:	e000      	b.n	800f958 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3718      	adds	r7, #24
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}
 800f960:	e000ed04 	.word	0xe000ed04

0800f964 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800f964:	b590      	push	{r4, r7, lr}
 800f966:	b08b      	sub	sp, #44	@ 0x2c
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800f974:	2300      	movs	r3, #0
 800f976:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d10a      	bne.n	800f994 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800f97e:	2380      	movs	r3, #128	@ 0x80
 800f980:	617b      	str	r3, [r7, #20]
    return event;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	461c      	mov	r4, r3
 800f986:	f107 0314 	add.w	r3, r7, #20
 800f98a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f98e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f992:	e054      	b.n	800fa3e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800f994:	2300      	movs	r3, #0
 800f996:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a2:	d103      	bne.n	800f9ac <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800f9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f9aa:	e009      	b.n	800f9c0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d006      	beq.n	800f9c0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800f9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d101      	bne.n	800f9c0 <osMessageGet+0x5c>
      ticks = 1;
 800f9bc:	2301      	movs	r3, #1
 800f9be:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800f9c0:	f7ff fe23 	bl	800f60a <inHandlerMode>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d01c      	beq.n	800fa04 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800f9ca:	f107 0220 	add.w	r2, r7, #32
 800f9ce:	f107 0314 	add.w	r3, r7, #20
 800f9d2:	3304      	adds	r3, #4
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	68b8      	ldr	r0, [r7, #8]
 800f9d8:	f000 fe9c 	bl	8010714 <xQueueReceiveFromISR>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d102      	bne.n	800f9e8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800f9e2:	2310      	movs	r3, #16
 800f9e4:	617b      	str	r3, [r7, #20]
 800f9e6:	e001      	b.n	800f9ec <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f9ec:	6a3b      	ldr	r3, [r7, #32]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d01d      	beq.n	800fa2e <osMessageGet+0xca>
 800f9f2:	4b15      	ldr	r3, [pc, #84]	@ (800fa48 <osMessageGet+0xe4>)
 800f9f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9f8:	601a      	str	r2, [r3, #0]
 800f9fa:	f3bf 8f4f 	dsb	sy
 800f9fe:	f3bf 8f6f 	isb	sy
 800fa02:	e014      	b.n	800fa2e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fa04:	f107 0314 	add.w	r3, r7, #20
 800fa08:	3304      	adds	r3, #4
 800fa0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	68b8      	ldr	r0, [r7, #8]
 800fa10:	f000 fc8e 	bl	8010330 <xQueueReceive>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d102      	bne.n	800fa20 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fa1a:	2310      	movs	r3, #16
 800fa1c:	617b      	str	r3, [r7, #20]
 800fa1e:	e006      	b.n	800fa2e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fa20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d101      	bne.n	800fa2a <osMessageGet+0xc6>
 800fa26:	2300      	movs	r3, #0
 800fa28:	e000      	b.n	800fa2c <osMessageGet+0xc8>
 800fa2a:	2340      	movs	r3, #64	@ 0x40
 800fa2c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	461c      	mov	r4, r3
 800fa32:	f107 0314 	add.w	r3, r7, #20
 800fa36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	372c      	adds	r7, #44	@ 0x2c
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd90      	pop	{r4, r7, pc}
 800fa46:	bf00      	nop
 800fa48:	e000ed04 	.word	0xe000ed04

0800fa4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f103 0208 	add.w	r2, r3, #8
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f04f 32ff 	mov.w	r2, #4294967295
 800fa64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f103 0208 	add.w	r2, r3, #8
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f103 0208 	add.w	r2, r3, #8
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fa80:	bf00      	nop
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr

0800fa8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2200      	movs	r2, #0
 800fa98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fa9a:	bf00      	nop
 800fa9c:	370c      	adds	r7, #12
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr

0800faa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800faa6:	b480      	push	{r7}
 800faa8:	b085      	sub	sp, #20
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
 800faae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	68fa      	ldr	r2, [r7, #12]
 800faba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	689a      	ldr	r2, [r3, #8]
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	689b      	ldr	r3, [r3, #8]
 800fac8:	683a      	ldr	r2, [r7, #0]
 800faca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	683a      	ldr	r2, [r7, #0]
 800fad0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	1c5a      	adds	r2, r3, #1
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	601a      	str	r2, [r3, #0]
}
 800fae2:	bf00      	nop
 800fae4:	3714      	adds	r7, #20
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr

0800faee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800faee:	b480      	push	{r7}
 800faf0:	b085      	sub	sp, #20
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
 800faf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb04:	d103      	bne.n	800fb0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	691b      	ldr	r3, [r3, #16]
 800fb0a:	60fb      	str	r3, [r7, #12]
 800fb0c:	e00c      	b.n	800fb28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	3308      	adds	r3, #8
 800fb12:	60fb      	str	r3, [r7, #12]
 800fb14:	e002      	b.n	800fb1c <vListInsert+0x2e>
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	60fb      	str	r3, [r7, #12]
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	68ba      	ldr	r2, [r7, #8]
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d2f6      	bcs.n	800fb16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	685a      	ldr	r2, [r3, #4]
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	683a      	ldr	r2, [r7, #0]
 800fb36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	68fa      	ldr	r2, [r7, #12]
 800fb3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	683a      	ldr	r2, [r7, #0]
 800fb42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	1c5a      	adds	r2, r3, #1
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	601a      	str	r2, [r3, #0]
}
 800fb54:	bf00      	nop
 800fb56:	3714      	adds	r7, #20
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr

0800fb60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fb60:	b480      	push	{r7}
 800fb62:	b085      	sub	sp, #20
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	691b      	ldr	r3, [r3, #16]
 800fb6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	6892      	ldr	r2, [r2, #8]
 800fb76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	6852      	ldr	r2, [r2, #4]
 800fb80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	687a      	ldr	r2, [r7, #4]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d103      	bne.n	800fb94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	689a      	ldr	r2, [r3, #8]
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2200      	movs	r2, #0
 800fb98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	1e5a      	subs	r2, r3, #1
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3714      	adds	r7, #20
 800fbac:	46bd      	mov	sp, r7
 800fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb2:	4770      	bx	lr

0800fbb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d10b      	bne.n	800fbe0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fbc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbcc:	f383 8811 	msr	BASEPRI, r3
 800fbd0:	f3bf 8f6f 	isb	sy
 800fbd4:	f3bf 8f4f 	dsb	sy
 800fbd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fbda:	bf00      	nop
 800fbdc:	bf00      	nop
 800fbde:	e7fd      	b.n	800fbdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fbe0:	f002 f9aa 	bl	8011f38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbec:	68f9      	ldr	r1, [r7, #12]
 800fbee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fbf0:	fb01 f303 	mul.w	r3, r1, r3
 800fbf4:	441a      	add	r2, r3
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681a      	ldr	r2, [r3, #0]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc10:	3b01      	subs	r3, #1
 800fc12:	68f9      	ldr	r1, [r7, #12]
 800fc14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fc16:	fb01 f303 	mul.w	r3, r1, r3
 800fc1a:	441a      	add	r2, r3
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	22ff      	movs	r2, #255	@ 0xff
 800fc24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	22ff      	movs	r2, #255	@ 0xff
 800fc2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d114      	bne.n	800fc60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	691b      	ldr	r3, [r3, #16]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d01a      	beq.n	800fc74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	3310      	adds	r3, #16
 800fc42:	4618      	mov	r0, r3
 800fc44:	f001 fc58 	bl	80114f8 <xTaskRemoveFromEventList>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d012      	beq.n	800fc74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fc4e:	4b0d      	ldr	r3, [pc, #52]	@ (800fc84 <xQueueGenericReset+0xd0>)
 800fc50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc54:	601a      	str	r2, [r3, #0]
 800fc56:	f3bf 8f4f 	dsb	sy
 800fc5a:	f3bf 8f6f 	isb	sy
 800fc5e:	e009      	b.n	800fc74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	3310      	adds	r3, #16
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7ff fef1 	bl	800fa4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	3324      	adds	r3, #36	@ 0x24
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7ff feec 	bl	800fa4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fc74:	f002 f992 	bl	8011f9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fc78:	2301      	movs	r3, #1
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	e000ed04 	.word	0xe000ed04

0800fc88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b08e      	sub	sp, #56	@ 0x38
 800fc8c:	af02      	add	r7, sp, #8
 800fc8e:	60f8      	str	r0, [r7, #12]
 800fc90:	60b9      	str	r1, [r7, #8]
 800fc92:	607a      	str	r2, [r7, #4]
 800fc94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d10b      	bne.n	800fcb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800fc9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fca0:	f383 8811 	msr	BASEPRI, r3
 800fca4:	f3bf 8f6f 	isb	sy
 800fca8:	f3bf 8f4f 	dsb	sy
 800fcac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fcae:	bf00      	nop
 800fcb0:	bf00      	nop
 800fcb2:	e7fd      	b.n	800fcb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d10b      	bne.n	800fcd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800fcba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcbe:	f383 8811 	msr	BASEPRI, r3
 800fcc2:	f3bf 8f6f 	isb	sy
 800fcc6:	f3bf 8f4f 	dsb	sy
 800fcca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fccc:	bf00      	nop
 800fcce:	bf00      	nop
 800fcd0:	e7fd      	b.n	800fcce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d002      	beq.n	800fcde <xQueueGenericCreateStatic+0x56>
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <xQueueGenericCreateStatic+0x5a>
 800fcde:	2301      	movs	r3, #1
 800fce0:	e000      	b.n	800fce4 <xQueueGenericCreateStatic+0x5c>
 800fce2:	2300      	movs	r3, #0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d10b      	bne.n	800fd00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800fce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcec:	f383 8811 	msr	BASEPRI, r3
 800fcf0:	f3bf 8f6f 	isb	sy
 800fcf4:	f3bf 8f4f 	dsb	sy
 800fcf8:	623b      	str	r3, [r7, #32]
}
 800fcfa:	bf00      	nop
 800fcfc:	bf00      	nop
 800fcfe:	e7fd      	b.n	800fcfc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d102      	bne.n	800fd0c <xQueueGenericCreateStatic+0x84>
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d101      	bne.n	800fd10 <xQueueGenericCreateStatic+0x88>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	e000      	b.n	800fd12 <xQueueGenericCreateStatic+0x8a>
 800fd10:	2300      	movs	r3, #0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d10b      	bne.n	800fd2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800fd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1a:	f383 8811 	msr	BASEPRI, r3
 800fd1e:	f3bf 8f6f 	isb	sy
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	61fb      	str	r3, [r7, #28]
}
 800fd28:	bf00      	nop
 800fd2a:	bf00      	nop
 800fd2c:	e7fd      	b.n	800fd2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fd2e:	2348      	movs	r3, #72	@ 0x48
 800fd30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	2b48      	cmp	r3, #72	@ 0x48
 800fd36:	d00b      	beq.n	800fd50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800fd38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd3c:	f383 8811 	msr	BASEPRI, r3
 800fd40:	f3bf 8f6f 	isb	sy
 800fd44:	f3bf 8f4f 	dsb	sy
 800fd48:	61bb      	str	r3, [r7, #24]
}
 800fd4a:	bf00      	nop
 800fd4c:	bf00      	nop
 800fd4e:	e7fd      	b.n	800fd4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fd50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800fd56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d00d      	beq.n	800fd78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd5e:	2201      	movs	r2, #1
 800fd60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fd64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800fd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	4613      	mov	r3, r2
 800fd6e:	687a      	ldr	r2, [r7, #4]
 800fd70:	68b9      	ldr	r1, [r7, #8]
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f000 f840 	bl	800fdf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3730      	adds	r7, #48	@ 0x30
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b08a      	sub	sp, #40	@ 0x28
 800fd86:	af02      	add	r7, sp, #8
 800fd88:	60f8      	str	r0, [r7, #12]
 800fd8a:	60b9      	str	r1, [r7, #8]
 800fd8c:	4613      	mov	r3, r2
 800fd8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d10b      	bne.n	800fdae <xQueueGenericCreate+0x2c>
	__asm volatile
 800fd96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd9a:	f383 8811 	msr	BASEPRI, r3
 800fd9e:	f3bf 8f6f 	isb	sy
 800fda2:	f3bf 8f4f 	dsb	sy
 800fda6:	613b      	str	r3, [r7, #16]
}
 800fda8:	bf00      	nop
 800fdaa:	bf00      	nop
 800fdac:	e7fd      	b.n	800fdaa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	68ba      	ldr	r2, [r7, #8]
 800fdb2:	fb02 f303 	mul.w	r3, r2, r3
 800fdb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fdb8:	69fb      	ldr	r3, [r7, #28]
 800fdba:	3348      	adds	r3, #72	@ 0x48
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f002 f9dd 	bl	801217c <pvPortMalloc>
 800fdc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fdc4:	69bb      	ldr	r3, [r7, #24]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d011      	beq.n	800fdee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fdca:	69bb      	ldr	r3, [r7, #24]
 800fdcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	3348      	adds	r3, #72	@ 0x48
 800fdd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fdd4:	69bb      	ldr	r3, [r7, #24]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fddc:	79fa      	ldrb	r2, [r7, #7]
 800fdde:	69bb      	ldr	r3, [r7, #24]
 800fde0:	9300      	str	r3, [sp, #0]
 800fde2:	4613      	mov	r3, r2
 800fde4:	697a      	ldr	r2, [r7, #20]
 800fde6:	68b9      	ldr	r1, [r7, #8]
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	f000 f805 	bl	800fdf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fdee:	69bb      	ldr	r3, [r7, #24]
	}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3720      	adds	r7, #32
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	607a      	str	r2, [r7, #4]
 800fe04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d103      	bne.n	800fe14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fe0c:	69bb      	ldr	r3, [r7, #24]
 800fe0e:	69ba      	ldr	r2, [r7, #24]
 800fe10:	601a      	str	r2, [r3, #0]
 800fe12:	e002      	b.n	800fe1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fe14:	69bb      	ldr	r3, [r7, #24]
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fe1a:	69bb      	ldr	r3, [r7, #24]
 800fe1c:	68fa      	ldr	r2, [r7, #12]
 800fe1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	68ba      	ldr	r2, [r7, #8]
 800fe24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fe26:	2101      	movs	r1, #1
 800fe28:	69b8      	ldr	r0, [r7, #24]
 800fe2a:	f7ff fec3 	bl	800fbb4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fe2e:	bf00      	nop
 800fe30:	3710      	adds	r7, #16
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}

0800fe36 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fe36:	b580      	push	{r7, lr}
 800fe38:	b082      	sub	sp, #8
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d00e      	beq.n	800fe62 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2200      	movs	r2, #0
 800fe48:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2200      	movs	r2, #0
 800fe54:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fe56:	2300      	movs	r3, #0
 800fe58:	2200      	movs	r2, #0
 800fe5a:	2100      	movs	r1, #0
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 f837 	bl	800fed0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fe62:	bf00      	nop
 800fe64:	3708      	adds	r7, #8
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}

0800fe6a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fe6a:	b580      	push	{r7, lr}
 800fe6c:	b086      	sub	sp, #24
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	4603      	mov	r3, r0
 800fe72:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fe74:	2301      	movs	r3, #1
 800fe76:	617b      	str	r3, [r7, #20]
 800fe78:	2300      	movs	r3, #0
 800fe7a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fe7c:	79fb      	ldrb	r3, [r7, #7]
 800fe7e:	461a      	mov	r2, r3
 800fe80:	6939      	ldr	r1, [r7, #16]
 800fe82:	6978      	ldr	r0, [r7, #20]
 800fe84:	f7ff ff7d 	bl	800fd82 <xQueueGenericCreate>
 800fe88:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fe8a:	68f8      	ldr	r0, [r7, #12]
 800fe8c:	f7ff ffd3 	bl	800fe36 <prvInitialiseMutex>

		return xNewQueue;
 800fe90:	68fb      	ldr	r3, [r7, #12]
	}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3718      	adds	r7, #24
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}

0800fe9a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fe9a:	b580      	push	{r7, lr}
 800fe9c:	b088      	sub	sp, #32
 800fe9e:	af02      	add	r7, sp, #8
 800fea0:	4603      	mov	r3, r0
 800fea2:	6039      	str	r1, [r7, #0]
 800fea4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fea6:	2301      	movs	r3, #1
 800fea8:	617b      	str	r3, [r7, #20]
 800feaa:	2300      	movs	r3, #0
 800feac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800feae:	79fb      	ldrb	r3, [r7, #7]
 800feb0:	9300      	str	r3, [sp, #0]
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	2200      	movs	r2, #0
 800feb6:	6939      	ldr	r1, [r7, #16]
 800feb8:	6978      	ldr	r0, [r7, #20]
 800feba:	f7ff fee5 	bl	800fc88 <xQueueGenericCreateStatic>
 800febe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fec0:	68f8      	ldr	r0, [r7, #12]
 800fec2:	f7ff ffb8 	bl	800fe36 <prvInitialiseMutex>

		return xNewQueue;
 800fec6:	68fb      	ldr	r3, [r7, #12]
	}
 800fec8:	4618      	mov	r0, r3
 800feca:	3718      	adds	r7, #24
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b08e      	sub	sp, #56	@ 0x38
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	607a      	str	r2, [r7, #4]
 800fedc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fede:	2300      	movs	r3, #0
 800fee0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d10b      	bne.n	800ff04 <xQueueGenericSend+0x34>
	__asm volatile
 800feec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fef0:	f383 8811 	msr	BASEPRI, r3
 800fef4:	f3bf 8f6f 	isb	sy
 800fef8:	f3bf 8f4f 	dsb	sy
 800fefc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fefe:	bf00      	nop
 800ff00:	bf00      	nop
 800ff02:	e7fd      	b.n	800ff00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d103      	bne.n	800ff12 <xQueueGenericSend+0x42>
 800ff0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d101      	bne.n	800ff16 <xQueueGenericSend+0x46>
 800ff12:	2301      	movs	r3, #1
 800ff14:	e000      	b.n	800ff18 <xQueueGenericSend+0x48>
 800ff16:	2300      	movs	r3, #0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d10b      	bne.n	800ff34 <xQueueGenericSend+0x64>
	__asm volatile
 800ff1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff20:	f383 8811 	msr	BASEPRI, r3
 800ff24:	f3bf 8f6f 	isb	sy
 800ff28:	f3bf 8f4f 	dsb	sy
 800ff2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ff2e:	bf00      	nop
 800ff30:	bf00      	nop
 800ff32:	e7fd      	b.n	800ff30 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	2b02      	cmp	r3, #2
 800ff38:	d103      	bne.n	800ff42 <xQueueGenericSend+0x72>
 800ff3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d101      	bne.n	800ff46 <xQueueGenericSend+0x76>
 800ff42:	2301      	movs	r3, #1
 800ff44:	e000      	b.n	800ff48 <xQueueGenericSend+0x78>
 800ff46:	2300      	movs	r3, #0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d10b      	bne.n	800ff64 <xQueueGenericSend+0x94>
	__asm volatile
 800ff4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff50:	f383 8811 	msr	BASEPRI, r3
 800ff54:	f3bf 8f6f 	isb	sy
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	623b      	str	r3, [r7, #32]
}
 800ff5e:	bf00      	nop
 800ff60:	bf00      	nop
 800ff62:	e7fd      	b.n	800ff60 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff64:	f001 fc90 	bl	8011888 <xTaskGetSchedulerState>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d102      	bne.n	800ff74 <xQueueGenericSend+0xa4>
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d101      	bne.n	800ff78 <xQueueGenericSend+0xa8>
 800ff74:	2301      	movs	r3, #1
 800ff76:	e000      	b.n	800ff7a <xQueueGenericSend+0xaa>
 800ff78:	2300      	movs	r3, #0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d10b      	bne.n	800ff96 <xQueueGenericSend+0xc6>
	__asm volatile
 800ff7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff82:	f383 8811 	msr	BASEPRI, r3
 800ff86:	f3bf 8f6f 	isb	sy
 800ff8a:	f3bf 8f4f 	dsb	sy
 800ff8e:	61fb      	str	r3, [r7, #28]
}
 800ff90:	bf00      	nop
 800ff92:	bf00      	nop
 800ff94:	e7fd      	b.n	800ff92 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ff96:	f001 ffcf 	bl	8011f38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ff9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d302      	bcc.n	800ffac <xQueueGenericSend+0xdc>
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	2b02      	cmp	r3, #2
 800ffaa:	d129      	bne.n	8010000 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ffac:	683a      	ldr	r2, [r7, #0]
 800ffae:	68b9      	ldr	r1, [r7, #8]
 800ffb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ffb2:	f000 fc6d 	bl	8010890 <prvCopyDataToQueue>
 800ffb6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d010      	beq.n	800ffe2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc2:	3324      	adds	r3, #36	@ 0x24
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f001 fa97 	bl	80114f8 <xTaskRemoveFromEventList>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d013      	beq.n	800fff8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ffd0:	4b3f      	ldr	r3, [pc, #252]	@ (80100d0 <xQueueGenericSend+0x200>)
 800ffd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffd6:	601a      	str	r2, [r3, #0]
 800ffd8:	f3bf 8f4f 	dsb	sy
 800ffdc:	f3bf 8f6f 	isb	sy
 800ffe0:	e00a      	b.n	800fff8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ffe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d007      	beq.n	800fff8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ffe8:	4b39      	ldr	r3, [pc, #228]	@ (80100d0 <xQueueGenericSend+0x200>)
 800ffea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffee:	601a      	str	r2, [r3, #0]
 800fff0:	f3bf 8f4f 	dsb	sy
 800fff4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fff8:	f001 ffd0 	bl	8011f9c <vPortExitCritical>
				return pdPASS;
 800fffc:	2301      	movs	r3, #1
 800fffe:	e063      	b.n	80100c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d103      	bne.n	801000e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010006:	f001 ffc9 	bl	8011f9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801000a:	2300      	movs	r3, #0
 801000c:	e05c      	b.n	80100c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801000e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010010:	2b00      	cmp	r3, #0
 8010012:	d106      	bne.n	8010022 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010014:	f107 0314 	add.w	r3, r7, #20
 8010018:	4618      	mov	r0, r3
 801001a:	f001 fad1 	bl	80115c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801001e:	2301      	movs	r3, #1
 8010020:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010022:	f001 ffbb 	bl	8011f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010026:	f001 f84d 	bl	80110c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801002a:	f001 ff85 	bl	8011f38 <vPortEnterCritical>
 801002e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010034:	b25b      	sxtb	r3, r3
 8010036:	f1b3 3fff 	cmp.w	r3, #4294967295
 801003a:	d103      	bne.n	8010044 <xQueueGenericSend+0x174>
 801003c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801003e:	2200      	movs	r2, #0
 8010040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010046:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801004a:	b25b      	sxtb	r3, r3
 801004c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010050:	d103      	bne.n	801005a <xQueueGenericSend+0x18a>
 8010052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010054:	2200      	movs	r2, #0
 8010056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801005a:	f001 ff9f 	bl	8011f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801005e:	1d3a      	adds	r2, r7, #4
 8010060:	f107 0314 	add.w	r3, r7, #20
 8010064:	4611      	mov	r1, r2
 8010066:	4618      	mov	r0, r3
 8010068:	f001 fac0 	bl	80115ec <xTaskCheckForTimeOut>
 801006c:	4603      	mov	r3, r0
 801006e:	2b00      	cmp	r3, #0
 8010070:	d124      	bne.n	80100bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010072:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010074:	f000 fd04 	bl	8010a80 <prvIsQueueFull>
 8010078:	4603      	mov	r3, r0
 801007a:	2b00      	cmp	r3, #0
 801007c:	d018      	beq.n	80100b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801007e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010080:	3310      	adds	r3, #16
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	4611      	mov	r1, r2
 8010086:	4618      	mov	r0, r3
 8010088:	f001 fa10 	bl	80114ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801008c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801008e:	f000 fc8f 	bl	80109b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010092:	f001 f825 	bl	80110e0 <xTaskResumeAll>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	f47f af7c 	bne.w	800ff96 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801009e:	4b0c      	ldr	r3, [pc, #48]	@ (80100d0 <xQueueGenericSend+0x200>)
 80100a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100a4:	601a      	str	r2, [r3, #0]
 80100a6:	f3bf 8f4f 	dsb	sy
 80100aa:	f3bf 8f6f 	isb	sy
 80100ae:	e772      	b.n	800ff96 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80100b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100b2:	f000 fc7d 	bl	80109b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100b6:	f001 f813 	bl	80110e0 <xTaskResumeAll>
 80100ba:	e76c      	b.n	800ff96 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80100bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100be:	f000 fc77 	bl	80109b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100c2:	f001 f80d 	bl	80110e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80100c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3738      	adds	r7, #56	@ 0x38
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	e000ed04 	.word	0xe000ed04

080100d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b090      	sub	sp, #64	@ 0x40
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	60b9      	str	r1, [r7, #8]
 80100de:	607a      	str	r2, [r7, #4]
 80100e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80100e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d10b      	bne.n	8010104 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80100ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100f0:	f383 8811 	msr	BASEPRI, r3
 80100f4:	f3bf 8f6f 	isb	sy
 80100f8:	f3bf 8f4f 	dsb	sy
 80100fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80100fe:	bf00      	nop
 8010100:	bf00      	nop
 8010102:	e7fd      	b.n	8010100 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d103      	bne.n	8010112 <xQueueGenericSendFromISR+0x3e>
 801010a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801010c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801010e:	2b00      	cmp	r3, #0
 8010110:	d101      	bne.n	8010116 <xQueueGenericSendFromISR+0x42>
 8010112:	2301      	movs	r3, #1
 8010114:	e000      	b.n	8010118 <xQueueGenericSendFromISR+0x44>
 8010116:	2300      	movs	r3, #0
 8010118:	2b00      	cmp	r3, #0
 801011a:	d10b      	bne.n	8010134 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 801011c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010120:	f383 8811 	msr	BASEPRI, r3
 8010124:	f3bf 8f6f 	isb	sy
 8010128:	f3bf 8f4f 	dsb	sy
 801012c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801012e:	bf00      	nop
 8010130:	bf00      	nop
 8010132:	e7fd      	b.n	8010130 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	2b02      	cmp	r3, #2
 8010138:	d103      	bne.n	8010142 <xQueueGenericSendFromISR+0x6e>
 801013a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801013c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801013e:	2b01      	cmp	r3, #1
 8010140:	d101      	bne.n	8010146 <xQueueGenericSendFromISR+0x72>
 8010142:	2301      	movs	r3, #1
 8010144:	e000      	b.n	8010148 <xQueueGenericSendFromISR+0x74>
 8010146:	2300      	movs	r3, #0
 8010148:	2b00      	cmp	r3, #0
 801014a:	d10b      	bne.n	8010164 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 801014c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010150:	f383 8811 	msr	BASEPRI, r3
 8010154:	f3bf 8f6f 	isb	sy
 8010158:	f3bf 8f4f 	dsb	sy
 801015c:	623b      	str	r3, [r7, #32]
}
 801015e:	bf00      	nop
 8010160:	bf00      	nop
 8010162:	e7fd      	b.n	8010160 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010164:	f001 ffc8 	bl	80120f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010168:	f3ef 8211 	mrs	r2, BASEPRI
 801016c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010170:	f383 8811 	msr	BASEPRI, r3
 8010174:	f3bf 8f6f 	isb	sy
 8010178:	f3bf 8f4f 	dsb	sy
 801017c:	61fa      	str	r2, [r7, #28]
 801017e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010180:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010182:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801018a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801018c:	429a      	cmp	r2, r3
 801018e:	d302      	bcc.n	8010196 <xQueueGenericSendFromISR+0xc2>
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	2b02      	cmp	r3, #2
 8010194:	d12f      	bne.n	80101f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010198:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801019c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101a6:	683a      	ldr	r2, [r7, #0]
 80101a8:	68b9      	ldr	r1, [r7, #8]
 80101aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80101ac:	f000 fb70 	bl	8010890 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80101b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80101b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b8:	d112      	bne.n	80101e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d016      	beq.n	80101f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c4:	3324      	adds	r3, #36	@ 0x24
 80101c6:	4618      	mov	r0, r3
 80101c8:	f001 f996 	bl	80114f8 <xTaskRemoveFromEventList>
 80101cc:	4603      	mov	r3, r0
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d00e      	beq.n	80101f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d00b      	beq.n	80101f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2201      	movs	r2, #1
 80101dc:	601a      	str	r2, [r3, #0]
 80101de:	e007      	b.n	80101f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80101e4:	3301      	adds	r3, #1
 80101e6:	b2db      	uxtb	r3, r3
 80101e8:	b25a      	sxtb	r2, r3
 80101ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80101f0:	2301      	movs	r3, #1
 80101f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80101f4:	e001      	b.n	80101fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80101f6:	2300      	movs	r3, #0
 80101f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80101fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010204:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010208:	4618      	mov	r0, r3
 801020a:	3740      	adds	r7, #64	@ 0x40
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b08e      	sub	sp, #56	@ 0x38
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801021e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010220:	2b00      	cmp	r3, #0
 8010222:	d10b      	bne.n	801023c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010228:	f383 8811 	msr	BASEPRI, r3
 801022c:	f3bf 8f6f 	isb	sy
 8010230:	f3bf 8f4f 	dsb	sy
 8010234:	623b      	str	r3, [r7, #32]
}
 8010236:	bf00      	nop
 8010238:	bf00      	nop
 801023a:	e7fd      	b.n	8010238 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801023c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801023e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00b      	beq.n	801025c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8010244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010248:	f383 8811 	msr	BASEPRI, r3
 801024c:	f3bf 8f6f 	isb	sy
 8010250:	f3bf 8f4f 	dsb	sy
 8010254:	61fb      	str	r3, [r7, #28]
}
 8010256:	bf00      	nop
 8010258:	bf00      	nop
 801025a:	e7fd      	b.n	8010258 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801025c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d103      	bne.n	801026c <xQueueGiveFromISR+0x5c>
 8010264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010266:	689b      	ldr	r3, [r3, #8]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d101      	bne.n	8010270 <xQueueGiveFromISR+0x60>
 801026c:	2301      	movs	r3, #1
 801026e:	e000      	b.n	8010272 <xQueueGiveFromISR+0x62>
 8010270:	2300      	movs	r3, #0
 8010272:	2b00      	cmp	r3, #0
 8010274:	d10b      	bne.n	801028e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8010276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801027a:	f383 8811 	msr	BASEPRI, r3
 801027e:	f3bf 8f6f 	isb	sy
 8010282:	f3bf 8f4f 	dsb	sy
 8010286:	61bb      	str	r3, [r7, #24]
}
 8010288:	bf00      	nop
 801028a:	bf00      	nop
 801028c:	e7fd      	b.n	801028a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801028e:	f001 ff33 	bl	80120f8 <vPortValidateInterruptPriority>
	__asm volatile
 8010292:	f3ef 8211 	mrs	r2, BASEPRI
 8010296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801029a:	f383 8811 	msr	BASEPRI, r3
 801029e:	f3bf 8f6f 	isb	sy
 80102a2:	f3bf 8f4f 	dsb	sy
 80102a6:	617a      	str	r2, [r7, #20]
 80102a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80102aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80102b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d22b      	bcs.n	8010316 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80102be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80102c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102ca:	1c5a      	adds	r2, r3, #1
 80102cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80102d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80102d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d8:	d112      	bne.n	8010300 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d016      	beq.n	8010310 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102e4:	3324      	adds	r3, #36	@ 0x24
 80102e6:	4618      	mov	r0, r3
 80102e8:	f001 f906 	bl	80114f8 <xTaskRemoveFromEventList>
 80102ec:	4603      	mov	r3, r0
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d00e      	beq.n	8010310 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d00b      	beq.n	8010310 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	2201      	movs	r2, #1
 80102fc:	601a      	str	r2, [r3, #0]
 80102fe:	e007      	b.n	8010310 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010304:	3301      	adds	r3, #1
 8010306:	b2db      	uxtb	r3, r3
 8010308:	b25a      	sxtb	r2, r3
 801030a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801030c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010310:	2301      	movs	r3, #1
 8010312:	637b      	str	r3, [r7, #52]	@ 0x34
 8010314:	e001      	b.n	801031a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010316:	2300      	movs	r3, #0
 8010318:	637b      	str	r3, [r7, #52]	@ 0x34
 801031a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801031c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f383 8811 	msr	BASEPRI, r3
}
 8010324:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010328:	4618      	mov	r0, r3
 801032a:	3738      	adds	r7, #56	@ 0x38
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b08c      	sub	sp, #48	@ 0x30
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801033c:	2300      	movs	r3, #0
 801033e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010346:	2b00      	cmp	r3, #0
 8010348:	d10b      	bne.n	8010362 <xQueueReceive+0x32>
	__asm volatile
 801034a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801034e:	f383 8811 	msr	BASEPRI, r3
 8010352:	f3bf 8f6f 	isb	sy
 8010356:	f3bf 8f4f 	dsb	sy
 801035a:	623b      	str	r3, [r7, #32]
}
 801035c:	bf00      	nop
 801035e:	bf00      	nop
 8010360:	e7fd      	b.n	801035e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d103      	bne.n	8010370 <xQueueReceive+0x40>
 8010368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801036a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801036c:	2b00      	cmp	r3, #0
 801036e:	d101      	bne.n	8010374 <xQueueReceive+0x44>
 8010370:	2301      	movs	r3, #1
 8010372:	e000      	b.n	8010376 <xQueueReceive+0x46>
 8010374:	2300      	movs	r3, #0
 8010376:	2b00      	cmp	r3, #0
 8010378:	d10b      	bne.n	8010392 <xQueueReceive+0x62>
	__asm volatile
 801037a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801037e:	f383 8811 	msr	BASEPRI, r3
 8010382:	f3bf 8f6f 	isb	sy
 8010386:	f3bf 8f4f 	dsb	sy
 801038a:	61fb      	str	r3, [r7, #28]
}
 801038c:	bf00      	nop
 801038e:	bf00      	nop
 8010390:	e7fd      	b.n	801038e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010392:	f001 fa79 	bl	8011888 <xTaskGetSchedulerState>
 8010396:	4603      	mov	r3, r0
 8010398:	2b00      	cmp	r3, #0
 801039a:	d102      	bne.n	80103a2 <xQueueReceive+0x72>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d101      	bne.n	80103a6 <xQueueReceive+0x76>
 80103a2:	2301      	movs	r3, #1
 80103a4:	e000      	b.n	80103a8 <xQueueReceive+0x78>
 80103a6:	2300      	movs	r3, #0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d10b      	bne.n	80103c4 <xQueueReceive+0x94>
	__asm volatile
 80103ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103b0:	f383 8811 	msr	BASEPRI, r3
 80103b4:	f3bf 8f6f 	isb	sy
 80103b8:	f3bf 8f4f 	dsb	sy
 80103bc:	61bb      	str	r3, [r7, #24]
}
 80103be:	bf00      	nop
 80103c0:	bf00      	nop
 80103c2:	e7fd      	b.n	80103c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80103c4:	f001 fdb8 	bl	8011f38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80103ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d01f      	beq.n	8010414 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80103d4:	68b9      	ldr	r1, [r7, #8]
 80103d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80103d8:	f000 fac4 	bl	8010964 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80103dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103de:	1e5a      	subs	r2, r3, #1
 80103e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e6:	691b      	ldr	r3, [r3, #16]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d00f      	beq.n	801040c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103ee:	3310      	adds	r3, #16
 80103f0:	4618      	mov	r0, r3
 80103f2:	f001 f881 	bl	80114f8 <xTaskRemoveFromEventList>
 80103f6:	4603      	mov	r3, r0
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d007      	beq.n	801040c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80103fc:	4b3c      	ldr	r3, [pc, #240]	@ (80104f0 <xQueueReceive+0x1c0>)
 80103fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010402:	601a      	str	r2, [r3, #0]
 8010404:	f3bf 8f4f 	dsb	sy
 8010408:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801040c:	f001 fdc6 	bl	8011f9c <vPortExitCritical>
				return pdPASS;
 8010410:	2301      	movs	r3, #1
 8010412:	e069      	b.n	80104e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d103      	bne.n	8010422 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801041a:	f001 fdbf 	bl	8011f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801041e:	2300      	movs	r3, #0
 8010420:	e062      	b.n	80104e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010424:	2b00      	cmp	r3, #0
 8010426:	d106      	bne.n	8010436 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010428:	f107 0310 	add.w	r3, r7, #16
 801042c:	4618      	mov	r0, r3
 801042e:	f001 f8c7 	bl	80115c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010432:	2301      	movs	r3, #1
 8010434:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010436:	f001 fdb1 	bl	8011f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801043a:	f000 fe43 	bl	80110c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801043e:	f001 fd7b 	bl	8011f38 <vPortEnterCritical>
 8010442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010448:	b25b      	sxtb	r3, r3
 801044a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801044e:	d103      	bne.n	8010458 <xQueueReceive+0x128>
 8010450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010452:	2200      	movs	r2, #0
 8010454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801045a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801045e:	b25b      	sxtb	r3, r3
 8010460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010464:	d103      	bne.n	801046e <xQueueReceive+0x13e>
 8010466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010468:	2200      	movs	r2, #0
 801046a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801046e:	f001 fd95 	bl	8011f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010472:	1d3a      	adds	r2, r7, #4
 8010474:	f107 0310 	add.w	r3, r7, #16
 8010478:	4611      	mov	r1, r2
 801047a:	4618      	mov	r0, r3
 801047c:	f001 f8b6 	bl	80115ec <xTaskCheckForTimeOut>
 8010480:	4603      	mov	r3, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	d123      	bne.n	80104ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010488:	f000 fae4 	bl	8010a54 <prvIsQueueEmpty>
 801048c:	4603      	mov	r3, r0
 801048e:	2b00      	cmp	r3, #0
 8010490:	d017      	beq.n	80104c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010494:	3324      	adds	r3, #36	@ 0x24
 8010496:	687a      	ldr	r2, [r7, #4]
 8010498:	4611      	mov	r1, r2
 801049a:	4618      	mov	r0, r3
 801049c:	f001 f806 	bl	80114ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80104a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104a2:	f000 fa85 	bl	80109b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80104a6:	f000 fe1b 	bl	80110e0 <xTaskResumeAll>
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d189      	bne.n	80103c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80104b0:	4b0f      	ldr	r3, [pc, #60]	@ (80104f0 <xQueueReceive+0x1c0>)
 80104b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80104b6:	601a      	str	r2, [r3, #0]
 80104b8:	f3bf 8f4f 	dsb	sy
 80104bc:	f3bf 8f6f 	isb	sy
 80104c0:	e780      	b.n	80103c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80104c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104c4:	f000 fa74 	bl	80109b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80104c8:	f000 fe0a 	bl	80110e0 <xTaskResumeAll>
 80104cc:	e77a      	b.n	80103c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80104ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104d0:	f000 fa6e 	bl	80109b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104d4:	f000 fe04 	bl	80110e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104da:	f000 fabb 	bl	8010a54 <prvIsQueueEmpty>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	f43f af6f 	beq.w	80103c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80104e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3730      	adds	r7, #48	@ 0x30
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}
 80104f0:	e000ed04 	.word	0xe000ed04

080104f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b08e      	sub	sp, #56	@ 0x38
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80104fe:	2300      	movs	r3, #0
 8010500:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010506:	2300      	movs	r3, #0
 8010508:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801050a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801050c:	2b00      	cmp	r3, #0
 801050e:	d10b      	bne.n	8010528 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010514:	f383 8811 	msr	BASEPRI, r3
 8010518:	f3bf 8f6f 	isb	sy
 801051c:	f3bf 8f4f 	dsb	sy
 8010520:	623b      	str	r3, [r7, #32]
}
 8010522:	bf00      	nop
 8010524:	bf00      	nop
 8010526:	e7fd      	b.n	8010524 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801052c:	2b00      	cmp	r3, #0
 801052e:	d00b      	beq.n	8010548 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010534:	f383 8811 	msr	BASEPRI, r3
 8010538:	f3bf 8f6f 	isb	sy
 801053c:	f3bf 8f4f 	dsb	sy
 8010540:	61fb      	str	r3, [r7, #28]
}
 8010542:	bf00      	nop
 8010544:	bf00      	nop
 8010546:	e7fd      	b.n	8010544 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010548:	f001 f99e 	bl	8011888 <xTaskGetSchedulerState>
 801054c:	4603      	mov	r3, r0
 801054e:	2b00      	cmp	r3, #0
 8010550:	d102      	bne.n	8010558 <xQueueSemaphoreTake+0x64>
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d101      	bne.n	801055c <xQueueSemaphoreTake+0x68>
 8010558:	2301      	movs	r3, #1
 801055a:	e000      	b.n	801055e <xQueueSemaphoreTake+0x6a>
 801055c:	2300      	movs	r3, #0
 801055e:	2b00      	cmp	r3, #0
 8010560:	d10b      	bne.n	801057a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8010562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010566:	f383 8811 	msr	BASEPRI, r3
 801056a:	f3bf 8f6f 	isb	sy
 801056e:	f3bf 8f4f 	dsb	sy
 8010572:	61bb      	str	r3, [r7, #24]
}
 8010574:	bf00      	nop
 8010576:	bf00      	nop
 8010578:	e7fd      	b.n	8010576 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801057a:	f001 fcdd 	bl	8011f38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801057e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010582:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010586:	2b00      	cmp	r3, #0
 8010588:	d024      	beq.n	80105d4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801058a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801058c:	1e5a      	subs	r2, r3, #1
 801058e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010590:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d104      	bne.n	80105a4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801059a:	f001 fb21 	bl	8011be0 <pvTaskIncrementMutexHeldCount>
 801059e:	4602      	mov	r2, r0
 80105a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105a6:	691b      	ldr	r3, [r3, #16]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d00f      	beq.n	80105cc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ae:	3310      	adds	r3, #16
 80105b0:	4618      	mov	r0, r3
 80105b2:	f000 ffa1 	bl	80114f8 <xTaskRemoveFromEventList>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d007      	beq.n	80105cc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80105bc:	4b54      	ldr	r3, [pc, #336]	@ (8010710 <xQueueSemaphoreTake+0x21c>)
 80105be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105c2:	601a      	str	r2, [r3, #0]
 80105c4:	f3bf 8f4f 	dsb	sy
 80105c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80105cc:	f001 fce6 	bl	8011f9c <vPortExitCritical>
				return pdPASS;
 80105d0:	2301      	movs	r3, #1
 80105d2:	e098      	b.n	8010706 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d112      	bne.n	8010600 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80105da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d00b      	beq.n	80105f8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80105e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105e4:	f383 8811 	msr	BASEPRI, r3
 80105e8:	f3bf 8f6f 	isb	sy
 80105ec:	f3bf 8f4f 	dsb	sy
 80105f0:	617b      	str	r3, [r7, #20]
}
 80105f2:	bf00      	nop
 80105f4:	bf00      	nop
 80105f6:	e7fd      	b.n	80105f4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80105f8:	f001 fcd0 	bl	8011f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80105fc:	2300      	movs	r3, #0
 80105fe:	e082      	b.n	8010706 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010602:	2b00      	cmp	r3, #0
 8010604:	d106      	bne.n	8010614 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010606:	f107 030c 	add.w	r3, r7, #12
 801060a:	4618      	mov	r0, r3
 801060c:	f000 ffd8 	bl	80115c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010610:	2301      	movs	r3, #1
 8010612:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010614:	f001 fcc2 	bl	8011f9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010618:	f000 fd54 	bl	80110c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801061c:	f001 fc8c 	bl	8011f38 <vPortEnterCritical>
 8010620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010622:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010626:	b25b      	sxtb	r3, r3
 8010628:	f1b3 3fff 	cmp.w	r3, #4294967295
 801062c:	d103      	bne.n	8010636 <xQueueSemaphoreTake+0x142>
 801062e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010630:	2200      	movs	r2, #0
 8010632:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010638:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801063c:	b25b      	sxtb	r3, r3
 801063e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010642:	d103      	bne.n	801064c <xQueueSemaphoreTake+0x158>
 8010644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010646:	2200      	movs	r2, #0
 8010648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801064c:	f001 fca6 	bl	8011f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010650:	463a      	mov	r2, r7
 8010652:	f107 030c 	add.w	r3, r7, #12
 8010656:	4611      	mov	r1, r2
 8010658:	4618      	mov	r0, r3
 801065a:	f000 ffc7 	bl	80115ec <xTaskCheckForTimeOut>
 801065e:	4603      	mov	r3, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d132      	bne.n	80106ca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010664:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010666:	f000 f9f5 	bl	8010a54 <prvIsQueueEmpty>
 801066a:	4603      	mov	r3, r0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d026      	beq.n	80106be <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d109      	bne.n	801068c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010678:	f001 fc5e 	bl	8011f38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801067c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801067e:	689b      	ldr	r3, [r3, #8]
 8010680:	4618      	mov	r0, r3
 8010682:	f001 f91f 	bl	80118c4 <xTaskPriorityInherit>
 8010686:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010688:	f001 fc88 	bl	8011f9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801068c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801068e:	3324      	adds	r3, #36	@ 0x24
 8010690:	683a      	ldr	r2, [r7, #0]
 8010692:	4611      	mov	r1, r2
 8010694:	4618      	mov	r0, r3
 8010696:	f000 ff09 	bl	80114ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801069a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801069c:	f000 f988 	bl	80109b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80106a0:	f000 fd1e 	bl	80110e0 <xTaskResumeAll>
 80106a4:	4603      	mov	r3, r0
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	f47f af67 	bne.w	801057a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80106ac:	4b18      	ldr	r3, [pc, #96]	@ (8010710 <xQueueSemaphoreTake+0x21c>)
 80106ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106b2:	601a      	str	r2, [r3, #0]
 80106b4:	f3bf 8f4f 	dsb	sy
 80106b8:	f3bf 8f6f 	isb	sy
 80106bc:	e75d      	b.n	801057a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80106be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80106c0:	f000 f976 	bl	80109b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80106c4:	f000 fd0c 	bl	80110e0 <xTaskResumeAll>
 80106c8:	e757      	b.n	801057a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80106ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80106cc:	f000 f970 	bl	80109b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106d0:	f000 fd06 	bl	80110e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80106d6:	f000 f9bd 	bl	8010a54 <prvIsQueueEmpty>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	f43f af4c 	beq.w	801057a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80106e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d00d      	beq.n	8010704 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80106e8:	f001 fc26 	bl	8011f38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80106ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80106ee:	f000 f8b7 	bl	8010860 <prvGetDisinheritPriorityAfterTimeout>
 80106f2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80106f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f6:	689b      	ldr	r3, [r3, #8]
 80106f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80106fa:	4618      	mov	r0, r3
 80106fc:	f001 f9e0 	bl	8011ac0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010700:	f001 fc4c 	bl	8011f9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010704:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010706:	4618      	mov	r0, r3
 8010708:	3738      	adds	r7, #56	@ 0x38
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	e000ed04 	.word	0xe000ed04

08010714 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b08e      	sub	sp, #56	@ 0x38
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010726:	2b00      	cmp	r3, #0
 8010728:	d10b      	bne.n	8010742 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801072a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801072e:	f383 8811 	msr	BASEPRI, r3
 8010732:	f3bf 8f6f 	isb	sy
 8010736:	f3bf 8f4f 	dsb	sy
 801073a:	623b      	str	r3, [r7, #32]
}
 801073c:	bf00      	nop
 801073e:	bf00      	nop
 8010740:	e7fd      	b.n	801073e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d103      	bne.n	8010750 <xQueueReceiveFromISR+0x3c>
 8010748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801074c:	2b00      	cmp	r3, #0
 801074e:	d101      	bne.n	8010754 <xQueueReceiveFromISR+0x40>
 8010750:	2301      	movs	r3, #1
 8010752:	e000      	b.n	8010756 <xQueueReceiveFromISR+0x42>
 8010754:	2300      	movs	r3, #0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d10b      	bne.n	8010772 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801075a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801075e:	f383 8811 	msr	BASEPRI, r3
 8010762:	f3bf 8f6f 	isb	sy
 8010766:	f3bf 8f4f 	dsb	sy
 801076a:	61fb      	str	r3, [r7, #28]
}
 801076c:	bf00      	nop
 801076e:	bf00      	nop
 8010770:	e7fd      	b.n	801076e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010772:	f001 fcc1 	bl	80120f8 <vPortValidateInterruptPriority>
	__asm volatile
 8010776:	f3ef 8211 	mrs	r2, BASEPRI
 801077a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801077e:	f383 8811 	msr	BASEPRI, r3
 8010782:	f3bf 8f6f 	isb	sy
 8010786:	f3bf 8f4f 	dsb	sy
 801078a:	61ba      	str	r2, [r7, #24]
 801078c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801078e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010790:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010796:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801079a:	2b00      	cmp	r3, #0
 801079c:	d02f      	beq.n	80107fe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801079e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80107a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107a8:	68b9      	ldr	r1, [r7, #8]
 80107aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80107ac:	f000 f8da 	bl	8010964 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80107b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107b2:	1e5a      	subs	r2, r3, #1
 80107b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80107b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80107bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c0:	d112      	bne.n	80107e8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107c4:	691b      	ldr	r3, [r3, #16]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d016      	beq.n	80107f8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107cc:	3310      	adds	r3, #16
 80107ce:	4618      	mov	r0, r3
 80107d0:	f000 fe92 	bl	80114f8 <xTaskRemoveFromEventList>
 80107d4:	4603      	mov	r3, r0
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d00e      	beq.n	80107f8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00b      	beq.n	80107f8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2201      	movs	r2, #1
 80107e4:	601a      	str	r2, [r3, #0]
 80107e6:	e007      	b.n	80107f8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80107e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107ec:	3301      	adds	r3, #1
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	b25a      	sxtb	r2, r3
 80107f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80107f8:	2301      	movs	r3, #1
 80107fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80107fc:	e001      	b.n	8010802 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80107fe:	2300      	movs	r3, #0
 8010800:	637b      	str	r3, [r7, #52]	@ 0x34
 8010802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010804:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	f383 8811 	msr	BASEPRI, r3
}
 801080c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801080e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010810:	4618      	mov	r0, r3
 8010812:	3738      	adds	r7, #56	@ 0x38
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d10b      	bne.n	8010842 <vQueueDelete+0x2a>
	__asm volatile
 801082a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801082e:	f383 8811 	msr	BASEPRI, r3
 8010832:	f3bf 8f6f 	isb	sy
 8010836:	f3bf 8f4f 	dsb	sy
 801083a:	60bb      	str	r3, [r7, #8]
}
 801083c:	bf00      	nop
 801083e:	bf00      	nop
 8010840:	e7fd      	b.n	801083e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010842:	68f8      	ldr	r0, [r7, #12]
 8010844:	f000 f934 	bl	8010ab0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801084e:	2b00      	cmp	r3, #0
 8010850:	d102      	bne.n	8010858 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8010852:	68f8      	ldr	r0, [r7, #12]
 8010854:	f001 fd66 	bl	8012324 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010858:	bf00      	nop
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010860:	b480      	push	{r7}
 8010862:	b085      	sub	sp, #20
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801086c:	2b00      	cmp	r3, #0
 801086e:	d006      	beq.n	801087e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f1c3 0307 	rsb	r3, r3, #7
 801087a:	60fb      	str	r3, [r7, #12]
 801087c:	e001      	b.n	8010882 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801087e:	2300      	movs	r3, #0
 8010880:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010882:	68fb      	ldr	r3, [r7, #12]
	}
 8010884:	4618      	mov	r0, r3
 8010886:	3714      	adds	r7, #20
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr

08010890 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b086      	sub	sp, #24
 8010894:	af00      	add	r7, sp, #0
 8010896:	60f8      	str	r0, [r7, #12]
 8010898:	60b9      	str	r1, [r7, #8]
 801089a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801089c:	2300      	movs	r3, #0
 801089e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d10d      	bne.n	80108ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d14d      	bne.n	8010952 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	689b      	ldr	r3, [r3, #8]
 80108ba:	4618      	mov	r0, r3
 80108bc:	f001 f878 	bl	80119b0 <xTaskPriorityDisinherit>
 80108c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	2200      	movs	r2, #0
 80108c6:	609a      	str	r2, [r3, #8]
 80108c8:	e043      	b.n	8010952 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d119      	bne.n	8010904 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	6858      	ldr	r0, [r3, #4]
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108d8:	461a      	mov	r2, r3
 80108da:	68b9      	ldr	r1, [r7, #8]
 80108dc:	f002 fdb5 	bl	801344a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	685a      	ldr	r2, [r3, #4]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108e8:	441a      	add	r2, r3
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	685a      	ldr	r2, [r3, #4]
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	689b      	ldr	r3, [r3, #8]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d32b      	bcc.n	8010952 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681a      	ldr	r2, [r3, #0]
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	605a      	str	r2, [r3, #4]
 8010902:	e026      	b.n	8010952 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	68d8      	ldr	r0, [r3, #12]
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801090c:	461a      	mov	r2, r3
 801090e:	68b9      	ldr	r1, [r7, #8]
 8010910:	f002 fd9b 	bl	801344a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	68da      	ldr	r2, [r3, #12]
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801091c:	425b      	negs	r3, r3
 801091e:	441a      	add	r2, r3
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	68da      	ldr	r2, [r3, #12]
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	429a      	cmp	r2, r3
 801092e:	d207      	bcs.n	8010940 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	689a      	ldr	r2, [r3, #8]
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010938:	425b      	negs	r3, r3
 801093a:	441a      	add	r2, r3
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2b02      	cmp	r3, #2
 8010944:	d105      	bne.n	8010952 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	3b01      	subs	r3, #1
 8010950:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	1c5a      	adds	r2, r3, #1
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801095a:	697b      	ldr	r3, [r7, #20]
}
 801095c:	4618      	mov	r0, r3
 801095e:	3718      	adds	r7, #24
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010972:	2b00      	cmp	r3, #0
 8010974:	d018      	beq.n	80109a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	68da      	ldr	r2, [r3, #12]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801097e:	441a      	add	r2, r3
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	68da      	ldr	r2, [r3, #12]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	689b      	ldr	r3, [r3, #8]
 801098c:	429a      	cmp	r2, r3
 801098e:	d303      	bcc.n	8010998 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	68d9      	ldr	r1, [r3, #12]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109a0:	461a      	mov	r2, r3
 80109a2:	6838      	ldr	r0, [r7, #0]
 80109a4:	f002 fd51 	bl	801344a <memcpy>
	}
}
 80109a8:	bf00      	nop
 80109aa:	3708      	adds	r7, #8
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80109b8:	f001 fabe 	bl	8011f38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80109c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109c4:	e011      	b.n	80109ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d012      	beq.n	80109f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	3324      	adds	r3, #36	@ 0x24
 80109d2:	4618      	mov	r0, r3
 80109d4:	f000 fd90 	bl	80114f8 <xTaskRemoveFromEventList>
 80109d8:	4603      	mov	r3, r0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d001      	beq.n	80109e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80109de:	f000 fe69 	bl	80116b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80109e2:	7bfb      	ldrb	r3, [r7, #15]
 80109e4:	3b01      	subs	r3, #1
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80109ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	dce9      	bgt.n	80109c6 <prvUnlockQueue+0x16>
 80109f2:	e000      	b.n	80109f6 <prvUnlockQueue+0x46>
					break;
 80109f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	22ff      	movs	r2, #255	@ 0xff
 80109fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80109fe:	f001 facd 	bl	8011f9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010a02:	f001 fa99 	bl	8011f38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010a0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a0e:	e011      	b.n	8010a34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	691b      	ldr	r3, [r3, #16]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d012      	beq.n	8010a3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	3310      	adds	r3, #16
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f000 fd6b 	bl	80114f8 <xTaskRemoveFromEventList>
 8010a22:	4603      	mov	r3, r0
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d001      	beq.n	8010a2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010a28:	f000 fe44 	bl	80116b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010a2c:	7bbb      	ldrb	r3, [r7, #14]
 8010a2e:	3b01      	subs	r3, #1
 8010a30:	b2db      	uxtb	r3, r3
 8010a32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	dce9      	bgt.n	8010a10 <prvUnlockQueue+0x60>
 8010a3c:	e000      	b.n	8010a40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010a3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	22ff      	movs	r2, #255	@ 0xff
 8010a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010a48:	f001 faa8 	bl	8011f9c <vPortExitCritical>
}
 8010a4c:	bf00      	nop
 8010a4e:	3710      	adds	r7, #16
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010a5c:	f001 fa6c 	bl	8011f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d102      	bne.n	8010a6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	60fb      	str	r3, [r7, #12]
 8010a6c:	e001      	b.n	8010a72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010a72:	f001 fa93 	bl	8011f9c <vPortExitCritical>

	return xReturn;
 8010a76:	68fb      	ldr	r3, [r7, #12]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3710      	adds	r7, #16
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010a88:	f001 fa56 	bl	8011f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d102      	bne.n	8010a9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	60fb      	str	r3, [r7, #12]
 8010a9c:	e001      	b.n	8010aa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010aa2:	f001 fa7b 	bl	8011f9c <vPortExitCritical>

	return xReturn;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3710      	adds	r7, #16
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ab8:	2300      	movs	r3, #0
 8010aba:	60fb      	str	r3, [r7, #12]
 8010abc:	e016      	b.n	8010aec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010abe:	4a10      	ldr	r2, [pc, #64]	@ (8010b00 <vQueueUnregisterQueue+0x50>)
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	00db      	lsls	r3, r3, #3
 8010ac4:	4413      	add	r3, r2
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d10b      	bne.n	8010ae6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010ace:	4a0c      	ldr	r2, [pc, #48]	@ (8010b00 <vQueueUnregisterQueue+0x50>)
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2100      	movs	r1, #0
 8010ad4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010ad8:	4a09      	ldr	r2, [pc, #36]	@ (8010b00 <vQueueUnregisterQueue+0x50>)
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	00db      	lsls	r3, r3, #3
 8010ade:	4413      	add	r3, r2
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	605a      	str	r2, [r3, #4]
				break;
 8010ae4:	e006      	b.n	8010af4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	60fb      	str	r3, [r7, #12]
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2b07      	cmp	r3, #7
 8010af0:	d9e5      	bls.n	8010abe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010af2:	bf00      	nop
 8010af4:	bf00      	nop
 8010af6:	3714      	adds	r7, #20
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr
 8010b00:	20000f1c 	.word	0x20000f1c

08010b04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b08e      	sub	sp, #56	@ 0x38
 8010b08:	af04      	add	r7, sp, #16
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	60b9      	str	r1, [r7, #8]
 8010b0e:	607a      	str	r2, [r7, #4]
 8010b10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d10b      	bne.n	8010b30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8010b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b1c:	f383 8811 	msr	BASEPRI, r3
 8010b20:	f3bf 8f6f 	isb	sy
 8010b24:	f3bf 8f4f 	dsb	sy
 8010b28:	623b      	str	r3, [r7, #32]
}
 8010b2a:	bf00      	nop
 8010b2c:	bf00      	nop
 8010b2e:	e7fd      	b.n	8010b2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d10b      	bne.n	8010b4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8010b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b3a:	f383 8811 	msr	BASEPRI, r3
 8010b3e:	f3bf 8f6f 	isb	sy
 8010b42:	f3bf 8f4f 	dsb	sy
 8010b46:	61fb      	str	r3, [r7, #28]
}
 8010b48:	bf00      	nop
 8010b4a:	bf00      	nop
 8010b4c:	e7fd      	b.n	8010b4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010b4e:	23a0      	movs	r3, #160	@ 0xa0
 8010b50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	2ba0      	cmp	r3, #160	@ 0xa0
 8010b56:	d00b      	beq.n	8010b70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8010b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b5c:	f383 8811 	msr	BASEPRI, r3
 8010b60:	f3bf 8f6f 	isb	sy
 8010b64:	f3bf 8f4f 	dsb	sy
 8010b68:	61bb      	str	r3, [r7, #24]
}
 8010b6a:	bf00      	nop
 8010b6c:	bf00      	nop
 8010b6e:	e7fd      	b.n	8010b6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010b70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d01e      	beq.n	8010bb6 <xTaskCreateStatic+0xb2>
 8010b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d01b      	beq.n	8010bb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010b86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b8a:	2202      	movs	r2, #2
 8010b8c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010b90:	2300      	movs	r3, #0
 8010b92:	9303      	str	r3, [sp, #12]
 8010b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b96:	9302      	str	r3, [sp, #8]
 8010b98:	f107 0314 	add.w	r3, r7, #20
 8010b9c:	9301      	str	r3, [sp, #4]
 8010b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	68b9      	ldr	r1, [r7, #8]
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f000 f851 	bl	8010c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010bae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010bb0:	f000 f8ee 	bl	8010d90 <prvAddNewTaskToReadyList>
 8010bb4:	e001      	b.n	8010bba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010bba:	697b      	ldr	r3, [r7, #20]
	}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3728      	adds	r7, #40	@ 0x28
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b08c      	sub	sp, #48	@ 0x30
 8010bc8:	af04      	add	r7, sp, #16
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	603b      	str	r3, [r7, #0]
 8010bd0:	4613      	mov	r3, r2
 8010bd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010bd4:	88fb      	ldrh	r3, [r7, #6]
 8010bd6:	009b      	lsls	r3, r3, #2
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f001 facf 	bl	801217c <pvPortMalloc>
 8010bde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d00e      	beq.n	8010c04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010be6:	20a0      	movs	r0, #160	@ 0xa0
 8010be8:	f001 fac8 	bl	801217c <pvPortMalloc>
 8010bec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d003      	beq.n	8010bfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	697a      	ldr	r2, [r7, #20]
 8010bf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8010bfa:	e005      	b.n	8010c08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010bfc:	6978      	ldr	r0, [r7, #20]
 8010bfe:	f001 fb91 	bl	8012324 <vPortFree>
 8010c02:	e001      	b.n	8010c08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010c04:	2300      	movs	r3, #0
 8010c06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010c08:	69fb      	ldr	r3, [r7, #28]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d017      	beq.n	8010c3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	2200      	movs	r2, #0
 8010c12:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010c16:	88fa      	ldrh	r2, [r7, #6]
 8010c18:	2300      	movs	r3, #0
 8010c1a:	9303      	str	r3, [sp, #12]
 8010c1c:	69fb      	ldr	r3, [r7, #28]
 8010c1e:	9302      	str	r3, [sp, #8]
 8010c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c22:	9301      	str	r3, [sp, #4]
 8010c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c26:	9300      	str	r3, [sp, #0]
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	68b9      	ldr	r1, [r7, #8]
 8010c2c:	68f8      	ldr	r0, [r7, #12]
 8010c2e:	f000 f80f 	bl	8010c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010c32:	69f8      	ldr	r0, [r7, #28]
 8010c34:	f000 f8ac 	bl	8010d90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	61bb      	str	r3, [r7, #24]
 8010c3c:	e002      	b.n	8010c44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010c44:	69bb      	ldr	r3, [r7, #24]
	}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3720      	adds	r7, #32
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
	...

08010c50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b088      	sub	sp, #32
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	60f8      	str	r0, [r7, #12]
 8010c58:	60b9      	str	r1, [r7, #8]
 8010c5a:	607a      	str	r2, [r7, #4]
 8010c5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010c68:	3b01      	subs	r3, #1
 8010c6a:	009b      	lsls	r3, r3, #2
 8010c6c:	4413      	add	r3, r2
 8010c6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010c70:	69bb      	ldr	r3, [r7, #24]
 8010c72:	f023 0307 	bic.w	r3, r3, #7
 8010c76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010c78:	69bb      	ldr	r3, [r7, #24]
 8010c7a:	f003 0307 	and.w	r3, r3, #7
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d00b      	beq.n	8010c9a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8010c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c86:	f383 8811 	msr	BASEPRI, r3
 8010c8a:	f3bf 8f6f 	isb	sy
 8010c8e:	f3bf 8f4f 	dsb	sy
 8010c92:	617b      	str	r3, [r7, #20]
}
 8010c94:	bf00      	nop
 8010c96:	bf00      	nop
 8010c98:	e7fd      	b.n	8010c96 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d01f      	beq.n	8010ce0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	61fb      	str	r3, [r7, #28]
 8010ca4:	e012      	b.n	8010ccc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010ca6:	68ba      	ldr	r2, [r7, #8]
 8010ca8:	69fb      	ldr	r3, [r7, #28]
 8010caa:	4413      	add	r3, r2
 8010cac:	7819      	ldrb	r1, [r3, #0]
 8010cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	4413      	add	r3, r2
 8010cb4:	3334      	adds	r3, #52	@ 0x34
 8010cb6:	460a      	mov	r2, r1
 8010cb8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010cba:	68ba      	ldr	r2, [r7, #8]
 8010cbc:	69fb      	ldr	r3, [r7, #28]
 8010cbe:	4413      	add	r3, r2
 8010cc0:	781b      	ldrb	r3, [r3, #0]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d006      	beq.n	8010cd4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010cc6:	69fb      	ldr	r3, [r7, #28]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	61fb      	str	r3, [r7, #28]
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	2b0f      	cmp	r3, #15
 8010cd0:	d9e9      	bls.n	8010ca6 <prvInitialiseNewTask+0x56>
 8010cd2:	e000      	b.n	8010cd6 <prvInitialiseNewTask+0x86>
			{
				break;
 8010cd4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cd8:	2200      	movs	r2, #0
 8010cda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010cde:	e003      	b.n	8010ce8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cea:	2b06      	cmp	r3, #6
 8010cec:	d901      	bls.n	8010cf2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010cee:	2306      	movs	r3, #6
 8010cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010cfc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d00:	2200      	movs	r2, #0
 8010d02:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d06:	3304      	adds	r3, #4
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7fe febf 	bl	800fa8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d10:	3318      	adds	r3, #24
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fe feba 	bl	800fa8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d20:	f1c3 0207 	rsb	r2, r3, #7
 8010d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d2c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d30:	2200      	movs	r2, #0
 8010d32:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d38:	2200      	movs	r2, #0
 8010d3a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d40:	334c      	adds	r3, #76	@ 0x4c
 8010d42:	224c      	movs	r2, #76	@ 0x4c
 8010d44:	2100      	movs	r1, #0
 8010d46:	4618      	mov	r0, r3
 8010d48:	f002 faa2 	bl	8013290 <memset>
 8010d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8010d84 <prvInitialiseNewTask+0x134>)
 8010d50:	651a      	str	r2, [r3, #80]	@ 0x50
 8010d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d54:	4a0c      	ldr	r2, [pc, #48]	@ (8010d88 <prvInitialiseNewTask+0x138>)
 8010d56:	655a      	str	r2, [r3, #84]	@ 0x54
 8010d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8010d8c <prvInitialiseNewTask+0x13c>)
 8010d5c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010d5e:	683a      	ldr	r2, [r7, #0]
 8010d60:	68f9      	ldr	r1, [r7, #12]
 8010d62:	69b8      	ldr	r0, [r7, #24]
 8010d64:	f000 ffb6 	bl	8011cd4 <pxPortInitialiseStack>
 8010d68:	4602      	mov	r2, r0
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d002      	beq.n	8010d7a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d7a:	bf00      	nop
 8010d7c:	3720      	adds	r7, #32
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
 8010d82:	bf00      	nop
 8010d84:	20004cb0 	.word	0x20004cb0
 8010d88:	20004d18 	.word	0x20004d18
 8010d8c:	20004d80 	.word	0x20004d80

08010d90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b082      	sub	sp, #8
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010d98:	f001 f8ce 	bl	8011f38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8010e48 <prvAddNewTaskToReadyList+0xb8>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	3301      	adds	r3, #1
 8010da2:	4a29      	ldr	r2, [pc, #164]	@ (8010e48 <prvAddNewTaskToReadyList+0xb8>)
 8010da4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010da6:	4b29      	ldr	r3, [pc, #164]	@ (8010e4c <prvAddNewTaskToReadyList+0xbc>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d109      	bne.n	8010dc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010dae:	4a27      	ldr	r2, [pc, #156]	@ (8010e4c <prvAddNewTaskToReadyList+0xbc>)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010db4:	4b24      	ldr	r3, [pc, #144]	@ (8010e48 <prvAddNewTaskToReadyList+0xb8>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d110      	bne.n	8010dde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010dbc:	f000 fca0 	bl	8011700 <prvInitialiseTaskLists>
 8010dc0:	e00d      	b.n	8010dde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010dc2:	4b23      	ldr	r3, [pc, #140]	@ (8010e50 <prvAddNewTaskToReadyList+0xc0>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d109      	bne.n	8010dde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010dca:	4b20      	ldr	r3, [pc, #128]	@ (8010e4c <prvAddNewTaskToReadyList+0xbc>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d802      	bhi.n	8010dde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8010e4c <prvAddNewTaskToReadyList+0xbc>)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010dde:	4b1d      	ldr	r3, [pc, #116]	@ (8010e54 <prvAddNewTaskToReadyList+0xc4>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	3301      	adds	r3, #1
 8010de4:	4a1b      	ldr	r2, [pc, #108]	@ (8010e54 <prvAddNewTaskToReadyList+0xc4>)
 8010de6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dec:	2201      	movs	r2, #1
 8010dee:	409a      	lsls	r2, r3
 8010df0:	4b19      	ldr	r3, [pc, #100]	@ (8010e58 <prvAddNewTaskToReadyList+0xc8>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	4313      	orrs	r3, r2
 8010df6:	4a18      	ldr	r2, [pc, #96]	@ (8010e58 <prvAddNewTaskToReadyList+0xc8>)
 8010df8:	6013      	str	r3, [r2, #0]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dfe:	4613      	mov	r3, r2
 8010e00:	009b      	lsls	r3, r3, #2
 8010e02:	4413      	add	r3, r2
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	4a15      	ldr	r2, [pc, #84]	@ (8010e5c <prvAddNewTaskToReadyList+0xcc>)
 8010e08:	441a      	add	r2, r3
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	3304      	adds	r3, #4
 8010e0e:	4619      	mov	r1, r3
 8010e10:	4610      	mov	r0, r2
 8010e12:	f7fe fe48 	bl	800faa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010e16:	f001 f8c1 	bl	8011f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8010e50 <prvAddNewTaskToReadyList+0xc0>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d00e      	beq.n	8010e40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010e22:	4b0a      	ldr	r3, [pc, #40]	@ (8010e4c <prvAddNewTaskToReadyList+0xbc>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d207      	bcs.n	8010e40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010e30:	4b0b      	ldr	r3, [pc, #44]	@ (8010e60 <prvAddNewTaskToReadyList+0xd0>)
 8010e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e36:	601a      	str	r2, [r3, #0]
 8010e38:	f3bf 8f4f 	dsb	sy
 8010e3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e40:	bf00      	nop
 8010e42:	3708      	adds	r7, #8
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	2000105c 	.word	0x2000105c
 8010e4c:	20000f5c 	.word	0x20000f5c
 8010e50:	20001068 	.word	0x20001068
 8010e54:	20001078 	.word	0x20001078
 8010e58:	20001064 	.word	0x20001064
 8010e5c:	20000f60 	.word	0x20000f60
 8010e60:	e000ed04 	.word	0xe000ed04

08010e64 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b084      	sub	sp, #16
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010e6c:	f001 f864 	bl	8011f38 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d102      	bne.n	8010e7c <vTaskDelete+0x18>
 8010e76:	4b39      	ldr	r3, [pc, #228]	@ (8010f5c <vTaskDelete+0xf8>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	e000      	b.n	8010e7e <vTaskDelete+0x1a>
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	3304      	adds	r3, #4
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fe fe6b 	bl	800fb60 <uxListRemove>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d115      	bne.n	8010ebc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e94:	4932      	ldr	r1, [pc, #200]	@ (8010f60 <vTaskDelete+0xfc>)
 8010e96:	4613      	mov	r3, r2
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	4413      	add	r3, r2
 8010e9c:	009b      	lsls	r3, r3, #2
 8010e9e:	440b      	add	r3, r1
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d10a      	bne.n	8010ebc <vTaskDelete+0x58>
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eaa:	2201      	movs	r2, #1
 8010eac:	fa02 f303 	lsl.w	r3, r2, r3
 8010eb0:	43da      	mvns	r2, r3
 8010eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8010f64 <vTaskDelete+0x100>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	4013      	ands	r3, r2
 8010eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8010f64 <vTaskDelete+0x100>)
 8010eba:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d004      	beq.n	8010ece <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	3318      	adds	r3, #24
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7fe fe49 	bl	800fb60 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010ece:	4b26      	ldr	r3, [pc, #152]	@ (8010f68 <vTaskDelete+0x104>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	4a24      	ldr	r2, [pc, #144]	@ (8010f68 <vTaskDelete+0x104>)
 8010ed6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010ed8:	4b20      	ldr	r3, [pc, #128]	@ (8010f5c <vTaskDelete+0xf8>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	68fa      	ldr	r2, [r7, #12]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d10b      	bne.n	8010efa <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	3304      	adds	r3, #4
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	4820      	ldr	r0, [pc, #128]	@ (8010f6c <vTaskDelete+0x108>)
 8010eea:	f7fe fddc 	bl	800faa6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010eee:	4b20      	ldr	r3, [pc, #128]	@ (8010f70 <vTaskDelete+0x10c>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8010f70 <vTaskDelete+0x10c>)
 8010ef6:	6013      	str	r3, [r2, #0]
 8010ef8:	e009      	b.n	8010f0e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8010efa:	4b1e      	ldr	r3, [pc, #120]	@ (8010f74 <vTaskDelete+0x110>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	3b01      	subs	r3, #1
 8010f00:	4a1c      	ldr	r2, [pc, #112]	@ (8010f74 <vTaskDelete+0x110>)
 8010f02:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8010f04:	68f8      	ldr	r0, [r7, #12]
 8010f06:	f000 fc69 	bl	80117dc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010f0a:	f000 fc9d 	bl	8011848 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8010f0e:	f001 f845 	bl	8011f9c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010f12:	4b19      	ldr	r3, [pc, #100]	@ (8010f78 <vTaskDelete+0x114>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d01c      	beq.n	8010f54 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8010f1a:	4b10      	ldr	r3, [pc, #64]	@ (8010f5c <vTaskDelete+0xf8>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	68fa      	ldr	r2, [r7, #12]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d117      	bne.n	8010f54 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8010f24:	4b15      	ldr	r3, [pc, #84]	@ (8010f7c <vTaskDelete+0x118>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d00b      	beq.n	8010f44 <vTaskDelete+0xe0>
	__asm volatile
 8010f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f30:	f383 8811 	msr	BASEPRI, r3
 8010f34:	f3bf 8f6f 	isb	sy
 8010f38:	f3bf 8f4f 	dsb	sy
 8010f3c:	60bb      	str	r3, [r7, #8]
}
 8010f3e:	bf00      	nop
 8010f40:	bf00      	nop
 8010f42:	e7fd      	b.n	8010f40 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8010f44:	4b0e      	ldr	r3, [pc, #56]	@ (8010f80 <vTaskDelete+0x11c>)
 8010f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f4a:	601a      	str	r2, [r3, #0]
 8010f4c:	f3bf 8f4f 	dsb	sy
 8010f50:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010f54:	bf00      	nop
 8010f56:	3710      	adds	r7, #16
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	20000f5c 	.word	0x20000f5c
 8010f60:	20000f60 	.word	0x20000f60
 8010f64:	20001064 	.word	0x20001064
 8010f68:	20001078 	.word	0x20001078
 8010f6c:	20001030 	.word	0x20001030
 8010f70:	20001044 	.word	0x20001044
 8010f74:	2000105c 	.word	0x2000105c
 8010f78:	20001068 	.word	0x20001068
 8010f7c:	20001084 	.word	0x20001084
 8010f80:	e000ed04 	.word	0xe000ed04

08010f84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b084      	sub	sp, #16
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d018      	beq.n	8010fc8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010f96:	4b14      	ldr	r3, [pc, #80]	@ (8010fe8 <vTaskDelay+0x64>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00b      	beq.n	8010fb6 <vTaskDelay+0x32>
	__asm volatile
 8010f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fa2:	f383 8811 	msr	BASEPRI, r3
 8010fa6:	f3bf 8f6f 	isb	sy
 8010faa:	f3bf 8f4f 	dsb	sy
 8010fae:	60bb      	str	r3, [r7, #8]
}
 8010fb0:	bf00      	nop
 8010fb2:	bf00      	nop
 8010fb4:	e7fd      	b.n	8010fb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010fb6:	f000 f885 	bl	80110c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010fba:	2100      	movs	r1, #0
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f000 fe23 	bl	8011c08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010fc2:	f000 f88d 	bl	80110e0 <xTaskResumeAll>
 8010fc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d107      	bne.n	8010fde <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010fce:	4b07      	ldr	r3, [pc, #28]	@ (8010fec <vTaskDelay+0x68>)
 8010fd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010fd4:	601a      	str	r2, [r3, #0]
 8010fd6:	f3bf 8f4f 	dsb	sy
 8010fda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010fde:	bf00      	nop
 8010fe0:	3710      	adds	r7, #16
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	20001084 	.word	0x20001084
 8010fec:	e000ed04 	.word	0xe000ed04

08010ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b08a      	sub	sp, #40	@ 0x28
 8010ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010ffe:	463a      	mov	r2, r7
 8011000:	1d39      	adds	r1, r7, #4
 8011002:	f107 0308 	add.w	r3, r7, #8
 8011006:	4618      	mov	r0, r3
 8011008:	f7f1 fffe 	bl	8003008 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801100c:	6839      	ldr	r1, [r7, #0]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	68ba      	ldr	r2, [r7, #8]
 8011012:	9202      	str	r2, [sp, #8]
 8011014:	9301      	str	r3, [sp, #4]
 8011016:	2300      	movs	r3, #0
 8011018:	9300      	str	r3, [sp, #0]
 801101a:	2300      	movs	r3, #0
 801101c:	460a      	mov	r2, r1
 801101e:	4921      	ldr	r1, [pc, #132]	@ (80110a4 <vTaskStartScheduler+0xb4>)
 8011020:	4821      	ldr	r0, [pc, #132]	@ (80110a8 <vTaskStartScheduler+0xb8>)
 8011022:	f7ff fd6f 	bl	8010b04 <xTaskCreateStatic>
 8011026:	4603      	mov	r3, r0
 8011028:	4a20      	ldr	r2, [pc, #128]	@ (80110ac <vTaskStartScheduler+0xbc>)
 801102a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801102c:	4b1f      	ldr	r3, [pc, #124]	@ (80110ac <vTaskStartScheduler+0xbc>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d002      	beq.n	801103a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011034:	2301      	movs	r3, #1
 8011036:	617b      	str	r3, [r7, #20]
 8011038:	e001      	b.n	801103e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801103a:	2300      	movs	r3, #0
 801103c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	2b01      	cmp	r3, #1
 8011042:	d11b      	bne.n	801107c <vTaskStartScheduler+0x8c>
	__asm volatile
 8011044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011048:	f383 8811 	msr	BASEPRI, r3
 801104c:	f3bf 8f6f 	isb	sy
 8011050:	f3bf 8f4f 	dsb	sy
 8011054:	613b      	str	r3, [r7, #16]
}
 8011056:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011058:	4b15      	ldr	r3, [pc, #84]	@ (80110b0 <vTaskStartScheduler+0xc0>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	334c      	adds	r3, #76	@ 0x4c
 801105e:	4a15      	ldr	r2, [pc, #84]	@ (80110b4 <vTaskStartScheduler+0xc4>)
 8011060:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011062:	4b15      	ldr	r3, [pc, #84]	@ (80110b8 <vTaskStartScheduler+0xc8>)
 8011064:	f04f 32ff 	mov.w	r2, #4294967295
 8011068:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801106a:	4b14      	ldr	r3, [pc, #80]	@ (80110bc <vTaskStartScheduler+0xcc>)
 801106c:	2201      	movs	r2, #1
 801106e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011070:	4b13      	ldr	r3, [pc, #76]	@ (80110c0 <vTaskStartScheduler+0xd0>)
 8011072:	2200      	movs	r2, #0
 8011074:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011076:	f000 febb 	bl	8011df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801107a:	e00f      	b.n	801109c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011082:	d10b      	bne.n	801109c <vTaskStartScheduler+0xac>
	__asm volatile
 8011084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011088:	f383 8811 	msr	BASEPRI, r3
 801108c:	f3bf 8f6f 	isb	sy
 8011090:	f3bf 8f4f 	dsb	sy
 8011094:	60fb      	str	r3, [r7, #12]
}
 8011096:	bf00      	nop
 8011098:	bf00      	nop
 801109a:	e7fd      	b.n	8011098 <vTaskStartScheduler+0xa8>
}
 801109c:	bf00      	nop
 801109e:	3718      	adds	r7, #24
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	08016338 	.word	0x08016338
 80110a8:	080116cd 	.word	0x080116cd
 80110ac:	20001080 	.word	0x20001080
 80110b0:	20000f5c 	.word	0x20000f5c
 80110b4:	2000001c 	.word	0x2000001c
 80110b8:	2000107c 	.word	0x2000107c
 80110bc:	20001068 	.word	0x20001068
 80110c0:	20001060 	.word	0x20001060

080110c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110c4:	b480      	push	{r7}
 80110c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80110c8:	4b04      	ldr	r3, [pc, #16]	@ (80110dc <vTaskSuspendAll+0x18>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	3301      	adds	r3, #1
 80110ce:	4a03      	ldr	r2, [pc, #12]	@ (80110dc <vTaskSuspendAll+0x18>)
 80110d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80110d2:	bf00      	nop
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr
 80110dc:	20001084 	.word	0x20001084

080110e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80110e6:	2300      	movs	r3, #0
 80110e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80110ea:	2300      	movs	r3, #0
 80110ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80110ee:	4b42      	ldr	r3, [pc, #264]	@ (80111f8 <xTaskResumeAll+0x118>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d10b      	bne.n	801110e <xTaskResumeAll+0x2e>
	__asm volatile
 80110f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110fa:	f383 8811 	msr	BASEPRI, r3
 80110fe:	f3bf 8f6f 	isb	sy
 8011102:	f3bf 8f4f 	dsb	sy
 8011106:	603b      	str	r3, [r7, #0]
}
 8011108:	bf00      	nop
 801110a:	bf00      	nop
 801110c:	e7fd      	b.n	801110a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801110e:	f000 ff13 	bl	8011f38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011112:	4b39      	ldr	r3, [pc, #228]	@ (80111f8 <xTaskResumeAll+0x118>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	3b01      	subs	r3, #1
 8011118:	4a37      	ldr	r2, [pc, #220]	@ (80111f8 <xTaskResumeAll+0x118>)
 801111a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801111c:	4b36      	ldr	r3, [pc, #216]	@ (80111f8 <xTaskResumeAll+0x118>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d161      	bne.n	80111e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011124:	4b35      	ldr	r3, [pc, #212]	@ (80111fc <xTaskResumeAll+0x11c>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d05d      	beq.n	80111e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801112c:	e02e      	b.n	801118c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801112e:	4b34      	ldr	r3, [pc, #208]	@ (8011200 <xTaskResumeAll+0x120>)
 8011130:	68db      	ldr	r3, [r3, #12]
 8011132:	68db      	ldr	r3, [r3, #12]
 8011134:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	3318      	adds	r3, #24
 801113a:	4618      	mov	r0, r3
 801113c:	f7fe fd10 	bl	800fb60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	3304      	adds	r3, #4
 8011144:	4618      	mov	r0, r3
 8011146:	f7fe fd0b 	bl	800fb60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801114e:	2201      	movs	r2, #1
 8011150:	409a      	lsls	r2, r3
 8011152:	4b2c      	ldr	r3, [pc, #176]	@ (8011204 <xTaskResumeAll+0x124>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	4313      	orrs	r3, r2
 8011158:	4a2a      	ldr	r2, [pc, #168]	@ (8011204 <xTaskResumeAll+0x124>)
 801115a:	6013      	str	r3, [r2, #0]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011160:	4613      	mov	r3, r2
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	4413      	add	r3, r2
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	4a27      	ldr	r2, [pc, #156]	@ (8011208 <xTaskResumeAll+0x128>)
 801116a:	441a      	add	r2, r3
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	3304      	adds	r3, #4
 8011170:	4619      	mov	r1, r3
 8011172:	4610      	mov	r0, r2
 8011174:	f7fe fc97 	bl	800faa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801117c:	4b23      	ldr	r3, [pc, #140]	@ (801120c <xTaskResumeAll+0x12c>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011182:	429a      	cmp	r2, r3
 8011184:	d302      	bcc.n	801118c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011186:	4b22      	ldr	r3, [pc, #136]	@ (8011210 <xTaskResumeAll+0x130>)
 8011188:	2201      	movs	r2, #1
 801118a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801118c:	4b1c      	ldr	r3, [pc, #112]	@ (8011200 <xTaskResumeAll+0x120>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d1cc      	bne.n	801112e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d001      	beq.n	801119e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801119a:	f000 fb55 	bl	8011848 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801119e:	4b1d      	ldr	r3, [pc, #116]	@ (8011214 <xTaskResumeAll+0x134>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d010      	beq.n	80111cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111aa:	f000 f859 	bl	8011260 <xTaskIncrementTick>
 80111ae:	4603      	mov	r3, r0
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d002      	beq.n	80111ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80111b4:	4b16      	ldr	r3, [pc, #88]	@ (8011210 <xTaskResumeAll+0x130>)
 80111b6:	2201      	movs	r2, #1
 80111b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	3b01      	subs	r3, #1
 80111be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d1f1      	bne.n	80111aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80111c6:	4b13      	ldr	r3, [pc, #76]	@ (8011214 <xTaskResumeAll+0x134>)
 80111c8:	2200      	movs	r2, #0
 80111ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111cc:	4b10      	ldr	r3, [pc, #64]	@ (8011210 <xTaskResumeAll+0x130>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d009      	beq.n	80111e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80111d4:	2301      	movs	r3, #1
 80111d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80111d8:	4b0f      	ldr	r3, [pc, #60]	@ (8011218 <xTaskResumeAll+0x138>)
 80111da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111de:	601a      	str	r2, [r3, #0]
 80111e0:	f3bf 8f4f 	dsb	sy
 80111e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80111e8:	f000 fed8 	bl	8011f9c <vPortExitCritical>

	return xAlreadyYielded;
 80111ec:	68bb      	ldr	r3, [r7, #8]
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3710      	adds	r7, #16
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	20001084 	.word	0x20001084
 80111fc:	2000105c 	.word	0x2000105c
 8011200:	2000101c 	.word	0x2000101c
 8011204:	20001064 	.word	0x20001064
 8011208:	20000f60 	.word	0x20000f60
 801120c:	20000f5c 	.word	0x20000f5c
 8011210:	20001070 	.word	0x20001070
 8011214:	2000106c 	.word	0x2000106c
 8011218:	e000ed04 	.word	0xe000ed04

0801121c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801121c:	b480      	push	{r7}
 801121e:	b083      	sub	sp, #12
 8011220:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011222:	4b05      	ldr	r3, [pc, #20]	@ (8011238 <xTaskGetTickCount+0x1c>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011228:	687b      	ldr	r3, [r7, #4]
}
 801122a:	4618      	mov	r0, r3
 801122c:	370c      	adds	r7, #12
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr
 8011236:	bf00      	nop
 8011238:	20001060 	.word	0x20001060

0801123c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011242:	f000 ff59 	bl	80120f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011246:	2300      	movs	r3, #0
 8011248:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801124a:	4b04      	ldr	r3, [pc, #16]	@ (801125c <xTaskGetTickCountFromISR+0x20>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011250:	683b      	ldr	r3, [r7, #0]
}
 8011252:	4618      	mov	r0, r3
 8011254:	3708      	adds	r7, #8
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	20001060 	.word	0x20001060

08011260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b086      	sub	sp, #24
 8011264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011266:	2300      	movs	r3, #0
 8011268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801126a:	4b53      	ldr	r3, [pc, #332]	@ (80113b8 <xTaskIncrementTick+0x158>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	f040 8095 	bne.w	801139e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011274:	4b51      	ldr	r3, [pc, #324]	@ (80113bc <xTaskIncrementTick+0x15c>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	3301      	adds	r3, #1
 801127a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801127c:	4a4f      	ldr	r2, [pc, #316]	@ (80113bc <xTaskIncrementTick+0x15c>)
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d121      	bne.n	80112cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011288:	4b4d      	ldr	r3, [pc, #308]	@ (80113c0 <xTaskIncrementTick+0x160>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d00b      	beq.n	80112aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8011292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011296:	f383 8811 	msr	BASEPRI, r3
 801129a:	f3bf 8f6f 	isb	sy
 801129e:	f3bf 8f4f 	dsb	sy
 80112a2:	603b      	str	r3, [r7, #0]
}
 80112a4:	bf00      	nop
 80112a6:	bf00      	nop
 80112a8:	e7fd      	b.n	80112a6 <xTaskIncrementTick+0x46>
 80112aa:	4b45      	ldr	r3, [pc, #276]	@ (80113c0 <xTaskIncrementTick+0x160>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	60fb      	str	r3, [r7, #12]
 80112b0:	4b44      	ldr	r3, [pc, #272]	@ (80113c4 <xTaskIncrementTick+0x164>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	4a42      	ldr	r2, [pc, #264]	@ (80113c0 <xTaskIncrementTick+0x160>)
 80112b6:	6013      	str	r3, [r2, #0]
 80112b8:	4a42      	ldr	r2, [pc, #264]	@ (80113c4 <xTaskIncrementTick+0x164>)
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	6013      	str	r3, [r2, #0]
 80112be:	4b42      	ldr	r3, [pc, #264]	@ (80113c8 <xTaskIncrementTick+0x168>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	3301      	adds	r3, #1
 80112c4:	4a40      	ldr	r2, [pc, #256]	@ (80113c8 <xTaskIncrementTick+0x168>)
 80112c6:	6013      	str	r3, [r2, #0]
 80112c8:	f000 fabe 	bl	8011848 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112cc:	4b3f      	ldr	r3, [pc, #252]	@ (80113cc <xTaskIncrementTick+0x16c>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	693a      	ldr	r2, [r7, #16]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d348      	bcc.n	8011368 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112d6:	4b3a      	ldr	r3, [pc, #232]	@ (80113c0 <xTaskIncrementTick+0x160>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d104      	bne.n	80112ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112e0:	4b3a      	ldr	r3, [pc, #232]	@ (80113cc <xTaskIncrementTick+0x16c>)
 80112e2:	f04f 32ff 	mov.w	r2, #4294967295
 80112e6:	601a      	str	r2, [r3, #0]
					break;
 80112e8:	e03e      	b.n	8011368 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112ea:	4b35      	ldr	r3, [pc, #212]	@ (80113c0 <xTaskIncrementTick+0x160>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	68db      	ldr	r3, [r3, #12]
 80112f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80112fa:	693a      	ldr	r2, [r7, #16]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d203      	bcs.n	801130a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011302:	4a32      	ldr	r2, [pc, #200]	@ (80113cc <xTaskIncrementTick+0x16c>)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011308:	e02e      	b.n	8011368 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	3304      	adds	r3, #4
 801130e:	4618      	mov	r0, r3
 8011310:	f7fe fc26 	bl	800fb60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011318:	2b00      	cmp	r3, #0
 801131a:	d004      	beq.n	8011326 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	3318      	adds	r3, #24
 8011320:	4618      	mov	r0, r3
 8011322:	f7fe fc1d 	bl	800fb60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801132a:	2201      	movs	r2, #1
 801132c:	409a      	lsls	r2, r3
 801132e:	4b28      	ldr	r3, [pc, #160]	@ (80113d0 <xTaskIncrementTick+0x170>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	4313      	orrs	r3, r2
 8011334:	4a26      	ldr	r2, [pc, #152]	@ (80113d0 <xTaskIncrementTick+0x170>)
 8011336:	6013      	str	r3, [r2, #0]
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801133c:	4613      	mov	r3, r2
 801133e:	009b      	lsls	r3, r3, #2
 8011340:	4413      	add	r3, r2
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	4a23      	ldr	r2, [pc, #140]	@ (80113d4 <xTaskIncrementTick+0x174>)
 8011346:	441a      	add	r2, r3
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	3304      	adds	r3, #4
 801134c:	4619      	mov	r1, r3
 801134e:	4610      	mov	r0, r2
 8011350:	f7fe fba9 	bl	800faa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011358:	4b1f      	ldr	r3, [pc, #124]	@ (80113d8 <xTaskIncrementTick+0x178>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801135e:	429a      	cmp	r2, r3
 8011360:	d3b9      	bcc.n	80112d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011362:	2301      	movs	r3, #1
 8011364:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011366:	e7b6      	b.n	80112d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011368:	4b1b      	ldr	r3, [pc, #108]	@ (80113d8 <xTaskIncrementTick+0x178>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801136e:	4919      	ldr	r1, [pc, #100]	@ (80113d4 <xTaskIncrementTick+0x174>)
 8011370:	4613      	mov	r3, r2
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	4413      	add	r3, r2
 8011376:	009b      	lsls	r3, r3, #2
 8011378:	440b      	add	r3, r1
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	2b01      	cmp	r3, #1
 801137e:	d901      	bls.n	8011384 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011380:	2301      	movs	r3, #1
 8011382:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8011384:	4b15      	ldr	r3, [pc, #84]	@ (80113dc <xTaskIncrementTick+0x17c>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d101      	bne.n	8011390 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 801138c:	f7f1 fe2d 	bl	8002fea <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011390:	4b13      	ldr	r3, [pc, #76]	@ (80113e0 <xTaskIncrementTick+0x180>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d009      	beq.n	80113ac <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8011398:	2301      	movs	r3, #1
 801139a:	617b      	str	r3, [r7, #20]
 801139c:	e006      	b.n	80113ac <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801139e:	4b0f      	ldr	r3, [pc, #60]	@ (80113dc <xTaskIncrementTick+0x17c>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	3301      	adds	r3, #1
 80113a4:	4a0d      	ldr	r2, [pc, #52]	@ (80113dc <xTaskIncrementTick+0x17c>)
 80113a6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80113a8:	f7f1 fe1f 	bl	8002fea <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80113ac:	697b      	ldr	r3, [r7, #20]
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3718      	adds	r7, #24
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	20001084 	.word	0x20001084
 80113bc:	20001060 	.word	0x20001060
 80113c0:	20001014 	.word	0x20001014
 80113c4:	20001018 	.word	0x20001018
 80113c8:	20001074 	.word	0x20001074
 80113cc:	2000107c 	.word	0x2000107c
 80113d0:	20001064 	.word	0x20001064
 80113d4:	20000f60 	.word	0x20000f60
 80113d8:	20000f5c 	.word	0x20000f5c
 80113dc:	2000106c 	.word	0x2000106c
 80113e0:	20001070 	.word	0x20001070

080113e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80113e4:	b480      	push	{r7}
 80113e6:	b087      	sub	sp, #28
 80113e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80113ea:	4b2a      	ldr	r3, [pc, #168]	@ (8011494 <vTaskSwitchContext+0xb0>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d003      	beq.n	80113fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80113f2:	4b29      	ldr	r3, [pc, #164]	@ (8011498 <vTaskSwitchContext+0xb4>)
 80113f4:	2201      	movs	r2, #1
 80113f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80113f8:	e045      	b.n	8011486 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80113fa:	4b27      	ldr	r3, [pc, #156]	@ (8011498 <vTaskSwitchContext+0xb4>)
 80113fc:	2200      	movs	r2, #0
 80113fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011400:	4b26      	ldr	r3, [pc, #152]	@ (801149c <vTaskSwitchContext+0xb8>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	fab3 f383 	clz	r3, r3
 801140c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801140e:	7afb      	ldrb	r3, [r7, #11]
 8011410:	f1c3 031f 	rsb	r3, r3, #31
 8011414:	617b      	str	r3, [r7, #20]
 8011416:	4922      	ldr	r1, [pc, #136]	@ (80114a0 <vTaskSwitchContext+0xbc>)
 8011418:	697a      	ldr	r2, [r7, #20]
 801141a:	4613      	mov	r3, r2
 801141c:	009b      	lsls	r3, r3, #2
 801141e:	4413      	add	r3, r2
 8011420:	009b      	lsls	r3, r3, #2
 8011422:	440b      	add	r3, r1
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d10b      	bne.n	8011442 <vTaskSwitchContext+0x5e>
	__asm volatile
 801142a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801142e:	f383 8811 	msr	BASEPRI, r3
 8011432:	f3bf 8f6f 	isb	sy
 8011436:	f3bf 8f4f 	dsb	sy
 801143a:	607b      	str	r3, [r7, #4]
}
 801143c:	bf00      	nop
 801143e:	bf00      	nop
 8011440:	e7fd      	b.n	801143e <vTaskSwitchContext+0x5a>
 8011442:	697a      	ldr	r2, [r7, #20]
 8011444:	4613      	mov	r3, r2
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	4413      	add	r3, r2
 801144a:	009b      	lsls	r3, r3, #2
 801144c:	4a14      	ldr	r2, [pc, #80]	@ (80114a0 <vTaskSwitchContext+0xbc>)
 801144e:	4413      	add	r3, r2
 8011450:	613b      	str	r3, [r7, #16]
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	685b      	ldr	r3, [r3, #4]
 8011456:	685a      	ldr	r2, [r3, #4]
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	605a      	str	r2, [r3, #4]
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	685a      	ldr	r2, [r3, #4]
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	3308      	adds	r3, #8
 8011464:	429a      	cmp	r2, r3
 8011466:	d104      	bne.n	8011472 <vTaskSwitchContext+0x8e>
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	685a      	ldr	r2, [r3, #4]
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	605a      	str	r2, [r3, #4]
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	4a0a      	ldr	r2, [pc, #40]	@ (80114a4 <vTaskSwitchContext+0xc0>)
 801147a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801147c:	4b09      	ldr	r3, [pc, #36]	@ (80114a4 <vTaskSwitchContext+0xc0>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	334c      	adds	r3, #76	@ 0x4c
 8011482:	4a09      	ldr	r2, [pc, #36]	@ (80114a8 <vTaskSwitchContext+0xc4>)
 8011484:	6013      	str	r3, [r2, #0]
}
 8011486:	bf00      	nop
 8011488:	371c      	adds	r7, #28
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop
 8011494:	20001084 	.word	0x20001084
 8011498:	20001070 	.word	0x20001070
 801149c:	20001064 	.word	0x20001064
 80114a0:	20000f60 	.word	0x20000f60
 80114a4:	20000f5c 	.word	0x20000f5c
 80114a8:	2000001c 	.word	0x2000001c

080114ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d10b      	bne.n	80114d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80114bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114c0:	f383 8811 	msr	BASEPRI, r3
 80114c4:	f3bf 8f6f 	isb	sy
 80114c8:	f3bf 8f4f 	dsb	sy
 80114cc:	60fb      	str	r3, [r7, #12]
}
 80114ce:	bf00      	nop
 80114d0:	bf00      	nop
 80114d2:	e7fd      	b.n	80114d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114d4:	4b07      	ldr	r3, [pc, #28]	@ (80114f4 <vTaskPlaceOnEventList+0x48>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	3318      	adds	r3, #24
 80114da:	4619      	mov	r1, r3
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f7fe fb06 	bl	800faee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114e2:	2101      	movs	r1, #1
 80114e4:	6838      	ldr	r0, [r7, #0]
 80114e6:	f000 fb8f 	bl	8011c08 <prvAddCurrentTaskToDelayedList>
}
 80114ea:	bf00      	nop
 80114ec:	3710      	adds	r7, #16
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	20000f5c 	.word	0x20000f5c

080114f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b086      	sub	sp, #24
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	68db      	ldr	r3, [r3, #12]
 8011504:	68db      	ldr	r3, [r3, #12]
 8011506:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d10b      	bne.n	8011526 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801150e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011512:	f383 8811 	msr	BASEPRI, r3
 8011516:	f3bf 8f6f 	isb	sy
 801151a:	f3bf 8f4f 	dsb	sy
 801151e:	60fb      	str	r3, [r7, #12]
}
 8011520:	bf00      	nop
 8011522:	bf00      	nop
 8011524:	e7fd      	b.n	8011522 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	3318      	adds	r3, #24
 801152a:	4618      	mov	r0, r3
 801152c:	f7fe fb18 	bl	800fb60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011530:	4b1d      	ldr	r3, [pc, #116]	@ (80115a8 <xTaskRemoveFromEventList+0xb0>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d11c      	bne.n	8011572 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011538:	693b      	ldr	r3, [r7, #16]
 801153a:	3304      	adds	r3, #4
 801153c:	4618      	mov	r0, r3
 801153e:	f7fe fb0f 	bl	800fb60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011546:	2201      	movs	r2, #1
 8011548:	409a      	lsls	r2, r3
 801154a:	4b18      	ldr	r3, [pc, #96]	@ (80115ac <xTaskRemoveFromEventList+0xb4>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	4313      	orrs	r3, r2
 8011550:	4a16      	ldr	r2, [pc, #88]	@ (80115ac <xTaskRemoveFromEventList+0xb4>)
 8011552:	6013      	str	r3, [r2, #0]
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011558:	4613      	mov	r3, r2
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	4413      	add	r3, r2
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	4a13      	ldr	r2, [pc, #76]	@ (80115b0 <xTaskRemoveFromEventList+0xb8>)
 8011562:	441a      	add	r2, r3
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	3304      	adds	r3, #4
 8011568:	4619      	mov	r1, r3
 801156a:	4610      	mov	r0, r2
 801156c:	f7fe fa9b 	bl	800faa6 <vListInsertEnd>
 8011570:	e005      	b.n	801157e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	3318      	adds	r3, #24
 8011576:	4619      	mov	r1, r3
 8011578:	480e      	ldr	r0, [pc, #56]	@ (80115b4 <xTaskRemoveFromEventList+0xbc>)
 801157a:	f7fe fa94 	bl	800faa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011582:	4b0d      	ldr	r3, [pc, #52]	@ (80115b8 <xTaskRemoveFromEventList+0xc0>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011588:	429a      	cmp	r2, r3
 801158a:	d905      	bls.n	8011598 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801158c:	2301      	movs	r3, #1
 801158e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011590:	4b0a      	ldr	r3, [pc, #40]	@ (80115bc <xTaskRemoveFromEventList+0xc4>)
 8011592:	2201      	movs	r2, #1
 8011594:	601a      	str	r2, [r3, #0]
 8011596:	e001      	b.n	801159c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011598:	2300      	movs	r3, #0
 801159a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801159c:	697b      	ldr	r3, [r7, #20]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3718      	adds	r7, #24
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
 80115a6:	bf00      	nop
 80115a8:	20001084 	.word	0x20001084
 80115ac:	20001064 	.word	0x20001064
 80115b0:	20000f60 	.word	0x20000f60
 80115b4:	2000101c 	.word	0x2000101c
 80115b8:	20000f5c 	.word	0x20000f5c
 80115bc:	20001070 	.word	0x20001070

080115c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80115c0:	b480      	push	{r7}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80115c8:	4b06      	ldr	r3, [pc, #24]	@ (80115e4 <vTaskInternalSetTimeOutState+0x24>)
 80115ca:	681a      	ldr	r2, [r3, #0]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80115d0:	4b05      	ldr	r3, [pc, #20]	@ (80115e8 <vTaskInternalSetTimeOutState+0x28>)
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	605a      	str	r2, [r3, #4]
}
 80115d8:	bf00      	nop
 80115da:	370c      	adds	r7, #12
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr
 80115e4:	20001074 	.word	0x20001074
 80115e8:	20001060 	.word	0x20001060

080115ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b088      	sub	sp, #32
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d10b      	bne.n	8011614 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80115fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011600:	f383 8811 	msr	BASEPRI, r3
 8011604:	f3bf 8f6f 	isb	sy
 8011608:	f3bf 8f4f 	dsb	sy
 801160c:	613b      	str	r3, [r7, #16]
}
 801160e:	bf00      	nop
 8011610:	bf00      	nop
 8011612:	e7fd      	b.n	8011610 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d10b      	bne.n	8011632 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801161a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801161e:	f383 8811 	msr	BASEPRI, r3
 8011622:	f3bf 8f6f 	isb	sy
 8011626:	f3bf 8f4f 	dsb	sy
 801162a:	60fb      	str	r3, [r7, #12]
}
 801162c:	bf00      	nop
 801162e:	bf00      	nop
 8011630:	e7fd      	b.n	801162e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011632:	f000 fc81 	bl	8011f38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011636:	4b1d      	ldr	r3, [pc, #116]	@ (80116ac <xTaskCheckForTimeOut+0xc0>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	685b      	ldr	r3, [r3, #4]
 8011640:	69ba      	ldr	r2, [r7, #24]
 8011642:	1ad3      	subs	r3, r2, r3
 8011644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801164e:	d102      	bne.n	8011656 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011650:	2300      	movs	r3, #0
 8011652:	61fb      	str	r3, [r7, #28]
 8011654:	e023      	b.n	801169e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	4b15      	ldr	r3, [pc, #84]	@ (80116b0 <xTaskCheckForTimeOut+0xc4>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	429a      	cmp	r2, r3
 8011660:	d007      	beq.n	8011672 <xTaskCheckForTimeOut+0x86>
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	69ba      	ldr	r2, [r7, #24]
 8011668:	429a      	cmp	r2, r3
 801166a:	d302      	bcc.n	8011672 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801166c:	2301      	movs	r3, #1
 801166e:	61fb      	str	r3, [r7, #28]
 8011670:	e015      	b.n	801169e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	697a      	ldr	r2, [r7, #20]
 8011678:	429a      	cmp	r2, r3
 801167a:	d20b      	bcs.n	8011694 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	681a      	ldr	r2, [r3, #0]
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	1ad2      	subs	r2, r2, r3
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f7ff ff99 	bl	80115c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801168e:	2300      	movs	r3, #0
 8011690:	61fb      	str	r3, [r7, #28]
 8011692:	e004      	b.n	801169e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	2200      	movs	r2, #0
 8011698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801169a:	2301      	movs	r3, #1
 801169c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801169e:	f000 fc7d 	bl	8011f9c <vPortExitCritical>

	return xReturn;
 80116a2:	69fb      	ldr	r3, [r7, #28]
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3720      	adds	r7, #32
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	20001060 	.word	0x20001060
 80116b0:	20001074 	.word	0x20001074

080116b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80116b4:	b480      	push	{r7}
 80116b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80116b8:	4b03      	ldr	r3, [pc, #12]	@ (80116c8 <vTaskMissedYield+0x14>)
 80116ba:	2201      	movs	r2, #1
 80116bc:	601a      	str	r2, [r3, #0]
}
 80116be:	bf00      	nop
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr
 80116c8:	20001070 	.word	0x20001070

080116cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80116d4:	f000 f854 	bl	8011780 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80116d8:	4b07      	ldr	r3, [pc, #28]	@ (80116f8 <prvIdleTask+0x2c>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d907      	bls.n	80116f0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80116e0:	4b06      	ldr	r3, [pc, #24]	@ (80116fc <prvIdleTask+0x30>)
 80116e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80116e6:	601a      	str	r2, [r3, #0]
 80116e8:	f3bf 8f4f 	dsb	sy
 80116ec:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80116f0:	f7f1 fc74 	bl	8002fdc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80116f4:	e7ee      	b.n	80116d4 <prvIdleTask+0x8>
 80116f6:	bf00      	nop
 80116f8:	20000f60 	.word	0x20000f60
 80116fc:	e000ed04 	.word	0xe000ed04

08011700 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b082      	sub	sp, #8
 8011704:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011706:	2300      	movs	r3, #0
 8011708:	607b      	str	r3, [r7, #4]
 801170a:	e00c      	b.n	8011726 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	4613      	mov	r3, r2
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	4413      	add	r3, r2
 8011714:	009b      	lsls	r3, r3, #2
 8011716:	4a12      	ldr	r2, [pc, #72]	@ (8011760 <prvInitialiseTaskLists+0x60>)
 8011718:	4413      	add	r3, r2
 801171a:	4618      	mov	r0, r3
 801171c:	f7fe f996 	bl	800fa4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	3301      	adds	r3, #1
 8011724:	607b      	str	r3, [r7, #4]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2b06      	cmp	r3, #6
 801172a:	d9ef      	bls.n	801170c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801172c:	480d      	ldr	r0, [pc, #52]	@ (8011764 <prvInitialiseTaskLists+0x64>)
 801172e:	f7fe f98d 	bl	800fa4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011732:	480d      	ldr	r0, [pc, #52]	@ (8011768 <prvInitialiseTaskLists+0x68>)
 8011734:	f7fe f98a 	bl	800fa4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011738:	480c      	ldr	r0, [pc, #48]	@ (801176c <prvInitialiseTaskLists+0x6c>)
 801173a:	f7fe f987 	bl	800fa4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801173e:	480c      	ldr	r0, [pc, #48]	@ (8011770 <prvInitialiseTaskLists+0x70>)
 8011740:	f7fe f984 	bl	800fa4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011744:	480b      	ldr	r0, [pc, #44]	@ (8011774 <prvInitialiseTaskLists+0x74>)
 8011746:	f7fe f981 	bl	800fa4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801174a:	4b0b      	ldr	r3, [pc, #44]	@ (8011778 <prvInitialiseTaskLists+0x78>)
 801174c:	4a05      	ldr	r2, [pc, #20]	@ (8011764 <prvInitialiseTaskLists+0x64>)
 801174e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011750:	4b0a      	ldr	r3, [pc, #40]	@ (801177c <prvInitialiseTaskLists+0x7c>)
 8011752:	4a05      	ldr	r2, [pc, #20]	@ (8011768 <prvInitialiseTaskLists+0x68>)
 8011754:	601a      	str	r2, [r3, #0]
}
 8011756:	bf00      	nop
 8011758:	3708      	adds	r7, #8
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	20000f60 	.word	0x20000f60
 8011764:	20000fec 	.word	0x20000fec
 8011768:	20001000 	.word	0x20001000
 801176c:	2000101c 	.word	0x2000101c
 8011770:	20001030 	.word	0x20001030
 8011774:	20001048 	.word	0x20001048
 8011778:	20001014 	.word	0x20001014
 801177c:	20001018 	.word	0x20001018

08011780 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b082      	sub	sp, #8
 8011784:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011786:	e019      	b.n	80117bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011788:	f000 fbd6 	bl	8011f38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801178c:	4b10      	ldr	r3, [pc, #64]	@ (80117d0 <prvCheckTasksWaitingTermination+0x50>)
 801178e:	68db      	ldr	r3, [r3, #12]
 8011790:	68db      	ldr	r3, [r3, #12]
 8011792:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	3304      	adds	r3, #4
 8011798:	4618      	mov	r0, r3
 801179a:	f7fe f9e1 	bl	800fb60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801179e:	4b0d      	ldr	r3, [pc, #52]	@ (80117d4 <prvCheckTasksWaitingTermination+0x54>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	3b01      	subs	r3, #1
 80117a4:	4a0b      	ldr	r2, [pc, #44]	@ (80117d4 <prvCheckTasksWaitingTermination+0x54>)
 80117a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80117a8:	4b0b      	ldr	r3, [pc, #44]	@ (80117d8 <prvCheckTasksWaitingTermination+0x58>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	3b01      	subs	r3, #1
 80117ae:	4a0a      	ldr	r2, [pc, #40]	@ (80117d8 <prvCheckTasksWaitingTermination+0x58>)
 80117b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80117b2:	f000 fbf3 	bl	8011f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f000 f810 	bl	80117dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117bc:	4b06      	ldr	r3, [pc, #24]	@ (80117d8 <prvCheckTasksWaitingTermination+0x58>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d1e1      	bne.n	8011788 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80117c4:	bf00      	nop
 80117c6:	bf00      	nop
 80117c8:	3708      	adds	r7, #8
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	20001030 	.word	0x20001030
 80117d4:	2000105c 	.word	0x2000105c
 80117d8:	20001044 	.word	0x20001044

080117dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	334c      	adds	r3, #76	@ 0x4c
 80117e8:	4618      	mov	r0, r3
 80117ea:	f001 fd6d 	bl	80132c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d108      	bne.n	801180a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117fc:	4618      	mov	r0, r3
 80117fe:	f000 fd91 	bl	8012324 <vPortFree>
				vPortFree( pxTCB );
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f000 fd8e 	bl	8012324 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011808:	e019      	b.n	801183e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011810:	2b01      	cmp	r3, #1
 8011812:	d103      	bne.n	801181c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f000 fd85 	bl	8012324 <vPortFree>
	}
 801181a:	e010      	b.n	801183e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011822:	2b02      	cmp	r3, #2
 8011824:	d00b      	beq.n	801183e <prvDeleteTCB+0x62>
	__asm volatile
 8011826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801182a:	f383 8811 	msr	BASEPRI, r3
 801182e:	f3bf 8f6f 	isb	sy
 8011832:	f3bf 8f4f 	dsb	sy
 8011836:	60fb      	str	r3, [r7, #12]
}
 8011838:	bf00      	nop
 801183a:	bf00      	nop
 801183c:	e7fd      	b.n	801183a <prvDeleteTCB+0x5e>
	}
 801183e:	bf00      	nop
 8011840:	3710      	adds	r7, #16
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
	...

08011848 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011848:	b480      	push	{r7}
 801184a:	b083      	sub	sp, #12
 801184c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801184e:	4b0c      	ldr	r3, [pc, #48]	@ (8011880 <prvResetNextTaskUnblockTime+0x38>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d104      	bne.n	8011862 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011858:	4b0a      	ldr	r3, [pc, #40]	@ (8011884 <prvResetNextTaskUnblockTime+0x3c>)
 801185a:	f04f 32ff 	mov.w	r2, #4294967295
 801185e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011860:	e008      	b.n	8011874 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011862:	4b07      	ldr	r3, [pc, #28]	@ (8011880 <prvResetNextTaskUnblockTime+0x38>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	68db      	ldr	r3, [r3, #12]
 801186a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	4a04      	ldr	r2, [pc, #16]	@ (8011884 <prvResetNextTaskUnblockTime+0x3c>)
 8011872:	6013      	str	r3, [r2, #0]
}
 8011874:	bf00      	nop
 8011876:	370c      	adds	r7, #12
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr
 8011880:	20001014 	.word	0x20001014
 8011884:	2000107c 	.word	0x2000107c

08011888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011888:	b480      	push	{r7}
 801188a:	b083      	sub	sp, #12
 801188c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801188e:	4b0b      	ldr	r3, [pc, #44]	@ (80118bc <xTaskGetSchedulerState+0x34>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d102      	bne.n	801189c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011896:	2301      	movs	r3, #1
 8011898:	607b      	str	r3, [r7, #4]
 801189a:	e008      	b.n	80118ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801189c:	4b08      	ldr	r3, [pc, #32]	@ (80118c0 <xTaskGetSchedulerState+0x38>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d102      	bne.n	80118aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80118a4:	2302      	movs	r3, #2
 80118a6:	607b      	str	r3, [r7, #4]
 80118a8:	e001      	b.n	80118ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80118aa:	2300      	movs	r3, #0
 80118ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80118ae:	687b      	ldr	r3, [r7, #4]
	}
 80118b0:	4618      	mov	r0, r3
 80118b2:	370c      	adds	r7, #12
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr
 80118bc:	20001068 	.word	0x20001068
 80118c0:	20001084 	.word	0x20001084

080118c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80118d0:	2300      	movs	r3, #0
 80118d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d05e      	beq.n	8011998 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118de:	4b31      	ldr	r3, [pc, #196]	@ (80119a4 <xTaskPriorityInherit+0xe0>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d24e      	bcs.n	8011986 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	699b      	ldr	r3, [r3, #24]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	db06      	blt.n	80118fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118f0:	4b2c      	ldr	r3, [pc, #176]	@ (80119a4 <xTaskPriorityInherit+0xe0>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118f6:	f1c3 0207 	rsb	r2, r3, #7
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	6959      	ldr	r1, [r3, #20]
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011906:	4613      	mov	r3, r2
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	4413      	add	r3, r2
 801190c:	009b      	lsls	r3, r3, #2
 801190e:	4a26      	ldr	r2, [pc, #152]	@ (80119a8 <xTaskPriorityInherit+0xe4>)
 8011910:	4413      	add	r3, r2
 8011912:	4299      	cmp	r1, r3
 8011914:	d12f      	bne.n	8011976 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	3304      	adds	r3, #4
 801191a:	4618      	mov	r0, r3
 801191c:	f7fe f920 	bl	800fb60 <uxListRemove>
 8011920:	4603      	mov	r3, r0
 8011922:	2b00      	cmp	r3, #0
 8011924:	d10a      	bne.n	801193c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801192a:	2201      	movs	r2, #1
 801192c:	fa02 f303 	lsl.w	r3, r2, r3
 8011930:	43da      	mvns	r2, r3
 8011932:	4b1e      	ldr	r3, [pc, #120]	@ (80119ac <xTaskPriorityInherit+0xe8>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	4013      	ands	r3, r2
 8011938:	4a1c      	ldr	r2, [pc, #112]	@ (80119ac <xTaskPriorityInherit+0xe8>)
 801193a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801193c:	4b19      	ldr	r3, [pc, #100]	@ (80119a4 <xTaskPriorityInherit+0xe0>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011942:	68bb      	ldr	r3, [r7, #8]
 8011944:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801194a:	2201      	movs	r2, #1
 801194c:	409a      	lsls	r2, r3
 801194e:	4b17      	ldr	r3, [pc, #92]	@ (80119ac <xTaskPriorityInherit+0xe8>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	4313      	orrs	r3, r2
 8011954:	4a15      	ldr	r2, [pc, #84]	@ (80119ac <xTaskPriorityInherit+0xe8>)
 8011956:	6013      	str	r3, [r2, #0]
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801195c:	4613      	mov	r3, r2
 801195e:	009b      	lsls	r3, r3, #2
 8011960:	4413      	add	r3, r2
 8011962:	009b      	lsls	r3, r3, #2
 8011964:	4a10      	ldr	r2, [pc, #64]	@ (80119a8 <xTaskPriorityInherit+0xe4>)
 8011966:	441a      	add	r2, r3
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	3304      	adds	r3, #4
 801196c:	4619      	mov	r1, r3
 801196e:	4610      	mov	r0, r2
 8011970:	f7fe f899 	bl	800faa6 <vListInsertEnd>
 8011974:	e004      	b.n	8011980 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011976:	4b0b      	ldr	r3, [pc, #44]	@ (80119a4 <xTaskPriorityInherit+0xe0>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011980:	2301      	movs	r3, #1
 8011982:	60fb      	str	r3, [r7, #12]
 8011984:	e008      	b.n	8011998 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801198a:	4b06      	ldr	r3, [pc, #24]	@ (80119a4 <xTaskPriorityInherit+0xe0>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011990:	429a      	cmp	r2, r3
 8011992:	d201      	bcs.n	8011998 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011994:	2301      	movs	r3, #1
 8011996:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011998:	68fb      	ldr	r3, [r7, #12]
	}
 801199a:	4618      	mov	r0, r3
 801199c:	3710      	adds	r7, #16
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	bf00      	nop
 80119a4:	20000f5c 	.word	0x20000f5c
 80119a8:	20000f60 	.word	0x20000f60
 80119ac:	20001064 	.word	0x20001064

080119b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b086      	sub	sp, #24
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80119bc:	2300      	movs	r3, #0
 80119be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d070      	beq.n	8011aa8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80119c6:	4b3b      	ldr	r3, [pc, #236]	@ (8011ab4 <xTaskPriorityDisinherit+0x104>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	693a      	ldr	r2, [r7, #16]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d00b      	beq.n	80119e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80119d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119d4:	f383 8811 	msr	BASEPRI, r3
 80119d8:	f3bf 8f6f 	isb	sy
 80119dc:	f3bf 8f4f 	dsb	sy
 80119e0:	60fb      	str	r3, [r7, #12]
}
 80119e2:	bf00      	nop
 80119e4:	bf00      	nop
 80119e6:	e7fd      	b.n	80119e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d10b      	bne.n	8011a08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80119f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119f4:	f383 8811 	msr	BASEPRI, r3
 80119f8:	f3bf 8f6f 	isb	sy
 80119fc:	f3bf 8f4f 	dsb	sy
 8011a00:	60bb      	str	r3, [r7, #8]
}
 8011a02:	bf00      	nop
 8011a04:	bf00      	nop
 8011a06:	e7fd      	b.n	8011a04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a0c:	1e5a      	subs	r2, r3, #1
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011a12:	693b      	ldr	r3, [r7, #16]
 8011a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d044      	beq.n	8011aa8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d140      	bne.n	8011aa8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	3304      	adds	r3, #4
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7fe f898 	bl	800fb60 <uxListRemove>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d115      	bne.n	8011a62 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a3a:	491f      	ldr	r1, [pc, #124]	@ (8011ab8 <xTaskPriorityDisinherit+0x108>)
 8011a3c:	4613      	mov	r3, r2
 8011a3e:	009b      	lsls	r3, r3, #2
 8011a40:	4413      	add	r3, r2
 8011a42:	009b      	lsls	r3, r3, #2
 8011a44:	440b      	add	r3, r1
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d10a      	bne.n	8011a62 <xTaskPriorityDisinherit+0xb2>
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a50:	2201      	movs	r2, #1
 8011a52:	fa02 f303 	lsl.w	r3, r2, r3
 8011a56:	43da      	mvns	r2, r3
 8011a58:	4b18      	ldr	r3, [pc, #96]	@ (8011abc <xTaskPriorityDisinherit+0x10c>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	4013      	ands	r3, r2
 8011a5e:	4a17      	ldr	r2, [pc, #92]	@ (8011abc <xTaskPriorityDisinherit+0x10c>)
 8011a60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a6e:	f1c3 0207 	rsb	r2, r3, #7
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	409a      	lsls	r2, r3
 8011a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8011abc <xTaskPriorityDisinherit+0x10c>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4313      	orrs	r3, r2
 8011a84:	4a0d      	ldr	r2, [pc, #52]	@ (8011abc <xTaskPriorityDisinherit+0x10c>)
 8011a86:	6013      	str	r3, [r2, #0]
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a8c:	4613      	mov	r3, r2
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	4413      	add	r3, r2
 8011a92:	009b      	lsls	r3, r3, #2
 8011a94:	4a08      	ldr	r2, [pc, #32]	@ (8011ab8 <xTaskPriorityDisinherit+0x108>)
 8011a96:	441a      	add	r2, r3
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	4610      	mov	r0, r2
 8011aa0:	f7fe f801 	bl	800faa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011aa8:	697b      	ldr	r3, [r7, #20]
	}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3718      	adds	r7, #24
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	20000f5c 	.word	0x20000f5c
 8011ab8:	20000f60 	.word	0x20000f60
 8011abc:	20001064 	.word	0x20001064

08011ac0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b088      	sub	sp, #32
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011ace:	2301      	movs	r3, #1
 8011ad0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d079      	beq.n	8011bcc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011ad8:	69bb      	ldr	r3, [r7, #24]
 8011ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d10b      	bne.n	8011af8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ae4:	f383 8811 	msr	BASEPRI, r3
 8011ae8:	f3bf 8f6f 	isb	sy
 8011aec:	f3bf 8f4f 	dsb	sy
 8011af0:	60fb      	str	r3, [r7, #12]
}
 8011af2:	bf00      	nop
 8011af4:	bf00      	nop
 8011af6:	e7fd      	b.n	8011af4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011af8:	69bb      	ldr	r3, [r7, #24]
 8011afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011afc:	683a      	ldr	r2, [r7, #0]
 8011afe:	429a      	cmp	r2, r3
 8011b00:	d902      	bls.n	8011b08 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	61fb      	str	r3, [r7, #28]
 8011b06:	e002      	b.n	8011b0e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011b08:	69bb      	ldr	r3, [r7, #24]
 8011b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b0c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b12:	69fa      	ldr	r2, [r7, #28]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d059      	beq.n	8011bcc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b1c:	697a      	ldr	r2, [r7, #20]
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d154      	bne.n	8011bcc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011b22:	4b2c      	ldr	r3, [pc, #176]	@ (8011bd4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	69ba      	ldr	r2, [r7, #24]
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	d10b      	bne.n	8011b44 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b30:	f383 8811 	msr	BASEPRI, r3
 8011b34:	f3bf 8f6f 	isb	sy
 8011b38:	f3bf 8f4f 	dsb	sy
 8011b3c:	60bb      	str	r3, [r7, #8]
}
 8011b3e:	bf00      	nop
 8011b40:	bf00      	nop
 8011b42:	e7fd      	b.n	8011b40 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011b44:	69bb      	ldr	r3, [r7, #24]
 8011b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	69fa      	ldr	r2, [r7, #28]
 8011b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	699b      	ldr	r3, [r3, #24]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	db04      	blt.n	8011b62 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	f1c3 0207 	rsb	r2, r3, #7
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011b62:	69bb      	ldr	r3, [r7, #24]
 8011b64:	6959      	ldr	r1, [r3, #20]
 8011b66:	693a      	ldr	r2, [r7, #16]
 8011b68:	4613      	mov	r3, r2
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	4413      	add	r3, r2
 8011b6e:	009b      	lsls	r3, r3, #2
 8011b70:	4a19      	ldr	r2, [pc, #100]	@ (8011bd8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011b72:	4413      	add	r3, r2
 8011b74:	4299      	cmp	r1, r3
 8011b76:	d129      	bne.n	8011bcc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b78:	69bb      	ldr	r3, [r7, #24]
 8011b7a:	3304      	adds	r3, #4
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7fd ffef 	bl	800fb60 <uxListRemove>
 8011b82:	4603      	mov	r3, r0
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d10a      	bne.n	8011b9e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b8c:	2201      	movs	r2, #1
 8011b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b92:	43da      	mvns	r2, r3
 8011b94:	4b11      	ldr	r3, [pc, #68]	@ (8011bdc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	4013      	ands	r3, r2
 8011b9a:	4a10      	ldr	r2, [pc, #64]	@ (8011bdc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011b9c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011b9e:	69bb      	ldr	r3, [r7, #24]
 8011ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	409a      	lsls	r2, r3
 8011ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8011bdc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	4313      	orrs	r3, r2
 8011bac:	4a0b      	ldr	r2, [pc, #44]	@ (8011bdc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011bae:	6013      	str	r3, [r2, #0]
 8011bb0:	69bb      	ldr	r3, [r7, #24]
 8011bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011bb4:	4613      	mov	r3, r2
 8011bb6:	009b      	lsls	r3, r3, #2
 8011bb8:	4413      	add	r3, r2
 8011bba:	009b      	lsls	r3, r3, #2
 8011bbc:	4a06      	ldr	r2, [pc, #24]	@ (8011bd8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011bbe:	441a      	add	r2, r3
 8011bc0:	69bb      	ldr	r3, [r7, #24]
 8011bc2:	3304      	adds	r3, #4
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	4610      	mov	r0, r2
 8011bc8:	f7fd ff6d 	bl	800faa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011bcc:	bf00      	nop
 8011bce:	3720      	adds	r7, #32
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	20000f5c 	.word	0x20000f5c
 8011bd8:	20000f60 	.word	0x20000f60
 8011bdc:	20001064 	.word	0x20001064

08011be0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011be0:	b480      	push	{r7}
 8011be2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011be4:	4b07      	ldr	r3, [pc, #28]	@ (8011c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d004      	beq.n	8011bf6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011bec:	4b05      	ldr	r3, [pc, #20]	@ (8011c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011bf2:	3201      	adds	r2, #1
 8011bf4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8011bf6:	4b03      	ldr	r3, [pc, #12]	@ (8011c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
	}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c02:	4770      	bx	lr
 8011c04:	20000f5c 	.word	0x20000f5c

08011c08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b084      	sub	sp, #16
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011c12:	4b29      	ldr	r3, [pc, #164]	@ (8011cb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c18:	4b28      	ldr	r3, [pc, #160]	@ (8011cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	3304      	adds	r3, #4
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fd ff9e 	bl	800fb60 <uxListRemove>
 8011c24:	4603      	mov	r3, r0
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d10b      	bne.n	8011c42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011c2a:	4b24      	ldr	r3, [pc, #144]	@ (8011cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c30:	2201      	movs	r2, #1
 8011c32:	fa02 f303 	lsl.w	r3, r2, r3
 8011c36:	43da      	mvns	r2, r3
 8011c38:	4b21      	ldr	r3, [pc, #132]	@ (8011cc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	4013      	ands	r3, r2
 8011c3e:	4a20      	ldr	r2, [pc, #128]	@ (8011cc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011c40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c48:	d10a      	bne.n	8011c60 <prvAddCurrentTaskToDelayedList+0x58>
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d007      	beq.n	8011c60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c50:	4b1a      	ldr	r3, [pc, #104]	@ (8011cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	3304      	adds	r3, #4
 8011c56:	4619      	mov	r1, r3
 8011c58:	481a      	ldr	r0, [pc, #104]	@ (8011cc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011c5a:	f7fd ff24 	bl	800faa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011c5e:	e026      	b.n	8011cae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011c60:	68fa      	ldr	r2, [r7, #12]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4413      	add	r3, r2
 8011c66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011c68:	4b14      	ldr	r3, [pc, #80]	@ (8011cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	68ba      	ldr	r2, [r7, #8]
 8011c6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011c70:	68ba      	ldr	r2, [r7, #8]
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d209      	bcs.n	8011c8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c78:	4b13      	ldr	r3, [pc, #76]	@ (8011cc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011c7a:	681a      	ldr	r2, [r3, #0]
 8011c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8011cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	3304      	adds	r3, #4
 8011c82:	4619      	mov	r1, r3
 8011c84:	4610      	mov	r0, r2
 8011c86:	f7fd ff32 	bl	800faee <vListInsert>
}
 8011c8a:	e010      	b.n	8011cae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8011ccc <prvAddCurrentTaskToDelayedList+0xc4>)
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	4b0a      	ldr	r3, [pc, #40]	@ (8011cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	3304      	adds	r3, #4
 8011c96:	4619      	mov	r1, r3
 8011c98:	4610      	mov	r0, r2
 8011c9a:	f7fd ff28 	bl	800faee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8011cd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	68ba      	ldr	r2, [r7, #8]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d202      	bcs.n	8011cae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011ca8:	4a09      	ldr	r2, [pc, #36]	@ (8011cd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	6013      	str	r3, [r2, #0]
}
 8011cae:	bf00      	nop
 8011cb0:	3710      	adds	r7, #16
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	20001060 	.word	0x20001060
 8011cbc:	20000f5c 	.word	0x20000f5c
 8011cc0:	20001064 	.word	0x20001064
 8011cc4:	20001048 	.word	0x20001048
 8011cc8:	20001018 	.word	0x20001018
 8011ccc:	20001014 	.word	0x20001014
 8011cd0:	2000107c 	.word	0x2000107c

08011cd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	b085      	sub	sp, #20
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	3b04      	subs	r3, #4
 8011ce4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	3b04      	subs	r3, #4
 8011cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	f023 0201 	bic.w	r2, r3, #1
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	3b04      	subs	r3, #4
 8011d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011d04:	4a0c      	ldr	r2, [pc, #48]	@ (8011d38 <pxPortInitialiseStack+0x64>)
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	3b14      	subs	r3, #20
 8011d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	3b04      	subs	r3, #4
 8011d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	f06f 0202 	mvn.w	r2, #2
 8011d22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	3b20      	subs	r3, #32
 8011d28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3714      	adds	r7, #20
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr
 8011d38:	08011d3d 	.word	0x08011d3d

08011d3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b085      	sub	sp, #20
 8011d40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011d46:	4b13      	ldr	r3, [pc, #76]	@ (8011d94 <prvTaskExitError+0x58>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d4e:	d00b      	beq.n	8011d68 <prvTaskExitError+0x2c>
	__asm volatile
 8011d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d54:	f383 8811 	msr	BASEPRI, r3
 8011d58:	f3bf 8f6f 	isb	sy
 8011d5c:	f3bf 8f4f 	dsb	sy
 8011d60:	60fb      	str	r3, [r7, #12]
}
 8011d62:	bf00      	nop
 8011d64:	bf00      	nop
 8011d66:	e7fd      	b.n	8011d64 <prvTaskExitError+0x28>
	__asm volatile
 8011d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d6c:	f383 8811 	msr	BASEPRI, r3
 8011d70:	f3bf 8f6f 	isb	sy
 8011d74:	f3bf 8f4f 	dsb	sy
 8011d78:	60bb      	str	r3, [r7, #8]
}
 8011d7a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011d7c:	bf00      	nop
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d0fc      	beq.n	8011d7e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011d84:	bf00      	nop
 8011d86:	bf00      	nop
 8011d88:	3714      	adds	r7, #20
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d90:	4770      	bx	lr
 8011d92:	bf00      	nop
 8011d94:	2000000c 	.word	0x2000000c
	...

08011da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011da0:	4b07      	ldr	r3, [pc, #28]	@ (8011dc0 <pxCurrentTCBConst2>)
 8011da2:	6819      	ldr	r1, [r3, #0]
 8011da4:	6808      	ldr	r0, [r1, #0]
 8011da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011daa:	f380 8809 	msr	PSP, r0
 8011dae:	f3bf 8f6f 	isb	sy
 8011db2:	f04f 0000 	mov.w	r0, #0
 8011db6:	f380 8811 	msr	BASEPRI, r0
 8011dba:	4770      	bx	lr
 8011dbc:	f3af 8000 	nop.w

08011dc0 <pxCurrentTCBConst2>:
 8011dc0:	20000f5c 	.word	0x20000f5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011dc4:	bf00      	nop
 8011dc6:	bf00      	nop

08011dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011dc8:	4808      	ldr	r0, [pc, #32]	@ (8011dec <prvPortStartFirstTask+0x24>)
 8011dca:	6800      	ldr	r0, [r0, #0]
 8011dcc:	6800      	ldr	r0, [r0, #0]
 8011dce:	f380 8808 	msr	MSP, r0
 8011dd2:	f04f 0000 	mov.w	r0, #0
 8011dd6:	f380 8814 	msr	CONTROL, r0
 8011dda:	b662      	cpsie	i
 8011ddc:	b661      	cpsie	f
 8011dde:	f3bf 8f4f 	dsb	sy
 8011de2:	f3bf 8f6f 	isb	sy
 8011de6:	df00      	svc	0
 8011de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011dea:	bf00      	nop
 8011dec:	e000ed08 	.word	0xe000ed08

08011df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b086      	sub	sp, #24
 8011df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011df6:	4b47      	ldr	r3, [pc, #284]	@ (8011f14 <xPortStartScheduler+0x124>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	4a47      	ldr	r2, [pc, #284]	@ (8011f18 <xPortStartScheduler+0x128>)
 8011dfc:	4293      	cmp	r3, r2
 8011dfe:	d10b      	bne.n	8011e18 <xPortStartScheduler+0x28>
	__asm volatile
 8011e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e04:	f383 8811 	msr	BASEPRI, r3
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	60fb      	str	r3, [r7, #12]
}
 8011e12:	bf00      	nop
 8011e14:	bf00      	nop
 8011e16:	e7fd      	b.n	8011e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011e18:	4b3e      	ldr	r3, [pc, #248]	@ (8011f14 <xPortStartScheduler+0x124>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8011f1c <xPortStartScheduler+0x12c>)
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d10b      	bne.n	8011e3a <xPortStartScheduler+0x4a>
	__asm volatile
 8011e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e26:	f383 8811 	msr	BASEPRI, r3
 8011e2a:	f3bf 8f6f 	isb	sy
 8011e2e:	f3bf 8f4f 	dsb	sy
 8011e32:	613b      	str	r3, [r7, #16]
}
 8011e34:	bf00      	nop
 8011e36:	bf00      	nop
 8011e38:	e7fd      	b.n	8011e36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011e3a:	4b39      	ldr	r3, [pc, #228]	@ (8011f20 <xPortStartScheduler+0x130>)
 8011e3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	22ff      	movs	r2, #255	@ 0xff
 8011e4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	b2db      	uxtb	r3, r3
 8011e52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011e54:	78fb      	ldrb	r3, [r7, #3]
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011e5c:	b2da      	uxtb	r2, r3
 8011e5e:	4b31      	ldr	r3, [pc, #196]	@ (8011f24 <xPortStartScheduler+0x134>)
 8011e60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011e62:	4b31      	ldr	r3, [pc, #196]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011e64:	2207      	movs	r2, #7
 8011e66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e68:	e009      	b.n	8011e7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8011e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	3b01      	subs	r3, #1
 8011e70:	4a2d      	ldr	r2, [pc, #180]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011e72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011e74:	78fb      	ldrb	r3, [r7, #3]
 8011e76:	b2db      	uxtb	r3, r3
 8011e78:	005b      	lsls	r3, r3, #1
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e7e:	78fb      	ldrb	r3, [r7, #3]
 8011e80:	b2db      	uxtb	r3, r3
 8011e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e86:	2b80      	cmp	r3, #128	@ 0x80
 8011e88:	d0ef      	beq.n	8011e6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011e8a:	4b27      	ldr	r3, [pc, #156]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f1c3 0307 	rsb	r3, r3, #7
 8011e92:	2b04      	cmp	r3, #4
 8011e94:	d00b      	beq.n	8011eae <xPortStartScheduler+0xbe>
	__asm volatile
 8011e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e9a:	f383 8811 	msr	BASEPRI, r3
 8011e9e:	f3bf 8f6f 	isb	sy
 8011ea2:	f3bf 8f4f 	dsb	sy
 8011ea6:	60bb      	str	r3, [r7, #8]
}
 8011ea8:	bf00      	nop
 8011eaa:	bf00      	nop
 8011eac:	e7fd      	b.n	8011eaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011eae:	4b1e      	ldr	r3, [pc, #120]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	021b      	lsls	r3, r3, #8
 8011eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011eb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011ec0:	4a19      	ldr	r2, [pc, #100]	@ (8011f28 <xPortStartScheduler+0x138>)
 8011ec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	b2da      	uxtb	r2, r3
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011ecc:	4b17      	ldr	r3, [pc, #92]	@ (8011f2c <xPortStartScheduler+0x13c>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	4a16      	ldr	r2, [pc, #88]	@ (8011f2c <xPortStartScheduler+0x13c>)
 8011ed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011ed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011ed8:	4b14      	ldr	r3, [pc, #80]	@ (8011f2c <xPortStartScheduler+0x13c>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	4a13      	ldr	r2, [pc, #76]	@ (8011f2c <xPortStartScheduler+0x13c>)
 8011ede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011ee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011ee4:	f000 f8da 	bl	801209c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011ee8:	4b11      	ldr	r3, [pc, #68]	@ (8011f30 <xPortStartScheduler+0x140>)
 8011eea:	2200      	movs	r2, #0
 8011eec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011eee:	f000 f8f9 	bl	80120e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011ef2:	4b10      	ldr	r3, [pc, #64]	@ (8011f34 <xPortStartScheduler+0x144>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8011f34 <xPortStartScheduler+0x144>)
 8011ef8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011efc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011efe:	f7ff ff63 	bl	8011dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011f02:	f7ff fa6f 	bl	80113e4 <vTaskSwitchContext>
	prvTaskExitError();
 8011f06:	f7ff ff19 	bl	8011d3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011f0a:	2300      	movs	r3, #0
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3718      	adds	r7, #24
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}
 8011f14:	e000ed00 	.word	0xe000ed00
 8011f18:	410fc271 	.word	0x410fc271
 8011f1c:	410fc270 	.word	0x410fc270
 8011f20:	e000e400 	.word	0xe000e400
 8011f24:	20001088 	.word	0x20001088
 8011f28:	2000108c 	.word	0x2000108c
 8011f2c:	e000ed20 	.word	0xe000ed20
 8011f30:	2000000c 	.word	0x2000000c
 8011f34:	e000ef34 	.word	0xe000ef34

08011f38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8011f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f42:	f383 8811 	msr	BASEPRI, r3
 8011f46:	f3bf 8f6f 	isb	sy
 8011f4a:	f3bf 8f4f 	dsb	sy
 8011f4e:	607b      	str	r3, [r7, #4]
}
 8011f50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011f52:	4b10      	ldr	r3, [pc, #64]	@ (8011f94 <vPortEnterCritical+0x5c>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	3301      	adds	r3, #1
 8011f58:	4a0e      	ldr	r2, [pc, #56]	@ (8011f94 <vPortEnterCritical+0x5c>)
 8011f5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8011f94 <vPortEnterCritical+0x5c>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	2b01      	cmp	r3, #1
 8011f62:	d110      	bne.n	8011f86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011f64:	4b0c      	ldr	r3, [pc, #48]	@ (8011f98 <vPortEnterCritical+0x60>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d00b      	beq.n	8011f86 <vPortEnterCritical+0x4e>
	__asm volatile
 8011f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f72:	f383 8811 	msr	BASEPRI, r3
 8011f76:	f3bf 8f6f 	isb	sy
 8011f7a:	f3bf 8f4f 	dsb	sy
 8011f7e:	603b      	str	r3, [r7, #0]
}
 8011f80:	bf00      	nop
 8011f82:	bf00      	nop
 8011f84:	e7fd      	b.n	8011f82 <vPortEnterCritical+0x4a>
	}
}
 8011f86:	bf00      	nop
 8011f88:	370c      	adds	r7, #12
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f90:	4770      	bx	lr
 8011f92:	bf00      	nop
 8011f94:	2000000c 	.word	0x2000000c
 8011f98:	e000ed04 	.word	0xe000ed04

08011f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b083      	sub	sp, #12
 8011fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011fa2:	4b12      	ldr	r3, [pc, #72]	@ (8011fec <vPortExitCritical+0x50>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d10b      	bne.n	8011fc2 <vPortExitCritical+0x26>
	__asm volatile
 8011faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fae:	f383 8811 	msr	BASEPRI, r3
 8011fb2:	f3bf 8f6f 	isb	sy
 8011fb6:	f3bf 8f4f 	dsb	sy
 8011fba:	607b      	str	r3, [r7, #4]
}
 8011fbc:	bf00      	nop
 8011fbe:	bf00      	nop
 8011fc0:	e7fd      	b.n	8011fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8011fec <vPortExitCritical+0x50>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	3b01      	subs	r3, #1
 8011fc8:	4a08      	ldr	r2, [pc, #32]	@ (8011fec <vPortExitCritical+0x50>)
 8011fca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011fcc:	4b07      	ldr	r3, [pc, #28]	@ (8011fec <vPortExitCritical+0x50>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d105      	bne.n	8011fe0 <vPortExitCritical+0x44>
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	f383 8811 	msr	BASEPRI, r3
}
 8011fde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011fe0:	bf00      	nop
 8011fe2:	370c      	adds	r7, #12
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr
 8011fec:	2000000c 	.word	0x2000000c

08011ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ff0:	f3ef 8009 	mrs	r0, PSP
 8011ff4:	f3bf 8f6f 	isb	sy
 8011ff8:	4b15      	ldr	r3, [pc, #84]	@ (8012050 <pxCurrentTCBConst>)
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	f01e 0f10 	tst.w	lr, #16
 8012000:	bf08      	it	eq
 8012002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200a:	6010      	str	r0, [r2, #0]
 801200c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012014:	f380 8811 	msr	BASEPRI, r0
 8012018:	f3bf 8f4f 	dsb	sy
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f7ff f9e0 	bl	80113e4 <vTaskSwitchContext>
 8012024:	f04f 0000 	mov.w	r0, #0
 8012028:	f380 8811 	msr	BASEPRI, r0
 801202c:	bc09      	pop	{r0, r3}
 801202e:	6819      	ldr	r1, [r3, #0]
 8012030:	6808      	ldr	r0, [r1, #0]
 8012032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012036:	f01e 0f10 	tst.w	lr, #16
 801203a:	bf08      	it	eq
 801203c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012040:	f380 8809 	msr	PSP, r0
 8012044:	f3bf 8f6f 	isb	sy
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop
 801204c:	f3af 8000 	nop.w

08012050 <pxCurrentTCBConst>:
 8012050:	20000f5c 	.word	0x20000f5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012054:	bf00      	nop
 8012056:	bf00      	nop

08012058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
	__asm volatile
 801205e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012062:	f383 8811 	msr	BASEPRI, r3
 8012066:	f3bf 8f6f 	isb	sy
 801206a:	f3bf 8f4f 	dsb	sy
 801206e:	607b      	str	r3, [r7, #4]
}
 8012070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012072:	f7ff f8f5 	bl	8011260 <xTaskIncrementTick>
 8012076:	4603      	mov	r3, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d003      	beq.n	8012084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801207c:	4b06      	ldr	r3, [pc, #24]	@ (8012098 <SysTick_Handler+0x40>)
 801207e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012082:	601a      	str	r2, [r3, #0]
 8012084:	2300      	movs	r3, #0
 8012086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	f383 8811 	msr	BASEPRI, r3
}
 801208e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012090:	bf00      	nop
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	e000ed04 	.word	0xe000ed04

0801209c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801209c:	b480      	push	{r7}
 801209e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80120a0:	4b0b      	ldr	r3, [pc, #44]	@ (80120d0 <vPortSetupTimerInterrupt+0x34>)
 80120a2:	2200      	movs	r2, #0
 80120a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80120a6:	4b0b      	ldr	r3, [pc, #44]	@ (80120d4 <vPortSetupTimerInterrupt+0x38>)
 80120a8:	2200      	movs	r2, #0
 80120aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80120ac:	4b0a      	ldr	r3, [pc, #40]	@ (80120d8 <vPortSetupTimerInterrupt+0x3c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	4a0a      	ldr	r2, [pc, #40]	@ (80120dc <vPortSetupTimerInterrupt+0x40>)
 80120b2:	fba2 2303 	umull	r2, r3, r2, r3
 80120b6:	099b      	lsrs	r3, r3, #6
 80120b8:	4a09      	ldr	r2, [pc, #36]	@ (80120e0 <vPortSetupTimerInterrupt+0x44>)
 80120ba:	3b01      	subs	r3, #1
 80120bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80120be:	4b04      	ldr	r3, [pc, #16]	@ (80120d0 <vPortSetupTimerInterrupt+0x34>)
 80120c0:	2207      	movs	r2, #7
 80120c2:	601a      	str	r2, [r3, #0]
}
 80120c4:	bf00      	nop
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop
 80120d0:	e000e010 	.word	0xe000e010
 80120d4:	e000e018 	.word	0xe000e018
 80120d8:	20000000 	.word	0x20000000
 80120dc:	10624dd3 	.word	0x10624dd3
 80120e0:	e000e014 	.word	0xe000e014

080120e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80120e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80120f4 <vPortEnableVFP+0x10>
 80120e8:	6801      	ldr	r1, [r0, #0]
 80120ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80120ee:	6001      	str	r1, [r0, #0]
 80120f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80120f2:	bf00      	nop
 80120f4:	e000ed88 	.word	0xe000ed88

080120f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80120f8:	b480      	push	{r7}
 80120fa:	b085      	sub	sp, #20
 80120fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80120fe:	f3ef 8305 	mrs	r3, IPSR
 8012102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2b0f      	cmp	r3, #15
 8012108:	d915      	bls.n	8012136 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801210a:	4a18      	ldr	r2, [pc, #96]	@ (801216c <vPortValidateInterruptPriority+0x74>)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	4413      	add	r3, r2
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012114:	4b16      	ldr	r3, [pc, #88]	@ (8012170 <vPortValidateInterruptPriority+0x78>)
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	7afa      	ldrb	r2, [r7, #11]
 801211a:	429a      	cmp	r2, r3
 801211c:	d20b      	bcs.n	8012136 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801211e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012122:	f383 8811 	msr	BASEPRI, r3
 8012126:	f3bf 8f6f 	isb	sy
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	607b      	str	r3, [r7, #4]
}
 8012130:	bf00      	nop
 8012132:	bf00      	nop
 8012134:	e7fd      	b.n	8012132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012136:	4b0f      	ldr	r3, [pc, #60]	@ (8012174 <vPortValidateInterruptPriority+0x7c>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801213e:	4b0e      	ldr	r3, [pc, #56]	@ (8012178 <vPortValidateInterruptPriority+0x80>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	429a      	cmp	r2, r3
 8012144:	d90b      	bls.n	801215e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801214a:	f383 8811 	msr	BASEPRI, r3
 801214e:	f3bf 8f6f 	isb	sy
 8012152:	f3bf 8f4f 	dsb	sy
 8012156:	603b      	str	r3, [r7, #0]
}
 8012158:	bf00      	nop
 801215a:	bf00      	nop
 801215c:	e7fd      	b.n	801215a <vPortValidateInterruptPriority+0x62>
	}
 801215e:	bf00      	nop
 8012160:	3714      	adds	r7, #20
 8012162:	46bd      	mov	sp, r7
 8012164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012168:	4770      	bx	lr
 801216a:	bf00      	nop
 801216c:	e000e3f0 	.word	0xe000e3f0
 8012170:	20001088 	.word	0x20001088
 8012174:	e000ed0c 	.word	0xe000ed0c
 8012178:	2000108c 	.word	0x2000108c

0801217c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b08a      	sub	sp, #40	@ 0x28
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012184:	2300      	movs	r3, #0
 8012186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012188:	f7fe ff9c 	bl	80110c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801218c:	4b5f      	ldr	r3, [pc, #380]	@ (801230c <pvPortMalloc+0x190>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d101      	bne.n	8012198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012194:	f000 f92a 	bl	80123ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012198:	4b5d      	ldr	r3, [pc, #372]	@ (8012310 <pvPortMalloc+0x194>)
 801219a:	681a      	ldr	r2, [r3, #0]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	4013      	ands	r3, r2
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f040 8095 	bne.w	80122d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d01e      	beq.n	80121ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80121ac:	2208      	movs	r2, #8
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	4413      	add	r3, r2
 80121b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f003 0307 	and.w	r3, r3, #7
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d015      	beq.n	80121ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f023 0307 	bic.w	r3, r3, #7
 80121c4:	3308      	adds	r3, #8
 80121c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f003 0307 	and.w	r3, r3, #7
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d00b      	beq.n	80121ea <pvPortMalloc+0x6e>
	__asm volatile
 80121d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121d6:	f383 8811 	msr	BASEPRI, r3
 80121da:	f3bf 8f6f 	isb	sy
 80121de:	f3bf 8f4f 	dsb	sy
 80121e2:	617b      	str	r3, [r7, #20]
}
 80121e4:	bf00      	nop
 80121e6:	bf00      	nop
 80121e8:	e7fd      	b.n	80121e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d06f      	beq.n	80122d0 <pvPortMalloc+0x154>
 80121f0:	4b48      	ldr	r3, [pc, #288]	@ (8012314 <pvPortMalloc+0x198>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d86a      	bhi.n	80122d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80121fa:	4b47      	ldr	r3, [pc, #284]	@ (8012318 <pvPortMalloc+0x19c>)
 80121fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80121fe:	4b46      	ldr	r3, [pc, #280]	@ (8012318 <pvPortMalloc+0x19c>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012204:	e004      	b.n	8012210 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	429a      	cmp	r2, r3
 8012218:	d903      	bls.n	8012222 <pvPortMalloc+0xa6>
 801221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1f1      	bne.n	8012206 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012222:	4b3a      	ldr	r3, [pc, #232]	@ (801230c <pvPortMalloc+0x190>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012228:	429a      	cmp	r2, r3
 801222a:	d051      	beq.n	80122d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801222c:	6a3b      	ldr	r3, [r7, #32]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2208      	movs	r2, #8
 8012232:	4413      	add	r3, r2
 8012234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	6a3b      	ldr	r3, [r7, #32]
 801223c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012240:	685a      	ldr	r2, [r3, #4]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	1ad2      	subs	r2, r2, r3
 8012246:	2308      	movs	r3, #8
 8012248:	005b      	lsls	r3, r3, #1
 801224a:	429a      	cmp	r2, r3
 801224c:	d920      	bls.n	8012290 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801224e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	4413      	add	r3, r2
 8012254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012256:	69bb      	ldr	r3, [r7, #24]
 8012258:	f003 0307 	and.w	r3, r3, #7
 801225c:	2b00      	cmp	r3, #0
 801225e:	d00b      	beq.n	8012278 <pvPortMalloc+0xfc>
	__asm volatile
 8012260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012264:	f383 8811 	msr	BASEPRI, r3
 8012268:	f3bf 8f6f 	isb	sy
 801226c:	f3bf 8f4f 	dsb	sy
 8012270:	613b      	str	r3, [r7, #16]
}
 8012272:	bf00      	nop
 8012274:	bf00      	nop
 8012276:	e7fd      	b.n	8012274 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801227a:	685a      	ldr	r2, [r3, #4]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	1ad2      	subs	r2, r2, r3
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801228a:	69b8      	ldr	r0, [r7, #24]
 801228c:	f000 f910 	bl	80124b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012290:	4b20      	ldr	r3, [pc, #128]	@ (8012314 <pvPortMalloc+0x198>)
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	1ad3      	subs	r3, r2, r3
 801229a:	4a1e      	ldr	r2, [pc, #120]	@ (8012314 <pvPortMalloc+0x198>)
 801229c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801229e:	4b1d      	ldr	r3, [pc, #116]	@ (8012314 <pvPortMalloc+0x198>)
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	4b1e      	ldr	r3, [pc, #120]	@ (801231c <pvPortMalloc+0x1a0>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d203      	bcs.n	80122b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80122aa:	4b1a      	ldr	r3, [pc, #104]	@ (8012314 <pvPortMalloc+0x198>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	4a1b      	ldr	r2, [pc, #108]	@ (801231c <pvPortMalloc+0x1a0>)
 80122b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80122b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b4:	685a      	ldr	r2, [r3, #4]
 80122b6:	4b16      	ldr	r3, [pc, #88]	@ (8012310 <pvPortMalloc+0x194>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	431a      	orrs	r2, r3
 80122bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80122c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c2:	2200      	movs	r2, #0
 80122c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80122c6:	4b16      	ldr	r3, [pc, #88]	@ (8012320 <pvPortMalloc+0x1a4>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	3301      	adds	r3, #1
 80122cc:	4a14      	ldr	r2, [pc, #80]	@ (8012320 <pvPortMalloc+0x1a4>)
 80122ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80122d0:	f7fe ff06 	bl	80110e0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80122d4:	69fb      	ldr	r3, [r7, #28]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d101      	bne.n	80122de <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80122da:	f7f0 fe8d 	bl	8002ff8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80122de:	69fb      	ldr	r3, [r7, #28]
 80122e0:	f003 0307 	and.w	r3, r3, #7
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d00b      	beq.n	8012300 <pvPortMalloc+0x184>
	__asm volatile
 80122e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122ec:	f383 8811 	msr	BASEPRI, r3
 80122f0:	f3bf 8f6f 	isb	sy
 80122f4:	f3bf 8f4f 	dsb	sy
 80122f8:	60fb      	str	r3, [r7, #12]
}
 80122fa:	bf00      	nop
 80122fc:	bf00      	nop
 80122fe:	e7fd      	b.n	80122fc <pvPortMalloc+0x180>
	return pvReturn;
 8012300:	69fb      	ldr	r3, [r7, #28]
}
 8012302:	4618      	mov	r0, r3
 8012304:	3728      	adds	r7, #40	@ 0x28
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop
 801230c:	20004c98 	.word	0x20004c98
 8012310:	20004cac 	.word	0x20004cac
 8012314:	20004c9c 	.word	0x20004c9c
 8012318:	20004c90 	.word	0x20004c90
 801231c:	20004ca0 	.word	0x20004ca0
 8012320:	20004ca4 	.word	0x20004ca4

08012324 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b086      	sub	sp, #24
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d04f      	beq.n	80123d6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012336:	2308      	movs	r3, #8
 8012338:	425b      	negs	r3, r3
 801233a:	697a      	ldr	r2, [r7, #20]
 801233c:	4413      	add	r3, r2
 801233e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	685a      	ldr	r2, [r3, #4]
 8012348:	4b25      	ldr	r3, [pc, #148]	@ (80123e0 <vPortFree+0xbc>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	4013      	ands	r3, r2
 801234e:	2b00      	cmp	r3, #0
 8012350:	d10b      	bne.n	801236a <vPortFree+0x46>
	__asm volatile
 8012352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012356:	f383 8811 	msr	BASEPRI, r3
 801235a:	f3bf 8f6f 	isb	sy
 801235e:	f3bf 8f4f 	dsb	sy
 8012362:	60fb      	str	r3, [r7, #12]
}
 8012364:	bf00      	nop
 8012366:	bf00      	nop
 8012368:	e7fd      	b.n	8012366 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d00b      	beq.n	801238a <vPortFree+0x66>
	__asm volatile
 8012372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012376:	f383 8811 	msr	BASEPRI, r3
 801237a:	f3bf 8f6f 	isb	sy
 801237e:	f3bf 8f4f 	dsb	sy
 8012382:	60bb      	str	r3, [r7, #8]
}
 8012384:	bf00      	nop
 8012386:	bf00      	nop
 8012388:	e7fd      	b.n	8012386 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	685a      	ldr	r2, [r3, #4]
 801238e:	4b14      	ldr	r3, [pc, #80]	@ (80123e0 <vPortFree+0xbc>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	4013      	ands	r3, r2
 8012394:	2b00      	cmp	r3, #0
 8012396:	d01e      	beq.n	80123d6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d11a      	bne.n	80123d6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	685a      	ldr	r2, [r3, #4]
 80123a4:	4b0e      	ldr	r3, [pc, #56]	@ (80123e0 <vPortFree+0xbc>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	43db      	mvns	r3, r3
 80123aa:	401a      	ands	r2, r3
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80123b0:	f7fe fe88 	bl	80110c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	685a      	ldr	r2, [r3, #4]
 80123b8:	4b0a      	ldr	r3, [pc, #40]	@ (80123e4 <vPortFree+0xc0>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	4413      	add	r3, r2
 80123be:	4a09      	ldr	r2, [pc, #36]	@ (80123e4 <vPortFree+0xc0>)
 80123c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80123c2:	6938      	ldr	r0, [r7, #16]
 80123c4:	f000 f874 	bl	80124b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80123c8:	4b07      	ldr	r3, [pc, #28]	@ (80123e8 <vPortFree+0xc4>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	3301      	adds	r3, #1
 80123ce:	4a06      	ldr	r2, [pc, #24]	@ (80123e8 <vPortFree+0xc4>)
 80123d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80123d2:	f7fe fe85 	bl	80110e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80123d6:	bf00      	nop
 80123d8:	3718      	adds	r7, #24
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	20004cac 	.word	0x20004cac
 80123e4:	20004c9c 	.word	0x20004c9c
 80123e8:	20004ca8 	.word	0x20004ca8

080123ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80123ec:	b480      	push	{r7}
 80123ee:	b085      	sub	sp, #20
 80123f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80123f2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80123f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80123f8:	4b27      	ldr	r3, [pc, #156]	@ (8012498 <prvHeapInit+0xac>)
 80123fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	f003 0307 	and.w	r3, r3, #7
 8012402:	2b00      	cmp	r3, #0
 8012404:	d00c      	beq.n	8012420 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	3307      	adds	r3, #7
 801240a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	f023 0307 	bic.w	r3, r3, #7
 8012412:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012414:	68ba      	ldr	r2, [r7, #8]
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	1ad3      	subs	r3, r2, r3
 801241a:	4a1f      	ldr	r2, [pc, #124]	@ (8012498 <prvHeapInit+0xac>)
 801241c:	4413      	add	r3, r2
 801241e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012424:	4a1d      	ldr	r2, [pc, #116]	@ (801249c <prvHeapInit+0xb0>)
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801242a:	4b1c      	ldr	r3, [pc, #112]	@ (801249c <prvHeapInit+0xb0>)
 801242c:	2200      	movs	r2, #0
 801242e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	68ba      	ldr	r2, [r7, #8]
 8012434:	4413      	add	r3, r2
 8012436:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012438:	2208      	movs	r2, #8
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	1a9b      	subs	r3, r3, r2
 801243e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	f023 0307 	bic.w	r3, r3, #7
 8012446:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	4a15      	ldr	r2, [pc, #84]	@ (80124a0 <prvHeapInit+0xb4>)
 801244c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801244e:	4b14      	ldr	r3, [pc, #80]	@ (80124a0 <prvHeapInit+0xb4>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	2200      	movs	r2, #0
 8012454:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012456:	4b12      	ldr	r3, [pc, #72]	@ (80124a0 <prvHeapInit+0xb4>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2200      	movs	r2, #0
 801245c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	68fa      	ldr	r2, [r7, #12]
 8012466:	1ad2      	subs	r2, r2, r3
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801246c:	4b0c      	ldr	r3, [pc, #48]	@ (80124a0 <prvHeapInit+0xb4>)
 801246e:	681a      	ldr	r2, [r3, #0]
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	4a0a      	ldr	r2, [pc, #40]	@ (80124a4 <prvHeapInit+0xb8>)
 801247a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	4a09      	ldr	r2, [pc, #36]	@ (80124a8 <prvHeapInit+0xbc>)
 8012482:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012484:	4b09      	ldr	r3, [pc, #36]	@ (80124ac <prvHeapInit+0xc0>)
 8012486:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801248a:	601a      	str	r2, [r3, #0]
}
 801248c:	bf00      	nop
 801248e:	3714      	adds	r7, #20
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr
 8012498:	20001090 	.word	0x20001090
 801249c:	20004c90 	.word	0x20004c90
 80124a0:	20004c98 	.word	0x20004c98
 80124a4:	20004ca0 	.word	0x20004ca0
 80124a8:	20004c9c 	.word	0x20004c9c
 80124ac:	20004cac 	.word	0x20004cac

080124b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80124b0:	b480      	push	{r7}
 80124b2:	b085      	sub	sp, #20
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80124b8:	4b28      	ldr	r3, [pc, #160]	@ (801255c <prvInsertBlockIntoFreeList+0xac>)
 80124ba:	60fb      	str	r3, [r7, #12]
 80124bc:	e002      	b.n	80124c4 <prvInsertBlockIntoFreeList+0x14>
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	60fb      	str	r3, [r7, #12]
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	687a      	ldr	r2, [r7, #4]
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d8f7      	bhi.n	80124be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	68ba      	ldr	r2, [r7, #8]
 80124d8:	4413      	add	r3, r2
 80124da:	687a      	ldr	r2, [r7, #4]
 80124dc:	429a      	cmp	r2, r3
 80124de:	d108      	bne.n	80124f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	685a      	ldr	r2, [r3, #4]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	441a      	add	r2, r3
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	68ba      	ldr	r2, [r7, #8]
 80124fc:	441a      	add	r2, r3
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	429a      	cmp	r2, r3
 8012504:	d118      	bne.n	8012538 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	4b15      	ldr	r3, [pc, #84]	@ (8012560 <prvInsertBlockIntoFreeList+0xb0>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	429a      	cmp	r2, r3
 8012510:	d00d      	beq.n	801252e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	685a      	ldr	r2, [r3, #4]
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	685b      	ldr	r3, [r3, #4]
 801251c:	441a      	add	r2, r3
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	681a      	ldr	r2, [r3, #0]
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	601a      	str	r2, [r3, #0]
 801252c:	e008      	b.n	8012540 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801252e:	4b0c      	ldr	r3, [pc, #48]	@ (8012560 <prvInsertBlockIntoFreeList+0xb0>)
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	601a      	str	r2, [r3, #0]
 8012536:	e003      	b.n	8012540 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	681a      	ldr	r2, [r3, #0]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012540:	68fa      	ldr	r2, [r7, #12]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	429a      	cmp	r2, r3
 8012546:	d002      	beq.n	801254e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	687a      	ldr	r2, [r7, #4]
 801254c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801254e:	bf00      	nop
 8012550:	3714      	adds	r7, #20
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr
 801255a:	bf00      	nop
 801255c:	20004c90 	.word	0x20004c90
 8012560:	20004c98 	.word	0x20004c98

08012564 <__cvt>:
 8012564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012568:	ec57 6b10 	vmov	r6, r7, d0
 801256c:	2f00      	cmp	r7, #0
 801256e:	460c      	mov	r4, r1
 8012570:	4619      	mov	r1, r3
 8012572:	463b      	mov	r3, r7
 8012574:	bfbb      	ittet	lt
 8012576:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801257a:	461f      	movlt	r7, r3
 801257c:	2300      	movge	r3, #0
 801257e:	232d      	movlt	r3, #45	@ 0x2d
 8012580:	700b      	strb	r3, [r1, #0]
 8012582:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012584:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012588:	4691      	mov	r9, r2
 801258a:	f023 0820 	bic.w	r8, r3, #32
 801258e:	bfbc      	itt	lt
 8012590:	4632      	movlt	r2, r6
 8012592:	4616      	movlt	r6, r2
 8012594:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012598:	d005      	beq.n	80125a6 <__cvt+0x42>
 801259a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801259e:	d100      	bne.n	80125a2 <__cvt+0x3e>
 80125a0:	3401      	adds	r4, #1
 80125a2:	2102      	movs	r1, #2
 80125a4:	e000      	b.n	80125a8 <__cvt+0x44>
 80125a6:	2103      	movs	r1, #3
 80125a8:	ab03      	add	r3, sp, #12
 80125aa:	9301      	str	r3, [sp, #4]
 80125ac:	ab02      	add	r3, sp, #8
 80125ae:	9300      	str	r3, [sp, #0]
 80125b0:	ec47 6b10 	vmov	d0, r6, r7
 80125b4:	4653      	mov	r3, sl
 80125b6:	4622      	mov	r2, r4
 80125b8:	f000 ffde 	bl	8013578 <_dtoa_r>
 80125bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80125c0:	4605      	mov	r5, r0
 80125c2:	d119      	bne.n	80125f8 <__cvt+0x94>
 80125c4:	f019 0f01 	tst.w	r9, #1
 80125c8:	d00e      	beq.n	80125e8 <__cvt+0x84>
 80125ca:	eb00 0904 	add.w	r9, r0, r4
 80125ce:	2200      	movs	r2, #0
 80125d0:	2300      	movs	r3, #0
 80125d2:	4630      	mov	r0, r6
 80125d4:	4639      	mov	r1, r7
 80125d6:	f7ee fa97 	bl	8000b08 <__aeabi_dcmpeq>
 80125da:	b108      	cbz	r0, 80125e0 <__cvt+0x7c>
 80125dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80125e0:	2230      	movs	r2, #48	@ 0x30
 80125e2:	9b03      	ldr	r3, [sp, #12]
 80125e4:	454b      	cmp	r3, r9
 80125e6:	d31e      	bcc.n	8012626 <__cvt+0xc2>
 80125e8:	9b03      	ldr	r3, [sp, #12]
 80125ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80125ec:	1b5b      	subs	r3, r3, r5
 80125ee:	4628      	mov	r0, r5
 80125f0:	6013      	str	r3, [r2, #0]
 80125f2:	b004      	add	sp, #16
 80125f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80125fc:	eb00 0904 	add.w	r9, r0, r4
 8012600:	d1e5      	bne.n	80125ce <__cvt+0x6a>
 8012602:	7803      	ldrb	r3, [r0, #0]
 8012604:	2b30      	cmp	r3, #48	@ 0x30
 8012606:	d10a      	bne.n	801261e <__cvt+0xba>
 8012608:	2200      	movs	r2, #0
 801260a:	2300      	movs	r3, #0
 801260c:	4630      	mov	r0, r6
 801260e:	4639      	mov	r1, r7
 8012610:	f7ee fa7a 	bl	8000b08 <__aeabi_dcmpeq>
 8012614:	b918      	cbnz	r0, 801261e <__cvt+0xba>
 8012616:	f1c4 0401 	rsb	r4, r4, #1
 801261a:	f8ca 4000 	str.w	r4, [sl]
 801261e:	f8da 3000 	ldr.w	r3, [sl]
 8012622:	4499      	add	r9, r3
 8012624:	e7d3      	b.n	80125ce <__cvt+0x6a>
 8012626:	1c59      	adds	r1, r3, #1
 8012628:	9103      	str	r1, [sp, #12]
 801262a:	701a      	strb	r2, [r3, #0]
 801262c:	e7d9      	b.n	80125e2 <__cvt+0x7e>

0801262e <__exponent>:
 801262e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012630:	2900      	cmp	r1, #0
 8012632:	bfba      	itte	lt
 8012634:	4249      	neglt	r1, r1
 8012636:	232d      	movlt	r3, #45	@ 0x2d
 8012638:	232b      	movge	r3, #43	@ 0x2b
 801263a:	2909      	cmp	r1, #9
 801263c:	7002      	strb	r2, [r0, #0]
 801263e:	7043      	strb	r3, [r0, #1]
 8012640:	dd29      	ble.n	8012696 <__exponent+0x68>
 8012642:	f10d 0307 	add.w	r3, sp, #7
 8012646:	461d      	mov	r5, r3
 8012648:	270a      	movs	r7, #10
 801264a:	461a      	mov	r2, r3
 801264c:	fbb1 f6f7 	udiv	r6, r1, r7
 8012650:	fb07 1416 	mls	r4, r7, r6, r1
 8012654:	3430      	adds	r4, #48	@ 0x30
 8012656:	f802 4c01 	strb.w	r4, [r2, #-1]
 801265a:	460c      	mov	r4, r1
 801265c:	2c63      	cmp	r4, #99	@ 0x63
 801265e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012662:	4631      	mov	r1, r6
 8012664:	dcf1      	bgt.n	801264a <__exponent+0x1c>
 8012666:	3130      	adds	r1, #48	@ 0x30
 8012668:	1e94      	subs	r4, r2, #2
 801266a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801266e:	1c41      	adds	r1, r0, #1
 8012670:	4623      	mov	r3, r4
 8012672:	42ab      	cmp	r3, r5
 8012674:	d30a      	bcc.n	801268c <__exponent+0x5e>
 8012676:	f10d 0309 	add.w	r3, sp, #9
 801267a:	1a9b      	subs	r3, r3, r2
 801267c:	42ac      	cmp	r4, r5
 801267e:	bf88      	it	hi
 8012680:	2300      	movhi	r3, #0
 8012682:	3302      	adds	r3, #2
 8012684:	4403      	add	r3, r0
 8012686:	1a18      	subs	r0, r3, r0
 8012688:	b003      	add	sp, #12
 801268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801268c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012690:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012694:	e7ed      	b.n	8012672 <__exponent+0x44>
 8012696:	2330      	movs	r3, #48	@ 0x30
 8012698:	3130      	adds	r1, #48	@ 0x30
 801269a:	7083      	strb	r3, [r0, #2]
 801269c:	70c1      	strb	r1, [r0, #3]
 801269e:	1d03      	adds	r3, r0, #4
 80126a0:	e7f1      	b.n	8012686 <__exponent+0x58>
	...

080126a4 <_printf_float>:
 80126a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126a8:	b08d      	sub	sp, #52	@ 0x34
 80126aa:	460c      	mov	r4, r1
 80126ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80126b0:	4616      	mov	r6, r2
 80126b2:	461f      	mov	r7, r3
 80126b4:	4605      	mov	r5, r0
 80126b6:	f000 fdf3 	bl	80132a0 <_localeconv_r>
 80126ba:	6803      	ldr	r3, [r0, #0]
 80126bc:	9304      	str	r3, [sp, #16]
 80126be:	4618      	mov	r0, r3
 80126c0:	f7ed fdf6 	bl	80002b0 <strlen>
 80126c4:	2300      	movs	r3, #0
 80126c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80126c8:	f8d8 3000 	ldr.w	r3, [r8]
 80126cc:	9005      	str	r0, [sp, #20]
 80126ce:	3307      	adds	r3, #7
 80126d0:	f023 0307 	bic.w	r3, r3, #7
 80126d4:	f103 0208 	add.w	r2, r3, #8
 80126d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80126dc:	f8d4 b000 	ldr.w	fp, [r4]
 80126e0:	f8c8 2000 	str.w	r2, [r8]
 80126e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80126e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80126ec:	9307      	str	r3, [sp, #28]
 80126ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80126f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80126f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80126fa:	4b9c      	ldr	r3, [pc, #624]	@ (801296c <_printf_float+0x2c8>)
 80126fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012700:	f7ee fa34 	bl	8000b6c <__aeabi_dcmpun>
 8012704:	bb70      	cbnz	r0, 8012764 <_printf_float+0xc0>
 8012706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801270a:	4b98      	ldr	r3, [pc, #608]	@ (801296c <_printf_float+0x2c8>)
 801270c:	f04f 32ff 	mov.w	r2, #4294967295
 8012710:	f7ee fa0e 	bl	8000b30 <__aeabi_dcmple>
 8012714:	bb30      	cbnz	r0, 8012764 <_printf_float+0xc0>
 8012716:	2200      	movs	r2, #0
 8012718:	2300      	movs	r3, #0
 801271a:	4640      	mov	r0, r8
 801271c:	4649      	mov	r1, r9
 801271e:	f7ee f9fd 	bl	8000b1c <__aeabi_dcmplt>
 8012722:	b110      	cbz	r0, 801272a <_printf_float+0x86>
 8012724:	232d      	movs	r3, #45	@ 0x2d
 8012726:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801272a:	4a91      	ldr	r2, [pc, #580]	@ (8012970 <_printf_float+0x2cc>)
 801272c:	4b91      	ldr	r3, [pc, #580]	@ (8012974 <_printf_float+0x2d0>)
 801272e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012732:	bf8c      	ite	hi
 8012734:	4690      	movhi	r8, r2
 8012736:	4698      	movls	r8, r3
 8012738:	2303      	movs	r3, #3
 801273a:	6123      	str	r3, [r4, #16]
 801273c:	f02b 0304 	bic.w	r3, fp, #4
 8012740:	6023      	str	r3, [r4, #0]
 8012742:	f04f 0900 	mov.w	r9, #0
 8012746:	9700      	str	r7, [sp, #0]
 8012748:	4633      	mov	r3, r6
 801274a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801274c:	4621      	mov	r1, r4
 801274e:	4628      	mov	r0, r5
 8012750:	f000 f9d2 	bl	8012af8 <_printf_common>
 8012754:	3001      	adds	r0, #1
 8012756:	f040 808d 	bne.w	8012874 <_printf_float+0x1d0>
 801275a:	f04f 30ff 	mov.w	r0, #4294967295
 801275e:	b00d      	add	sp, #52	@ 0x34
 8012760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012764:	4642      	mov	r2, r8
 8012766:	464b      	mov	r3, r9
 8012768:	4640      	mov	r0, r8
 801276a:	4649      	mov	r1, r9
 801276c:	f7ee f9fe 	bl	8000b6c <__aeabi_dcmpun>
 8012770:	b140      	cbz	r0, 8012784 <_printf_float+0xe0>
 8012772:	464b      	mov	r3, r9
 8012774:	2b00      	cmp	r3, #0
 8012776:	bfbc      	itt	lt
 8012778:	232d      	movlt	r3, #45	@ 0x2d
 801277a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801277e:	4a7e      	ldr	r2, [pc, #504]	@ (8012978 <_printf_float+0x2d4>)
 8012780:	4b7e      	ldr	r3, [pc, #504]	@ (801297c <_printf_float+0x2d8>)
 8012782:	e7d4      	b.n	801272e <_printf_float+0x8a>
 8012784:	6863      	ldr	r3, [r4, #4]
 8012786:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801278a:	9206      	str	r2, [sp, #24]
 801278c:	1c5a      	adds	r2, r3, #1
 801278e:	d13b      	bne.n	8012808 <_printf_float+0x164>
 8012790:	2306      	movs	r3, #6
 8012792:	6063      	str	r3, [r4, #4]
 8012794:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012798:	2300      	movs	r3, #0
 801279a:	6022      	str	r2, [r4, #0]
 801279c:	9303      	str	r3, [sp, #12]
 801279e:	ab0a      	add	r3, sp, #40	@ 0x28
 80127a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80127a4:	ab09      	add	r3, sp, #36	@ 0x24
 80127a6:	9300      	str	r3, [sp, #0]
 80127a8:	6861      	ldr	r1, [r4, #4]
 80127aa:	ec49 8b10 	vmov	d0, r8, r9
 80127ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80127b2:	4628      	mov	r0, r5
 80127b4:	f7ff fed6 	bl	8012564 <__cvt>
 80127b8:	9b06      	ldr	r3, [sp, #24]
 80127ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80127bc:	2b47      	cmp	r3, #71	@ 0x47
 80127be:	4680      	mov	r8, r0
 80127c0:	d129      	bne.n	8012816 <_printf_float+0x172>
 80127c2:	1cc8      	adds	r0, r1, #3
 80127c4:	db02      	blt.n	80127cc <_printf_float+0x128>
 80127c6:	6863      	ldr	r3, [r4, #4]
 80127c8:	4299      	cmp	r1, r3
 80127ca:	dd41      	ble.n	8012850 <_printf_float+0x1ac>
 80127cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80127d0:	fa5f fa8a 	uxtb.w	sl, sl
 80127d4:	3901      	subs	r1, #1
 80127d6:	4652      	mov	r2, sl
 80127d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80127dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80127de:	f7ff ff26 	bl	801262e <__exponent>
 80127e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80127e4:	1813      	adds	r3, r2, r0
 80127e6:	2a01      	cmp	r2, #1
 80127e8:	4681      	mov	r9, r0
 80127ea:	6123      	str	r3, [r4, #16]
 80127ec:	dc02      	bgt.n	80127f4 <_printf_float+0x150>
 80127ee:	6822      	ldr	r2, [r4, #0]
 80127f0:	07d2      	lsls	r2, r2, #31
 80127f2:	d501      	bpl.n	80127f8 <_printf_float+0x154>
 80127f4:	3301      	adds	r3, #1
 80127f6:	6123      	str	r3, [r4, #16]
 80127f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d0a2      	beq.n	8012746 <_printf_float+0xa2>
 8012800:	232d      	movs	r3, #45	@ 0x2d
 8012802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012806:	e79e      	b.n	8012746 <_printf_float+0xa2>
 8012808:	9a06      	ldr	r2, [sp, #24]
 801280a:	2a47      	cmp	r2, #71	@ 0x47
 801280c:	d1c2      	bne.n	8012794 <_printf_float+0xf0>
 801280e:	2b00      	cmp	r3, #0
 8012810:	d1c0      	bne.n	8012794 <_printf_float+0xf0>
 8012812:	2301      	movs	r3, #1
 8012814:	e7bd      	b.n	8012792 <_printf_float+0xee>
 8012816:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801281a:	d9db      	bls.n	80127d4 <_printf_float+0x130>
 801281c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012820:	d118      	bne.n	8012854 <_printf_float+0x1b0>
 8012822:	2900      	cmp	r1, #0
 8012824:	6863      	ldr	r3, [r4, #4]
 8012826:	dd0b      	ble.n	8012840 <_printf_float+0x19c>
 8012828:	6121      	str	r1, [r4, #16]
 801282a:	b913      	cbnz	r3, 8012832 <_printf_float+0x18e>
 801282c:	6822      	ldr	r2, [r4, #0]
 801282e:	07d0      	lsls	r0, r2, #31
 8012830:	d502      	bpl.n	8012838 <_printf_float+0x194>
 8012832:	3301      	adds	r3, #1
 8012834:	440b      	add	r3, r1
 8012836:	6123      	str	r3, [r4, #16]
 8012838:	65a1      	str	r1, [r4, #88]	@ 0x58
 801283a:	f04f 0900 	mov.w	r9, #0
 801283e:	e7db      	b.n	80127f8 <_printf_float+0x154>
 8012840:	b913      	cbnz	r3, 8012848 <_printf_float+0x1a4>
 8012842:	6822      	ldr	r2, [r4, #0]
 8012844:	07d2      	lsls	r2, r2, #31
 8012846:	d501      	bpl.n	801284c <_printf_float+0x1a8>
 8012848:	3302      	adds	r3, #2
 801284a:	e7f4      	b.n	8012836 <_printf_float+0x192>
 801284c:	2301      	movs	r3, #1
 801284e:	e7f2      	b.n	8012836 <_printf_float+0x192>
 8012850:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012856:	4299      	cmp	r1, r3
 8012858:	db05      	blt.n	8012866 <_printf_float+0x1c2>
 801285a:	6823      	ldr	r3, [r4, #0]
 801285c:	6121      	str	r1, [r4, #16]
 801285e:	07d8      	lsls	r0, r3, #31
 8012860:	d5ea      	bpl.n	8012838 <_printf_float+0x194>
 8012862:	1c4b      	adds	r3, r1, #1
 8012864:	e7e7      	b.n	8012836 <_printf_float+0x192>
 8012866:	2900      	cmp	r1, #0
 8012868:	bfd4      	ite	le
 801286a:	f1c1 0202 	rsble	r2, r1, #2
 801286e:	2201      	movgt	r2, #1
 8012870:	4413      	add	r3, r2
 8012872:	e7e0      	b.n	8012836 <_printf_float+0x192>
 8012874:	6823      	ldr	r3, [r4, #0]
 8012876:	055a      	lsls	r2, r3, #21
 8012878:	d407      	bmi.n	801288a <_printf_float+0x1e6>
 801287a:	6923      	ldr	r3, [r4, #16]
 801287c:	4642      	mov	r2, r8
 801287e:	4631      	mov	r1, r6
 8012880:	4628      	mov	r0, r5
 8012882:	47b8      	blx	r7
 8012884:	3001      	adds	r0, #1
 8012886:	d12b      	bne.n	80128e0 <_printf_float+0x23c>
 8012888:	e767      	b.n	801275a <_printf_float+0xb6>
 801288a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801288e:	f240 80dd 	bls.w	8012a4c <_printf_float+0x3a8>
 8012892:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012896:	2200      	movs	r2, #0
 8012898:	2300      	movs	r3, #0
 801289a:	f7ee f935 	bl	8000b08 <__aeabi_dcmpeq>
 801289e:	2800      	cmp	r0, #0
 80128a0:	d033      	beq.n	801290a <_printf_float+0x266>
 80128a2:	4a37      	ldr	r2, [pc, #220]	@ (8012980 <_printf_float+0x2dc>)
 80128a4:	2301      	movs	r3, #1
 80128a6:	4631      	mov	r1, r6
 80128a8:	4628      	mov	r0, r5
 80128aa:	47b8      	blx	r7
 80128ac:	3001      	adds	r0, #1
 80128ae:	f43f af54 	beq.w	801275a <_printf_float+0xb6>
 80128b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80128b6:	4543      	cmp	r3, r8
 80128b8:	db02      	blt.n	80128c0 <_printf_float+0x21c>
 80128ba:	6823      	ldr	r3, [r4, #0]
 80128bc:	07d8      	lsls	r0, r3, #31
 80128be:	d50f      	bpl.n	80128e0 <_printf_float+0x23c>
 80128c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80128c4:	4631      	mov	r1, r6
 80128c6:	4628      	mov	r0, r5
 80128c8:	47b8      	blx	r7
 80128ca:	3001      	adds	r0, #1
 80128cc:	f43f af45 	beq.w	801275a <_printf_float+0xb6>
 80128d0:	f04f 0900 	mov.w	r9, #0
 80128d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80128d8:	f104 0a1a 	add.w	sl, r4, #26
 80128dc:	45c8      	cmp	r8, r9
 80128de:	dc09      	bgt.n	80128f4 <_printf_float+0x250>
 80128e0:	6823      	ldr	r3, [r4, #0]
 80128e2:	079b      	lsls	r3, r3, #30
 80128e4:	f100 8103 	bmi.w	8012aee <_printf_float+0x44a>
 80128e8:	68e0      	ldr	r0, [r4, #12]
 80128ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128ec:	4298      	cmp	r0, r3
 80128ee:	bfb8      	it	lt
 80128f0:	4618      	movlt	r0, r3
 80128f2:	e734      	b.n	801275e <_printf_float+0xba>
 80128f4:	2301      	movs	r3, #1
 80128f6:	4652      	mov	r2, sl
 80128f8:	4631      	mov	r1, r6
 80128fa:	4628      	mov	r0, r5
 80128fc:	47b8      	blx	r7
 80128fe:	3001      	adds	r0, #1
 8012900:	f43f af2b 	beq.w	801275a <_printf_float+0xb6>
 8012904:	f109 0901 	add.w	r9, r9, #1
 8012908:	e7e8      	b.n	80128dc <_printf_float+0x238>
 801290a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801290c:	2b00      	cmp	r3, #0
 801290e:	dc39      	bgt.n	8012984 <_printf_float+0x2e0>
 8012910:	4a1b      	ldr	r2, [pc, #108]	@ (8012980 <_printf_float+0x2dc>)
 8012912:	2301      	movs	r3, #1
 8012914:	4631      	mov	r1, r6
 8012916:	4628      	mov	r0, r5
 8012918:	47b8      	blx	r7
 801291a:	3001      	adds	r0, #1
 801291c:	f43f af1d 	beq.w	801275a <_printf_float+0xb6>
 8012920:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012924:	ea59 0303 	orrs.w	r3, r9, r3
 8012928:	d102      	bne.n	8012930 <_printf_float+0x28c>
 801292a:	6823      	ldr	r3, [r4, #0]
 801292c:	07d9      	lsls	r1, r3, #31
 801292e:	d5d7      	bpl.n	80128e0 <_printf_float+0x23c>
 8012930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012934:	4631      	mov	r1, r6
 8012936:	4628      	mov	r0, r5
 8012938:	47b8      	blx	r7
 801293a:	3001      	adds	r0, #1
 801293c:	f43f af0d 	beq.w	801275a <_printf_float+0xb6>
 8012940:	f04f 0a00 	mov.w	sl, #0
 8012944:	f104 0b1a 	add.w	fp, r4, #26
 8012948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801294a:	425b      	negs	r3, r3
 801294c:	4553      	cmp	r3, sl
 801294e:	dc01      	bgt.n	8012954 <_printf_float+0x2b0>
 8012950:	464b      	mov	r3, r9
 8012952:	e793      	b.n	801287c <_printf_float+0x1d8>
 8012954:	2301      	movs	r3, #1
 8012956:	465a      	mov	r2, fp
 8012958:	4631      	mov	r1, r6
 801295a:	4628      	mov	r0, r5
 801295c:	47b8      	blx	r7
 801295e:	3001      	adds	r0, #1
 8012960:	f43f aefb 	beq.w	801275a <_printf_float+0xb6>
 8012964:	f10a 0a01 	add.w	sl, sl, #1
 8012968:	e7ee      	b.n	8012948 <_printf_float+0x2a4>
 801296a:	bf00      	nop
 801296c:	7fefffff 	.word	0x7fefffff
 8012970:	080167b8 	.word	0x080167b8
 8012974:	080167b4 	.word	0x080167b4
 8012978:	080167c0 	.word	0x080167c0
 801297c:	080167bc 	.word	0x080167bc
 8012980:	080167c4 	.word	0x080167c4
 8012984:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012986:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801298a:	4553      	cmp	r3, sl
 801298c:	bfa8      	it	ge
 801298e:	4653      	movge	r3, sl
 8012990:	2b00      	cmp	r3, #0
 8012992:	4699      	mov	r9, r3
 8012994:	dc36      	bgt.n	8012a04 <_printf_float+0x360>
 8012996:	f04f 0b00 	mov.w	fp, #0
 801299a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801299e:	f104 021a 	add.w	r2, r4, #26
 80129a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80129a4:	9306      	str	r3, [sp, #24]
 80129a6:	eba3 0309 	sub.w	r3, r3, r9
 80129aa:	455b      	cmp	r3, fp
 80129ac:	dc31      	bgt.n	8012a12 <_printf_float+0x36e>
 80129ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129b0:	459a      	cmp	sl, r3
 80129b2:	dc3a      	bgt.n	8012a2a <_printf_float+0x386>
 80129b4:	6823      	ldr	r3, [r4, #0]
 80129b6:	07da      	lsls	r2, r3, #31
 80129b8:	d437      	bmi.n	8012a2a <_printf_float+0x386>
 80129ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129bc:	ebaa 0903 	sub.w	r9, sl, r3
 80129c0:	9b06      	ldr	r3, [sp, #24]
 80129c2:	ebaa 0303 	sub.w	r3, sl, r3
 80129c6:	4599      	cmp	r9, r3
 80129c8:	bfa8      	it	ge
 80129ca:	4699      	movge	r9, r3
 80129cc:	f1b9 0f00 	cmp.w	r9, #0
 80129d0:	dc33      	bgt.n	8012a3a <_printf_float+0x396>
 80129d2:	f04f 0800 	mov.w	r8, #0
 80129d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80129da:	f104 0b1a 	add.w	fp, r4, #26
 80129de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129e0:	ebaa 0303 	sub.w	r3, sl, r3
 80129e4:	eba3 0309 	sub.w	r3, r3, r9
 80129e8:	4543      	cmp	r3, r8
 80129ea:	f77f af79 	ble.w	80128e0 <_printf_float+0x23c>
 80129ee:	2301      	movs	r3, #1
 80129f0:	465a      	mov	r2, fp
 80129f2:	4631      	mov	r1, r6
 80129f4:	4628      	mov	r0, r5
 80129f6:	47b8      	blx	r7
 80129f8:	3001      	adds	r0, #1
 80129fa:	f43f aeae 	beq.w	801275a <_printf_float+0xb6>
 80129fe:	f108 0801 	add.w	r8, r8, #1
 8012a02:	e7ec      	b.n	80129de <_printf_float+0x33a>
 8012a04:	4642      	mov	r2, r8
 8012a06:	4631      	mov	r1, r6
 8012a08:	4628      	mov	r0, r5
 8012a0a:	47b8      	blx	r7
 8012a0c:	3001      	adds	r0, #1
 8012a0e:	d1c2      	bne.n	8012996 <_printf_float+0x2f2>
 8012a10:	e6a3      	b.n	801275a <_printf_float+0xb6>
 8012a12:	2301      	movs	r3, #1
 8012a14:	4631      	mov	r1, r6
 8012a16:	4628      	mov	r0, r5
 8012a18:	9206      	str	r2, [sp, #24]
 8012a1a:	47b8      	blx	r7
 8012a1c:	3001      	adds	r0, #1
 8012a1e:	f43f ae9c 	beq.w	801275a <_printf_float+0xb6>
 8012a22:	9a06      	ldr	r2, [sp, #24]
 8012a24:	f10b 0b01 	add.w	fp, fp, #1
 8012a28:	e7bb      	b.n	80129a2 <_printf_float+0x2fe>
 8012a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a2e:	4631      	mov	r1, r6
 8012a30:	4628      	mov	r0, r5
 8012a32:	47b8      	blx	r7
 8012a34:	3001      	adds	r0, #1
 8012a36:	d1c0      	bne.n	80129ba <_printf_float+0x316>
 8012a38:	e68f      	b.n	801275a <_printf_float+0xb6>
 8012a3a:	9a06      	ldr	r2, [sp, #24]
 8012a3c:	464b      	mov	r3, r9
 8012a3e:	4442      	add	r2, r8
 8012a40:	4631      	mov	r1, r6
 8012a42:	4628      	mov	r0, r5
 8012a44:	47b8      	blx	r7
 8012a46:	3001      	adds	r0, #1
 8012a48:	d1c3      	bne.n	80129d2 <_printf_float+0x32e>
 8012a4a:	e686      	b.n	801275a <_printf_float+0xb6>
 8012a4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012a50:	f1ba 0f01 	cmp.w	sl, #1
 8012a54:	dc01      	bgt.n	8012a5a <_printf_float+0x3b6>
 8012a56:	07db      	lsls	r3, r3, #31
 8012a58:	d536      	bpl.n	8012ac8 <_printf_float+0x424>
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	4642      	mov	r2, r8
 8012a5e:	4631      	mov	r1, r6
 8012a60:	4628      	mov	r0, r5
 8012a62:	47b8      	blx	r7
 8012a64:	3001      	adds	r0, #1
 8012a66:	f43f ae78 	beq.w	801275a <_printf_float+0xb6>
 8012a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a6e:	4631      	mov	r1, r6
 8012a70:	4628      	mov	r0, r5
 8012a72:	47b8      	blx	r7
 8012a74:	3001      	adds	r0, #1
 8012a76:	f43f ae70 	beq.w	801275a <_printf_float+0xb6>
 8012a7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012a7e:	2200      	movs	r2, #0
 8012a80:	2300      	movs	r3, #0
 8012a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a86:	f7ee f83f 	bl	8000b08 <__aeabi_dcmpeq>
 8012a8a:	b9c0      	cbnz	r0, 8012abe <_printf_float+0x41a>
 8012a8c:	4653      	mov	r3, sl
 8012a8e:	f108 0201 	add.w	r2, r8, #1
 8012a92:	4631      	mov	r1, r6
 8012a94:	4628      	mov	r0, r5
 8012a96:	47b8      	blx	r7
 8012a98:	3001      	adds	r0, #1
 8012a9a:	d10c      	bne.n	8012ab6 <_printf_float+0x412>
 8012a9c:	e65d      	b.n	801275a <_printf_float+0xb6>
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	465a      	mov	r2, fp
 8012aa2:	4631      	mov	r1, r6
 8012aa4:	4628      	mov	r0, r5
 8012aa6:	47b8      	blx	r7
 8012aa8:	3001      	adds	r0, #1
 8012aaa:	f43f ae56 	beq.w	801275a <_printf_float+0xb6>
 8012aae:	f108 0801 	add.w	r8, r8, #1
 8012ab2:	45d0      	cmp	r8, sl
 8012ab4:	dbf3      	blt.n	8012a9e <_printf_float+0x3fa>
 8012ab6:	464b      	mov	r3, r9
 8012ab8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012abc:	e6df      	b.n	801287e <_printf_float+0x1da>
 8012abe:	f04f 0800 	mov.w	r8, #0
 8012ac2:	f104 0b1a 	add.w	fp, r4, #26
 8012ac6:	e7f4      	b.n	8012ab2 <_printf_float+0x40e>
 8012ac8:	2301      	movs	r3, #1
 8012aca:	4642      	mov	r2, r8
 8012acc:	e7e1      	b.n	8012a92 <_printf_float+0x3ee>
 8012ace:	2301      	movs	r3, #1
 8012ad0:	464a      	mov	r2, r9
 8012ad2:	4631      	mov	r1, r6
 8012ad4:	4628      	mov	r0, r5
 8012ad6:	47b8      	blx	r7
 8012ad8:	3001      	adds	r0, #1
 8012ada:	f43f ae3e 	beq.w	801275a <_printf_float+0xb6>
 8012ade:	f108 0801 	add.w	r8, r8, #1
 8012ae2:	68e3      	ldr	r3, [r4, #12]
 8012ae4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012ae6:	1a5b      	subs	r3, r3, r1
 8012ae8:	4543      	cmp	r3, r8
 8012aea:	dcf0      	bgt.n	8012ace <_printf_float+0x42a>
 8012aec:	e6fc      	b.n	80128e8 <_printf_float+0x244>
 8012aee:	f04f 0800 	mov.w	r8, #0
 8012af2:	f104 0919 	add.w	r9, r4, #25
 8012af6:	e7f4      	b.n	8012ae2 <_printf_float+0x43e>

08012af8 <_printf_common>:
 8012af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012afc:	4616      	mov	r6, r2
 8012afe:	4698      	mov	r8, r3
 8012b00:	688a      	ldr	r2, [r1, #8]
 8012b02:	690b      	ldr	r3, [r1, #16]
 8012b04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	bfb8      	it	lt
 8012b0c:	4613      	movlt	r3, r2
 8012b0e:	6033      	str	r3, [r6, #0]
 8012b10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012b14:	4607      	mov	r7, r0
 8012b16:	460c      	mov	r4, r1
 8012b18:	b10a      	cbz	r2, 8012b1e <_printf_common+0x26>
 8012b1a:	3301      	adds	r3, #1
 8012b1c:	6033      	str	r3, [r6, #0]
 8012b1e:	6823      	ldr	r3, [r4, #0]
 8012b20:	0699      	lsls	r1, r3, #26
 8012b22:	bf42      	ittt	mi
 8012b24:	6833      	ldrmi	r3, [r6, #0]
 8012b26:	3302      	addmi	r3, #2
 8012b28:	6033      	strmi	r3, [r6, #0]
 8012b2a:	6825      	ldr	r5, [r4, #0]
 8012b2c:	f015 0506 	ands.w	r5, r5, #6
 8012b30:	d106      	bne.n	8012b40 <_printf_common+0x48>
 8012b32:	f104 0a19 	add.w	sl, r4, #25
 8012b36:	68e3      	ldr	r3, [r4, #12]
 8012b38:	6832      	ldr	r2, [r6, #0]
 8012b3a:	1a9b      	subs	r3, r3, r2
 8012b3c:	42ab      	cmp	r3, r5
 8012b3e:	dc26      	bgt.n	8012b8e <_printf_common+0x96>
 8012b40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012b44:	6822      	ldr	r2, [r4, #0]
 8012b46:	3b00      	subs	r3, #0
 8012b48:	bf18      	it	ne
 8012b4a:	2301      	movne	r3, #1
 8012b4c:	0692      	lsls	r2, r2, #26
 8012b4e:	d42b      	bmi.n	8012ba8 <_printf_common+0xb0>
 8012b50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012b54:	4641      	mov	r1, r8
 8012b56:	4638      	mov	r0, r7
 8012b58:	47c8      	blx	r9
 8012b5a:	3001      	adds	r0, #1
 8012b5c:	d01e      	beq.n	8012b9c <_printf_common+0xa4>
 8012b5e:	6823      	ldr	r3, [r4, #0]
 8012b60:	6922      	ldr	r2, [r4, #16]
 8012b62:	f003 0306 	and.w	r3, r3, #6
 8012b66:	2b04      	cmp	r3, #4
 8012b68:	bf02      	ittt	eq
 8012b6a:	68e5      	ldreq	r5, [r4, #12]
 8012b6c:	6833      	ldreq	r3, [r6, #0]
 8012b6e:	1aed      	subeq	r5, r5, r3
 8012b70:	68a3      	ldr	r3, [r4, #8]
 8012b72:	bf0c      	ite	eq
 8012b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012b78:	2500      	movne	r5, #0
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	bfc4      	itt	gt
 8012b7e:	1a9b      	subgt	r3, r3, r2
 8012b80:	18ed      	addgt	r5, r5, r3
 8012b82:	2600      	movs	r6, #0
 8012b84:	341a      	adds	r4, #26
 8012b86:	42b5      	cmp	r5, r6
 8012b88:	d11a      	bne.n	8012bc0 <_printf_common+0xc8>
 8012b8a:	2000      	movs	r0, #0
 8012b8c:	e008      	b.n	8012ba0 <_printf_common+0xa8>
 8012b8e:	2301      	movs	r3, #1
 8012b90:	4652      	mov	r2, sl
 8012b92:	4641      	mov	r1, r8
 8012b94:	4638      	mov	r0, r7
 8012b96:	47c8      	blx	r9
 8012b98:	3001      	adds	r0, #1
 8012b9a:	d103      	bne.n	8012ba4 <_printf_common+0xac>
 8012b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ba4:	3501      	adds	r5, #1
 8012ba6:	e7c6      	b.n	8012b36 <_printf_common+0x3e>
 8012ba8:	18e1      	adds	r1, r4, r3
 8012baa:	1c5a      	adds	r2, r3, #1
 8012bac:	2030      	movs	r0, #48	@ 0x30
 8012bae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012bb2:	4422      	add	r2, r4
 8012bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012bb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012bbc:	3302      	adds	r3, #2
 8012bbe:	e7c7      	b.n	8012b50 <_printf_common+0x58>
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	4622      	mov	r2, r4
 8012bc4:	4641      	mov	r1, r8
 8012bc6:	4638      	mov	r0, r7
 8012bc8:	47c8      	blx	r9
 8012bca:	3001      	adds	r0, #1
 8012bcc:	d0e6      	beq.n	8012b9c <_printf_common+0xa4>
 8012bce:	3601      	adds	r6, #1
 8012bd0:	e7d9      	b.n	8012b86 <_printf_common+0x8e>
	...

08012bd4 <_printf_i>:
 8012bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012bd8:	7e0f      	ldrb	r7, [r1, #24]
 8012bda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012bdc:	2f78      	cmp	r7, #120	@ 0x78
 8012bde:	4691      	mov	r9, r2
 8012be0:	4680      	mov	r8, r0
 8012be2:	460c      	mov	r4, r1
 8012be4:	469a      	mov	sl, r3
 8012be6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012bea:	d807      	bhi.n	8012bfc <_printf_i+0x28>
 8012bec:	2f62      	cmp	r7, #98	@ 0x62
 8012bee:	d80a      	bhi.n	8012c06 <_printf_i+0x32>
 8012bf0:	2f00      	cmp	r7, #0
 8012bf2:	f000 80d1 	beq.w	8012d98 <_printf_i+0x1c4>
 8012bf6:	2f58      	cmp	r7, #88	@ 0x58
 8012bf8:	f000 80b8 	beq.w	8012d6c <_printf_i+0x198>
 8012bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012c00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012c04:	e03a      	b.n	8012c7c <_printf_i+0xa8>
 8012c06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012c0a:	2b15      	cmp	r3, #21
 8012c0c:	d8f6      	bhi.n	8012bfc <_printf_i+0x28>
 8012c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8012c14 <_printf_i+0x40>)
 8012c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c14:	08012c6d 	.word	0x08012c6d
 8012c18:	08012c81 	.word	0x08012c81
 8012c1c:	08012bfd 	.word	0x08012bfd
 8012c20:	08012bfd 	.word	0x08012bfd
 8012c24:	08012bfd 	.word	0x08012bfd
 8012c28:	08012bfd 	.word	0x08012bfd
 8012c2c:	08012c81 	.word	0x08012c81
 8012c30:	08012bfd 	.word	0x08012bfd
 8012c34:	08012bfd 	.word	0x08012bfd
 8012c38:	08012bfd 	.word	0x08012bfd
 8012c3c:	08012bfd 	.word	0x08012bfd
 8012c40:	08012d7f 	.word	0x08012d7f
 8012c44:	08012cab 	.word	0x08012cab
 8012c48:	08012d39 	.word	0x08012d39
 8012c4c:	08012bfd 	.word	0x08012bfd
 8012c50:	08012bfd 	.word	0x08012bfd
 8012c54:	08012da1 	.word	0x08012da1
 8012c58:	08012bfd 	.word	0x08012bfd
 8012c5c:	08012cab 	.word	0x08012cab
 8012c60:	08012bfd 	.word	0x08012bfd
 8012c64:	08012bfd 	.word	0x08012bfd
 8012c68:	08012d41 	.word	0x08012d41
 8012c6c:	6833      	ldr	r3, [r6, #0]
 8012c6e:	1d1a      	adds	r2, r3, #4
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	6032      	str	r2, [r6, #0]
 8012c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012c78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012c7c:	2301      	movs	r3, #1
 8012c7e:	e09c      	b.n	8012dba <_printf_i+0x1e6>
 8012c80:	6833      	ldr	r3, [r6, #0]
 8012c82:	6820      	ldr	r0, [r4, #0]
 8012c84:	1d19      	adds	r1, r3, #4
 8012c86:	6031      	str	r1, [r6, #0]
 8012c88:	0606      	lsls	r6, r0, #24
 8012c8a:	d501      	bpl.n	8012c90 <_printf_i+0xbc>
 8012c8c:	681d      	ldr	r5, [r3, #0]
 8012c8e:	e003      	b.n	8012c98 <_printf_i+0xc4>
 8012c90:	0645      	lsls	r5, r0, #25
 8012c92:	d5fb      	bpl.n	8012c8c <_printf_i+0xb8>
 8012c94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012c98:	2d00      	cmp	r5, #0
 8012c9a:	da03      	bge.n	8012ca4 <_printf_i+0xd0>
 8012c9c:	232d      	movs	r3, #45	@ 0x2d
 8012c9e:	426d      	negs	r5, r5
 8012ca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ca4:	4858      	ldr	r0, [pc, #352]	@ (8012e08 <_printf_i+0x234>)
 8012ca6:	230a      	movs	r3, #10
 8012ca8:	e011      	b.n	8012cce <_printf_i+0xfa>
 8012caa:	6821      	ldr	r1, [r4, #0]
 8012cac:	6833      	ldr	r3, [r6, #0]
 8012cae:	0608      	lsls	r0, r1, #24
 8012cb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8012cb4:	d402      	bmi.n	8012cbc <_printf_i+0xe8>
 8012cb6:	0649      	lsls	r1, r1, #25
 8012cb8:	bf48      	it	mi
 8012cba:	b2ad      	uxthmi	r5, r5
 8012cbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8012cbe:	4852      	ldr	r0, [pc, #328]	@ (8012e08 <_printf_i+0x234>)
 8012cc0:	6033      	str	r3, [r6, #0]
 8012cc2:	bf14      	ite	ne
 8012cc4:	230a      	movne	r3, #10
 8012cc6:	2308      	moveq	r3, #8
 8012cc8:	2100      	movs	r1, #0
 8012cca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012cce:	6866      	ldr	r6, [r4, #4]
 8012cd0:	60a6      	str	r6, [r4, #8]
 8012cd2:	2e00      	cmp	r6, #0
 8012cd4:	db05      	blt.n	8012ce2 <_printf_i+0x10e>
 8012cd6:	6821      	ldr	r1, [r4, #0]
 8012cd8:	432e      	orrs	r6, r5
 8012cda:	f021 0104 	bic.w	r1, r1, #4
 8012cde:	6021      	str	r1, [r4, #0]
 8012ce0:	d04b      	beq.n	8012d7a <_printf_i+0x1a6>
 8012ce2:	4616      	mov	r6, r2
 8012ce4:	fbb5 f1f3 	udiv	r1, r5, r3
 8012ce8:	fb03 5711 	mls	r7, r3, r1, r5
 8012cec:	5dc7      	ldrb	r7, [r0, r7]
 8012cee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012cf2:	462f      	mov	r7, r5
 8012cf4:	42bb      	cmp	r3, r7
 8012cf6:	460d      	mov	r5, r1
 8012cf8:	d9f4      	bls.n	8012ce4 <_printf_i+0x110>
 8012cfa:	2b08      	cmp	r3, #8
 8012cfc:	d10b      	bne.n	8012d16 <_printf_i+0x142>
 8012cfe:	6823      	ldr	r3, [r4, #0]
 8012d00:	07df      	lsls	r7, r3, #31
 8012d02:	d508      	bpl.n	8012d16 <_printf_i+0x142>
 8012d04:	6923      	ldr	r3, [r4, #16]
 8012d06:	6861      	ldr	r1, [r4, #4]
 8012d08:	4299      	cmp	r1, r3
 8012d0a:	bfde      	ittt	le
 8012d0c:	2330      	movle	r3, #48	@ 0x30
 8012d0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012d12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012d16:	1b92      	subs	r2, r2, r6
 8012d18:	6122      	str	r2, [r4, #16]
 8012d1a:	f8cd a000 	str.w	sl, [sp]
 8012d1e:	464b      	mov	r3, r9
 8012d20:	aa03      	add	r2, sp, #12
 8012d22:	4621      	mov	r1, r4
 8012d24:	4640      	mov	r0, r8
 8012d26:	f7ff fee7 	bl	8012af8 <_printf_common>
 8012d2a:	3001      	adds	r0, #1
 8012d2c:	d14a      	bne.n	8012dc4 <_printf_i+0x1f0>
 8012d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d32:	b004      	add	sp, #16
 8012d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d38:	6823      	ldr	r3, [r4, #0]
 8012d3a:	f043 0320 	orr.w	r3, r3, #32
 8012d3e:	6023      	str	r3, [r4, #0]
 8012d40:	4832      	ldr	r0, [pc, #200]	@ (8012e0c <_printf_i+0x238>)
 8012d42:	2778      	movs	r7, #120	@ 0x78
 8012d44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012d48:	6823      	ldr	r3, [r4, #0]
 8012d4a:	6831      	ldr	r1, [r6, #0]
 8012d4c:	061f      	lsls	r7, r3, #24
 8012d4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8012d52:	d402      	bmi.n	8012d5a <_printf_i+0x186>
 8012d54:	065f      	lsls	r7, r3, #25
 8012d56:	bf48      	it	mi
 8012d58:	b2ad      	uxthmi	r5, r5
 8012d5a:	6031      	str	r1, [r6, #0]
 8012d5c:	07d9      	lsls	r1, r3, #31
 8012d5e:	bf44      	itt	mi
 8012d60:	f043 0320 	orrmi.w	r3, r3, #32
 8012d64:	6023      	strmi	r3, [r4, #0]
 8012d66:	b11d      	cbz	r5, 8012d70 <_printf_i+0x19c>
 8012d68:	2310      	movs	r3, #16
 8012d6a:	e7ad      	b.n	8012cc8 <_printf_i+0xf4>
 8012d6c:	4826      	ldr	r0, [pc, #152]	@ (8012e08 <_printf_i+0x234>)
 8012d6e:	e7e9      	b.n	8012d44 <_printf_i+0x170>
 8012d70:	6823      	ldr	r3, [r4, #0]
 8012d72:	f023 0320 	bic.w	r3, r3, #32
 8012d76:	6023      	str	r3, [r4, #0]
 8012d78:	e7f6      	b.n	8012d68 <_printf_i+0x194>
 8012d7a:	4616      	mov	r6, r2
 8012d7c:	e7bd      	b.n	8012cfa <_printf_i+0x126>
 8012d7e:	6833      	ldr	r3, [r6, #0]
 8012d80:	6825      	ldr	r5, [r4, #0]
 8012d82:	6961      	ldr	r1, [r4, #20]
 8012d84:	1d18      	adds	r0, r3, #4
 8012d86:	6030      	str	r0, [r6, #0]
 8012d88:	062e      	lsls	r6, r5, #24
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	d501      	bpl.n	8012d92 <_printf_i+0x1be>
 8012d8e:	6019      	str	r1, [r3, #0]
 8012d90:	e002      	b.n	8012d98 <_printf_i+0x1c4>
 8012d92:	0668      	lsls	r0, r5, #25
 8012d94:	d5fb      	bpl.n	8012d8e <_printf_i+0x1ba>
 8012d96:	8019      	strh	r1, [r3, #0]
 8012d98:	2300      	movs	r3, #0
 8012d9a:	6123      	str	r3, [r4, #16]
 8012d9c:	4616      	mov	r6, r2
 8012d9e:	e7bc      	b.n	8012d1a <_printf_i+0x146>
 8012da0:	6833      	ldr	r3, [r6, #0]
 8012da2:	1d1a      	adds	r2, r3, #4
 8012da4:	6032      	str	r2, [r6, #0]
 8012da6:	681e      	ldr	r6, [r3, #0]
 8012da8:	6862      	ldr	r2, [r4, #4]
 8012daa:	2100      	movs	r1, #0
 8012dac:	4630      	mov	r0, r6
 8012dae:	f7ed fa2f 	bl	8000210 <memchr>
 8012db2:	b108      	cbz	r0, 8012db8 <_printf_i+0x1e4>
 8012db4:	1b80      	subs	r0, r0, r6
 8012db6:	6060      	str	r0, [r4, #4]
 8012db8:	6863      	ldr	r3, [r4, #4]
 8012dba:	6123      	str	r3, [r4, #16]
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012dc2:	e7aa      	b.n	8012d1a <_printf_i+0x146>
 8012dc4:	6923      	ldr	r3, [r4, #16]
 8012dc6:	4632      	mov	r2, r6
 8012dc8:	4649      	mov	r1, r9
 8012dca:	4640      	mov	r0, r8
 8012dcc:	47d0      	blx	sl
 8012dce:	3001      	adds	r0, #1
 8012dd0:	d0ad      	beq.n	8012d2e <_printf_i+0x15a>
 8012dd2:	6823      	ldr	r3, [r4, #0]
 8012dd4:	079b      	lsls	r3, r3, #30
 8012dd6:	d413      	bmi.n	8012e00 <_printf_i+0x22c>
 8012dd8:	68e0      	ldr	r0, [r4, #12]
 8012dda:	9b03      	ldr	r3, [sp, #12]
 8012ddc:	4298      	cmp	r0, r3
 8012dde:	bfb8      	it	lt
 8012de0:	4618      	movlt	r0, r3
 8012de2:	e7a6      	b.n	8012d32 <_printf_i+0x15e>
 8012de4:	2301      	movs	r3, #1
 8012de6:	4632      	mov	r2, r6
 8012de8:	4649      	mov	r1, r9
 8012dea:	4640      	mov	r0, r8
 8012dec:	47d0      	blx	sl
 8012dee:	3001      	adds	r0, #1
 8012df0:	d09d      	beq.n	8012d2e <_printf_i+0x15a>
 8012df2:	3501      	adds	r5, #1
 8012df4:	68e3      	ldr	r3, [r4, #12]
 8012df6:	9903      	ldr	r1, [sp, #12]
 8012df8:	1a5b      	subs	r3, r3, r1
 8012dfa:	42ab      	cmp	r3, r5
 8012dfc:	dcf2      	bgt.n	8012de4 <_printf_i+0x210>
 8012dfe:	e7eb      	b.n	8012dd8 <_printf_i+0x204>
 8012e00:	2500      	movs	r5, #0
 8012e02:	f104 0619 	add.w	r6, r4, #25
 8012e06:	e7f5      	b.n	8012df4 <_printf_i+0x220>
 8012e08:	080167c6 	.word	0x080167c6
 8012e0c:	080167d7 	.word	0x080167d7

08012e10 <std>:
 8012e10:	2300      	movs	r3, #0
 8012e12:	b510      	push	{r4, lr}
 8012e14:	4604      	mov	r4, r0
 8012e16:	e9c0 3300 	strd	r3, r3, [r0]
 8012e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e1e:	6083      	str	r3, [r0, #8]
 8012e20:	8181      	strh	r1, [r0, #12]
 8012e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8012e24:	81c2      	strh	r2, [r0, #14]
 8012e26:	6183      	str	r3, [r0, #24]
 8012e28:	4619      	mov	r1, r3
 8012e2a:	2208      	movs	r2, #8
 8012e2c:	305c      	adds	r0, #92	@ 0x5c
 8012e2e:	f000 fa2f 	bl	8013290 <memset>
 8012e32:	4b0d      	ldr	r3, [pc, #52]	@ (8012e68 <std+0x58>)
 8012e34:	6263      	str	r3, [r4, #36]	@ 0x24
 8012e36:	4b0d      	ldr	r3, [pc, #52]	@ (8012e6c <std+0x5c>)
 8012e38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8012e70 <std+0x60>)
 8012e3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8012e74 <std+0x64>)
 8012e40:	6323      	str	r3, [r4, #48]	@ 0x30
 8012e42:	4b0d      	ldr	r3, [pc, #52]	@ (8012e78 <std+0x68>)
 8012e44:	6224      	str	r4, [r4, #32]
 8012e46:	429c      	cmp	r4, r3
 8012e48:	d006      	beq.n	8012e58 <std+0x48>
 8012e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012e4e:	4294      	cmp	r4, r2
 8012e50:	d002      	beq.n	8012e58 <std+0x48>
 8012e52:	33d0      	adds	r3, #208	@ 0xd0
 8012e54:	429c      	cmp	r4, r3
 8012e56:	d105      	bne.n	8012e64 <std+0x54>
 8012e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e60:	f000 baf0 	b.w	8013444 <__retarget_lock_init_recursive>
 8012e64:	bd10      	pop	{r4, pc}
 8012e66:	bf00      	nop
 8012e68:	080130e1 	.word	0x080130e1
 8012e6c:	08013103 	.word	0x08013103
 8012e70:	0801313b 	.word	0x0801313b
 8012e74:	0801315f 	.word	0x0801315f
 8012e78:	20004cb0 	.word	0x20004cb0

08012e7c <stdio_exit_handler>:
 8012e7c:	4a02      	ldr	r2, [pc, #8]	@ (8012e88 <stdio_exit_handler+0xc>)
 8012e7e:	4903      	ldr	r1, [pc, #12]	@ (8012e8c <stdio_exit_handler+0x10>)
 8012e80:	4803      	ldr	r0, [pc, #12]	@ (8012e90 <stdio_exit_handler+0x14>)
 8012e82:	f000 b869 	b.w	8012f58 <_fwalk_sglue>
 8012e86:	bf00      	nop
 8012e88:	20000010 	.word	0x20000010
 8012e8c:	08015049 	.word	0x08015049
 8012e90:	20000020 	.word	0x20000020

08012e94 <cleanup_stdio>:
 8012e94:	6841      	ldr	r1, [r0, #4]
 8012e96:	4b0c      	ldr	r3, [pc, #48]	@ (8012ec8 <cleanup_stdio+0x34>)
 8012e98:	4299      	cmp	r1, r3
 8012e9a:	b510      	push	{r4, lr}
 8012e9c:	4604      	mov	r4, r0
 8012e9e:	d001      	beq.n	8012ea4 <cleanup_stdio+0x10>
 8012ea0:	f002 f8d2 	bl	8015048 <_fflush_r>
 8012ea4:	68a1      	ldr	r1, [r4, #8]
 8012ea6:	4b09      	ldr	r3, [pc, #36]	@ (8012ecc <cleanup_stdio+0x38>)
 8012ea8:	4299      	cmp	r1, r3
 8012eaa:	d002      	beq.n	8012eb2 <cleanup_stdio+0x1e>
 8012eac:	4620      	mov	r0, r4
 8012eae:	f002 f8cb 	bl	8015048 <_fflush_r>
 8012eb2:	68e1      	ldr	r1, [r4, #12]
 8012eb4:	4b06      	ldr	r3, [pc, #24]	@ (8012ed0 <cleanup_stdio+0x3c>)
 8012eb6:	4299      	cmp	r1, r3
 8012eb8:	d004      	beq.n	8012ec4 <cleanup_stdio+0x30>
 8012eba:	4620      	mov	r0, r4
 8012ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ec0:	f002 b8c2 	b.w	8015048 <_fflush_r>
 8012ec4:	bd10      	pop	{r4, pc}
 8012ec6:	bf00      	nop
 8012ec8:	20004cb0 	.word	0x20004cb0
 8012ecc:	20004d18 	.word	0x20004d18
 8012ed0:	20004d80 	.word	0x20004d80

08012ed4 <global_stdio_init.part.0>:
 8012ed4:	b510      	push	{r4, lr}
 8012ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8012f04 <global_stdio_init.part.0+0x30>)
 8012ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8012f08 <global_stdio_init.part.0+0x34>)
 8012eda:	4a0c      	ldr	r2, [pc, #48]	@ (8012f0c <global_stdio_init.part.0+0x38>)
 8012edc:	601a      	str	r2, [r3, #0]
 8012ede:	4620      	mov	r0, r4
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	2104      	movs	r1, #4
 8012ee4:	f7ff ff94 	bl	8012e10 <std>
 8012ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012eec:	2201      	movs	r2, #1
 8012eee:	2109      	movs	r1, #9
 8012ef0:	f7ff ff8e 	bl	8012e10 <std>
 8012ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012ef8:	2202      	movs	r2, #2
 8012efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012efe:	2112      	movs	r1, #18
 8012f00:	f7ff bf86 	b.w	8012e10 <std>
 8012f04:	20004de8 	.word	0x20004de8
 8012f08:	20004cb0 	.word	0x20004cb0
 8012f0c:	08012e7d 	.word	0x08012e7d

08012f10 <__sfp_lock_acquire>:
 8012f10:	4801      	ldr	r0, [pc, #4]	@ (8012f18 <__sfp_lock_acquire+0x8>)
 8012f12:	f000 ba98 	b.w	8013446 <__retarget_lock_acquire_recursive>
 8012f16:	bf00      	nop
 8012f18:	20004df1 	.word	0x20004df1

08012f1c <__sfp_lock_release>:
 8012f1c:	4801      	ldr	r0, [pc, #4]	@ (8012f24 <__sfp_lock_release+0x8>)
 8012f1e:	f000 ba93 	b.w	8013448 <__retarget_lock_release_recursive>
 8012f22:	bf00      	nop
 8012f24:	20004df1 	.word	0x20004df1

08012f28 <__sinit>:
 8012f28:	b510      	push	{r4, lr}
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	f7ff fff0 	bl	8012f10 <__sfp_lock_acquire>
 8012f30:	6a23      	ldr	r3, [r4, #32]
 8012f32:	b11b      	cbz	r3, 8012f3c <__sinit+0x14>
 8012f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f38:	f7ff bff0 	b.w	8012f1c <__sfp_lock_release>
 8012f3c:	4b04      	ldr	r3, [pc, #16]	@ (8012f50 <__sinit+0x28>)
 8012f3e:	6223      	str	r3, [r4, #32]
 8012f40:	4b04      	ldr	r3, [pc, #16]	@ (8012f54 <__sinit+0x2c>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d1f5      	bne.n	8012f34 <__sinit+0xc>
 8012f48:	f7ff ffc4 	bl	8012ed4 <global_stdio_init.part.0>
 8012f4c:	e7f2      	b.n	8012f34 <__sinit+0xc>
 8012f4e:	bf00      	nop
 8012f50:	08012e95 	.word	0x08012e95
 8012f54:	20004de8 	.word	0x20004de8

08012f58 <_fwalk_sglue>:
 8012f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f5c:	4607      	mov	r7, r0
 8012f5e:	4688      	mov	r8, r1
 8012f60:	4614      	mov	r4, r2
 8012f62:	2600      	movs	r6, #0
 8012f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f68:	f1b9 0901 	subs.w	r9, r9, #1
 8012f6c:	d505      	bpl.n	8012f7a <_fwalk_sglue+0x22>
 8012f6e:	6824      	ldr	r4, [r4, #0]
 8012f70:	2c00      	cmp	r4, #0
 8012f72:	d1f7      	bne.n	8012f64 <_fwalk_sglue+0xc>
 8012f74:	4630      	mov	r0, r6
 8012f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f7a:	89ab      	ldrh	r3, [r5, #12]
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d907      	bls.n	8012f90 <_fwalk_sglue+0x38>
 8012f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f84:	3301      	adds	r3, #1
 8012f86:	d003      	beq.n	8012f90 <_fwalk_sglue+0x38>
 8012f88:	4629      	mov	r1, r5
 8012f8a:	4638      	mov	r0, r7
 8012f8c:	47c0      	blx	r8
 8012f8e:	4306      	orrs	r6, r0
 8012f90:	3568      	adds	r5, #104	@ 0x68
 8012f92:	e7e9      	b.n	8012f68 <_fwalk_sglue+0x10>

08012f94 <iprintf>:
 8012f94:	b40f      	push	{r0, r1, r2, r3}
 8012f96:	b507      	push	{r0, r1, r2, lr}
 8012f98:	4906      	ldr	r1, [pc, #24]	@ (8012fb4 <iprintf+0x20>)
 8012f9a:	ab04      	add	r3, sp, #16
 8012f9c:	6808      	ldr	r0, [r1, #0]
 8012f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fa2:	6881      	ldr	r1, [r0, #8]
 8012fa4:	9301      	str	r3, [sp, #4]
 8012fa6:	f001 feb3 	bl	8014d10 <_vfiprintf_r>
 8012faa:	b003      	add	sp, #12
 8012fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fb0:	b004      	add	sp, #16
 8012fb2:	4770      	bx	lr
 8012fb4:	2000001c 	.word	0x2000001c

08012fb8 <_puts_r>:
 8012fb8:	6a03      	ldr	r3, [r0, #32]
 8012fba:	b570      	push	{r4, r5, r6, lr}
 8012fbc:	6884      	ldr	r4, [r0, #8]
 8012fbe:	4605      	mov	r5, r0
 8012fc0:	460e      	mov	r6, r1
 8012fc2:	b90b      	cbnz	r3, 8012fc8 <_puts_r+0x10>
 8012fc4:	f7ff ffb0 	bl	8012f28 <__sinit>
 8012fc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012fca:	07db      	lsls	r3, r3, #31
 8012fcc:	d405      	bmi.n	8012fda <_puts_r+0x22>
 8012fce:	89a3      	ldrh	r3, [r4, #12]
 8012fd0:	0598      	lsls	r0, r3, #22
 8012fd2:	d402      	bmi.n	8012fda <_puts_r+0x22>
 8012fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012fd6:	f000 fa36 	bl	8013446 <__retarget_lock_acquire_recursive>
 8012fda:	89a3      	ldrh	r3, [r4, #12]
 8012fdc:	0719      	lsls	r1, r3, #28
 8012fde:	d502      	bpl.n	8012fe6 <_puts_r+0x2e>
 8012fe0:	6923      	ldr	r3, [r4, #16]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d135      	bne.n	8013052 <_puts_r+0x9a>
 8012fe6:	4621      	mov	r1, r4
 8012fe8:	4628      	mov	r0, r5
 8012fea:	f000 f8fb 	bl	80131e4 <__swsetup_r>
 8012fee:	b380      	cbz	r0, 8013052 <_puts_r+0x9a>
 8012ff0:	f04f 35ff 	mov.w	r5, #4294967295
 8012ff4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ff6:	07da      	lsls	r2, r3, #31
 8012ff8:	d405      	bmi.n	8013006 <_puts_r+0x4e>
 8012ffa:	89a3      	ldrh	r3, [r4, #12]
 8012ffc:	059b      	lsls	r3, r3, #22
 8012ffe:	d402      	bmi.n	8013006 <_puts_r+0x4e>
 8013000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013002:	f000 fa21 	bl	8013448 <__retarget_lock_release_recursive>
 8013006:	4628      	mov	r0, r5
 8013008:	bd70      	pop	{r4, r5, r6, pc}
 801300a:	2b00      	cmp	r3, #0
 801300c:	da04      	bge.n	8013018 <_puts_r+0x60>
 801300e:	69a2      	ldr	r2, [r4, #24]
 8013010:	429a      	cmp	r2, r3
 8013012:	dc17      	bgt.n	8013044 <_puts_r+0x8c>
 8013014:	290a      	cmp	r1, #10
 8013016:	d015      	beq.n	8013044 <_puts_r+0x8c>
 8013018:	6823      	ldr	r3, [r4, #0]
 801301a:	1c5a      	adds	r2, r3, #1
 801301c:	6022      	str	r2, [r4, #0]
 801301e:	7019      	strb	r1, [r3, #0]
 8013020:	68a3      	ldr	r3, [r4, #8]
 8013022:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013026:	3b01      	subs	r3, #1
 8013028:	60a3      	str	r3, [r4, #8]
 801302a:	2900      	cmp	r1, #0
 801302c:	d1ed      	bne.n	801300a <_puts_r+0x52>
 801302e:	2b00      	cmp	r3, #0
 8013030:	da11      	bge.n	8013056 <_puts_r+0x9e>
 8013032:	4622      	mov	r2, r4
 8013034:	210a      	movs	r1, #10
 8013036:	4628      	mov	r0, r5
 8013038:	f000 f895 	bl	8013166 <__swbuf_r>
 801303c:	3001      	adds	r0, #1
 801303e:	d0d7      	beq.n	8012ff0 <_puts_r+0x38>
 8013040:	250a      	movs	r5, #10
 8013042:	e7d7      	b.n	8012ff4 <_puts_r+0x3c>
 8013044:	4622      	mov	r2, r4
 8013046:	4628      	mov	r0, r5
 8013048:	f000 f88d 	bl	8013166 <__swbuf_r>
 801304c:	3001      	adds	r0, #1
 801304e:	d1e7      	bne.n	8013020 <_puts_r+0x68>
 8013050:	e7ce      	b.n	8012ff0 <_puts_r+0x38>
 8013052:	3e01      	subs	r6, #1
 8013054:	e7e4      	b.n	8013020 <_puts_r+0x68>
 8013056:	6823      	ldr	r3, [r4, #0]
 8013058:	1c5a      	adds	r2, r3, #1
 801305a:	6022      	str	r2, [r4, #0]
 801305c:	220a      	movs	r2, #10
 801305e:	701a      	strb	r2, [r3, #0]
 8013060:	e7ee      	b.n	8013040 <_puts_r+0x88>
	...

08013064 <puts>:
 8013064:	4b02      	ldr	r3, [pc, #8]	@ (8013070 <puts+0xc>)
 8013066:	4601      	mov	r1, r0
 8013068:	6818      	ldr	r0, [r3, #0]
 801306a:	f7ff bfa5 	b.w	8012fb8 <_puts_r>
 801306e:	bf00      	nop
 8013070:	2000001c 	.word	0x2000001c

08013074 <sniprintf>:
 8013074:	b40c      	push	{r2, r3}
 8013076:	b530      	push	{r4, r5, lr}
 8013078:	4b18      	ldr	r3, [pc, #96]	@ (80130dc <sniprintf+0x68>)
 801307a:	1e0c      	subs	r4, r1, #0
 801307c:	681d      	ldr	r5, [r3, #0]
 801307e:	b09d      	sub	sp, #116	@ 0x74
 8013080:	da08      	bge.n	8013094 <sniprintf+0x20>
 8013082:	238b      	movs	r3, #139	@ 0x8b
 8013084:	602b      	str	r3, [r5, #0]
 8013086:	f04f 30ff 	mov.w	r0, #4294967295
 801308a:	b01d      	add	sp, #116	@ 0x74
 801308c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013090:	b002      	add	sp, #8
 8013092:	4770      	bx	lr
 8013094:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013098:	f8ad 3014 	strh.w	r3, [sp, #20]
 801309c:	f04f 0300 	mov.w	r3, #0
 80130a0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80130a2:	bf14      	ite	ne
 80130a4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80130a8:	4623      	moveq	r3, r4
 80130aa:	9304      	str	r3, [sp, #16]
 80130ac:	9307      	str	r3, [sp, #28]
 80130ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80130b2:	9002      	str	r0, [sp, #8]
 80130b4:	9006      	str	r0, [sp, #24]
 80130b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80130ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80130bc:	ab21      	add	r3, sp, #132	@ 0x84
 80130be:	a902      	add	r1, sp, #8
 80130c0:	4628      	mov	r0, r5
 80130c2:	9301      	str	r3, [sp, #4]
 80130c4:	f001 fcfe 	bl	8014ac4 <_svfiprintf_r>
 80130c8:	1c43      	adds	r3, r0, #1
 80130ca:	bfbc      	itt	lt
 80130cc:	238b      	movlt	r3, #139	@ 0x8b
 80130ce:	602b      	strlt	r3, [r5, #0]
 80130d0:	2c00      	cmp	r4, #0
 80130d2:	d0da      	beq.n	801308a <sniprintf+0x16>
 80130d4:	9b02      	ldr	r3, [sp, #8]
 80130d6:	2200      	movs	r2, #0
 80130d8:	701a      	strb	r2, [r3, #0]
 80130da:	e7d6      	b.n	801308a <sniprintf+0x16>
 80130dc:	2000001c 	.word	0x2000001c

080130e0 <__sread>:
 80130e0:	b510      	push	{r4, lr}
 80130e2:	460c      	mov	r4, r1
 80130e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130e8:	f000 f95e 	bl	80133a8 <_read_r>
 80130ec:	2800      	cmp	r0, #0
 80130ee:	bfab      	itete	ge
 80130f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80130f2:	89a3      	ldrhlt	r3, [r4, #12]
 80130f4:	181b      	addge	r3, r3, r0
 80130f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80130fa:	bfac      	ite	ge
 80130fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80130fe:	81a3      	strhlt	r3, [r4, #12]
 8013100:	bd10      	pop	{r4, pc}

08013102 <__swrite>:
 8013102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013106:	461f      	mov	r7, r3
 8013108:	898b      	ldrh	r3, [r1, #12]
 801310a:	05db      	lsls	r3, r3, #23
 801310c:	4605      	mov	r5, r0
 801310e:	460c      	mov	r4, r1
 8013110:	4616      	mov	r6, r2
 8013112:	d505      	bpl.n	8013120 <__swrite+0x1e>
 8013114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013118:	2302      	movs	r3, #2
 801311a:	2200      	movs	r2, #0
 801311c:	f000 f932 	bl	8013384 <_lseek_r>
 8013120:	89a3      	ldrh	r3, [r4, #12]
 8013122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013126:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801312a:	81a3      	strh	r3, [r4, #12]
 801312c:	4632      	mov	r2, r6
 801312e:	463b      	mov	r3, r7
 8013130:	4628      	mov	r0, r5
 8013132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013136:	f000 b949 	b.w	80133cc <_write_r>

0801313a <__sseek>:
 801313a:	b510      	push	{r4, lr}
 801313c:	460c      	mov	r4, r1
 801313e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013142:	f000 f91f 	bl	8013384 <_lseek_r>
 8013146:	1c43      	adds	r3, r0, #1
 8013148:	89a3      	ldrh	r3, [r4, #12]
 801314a:	bf15      	itete	ne
 801314c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801314e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013152:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013156:	81a3      	strheq	r3, [r4, #12]
 8013158:	bf18      	it	ne
 801315a:	81a3      	strhne	r3, [r4, #12]
 801315c:	bd10      	pop	{r4, pc}

0801315e <__sclose>:
 801315e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013162:	f000 b8a1 	b.w	80132a8 <_close_r>

08013166 <__swbuf_r>:
 8013166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013168:	460e      	mov	r6, r1
 801316a:	4614      	mov	r4, r2
 801316c:	4605      	mov	r5, r0
 801316e:	b118      	cbz	r0, 8013178 <__swbuf_r+0x12>
 8013170:	6a03      	ldr	r3, [r0, #32]
 8013172:	b90b      	cbnz	r3, 8013178 <__swbuf_r+0x12>
 8013174:	f7ff fed8 	bl	8012f28 <__sinit>
 8013178:	69a3      	ldr	r3, [r4, #24]
 801317a:	60a3      	str	r3, [r4, #8]
 801317c:	89a3      	ldrh	r3, [r4, #12]
 801317e:	071a      	lsls	r2, r3, #28
 8013180:	d501      	bpl.n	8013186 <__swbuf_r+0x20>
 8013182:	6923      	ldr	r3, [r4, #16]
 8013184:	b943      	cbnz	r3, 8013198 <__swbuf_r+0x32>
 8013186:	4621      	mov	r1, r4
 8013188:	4628      	mov	r0, r5
 801318a:	f000 f82b 	bl	80131e4 <__swsetup_r>
 801318e:	b118      	cbz	r0, 8013198 <__swbuf_r+0x32>
 8013190:	f04f 37ff 	mov.w	r7, #4294967295
 8013194:	4638      	mov	r0, r7
 8013196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013198:	6823      	ldr	r3, [r4, #0]
 801319a:	6922      	ldr	r2, [r4, #16]
 801319c:	1a98      	subs	r0, r3, r2
 801319e:	6963      	ldr	r3, [r4, #20]
 80131a0:	b2f6      	uxtb	r6, r6
 80131a2:	4283      	cmp	r3, r0
 80131a4:	4637      	mov	r7, r6
 80131a6:	dc05      	bgt.n	80131b4 <__swbuf_r+0x4e>
 80131a8:	4621      	mov	r1, r4
 80131aa:	4628      	mov	r0, r5
 80131ac:	f001 ff4c 	bl	8015048 <_fflush_r>
 80131b0:	2800      	cmp	r0, #0
 80131b2:	d1ed      	bne.n	8013190 <__swbuf_r+0x2a>
 80131b4:	68a3      	ldr	r3, [r4, #8]
 80131b6:	3b01      	subs	r3, #1
 80131b8:	60a3      	str	r3, [r4, #8]
 80131ba:	6823      	ldr	r3, [r4, #0]
 80131bc:	1c5a      	adds	r2, r3, #1
 80131be:	6022      	str	r2, [r4, #0]
 80131c0:	701e      	strb	r6, [r3, #0]
 80131c2:	6962      	ldr	r2, [r4, #20]
 80131c4:	1c43      	adds	r3, r0, #1
 80131c6:	429a      	cmp	r2, r3
 80131c8:	d004      	beq.n	80131d4 <__swbuf_r+0x6e>
 80131ca:	89a3      	ldrh	r3, [r4, #12]
 80131cc:	07db      	lsls	r3, r3, #31
 80131ce:	d5e1      	bpl.n	8013194 <__swbuf_r+0x2e>
 80131d0:	2e0a      	cmp	r6, #10
 80131d2:	d1df      	bne.n	8013194 <__swbuf_r+0x2e>
 80131d4:	4621      	mov	r1, r4
 80131d6:	4628      	mov	r0, r5
 80131d8:	f001 ff36 	bl	8015048 <_fflush_r>
 80131dc:	2800      	cmp	r0, #0
 80131de:	d0d9      	beq.n	8013194 <__swbuf_r+0x2e>
 80131e0:	e7d6      	b.n	8013190 <__swbuf_r+0x2a>
	...

080131e4 <__swsetup_r>:
 80131e4:	b538      	push	{r3, r4, r5, lr}
 80131e6:	4b29      	ldr	r3, [pc, #164]	@ (801328c <__swsetup_r+0xa8>)
 80131e8:	4605      	mov	r5, r0
 80131ea:	6818      	ldr	r0, [r3, #0]
 80131ec:	460c      	mov	r4, r1
 80131ee:	b118      	cbz	r0, 80131f8 <__swsetup_r+0x14>
 80131f0:	6a03      	ldr	r3, [r0, #32]
 80131f2:	b90b      	cbnz	r3, 80131f8 <__swsetup_r+0x14>
 80131f4:	f7ff fe98 	bl	8012f28 <__sinit>
 80131f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131fc:	0719      	lsls	r1, r3, #28
 80131fe:	d422      	bmi.n	8013246 <__swsetup_r+0x62>
 8013200:	06da      	lsls	r2, r3, #27
 8013202:	d407      	bmi.n	8013214 <__swsetup_r+0x30>
 8013204:	2209      	movs	r2, #9
 8013206:	602a      	str	r2, [r5, #0]
 8013208:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801320c:	81a3      	strh	r3, [r4, #12]
 801320e:	f04f 30ff 	mov.w	r0, #4294967295
 8013212:	e033      	b.n	801327c <__swsetup_r+0x98>
 8013214:	0758      	lsls	r0, r3, #29
 8013216:	d512      	bpl.n	801323e <__swsetup_r+0x5a>
 8013218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801321a:	b141      	cbz	r1, 801322e <__swsetup_r+0x4a>
 801321c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013220:	4299      	cmp	r1, r3
 8013222:	d002      	beq.n	801322a <__swsetup_r+0x46>
 8013224:	4628      	mov	r0, r5
 8013226:	f000 ff77 	bl	8014118 <_free_r>
 801322a:	2300      	movs	r3, #0
 801322c:	6363      	str	r3, [r4, #52]	@ 0x34
 801322e:	89a3      	ldrh	r3, [r4, #12]
 8013230:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013234:	81a3      	strh	r3, [r4, #12]
 8013236:	2300      	movs	r3, #0
 8013238:	6063      	str	r3, [r4, #4]
 801323a:	6923      	ldr	r3, [r4, #16]
 801323c:	6023      	str	r3, [r4, #0]
 801323e:	89a3      	ldrh	r3, [r4, #12]
 8013240:	f043 0308 	orr.w	r3, r3, #8
 8013244:	81a3      	strh	r3, [r4, #12]
 8013246:	6923      	ldr	r3, [r4, #16]
 8013248:	b94b      	cbnz	r3, 801325e <__swsetup_r+0x7a>
 801324a:	89a3      	ldrh	r3, [r4, #12]
 801324c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013254:	d003      	beq.n	801325e <__swsetup_r+0x7a>
 8013256:	4621      	mov	r1, r4
 8013258:	4628      	mov	r0, r5
 801325a:	f001 ff43 	bl	80150e4 <__smakebuf_r>
 801325e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013262:	f013 0201 	ands.w	r2, r3, #1
 8013266:	d00a      	beq.n	801327e <__swsetup_r+0x9a>
 8013268:	2200      	movs	r2, #0
 801326a:	60a2      	str	r2, [r4, #8]
 801326c:	6962      	ldr	r2, [r4, #20]
 801326e:	4252      	negs	r2, r2
 8013270:	61a2      	str	r2, [r4, #24]
 8013272:	6922      	ldr	r2, [r4, #16]
 8013274:	b942      	cbnz	r2, 8013288 <__swsetup_r+0xa4>
 8013276:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801327a:	d1c5      	bne.n	8013208 <__swsetup_r+0x24>
 801327c:	bd38      	pop	{r3, r4, r5, pc}
 801327e:	0799      	lsls	r1, r3, #30
 8013280:	bf58      	it	pl
 8013282:	6962      	ldrpl	r2, [r4, #20]
 8013284:	60a2      	str	r2, [r4, #8]
 8013286:	e7f4      	b.n	8013272 <__swsetup_r+0x8e>
 8013288:	2000      	movs	r0, #0
 801328a:	e7f7      	b.n	801327c <__swsetup_r+0x98>
 801328c:	2000001c 	.word	0x2000001c

08013290 <memset>:
 8013290:	4402      	add	r2, r0
 8013292:	4603      	mov	r3, r0
 8013294:	4293      	cmp	r3, r2
 8013296:	d100      	bne.n	801329a <memset+0xa>
 8013298:	4770      	bx	lr
 801329a:	f803 1b01 	strb.w	r1, [r3], #1
 801329e:	e7f9      	b.n	8013294 <memset+0x4>

080132a0 <_localeconv_r>:
 80132a0:	4800      	ldr	r0, [pc, #0]	@ (80132a4 <_localeconv_r+0x4>)
 80132a2:	4770      	bx	lr
 80132a4:	2000015c 	.word	0x2000015c

080132a8 <_close_r>:
 80132a8:	b538      	push	{r3, r4, r5, lr}
 80132aa:	4d06      	ldr	r5, [pc, #24]	@ (80132c4 <_close_r+0x1c>)
 80132ac:	2300      	movs	r3, #0
 80132ae:	4604      	mov	r4, r0
 80132b0:	4608      	mov	r0, r1
 80132b2:	602b      	str	r3, [r5, #0]
 80132b4:	f7f0 ff6c 	bl	8004190 <_close>
 80132b8:	1c43      	adds	r3, r0, #1
 80132ba:	d102      	bne.n	80132c2 <_close_r+0x1a>
 80132bc:	682b      	ldr	r3, [r5, #0]
 80132be:	b103      	cbz	r3, 80132c2 <_close_r+0x1a>
 80132c0:	6023      	str	r3, [r4, #0]
 80132c2:	bd38      	pop	{r3, r4, r5, pc}
 80132c4:	20004dec 	.word	0x20004dec

080132c8 <_reclaim_reent>:
 80132c8:	4b2d      	ldr	r3, [pc, #180]	@ (8013380 <_reclaim_reent+0xb8>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	4283      	cmp	r3, r0
 80132ce:	b570      	push	{r4, r5, r6, lr}
 80132d0:	4604      	mov	r4, r0
 80132d2:	d053      	beq.n	801337c <_reclaim_reent+0xb4>
 80132d4:	69c3      	ldr	r3, [r0, #28]
 80132d6:	b31b      	cbz	r3, 8013320 <_reclaim_reent+0x58>
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	b163      	cbz	r3, 80132f6 <_reclaim_reent+0x2e>
 80132dc:	2500      	movs	r5, #0
 80132de:	69e3      	ldr	r3, [r4, #28]
 80132e0:	68db      	ldr	r3, [r3, #12]
 80132e2:	5959      	ldr	r1, [r3, r5]
 80132e4:	b9b1      	cbnz	r1, 8013314 <_reclaim_reent+0x4c>
 80132e6:	3504      	adds	r5, #4
 80132e8:	2d80      	cmp	r5, #128	@ 0x80
 80132ea:	d1f8      	bne.n	80132de <_reclaim_reent+0x16>
 80132ec:	69e3      	ldr	r3, [r4, #28]
 80132ee:	4620      	mov	r0, r4
 80132f0:	68d9      	ldr	r1, [r3, #12]
 80132f2:	f000 ff11 	bl	8014118 <_free_r>
 80132f6:	69e3      	ldr	r3, [r4, #28]
 80132f8:	6819      	ldr	r1, [r3, #0]
 80132fa:	b111      	cbz	r1, 8013302 <_reclaim_reent+0x3a>
 80132fc:	4620      	mov	r0, r4
 80132fe:	f000 ff0b 	bl	8014118 <_free_r>
 8013302:	69e3      	ldr	r3, [r4, #28]
 8013304:	689d      	ldr	r5, [r3, #8]
 8013306:	b15d      	cbz	r5, 8013320 <_reclaim_reent+0x58>
 8013308:	4629      	mov	r1, r5
 801330a:	4620      	mov	r0, r4
 801330c:	682d      	ldr	r5, [r5, #0]
 801330e:	f000 ff03 	bl	8014118 <_free_r>
 8013312:	e7f8      	b.n	8013306 <_reclaim_reent+0x3e>
 8013314:	680e      	ldr	r6, [r1, #0]
 8013316:	4620      	mov	r0, r4
 8013318:	f000 fefe 	bl	8014118 <_free_r>
 801331c:	4631      	mov	r1, r6
 801331e:	e7e1      	b.n	80132e4 <_reclaim_reent+0x1c>
 8013320:	6961      	ldr	r1, [r4, #20]
 8013322:	b111      	cbz	r1, 801332a <_reclaim_reent+0x62>
 8013324:	4620      	mov	r0, r4
 8013326:	f000 fef7 	bl	8014118 <_free_r>
 801332a:	69e1      	ldr	r1, [r4, #28]
 801332c:	b111      	cbz	r1, 8013334 <_reclaim_reent+0x6c>
 801332e:	4620      	mov	r0, r4
 8013330:	f000 fef2 	bl	8014118 <_free_r>
 8013334:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013336:	b111      	cbz	r1, 801333e <_reclaim_reent+0x76>
 8013338:	4620      	mov	r0, r4
 801333a:	f000 feed 	bl	8014118 <_free_r>
 801333e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013340:	b111      	cbz	r1, 8013348 <_reclaim_reent+0x80>
 8013342:	4620      	mov	r0, r4
 8013344:	f000 fee8 	bl	8014118 <_free_r>
 8013348:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801334a:	b111      	cbz	r1, 8013352 <_reclaim_reent+0x8a>
 801334c:	4620      	mov	r0, r4
 801334e:	f000 fee3 	bl	8014118 <_free_r>
 8013352:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013354:	b111      	cbz	r1, 801335c <_reclaim_reent+0x94>
 8013356:	4620      	mov	r0, r4
 8013358:	f000 fede 	bl	8014118 <_free_r>
 801335c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801335e:	b111      	cbz	r1, 8013366 <_reclaim_reent+0x9e>
 8013360:	4620      	mov	r0, r4
 8013362:	f000 fed9 	bl	8014118 <_free_r>
 8013366:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013368:	b111      	cbz	r1, 8013370 <_reclaim_reent+0xa8>
 801336a:	4620      	mov	r0, r4
 801336c:	f000 fed4 	bl	8014118 <_free_r>
 8013370:	6a23      	ldr	r3, [r4, #32]
 8013372:	b11b      	cbz	r3, 801337c <_reclaim_reent+0xb4>
 8013374:	4620      	mov	r0, r4
 8013376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801337a:	4718      	bx	r3
 801337c:	bd70      	pop	{r4, r5, r6, pc}
 801337e:	bf00      	nop
 8013380:	2000001c 	.word	0x2000001c

08013384 <_lseek_r>:
 8013384:	b538      	push	{r3, r4, r5, lr}
 8013386:	4d07      	ldr	r5, [pc, #28]	@ (80133a4 <_lseek_r+0x20>)
 8013388:	4604      	mov	r4, r0
 801338a:	4608      	mov	r0, r1
 801338c:	4611      	mov	r1, r2
 801338e:	2200      	movs	r2, #0
 8013390:	602a      	str	r2, [r5, #0]
 8013392:	461a      	mov	r2, r3
 8013394:	f7f0 ff23 	bl	80041de <_lseek>
 8013398:	1c43      	adds	r3, r0, #1
 801339a:	d102      	bne.n	80133a2 <_lseek_r+0x1e>
 801339c:	682b      	ldr	r3, [r5, #0]
 801339e:	b103      	cbz	r3, 80133a2 <_lseek_r+0x1e>
 80133a0:	6023      	str	r3, [r4, #0]
 80133a2:	bd38      	pop	{r3, r4, r5, pc}
 80133a4:	20004dec 	.word	0x20004dec

080133a8 <_read_r>:
 80133a8:	b538      	push	{r3, r4, r5, lr}
 80133aa:	4d07      	ldr	r5, [pc, #28]	@ (80133c8 <_read_r+0x20>)
 80133ac:	4604      	mov	r4, r0
 80133ae:	4608      	mov	r0, r1
 80133b0:	4611      	mov	r1, r2
 80133b2:	2200      	movs	r2, #0
 80133b4:	602a      	str	r2, [r5, #0]
 80133b6:	461a      	mov	r2, r3
 80133b8:	f7f0 feb1 	bl	800411e <_read>
 80133bc:	1c43      	adds	r3, r0, #1
 80133be:	d102      	bne.n	80133c6 <_read_r+0x1e>
 80133c0:	682b      	ldr	r3, [r5, #0]
 80133c2:	b103      	cbz	r3, 80133c6 <_read_r+0x1e>
 80133c4:	6023      	str	r3, [r4, #0]
 80133c6:	bd38      	pop	{r3, r4, r5, pc}
 80133c8:	20004dec 	.word	0x20004dec

080133cc <_write_r>:
 80133cc:	b538      	push	{r3, r4, r5, lr}
 80133ce:	4d07      	ldr	r5, [pc, #28]	@ (80133ec <_write_r+0x20>)
 80133d0:	4604      	mov	r4, r0
 80133d2:	4608      	mov	r0, r1
 80133d4:	4611      	mov	r1, r2
 80133d6:	2200      	movs	r2, #0
 80133d8:	602a      	str	r2, [r5, #0]
 80133da:	461a      	mov	r2, r3
 80133dc:	f7f0 febc 	bl	8004158 <_write>
 80133e0:	1c43      	adds	r3, r0, #1
 80133e2:	d102      	bne.n	80133ea <_write_r+0x1e>
 80133e4:	682b      	ldr	r3, [r5, #0]
 80133e6:	b103      	cbz	r3, 80133ea <_write_r+0x1e>
 80133e8:	6023      	str	r3, [r4, #0]
 80133ea:	bd38      	pop	{r3, r4, r5, pc}
 80133ec:	20004dec 	.word	0x20004dec

080133f0 <__errno>:
 80133f0:	4b01      	ldr	r3, [pc, #4]	@ (80133f8 <__errno+0x8>)
 80133f2:	6818      	ldr	r0, [r3, #0]
 80133f4:	4770      	bx	lr
 80133f6:	bf00      	nop
 80133f8:	2000001c 	.word	0x2000001c

080133fc <__libc_init_array>:
 80133fc:	b570      	push	{r4, r5, r6, lr}
 80133fe:	4d0d      	ldr	r5, [pc, #52]	@ (8013434 <__libc_init_array+0x38>)
 8013400:	4c0d      	ldr	r4, [pc, #52]	@ (8013438 <__libc_init_array+0x3c>)
 8013402:	1b64      	subs	r4, r4, r5
 8013404:	10a4      	asrs	r4, r4, #2
 8013406:	2600      	movs	r6, #0
 8013408:	42a6      	cmp	r6, r4
 801340a:	d109      	bne.n	8013420 <__libc_init_array+0x24>
 801340c:	4d0b      	ldr	r5, [pc, #44]	@ (801343c <__libc_init_array+0x40>)
 801340e:	4c0c      	ldr	r4, [pc, #48]	@ (8013440 <__libc_init_array+0x44>)
 8013410:	f002 fd32 	bl	8015e78 <_init>
 8013414:	1b64      	subs	r4, r4, r5
 8013416:	10a4      	asrs	r4, r4, #2
 8013418:	2600      	movs	r6, #0
 801341a:	42a6      	cmp	r6, r4
 801341c:	d105      	bne.n	801342a <__libc_init_array+0x2e>
 801341e:	bd70      	pop	{r4, r5, r6, pc}
 8013420:	f855 3b04 	ldr.w	r3, [r5], #4
 8013424:	4798      	blx	r3
 8013426:	3601      	adds	r6, #1
 8013428:	e7ee      	b.n	8013408 <__libc_init_array+0xc>
 801342a:	f855 3b04 	ldr.w	r3, [r5], #4
 801342e:	4798      	blx	r3
 8013430:	3601      	adds	r6, #1
 8013432:	e7f2      	b.n	801341a <__libc_init_array+0x1e>
 8013434:	08016b84 	.word	0x08016b84
 8013438:	08016b84 	.word	0x08016b84
 801343c:	08016b84 	.word	0x08016b84
 8013440:	08016b88 	.word	0x08016b88

08013444 <__retarget_lock_init_recursive>:
 8013444:	4770      	bx	lr

08013446 <__retarget_lock_acquire_recursive>:
 8013446:	4770      	bx	lr

08013448 <__retarget_lock_release_recursive>:
 8013448:	4770      	bx	lr

0801344a <memcpy>:
 801344a:	440a      	add	r2, r1
 801344c:	4291      	cmp	r1, r2
 801344e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013452:	d100      	bne.n	8013456 <memcpy+0xc>
 8013454:	4770      	bx	lr
 8013456:	b510      	push	{r4, lr}
 8013458:	f811 4b01 	ldrb.w	r4, [r1], #1
 801345c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013460:	4291      	cmp	r1, r2
 8013462:	d1f9      	bne.n	8013458 <memcpy+0xe>
 8013464:	bd10      	pop	{r4, pc}

08013466 <quorem>:
 8013466:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801346a:	6903      	ldr	r3, [r0, #16]
 801346c:	690c      	ldr	r4, [r1, #16]
 801346e:	42a3      	cmp	r3, r4
 8013470:	4607      	mov	r7, r0
 8013472:	db7e      	blt.n	8013572 <quorem+0x10c>
 8013474:	3c01      	subs	r4, #1
 8013476:	f101 0814 	add.w	r8, r1, #20
 801347a:	00a3      	lsls	r3, r4, #2
 801347c:	f100 0514 	add.w	r5, r0, #20
 8013480:	9300      	str	r3, [sp, #0]
 8013482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013486:	9301      	str	r3, [sp, #4]
 8013488:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801348c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013490:	3301      	adds	r3, #1
 8013492:	429a      	cmp	r2, r3
 8013494:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013498:	fbb2 f6f3 	udiv	r6, r2, r3
 801349c:	d32e      	bcc.n	80134fc <quorem+0x96>
 801349e:	f04f 0a00 	mov.w	sl, #0
 80134a2:	46c4      	mov	ip, r8
 80134a4:	46ae      	mov	lr, r5
 80134a6:	46d3      	mov	fp, sl
 80134a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80134ac:	b298      	uxth	r0, r3
 80134ae:	fb06 a000 	mla	r0, r6, r0, sl
 80134b2:	0c02      	lsrs	r2, r0, #16
 80134b4:	0c1b      	lsrs	r3, r3, #16
 80134b6:	fb06 2303 	mla	r3, r6, r3, r2
 80134ba:	f8de 2000 	ldr.w	r2, [lr]
 80134be:	b280      	uxth	r0, r0
 80134c0:	b292      	uxth	r2, r2
 80134c2:	1a12      	subs	r2, r2, r0
 80134c4:	445a      	add	r2, fp
 80134c6:	f8de 0000 	ldr.w	r0, [lr]
 80134ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80134d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80134d8:	b292      	uxth	r2, r2
 80134da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80134de:	45e1      	cmp	r9, ip
 80134e0:	f84e 2b04 	str.w	r2, [lr], #4
 80134e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80134e8:	d2de      	bcs.n	80134a8 <quorem+0x42>
 80134ea:	9b00      	ldr	r3, [sp, #0]
 80134ec:	58eb      	ldr	r3, [r5, r3]
 80134ee:	b92b      	cbnz	r3, 80134fc <quorem+0x96>
 80134f0:	9b01      	ldr	r3, [sp, #4]
 80134f2:	3b04      	subs	r3, #4
 80134f4:	429d      	cmp	r5, r3
 80134f6:	461a      	mov	r2, r3
 80134f8:	d32f      	bcc.n	801355a <quorem+0xf4>
 80134fa:	613c      	str	r4, [r7, #16]
 80134fc:	4638      	mov	r0, r7
 80134fe:	f001 f97d 	bl	80147fc <__mcmp>
 8013502:	2800      	cmp	r0, #0
 8013504:	db25      	blt.n	8013552 <quorem+0xec>
 8013506:	4629      	mov	r1, r5
 8013508:	2000      	movs	r0, #0
 801350a:	f858 2b04 	ldr.w	r2, [r8], #4
 801350e:	f8d1 c000 	ldr.w	ip, [r1]
 8013512:	fa1f fe82 	uxth.w	lr, r2
 8013516:	fa1f f38c 	uxth.w	r3, ip
 801351a:	eba3 030e 	sub.w	r3, r3, lr
 801351e:	4403      	add	r3, r0
 8013520:	0c12      	lsrs	r2, r2, #16
 8013522:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013526:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801352a:	b29b      	uxth	r3, r3
 801352c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013530:	45c1      	cmp	r9, r8
 8013532:	f841 3b04 	str.w	r3, [r1], #4
 8013536:	ea4f 4022 	mov.w	r0, r2, asr #16
 801353a:	d2e6      	bcs.n	801350a <quorem+0xa4>
 801353c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013540:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013544:	b922      	cbnz	r2, 8013550 <quorem+0xea>
 8013546:	3b04      	subs	r3, #4
 8013548:	429d      	cmp	r5, r3
 801354a:	461a      	mov	r2, r3
 801354c:	d30b      	bcc.n	8013566 <quorem+0x100>
 801354e:	613c      	str	r4, [r7, #16]
 8013550:	3601      	adds	r6, #1
 8013552:	4630      	mov	r0, r6
 8013554:	b003      	add	sp, #12
 8013556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801355a:	6812      	ldr	r2, [r2, #0]
 801355c:	3b04      	subs	r3, #4
 801355e:	2a00      	cmp	r2, #0
 8013560:	d1cb      	bne.n	80134fa <quorem+0x94>
 8013562:	3c01      	subs	r4, #1
 8013564:	e7c6      	b.n	80134f4 <quorem+0x8e>
 8013566:	6812      	ldr	r2, [r2, #0]
 8013568:	3b04      	subs	r3, #4
 801356a:	2a00      	cmp	r2, #0
 801356c:	d1ef      	bne.n	801354e <quorem+0xe8>
 801356e:	3c01      	subs	r4, #1
 8013570:	e7ea      	b.n	8013548 <quorem+0xe2>
 8013572:	2000      	movs	r0, #0
 8013574:	e7ee      	b.n	8013554 <quorem+0xee>
	...

08013578 <_dtoa_r>:
 8013578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801357c:	69c7      	ldr	r7, [r0, #28]
 801357e:	b097      	sub	sp, #92	@ 0x5c
 8013580:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013584:	ec55 4b10 	vmov	r4, r5, d0
 8013588:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801358a:	9107      	str	r1, [sp, #28]
 801358c:	4681      	mov	r9, r0
 801358e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013590:	9311      	str	r3, [sp, #68]	@ 0x44
 8013592:	b97f      	cbnz	r7, 80135b4 <_dtoa_r+0x3c>
 8013594:	2010      	movs	r0, #16
 8013596:	f000 fe09 	bl	80141ac <malloc>
 801359a:	4602      	mov	r2, r0
 801359c:	f8c9 001c 	str.w	r0, [r9, #28]
 80135a0:	b920      	cbnz	r0, 80135ac <_dtoa_r+0x34>
 80135a2:	4ba9      	ldr	r3, [pc, #676]	@ (8013848 <_dtoa_r+0x2d0>)
 80135a4:	21ef      	movs	r1, #239	@ 0xef
 80135a6:	48a9      	ldr	r0, [pc, #676]	@ (801384c <_dtoa_r+0x2d4>)
 80135a8:	f001 fe24 	bl	80151f4 <__assert_func>
 80135ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80135b0:	6007      	str	r7, [r0, #0]
 80135b2:	60c7      	str	r7, [r0, #12]
 80135b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80135b8:	6819      	ldr	r1, [r3, #0]
 80135ba:	b159      	cbz	r1, 80135d4 <_dtoa_r+0x5c>
 80135bc:	685a      	ldr	r2, [r3, #4]
 80135be:	604a      	str	r2, [r1, #4]
 80135c0:	2301      	movs	r3, #1
 80135c2:	4093      	lsls	r3, r2
 80135c4:	608b      	str	r3, [r1, #8]
 80135c6:	4648      	mov	r0, r9
 80135c8:	f000 fee6 	bl	8014398 <_Bfree>
 80135cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80135d0:	2200      	movs	r2, #0
 80135d2:	601a      	str	r2, [r3, #0]
 80135d4:	1e2b      	subs	r3, r5, #0
 80135d6:	bfb9      	ittee	lt
 80135d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80135dc:	9305      	strlt	r3, [sp, #20]
 80135de:	2300      	movge	r3, #0
 80135e0:	6033      	strge	r3, [r6, #0]
 80135e2:	9f05      	ldr	r7, [sp, #20]
 80135e4:	4b9a      	ldr	r3, [pc, #616]	@ (8013850 <_dtoa_r+0x2d8>)
 80135e6:	bfbc      	itt	lt
 80135e8:	2201      	movlt	r2, #1
 80135ea:	6032      	strlt	r2, [r6, #0]
 80135ec:	43bb      	bics	r3, r7
 80135ee:	d112      	bne.n	8013616 <_dtoa_r+0x9e>
 80135f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80135f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80135f6:	6013      	str	r3, [r2, #0]
 80135f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80135fc:	4323      	orrs	r3, r4
 80135fe:	f000 855a 	beq.w	80140b6 <_dtoa_r+0xb3e>
 8013602:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013604:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8013864 <_dtoa_r+0x2ec>
 8013608:	2b00      	cmp	r3, #0
 801360a:	f000 855c 	beq.w	80140c6 <_dtoa_r+0xb4e>
 801360e:	f10a 0303 	add.w	r3, sl, #3
 8013612:	f000 bd56 	b.w	80140c2 <_dtoa_r+0xb4a>
 8013616:	ed9d 7b04 	vldr	d7, [sp, #16]
 801361a:	2200      	movs	r2, #0
 801361c:	ec51 0b17 	vmov	r0, r1, d7
 8013620:	2300      	movs	r3, #0
 8013622:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8013626:	f7ed fa6f 	bl	8000b08 <__aeabi_dcmpeq>
 801362a:	4680      	mov	r8, r0
 801362c:	b158      	cbz	r0, 8013646 <_dtoa_r+0xce>
 801362e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013630:	2301      	movs	r3, #1
 8013632:	6013      	str	r3, [r2, #0]
 8013634:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013636:	b113      	cbz	r3, 801363e <_dtoa_r+0xc6>
 8013638:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801363a:	4b86      	ldr	r3, [pc, #536]	@ (8013854 <_dtoa_r+0x2dc>)
 801363c:	6013      	str	r3, [r2, #0]
 801363e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8013868 <_dtoa_r+0x2f0>
 8013642:	f000 bd40 	b.w	80140c6 <_dtoa_r+0xb4e>
 8013646:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801364a:	aa14      	add	r2, sp, #80	@ 0x50
 801364c:	a915      	add	r1, sp, #84	@ 0x54
 801364e:	4648      	mov	r0, r9
 8013650:	f001 f984 	bl	801495c <__d2b>
 8013654:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013658:	9002      	str	r0, [sp, #8]
 801365a:	2e00      	cmp	r6, #0
 801365c:	d078      	beq.n	8013750 <_dtoa_r+0x1d8>
 801365e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013660:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8013664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013668:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801366c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013670:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013674:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013678:	4619      	mov	r1, r3
 801367a:	2200      	movs	r2, #0
 801367c:	4b76      	ldr	r3, [pc, #472]	@ (8013858 <_dtoa_r+0x2e0>)
 801367e:	f7ec fe23 	bl	80002c8 <__aeabi_dsub>
 8013682:	a36b      	add	r3, pc, #428	@ (adr r3, 8013830 <_dtoa_r+0x2b8>)
 8013684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013688:	f7ec ffd6 	bl	8000638 <__aeabi_dmul>
 801368c:	a36a      	add	r3, pc, #424	@ (adr r3, 8013838 <_dtoa_r+0x2c0>)
 801368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013692:	f7ec fe1b 	bl	80002cc <__adddf3>
 8013696:	4604      	mov	r4, r0
 8013698:	4630      	mov	r0, r6
 801369a:	460d      	mov	r5, r1
 801369c:	f7ec ff62 	bl	8000564 <__aeabi_i2d>
 80136a0:	a367      	add	r3, pc, #412	@ (adr r3, 8013840 <_dtoa_r+0x2c8>)
 80136a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a6:	f7ec ffc7 	bl	8000638 <__aeabi_dmul>
 80136aa:	4602      	mov	r2, r0
 80136ac:	460b      	mov	r3, r1
 80136ae:	4620      	mov	r0, r4
 80136b0:	4629      	mov	r1, r5
 80136b2:	f7ec fe0b 	bl	80002cc <__adddf3>
 80136b6:	4604      	mov	r4, r0
 80136b8:	460d      	mov	r5, r1
 80136ba:	f7ed fa6d 	bl	8000b98 <__aeabi_d2iz>
 80136be:	2200      	movs	r2, #0
 80136c0:	4607      	mov	r7, r0
 80136c2:	2300      	movs	r3, #0
 80136c4:	4620      	mov	r0, r4
 80136c6:	4629      	mov	r1, r5
 80136c8:	f7ed fa28 	bl	8000b1c <__aeabi_dcmplt>
 80136cc:	b140      	cbz	r0, 80136e0 <_dtoa_r+0x168>
 80136ce:	4638      	mov	r0, r7
 80136d0:	f7ec ff48 	bl	8000564 <__aeabi_i2d>
 80136d4:	4622      	mov	r2, r4
 80136d6:	462b      	mov	r3, r5
 80136d8:	f7ed fa16 	bl	8000b08 <__aeabi_dcmpeq>
 80136dc:	b900      	cbnz	r0, 80136e0 <_dtoa_r+0x168>
 80136de:	3f01      	subs	r7, #1
 80136e0:	2f16      	cmp	r7, #22
 80136e2:	d852      	bhi.n	801378a <_dtoa_r+0x212>
 80136e4:	4b5d      	ldr	r3, [pc, #372]	@ (801385c <_dtoa_r+0x2e4>)
 80136e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80136ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80136f2:	f7ed fa13 	bl	8000b1c <__aeabi_dcmplt>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	d049      	beq.n	801378e <_dtoa_r+0x216>
 80136fa:	3f01      	subs	r7, #1
 80136fc:	2300      	movs	r3, #0
 80136fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8013700:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013702:	1b9b      	subs	r3, r3, r6
 8013704:	1e5a      	subs	r2, r3, #1
 8013706:	bf45      	ittet	mi
 8013708:	f1c3 0301 	rsbmi	r3, r3, #1
 801370c:	9300      	strmi	r3, [sp, #0]
 801370e:	2300      	movpl	r3, #0
 8013710:	2300      	movmi	r3, #0
 8013712:	9206      	str	r2, [sp, #24]
 8013714:	bf54      	ite	pl
 8013716:	9300      	strpl	r3, [sp, #0]
 8013718:	9306      	strmi	r3, [sp, #24]
 801371a:	2f00      	cmp	r7, #0
 801371c:	db39      	blt.n	8013792 <_dtoa_r+0x21a>
 801371e:	9b06      	ldr	r3, [sp, #24]
 8013720:	970d      	str	r7, [sp, #52]	@ 0x34
 8013722:	443b      	add	r3, r7
 8013724:	9306      	str	r3, [sp, #24]
 8013726:	2300      	movs	r3, #0
 8013728:	9308      	str	r3, [sp, #32]
 801372a:	9b07      	ldr	r3, [sp, #28]
 801372c:	2b09      	cmp	r3, #9
 801372e:	d863      	bhi.n	80137f8 <_dtoa_r+0x280>
 8013730:	2b05      	cmp	r3, #5
 8013732:	bfc4      	itt	gt
 8013734:	3b04      	subgt	r3, #4
 8013736:	9307      	strgt	r3, [sp, #28]
 8013738:	9b07      	ldr	r3, [sp, #28]
 801373a:	f1a3 0302 	sub.w	r3, r3, #2
 801373e:	bfcc      	ite	gt
 8013740:	2400      	movgt	r4, #0
 8013742:	2401      	movle	r4, #1
 8013744:	2b03      	cmp	r3, #3
 8013746:	d863      	bhi.n	8013810 <_dtoa_r+0x298>
 8013748:	e8df f003 	tbb	[pc, r3]
 801374c:	2b375452 	.word	0x2b375452
 8013750:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8013754:	441e      	add	r6, r3
 8013756:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801375a:	2b20      	cmp	r3, #32
 801375c:	bfc1      	itttt	gt
 801375e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013762:	409f      	lslgt	r7, r3
 8013764:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013768:	fa24 f303 	lsrgt.w	r3, r4, r3
 801376c:	bfd6      	itet	le
 801376e:	f1c3 0320 	rsble	r3, r3, #32
 8013772:	ea47 0003 	orrgt.w	r0, r7, r3
 8013776:	fa04 f003 	lslle.w	r0, r4, r3
 801377a:	f7ec fee3 	bl	8000544 <__aeabi_ui2d>
 801377e:	2201      	movs	r2, #1
 8013780:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013784:	3e01      	subs	r6, #1
 8013786:	9212      	str	r2, [sp, #72]	@ 0x48
 8013788:	e776      	b.n	8013678 <_dtoa_r+0x100>
 801378a:	2301      	movs	r3, #1
 801378c:	e7b7      	b.n	80136fe <_dtoa_r+0x186>
 801378e:	9010      	str	r0, [sp, #64]	@ 0x40
 8013790:	e7b6      	b.n	8013700 <_dtoa_r+0x188>
 8013792:	9b00      	ldr	r3, [sp, #0]
 8013794:	1bdb      	subs	r3, r3, r7
 8013796:	9300      	str	r3, [sp, #0]
 8013798:	427b      	negs	r3, r7
 801379a:	9308      	str	r3, [sp, #32]
 801379c:	2300      	movs	r3, #0
 801379e:	930d      	str	r3, [sp, #52]	@ 0x34
 80137a0:	e7c3      	b.n	801372a <_dtoa_r+0x1b2>
 80137a2:	2301      	movs	r3, #1
 80137a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80137a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137a8:	eb07 0b03 	add.w	fp, r7, r3
 80137ac:	f10b 0301 	add.w	r3, fp, #1
 80137b0:	2b01      	cmp	r3, #1
 80137b2:	9303      	str	r3, [sp, #12]
 80137b4:	bfb8      	it	lt
 80137b6:	2301      	movlt	r3, #1
 80137b8:	e006      	b.n	80137c8 <_dtoa_r+0x250>
 80137ba:	2301      	movs	r3, #1
 80137bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80137be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	dd28      	ble.n	8013816 <_dtoa_r+0x29e>
 80137c4:	469b      	mov	fp, r3
 80137c6:	9303      	str	r3, [sp, #12]
 80137c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80137cc:	2100      	movs	r1, #0
 80137ce:	2204      	movs	r2, #4
 80137d0:	f102 0514 	add.w	r5, r2, #20
 80137d4:	429d      	cmp	r5, r3
 80137d6:	d926      	bls.n	8013826 <_dtoa_r+0x2ae>
 80137d8:	6041      	str	r1, [r0, #4]
 80137da:	4648      	mov	r0, r9
 80137dc:	f000 fd9c 	bl	8014318 <_Balloc>
 80137e0:	4682      	mov	sl, r0
 80137e2:	2800      	cmp	r0, #0
 80137e4:	d142      	bne.n	801386c <_dtoa_r+0x2f4>
 80137e6:	4b1e      	ldr	r3, [pc, #120]	@ (8013860 <_dtoa_r+0x2e8>)
 80137e8:	4602      	mov	r2, r0
 80137ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80137ee:	e6da      	b.n	80135a6 <_dtoa_r+0x2e>
 80137f0:	2300      	movs	r3, #0
 80137f2:	e7e3      	b.n	80137bc <_dtoa_r+0x244>
 80137f4:	2300      	movs	r3, #0
 80137f6:	e7d5      	b.n	80137a4 <_dtoa_r+0x22c>
 80137f8:	2401      	movs	r4, #1
 80137fa:	2300      	movs	r3, #0
 80137fc:	9307      	str	r3, [sp, #28]
 80137fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8013800:	f04f 3bff 	mov.w	fp, #4294967295
 8013804:	2200      	movs	r2, #0
 8013806:	f8cd b00c 	str.w	fp, [sp, #12]
 801380a:	2312      	movs	r3, #18
 801380c:	920c      	str	r2, [sp, #48]	@ 0x30
 801380e:	e7db      	b.n	80137c8 <_dtoa_r+0x250>
 8013810:	2301      	movs	r3, #1
 8013812:	9309      	str	r3, [sp, #36]	@ 0x24
 8013814:	e7f4      	b.n	8013800 <_dtoa_r+0x288>
 8013816:	f04f 0b01 	mov.w	fp, #1
 801381a:	f8cd b00c 	str.w	fp, [sp, #12]
 801381e:	465b      	mov	r3, fp
 8013820:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8013824:	e7d0      	b.n	80137c8 <_dtoa_r+0x250>
 8013826:	3101      	adds	r1, #1
 8013828:	0052      	lsls	r2, r2, #1
 801382a:	e7d1      	b.n	80137d0 <_dtoa_r+0x258>
 801382c:	f3af 8000 	nop.w
 8013830:	636f4361 	.word	0x636f4361
 8013834:	3fd287a7 	.word	0x3fd287a7
 8013838:	8b60c8b3 	.word	0x8b60c8b3
 801383c:	3fc68a28 	.word	0x3fc68a28
 8013840:	509f79fb 	.word	0x509f79fb
 8013844:	3fd34413 	.word	0x3fd34413
 8013848:	080167f5 	.word	0x080167f5
 801384c:	0801680c 	.word	0x0801680c
 8013850:	7ff00000 	.word	0x7ff00000
 8013854:	080167c5 	.word	0x080167c5
 8013858:	3ff80000 	.word	0x3ff80000
 801385c:	08016960 	.word	0x08016960
 8013860:	08016864 	.word	0x08016864
 8013864:	080167f1 	.word	0x080167f1
 8013868:	080167c4 	.word	0x080167c4
 801386c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013870:	6018      	str	r0, [r3, #0]
 8013872:	9b03      	ldr	r3, [sp, #12]
 8013874:	2b0e      	cmp	r3, #14
 8013876:	f200 80a1 	bhi.w	80139bc <_dtoa_r+0x444>
 801387a:	2c00      	cmp	r4, #0
 801387c:	f000 809e 	beq.w	80139bc <_dtoa_r+0x444>
 8013880:	2f00      	cmp	r7, #0
 8013882:	dd33      	ble.n	80138ec <_dtoa_r+0x374>
 8013884:	4b9c      	ldr	r3, [pc, #624]	@ (8013af8 <_dtoa_r+0x580>)
 8013886:	f007 020f 	and.w	r2, r7, #15
 801388a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801388e:	ed93 7b00 	vldr	d7, [r3]
 8013892:	05f8      	lsls	r0, r7, #23
 8013894:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8013898:	ea4f 1427 	mov.w	r4, r7, asr #4
 801389c:	d516      	bpl.n	80138cc <_dtoa_r+0x354>
 801389e:	4b97      	ldr	r3, [pc, #604]	@ (8013afc <_dtoa_r+0x584>)
 80138a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80138a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80138a8:	f7ec fff0 	bl	800088c <__aeabi_ddiv>
 80138ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138b0:	f004 040f 	and.w	r4, r4, #15
 80138b4:	2603      	movs	r6, #3
 80138b6:	4d91      	ldr	r5, [pc, #580]	@ (8013afc <_dtoa_r+0x584>)
 80138b8:	b954      	cbnz	r4, 80138d0 <_dtoa_r+0x358>
 80138ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80138be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80138c2:	f7ec ffe3 	bl	800088c <__aeabi_ddiv>
 80138c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138ca:	e028      	b.n	801391e <_dtoa_r+0x3a6>
 80138cc:	2602      	movs	r6, #2
 80138ce:	e7f2      	b.n	80138b6 <_dtoa_r+0x33e>
 80138d0:	07e1      	lsls	r1, r4, #31
 80138d2:	d508      	bpl.n	80138e6 <_dtoa_r+0x36e>
 80138d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80138d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80138dc:	f7ec feac 	bl	8000638 <__aeabi_dmul>
 80138e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80138e4:	3601      	adds	r6, #1
 80138e6:	1064      	asrs	r4, r4, #1
 80138e8:	3508      	adds	r5, #8
 80138ea:	e7e5      	b.n	80138b8 <_dtoa_r+0x340>
 80138ec:	f000 80af 	beq.w	8013a4e <_dtoa_r+0x4d6>
 80138f0:	427c      	negs	r4, r7
 80138f2:	4b81      	ldr	r3, [pc, #516]	@ (8013af8 <_dtoa_r+0x580>)
 80138f4:	4d81      	ldr	r5, [pc, #516]	@ (8013afc <_dtoa_r+0x584>)
 80138f6:	f004 020f 	and.w	r2, r4, #15
 80138fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80138fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013902:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013906:	f7ec fe97 	bl	8000638 <__aeabi_dmul>
 801390a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801390e:	1124      	asrs	r4, r4, #4
 8013910:	2300      	movs	r3, #0
 8013912:	2602      	movs	r6, #2
 8013914:	2c00      	cmp	r4, #0
 8013916:	f040 808f 	bne.w	8013a38 <_dtoa_r+0x4c0>
 801391a:	2b00      	cmp	r3, #0
 801391c:	d1d3      	bne.n	80138c6 <_dtoa_r+0x34e>
 801391e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013920:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013924:	2b00      	cmp	r3, #0
 8013926:	f000 8094 	beq.w	8013a52 <_dtoa_r+0x4da>
 801392a:	4b75      	ldr	r3, [pc, #468]	@ (8013b00 <_dtoa_r+0x588>)
 801392c:	2200      	movs	r2, #0
 801392e:	4620      	mov	r0, r4
 8013930:	4629      	mov	r1, r5
 8013932:	f7ed f8f3 	bl	8000b1c <__aeabi_dcmplt>
 8013936:	2800      	cmp	r0, #0
 8013938:	f000 808b 	beq.w	8013a52 <_dtoa_r+0x4da>
 801393c:	9b03      	ldr	r3, [sp, #12]
 801393e:	2b00      	cmp	r3, #0
 8013940:	f000 8087 	beq.w	8013a52 <_dtoa_r+0x4da>
 8013944:	f1bb 0f00 	cmp.w	fp, #0
 8013948:	dd34      	ble.n	80139b4 <_dtoa_r+0x43c>
 801394a:	4620      	mov	r0, r4
 801394c:	4b6d      	ldr	r3, [pc, #436]	@ (8013b04 <_dtoa_r+0x58c>)
 801394e:	2200      	movs	r2, #0
 8013950:	4629      	mov	r1, r5
 8013952:	f7ec fe71 	bl	8000638 <__aeabi_dmul>
 8013956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801395a:	f107 38ff 	add.w	r8, r7, #4294967295
 801395e:	3601      	adds	r6, #1
 8013960:	465c      	mov	r4, fp
 8013962:	4630      	mov	r0, r6
 8013964:	f7ec fdfe 	bl	8000564 <__aeabi_i2d>
 8013968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801396c:	f7ec fe64 	bl	8000638 <__aeabi_dmul>
 8013970:	4b65      	ldr	r3, [pc, #404]	@ (8013b08 <_dtoa_r+0x590>)
 8013972:	2200      	movs	r2, #0
 8013974:	f7ec fcaa 	bl	80002cc <__adddf3>
 8013978:	4605      	mov	r5, r0
 801397a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801397e:	2c00      	cmp	r4, #0
 8013980:	d16a      	bne.n	8013a58 <_dtoa_r+0x4e0>
 8013982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013986:	4b61      	ldr	r3, [pc, #388]	@ (8013b0c <_dtoa_r+0x594>)
 8013988:	2200      	movs	r2, #0
 801398a:	f7ec fc9d 	bl	80002c8 <__aeabi_dsub>
 801398e:	4602      	mov	r2, r0
 8013990:	460b      	mov	r3, r1
 8013992:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013996:	462a      	mov	r2, r5
 8013998:	4633      	mov	r3, r6
 801399a:	f7ed f8dd 	bl	8000b58 <__aeabi_dcmpgt>
 801399e:	2800      	cmp	r0, #0
 80139a0:	f040 8298 	bne.w	8013ed4 <_dtoa_r+0x95c>
 80139a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80139a8:	462a      	mov	r2, r5
 80139aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80139ae:	f7ed f8b5 	bl	8000b1c <__aeabi_dcmplt>
 80139b2:	bb38      	cbnz	r0, 8013a04 <_dtoa_r+0x48c>
 80139b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80139b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80139bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80139be:	2b00      	cmp	r3, #0
 80139c0:	f2c0 8157 	blt.w	8013c72 <_dtoa_r+0x6fa>
 80139c4:	2f0e      	cmp	r7, #14
 80139c6:	f300 8154 	bgt.w	8013c72 <_dtoa_r+0x6fa>
 80139ca:	4b4b      	ldr	r3, [pc, #300]	@ (8013af8 <_dtoa_r+0x580>)
 80139cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80139d0:	ed93 7b00 	vldr	d7, [r3]
 80139d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	ed8d 7b00 	vstr	d7, [sp]
 80139dc:	f280 80e5 	bge.w	8013baa <_dtoa_r+0x632>
 80139e0:	9b03      	ldr	r3, [sp, #12]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	f300 80e1 	bgt.w	8013baa <_dtoa_r+0x632>
 80139e8:	d10c      	bne.n	8013a04 <_dtoa_r+0x48c>
 80139ea:	4b48      	ldr	r3, [pc, #288]	@ (8013b0c <_dtoa_r+0x594>)
 80139ec:	2200      	movs	r2, #0
 80139ee:	ec51 0b17 	vmov	r0, r1, d7
 80139f2:	f7ec fe21 	bl	8000638 <__aeabi_dmul>
 80139f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139fa:	f7ed f8a3 	bl	8000b44 <__aeabi_dcmpge>
 80139fe:	2800      	cmp	r0, #0
 8013a00:	f000 8266 	beq.w	8013ed0 <_dtoa_r+0x958>
 8013a04:	2400      	movs	r4, #0
 8013a06:	4625      	mov	r5, r4
 8013a08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a0a:	4656      	mov	r6, sl
 8013a0c:	ea6f 0803 	mvn.w	r8, r3
 8013a10:	2700      	movs	r7, #0
 8013a12:	4621      	mov	r1, r4
 8013a14:	4648      	mov	r0, r9
 8013a16:	f000 fcbf 	bl	8014398 <_Bfree>
 8013a1a:	2d00      	cmp	r5, #0
 8013a1c:	f000 80bd 	beq.w	8013b9a <_dtoa_r+0x622>
 8013a20:	b12f      	cbz	r7, 8013a2e <_dtoa_r+0x4b6>
 8013a22:	42af      	cmp	r7, r5
 8013a24:	d003      	beq.n	8013a2e <_dtoa_r+0x4b6>
 8013a26:	4639      	mov	r1, r7
 8013a28:	4648      	mov	r0, r9
 8013a2a:	f000 fcb5 	bl	8014398 <_Bfree>
 8013a2e:	4629      	mov	r1, r5
 8013a30:	4648      	mov	r0, r9
 8013a32:	f000 fcb1 	bl	8014398 <_Bfree>
 8013a36:	e0b0      	b.n	8013b9a <_dtoa_r+0x622>
 8013a38:	07e2      	lsls	r2, r4, #31
 8013a3a:	d505      	bpl.n	8013a48 <_dtoa_r+0x4d0>
 8013a3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013a40:	f7ec fdfa 	bl	8000638 <__aeabi_dmul>
 8013a44:	3601      	adds	r6, #1
 8013a46:	2301      	movs	r3, #1
 8013a48:	1064      	asrs	r4, r4, #1
 8013a4a:	3508      	adds	r5, #8
 8013a4c:	e762      	b.n	8013914 <_dtoa_r+0x39c>
 8013a4e:	2602      	movs	r6, #2
 8013a50:	e765      	b.n	801391e <_dtoa_r+0x3a6>
 8013a52:	9c03      	ldr	r4, [sp, #12]
 8013a54:	46b8      	mov	r8, r7
 8013a56:	e784      	b.n	8013962 <_dtoa_r+0x3ea>
 8013a58:	4b27      	ldr	r3, [pc, #156]	@ (8013af8 <_dtoa_r+0x580>)
 8013a5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013a5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013a60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013a64:	4454      	add	r4, sl
 8013a66:	2900      	cmp	r1, #0
 8013a68:	d054      	beq.n	8013b14 <_dtoa_r+0x59c>
 8013a6a:	4929      	ldr	r1, [pc, #164]	@ (8013b10 <_dtoa_r+0x598>)
 8013a6c:	2000      	movs	r0, #0
 8013a6e:	f7ec ff0d 	bl	800088c <__aeabi_ddiv>
 8013a72:	4633      	mov	r3, r6
 8013a74:	462a      	mov	r2, r5
 8013a76:	f7ec fc27 	bl	80002c8 <__aeabi_dsub>
 8013a7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013a7e:	4656      	mov	r6, sl
 8013a80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a84:	f7ed f888 	bl	8000b98 <__aeabi_d2iz>
 8013a88:	4605      	mov	r5, r0
 8013a8a:	f7ec fd6b 	bl	8000564 <__aeabi_i2d>
 8013a8e:	4602      	mov	r2, r0
 8013a90:	460b      	mov	r3, r1
 8013a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a96:	f7ec fc17 	bl	80002c8 <__aeabi_dsub>
 8013a9a:	3530      	adds	r5, #48	@ 0x30
 8013a9c:	4602      	mov	r2, r0
 8013a9e:	460b      	mov	r3, r1
 8013aa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013aa4:	f806 5b01 	strb.w	r5, [r6], #1
 8013aa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013aac:	f7ed f836 	bl	8000b1c <__aeabi_dcmplt>
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	d172      	bne.n	8013b9a <_dtoa_r+0x622>
 8013ab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ab8:	4911      	ldr	r1, [pc, #68]	@ (8013b00 <_dtoa_r+0x588>)
 8013aba:	2000      	movs	r0, #0
 8013abc:	f7ec fc04 	bl	80002c8 <__aeabi_dsub>
 8013ac0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013ac4:	f7ed f82a 	bl	8000b1c <__aeabi_dcmplt>
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	f040 80b4 	bne.w	8013c36 <_dtoa_r+0x6be>
 8013ace:	42a6      	cmp	r6, r4
 8013ad0:	f43f af70 	beq.w	80139b4 <_dtoa_r+0x43c>
 8013ad4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8013b04 <_dtoa_r+0x58c>)
 8013ada:	2200      	movs	r2, #0
 8013adc:	f7ec fdac 	bl	8000638 <__aeabi_dmul>
 8013ae0:	4b08      	ldr	r3, [pc, #32]	@ (8013b04 <_dtoa_r+0x58c>)
 8013ae2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013aec:	f7ec fda4 	bl	8000638 <__aeabi_dmul>
 8013af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013af4:	e7c4      	b.n	8013a80 <_dtoa_r+0x508>
 8013af6:	bf00      	nop
 8013af8:	08016960 	.word	0x08016960
 8013afc:	08016938 	.word	0x08016938
 8013b00:	3ff00000 	.word	0x3ff00000
 8013b04:	40240000 	.word	0x40240000
 8013b08:	401c0000 	.word	0x401c0000
 8013b0c:	40140000 	.word	0x40140000
 8013b10:	3fe00000 	.word	0x3fe00000
 8013b14:	4631      	mov	r1, r6
 8013b16:	4628      	mov	r0, r5
 8013b18:	f7ec fd8e 	bl	8000638 <__aeabi_dmul>
 8013b1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013b20:	9413      	str	r4, [sp, #76]	@ 0x4c
 8013b22:	4656      	mov	r6, sl
 8013b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b28:	f7ed f836 	bl	8000b98 <__aeabi_d2iz>
 8013b2c:	4605      	mov	r5, r0
 8013b2e:	f7ec fd19 	bl	8000564 <__aeabi_i2d>
 8013b32:	4602      	mov	r2, r0
 8013b34:	460b      	mov	r3, r1
 8013b36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b3a:	f7ec fbc5 	bl	80002c8 <__aeabi_dsub>
 8013b3e:	3530      	adds	r5, #48	@ 0x30
 8013b40:	f806 5b01 	strb.w	r5, [r6], #1
 8013b44:	4602      	mov	r2, r0
 8013b46:	460b      	mov	r3, r1
 8013b48:	42a6      	cmp	r6, r4
 8013b4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b4e:	f04f 0200 	mov.w	r2, #0
 8013b52:	d124      	bne.n	8013b9e <_dtoa_r+0x626>
 8013b54:	4baf      	ldr	r3, [pc, #700]	@ (8013e14 <_dtoa_r+0x89c>)
 8013b56:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013b5a:	f7ec fbb7 	bl	80002cc <__adddf3>
 8013b5e:	4602      	mov	r2, r0
 8013b60:	460b      	mov	r3, r1
 8013b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b66:	f7ec fff7 	bl	8000b58 <__aeabi_dcmpgt>
 8013b6a:	2800      	cmp	r0, #0
 8013b6c:	d163      	bne.n	8013c36 <_dtoa_r+0x6be>
 8013b6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013b72:	49a8      	ldr	r1, [pc, #672]	@ (8013e14 <_dtoa_r+0x89c>)
 8013b74:	2000      	movs	r0, #0
 8013b76:	f7ec fba7 	bl	80002c8 <__aeabi_dsub>
 8013b7a:	4602      	mov	r2, r0
 8013b7c:	460b      	mov	r3, r1
 8013b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b82:	f7ec ffcb 	bl	8000b1c <__aeabi_dcmplt>
 8013b86:	2800      	cmp	r0, #0
 8013b88:	f43f af14 	beq.w	80139b4 <_dtoa_r+0x43c>
 8013b8c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8013b8e:	1e73      	subs	r3, r6, #1
 8013b90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013b92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013b96:	2b30      	cmp	r3, #48	@ 0x30
 8013b98:	d0f8      	beq.n	8013b8c <_dtoa_r+0x614>
 8013b9a:	4647      	mov	r7, r8
 8013b9c:	e03b      	b.n	8013c16 <_dtoa_r+0x69e>
 8013b9e:	4b9e      	ldr	r3, [pc, #632]	@ (8013e18 <_dtoa_r+0x8a0>)
 8013ba0:	f7ec fd4a 	bl	8000638 <__aeabi_dmul>
 8013ba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ba8:	e7bc      	b.n	8013b24 <_dtoa_r+0x5ac>
 8013baa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013bae:	4656      	mov	r6, sl
 8013bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bb4:	4620      	mov	r0, r4
 8013bb6:	4629      	mov	r1, r5
 8013bb8:	f7ec fe68 	bl	800088c <__aeabi_ddiv>
 8013bbc:	f7ec ffec 	bl	8000b98 <__aeabi_d2iz>
 8013bc0:	4680      	mov	r8, r0
 8013bc2:	f7ec fccf 	bl	8000564 <__aeabi_i2d>
 8013bc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bca:	f7ec fd35 	bl	8000638 <__aeabi_dmul>
 8013bce:	4602      	mov	r2, r0
 8013bd0:	460b      	mov	r3, r1
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	4629      	mov	r1, r5
 8013bd6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013bda:	f7ec fb75 	bl	80002c8 <__aeabi_dsub>
 8013bde:	f806 4b01 	strb.w	r4, [r6], #1
 8013be2:	9d03      	ldr	r5, [sp, #12]
 8013be4:	eba6 040a 	sub.w	r4, r6, sl
 8013be8:	42a5      	cmp	r5, r4
 8013bea:	4602      	mov	r2, r0
 8013bec:	460b      	mov	r3, r1
 8013bee:	d133      	bne.n	8013c58 <_dtoa_r+0x6e0>
 8013bf0:	f7ec fb6c 	bl	80002cc <__adddf3>
 8013bf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bf8:	4604      	mov	r4, r0
 8013bfa:	460d      	mov	r5, r1
 8013bfc:	f7ec ffac 	bl	8000b58 <__aeabi_dcmpgt>
 8013c00:	b9c0      	cbnz	r0, 8013c34 <_dtoa_r+0x6bc>
 8013c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c06:	4620      	mov	r0, r4
 8013c08:	4629      	mov	r1, r5
 8013c0a:	f7ec ff7d 	bl	8000b08 <__aeabi_dcmpeq>
 8013c0e:	b110      	cbz	r0, 8013c16 <_dtoa_r+0x69e>
 8013c10:	f018 0f01 	tst.w	r8, #1
 8013c14:	d10e      	bne.n	8013c34 <_dtoa_r+0x6bc>
 8013c16:	9902      	ldr	r1, [sp, #8]
 8013c18:	4648      	mov	r0, r9
 8013c1a:	f000 fbbd 	bl	8014398 <_Bfree>
 8013c1e:	2300      	movs	r3, #0
 8013c20:	7033      	strb	r3, [r6, #0]
 8013c22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c24:	3701      	adds	r7, #1
 8013c26:	601f      	str	r7, [r3, #0]
 8013c28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	f000 824b 	beq.w	80140c6 <_dtoa_r+0xb4e>
 8013c30:	601e      	str	r6, [r3, #0]
 8013c32:	e248      	b.n	80140c6 <_dtoa_r+0xb4e>
 8013c34:	46b8      	mov	r8, r7
 8013c36:	4633      	mov	r3, r6
 8013c38:	461e      	mov	r6, r3
 8013c3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c3e:	2a39      	cmp	r2, #57	@ 0x39
 8013c40:	d106      	bne.n	8013c50 <_dtoa_r+0x6d8>
 8013c42:	459a      	cmp	sl, r3
 8013c44:	d1f8      	bne.n	8013c38 <_dtoa_r+0x6c0>
 8013c46:	2230      	movs	r2, #48	@ 0x30
 8013c48:	f108 0801 	add.w	r8, r8, #1
 8013c4c:	f88a 2000 	strb.w	r2, [sl]
 8013c50:	781a      	ldrb	r2, [r3, #0]
 8013c52:	3201      	adds	r2, #1
 8013c54:	701a      	strb	r2, [r3, #0]
 8013c56:	e7a0      	b.n	8013b9a <_dtoa_r+0x622>
 8013c58:	4b6f      	ldr	r3, [pc, #444]	@ (8013e18 <_dtoa_r+0x8a0>)
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	f7ec fcec 	bl	8000638 <__aeabi_dmul>
 8013c60:	2200      	movs	r2, #0
 8013c62:	2300      	movs	r3, #0
 8013c64:	4604      	mov	r4, r0
 8013c66:	460d      	mov	r5, r1
 8013c68:	f7ec ff4e 	bl	8000b08 <__aeabi_dcmpeq>
 8013c6c:	2800      	cmp	r0, #0
 8013c6e:	d09f      	beq.n	8013bb0 <_dtoa_r+0x638>
 8013c70:	e7d1      	b.n	8013c16 <_dtoa_r+0x69e>
 8013c72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c74:	2a00      	cmp	r2, #0
 8013c76:	f000 80ea 	beq.w	8013e4e <_dtoa_r+0x8d6>
 8013c7a:	9a07      	ldr	r2, [sp, #28]
 8013c7c:	2a01      	cmp	r2, #1
 8013c7e:	f300 80cd 	bgt.w	8013e1c <_dtoa_r+0x8a4>
 8013c82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013c84:	2a00      	cmp	r2, #0
 8013c86:	f000 80c1 	beq.w	8013e0c <_dtoa_r+0x894>
 8013c8a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013c8e:	9c08      	ldr	r4, [sp, #32]
 8013c90:	9e00      	ldr	r6, [sp, #0]
 8013c92:	9a00      	ldr	r2, [sp, #0]
 8013c94:	441a      	add	r2, r3
 8013c96:	9200      	str	r2, [sp, #0]
 8013c98:	9a06      	ldr	r2, [sp, #24]
 8013c9a:	2101      	movs	r1, #1
 8013c9c:	441a      	add	r2, r3
 8013c9e:	4648      	mov	r0, r9
 8013ca0:	9206      	str	r2, [sp, #24]
 8013ca2:	f000 fc2d 	bl	8014500 <__i2b>
 8013ca6:	4605      	mov	r5, r0
 8013ca8:	b166      	cbz	r6, 8013cc4 <_dtoa_r+0x74c>
 8013caa:	9b06      	ldr	r3, [sp, #24]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	dd09      	ble.n	8013cc4 <_dtoa_r+0x74c>
 8013cb0:	42b3      	cmp	r3, r6
 8013cb2:	9a00      	ldr	r2, [sp, #0]
 8013cb4:	bfa8      	it	ge
 8013cb6:	4633      	movge	r3, r6
 8013cb8:	1ad2      	subs	r2, r2, r3
 8013cba:	9200      	str	r2, [sp, #0]
 8013cbc:	9a06      	ldr	r2, [sp, #24]
 8013cbe:	1af6      	subs	r6, r6, r3
 8013cc0:	1ad3      	subs	r3, r2, r3
 8013cc2:	9306      	str	r3, [sp, #24]
 8013cc4:	9b08      	ldr	r3, [sp, #32]
 8013cc6:	b30b      	cbz	r3, 8013d0c <_dtoa_r+0x794>
 8013cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	f000 80c6 	beq.w	8013e5c <_dtoa_r+0x8e4>
 8013cd0:	2c00      	cmp	r4, #0
 8013cd2:	f000 80c0 	beq.w	8013e56 <_dtoa_r+0x8de>
 8013cd6:	4629      	mov	r1, r5
 8013cd8:	4622      	mov	r2, r4
 8013cda:	4648      	mov	r0, r9
 8013cdc:	f000 fcc8 	bl	8014670 <__pow5mult>
 8013ce0:	9a02      	ldr	r2, [sp, #8]
 8013ce2:	4601      	mov	r1, r0
 8013ce4:	4605      	mov	r5, r0
 8013ce6:	4648      	mov	r0, r9
 8013ce8:	f000 fc20 	bl	801452c <__multiply>
 8013cec:	9902      	ldr	r1, [sp, #8]
 8013cee:	4680      	mov	r8, r0
 8013cf0:	4648      	mov	r0, r9
 8013cf2:	f000 fb51 	bl	8014398 <_Bfree>
 8013cf6:	9b08      	ldr	r3, [sp, #32]
 8013cf8:	1b1b      	subs	r3, r3, r4
 8013cfa:	9308      	str	r3, [sp, #32]
 8013cfc:	f000 80b1 	beq.w	8013e62 <_dtoa_r+0x8ea>
 8013d00:	9a08      	ldr	r2, [sp, #32]
 8013d02:	4641      	mov	r1, r8
 8013d04:	4648      	mov	r0, r9
 8013d06:	f000 fcb3 	bl	8014670 <__pow5mult>
 8013d0a:	9002      	str	r0, [sp, #8]
 8013d0c:	2101      	movs	r1, #1
 8013d0e:	4648      	mov	r0, r9
 8013d10:	f000 fbf6 	bl	8014500 <__i2b>
 8013d14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d16:	4604      	mov	r4, r0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	f000 81d8 	beq.w	80140ce <_dtoa_r+0xb56>
 8013d1e:	461a      	mov	r2, r3
 8013d20:	4601      	mov	r1, r0
 8013d22:	4648      	mov	r0, r9
 8013d24:	f000 fca4 	bl	8014670 <__pow5mult>
 8013d28:	9b07      	ldr	r3, [sp, #28]
 8013d2a:	2b01      	cmp	r3, #1
 8013d2c:	4604      	mov	r4, r0
 8013d2e:	f300 809f 	bgt.w	8013e70 <_dtoa_r+0x8f8>
 8013d32:	9b04      	ldr	r3, [sp, #16]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	f040 8097 	bne.w	8013e68 <_dtoa_r+0x8f0>
 8013d3a:	9b05      	ldr	r3, [sp, #20]
 8013d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	f040 8093 	bne.w	8013e6c <_dtoa_r+0x8f4>
 8013d46:	9b05      	ldr	r3, [sp, #20]
 8013d48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013d4c:	0d1b      	lsrs	r3, r3, #20
 8013d4e:	051b      	lsls	r3, r3, #20
 8013d50:	b133      	cbz	r3, 8013d60 <_dtoa_r+0x7e8>
 8013d52:	9b00      	ldr	r3, [sp, #0]
 8013d54:	3301      	adds	r3, #1
 8013d56:	9300      	str	r3, [sp, #0]
 8013d58:	9b06      	ldr	r3, [sp, #24]
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	9306      	str	r3, [sp, #24]
 8013d5e:	2301      	movs	r3, #1
 8013d60:	9308      	str	r3, [sp, #32]
 8013d62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	f000 81b8 	beq.w	80140da <_dtoa_r+0xb62>
 8013d6a:	6923      	ldr	r3, [r4, #16]
 8013d6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013d70:	6918      	ldr	r0, [r3, #16]
 8013d72:	f000 fb79 	bl	8014468 <__hi0bits>
 8013d76:	f1c0 0020 	rsb	r0, r0, #32
 8013d7a:	9b06      	ldr	r3, [sp, #24]
 8013d7c:	4418      	add	r0, r3
 8013d7e:	f010 001f 	ands.w	r0, r0, #31
 8013d82:	f000 8082 	beq.w	8013e8a <_dtoa_r+0x912>
 8013d86:	f1c0 0320 	rsb	r3, r0, #32
 8013d8a:	2b04      	cmp	r3, #4
 8013d8c:	dd73      	ble.n	8013e76 <_dtoa_r+0x8fe>
 8013d8e:	9b00      	ldr	r3, [sp, #0]
 8013d90:	f1c0 001c 	rsb	r0, r0, #28
 8013d94:	4403      	add	r3, r0
 8013d96:	9300      	str	r3, [sp, #0]
 8013d98:	9b06      	ldr	r3, [sp, #24]
 8013d9a:	4403      	add	r3, r0
 8013d9c:	4406      	add	r6, r0
 8013d9e:	9306      	str	r3, [sp, #24]
 8013da0:	9b00      	ldr	r3, [sp, #0]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	dd05      	ble.n	8013db2 <_dtoa_r+0x83a>
 8013da6:	9902      	ldr	r1, [sp, #8]
 8013da8:	461a      	mov	r2, r3
 8013daa:	4648      	mov	r0, r9
 8013dac:	f000 fcba 	bl	8014724 <__lshift>
 8013db0:	9002      	str	r0, [sp, #8]
 8013db2:	9b06      	ldr	r3, [sp, #24]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	dd05      	ble.n	8013dc4 <_dtoa_r+0x84c>
 8013db8:	4621      	mov	r1, r4
 8013dba:	461a      	mov	r2, r3
 8013dbc:	4648      	mov	r0, r9
 8013dbe:	f000 fcb1 	bl	8014724 <__lshift>
 8013dc2:	4604      	mov	r4, r0
 8013dc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d061      	beq.n	8013e8e <_dtoa_r+0x916>
 8013dca:	9802      	ldr	r0, [sp, #8]
 8013dcc:	4621      	mov	r1, r4
 8013dce:	f000 fd15 	bl	80147fc <__mcmp>
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	da5b      	bge.n	8013e8e <_dtoa_r+0x916>
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	9902      	ldr	r1, [sp, #8]
 8013dda:	220a      	movs	r2, #10
 8013ddc:	4648      	mov	r0, r9
 8013dde:	f000 fafd 	bl	80143dc <__multadd>
 8013de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013de4:	9002      	str	r0, [sp, #8]
 8013de6:	f107 38ff 	add.w	r8, r7, #4294967295
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	f000 8177 	beq.w	80140de <_dtoa_r+0xb66>
 8013df0:	4629      	mov	r1, r5
 8013df2:	2300      	movs	r3, #0
 8013df4:	220a      	movs	r2, #10
 8013df6:	4648      	mov	r0, r9
 8013df8:	f000 faf0 	bl	80143dc <__multadd>
 8013dfc:	f1bb 0f00 	cmp.w	fp, #0
 8013e00:	4605      	mov	r5, r0
 8013e02:	dc6f      	bgt.n	8013ee4 <_dtoa_r+0x96c>
 8013e04:	9b07      	ldr	r3, [sp, #28]
 8013e06:	2b02      	cmp	r3, #2
 8013e08:	dc49      	bgt.n	8013e9e <_dtoa_r+0x926>
 8013e0a:	e06b      	b.n	8013ee4 <_dtoa_r+0x96c>
 8013e0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013e0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013e12:	e73c      	b.n	8013c8e <_dtoa_r+0x716>
 8013e14:	3fe00000 	.word	0x3fe00000
 8013e18:	40240000 	.word	0x40240000
 8013e1c:	9b03      	ldr	r3, [sp, #12]
 8013e1e:	1e5c      	subs	r4, r3, #1
 8013e20:	9b08      	ldr	r3, [sp, #32]
 8013e22:	42a3      	cmp	r3, r4
 8013e24:	db09      	blt.n	8013e3a <_dtoa_r+0x8c2>
 8013e26:	1b1c      	subs	r4, r3, r4
 8013e28:	9b03      	ldr	r3, [sp, #12]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	f6bf af30 	bge.w	8013c90 <_dtoa_r+0x718>
 8013e30:	9b00      	ldr	r3, [sp, #0]
 8013e32:	9a03      	ldr	r2, [sp, #12]
 8013e34:	1a9e      	subs	r6, r3, r2
 8013e36:	2300      	movs	r3, #0
 8013e38:	e72b      	b.n	8013c92 <_dtoa_r+0x71a>
 8013e3a:	9b08      	ldr	r3, [sp, #32]
 8013e3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013e3e:	9408      	str	r4, [sp, #32]
 8013e40:	1ae3      	subs	r3, r4, r3
 8013e42:	441a      	add	r2, r3
 8013e44:	9e00      	ldr	r6, [sp, #0]
 8013e46:	9b03      	ldr	r3, [sp, #12]
 8013e48:	920d      	str	r2, [sp, #52]	@ 0x34
 8013e4a:	2400      	movs	r4, #0
 8013e4c:	e721      	b.n	8013c92 <_dtoa_r+0x71a>
 8013e4e:	9c08      	ldr	r4, [sp, #32]
 8013e50:	9e00      	ldr	r6, [sp, #0]
 8013e52:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8013e54:	e728      	b.n	8013ca8 <_dtoa_r+0x730>
 8013e56:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013e5a:	e751      	b.n	8013d00 <_dtoa_r+0x788>
 8013e5c:	9a08      	ldr	r2, [sp, #32]
 8013e5e:	9902      	ldr	r1, [sp, #8]
 8013e60:	e750      	b.n	8013d04 <_dtoa_r+0x78c>
 8013e62:	f8cd 8008 	str.w	r8, [sp, #8]
 8013e66:	e751      	b.n	8013d0c <_dtoa_r+0x794>
 8013e68:	2300      	movs	r3, #0
 8013e6a:	e779      	b.n	8013d60 <_dtoa_r+0x7e8>
 8013e6c:	9b04      	ldr	r3, [sp, #16]
 8013e6e:	e777      	b.n	8013d60 <_dtoa_r+0x7e8>
 8013e70:	2300      	movs	r3, #0
 8013e72:	9308      	str	r3, [sp, #32]
 8013e74:	e779      	b.n	8013d6a <_dtoa_r+0x7f2>
 8013e76:	d093      	beq.n	8013da0 <_dtoa_r+0x828>
 8013e78:	9a00      	ldr	r2, [sp, #0]
 8013e7a:	331c      	adds	r3, #28
 8013e7c:	441a      	add	r2, r3
 8013e7e:	9200      	str	r2, [sp, #0]
 8013e80:	9a06      	ldr	r2, [sp, #24]
 8013e82:	441a      	add	r2, r3
 8013e84:	441e      	add	r6, r3
 8013e86:	9206      	str	r2, [sp, #24]
 8013e88:	e78a      	b.n	8013da0 <_dtoa_r+0x828>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	e7f4      	b.n	8013e78 <_dtoa_r+0x900>
 8013e8e:	9b03      	ldr	r3, [sp, #12]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	46b8      	mov	r8, r7
 8013e94:	dc20      	bgt.n	8013ed8 <_dtoa_r+0x960>
 8013e96:	469b      	mov	fp, r3
 8013e98:	9b07      	ldr	r3, [sp, #28]
 8013e9a:	2b02      	cmp	r3, #2
 8013e9c:	dd1e      	ble.n	8013edc <_dtoa_r+0x964>
 8013e9e:	f1bb 0f00 	cmp.w	fp, #0
 8013ea2:	f47f adb1 	bne.w	8013a08 <_dtoa_r+0x490>
 8013ea6:	4621      	mov	r1, r4
 8013ea8:	465b      	mov	r3, fp
 8013eaa:	2205      	movs	r2, #5
 8013eac:	4648      	mov	r0, r9
 8013eae:	f000 fa95 	bl	80143dc <__multadd>
 8013eb2:	4601      	mov	r1, r0
 8013eb4:	4604      	mov	r4, r0
 8013eb6:	9802      	ldr	r0, [sp, #8]
 8013eb8:	f000 fca0 	bl	80147fc <__mcmp>
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	f77f ada3 	ble.w	8013a08 <_dtoa_r+0x490>
 8013ec2:	4656      	mov	r6, sl
 8013ec4:	2331      	movs	r3, #49	@ 0x31
 8013ec6:	f806 3b01 	strb.w	r3, [r6], #1
 8013eca:	f108 0801 	add.w	r8, r8, #1
 8013ece:	e59f      	b.n	8013a10 <_dtoa_r+0x498>
 8013ed0:	9c03      	ldr	r4, [sp, #12]
 8013ed2:	46b8      	mov	r8, r7
 8013ed4:	4625      	mov	r5, r4
 8013ed6:	e7f4      	b.n	8013ec2 <_dtoa_r+0x94a>
 8013ed8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	f000 8101 	beq.w	80140e6 <_dtoa_r+0xb6e>
 8013ee4:	2e00      	cmp	r6, #0
 8013ee6:	dd05      	ble.n	8013ef4 <_dtoa_r+0x97c>
 8013ee8:	4629      	mov	r1, r5
 8013eea:	4632      	mov	r2, r6
 8013eec:	4648      	mov	r0, r9
 8013eee:	f000 fc19 	bl	8014724 <__lshift>
 8013ef2:	4605      	mov	r5, r0
 8013ef4:	9b08      	ldr	r3, [sp, #32]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d05c      	beq.n	8013fb4 <_dtoa_r+0xa3c>
 8013efa:	6869      	ldr	r1, [r5, #4]
 8013efc:	4648      	mov	r0, r9
 8013efe:	f000 fa0b 	bl	8014318 <_Balloc>
 8013f02:	4606      	mov	r6, r0
 8013f04:	b928      	cbnz	r0, 8013f12 <_dtoa_r+0x99a>
 8013f06:	4b82      	ldr	r3, [pc, #520]	@ (8014110 <_dtoa_r+0xb98>)
 8013f08:	4602      	mov	r2, r0
 8013f0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013f0e:	f7ff bb4a 	b.w	80135a6 <_dtoa_r+0x2e>
 8013f12:	692a      	ldr	r2, [r5, #16]
 8013f14:	3202      	adds	r2, #2
 8013f16:	0092      	lsls	r2, r2, #2
 8013f18:	f105 010c 	add.w	r1, r5, #12
 8013f1c:	300c      	adds	r0, #12
 8013f1e:	f7ff fa94 	bl	801344a <memcpy>
 8013f22:	2201      	movs	r2, #1
 8013f24:	4631      	mov	r1, r6
 8013f26:	4648      	mov	r0, r9
 8013f28:	f000 fbfc 	bl	8014724 <__lshift>
 8013f2c:	f10a 0301 	add.w	r3, sl, #1
 8013f30:	9300      	str	r3, [sp, #0]
 8013f32:	eb0a 030b 	add.w	r3, sl, fp
 8013f36:	9308      	str	r3, [sp, #32]
 8013f38:	9b04      	ldr	r3, [sp, #16]
 8013f3a:	f003 0301 	and.w	r3, r3, #1
 8013f3e:	462f      	mov	r7, r5
 8013f40:	9306      	str	r3, [sp, #24]
 8013f42:	4605      	mov	r5, r0
 8013f44:	9b00      	ldr	r3, [sp, #0]
 8013f46:	9802      	ldr	r0, [sp, #8]
 8013f48:	4621      	mov	r1, r4
 8013f4a:	f103 3bff 	add.w	fp, r3, #4294967295
 8013f4e:	f7ff fa8a 	bl	8013466 <quorem>
 8013f52:	4603      	mov	r3, r0
 8013f54:	3330      	adds	r3, #48	@ 0x30
 8013f56:	9003      	str	r0, [sp, #12]
 8013f58:	4639      	mov	r1, r7
 8013f5a:	9802      	ldr	r0, [sp, #8]
 8013f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f5e:	f000 fc4d 	bl	80147fc <__mcmp>
 8013f62:	462a      	mov	r2, r5
 8013f64:	9004      	str	r0, [sp, #16]
 8013f66:	4621      	mov	r1, r4
 8013f68:	4648      	mov	r0, r9
 8013f6a:	f000 fc63 	bl	8014834 <__mdiff>
 8013f6e:	68c2      	ldr	r2, [r0, #12]
 8013f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f72:	4606      	mov	r6, r0
 8013f74:	bb02      	cbnz	r2, 8013fb8 <_dtoa_r+0xa40>
 8013f76:	4601      	mov	r1, r0
 8013f78:	9802      	ldr	r0, [sp, #8]
 8013f7a:	f000 fc3f 	bl	80147fc <__mcmp>
 8013f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f80:	4602      	mov	r2, r0
 8013f82:	4631      	mov	r1, r6
 8013f84:	4648      	mov	r0, r9
 8013f86:	920c      	str	r2, [sp, #48]	@ 0x30
 8013f88:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f8a:	f000 fa05 	bl	8014398 <_Bfree>
 8013f8e:	9b07      	ldr	r3, [sp, #28]
 8013f90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013f92:	9e00      	ldr	r6, [sp, #0]
 8013f94:	ea42 0103 	orr.w	r1, r2, r3
 8013f98:	9b06      	ldr	r3, [sp, #24]
 8013f9a:	4319      	orrs	r1, r3
 8013f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f9e:	d10d      	bne.n	8013fbc <_dtoa_r+0xa44>
 8013fa0:	2b39      	cmp	r3, #57	@ 0x39
 8013fa2:	d027      	beq.n	8013ff4 <_dtoa_r+0xa7c>
 8013fa4:	9a04      	ldr	r2, [sp, #16]
 8013fa6:	2a00      	cmp	r2, #0
 8013fa8:	dd01      	ble.n	8013fae <_dtoa_r+0xa36>
 8013faa:	9b03      	ldr	r3, [sp, #12]
 8013fac:	3331      	adds	r3, #49	@ 0x31
 8013fae:	f88b 3000 	strb.w	r3, [fp]
 8013fb2:	e52e      	b.n	8013a12 <_dtoa_r+0x49a>
 8013fb4:	4628      	mov	r0, r5
 8013fb6:	e7b9      	b.n	8013f2c <_dtoa_r+0x9b4>
 8013fb8:	2201      	movs	r2, #1
 8013fba:	e7e2      	b.n	8013f82 <_dtoa_r+0xa0a>
 8013fbc:	9904      	ldr	r1, [sp, #16]
 8013fbe:	2900      	cmp	r1, #0
 8013fc0:	db04      	blt.n	8013fcc <_dtoa_r+0xa54>
 8013fc2:	9807      	ldr	r0, [sp, #28]
 8013fc4:	4301      	orrs	r1, r0
 8013fc6:	9806      	ldr	r0, [sp, #24]
 8013fc8:	4301      	orrs	r1, r0
 8013fca:	d120      	bne.n	801400e <_dtoa_r+0xa96>
 8013fcc:	2a00      	cmp	r2, #0
 8013fce:	ddee      	ble.n	8013fae <_dtoa_r+0xa36>
 8013fd0:	9902      	ldr	r1, [sp, #8]
 8013fd2:	9300      	str	r3, [sp, #0]
 8013fd4:	2201      	movs	r2, #1
 8013fd6:	4648      	mov	r0, r9
 8013fd8:	f000 fba4 	bl	8014724 <__lshift>
 8013fdc:	4621      	mov	r1, r4
 8013fde:	9002      	str	r0, [sp, #8]
 8013fe0:	f000 fc0c 	bl	80147fc <__mcmp>
 8013fe4:	2800      	cmp	r0, #0
 8013fe6:	9b00      	ldr	r3, [sp, #0]
 8013fe8:	dc02      	bgt.n	8013ff0 <_dtoa_r+0xa78>
 8013fea:	d1e0      	bne.n	8013fae <_dtoa_r+0xa36>
 8013fec:	07da      	lsls	r2, r3, #31
 8013fee:	d5de      	bpl.n	8013fae <_dtoa_r+0xa36>
 8013ff0:	2b39      	cmp	r3, #57	@ 0x39
 8013ff2:	d1da      	bne.n	8013faa <_dtoa_r+0xa32>
 8013ff4:	2339      	movs	r3, #57	@ 0x39
 8013ff6:	f88b 3000 	strb.w	r3, [fp]
 8013ffa:	4633      	mov	r3, r6
 8013ffc:	461e      	mov	r6, r3
 8013ffe:	3b01      	subs	r3, #1
 8014000:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014004:	2a39      	cmp	r2, #57	@ 0x39
 8014006:	d04e      	beq.n	80140a6 <_dtoa_r+0xb2e>
 8014008:	3201      	adds	r2, #1
 801400a:	701a      	strb	r2, [r3, #0]
 801400c:	e501      	b.n	8013a12 <_dtoa_r+0x49a>
 801400e:	2a00      	cmp	r2, #0
 8014010:	dd03      	ble.n	801401a <_dtoa_r+0xaa2>
 8014012:	2b39      	cmp	r3, #57	@ 0x39
 8014014:	d0ee      	beq.n	8013ff4 <_dtoa_r+0xa7c>
 8014016:	3301      	adds	r3, #1
 8014018:	e7c9      	b.n	8013fae <_dtoa_r+0xa36>
 801401a:	9a00      	ldr	r2, [sp, #0]
 801401c:	9908      	ldr	r1, [sp, #32]
 801401e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014022:	428a      	cmp	r2, r1
 8014024:	d028      	beq.n	8014078 <_dtoa_r+0xb00>
 8014026:	9902      	ldr	r1, [sp, #8]
 8014028:	2300      	movs	r3, #0
 801402a:	220a      	movs	r2, #10
 801402c:	4648      	mov	r0, r9
 801402e:	f000 f9d5 	bl	80143dc <__multadd>
 8014032:	42af      	cmp	r7, r5
 8014034:	9002      	str	r0, [sp, #8]
 8014036:	f04f 0300 	mov.w	r3, #0
 801403a:	f04f 020a 	mov.w	r2, #10
 801403e:	4639      	mov	r1, r7
 8014040:	4648      	mov	r0, r9
 8014042:	d107      	bne.n	8014054 <_dtoa_r+0xadc>
 8014044:	f000 f9ca 	bl	80143dc <__multadd>
 8014048:	4607      	mov	r7, r0
 801404a:	4605      	mov	r5, r0
 801404c:	9b00      	ldr	r3, [sp, #0]
 801404e:	3301      	adds	r3, #1
 8014050:	9300      	str	r3, [sp, #0]
 8014052:	e777      	b.n	8013f44 <_dtoa_r+0x9cc>
 8014054:	f000 f9c2 	bl	80143dc <__multadd>
 8014058:	4629      	mov	r1, r5
 801405a:	4607      	mov	r7, r0
 801405c:	2300      	movs	r3, #0
 801405e:	220a      	movs	r2, #10
 8014060:	4648      	mov	r0, r9
 8014062:	f000 f9bb 	bl	80143dc <__multadd>
 8014066:	4605      	mov	r5, r0
 8014068:	e7f0      	b.n	801404c <_dtoa_r+0xad4>
 801406a:	f1bb 0f00 	cmp.w	fp, #0
 801406e:	bfcc      	ite	gt
 8014070:	465e      	movgt	r6, fp
 8014072:	2601      	movle	r6, #1
 8014074:	4456      	add	r6, sl
 8014076:	2700      	movs	r7, #0
 8014078:	9902      	ldr	r1, [sp, #8]
 801407a:	9300      	str	r3, [sp, #0]
 801407c:	2201      	movs	r2, #1
 801407e:	4648      	mov	r0, r9
 8014080:	f000 fb50 	bl	8014724 <__lshift>
 8014084:	4621      	mov	r1, r4
 8014086:	9002      	str	r0, [sp, #8]
 8014088:	f000 fbb8 	bl	80147fc <__mcmp>
 801408c:	2800      	cmp	r0, #0
 801408e:	dcb4      	bgt.n	8013ffa <_dtoa_r+0xa82>
 8014090:	d102      	bne.n	8014098 <_dtoa_r+0xb20>
 8014092:	9b00      	ldr	r3, [sp, #0]
 8014094:	07db      	lsls	r3, r3, #31
 8014096:	d4b0      	bmi.n	8013ffa <_dtoa_r+0xa82>
 8014098:	4633      	mov	r3, r6
 801409a:	461e      	mov	r6, r3
 801409c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80140a0:	2a30      	cmp	r2, #48	@ 0x30
 80140a2:	d0fa      	beq.n	801409a <_dtoa_r+0xb22>
 80140a4:	e4b5      	b.n	8013a12 <_dtoa_r+0x49a>
 80140a6:	459a      	cmp	sl, r3
 80140a8:	d1a8      	bne.n	8013ffc <_dtoa_r+0xa84>
 80140aa:	2331      	movs	r3, #49	@ 0x31
 80140ac:	f108 0801 	add.w	r8, r8, #1
 80140b0:	f88a 3000 	strb.w	r3, [sl]
 80140b4:	e4ad      	b.n	8013a12 <_dtoa_r+0x49a>
 80140b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80140b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8014114 <_dtoa_r+0xb9c>
 80140bc:	b11b      	cbz	r3, 80140c6 <_dtoa_r+0xb4e>
 80140be:	f10a 0308 	add.w	r3, sl, #8
 80140c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80140c4:	6013      	str	r3, [r2, #0]
 80140c6:	4650      	mov	r0, sl
 80140c8:	b017      	add	sp, #92	@ 0x5c
 80140ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ce:	9b07      	ldr	r3, [sp, #28]
 80140d0:	2b01      	cmp	r3, #1
 80140d2:	f77f ae2e 	ble.w	8013d32 <_dtoa_r+0x7ba>
 80140d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80140d8:	9308      	str	r3, [sp, #32]
 80140da:	2001      	movs	r0, #1
 80140dc:	e64d      	b.n	8013d7a <_dtoa_r+0x802>
 80140de:	f1bb 0f00 	cmp.w	fp, #0
 80140e2:	f77f aed9 	ble.w	8013e98 <_dtoa_r+0x920>
 80140e6:	4656      	mov	r6, sl
 80140e8:	9802      	ldr	r0, [sp, #8]
 80140ea:	4621      	mov	r1, r4
 80140ec:	f7ff f9bb 	bl	8013466 <quorem>
 80140f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80140f4:	f806 3b01 	strb.w	r3, [r6], #1
 80140f8:	eba6 020a 	sub.w	r2, r6, sl
 80140fc:	4593      	cmp	fp, r2
 80140fe:	ddb4      	ble.n	801406a <_dtoa_r+0xaf2>
 8014100:	9902      	ldr	r1, [sp, #8]
 8014102:	2300      	movs	r3, #0
 8014104:	220a      	movs	r2, #10
 8014106:	4648      	mov	r0, r9
 8014108:	f000 f968 	bl	80143dc <__multadd>
 801410c:	9002      	str	r0, [sp, #8]
 801410e:	e7eb      	b.n	80140e8 <_dtoa_r+0xb70>
 8014110:	08016864 	.word	0x08016864
 8014114:	080167e8 	.word	0x080167e8

08014118 <_free_r>:
 8014118:	b538      	push	{r3, r4, r5, lr}
 801411a:	4605      	mov	r5, r0
 801411c:	2900      	cmp	r1, #0
 801411e:	d041      	beq.n	80141a4 <_free_r+0x8c>
 8014120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014124:	1f0c      	subs	r4, r1, #4
 8014126:	2b00      	cmp	r3, #0
 8014128:	bfb8      	it	lt
 801412a:	18e4      	addlt	r4, r4, r3
 801412c:	f000 f8e8 	bl	8014300 <__malloc_lock>
 8014130:	4a1d      	ldr	r2, [pc, #116]	@ (80141a8 <_free_r+0x90>)
 8014132:	6813      	ldr	r3, [r2, #0]
 8014134:	b933      	cbnz	r3, 8014144 <_free_r+0x2c>
 8014136:	6063      	str	r3, [r4, #4]
 8014138:	6014      	str	r4, [r2, #0]
 801413a:	4628      	mov	r0, r5
 801413c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014140:	f000 b8e4 	b.w	801430c <__malloc_unlock>
 8014144:	42a3      	cmp	r3, r4
 8014146:	d908      	bls.n	801415a <_free_r+0x42>
 8014148:	6820      	ldr	r0, [r4, #0]
 801414a:	1821      	adds	r1, r4, r0
 801414c:	428b      	cmp	r3, r1
 801414e:	bf01      	itttt	eq
 8014150:	6819      	ldreq	r1, [r3, #0]
 8014152:	685b      	ldreq	r3, [r3, #4]
 8014154:	1809      	addeq	r1, r1, r0
 8014156:	6021      	streq	r1, [r4, #0]
 8014158:	e7ed      	b.n	8014136 <_free_r+0x1e>
 801415a:	461a      	mov	r2, r3
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	b10b      	cbz	r3, 8014164 <_free_r+0x4c>
 8014160:	42a3      	cmp	r3, r4
 8014162:	d9fa      	bls.n	801415a <_free_r+0x42>
 8014164:	6811      	ldr	r1, [r2, #0]
 8014166:	1850      	adds	r0, r2, r1
 8014168:	42a0      	cmp	r0, r4
 801416a:	d10b      	bne.n	8014184 <_free_r+0x6c>
 801416c:	6820      	ldr	r0, [r4, #0]
 801416e:	4401      	add	r1, r0
 8014170:	1850      	adds	r0, r2, r1
 8014172:	4283      	cmp	r3, r0
 8014174:	6011      	str	r1, [r2, #0]
 8014176:	d1e0      	bne.n	801413a <_free_r+0x22>
 8014178:	6818      	ldr	r0, [r3, #0]
 801417a:	685b      	ldr	r3, [r3, #4]
 801417c:	6053      	str	r3, [r2, #4]
 801417e:	4408      	add	r0, r1
 8014180:	6010      	str	r0, [r2, #0]
 8014182:	e7da      	b.n	801413a <_free_r+0x22>
 8014184:	d902      	bls.n	801418c <_free_r+0x74>
 8014186:	230c      	movs	r3, #12
 8014188:	602b      	str	r3, [r5, #0]
 801418a:	e7d6      	b.n	801413a <_free_r+0x22>
 801418c:	6820      	ldr	r0, [r4, #0]
 801418e:	1821      	adds	r1, r4, r0
 8014190:	428b      	cmp	r3, r1
 8014192:	bf04      	itt	eq
 8014194:	6819      	ldreq	r1, [r3, #0]
 8014196:	685b      	ldreq	r3, [r3, #4]
 8014198:	6063      	str	r3, [r4, #4]
 801419a:	bf04      	itt	eq
 801419c:	1809      	addeq	r1, r1, r0
 801419e:	6021      	streq	r1, [r4, #0]
 80141a0:	6054      	str	r4, [r2, #4]
 80141a2:	e7ca      	b.n	801413a <_free_r+0x22>
 80141a4:	bd38      	pop	{r3, r4, r5, pc}
 80141a6:	bf00      	nop
 80141a8:	20004df8 	.word	0x20004df8

080141ac <malloc>:
 80141ac:	4b02      	ldr	r3, [pc, #8]	@ (80141b8 <malloc+0xc>)
 80141ae:	4601      	mov	r1, r0
 80141b0:	6818      	ldr	r0, [r3, #0]
 80141b2:	f000 b825 	b.w	8014200 <_malloc_r>
 80141b6:	bf00      	nop
 80141b8:	2000001c 	.word	0x2000001c

080141bc <sbrk_aligned>:
 80141bc:	b570      	push	{r4, r5, r6, lr}
 80141be:	4e0f      	ldr	r6, [pc, #60]	@ (80141fc <sbrk_aligned+0x40>)
 80141c0:	460c      	mov	r4, r1
 80141c2:	6831      	ldr	r1, [r6, #0]
 80141c4:	4605      	mov	r5, r0
 80141c6:	b911      	cbnz	r1, 80141ce <sbrk_aligned+0x12>
 80141c8:	f001 f804 	bl	80151d4 <_sbrk_r>
 80141cc:	6030      	str	r0, [r6, #0]
 80141ce:	4621      	mov	r1, r4
 80141d0:	4628      	mov	r0, r5
 80141d2:	f000 ffff 	bl	80151d4 <_sbrk_r>
 80141d6:	1c43      	adds	r3, r0, #1
 80141d8:	d103      	bne.n	80141e2 <sbrk_aligned+0x26>
 80141da:	f04f 34ff 	mov.w	r4, #4294967295
 80141de:	4620      	mov	r0, r4
 80141e0:	bd70      	pop	{r4, r5, r6, pc}
 80141e2:	1cc4      	adds	r4, r0, #3
 80141e4:	f024 0403 	bic.w	r4, r4, #3
 80141e8:	42a0      	cmp	r0, r4
 80141ea:	d0f8      	beq.n	80141de <sbrk_aligned+0x22>
 80141ec:	1a21      	subs	r1, r4, r0
 80141ee:	4628      	mov	r0, r5
 80141f0:	f000 fff0 	bl	80151d4 <_sbrk_r>
 80141f4:	3001      	adds	r0, #1
 80141f6:	d1f2      	bne.n	80141de <sbrk_aligned+0x22>
 80141f8:	e7ef      	b.n	80141da <sbrk_aligned+0x1e>
 80141fa:	bf00      	nop
 80141fc:	20004df4 	.word	0x20004df4

08014200 <_malloc_r>:
 8014200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014204:	1ccd      	adds	r5, r1, #3
 8014206:	f025 0503 	bic.w	r5, r5, #3
 801420a:	3508      	adds	r5, #8
 801420c:	2d0c      	cmp	r5, #12
 801420e:	bf38      	it	cc
 8014210:	250c      	movcc	r5, #12
 8014212:	2d00      	cmp	r5, #0
 8014214:	4606      	mov	r6, r0
 8014216:	db01      	blt.n	801421c <_malloc_r+0x1c>
 8014218:	42a9      	cmp	r1, r5
 801421a:	d904      	bls.n	8014226 <_malloc_r+0x26>
 801421c:	230c      	movs	r3, #12
 801421e:	6033      	str	r3, [r6, #0]
 8014220:	2000      	movs	r0, #0
 8014222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80142fc <_malloc_r+0xfc>
 801422a:	f000 f869 	bl	8014300 <__malloc_lock>
 801422e:	f8d8 3000 	ldr.w	r3, [r8]
 8014232:	461c      	mov	r4, r3
 8014234:	bb44      	cbnz	r4, 8014288 <_malloc_r+0x88>
 8014236:	4629      	mov	r1, r5
 8014238:	4630      	mov	r0, r6
 801423a:	f7ff ffbf 	bl	80141bc <sbrk_aligned>
 801423e:	1c43      	adds	r3, r0, #1
 8014240:	4604      	mov	r4, r0
 8014242:	d158      	bne.n	80142f6 <_malloc_r+0xf6>
 8014244:	f8d8 4000 	ldr.w	r4, [r8]
 8014248:	4627      	mov	r7, r4
 801424a:	2f00      	cmp	r7, #0
 801424c:	d143      	bne.n	80142d6 <_malloc_r+0xd6>
 801424e:	2c00      	cmp	r4, #0
 8014250:	d04b      	beq.n	80142ea <_malloc_r+0xea>
 8014252:	6823      	ldr	r3, [r4, #0]
 8014254:	4639      	mov	r1, r7
 8014256:	4630      	mov	r0, r6
 8014258:	eb04 0903 	add.w	r9, r4, r3
 801425c:	f000 ffba 	bl	80151d4 <_sbrk_r>
 8014260:	4581      	cmp	r9, r0
 8014262:	d142      	bne.n	80142ea <_malloc_r+0xea>
 8014264:	6821      	ldr	r1, [r4, #0]
 8014266:	1a6d      	subs	r5, r5, r1
 8014268:	4629      	mov	r1, r5
 801426a:	4630      	mov	r0, r6
 801426c:	f7ff ffa6 	bl	80141bc <sbrk_aligned>
 8014270:	3001      	adds	r0, #1
 8014272:	d03a      	beq.n	80142ea <_malloc_r+0xea>
 8014274:	6823      	ldr	r3, [r4, #0]
 8014276:	442b      	add	r3, r5
 8014278:	6023      	str	r3, [r4, #0]
 801427a:	f8d8 3000 	ldr.w	r3, [r8]
 801427e:	685a      	ldr	r2, [r3, #4]
 8014280:	bb62      	cbnz	r2, 80142dc <_malloc_r+0xdc>
 8014282:	f8c8 7000 	str.w	r7, [r8]
 8014286:	e00f      	b.n	80142a8 <_malloc_r+0xa8>
 8014288:	6822      	ldr	r2, [r4, #0]
 801428a:	1b52      	subs	r2, r2, r5
 801428c:	d420      	bmi.n	80142d0 <_malloc_r+0xd0>
 801428e:	2a0b      	cmp	r2, #11
 8014290:	d917      	bls.n	80142c2 <_malloc_r+0xc2>
 8014292:	1961      	adds	r1, r4, r5
 8014294:	42a3      	cmp	r3, r4
 8014296:	6025      	str	r5, [r4, #0]
 8014298:	bf18      	it	ne
 801429a:	6059      	strne	r1, [r3, #4]
 801429c:	6863      	ldr	r3, [r4, #4]
 801429e:	bf08      	it	eq
 80142a0:	f8c8 1000 	streq.w	r1, [r8]
 80142a4:	5162      	str	r2, [r4, r5]
 80142a6:	604b      	str	r3, [r1, #4]
 80142a8:	4630      	mov	r0, r6
 80142aa:	f000 f82f 	bl	801430c <__malloc_unlock>
 80142ae:	f104 000b 	add.w	r0, r4, #11
 80142b2:	1d23      	adds	r3, r4, #4
 80142b4:	f020 0007 	bic.w	r0, r0, #7
 80142b8:	1ac2      	subs	r2, r0, r3
 80142ba:	bf1c      	itt	ne
 80142bc:	1a1b      	subne	r3, r3, r0
 80142be:	50a3      	strne	r3, [r4, r2]
 80142c0:	e7af      	b.n	8014222 <_malloc_r+0x22>
 80142c2:	6862      	ldr	r2, [r4, #4]
 80142c4:	42a3      	cmp	r3, r4
 80142c6:	bf0c      	ite	eq
 80142c8:	f8c8 2000 	streq.w	r2, [r8]
 80142cc:	605a      	strne	r2, [r3, #4]
 80142ce:	e7eb      	b.n	80142a8 <_malloc_r+0xa8>
 80142d0:	4623      	mov	r3, r4
 80142d2:	6864      	ldr	r4, [r4, #4]
 80142d4:	e7ae      	b.n	8014234 <_malloc_r+0x34>
 80142d6:	463c      	mov	r4, r7
 80142d8:	687f      	ldr	r7, [r7, #4]
 80142da:	e7b6      	b.n	801424a <_malloc_r+0x4a>
 80142dc:	461a      	mov	r2, r3
 80142de:	685b      	ldr	r3, [r3, #4]
 80142e0:	42a3      	cmp	r3, r4
 80142e2:	d1fb      	bne.n	80142dc <_malloc_r+0xdc>
 80142e4:	2300      	movs	r3, #0
 80142e6:	6053      	str	r3, [r2, #4]
 80142e8:	e7de      	b.n	80142a8 <_malloc_r+0xa8>
 80142ea:	230c      	movs	r3, #12
 80142ec:	6033      	str	r3, [r6, #0]
 80142ee:	4630      	mov	r0, r6
 80142f0:	f000 f80c 	bl	801430c <__malloc_unlock>
 80142f4:	e794      	b.n	8014220 <_malloc_r+0x20>
 80142f6:	6005      	str	r5, [r0, #0]
 80142f8:	e7d6      	b.n	80142a8 <_malloc_r+0xa8>
 80142fa:	bf00      	nop
 80142fc:	20004df8 	.word	0x20004df8

08014300 <__malloc_lock>:
 8014300:	4801      	ldr	r0, [pc, #4]	@ (8014308 <__malloc_lock+0x8>)
 8014302:	f7ff b8a0 	b.w	8013446 <__retarget_lock_acquire_recursive>
 8014306:	bf00      	nop
 8014308:	20004df0 	.word	0x20004df0

0801430c <__malloc_unlock>:
 801430c:	4801      	ldr	r0, [pc, #4]	@ (8014314 <__malloc_unlock+0x8>)
 801430e:	f7ff b89b 	b.w	8013448 <__retarget_lock_release_recursive>
 8014312:	bf00      	nop
 8014314:	20004df0 	.word	0x20004df0

08014318 <_Balloc>:
 8014318:	b570      	push	{r4, r5, r6, lr}
 801431a:	69c6      	ldr	r6, [r0, #28]
 801431c:	4604      	mov	r4, r0
 801431e:	460d      	mov	r5, r1
 8014320:	b976      	cbnz	r6, 8014340 <_Balloc+0x28>
 8014322:	2010      	movs	r0, #16
 8014324:	f7ff ff42 	bl	80141ac <malloc>
 8014328:	4602      	mov	r2, r0
 801432a:	61e0      	str	r0, [r4, #28]
 801432c:	b920      	cbnz	r0, 8014338 <_Balloc+0x20>
 801432e:	4b18      	ldr	r3, [pc, #96]	@ (8014390 <_Balloc+0x78>)
 8014330:	4818      	ldr	r0, [pc, #96]	@ (8014394 <_Balloc+0x7c>)
 8014332:	216b      	movs	r1, #107	@ 0x6b
 8014334:	f000 ff5e 	bl	80151f4 <__assert_func>
 8014338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801433c:	6006      	str	r6, [r0, #0]
 801433e:	60c6      	str	r6, [r0, #12]
 8014340:	69e6      	ldr	r6, [r4, #28]
 8014342:	68f3      	ldr	r3, [r6, #12]
 8014344:	b183      	cbz	r3, 8014368 <_Balloc+0x50>
 8014346:	69e3      	ldr	r3, [r4, #28]
 8014348:	68db      	ldr	r3, [r3, #12]
 801434a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801434e:	b9b8      	cbnz	r0, 8014380 <_Balloc+0x68>
 8014350:	2101      	movs	r1, #1
 8014352:	fa01 f605 	lsl.w	r6, r1, r5
 8014356:	1d72      	adds	r2, r6, #5
 8014358:	0092      	lsls	r2, r2, #2
 801435a:	4620      	mov	r0, r4
 801435c:	f000 ff68 	bl	8015230 <_calloc_r>
 8014360:	b160      	cbz	r0, 801437c <_Balloc+0x64>
 8014362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014366:	e00e      	b.n	8014386 <_Balloc+0x6e>
 8014368:	2221      	movs	r2, #33	@ 0x21
 801436a:	2104      	movs	r1, #4
 801436c:	4620      	mov	r0, r4
 801436e:	f000 ff5f 	bl	8015230 <_calloc_r>
 8014372:	69e3      	ldr	r3, [r4, #28]
 8014374:	60f0      	str	r0, [r6, #12]
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d1e4      	bne.n	8014346 <_Balloc+0x2e>
 801437c:	2000      	movs	r0, #0
 801437e:	bd70      	pop	{r4, r5, r6, pc}
 8014380:	6802      	ldr	r2, [r0, #0]
 8014382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014386:	2300      	movs	r3, #0
 8014388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801438c:	e7f7      	b.n	801437e <_Balloc+0x66>
 801438e:	bf00      	nop
 8014390:	080167f5 	.word	0x080167f5
 8014394:	08016875 	.word	0x08016875

08014398 <_Bfree>:
 8014398:	b570      	push	{r4, r5, r6, lr}
 801439a:	69c6      	ldr	r6, [r0, #28]
 801439c:	4605      	mov	r5, r0
 801439e:	460c      	mov	r4, r1
 80143a0:	b976      	cbnz	r6, 80143c0 <_Bfree+0x28>
 80143a2:	2010      	movs	r0, #16
 80143a4:	f7ff ff02 	bl	80141ac <malloc>
 80143a8:	4602      	mov	r2, r0
 80143aa:	61e8      	str	r0, [r5, #28]
 80143ac:	b920      	cbnz	r0, 80143b8 <_Bfree+0x20>
 80143ae:	4b09      	ldr	r3, [pc, #36]	@ (80143d4 <_Bfree+0x3c>)
 80143b0:	4809      	ldr	r0, [pc, #36]	@ (80143d8 <_Bfree+0x40>)
 80143b2:	218f      	movs	r1, #143	@ 0x8f
 80143b4:	f000 ff1e 	bl	80151f4 <__assert_func>
 80143b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80143bc:	6006      	str	r6, [r0, #0]
 80143be:	60c6      	str	r6, [r0, #12]
 80143c0:	b13c      	cbz	r4, 80143d2 <_Bfree+0x3a>
 80143c2:	69eb      	ldr	r3, [r5, #28]
 80143c4:	6862      	ldr	r2, [r4, #4]
 80143c6:	68db      	ldr	r3, [r3, #12]
 80143c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80143cc:	6021      	str	r1, [r4, #0]
 80143ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80143d2:	bd70      	pop	{r4, r5, r6, pc}
 80143d4:	080167f5 	.word	0x080167f5
 80143d8:	08016875 	.word	0x08016875

080143dc <__multadd>:
 80143dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143e0:	690d      	ldr	r5, [r1, #16]
 80143e2:	4607      	mov	r7, r0
 80143e4:	460c      	mov	r4, r1
 80143e6:	461e      	mov	r6, r3
 80143e8:	f101 0c14 	add.w	ip, r1, #20
 80143ec:	2000      	movs	r0, #0
 80143ee:	f8dc 3000 	ldr.w	r3, [ip]
 80143f2:	b299      	uxth	r1, r3
 80143f4:	fb02 6101 	mla	r1, r2, r1, r6
 80143f8:	0c1e      	lsrs	r6, r3, #16
 80143fa:	0c0b      	lsrs	r3, r1, #16
 80143fc:	fb02 3306 	mla	r3, r2, r6, r3
 8014400:	b289      	uxth	r1, r1
 8014402:	3001      	adds	r0, #1
 8014404:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014408:	4285      	cmp	r5, r0
 801440a:	f84c 1b04 	str.w	r1, [ip], #4
 801440e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014412:	dcec      	bgt.n	80143ee <__multadd+0x12>
 8014414:	b30e      	cbz	r6, 801445a <__multadd+0x7e>
 8014416:	68a3      	ldr	r3, [r4, #8]
 8014418:	42ab      	cmp	r3, r5
 801441a:	dc19      	bgt.n	8014450 <__multadd+0x74>
 801441c:	6861      	ldr	r1, [r4, #4]
 801441e:	4638      	mov	r0, r7
 8014420:	3101      	adds	r1, #1
 8014422:	f7ff ff79 	bl	8014318 <_Balloc>
 8014426:	4680      	mov	r8, r0
 8014428:	b928      	cbnz	r0, 8014436 <__multadd+0x5a>
 801442a:	4602      	mov	r2, r0
 801442c:	4b0c      	ldr	r3, [pc, #48]	@ (8014460 <__multadd+0x84>)
 801442e:	480d      	ldr	r0, [pc, #52]	@ (8014464 <__multadd+0x88>)
 8014430:	21ba      	movs	r1, #186	@ 0xba
 8014432:	f000 fedf 	bl	80151f4 <__assert_func>
 8014436:	6922      	ldr	r2, [r4, #16]
 8014438:	3202      	adds	r2, #2
 801443a:	f104 010c 	add.w	r1, r4, #12
 801443e:	0092      	lsls	r2, r2, #2
 8014440:	300c      	adds	r0, #12
 8014442:	f7ff f802 	bl	801344a <memcpy>
 8014446:	4621      	mov	r1, r4
 8014448:	4638      	mov	r0, r7
 801444a:	f7ff ffa5 	bl	8014398 <_Bfree>
 801444e:	4644      	mov	r4, r8
 8014450:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014454:	3501      	adds	r5, #1
 8014456:	615e      	str	r6, [r3, #20]
 8014458:	6125      	str	r5, [r4, #16]
 801445a:	4620      	mov	r0, r4
 801445c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014460:	08016864 	.word	0x08016864
 8014464:	08016875 	.word	0x08016875

08014468 <__hi0bits>:
 8014468:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801446c:	4603      	mov	r3, r0
 801446e:	bf36      	itet	cc
 8014470:	0403      	lslcc	r3, r0, #16
 8014472:	2000      	movcs	r0, #0
 8014474:	2010      	movcc	r0, #16
 8014476:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801447a:	bf3c      	itt	cc
 801447c:	021b      	lslcc	r3, r3, #8
 801447e:	3008      	addcc	r0, #8
 8014480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014484:	bf3c      	itt	cc
 8014486:	011b      	lslcc	r3, r3, #4
 8014488:	3004      	addcc	r0, #4
 801448a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801448e:	bf3c      	itt	cc
 8014490:	009b      	lslcc	r3, r3, #2
 8014492:	3002      	addcc	r0, #2
 8014494:	2b00      	cmp	r3, #0
 8014496:	db05      	blt.n	80144a4 <__hi0bits+0x3c>
 8014498:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801449c:	f100 0001 	add.w	r0, r0, #1
 80144a0:	bf08      	it	eq
 80144a2:	2020      	moveq	r0, #32
 80144a4:	4770      	bx	lr

080144a6 <__lo0bits>:
 80144a6:	6803      	ldr	r3, [r0, #0]
 80144a8:	4602      	mov	r2, r0
 80144aa:	f013 0007 	ands.w	r0, r3, #7
 80144ae:	d00b      	beq.n	80144c8 <__lo0bits+0x22>
 80144b0:	07d9      	lsls	r1, r3, #31
 80144b2:	d421      	bmi.n	80144f8 <__lo0bits+0x52>
 80144b4:	0798      	lsls	r0, r3, #30
 80144b6:	bf49      	itett	mi
 80144b8:	085b      	lsrmi	r3, r3, #1
 80144ba:	089b      	lsrpl	r3, r3, #2
 80144bc:	2001      	movmi	r0, #1
 80144be:	6013      	strmi	r3, [r2, #0]
 80144c0:	bf5c      	itt	pl
 80144c2:	6013      	strpl	r3, [r2, #0]
 80144c4:	2002      	movpl	r0, #2
 80144c6:	4770      	bx	lr
 80144c8:	b299      	uxth	r1, r3
 80144ca:	b909      	cbnz	r1, 80144d0 <__lo0bits+0x2a>
 80144cc:	0c1b      	lsrs	r3, r3, #16
 80144ce:	2010      	movs	r0, #16
 80144d0:	b2d9      	uxtb	r1, r3
 80144d2:	b909      	cbnz	r1, 80144d8 <__lo0bits+0x32>
 80144d4:	3008      	adds	r0, #8
 80144d6:	0a1b      	lsrs	r3, r3, #8
 80144d8:	0719      	lsls	r1, r3, #28
 80144da:	bf04      	itt	eq
 80144dc:	091b      	lsreq	r3, r3, #4
 80144de:	3004      	addeq	r0, #4
 80144e0:	0799      	lsls	r1, r3, #30
 80144e2:	bf04      	itt	eq
 80144e4:	089b      	lsreq	r3, r3, #2
 80144e6:	3002      	addeq	r0, #2
 80144e8:	07d9      	lsls	r1, r3, #31
 80144ea:	d403      	bmi.n	80144f4 <__lo0bits+0x4e>
 80144ec:	085b      	lsrs	r3, r3, #1
 80144ee:	f100 0001 	add.w	r0, r0, #1
 80144f2:	d003      	beq.n	80144fc <__lo0bits+0x56>
 80144f4:	6013      	str	r3, [r2, #0]
 80144f6:	4770      	bx	lr
 80144f8:	2000      	movs	r0, #0
 80144fa:	4770      	bx	lr
 80144fc:	2020      	movs	r0, #32
 80144fe:	4770      	bx	lr

08014500 <__i2b>:
 8014500:	b510      	push	{r4, lr}
 8014502:	460c      	mov	r4, r1
 8014504:	2101      	movs	r1, #1
 8014506:	f7ff ff07 	bl	8014318 <_Balloc>
 801450a:	4602      	mov	r2, r0
 801450c:	b928      	cbnz	r0, 801451a <__i2b+0x1a>
 801450e:	4b05      	ldr	r3, [pc, #20]	@ (8014524 <__i2b+0x24>)
 8014510:	4805      	ldr	r0, [pc, #20]	@ (8014528 <__i2b+0x28>)
 8014512:	f240 1145 	movw	r1, #325	@ 0x145
 8014516:	f000 fe6d 	bl	80151f4 <__assert_func>
 801451a:	2301      	movs	r3, #1
 801451c:	6144      	str	r4, [r0, #20]
 801451e:	6103      	str	r3, [r0, #16]
 8014520:	bd10      	pop	{r4, pc}
 8014522:	bf00      	nop
 8014524:	08016864 	.word	0x08016864
 8014528:	08016875 	.word	0x08016875

0801452c <__multiply>:
 801452c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014530:	4617      	mov	r7, r2
 8014532:	690a      	ldr	r2, [r1, #16]
 8014534:	693b      	ldr	r3, [r7, #16]
 8014536:	429a      	cmp	r2, r3
 8014538:	bfa8      	it	ge
 801453a:	463b      	movge	r3, r7
 801453c:	4689      	mov	r9, r1
 801453e:	bfa4      	itt	ge
 8014540:	460f      	movge	r7, r1
 8014542:	4699      	movge	r9, r3
 8014544:	693d      	ldr	r5, [r7, #16]
 8014546:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801454a:	68bb      	ldr	r3, [r7, #8]
 801454c:	6879      	ldr	r1, [r7, #4]
 801454e:	eb05 060a 	add.w	r6, r5, sl
 8014552:	42b3      	cmp	r3, r6
 8014554:	b085      	sub	sp, #20
 8014556:	bfb8      	it	lt
 8014558:	3101      	addlt	r1, #1
 801455a:	f7ff fedd 	bl	8014318 <_Balloc>
 801455e:	b930      	cbnz	r0, 801456e <__multiply+0x42>
 8014560:	4602      	mov	r2, r0
 8014562:	4b41      	ldr	r3, [pc, #260]	@ (8014668 <__multiply+0x13c>)
 8014564:	4841      	ldr	r0, [pc, #260]	@ (801466c <__multiply+0x140>)
 8014566:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801456a:	f000 fe43 	bl	80151f4 <__assert_func>
 801456e:	f100 0414 	add.w	r4, r0, #20
 8014572:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014576:	4623      	mov	r3, r4
 8014578:	2200      	movs	r2, #0
 801457a:	4573      	cmp	r3, lr
 801457c:	d320      	bcc.n	80145c0 <__multiply+0x94>
 801457e:	f107 0814 	add.w	r8, r7, #20
 8014582:	f109 0114 	add.w	r1, r9, #20
 8014586:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801458a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801458e:	9302      	str	r3, [sp, #8]
 8014590:	1beb      	subs	r3, r5, r7
 8014592:	3b15      	subs	r3, #21
 8014594:	f023 0303 	bic.w	r3, r3, #3
 8014598:	3304      	adds	r3, #4
 801459a:	3715      	adds	r7, #21
 801459c:	42bd      	cmp	r5, r7
 801459e:	bf38      	it	cc
 80145a0:	2304      	movcc	r3, #4
 80145a2:	9301      	str	r3, [sp, #4]
 80145a4:	9b02      	ldr	r3, [sp, #8]
 80145a6:	9103      	str	r1, [sp, #12]
 80145a8:	428b      	cmp	r3, r1
 80145aa:	d80c      	bhi.n	80145c6 <__multiply+0x9a>
 80145ac:	2e00      	cmp	r6, #0
 80145ae:	dd03      	ble.n	80145b8 <__multiply+0x8c>
 80145b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d055      	beq.n	8014664 <__multiply+0x138>
 80145b8:	6106      	str	r6, [r0, #16]
 80145ba:	b005      	add	sp, #20
 80145bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145c0:	f843 2b04 	str.w	r2, [r3], #4
 80145c4:	e7d9      	b.n	801457a <__multiply+0x4e>
 80145c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80145ca:	f1ba 0f00 	cmp.w	sl, #0
 80145ce:	d01f      	beq.n	8014610 <__multiply+0xe4>
 80145d0:	46c4      	mov	ip, r8
 80145d2:	46a1      	mov	r9, r4
 80145d4:	2700      	movs	r7, #0
 80145d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80145da:	f8d9 3000 	ldr.w	r3, [r9]
 80145de:	fa1f fb82 	uxth.w	fp, r2
 80145e2:	b29b      	uxth	r3, r3
 80145e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80145e8:	443b      	add	r3, r7
 80145ea:	f8d9 7000 	ldr.w	r7, [r9]
 80145ee:	0c12      	lsrs	r2, r2, #16
 80145f0:	0c3f      	lsrs	r7, r7, #16
 80145f2:	fb0a 7202 	mla	r2, sl, r2, r7
 80145f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80145fa:	b29b      	uxth	r3, r3
 80145fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014600:	4565      	cmp	r5, ip
 8014602:	f849 3b04 	str.w	r3, [r9], #4
 8014606:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801460a:	d8e4      	bhi.n	80145d6 <__multiply+0xaa>
 801460c:	9b01      	ldr	r3, [sp, #4]
 801460e:	50e7      	str	r7, [r4, r3]
 8014610:	9b03      	ldr	r3, [sp, #12]
 8014612:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014616:	3104      	adds	r1, #4
 8014618:	f1b9 0f00 	cmp.w	r9, #0
 801461c:	d020      	beq.n	8014660 <__multiply+0x134>
 801461e:	6823      	ldr	r3, [r4, #0]
 8014620:	4647      	mov	r7, r8
 8014622:	46a4      	mov	ip, r4
 8014624:	f04f 0a00 	mov.w	sl, #0
 8014628:	f8b7 b000 	ldrh.w	fp, [r7]
 801462c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014630:	fb09 220b 	mla	r2, r9, fp, r2
 8014634:	4452      	add	r2, sl
 8014636:	b29b      	uxth	r3, r3
 8014638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801463c:	f84c 3b04 	str.w	r3, [ip], #4
 8014640:	f857 3b04 	ldr.w	r3, [r7], #4
 8014644:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014648:	f8bc 3000 	ldrh.w	r3, [ip]
 801464c:	fb09 330a 	mla	r3, r9, sl, r3
 8014650:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014654:	42bd      	cmp	r5, r7
 8014656:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801465a:	d8e5      	bhi.n	8014628 <__multiply+0xfc>
 801465c:	9a01      	ldr	r2, [sp, #4]
 801465e:	50a3      	str	r3, [r4, r2]
 8014660:	3404      	adds	r4, #4
 8014662:	e79f      	b.n	80145a4 <__multiply+0x78>
 8014664:	3e01      	subs	r6, #1
 8014666:	e7a1      	b.n	80145ac <__multiply+0x80>
 8014668:	08016864 	.word	0x08016864
 801466c:	08016875 	.word	0x08016875

08014670 <__pow5mult>:
 8014670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014674:	4615      	mov	r5, r2
 8014676:	f012 0203 	ands.w	r2, r2, #3
 801467a:	4607      	mov	r7, r0
 801467c:	460e      	mov	r6, r1
 801467e:	d007      	beq.n	8014690 <__pow5mult+0x20>
 8014680:	4c25      	ldr	r4, [pc, #148]	@ (8014718 <__pow5mult+0xa8>)
 8014682:	3a01      	subs	r2, #1
 8014684:	2300      	movs	r3, #0
 8014686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801468a:	f7ff fea7 	bl	80143dc <__multadd>
 801468e:	4606      	mov	r6, r0
 8014690:	10ad      	asrs	r5, r5, #2
 8014692:	d03d      	beq.n	8014710 <__pow5mult+0xa0>
 8014694:	69fc      	ldr	r4, [r7, #28]
 8014696:	b97c      	cbnz	r4, 80146b8 <__pow5mult+0x48>
 8014698:	2010      	movs	r0, #16
 801469a:	f7ff fd87 	bl	80141ac <malloc>
 801469e:	4602      	mov	r2, r0
 80146a0:	61f8      	str	r0, [r7, #28]
 80146a2:	b928      	cbnz	r0, 80146b0 <__pow5mult+0x40>
 80146a4:	4b1d      	ldr	r3, [pc, #116]	@ (801471c <__pow5mult+0xac>)
 80146a6:	481e      	ldr	r0, [pc, #120]	@ (8014720 <__pow5mult+0xb0>)
 80146a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80146ac:	f000 fda2 	bl	80151f4 <__assert_func>
 80146b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80146b4:	6004      	str	r4, [r0, #0]
 80146b6:	60c4      	str	r4, [r0, #12]
 80146b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80146bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80146c0:	b94c      	cbnz	r4, 80146d6 <__pow5mult+0x66>
 80146c2:	f240 2171 	movw	r1, #625	@ 0x271
 80146c6:	4638      	mov	r0, r7
 80146c8:	f7ff ff1a 	bl	8014500 <__i2b>
 80146cc:	2300      	movs	r3, #0
 80146ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80146d2:	4604      	mov	r4, r0
 80146d4:	6003      	str	r3, [r0, #0]
 80146d6:	f04f 0900 	mov.w	r9, #0
 80146da:	07eb      	lsls	r3, r5, #31
 80146dc:	d50a      	bpl.n	80146f4 <__pow5mult+0x84>
 80146de:	4631      	mov	r1, r6
 80146e0:	4622      	mov	r2, r4
 80146e2:	4638      	mov	r0, r7
 80146e4:	f7ff ff22 	bl	801452c <__multiply>
 80146e8:	4631      	mov	r1, r6
 80146ea:	4680      	mov	r8, r0
 80146ec:	4638      	mov	r0, r7
 80146ee:	f7ff fe53 	bl	8014398 <_Bfree>
 80146f2:	4646      	mov	r6, r8
 80146f4:	106d      	asrs	r5, r5, #1
 80146f6:	d00b      	beq.n	8014710 <__pow5mult+0xa0>
 80146f8:	6820      	ldr	r0, [r4, #0]
 80146fa:	b938      	cbnz	r0, 801470c <__pow5mult+0x9c>
 80146fc:	4622      	mov	r2, r4
 80146fe:	4621      	mov	r1, r4
 8014700:	4638      	mov	r0, r7
 8014702:	f7ff ff13 	bl	801452c <__multiply>
 8014706:	6020      	str	r0, [r4, #0]
 8014708:	f8c0 9000 	str.w	r9, [r0]
 801470c:	4604      	mov	r4, r0
 801470e:	e7e4      	b.n	80146da <__pow5mult+0x6a>
 8014710:	4630      	mov	r0, r6
 8014712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014716:	bf00      	nop
 8014718:	08016928 	.word	0x08016928
 801471c:	080167f5 	.word	0x080167f5
 8014720:	08016875 	.word	0x08016875

08014724 <__lshift>:
 8014724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014728:	460c      	mov	r4, r1
 801472a:	6849      	ldr	r1, [r1, #4]
 801472c:	6923      	ldr	r3, [r4, #16]
 801472e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014732:	68a3      	ldr	r3, [r4, #8]
 8014734:	4607      	mov	r7, r0
 8014736:	4691      	mov	r9, r2
 8014738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801473c:	f108 0601 	add.w	r6, r8, #1
 8014740:	42b3      	cmp	r3, r6
 8014742:	db0b      	blt.n	801475c <__lshift+0x38>
 8014744:	4638      	mov	r0, r7
 8014746:	f7ff fde7 	bl	8014318 <_Balloc>
 801474a:	4605      	mov	r5, r0
 801474c:	b948      	cbnz	r0, 8014762 <__lshift+0x3e>
 801474e:	4602      	mov	r2, r0
 8014750:	4b28      	ldr	r3, [pc, #160]	@ (80147f4 <__lshift+0xd0>)
 8014752:	4829      	ldr	r0, [pc, #164]	@ (80147f8 <__lshift+0xd4>)
 8014754:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014758:	f000 fd4c 	bl	80151f4 <__assert_func>
 801475c:	3101      	adds	r1, #1
 801475e:	005b      	lsls	r3, r3, #1
 8014760:	e7ee      	b.n	8014740 <__lshift+0x1c>
 8014762:	2300      	movs	r3, #0
 8014764:	f100 0114 	add.w	r1, r0, #20
 8014768:	f100 0210 	add.w	r2, r0, #16
 801476c:	4618      	mov	r0, r3
 801476e:	4553      	cmp	r3, sl
 8014770:	db33      	blt.n	80147da <__lshift+0xb6>
 8014772:	6920      	ldr	r0, [r4, #16]
 8014774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014778:	f104 0314 	add.w	r3, r4, #20
 801477c:	f019 091f 	ands.w	r9, r9, #31
 8014780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014784:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014788:	d02b      	beq.n	80147e2 <__lshift+0xbe>
 801478a:	f1c9 0e20 	rsb	lr, r9, #32
 801478e:	468a      	mov	sl, r1
 8014790:	2200      	movs	r2, #0
 8014792:	6818      	ldr	r0, [r3, #0]
 8014794:	fa00 f009 	lsl.w	r0, r0, r9
 8014798:	4310      	orrs	r0, r2
 801479a:	f84a 0b04 	str.w	r0, [sl], #4
 801479e:	f853 2b04 	ldr.w	r2, [r3], #4
 80147a2:	459c      	cmp	ip, r3
 80147a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80147a8:	d8f3      	bhi.n	8014792 <__lshift+0x6e>
 80147aa:	ebac 0304 	sub.w	r3, ip, r4
 80147ae:	3b15      	subs	r3, #21
 80147b0:	f023 0303 	bic.w	r3, r3, #3
 80147b4:	3304      	adds	r3, #4
 80147b6:	f104 0015 	add.w	r0, r4, #21
 80147ba:	4560      	cmp	r0, ip
 80147bc:	bf88      	it	hi
 80147be:	2304      	movhi	r3, #4
 80147c0:	50ca      	str	r2, [r1, r3]
 80147c2:	b10a      	cbz	r2, 80147c8 <__lshift+0xa4>
 80147c4:	f108 0602 	add.w	r6, r8, #2
 80147c8:	3e01      	subs	r6, #1
 80147ca:	4638      	mov	r0, r7
 80147cc:	612e      	str	r6, [r5, #16]
 80147ce:	4621      	mov	r1, r4
 80147d0:	f7ff fde2 	bl	8014398 <_Bfree>
 80147d4:	4628      	mov	r0, r5
 80147d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147da:	f842 0f04 	str.w	r0, [r2, #4]!
 80147de:	3301      	adds	r3, #1
 80147e0:	e7c5      	b.n	801476e <__lshift+0x4a>
 80147e2:	3904      	subs	r1, #4
 80147e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80147e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80147ec:	459c      	cmp	ip, r3
 80147ee:	d8f9      	bhi.n	80147e4 <__lshift+0xc0>
 80147f0:	e7ea      	b.n	80147c8 <__lshift+0xa4>
 80147f2:	bf00      	nop
 80147f4:	08016864 	.word	0x08016864
 80147f8:	08016875 	.word	0x08016875

080147fc <__mcmp>:
 80147fc:	690a      	ldr	r2, [r1, #16]
 80147fe:	4603      	mov	r3, r0
 8014800:	6900      	ldr	r0, [r0, #16]
 8014802:	1a80      	subs	r0, r0, r2
 8014804:	b530      	push	{r4, r5, lr}
 8014806:	d10e      	bne.n	8014826 <__mcmp+0x2a>
 8014808:	3314      	adds	r3, #20
 801480a:	3114      	adds	r1, #20
 801480c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014810:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014814:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014818:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801481c:	4295      	cmp	r5, r2
 801481e:	d003      	beq.n	8014828 <__mcmp+0x2c>
 8014820:	d205      	bcs.n	801482e <__mcmp+0x32>
 8014822:	f04f 30ff 	mov.w	r0, #4294967295
 8014826:	bd30      	pop	{r4, r5, pc}
 8014828:	42a3      	cmp	r3, r4
 801482a:	d3f3      	bcc.n	8014814 <__mcmp+0x18>
 801482c:	e7fb      	b.n	8014826 <__mcmp+0x2a>
 801482e:	2001      	movs	r0, #1
 8014830:	e7f9      	b.n	8014826 <__mcmp+0x2a>
	...

08014834 <__mdiff>:
 8014834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014838:	4689      	mov	r9, r1
 801483a:	4606      	mov	r6, r0
 801483c:	4611      	mov	r1, r2
 801483e:	4648      	mov	r0, r9
 8014840:	4614      	mov	r4, r2
 8014842:	f7ff ffdb 	bl	80147fc <__mcmp>
 8014846:	1e05      	subs	r5, r0, #0
 8014848:	d112      	bne.n	8014870 <__mdiff+0x3c>
 801484a:	4629      	mov	r1, r5
 801484c:	4630      	mov	r0, r6
 801484e:	f7ff fd63 	bl	8014318 <_Balloc>
 8014852:	4602      	mov	r2, r0
 8014854:	b928      	cbnz	r0, 8014862 <__mdiff+0x2e>
 8014856:	4b3f      	ldr	r3, [pc, #252]	@ (8014954 <__mdiff+0x120>)
 8014858:	f240 2137 	movw	r1, #567	@ 0x237
 801485c:	483e      	ldr	r0, [pc, #248]	@ (8014958 <__mdiff+0x124>)
 801485e:	f000 fcc9 	bl	80151f4 <__assert_func>
 8014862:	2301      	movs	r3, #1
 8014864:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014868:	4610      	mov	r0, r2
 801486a:	b003      	add	sp, #12
 801486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014870:	bfbc      	itt	lt
 8014872:	464b      	movlt	r3, r9
 8014874:	46a1      	movlt	r9, r4
 8014876:	4630      	mov	r0, r6
 8014878:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801487c:	bfba      	itte	lt
 801487e:	461c      	movlt	r4, r3
 8014880:	2501      	movlt	r5, #1
 8014882:	2500      	movge	r5, #0
 8014884:	f7ff fd48 	bl	8014318 <_Balloc>
 8014888:	4602      	mov	r2, r0
 801488a:	b918      	cbnz	r0, 8014894 <__mdiff+0x60>
 801488c:	4b31      	ldr	r3, [pc, #196]	@ (8014954 <__mdiff+0x120>)
 801488e:	f240 2145 	movw	r1, #581	@ 0x245
 8014892:	e7e3      	b.n	801485c <__mdiff+0x28>
 8014894:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014898:	6926      	ldr	r6, [r4, #16]
 801489a:	60c5      	str	r5, [r0, #12]
 801489c:	f109 0310 	add.w	r3, r9, #16
 80148a0:	f109 0514 	add.w	r5, r9, #20
 80148a4:	f104 0e14 	add.w	lr, r4, #20
 80148a8:	f100 0b14 	add.w	fp, r0, #20
 80148ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80148b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80148b4:	9301      	str	r3, [sp, #4]
 80148b6:	46d9      	mov	r9, fp
 80148b8:	f04f 0c00 	mov.w	ip, #0
 80148bc:	9b01      	ldr	r3, [sp, #4]
 80148be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80148c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80148c6:	9301      	str	r3, [sp, #4]
 80148c8:	fa1f f38a 	uxth.w	r3, sl
 80148cc:	4619      	mov	r1, r3
 80148ce:	b283      	uxth	r3, r0
 80148d0:	1acb      	subs	r3, r1, r3
 80148d2:	0c00      	lsrs	r0, r0, #16
 80148d4:	4463      	add	r3, ip
 80148d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80148da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80148de:	b29b      	uxth	r3, r3
 80148e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80148e4:	4576      	cmp	r6, lr
 80148e6:	f849 3b04 	str.w	r3, [r9], #4
 80148ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80148ee:	d8e5      	bhi.n	80148bc <__mdiff+0x88>
 80148f0:	1b33      	subs	r3, r6, r4
 80148f2:	3b15      	subs	r3, #21
 80148f4:	f023 0303 	bic.w	r3, r3, #3
 80148f8:	3415      	adds	r4, #21
 80148fa:	3304      	adds	r3, #4
 80148fc:	42a6      	cmp	r6, r4
 80148fe:	bf38      	it	cc
 8014900:	2304      	movcc	r3, #4
 8014902:	441d      	add	r5, r3
 8014904:	445b      	add	r3, fp
 8014906:	461e      	mov	r6, r3
 8014908:	462c      	mov	r4, r5
 801490a:	4544      	cmp	r4, r8
 801490c:	d30e      	bcc.n	801492c <__mdiff+0xf8>
 801490e:	f108 0103 	add.w	r1, r8, #3
 8014912:	1b49      	subs	r1, r1, r5
 8014914:	f021 0103 	bic.w	r1, r1, #3
 8014918:	3d03      	subs	r5, #3
 801491a:	45a8      	cmp	r8, r5
 801491c:	bf38      	it	cc
 801491e:	2100      	movcc	r1, #0
 8014920:	440b      	add	r3, r1
 8014922:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014926:	b191      	cbz	r1, 801494e <__mdiff+0x11a>
 8014928:	6117      	str	r7, [r2, #16]
 801492a:	e79d      	b.n	8014868 <__mdiff+0x34>
 801492c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014930:	46e6      	mov	lr, ip
 8014932:	0c08      	lsrs	r0, r1, #16
 8014934:	fa1c fc81 	uxtah	ip, ip, r1
 8014938:	4471      	add	r1, lr
 801493a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801493e:	b289      	uxth	r1, r1
 8014940:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014944:	f846 1b04 	str.w	r1, [r6], #4
 8014948:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801494c:	e7dd      	b.n	801490a <__mdiff+0xd6>
 801494e:	3f01      	subs	r7, #1
 8014950:	e7e7      	b.n	8014922 <__mdiff+0xee>
 8014952:	bf00      	nop
 8014954:	08016864 	.word	0x08016864
 8014958:	08016875 	.word	0x08016875

0801495c <__d2b>:
 801495c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014960:	460f      	mov	r7, r1
 8014962:	2101      	movs	r1, #1
 8014964:	ec59 8b10 	vmov	r8, r9, d0
 8014968:	4616      	mov	r6, r2
 801496a:	f7ff fcd5 	bl	8014318 <_Balloc>
 801496e:	4604      	mov	r4, r0
 8014970:	b930      	cbnz	r0, 8014980 <__d2b+0x24>
 8014972:	4602      	mov	r2, r0
 8014974:	4b23      	ldr	r3, [pc, #140]	@ (8014a04 <__d2b+0xa8>)
 8014976:	4824      	ldr	r0, [pc, #144]	@ (8014a08 <__d2b+0xac>)
 8014978:	f240 310f 	movw	r1, #783	@ 0x30f
 801497c:	f000 fc3a 	bl	80151f4 <__assert_func>
 8014980:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014984:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014988:	b10d      	cbz	r5, 801498e <__d2b+0x32>
 801498a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801498e:	9301      	str	r3, [sp, #4]
 8014990:	f1b8 0300 	subs.w	r3, r8, #0
 8014994:	d023      	beq.n	80149de <__d2b+0x82>
 8014996:	4668      	mov	r0, sp
 8014998:	9300      	str	r3, [sp, #0]
 801499a:	f7ff fd84 	bl	80144a6 <__lo0bits>
 801499e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80149a2:	b1d0      	cbz	r0, 80149da <__d2b+0x7e>
 80149a4:	f1c0 0320 	rsb	r3, r0, #32
 80149a8:	fa02 f303 	lsl.w	r3, r2, r3
 80149ac:	430b      	orrs	r3, r1
 80149ae:	40c2      	lsrs	r2, r0
 80149b0:	6163      	str	r3, [r4, #20]
 80149b2:	9201      	str	r2, [sp, #4]
 80149b4:	9b01      	ldr	r3, [sp, #4]
 80149b6:	61a3      	str	r3, [r4, #24]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	bf0c      	ite	eq
 80149bc:	2201      	moveq	r2, #1
 80149be:	2202      	movne	r2, #2
 80149c0:	6122      	str	r2, [r4, #16]
 80149c2:	b1a5      	cbz	r5, 80149ee <__d2b+0x92>
 80149c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80149c8:	4405      	add	r5, r0
 80149ca:	603d      	str	r5, [r7, #0]
 80149cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80149d0:	6030      	str	r0, [r6, #0]
 80149d2:	4620      	mov	r0, r4
 80149d4:	b003      	add	sp, #12
 80149d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149da:	6161      	str	r1, [r4, #20]
 80149dc:	e7ea      	b.n	80149b4 <__d2b+0x58>
 80149de:	a801      	add	r0, sp, #4
 80149e0:	f7ff fd61 	bl	80144a6 <__lo0bits>
 80149e4:	9b01      	ldr	r3, [sp, #4]
 80149e6:	6163      	str	r3, [r4, #20]
 80149e8:	3020      	adds	r0, #32
 80149ea:	2201      	movs	r2, #1
 80149ec:	e7e8      	b.n	80149c0 <__d2b+0x64>
 80149ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80149f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80149f6:	6038      	str	r0, [r7, #0]
 80149f8:	6918      	ldr	r0, [r3, #16]
 80149fa:	f7ff fd35 	bl	8014468 <__hi0bits>
 80149fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014a02:	e7e5      	b.n	80149d0 <__d2b+0x74>
 8014a04:	08016864 	.word	0x08016864
 8014a08:	08016875 	.word	0x08016875

08014a0c <__ssputs_r>:
 8014a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a10:	688e      	ldr	r6, [r1, #8]
 8014a12:	461f      	mov	r7, r3
 8014a14:	42be      	cmp	r6, r7
 8014a16:	680b      	ldr	r3, [r1, #0]
 8014a18:	4682      	mov	sl, r0
 8014a1a:	460c      	mov	r4, r1
 8014a1c:	4690      	mov	r8, r2
 8014a1e:	d82d      	bhi.n	8014a7c <__ssputs_r+0x70>
 8014a20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014a24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014a28:	d026      	beq.n	8014a78 <__ssputs_r+0x6c>
 8014a2a:	6965      	ldr	r5, [r4, #20]
 8014a2c:	6909      	ldr	r1, [r1, #16]
 8014a2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a32:	eba3 0901 	sub.w	r9, r3, r1
 8014a36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a3a:	1c7b      	adds	r3, r7, #1
 8014a3c:	444b      	add	r3, r9
 8014a3e:	106d      	asrs	r5, r5, #1
 8014a40:	429d      	cmp	r5, r3
 8014a42:	bf38      	it	cc
 8014a44:	461d      	movcc	r5, r3
 8014a46:	0553      	lsls	r3, r2, #21
 8014a48:	d527      	bpl.n	8014a9a <__ssputs_r+0x8e>
 8014a4a:	4629      	mov	r1, r5
 8014a4c:	f7ff fbd8 	bl	8014200 <_malloc_r>
 8014a50:	4606      	mov	r6, r0
 8014a52:	b360      	cbz	r0, 8014aae <__ssputs_r+0xa2>
 8014a54:	6921      	ldr	r1, [r4, #16]
 8014a56:	464a      	mov	r2, r9
 8014a58:	f7fe fcf7 	bl	801344a <memcpy>
 8014a5c:	89a3      	ldrh	r3, [r4, #12]
 8014a5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a66:	81a3      	strh	r3, [r4, #12]
 8014a68:	6126      	str	r6, [r4, #16]
 8014a6a:	6165      	str	r5, [r4, #20]
 8014a6c:	444e      	add	r6, r9
 8014a6e:	eba5 0509 	sub.w	r5, r5, r9
 8014a72:	6026      	str	r6, [r4, #0]
 8014a74:	60a5      	str	r5, [r4, #8]
 8014a76:	463e      	mov	r6, r7
 8014a78:	42be      	cmp	r6, r7
 8014a7a:	d900      	bls.n	8014a7e <__ssputs_r+0x72>
 8014a7c:	463e      	mov	r6, r7
 8014a7e:	6820      	ldr	r0, [r4, #0]
 8014a80:	4632      	mov	r2, r6
 8014a82:	4641      	mov	r1, r8
 8014a84:	f000 fb6a 	bl	801515c <memmove>
 8014a88:	68a3      	ldr	r3, [r4, #8]
 8014a8a:	1b9b      	subs	r3, r3, r6
 8014a8c:	60a3      	str	r3, [r4, #8]
 8014a8e:	6823      	ldr	r3, [r4, #0]
 8014a90:	4433      	add	r3, r6
 8014a92:	6023      	str	r3, [r4, #0]
 8014a94:	2000      	movs	r0, #0
 8014a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a9a:	462a      	mov	r2, r5
 8014a9c:	f000 fbee 	bl	801527c <_realloc_r>
 8014aa0:	4606      	mov	r6, r0
 8014aa2:	2800      	cmp	r0, #0
 8014aa4:	d1e0      	bne.n	8014a68 <__ssputs_r+0x5c>
 8014aa6:	6921      	ldr	r1, [r4, #16]
 8014aa8:	4650      	mov	r0, sl
 8014aaa:	f7ff fb35 	bl	8014118 <_free_r>
 8014aae:	230c      	movs	r3, #12
 8014ab0:	f8ca 3000 	str.w	r3, [sl]
 8014ab4:	89a3      	ldrh	r3, [r4, #12]
 8014ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014aba:	81a3      	strh	r3, [r4, #12]
 8014abc:	f04f 30ff 	mov.w	r0, #4294967295
 8014ac0:	e7e9      	b.n	8014a96 <__ssputs_r+0x8a>
	...

08014ac4 <_svfiprintf_r>:
 8014ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac8:	4698      	mov	r8, r3
 8014aca:	898b      	ldrh	r3, [r1, #12]
 8014acc:	061b      	lsls	r3, r3, #24
 8014ace:	b09d      	sub	sp, #116	@ 0x74
 8014ad0:	4607      	mov	r7, r0
 8014ad2:	460d      	mov	r5, r1
 8014ad4:	4614      	mov	r4, r2
 8014ad6:	d510      	bpl.n	8014afa <_svfiprintf_r+0x36>
 8014ad8:	690b      	ldr	r3, [r1, #16]
 8014ada:	b973      	cbnz	r3, 8014afa <_svfiprintf_r+0x36>
 8014adc:	2140      	movs	r1, #64	@ 0x40
 8014ade:	f7ff fb8f 	bl	8014200 <_malloc_r>
 8014ae2:	6028      	str	r0, [r5, #0]
 8014ae4:	6128      	str	r0, [r5, #16]
 8014ae6:	b930      	cbnz	r0, 8014af6 <_svfiprintf_r+0x32>
 8014ae8:	230c      	movs	r3, #12
 8014aea:	603b      	str	r3, [r7, #0]
 8014aec:	f04f 30ff 	mov.w	r0, #4294967295
 8014af0:	b01d      	add	sp, #116	@ 0x74
 8014af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014af6:	2340      	movs	r3, #64	@ 0x40
 8014af8:	616b      	str	r3, [r5, #20]
 8014afa:	2300      	movs	r3, #0
 8014afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014afe:	2320      	movs	r3, #32
 8014b00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b08:	2330      	movs	r3, #48	@ 0x30
 8014b0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014ca8 <_svfiprintf_r+0x1e4>
 8014b0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014b12:	f04f 0901 	mov.w	r9, #1
 8014b16:	4623      	mov	r3, r4
 8014b18:	469a      	mov	sl, r3
 8014b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b1e:	b10a      	cbz	r2, 8014b24 <_svfiprintf_r+0x60>
 8014b20:	2a25      	cmp	r2, #37	@ 0x25
 8014b22:	d1f9      	bne.n	8014b18 <_svfiprintf_r+0x54>
 8014b24:	ebba 0b04 	subs.w	fp, sl, r4
 8014b28:	d00b      	beq.n	8014b42 <_svfiprintf_r+0x7e>
 8014b2a:	465b      	mov	r3, fp
 8014b2c:	4622      	mov	r2, r4
 8014b2e:	4629      	mov	r1, r5
 8014b30:	4638      	mov	r0, r7
 8014b32:	f7ff ff6b 	bl	8014a0c <__ssputs_r>
 8014b36:	3001      	adds	r0, #1
 8014b38:	f000 80a7 	beq.w	8014c8a <_svfiprintf_r+0x1c6>
 8014b3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b3e:	445a      	add	r2, fp
 8014b40:	9209      	str	r2, [sp, #36]	@ 0x24
 8014b42:	f89a 3000 	ldrb.w	r3, [sl]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	f000 809f 	beq.w	8014c8a <_svfiprintf_r+0x1c6>
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b56:	f10a 0a01 	add.w	sl, sl, #1
 8014b5a:	9304      	str	r3, [sp, #16]
 8014b5c:	9307      	str	r3, [sp, #28]
 8014b5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014b62:	931a      	str	r3, [sp, #104]	@ 0x68
 8014b64:	4654      	mov	r4, sl
 8014b66:	2205      	movs	r2, #5
 8014b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b6c:	484e      	ldr	r0, [pc, #312]	@ (8014ca8 <_svfiprintf_r+0x1e4>)
 8014b6e:	f7eb fb4f 	bl	8000210 <memchr>
 8014b72:	9a04      	ldr	r2, [sp, #16]
 8014b74:	b9d8      	cbnz	r0, 8014bae <_svfiprintf_r+0xea>
 8014b76:	06d0      	lsls	r0, r2, #27
 8014b78:	bf44      	itt	mi
 8014b7a:	2320      	movmi	r3, #32
 8014b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b80:	0711      	lsls	r1, r2, #28
 8014b82:	bf44      	itt	mi
 8014b84:	232b      	movmi	r3, #43	@ 0x2b
 8014b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8014b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b90:	d015      	beq.n	8014bbe <_svfiprintf_r+0xfa>
 8014b92:	9a07      	ldr	r2, [sp, #28]
 8014b94:	4654      	mov	r4, sl
 8014b96:	2000      	movs	r0, #0
 8014b98:	f04f 0c0a 	mov.w	ip, #10
 8014b9c:	4621      	mov	r1, r4
 8014b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ba2:	3b30      	subs	r3, #48	@ 0x30
 8014ba4:	2b09      	cmp	r3, #9
 8014ba6:	d94b      	bls.n	8014c40 <_svfiprintf_r+0x17c>
 8014ba8:	b1b0      	cbz	r0, 8014bd8 <_svfiprintf_r+0x114>
 8014baa:	9207      	str	r2, [sp, #28]
 8014bac:	e014      	b.n	8014bd8 <_svfiprintf_r+0x114>
 8014bae:	eba0 0308 	sub.w	r3, r0, r8
 8014bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8014bb6:	4313      	orrs	r3, r2
 8014bb8:	9304      	str	r3, [sp, #16]
 8014bba:	46a2      	mov	sl, r4
 8014bbc:	e7d2      	b.n	8014b64 <_svfiprintf_r+0xa0>
 8014bbe:	9b03      	ldr	r3, [sp, #12]
 8014bc0:	1d19      	adds	r1, r3, #4
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	9103      	str	r1, [sp, #12]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	bfbb      	ittet	lt
 8014bca:	425b      	neglt	r3, r3
 8014bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8014bd0:	9307      	strge	r3, [sp, #28]
 8014bd2:	9307      	strlt	r3, [sp, #28]
 8014bd4:	bfb8      	it	lt
 8014bd6:	9204      	strlt	r2, [sp, #16]
 8014bd8:	7823      	ldrb	r3, [r4, #0]
 8014bda:	2b2e      	cmp	r3, #46	@ 0x2e
 8014bdc:	d10a      	bne.n	8014bf4 <_svfiprintf_r+0x130>
 8014bde:	7863      	ldrb	r3, [r4, #1]
 8014be0:	2b2a      	cmp	r3, #42	@ 0x2a
 8014be2:	d132      	bne.n	8014c4a <_svfiprintf_r+0x186>
 8014be4:	9b03      	ldr	r3, [sp, #12]
 8014be6:	1d1a      	adds	r2, r3, #4
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	9203      	str	r2, [sp, #12]
 8014bec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014bf0:	3402      	adds	r4, #2
 8014bf2:	9305      	str	r3, [sp, #20]
 8014bf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014cb8 <_svfiprintf_r+0x1f4>
 8014bf8:	7821      	ldrb	r1, [r4, #0]
 8014bfa:	2203      	movs	r2, #3
 8014bfc:	4650      	mov	r0, sl
 8014bfe:	f7eb fb07 	bl	8000210 <memchr>
 8014c02:	b138      	cbz	r0, 8014c14 <_svfiprintf_r+0x150>
 8014c04:	9b04      	ldr	r3, [sp, #16]
 8014c06:	eba0 000a 	sub.w	r0, r0, sl
 8014c0a:	2240      	movs	r2, #64	@ 0x40
 8014c0c:	4082      	lsls	r2, r0
 8014c0e:	4313      	orrs	r3, r2
 8014c10:	3401      	adds	r4, #1
 8014c12:	9304      	str	r3, [sp, #16]
 8014c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c18:	4824      	ldr	r0, [pc, #144]	@ (8014cac <_svfiprintf_r+0x1e8>)
 8014c1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014c1e:	2206      	movs	r2, #6
 8014c20:	f7eb faf6 	bl	8000210 <memchr>
 8014c24:	2800      	cmp	r0, #0
 8014c26:	d036      	beq.n	8014c96 <_svfiprintf_r+0x1d2>
 8014c28:	4b21      	ldr	r3, [pc, #132]	@ (8014cb0 <_svfiprintf_r+0x1ec>)
 8014c2a:	bb1b      	cbnz	r3, 8014c74 <_svfiprintf_r+0x1b0>
 8014c2c:	9b03      	ldr	r3, [sp, #12]
 8014c2e:	3307      	adds	r3, #7
 8014c30:	f023 0307 	bic.w	r3, r3, #7
 8014c34:	3308      	adds	r3, #8
 8014c36:	9303      	str	r3, [sp, #12]
 8014c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c3a:	4433      	add	r3, r6
 8014c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c3e:	e76a      	b.n	8014b16 <_svfiprintf_r+0x52>
 8014c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c44:	460c      	mov	r4, r1
 8014c46:	2001      	movs	r0, #1
 8014c48:	e7a8      	b.n	8014b9c <_svfiprintf_r+0xd8>
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	3401      	adds	r4, #1
 8014c4e:	9305      	str	r3, [sp, #20]
 8014c50:	4619      	mov	r1, r3
 8014c52:	f04f 0c0a 	mov.w	ip, #10
 8014c56:	4620      	mov	r0, r4
 8014c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c5c:	3a30      	subs	r2, #48	@ 0x30
 8014c5e:	2a09      	cmp	r2, #9
 8014c60:	d903      	bls.n	8014c6a <_svfiprintf_r+0x1a6>
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d0c6      	beq.n	8014bf4 <_svfiprintf_r+0x130>
 8014c66:	9105      	str	r1, [sp, #20]
 8014c68:	e7c4      	b.n	8014bf4 <_svfiprintf_r+0x130>
 8014c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c6e:	4604      	mov	r4, r0
 8014c70:	2301      	movs	r3, #1
 8014c72:	e7f0      	b.n	8014c56 <_svfiprintf_r+0x192>
 8014c74:	ab03      	add	r3, sp, #12
 8014c76:	9300      	str	r3, [sp, #0]
 8014c78:	462a      	mov	r2, r5
 8014c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8014cb4 <_svfiprintf_r+0x1f0>)
 8014c7c:	a904      	add	r1, sp, #16
 8014c7e:	4638      	mov	r0, r7
 8014c80:	f7fd fd10 	bl	80126a4 <_printf_float>
 8014c84:	1c42      	adds	r2, r0, #1
 8014c86:	4606      	mov	r6, r0
 8014c88:	d1d6      	bne.n	8014c38 <_svfiprintf_r+0x174>
 8014c8a:	89ab      	ldrh	r3, [r5, #12]
 8014c8c:	065b      	lsls	r3, r3, #25
 8014c8e:	f53f af2d 	bmi.w	8014aec <_svfiprintf_r+0x28>
 8014c92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c94:	e72c      	b.n	8014af0 <_svfiprintf_r+0x2c>
 8014c96:	ab03      	add	r3, sp, #12
 8014c98:	9300      	str	r3, [sp, #0]
 8014c9a:	462a      	mov	r2, r5
 8014c9c:	4b05      	ldr	r3, [pc, #20]	@ (8014cb4 <_svfiprintf_r+0x1f0>)
 8014c9e:	a904      	add	r1, sp, #16
 8014ca0:	4638      	mov	r0, r7
 8014ca2:	f7fd ff97 	bl	8012bd4 <_printf_i>
 8014ca6:	e7ed      	b.n	8014c84 <_svfiprintf_r+0x1c0>
 8014ca8:	080168ce 	.word	0x080168ce
 8014cac:	080168d8 	.word	0x080168d8
 8014cb0:	080126a5 	.word	0x080126a5
 8014cb4:	08014a0d 	.word	0x08014a0d
 8014cb8:	080168d4 	.word	0x080168d4

08014cbc <__sfputc_r>:
 8014cbc:	6893      	ldr	r3, [r2, #8]
 8014cbe:	3b01      	subs	r3, #1
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	b410      	push	{r4}
 8014cc4:	6093      	str	r3, [r2, #8]
 8014cc6:	da08      	bge.n	8014cda <__sfputc_r+0x1e>
 8014cc8:	6994      	ldr	r4, [r2, #24]
 8014cca:	42a3      	cmp	r3, r4
 8014ccc:	db01      	blt.n	8014cd2 <__sfputc_r+0x16>
 8014cce:	290a      	cmp	r1, #10
 8014cd0:	d103      	bne.n	8014cda <__sfputc_r+0x1e>
 8014cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cd6:	f7fe ba46 	b.w	8013166 <__swbuf_r>
 8014cda:	6813      	ldr	r3, [r2, #0]
 8014cdc:	1c58      	adds	r0, r3, #1
 8014cde:	6010      	str	r0, [r2, #0]
 8014ce0:	7019      	strb	r1, [r3, #0]
 8014ce2:	4608      	mov	r0, r1
 8014ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ce8:	4770      	bx	lr

08014cea <__sfputs_r>:
 8014cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cec:	4606      	mov	r6, r0
 8014cee:	460f      	mov	r7, r1
 8014cf0:	4614      	mov	r4, r2
 8014cf2:	18d5      	adds	r5, r2, r3
 8014cf4:	42ac      	cmp	r4, r5
 8014cf6:	d101      	bne.n	8014cfc <__sfputs_r+0x12>
 8014cf8:	2000      	movs	r0, #0
 8014cfa:	e007      	b.n	8014d0c <__sfputs_r+0x22>
 8014cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d00:	463a      	mov	r2, r7
 8014d02:	4630      	mov	r0, r6
 8014d04:	f7ff ffda 	bl	8014cbc <__sfputc_r>
 8014d08:	1c43      	adds	r3, r0, #1
 8014d0a:	d1f3      	bne.n	8014cf4 <__sfputs_r+0xa>
 8014d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d10 <_vfiprintf_r>:
 8014d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d14:	460d      	mov	r5, r1
 8014d16:	b09d      	sub	sp, #116	@ 0x74
 8014d18:	4614      	mov	r4, r2
 8014d1a:	4698      	mov	r8, r3
 8014d1c:	4606      	mov	r6, r0
 8014d1e:	b118      	cbz	r0, 8014d28 <_vfiprintf_r+0x18>
 8014d20:	6a03      	ldr	r3, [r0, #32]
 8014d22:	b90b      	cbnz	r3, 8014d28 <_vfiprintf_r+0x18>
 8014d24:	f7fe f900 	bl	8012f28 <__sinit>
 8014d28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d2a:	07d9      	lsls	r1, r3, #31
 8014d2c:	d405      	bmi.n	8014d3a <_vfiprintf_r+0x2a>
 8014d2e:	89ab      	ldrh	r3, [r5, #12]
 8014d30:	059a      	lsls	r2, r3, #22
 8014d32:	d402      	bmi.n	8014d3a <_vfiprintf_r+0x2a>
 8014d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d36:	f7fe fb86 	bl	8013446 <__retarget_lock_acquire_recursive>
 8014d3a:	89ab      	ldrh	r3, [r5, #12]
 8014d3c:	071b      	lsls	r3, r3, #28
 8014d3e:	d501      	bpl.n	8014d44 <_vfiprintf_r+0x34>
 8014d40:	692b      	ldr	r3, [r5, #16]
 8014d42:	b99b      	cbnz	r3, 8014d6c <_vfiprintf_r+0x5c>
 8014d44:	4629      	mov	r1, r5
 8014d46:	4630      	mov	r0, r6
 8014d48:	f7fe fa4c 	bl	80131e4 <__swsetup_r>
 8014d4c:	b170      	cbz	r0, 8014d6c <_vfiprintf_r+0x5c>
 8014d4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d50:	07dc      	lsls	r4, r3, #31
 8014d52:	d504      	bpl.n	8014d5e <_vfiprintf_r+0x4e>
 8014d54:	f04f 30ff 	mov.w	r0, #4294967295
 8014d58:	b01d      	add	sp, #116	@ 0x74
 8014d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d5e:	89ab      	ldrh	r3, [r5, #12]
 8014d60:	0598      	lsls	r0, r3, #22
 8014d62:	d4f7      	bmi.n	8014d54 <_vfiprintf_r+0x44>
 8014d64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d66:	f7fe fb6f 	bl	8013448 <__retarget_lock_release_recursive>
 8014d6a:	e7f3      	b.n	8014d54 <_vfiprintf_r+0x44>
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d70:	2320      	movs	r3, #32
 8014d72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d7a:	2330      	movs	r3, #48	@ 0x30
 8014d7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014f2c <_vfiprintf_r+0x21c>
 8014d80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014d84:	f04f 0901 	mov.w	r9, #1
 8014d88:	4623      	mov	r3, r4
 8014d8a:	469a      	mov	sl, r3
 8014d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d90:	b10a      	cbz	r2, 8014d96 <_vfiprintf_r+0x86>
 8014d92:	2a25      	cmp	r2, #37	@ 0x25
 8014d94:	d1f9      	bne.n	8014d8a <_vfiprintf_r+0x7a>
 8014d96:	ebba 0b04 	subs.w	fp, sl, r4
 8014d9a:	d00b      	beq.n	8014db4 <_vfiprintf_r+0xa4>
 8014d9c:	465b      	mov	r3, fp
 8014d9e:	4622      	mov	r2, r4
 8014da0:	4629      	mov	r1, r5
 8014da2:	4630      	mov	r0, r6
 8014da4:	f7ff ffa1 	bl	8014cea <__sfputs_r>
 8014da8:	3001      	adds	r0, #1
 8014daa:	f000 80a7 	beq.w	8014efc <_vfiprintf_r+0x1ec>
 8014dae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014db0:	445a      	add	r2, fp
 8014db2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014db4:	f89a 3000 	ldrb.w	r3, [sl]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	f000 809f 	beq.w	8014efc <_vfiprintf_r+0x1ec>
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8014dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014dc8:	f10a 0a01 	add.w	sl, sl, #1
 8014dcc:	9304      	str	r3, [sp, #16]
 8014dce:	9307      	str	r3, [sp, #28]
 8014dd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014dd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8014dd6:	4654      	mov	r4, sl
 8014dd8:	2205      	movs	r2, #5
 8014dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dde:	4853      	ldr	r0, [pc, #332]	@ (8014f2c <_vfiprintf_r+0x21c>)
 8014de0:	f7eb fa16 	bl	8000210 <memchr>
 8014de4:	9a04      	ldr	r2, [sp, #16]
 8014de6:	b9d8      	cbnz	r0, 8014e20 <_vfiprintf_r+0x110>
 8014de8:	06d1      	lsls	r1, r2, #27
 8014dea:	bf44      	itt	mi
 8014dec:	2320      	movmi	r3, #32
 8014dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014df2:	0713      	lsls	r3, r2, #28
 8014df4:	bf44      	itt	mi
 8014df6:	232b      	movmi	r3, #43	@ 0x2b
 8014df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8014e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e02:	d015      	beq.n	8014e30 <_vfiprintf_r+0x120>
 8014e04:	9a07      	ldr	r2, [sp, #28]
 8014e06:	4654      	mov	r4, sl
 8014e08:	2000      	movs	r0, #0
 8014e0a:	f04f 0c0a 	mov.w	ip, #10
 8014e0e:	4621      	mov	r1, r4
 8014e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e14:	3b30      	subs	r3, #48	@ 0x30
 8014e16:	2b09      	cmp	r3, #9
 8014e18:	d94b      	bls.n	8014eb2 <_vfiprintf_r+0x1a2>
 8014e1a:	b1b0      	cbz	r0, 8014e4a <_vfiprintf_r+0x13a>
 8014e1c:	9207      	str	r2, [sp, #28]
 8014e1e:	e014      	b.n	8014e4a <_vfiprintf_r+0x13a>
 8014e20:	eba0 0308 	sub.w	r3, r0, r8
 8014e24:	fa09 f303 	lsl.w	r3, r9, r3
 8014e28:	4313      	orrs	r3, r2
 8014e2a:	9304      	str	r3, [sp, #16]
 8014e2c:	46a2      	mov	sl, r4
 8014e2e:	e7d2      	b.n	8014dd6 <_vfiprintf_r+0xc6>
 8014e30:	9b03      	ldr	r3, [sp, #12]
 8014e32:	1d19      	adds	r1, r3, #4
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	9103      	str	r1, [sp, #12]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	bfbb      	ittet	lt
 8014e3c:	425b      	neglt	r3, r3
 8014e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8014e42:	9307      	strge	r3, [sp, #28]
 8014e44:	9307      	strlt	r3, [sp, #28]
 8014e46:	bfb8      	it	lt
 8014e48:	9204      	strlt	r2, [sp, #16]
 8014e4a:	7823      	ldrb	r3, [r4, #0]
 8014e4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8014e4e:	d10a      	bne.n	8014e66 <_vfiprintf_r+0x156>
 8014e50:	7863      	ldrb	r3, [r4, #1]
 8014e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e54:	d132      	bne.n	8014ebc <_vfiprintf_r+0x1ac>
 8014e56:	9b03      	ldr	r3, [sp, #12]
 8014e58:	1d1a      	adds	r2, r3, #4
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	9203      	str	r2, [sp, #12]
 8014e5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014e62:	3402      	adds	r4, #2
 8014e64:	9305      	str	r3, [sp, #20]
 8014e66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014f3c <_vfiprintf_r+0x22c>
 8014e6a:	7821      	ldrb	r1, [r4, #0]
 8014e6c:	2203      	movs	r2, #3
 8014e6e:	4650      	mov	r0, sl
 8014e70:	f7eb f9ce 	bl	8000210 <memchr>
 8014e74:	b138      	cbz	r0, 8014e86 <_vfiprintf_r+0x176>
 8014e76:	9b04      	ldr	r3, [sp, #16]
 8014e78:	eba0 000a 	sub.w	r0, r0, sl
 8014e7c:	2240      	movs	r2, #64	@ 0x40
 8014e7e:	4082      	lsls	r2, r0
 8014e80:	4313      	orrs	r3, r2
 8014e82:	3401      	adds	r4, #1
 8014e84:	9304      	str	r3, [sp, #16]
 8014e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e8a:	4829      	ldr	r0, [pc, #164]	@ (8014f30 <_vfiprintf_r+0x220>)
 8014e8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014e90:	2206      	movs	r2, #6
 8014e92:	f7eb f9bd 	bl	8000210 <memchr>
 8014e96:	2800      	cmp	r0, #0
 8014e98:	d03f      	beq.n	8014f1a <_vfiprintf_r+0x20a>
 8014e9a:	4b26      	ldr	r3, [pc, #152]	@ (8014f34 <_vfiprintf_r+0x224>)
 8014e9c:	bb1b      	cbnz	r3, 8014ee6 <_vfiprintf_r+0x1d6>
 8014e9e:	9b03      	ldr	r3, [sp, #12]
 8014ea0:	3307      	adds	r3, #7
 8014ea2:	f023 0307 	bic.w	r3, r3, #7
 8014ea6:	3308      	adds	r3, #8
 8014ea8:	9303      	str	r3, [sp, #12]
 8014eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014eac:	443b      	add	r3, r7
 8014eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8014eb0:	e76a      	b.n	8014d88 <_vfiprintf_r+0x78>
 8014eb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8014eb6:	460c      	mov	r4, r1
 8014eb8:	2001      	movs	r0, #1
 8014eba:	e7a8      	b.n	8014e0e <_vfiprintf_r+0xfe>
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	3401      	adds	r4, #1
 8014ec0:	9305      	str	r3, [sp, #20]
 8014ec2:	4619      	mov	r1, r3
 8014ec4:	f04f 0c0a 	mov.w	ip, #10
 8014ec8:	4620      	mov	r0, r4
 8014eca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ece:	3a30      	subs	r2, #48	@ 0x30
 8014ed0:	2a09      	cmp	r2, #9
 8014ed2:	d903      	bls.n	8014edc <_vfiprintf_r+0x1cc>
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d0c6      	beq.n	8014e66 <_vfiprintf_r+0x156>
 8014ed8:	9105      	str	r1, [sp, #20]
 8014eda:	e7c4      	b.n	8014e66 <_vfiprintf_r+0x156>
 8014edc:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ee0:	4604      	mov	r4, r0
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	e7f0      	b.n	8014ec8 <_vfiprintf_r+0x1b8>
 8014ee6:	ab03      	add	r3, sp, #12
 8014ee8:	9300      	str	r3, [sp, #0]
 8014eea:	462a      	mov	r2, r5
 8014eec:	4b12      	ldr	r3, [pc, #72]	@ (8014f38 <_vfiprintf_r+0x228>)
 8014eee:	a904      	add	r1, sp, #16
 8014ef0:	4630      	mov	r0, r6
 8014ef2:	f7fd fbd7 	bl	80126a4 <_printf_float>
 8014ef6:	4607      	mov	r7, r0
 8014ef8:	1c78      	adds	r0, r7, #1
 8014efa:	d1d6      	bne.n	8014eaa <_vfiprintf_r+0x19a>
 8014efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014efe:	07d9      	lsls	r1, r3, #31
 8014f00:	d405      	bmi.n	8014f0e <_vfiprintf_r+0x1fe>
 8014f02:	89ab      	ldrh	r3, [r5, #12]
 8014f04:	059a      	lsls	r2, r3, #22
 8014f06:	d402      	bmi.n	8014f0e <_vfiprintf_r+0x1fe>
 8014f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f0a:	f7fe fa9d 	bl	8013448 <__retarget_lock_release_recursive>
 8014f0e:	89ab      	ldrh	r3, [r5, #12]
 8014f10:	065b      	lsls	r3, r3, #25
 8014f12:	f53f af1f 	bmi.w	8014d54 <_vfiprintf_r+0x44>
 8014f16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f18:	e71e      	b.n	8014d58 <_vfiprintf_r+0x48>
 8014f1a:	ab03      	add	r3, sp, #12
 8014f1c:	9300      	str	r3, [sp, #0]
 8014f1e:	462a      	mov	r2, r5
 8014f20:	4b05      	ldr	r3, [pc, #20]	@ (8014f38 <_vfiprintf_r+0x228>)
 8014f22:	a904      	add	r1, sp, #16
 8014f24:	4630      	mov	r0, r6
 8014f26:	f7fd fe55 	bl	8012bd4 <_printf_i>
 8014f2a:	e7e4      	b.n	8014ef6 <_vfiprintf_r+0x1e6>
 8014f2c:	080168ce 	.word	0x080168ce
 8014f30:	080168d8 	.word	0x080168d8
 8014f34:	080126a5 	.word	0x080126a5
 8014f38:	08014ceb 	.word	0x08014ceb
 8014f3c:	080168d4 	.word	0x080168d4

08014f40 <__sflush_r>:
 8014f40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f48:	0716      	lsls	r6, r2, #28
 8014f4a:	4605      	mov	r5, r0
 8014f4c:	460c      	mov	r4, r1
 8014f4e:	d454      	bmi.n	8014ffa <__sflush_r+0xba>
 8014f50:	684b      	ldr	r3, [r1, #4]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	dc02      	bgt.n	8014f5c <__sflush_r+0x1c>
 8014f56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	dd48      	ble.n	8014fee <__sflush_r+0xae>
 8014f5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014f5e:	2e00      	cmp	r6, #0
 8014f60:	d045      	beq.n	8014fee <__sflush_r+0xae>
 8014f62:	2300      	movs	r3, #0
 8014f64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014f68:	682f      	ldr	r7, [r5, #0]
 8014f6a:	6a21      	ldr	r1, [r4, #32]
 8014f6c:	602b      	str	r3, [r5, #0]
 8014f6e:	d030      	beq.n	8014fd2 <__sflush_r+0x92>
 8014f70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014f72:	89a3      	ldrh	r3, [r4, #12]
 8014f74:	0759      	lsls	r1, r3, #29
 8014f76:	d505      	bpl.n	8014f84 <__sflush_r+0x44>
 8014f78:	6863      	ldr	r3, [r4, #4]
 8014f7a:	1ad2      	subs	r2, r2, r3
 8014f7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014f7e:	b10b      	cbz	r3, 8014f84 <__sflush_r+0x44>
 8014f80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014f82:	1ad2      	subs	r2, r2, r3
 8014f84:	2300      	movs	r3, #0
 8014f86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014f88:	6a21      	ldr	r1, [r4, #32]
 8014f8a:	4628      	mov	r0, r5
 8014f8c:	47b0      	blx	r6
 8014f8e:	1c43      	adds	r3, r0, #1
 8014f90:	89a3      	ldrh	r3, [r4, #12]
 8014f92:	d106      	bne.n	8014fa2 <__sflush_r+0x62>
 8014f94:	6829      	ldr	r1, [r5, #0]
 8014f96:	291d      	cmp	r1, #29
 8014f98:	d82b      	bhi.n	8014ff2 <__sflush_r+0xb2>
 8014f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8015044 <__sflush_r+0x104>)
 8014f9c:	40ca      	lsrs	r2, r1
 8014f9e:	07d6      	lsls	r6, r2, #31
 8014fa0:	d527      	bpl.n	8014ff2 <__sflush_r+0xb2>
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	6062      	str	r2, [r4, #4]
 8014fa6:	04d9      	lsls	r1, r3, #19
 8014fa8:	6922      	ldr	r2, [r4, #16]
 8014faa:	6022      	str	r2, [r4, #0]
 8014fac:	d504      	bpl.n	8014fb8 <__sflush_r+0x78>
 8014fae:	1c42      	adds	r2, r0, #1
 8014fb0:	d101      	bne.n	8014fb6 <__sflush_r+0x76>
 8014fb2:	682b      	ldr	r3, [r5, #0]
 8014fb4:	b903      	cbnz	r3, 8014fb8 <__sflush_r+0x78>
 8014fb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8014fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014fba:	602f      	str	r7, [r5, #0]
 8014fbc:	b1b9      	cbz	r1, 8014fee <__sflush_r+0xae>
 8014fbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014fc2:	4299      	cmp	r1, r3
 8014fc4:	d002      	beq.n	8014fcc <__sflush_r+0x8c>
 8014fc6:	4628      	mov	r0, r5
 8014fc8:	f7ff f8a6 	bl	8014118 <_free_r>
 8014fcc:	2300      	movs	r3, #0
 8014fce:	6363      	str	r3, [r4, #52]	@ 0x34
 8014fd0:	e00d      	b.n	8014fee <__sflush_r+0xae>
 8014fd2:	2301      	movs	r3, #1
 8014fd4:	4628      	mov	r0, r5
 8014fd6:	47b0      	blx	r6
 8014fd8:	4602      	mov	r2, r0
 8014fda:	1c50      	adds	r0, r2, #1
 8014fdc:	d1c9      	bne.n	8014f72 <__sflush_r+0x32>
 8014fde:	682b      	ldr	r3, [r5, #0]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d0c6      	beq.n	8014f72 <__sflush_r+0x32>
 8014fe4:	2b1d      	cmp	r3, #29
 8014fe6:	d001      	beq.n	8014fec <__sflush_r+0xac>
 8014fe8:	2b16      	cmp	r3, #22
 8014fea:	d11e      	bne.n	801502a <__sflush_r+0xea>
 8014fec:	602f      	str	r7, [r5, #0]
 8014fee:	2000      	movs	r0, #0
 8014ff0:	e022      	b.n	8015038 <__sflush_r+0xf8>
 8014ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ff6:	b21b      	sxth	r3, r3
 8014ff8:	e01b      	b.n	8015032 <__sflush_r+0xf2>
 8014ffa:	690f      	ldr	r7, [r1, #16]
 8014ffc:	2f00      	cmp	r7, #0
 8014ffe:	d0f6      	beq.n	8014fee <__sflush_r+0xae>
 8015000:	0793      	lsls	r3, r2, #30
 8015002:	680e      	ldr	r6, [r1, #0]
 8015004:	bf08      	it	eq
 8015006:	694b      	ldreq	r3, [r1, #20]
 8015008:	600f      	str	r7, [r1, #0]
 801500a:	bf18      	it	ne
 801500c:	2300      	movne	r3, #0
 801500e:	eba6 0807 	sub.w	r8, r6, r7
 8015012:	608b      	str	r3, [r1, #8]
 8015014:	f1b8 0f00 	cmp.w	r8, #0
 8015018:	dde9      	ble.n	8014fee <__sflush_r+0xae>
 801501a:	6a21      	ldr	r1, [r4, #32]
 801501c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801501e:	4643      	mov	r3, r8
 8015020:	463a      	mov	r2, r7
 8015022:	4628      	mov	r0, r5
 8015024:	47b0      	blx	r6
 8015026:	2800      	cmp	r0, #0
 8015028:	dc08      	bgt.n	801503c <__sflush_r+0xfc>
 801502a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801502e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015032:	81a3      	strh	r3, [r4, #12]
 8015034:	f04f 30ff 	mov.w	r0, #4294967295
 8015038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801503c:	4407      	add	r7, r0
 801503e:	eba8 0800 	sub.w	r8, r8, r0
 8015042:	e7e7      	b.n	8015014 <__sflush_r+0xd4>
 8015044:	20400001 	.word	0x20400001

08015048 <_fflush_r>:
 8015048:	b538      	push	{r3, r4, r5, lr}
 801504a:	690b      	ldr	r3, [r1, #16]
 801504c:	4605      	mov	r5, r0
 801504e:	460c      	mov	r4, r1
 8015050:	b913      	cbnz	r3, 8015058 <_fflush_r+0x10>
 8015052:	2500      	movs	r5, #0
 8015054:	4628      	mov	r0, r5
 8015056:	bd38      	pop	{r3, r4, r5, pc}
 8015058:	b118      	cbz	r0, 8015062 <_fflush_r+0x1a>
 801505a:	6a03      	ldr	r3, [r0, #32]
 801505c:	b90b      	cbnz	r3, 8015062 <_fflush_r+0x1a>
 801505e:	f7fd ff63 	bl	8012f28 <__sinit>
 8015062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d0f3      	beq.n	8015052 <_fflush_r+0xa>
 801506a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801506c:	07d0      	lsls	r0, r2, #31
 801506e:	d404      	bmi.n	801507a <_fflush_r+0x32>
 8015070:	0599      	lsls	r1, r3, #22
 8015072:	d402      	bmi.n	801507a <_fflush_r+0x32>
 8015074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015076:	f7fe f9e6 	bl	8013446 <__retarget_lock_acquire_recursive>
 801507a:	4628      	mov	r0, r5
 801507c:	4621      	mov	r1, r4
 801507e:	f7ff ff5f 	bl	8014f40 <__sflush_r>
 8015082:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015084:	07da      	lsls	r2, r3, #31
 8015086:	4605      	mov	r5, r0
 8015088:	d4e4      	bmi.n	8015054 <_fflush_r+0xc>
 801508a:	89a3      	ldrh	r3, [r4, #12]
 801508c:	059b      	lsls	r3, r3, #22
 801508e:	d4e1      	bmi.n	8015054 <_fflush_r+0xc>
 8015090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015092:	f7fe f9d9 	bl	8013448 <__retarget_lock_release_recursive>
 8015096:	e7dd      	b.n	8015054 <_fflush_r+0xc>

08015098 <__swhatbuf_r>:
 8015098:	b570      	push	{r4, r5, r6, lr}
 801509a:	460c      	mov	r4, r1
 801509c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150a0:	2900      	cmp	r1, #0
 80150a2:	b096      	sub	sp, #88	@ 0x58
 80150a4:	4615      	mov	r5, r2
 80150a6:	461e      	mov	r6, r3
 80150a8:	da0d      	bge.n	80150c6 <__swhatbuf_r+0x2e>
 80150aa:	89a3      	ldrh	r3, [r4, #12]
 80150ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80150b0:	f04f 0100 	mov.w	r1, #0
 80150b4:	bf14      	ite	ne
 80150b6:	2340      	movne	r3, #64	@ 0x40
 80150b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80150bc:	2000      	movs	r0, #0
 80150be:	6031      	str	r1, [r6, #0]
 80150c0:	602b      	str	r3, [r5, #0]
 80150c2:	b016      	add	sp, #88	@ 0x58
 80150c4:	bd70      	pop	{r4, r5, r6, pc}
 80150c6:	466a      	mov	r2, sp
 80150c8:	f000 f862 	bl	8015190 <_fstat_r>
 80150cc:	2800      	cmp	r0, #0
 80150ce:	dbec      	blt.n	80150aa <__swhatbuf_r+0x12>
 80150d0:	9901      	ldr	r1, [sp, #4]
 80150d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80150d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80150da:	4259      	negs	r1, r3
 80150dc:	4159      	adcs	r1, r3
 80150de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80150e2:	e7eb      	b.n	80150bc <__swhatbuf_r+0x24>

080150e4 <__smakebuf_r>:
 80150e4:	898b      	ldrh	r3, [r1, #12]
 80150e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80150e8:	079d      	lsls	r5, r3, #30
 80150ea:	4606      	mov	r6, r0
 80150ec:	460c      	mov	r4, r1
 80150ee:	d507      	bpl.n	8015100 <__smakebuf_r+0x1c>
 80150f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80150f4:	6023      	str	r3, [r4, #0]
 80150f6:	6123      	str	r3, [r4, #16]
 80150f8:	2301      	movs	r3, #1
 80150fa:	6163      	str	r3, [r4, #20]
 80150fc:	b003      	add	sp, #12
 80150fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015100:	ab01      	add	r3, sp, #4
 8015102:	466a      	mov	r2, sp
 8015104:	f7ff ffc8 	bl	8015098 <__swhatbuf_r>
 8015108:	9f00      	ldr	r7, [sp, #0]
 801510a:	4605      	mov	r5, r0
 801510c:	4639      	mov	r1, r7
 801510e:	4630      	mov	r0, r6
 8015110:	f7ff f876 	bl	8014200 <_malloc_r>
 8015114:	b948      	cbnz	r0, 801512a <__smakebuf_r+0x46>
 8015116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801511a:	059a      	lsls	r2, r3, #22
 801511c:	d4ee      	bmi.n	80150fc <__smakebuf_r+0x18>
 801511e:	f023 0303 	bic.w	r3, r3, #3
 8015122:	f043 0302 	orr.w	r3, r3, #2
 8015126:	81a3      	strh	r3, [r4, #12]
 8015128:	e7e2      	b.n	80150f0 <__smakebuf_r+0xc>
 801512a:	89a3      	ldrh	r3, [r4, #12]
 801512c:	6020      	str	r0, [r4, #0]
 801512e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015132:	81a3      	strh	r3, [r4, #12]
 8015134:	9b01      	ldr	r3, [sp, #4]
 8015136:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801513a:	b15b      	cbz	r3, 8015154 <__smakebuf_r+0x70>
 801513c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015140:	4630      	mov	r0, r6
 8015142:	f000 f837 	bl	80151b4 <_isatty_r>
 8015146:	b128      	cbz	r0, 8015154 <__smakebuf_r+0x70>
 8015148:	89a3      	ldrh	r3, [r4, #12]
 801514a:	f023 0303 	bic.w	r3, r3, #3
 801514e:	f043 0301 	orr.w	r3, r3, #1
 8015152:	81a3      	strh	r3, [r4, #12]
 8015154:	89a3      	ldrh	r3, [r4, #12]
 8015156:	431d      	orrs	r5, r3
 8015158:	81a5      	strh	r5, [r4, #12]
 801515a:	e7cf      	b.n	80150fc <__smakebuf_r+0x18>

0801515c <memmove>:
 801515c:	4288      	cmp	r0, r1
 801515e:	b510      	push	{r4, lr}
 8015160:	eb01 0402 	add.w	r4, r1, r2
 8015164:	d902      	bls.n	801516c <memmove+0x10>
 8015166:	4284      	cmp	r4, r0
 8015168:	4623      	mov	r3, r4
 801516a:	d807      	bhi.n	801517c <memmove+0x20>
 801516c:	1e43      	subs	r3, r0, #1
 801516e:	42a1      	cmp	r1, r4
 8015170:	d008      	beq.n	8015184 <memmove+0x28>
 8015172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015176:	f803 2f01 	strb.w	r2, [r3, #1]!
 801517a:	e7f8      	b.n	801516e <memmove+0x12>
 801517c:	4402      	add	r2, r0
 801517e:	4601      	mov	r1, r0
 8015180:	428a      	cmp	r2, r1
 8015182:	d100      	bne.n	8015186 <memmove+0x2a>
 8015184:	bd10      	pop	{r4, pc}
 8015186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801518a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801518e:	e7f7      	b.n	8015180 <memmove+0x24>

08015190 <_fstat_r>:
 8015190:	b538      	push	{r3, r4, r5, lr}
 8015192:	4d07      	ldr	r5, [pc, #28]	@ (80151b0 <_fstat_r+0x20>)
 8015194:	2300      	movs	r3, #0
 8015196:	4604      	mov	r4, r0
 8015198:	4608      	mov	r0, r1
 801519a:	4611      	mov	r1, r2
 801519c:	602b      	str	r3, [r5, #0]
 801519e:	f7ef f803 	bl	80041a8 <_fstat>
 80151a2:	1c43      	adds	r3, r0, #1
 80151a4:	d102      	bne.n	80151ac <_fstat_r+0x1c>
 80151a6:	682b      	ldr	r3, [r5, #0]
 80151a8:	b103      	cbz	r3, 80151ac <_fstat_r+0x1c>
 80151aa:	6023      	str	r3, [r4, #0]
 80151ac:	bd38      	pop	{r3, r4, r5, pc}
 80151ae:	bf00      	nop
 80151b0:	20004dec 	.word	0x20004dec

080151b4 <_isatty_r>:
 80151b4:	b538      	push	{r3, r4, r5, lr}
 80151b6:	4d06      	ldr	r5, [pc, #24]	@ (80151d0 <_isatty_r+0x1c>)
 80151b8:	2300      	movs	r3, #0
 80151ba:	4604      	mov	r4, r0
 80151bc:	4608      	mov	r0, r1
 80151be:	602b      	str	r3, [r5, #0]
 80151c0:	f7ef f802 	bl	80041c8 <_isatty>
 80151c4:	1c43      	adds	r3, r0, #1
 80151c6:	d102      	bne.n	80151ce <_isatty_r+0x1a>
 80151c8:	682b      	ldr	r3, [r5, #0]
 80151ca:	b103      	cbz	r3, 80151ce <_isatty_r+0x1a>
 80151cc:	6023      	str	r3, [r4, #0]
 80151ce:	bd38      	pop	{r3, r4, r5, pc}
 80151d0:	20004dec 	.word	0x20004dec

080151d4 <_sbrk_r>:
 80151d4:	b538      	push	{r3, r4, r5, lr}
 80151d6:	4d06      	ldr	r5, [pc, #24]	@ (80151f0 <_sbrk_r+0x1c>)
 80151d8:	2300      	movs	r3, #0
 80151da:	4604      	mov	r4, r0
 80151dc:	4608      	mov	r0, r1
 80151de:	602b      	str	r3, [r5, #0]
 80151e0:	f7ef f80a 	bl	80041f8 <_sbrk>
 80151e4:	1c43      	adds	r3, r0, #1
 80151e6:	d102      	bne.n	80151ee <_sbrk_r+0x1a>
 80151e8:	682b      	ldr	r3, [r5, #0]
 80151ea:	b103      	cbz	r3, 80151ee <_sbrk_r+0x1a>
 80151ec:	6023      	str	r3, [r4, #0]
 80151ee:	bd38      	pop	{r3, r4, r5, pc}
 80151f0:	20004dec 	.word	0x20004dec

080151f4 <__assert_func>:
 80151f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80151f6:	4614      	mov	r4, r2
 80151f8:	461a      	mov	r2, r3
 80151fa:	4b09      	ldr	r3, [pc, #36]	@ (8015220 <__assert_func+0x2c>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	4605      	mov	r5, r0
 8015200:	68d8      	ldr	r0, [r3, #12]
 8015202:	b14c      	cbz	r4, 8015218 <__assert_func+0x24>
 8015204:	4b07      	ldr	r3, [pc, #28]	@ (8015224 <__assert_func+0x30>)
 8015206:	9100      	str	r1, [sp, #0]
 8015208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801520c:	4906      	ldr	r1, [pc, #24]	@ (8015228 <__assert_func+0x34>)
 801520e:	462b      	mov	r3, r5
 8015210:	f000 f870 	bl	80152f4 <fiprintf>
 8015214:	f000 f880 	bl	8015318 <abort>
 8015218:	4b04      	ldr	r3, [pc, #16]	@ (801522c <__assert_func+0x38>)
 801521a:	461c      	mov	r4, r3
 801521c:	e7f3      	b.n	8015206 <__assert_func+0x12>
 801521e:	bf00      	nop
 8015220:	2000001c 	.word	0x2000001c
 8015224:	080168e9 	.word	0x080168e9
 8015228:	080168f6 	.word	0x080168f6
 801522c:	08016924 	.word	0x08016924

08015230 <_calloc_r>:
 8015230:	b570      	push	{r4, r5, r6, lr}
 8015232:	fba1 5402 	umull	r5, r4, r1, r2
 8015236:	b934      	cbnz	r4, 8015246 <_calloc_r+0x16>
 8015238:	4629      	mov	r1, r5
 801523a:	f7fe ffe1 	bl	8014200 <_malloc_r>
 801523e:	4606      	mov	r6, r0
 8015240:	b928      	cbnz	r0, 801524e <_calloc_r+0x1e>
 8015242:	4630      	mov	r0, r6
 8015244:	bd70      	pop	{r4, r5, r6, pc}
 8015246:	220c      	movs	r2, #12
 8015248:	6002      	str	r2, [r0, #0]
 801524a:	2600      	movs	r6, #0
 801524c:	e7f9      	b.n	8015242 <_calloc_r+0x12>
 801524e:	462a      	mov	r2, r5
 8015250:	4621      	mov	r1, r4
 8015252:	f7fe f81d 	bl	8013290 <memset>
 8015256:	e7f4      	b.n	8015242 <_calloc_r+0x12>

08015258 <__ascii_mbtowc>:
 8015258:	b082      	sub	sp, #8
 801525a:	b901      	cbnz	r1, 801525e <__ascii_mbtowc+0x6>
 801525c:	a901      	add	r1, sp, #4
 801525e:	b142      	cbz	r2, 8015272 <__ascii_mbtowc+0x1a>
 8015260:	b14b      	cbz	r3, 8015276 <__ascii_mbtowc+0x1e>
 8015262:	7813      	ldrb	r3, [r2, #0]
 8015264:	600b      	str	r3, [r1, #0]
 8015266:	7812      	ldrb	r2, [r2, #0]
 8015268:	1e10      	subs	r0, r2, #0
 801526a:	bf18      	it	ne
 801526c:	2001      	movne	r0, #1
 801526e:	b002      	add	sp, #8
 8015270:	4770      	bx	lr
 8015272:	4610      	mov	r0, r2
 8015274:	e7fb      	b.n	801526e <__ascii_mbtowc+0x16>
 8015276:	f06f 0001 	mvn.w	r0, #1
 801527a:	e7f8      	b.n	801526e <__ascii_mbtowc+0x16>

0801527c <_realloc_r>:
 801527c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015280:	4607      	mov	r7, r0
 8015282:	4614      	mov	r4, r2
 8015284:	460d      	mov	r5, r1
 8015286:	b921      	cbnz	r1, 8015292 <_realloc_r+0x16>
 8015288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801528c:	4611      	mov	r1, r2
 801528e:	f7fe bfb7 	b.w	8014200 <_malloc_r>
 8015292:	b92a      	cbnz	r2, 80152a0 <_realloc_r+0x24>
 8015294:	f7fe ff40 	bl	8014118 <_free_r>
 8015298:	4625      	mov	r5, r4
 801529a:	4628      	mov	r0, r5
 801529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152a0:	f000 f841 	bl	8015326 <_malloc_usable_size_r>
 80152a4:	4284      	cmp	r4, r0
 80152a6:	4606      	mov	r6, r0
 80152a8:	d802      	bhi.n	80152b0 <_realloc_r+0x34>
 80152aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80152ae:	d8f4      	bhi.n	801529a <_realloc_r+0x1e>
 80152b0:	4621      	mov	r1, r4
 80152b2:	4638      	mov	r0, r7
 80152b4:	f7fe ffa4 	bl	8014200 <_malloc_r>
 80152b8:	4680      	mov	r8, r0
 80152ba:	b908      	cbnz	r0, 80152c0 <_realloc_r+0x44>
 80152bc:	4645      	mov	r5, r8
 80152be:	e7ec      	b.n	801529a <_realloc_r+0x1e>
 80152c0:	42b4      	cmp	r4, r6
 80152c2:	4622      	mov	r2, r4
 80152c4:	4629      	mov	r1, r5
 80152c6:	bf28      	it	cs
 80152c8:	4632      	movcs	r2, r6
 80152ca:	f7fe f8be 	bl	801344a <memcpy>
 80152ce:	4629      	mov	r1, r5
 80152d0:	4638      	mov	r0, r7
 80152d2:	f7fe ff21 	bl	8014118 <_free_r>
 80152d6:	e7f1      	b.n	80152bc <_realloc_r+0x40>

080152d8 <__ascii_wctomb>:
 80152d8:	4603      	mov	r3, r0
 80152da:	4608      	mov	r0, r1
 80152dc:	b141      	cbz	r1, 80152f0 <__ascii_wctomb+0x18>
 80152de:	2aff      	cmp	r2, #255	@ 0xff
 80152e0:	d904      	bls.n	80152ec <__ascii_wctomb+0x14>
 80152e2:	228a      	movs	r2, #138	@ 0x8a
 80152e4:	601a      	str	r2, [r3, #0]
 80152e6:	f04f 30ff 	mov.w	r0, #4294967295
 80152ea:	4770      	bx	lr
 80152ec:	700a      	strb	r2, [r1, #0]
 80152ee:	2001      	movs	r0, #1
 80152f0:	4770      	bx	lr
	...

080152f4 <fiprintf>:
 80152f4:	b40e      	push	{r1, r2, r3}
 80152f6:	b503      	push	{r0, r1, lr}
 80152f8:	4601      	mov	r1, r0
 80152fa:	ab03      	add	r3, sp, #12
 80152fc:	4805      	ldr	r0, [pc, #20]	@ (8015314 <fiprintf+0x20>)
 80152fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015302:	6800      	ldr	r0, [r0, #0]
 8015304:	9301      	str	r3, [sp, #4]
 8015306:	f7ff fd03 	bl	8014d10 <_vfiprintf_r>
 801530a:	b002      	add	sp, #8
 801530c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015310:	b003      	add	sp, #12
 8015312:	4770      	bx	lr
 8015314:	2000001c 	.word	0x2000001c

08015318 <abort>:
 8015318:	b508      	push	{r3, lr}
 801531a:	2006      	movs	r0, #6
 801531c:	f000 f834 	bl	8015388 <raise>
 8015320:	2001      	movs	r0, #1
 8015322:	f7ee fef1 	bl	8004108 <_exit>

08015326 <_malloc_usable_size_r>:
 8015326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801532a:	1f18      	subs	r0, r3, #4
 801532c:	2b00      	cmp	r3, #0
 801532e:	bfbc      	itt	lt
 8015330:	580b      	ldrlt	r3, [r1, r0]
 8015332:	18c0      	addlt	r0, r0, r3
 8015334:	4770      	bx	lr

08015336 <_raise_r>:
 8015336:	291f      	cmp	r1, #31
 8015338:	b538      	push	{r3, r4, r5, lr}
 801533a:	4605      	mov	r5, r0
 801533c:	460c      	mov	r4, r1
 801533e:	d904      	bls.n	801534a <_raise_r+0x14>
 8015340:	2316      	movs	r3, #22
 8015342:	6003      	str	r3, [r0, #0]
 8015344:	f04f 30ff 	mov.w	r0, #4294967295
 8015348:	bd38      	pop	{r3, r4, r5, pc}
 801534a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801534c:	b112      	cbz	r2, 8015354 <_raise_r+0x1e>
 801534e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015352:	b94b      	cbnz	r3, 8015368 <_raise_r+0x32>
 8015354:	4628      	mov	r0, r5
 8015356:	f000 f831 	bl	80153bc <_getpid_r>
 801535a:	4622      	mov	r2, r4
 801535c:	4601      	mov	r1, r0
 801535e:	4628      	mov	r0, r5
 8015360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015364:	f000 b818 	b.w	8015398 <_kill_r>
 8015368:	2b01      	cmp	r3, #1
 801536a:	d00a      	beq.n	8015382 <_raise_r+0x4c>
 801536c:	1c59      	adds	r1, r3, #1
 801536e:	d103      	bne.n	8015378 <_raise_r+0x42>
 8015370:	2316      	movs	r3, #22
 8015372:	6003      	str	r3, [r0, #0]
 8015374:	2001      	movs	r0, #1
 8015376:	e7e7      	b.n	8015348 <_raise_r+0x12>
 8015378:	2100      	movs	r1, #0
 801537a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801537e:	4620      	mov	r0, r4
 8015380:	4798      	blx	r3
 8015382:	2000      	movs	r0, #0
 8015384:	e7e0      	b.n	8015348 <_raise_r+0x12>
	...

08015388 <raise>:
 8015388:	4b02      	ldr	r3, [pc, #8]	@ (8015394 <raise+0xc>)
 801538a:	4601      	mov	r1, r0
 801538c:	6818      	ldr	r0, [r3, #0]
 801538e:	f7ff bfd2 	b.w	8015336 <_raise_r>
 8015392:	bf00      	nop
 8015394:	2000001c 	.word	0x2000001c

08015398 <_kill_r>:
 8015398:	b538      	push	{r3, r4, r5, lr}
 801539a:	4d07      	ldr	r5, [pc, #28]	@ (80153b8 <_kill_r+0x20>)
 801539c:	2300      	movs	r3, #0
 801539e:	4604      	mov	r4, r0
 80153a0:	4608      	mov	r0, r1
 80153a2:	4611      	mov	r1, r2
 80153a4:	602b      	str	r3, [r5, #0]
 80153a6:	f7ee fe9f 	bl	80040e8 <_kill>
 80153aa:	1c43      	adds	r3, r0, #1
 80153ac:	d102      	bne.n	80153b4 <_kill_r+0x1c>
 80153ae:	682b      	ldr	r3, [r5, #0]
 80153b0:	b103      	cbz	r3, 80153b4 <_kill_r+0x1c>
 80153b2:	6023      	str	r3, [r4, #0]
 80153b4:	bd38      	pop	{r3, r4, r5, pc}
 80153b6:	bf00      	nop
 80153b8:	20004dec 	.word	0x20004dec

080153bc <_getpid_r>:
 80153bc:	f7ee be8c 	b.w	80040d8 <_getpid>

080153c0 <atan2f>:
 80153c0:	f000 b884 	b.w	80154cc <__ieee754_atan2f>

080153c4 <powf>:
 80153c4:	b508      	push	{r3, lr}
 80153c6:	ed2d 8b04 	vpush	{d8-d9}
 80153ca:	eeb0 8a60 	vmov.f32	s16, s1
 80153ce:	eeb0 9a40 	vmov.f32	s18, s0
 80153d2:	f000 f91b 	bl	801560c <__ieee754_powf>
 80153d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80153da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153de:	eef0 8a40 	vmov.f32	s17, s0
 80153e2:	d63e      	bvs.n	8015462 <powf+0x9e>
 80153e4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80153e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ec:	d112      	bne.n	8015414 <powf+0x50>
 80153ee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80153f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153f6:	d039      	beq.n	801546c <powf+0xa8>
 80153f8:	eeb0 0a48 	vmov.f32	s0, s16
 80153fc:	f000 f858 	bl	80154b0 <finitef>
 8015400:	b378      	cbz	r0, 8015462 <powf+0x9e>
 8015402:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801540a:	d52a      	bpl.n	8015462 <powf+0x9e>
 801540c:	f7fd fff0 	bl	80133f0 <__errno>
 8015410:	2322      	movs	r3, #34	@ 0x22
 8015412:	e014      	b.n	801543e <powf+0x7a>
 8015414:	f000 f84c 	bl	80154b0 <finitef>
 8015418:	b998      	cbnz	r0, 8015442 <powf+0x7e>
 801541a:	eeb0 0a49 	vmov.f32	s0, s18
 801541e:	f000 f847 	bl	80154b0 <finitef>
 8015422:	b170      	cbz	r0, 8015442 <powf+0x7e>
 8015424:	eeb0 0a48 	vmov.f32	s0, s16
 8015428:	f000 f842 	bl	80154b0 <finitef>
 801542c:	b148      	cbz	r0, 8015442 <powf+0x7e>
 801542e:	eef4 8a68 	vcmp.f32	s17, s17
 8015432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015436:	d7e9      	bvc.n	801540c <powf+0x48>
 8015438:	f7fd ffda 	bl	80133f0 <__errno>
 801543c:	2321      	movs	r3, #33	@ 0x21
 801543e:	6003      	str	r3, [r0, #0]
 8015440:	e00f      	b.n	8015462 <powf+0x9e>
 8015442:	eef5 8a40 	vcmp.f32	s17, #0.0
 8015446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801544a:	d10a      	bne.n	8015462 <powf+0x9e>
 801544c:	eeb0 0a49 	vmov.f32	s0, s18
 8015450:	f000 f82e 	bl	80154b0 <finitef>
 8015454:	b128      	cbz	r0, 8015462 <powf+0x9e>
 8015456:	eeb0 0a48 	vmov.f32	s0, s16
 801545a:	f000 f829 	bl	80154b0 <finitef>
 801545e:	2800      	cmp	r0, #0
 8015460:	d1d4      	bne.n	801540c <powf+0x48>
 8015462:	eeb0 0a68 	vmov.f32	s0, s17
 8015466:	ecbd 8b04 	vpop	{d8-d9}
 801546a:	bd08      	pop	{r3, pc}
 801546c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8015470:	e7f7      	b.n	8015462 <powf+0x9e>
	...

08015474 <sqrtf>:
 8015474:	b508      	push	{r3, lr}
 8015476:	ed2d 8b02 	vpush	{d8}
 801547a:	eeb0 8a40 	vmov.f32	s16, s0
 801547e:	f000 f821 	bl	80154c4 <__ieee754_sqrtf>
 8015482:	eeb4 8a48 	vcmp.f32	s16, s16
 8015486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801548a:	d60c      	bvs.n	80154a6 <sqrtf+0x32>
 801548c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80154ac <sqrtf+0x38>
 8015490:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015498:	d505      	bpl.n	80154a6 <sqrtf+0x32>
 801549a:	f7fd ffa9 	bl	80133f0 <__errno>
 801549e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80154a2:	2321      	movs	r3, #33	@ 0x21
 80154a4:	6003      	str	r3, [r0, #0]
 80154a6:	ecbd 8b02 	vpop	{d8}
 80154aa:	bd08      	pop	{r3, pc}
 80154ac:	00000000 	.word	0x00000000

080154b0 <finitef>:
 80154b0:	ee10 3a10 	vmov	r3, s0
 80154b4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80154b8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80154bc:	bfac      	ite	ge
 80154be:	2000      	movge	r0, #0
 80154c0:	2001      	movlt	r0, #1
 80154c2:	4770      	bx	lr

080154c4 <__ieee754_sqrtf>:
 80154c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80154c8:	4770      	bx	lr
	...

080154cc <__ieee754_atan2f>:
 80154cc:	ee10 2a90 	vmov	r2, s1
 80154d0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80154d4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80154d8:	b510      	push	{r4, lr}
 80154da:	eef0 7a40 	vmov.f32	s15, s0
 80154de:	d806      	bhi.n	80154ee <__ieee754_atan2f+0x22>
 80154e0:	ee10 0a10 	vmov	r0, s0
 80154e4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80154e8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80154ec:	d904      	bls.n	80154f8 <__ieee754_atan2f+0x2c>
 80154ee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80154f2:	eeb0 0a67 	vmov.f32	s0, s15
 80154f6:	bd10      	pop	{r4, pc}
 80154f8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80154fc:	d103      	bne.n	8015506 <__ieee754_atan2f+0x3a>
 80154fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015502:	f000 bb51 	b.w	8015ba8 <atanf>
 8015506:	1794      	asrs	r4, r2, #30
 8015508:	f004 0402 	and.w	r4, r4, #2
 801550c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8015510:	b943      	cbnz	r3, 8015524 <__ieee754_atan2f+0x58>
 8015512:	2c02      	cmp	r4, #2
 8015514:	d05e      	beq.n	80155d4 <__ieee754_atan2f+0x108>
 8015516:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80155e8 <__ieee754_atan2f+0x11c>
 801551a:	2c03      	cmp	r4, #3
 801551c:	bf08      	it	eq
 801551e:	eef0 7a47 	vmoveq.f32	s15, s14
 8015522:	e7e6      	b.n	80154f2 <__ieee754_atan2f+0x26>
 8015524:	b941      	cbnz	r1, 8015538 <__ieee754_atan2f+0x6c>
 8015526:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80155ec <__ieee754_atan2f+0x120>
 801552a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80155f0 <__ieee754_atan2f+0x124>
 801552e:	2800      	cmp	r0, #0
 8015530:	bfa8      	it	ge
 8015532:	eef0 7a47 	vmovge.f32	s15, s14
 8015536:	e7dc      	b.n	80154f2 <__ieee754_atan2f+0x26>
 8015538:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801553c:	d110      	bne.n	8015560 <__ieee754_atan2f+0x94>
 801553e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015542:	f104 34ff 	add.w	r4, r4, #4294967295
 8015546:	d107      	bne.n	8015558 <__ieee754_atan2f+0x8c>
 8015548:	2c02      	cmp	r4, #2
 801554a:	d846      	bhi.n	80155da <__ieee754_atan2f+0x10e>
 801554c:	4b29      	ldr	r3, [pc, #164]	@ (80155f4 <__ieee754_atan2f+0x128>)
 801554e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015552:	edd3 7a00 	vldr	s15, [r3]
 8015556:	e7cc      	b.n	80154f2 <__ieee754_atan2f+0x26>
 8015558:	2c02      	cmp	r4, #2
 801555a:	d841      	bhi.n	80155e0 <__ieee754_atan2f+0x114>
 801555c:	4b26      	ldr	r3, [pc, #152]	@ (80155f8 <__ieee754_atan2f+0x12c>)
 801555e:	e7f6      	b.n	801554e <__ieee754_atan2f+0x82>
 8015560:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015564:	d0df      	beq.n	8015526 <__ieee754_atan2f+0x5a>
 8015566:	1a5b      	subs	r3, r3, r1
 8015568:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801556c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8015570:	da1a      	bge.n	80155a8 <__ieee754_atan2f+0xdc>
 8015572:	2a00      	cmp	r2, #0
 8015574:	da01      	bge.n	801557a <__ieee754_atan2f+0xae>
 8015576:	313c      	adds	r1, #60	@ 0x3c
 8015578:	db19      	blt.n	80155ae <__ieee754_atan2f+0xe2>
 801557a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801557e:	f000 fbe7 	bl	8015d50 <fabsf>
 8015582:	f000 fb11 	bl	8015ba8 <atanf>
 8015586:	eef0 7a40 	vmov.f32	s15, s0
 801558a:	2c01      	cmp	r4, #1
 801558c:	d012      	beq.n	80155b4 <__ieee754_atan2f+0xe8>
 801558e:	2c02      	cmp	r4, #2
 8015590:	d017      	beq.n	80155c2 <__ieee754_atan2f+0xf6>
 8015592:	2c00      	cmp	r4, #0
 8015594:	d0ad      	beq.n	80154f2 <__ieee754_atan2f+0x26>
 8015596:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80155fc <__ieee754_atan2f+0x130>
 801559a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801559e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8015600 <__ieee754_atan2f+0x134>
 80155a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80155a6:	e7a4      	b.n	80154f2 <__ieee754_atan2f+0x26>
 80155a8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80155f0 <__ieee754_atan2f+0x124>
 80155ac:	e7ed      	b.n	801558a <__ieee754_atan2f+0xbe>
 80155ae:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8015604 <__ieee754_atan2f+0x138>
 80155b2:	e7ea      	b.n	801558a <__ieee754_atan2f+0xbe>
 80155b4:	ee17 3a90 	vmov	r3, s15
 80155b8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80155bc:	ee07 3a90 	vmov	s15, r3
 80155c0:	e797      	b.n	80154f2 <__ieee754_atan2f+0x26>
 80155c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80155fc <__ieee754_atan2f+0x130>
 80155c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80155ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8015600 <__ieee754_atan2f+0x134>
 80155ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80155d2:	e78e      	b.n	80154f2 <__ieee754_atan2f+0x26>
 80155d4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8015600 <__ieee754_atan2f+0x134>
 80155d8:	e78b      	b.n	80154f2 <__ieee754_atan2f+0x26>
 80155da:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8015608 <__ieee754_atan2f+0x13c>
 80155de:	e788      	b.n	80154f2 <__ieee754_atan2f+0x26>
 80155e0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8015604 <__ieee754_atan2f+0x138>
 80155e4:	e785      	b.n	80154f2 <__ieee754_atan2f+0x26>
 80155e6:	bf00      	nop
 80155e8:	c0490fdb 	.word	0xc0490fdb
 80155ec:	bfc90fdb 	.word	0xbfc90fdb
 80155f0:	3fc90fdb 	.word	0x3fc90fdb
 80155f4:	08016b38 	.word	0x08016b38
 80155f8:	08016b2c 	.word	0x08016b2c
 80155fc:	33bbbd2e 	.word	0x33bbbd2e
 8015600:	40490fdb 	.word	0x40490fdb
 8015604:	00000000 	.word	0x00000000
 8015608:	3f490fdb 	.word	0x3f490fdb

0801560c <__ieee754_powf>:
 801560c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015610:	ee10 4a90 	vmov	r4, s1
 8015614:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8015618:	ed2d 8b02 	vpush	{d8}
 801561c:	ee10 6a10 	vmov	r6, s0
 8015620:	eeb0 8a40 	vmov.f32	s16, s0
 8015624:	eef0 8a60 	vmov.f32	s17, s1
 8015628:	d10c      	bne.n	8015644 <__ieee754_powf+0x38>
 801562a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801562e:	0076      	lsls	r6, r6, #1
 8015630:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8015634:	f240 8274 	bls.w	8015b20 <__ieee754_powf+0x514>
 8015638:	ee38 0a28 	vadd.f32	s0, s16, s17
 801563c:	ecbd 8b02 	vpop	{d8}
 8015640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015644:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8015648:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801564c:	d802      	bhi.n	8015654 <__ieee754_powf+0x48>
 801564e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8015652:	d908      	bls.n	8015666 <__ieee754_powf+0x5a>
 8015654:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8015658:	d1ee      	bne.n	8015638 <__ieee754_powf+0x2c>
 801565a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801565e:	0064      	lsls	r4, r4, #1
 8015660:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8015664:	e7e6      	b.n	8015634 <__ieee754_powf+0x28>
 8015666:	2e00      	cmp	r6, #0
 8015668:	da1f      	bge.n	80156aa <__ieee754_powf+0x9e>
 801566a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801566e:	f080 8260 	bcs.w	8015b32 <__ieee754_powf+0x526>
 8015672:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8015676:	d32f      	bcc.n	80156d8 <__ieee754_powf+0xcc>
 8015678:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801567c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8015680:	fa49 f503 	asr.w	r5, r9, r3
 8015684:	fa05 f303 	lsl.w	r3, r5, r3
 8015688:	454b      	cmp	r3, r9
 801568a:	d123      	bne.n	80156d4 <__ieee754_powf+0xc8>
 801568c:	f005 0501 	and.w	r5, r5, #1
 8015690:	f1c5 0502 	rsb	r5, r5, #2
 8015694:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8015698:	d11f      	bne.n	80156da <__ieee754_powf+0xce>
 801569a:	2c00      	cmp	r4, #0
 801569c:	f280 8246 	bge.w	8015b2c <__ieee754_powf+0x520>
 80156a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80156a4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80156a8:	e7c8      	b.n	801563c <__ieee754_powf+0x30>
 80156aa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80156ae:	d111      	bne.n	80156d4 <__ieee754_powf+0xc8>
 80156b0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80156b4:	f000 8234 	beq.w	8015b20 <__ieee754_powf+0x514>
 80156b8:	d906      	bls.n	80156c8 <__ieee754_powf+0xbc>
 80156ba:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80159d0 <__ieee754_powf+0x3c4>
 80156be:	2c00      	cmp	r4, #0
 80156c0:	bfa8      	it	ge
 80156c2:	eeb0 0a68 	vmovge.f32	s0, s17
 80156c6:	e7b9      	b.n	801563c <__ieee754_powf+0x30>
 80156c8:	2c00      	cmp	r4, #0
 80156ca:	f280 822c 	bge.w	8015b26 <__ieee754_powf+0x51a>
 80156ce:	eeb1 0a68 	vneg.f32	s0, s17
 80156d2:	e7b3      	b.n	801563c <__ieee754_powf+0x30>
 80156d4:	2500      	movs	r5, #0
 80156d6:	e7dd      	b.n	8015694 <__ieee754_powf+0x88>
 80156d8:	2500      	movs	r5, #0
 80156da:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80156de:	d102      	bne.n	80156e6 <__ieee754_powf+0xda>
 80156e0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80156e4:	e7aa      	b.n	801563c <__ieee754_powf+0x30>
 80156e6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80156ea:	f040 8227 	bne.w	8015b3c <__ieee754_powf+0x530>
 80156ee:	2e00      	cmp	r6, #0
 80156f0:	f2c0 8224 	blt.w	8015b3c <__ieee754_powf+0x530>
 80156f4:	eeb0 0a48 	vmov.f32	s0, s16
 80156f8:	ecbd 8b02 	vpop	{d8}
 80156fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015700:	f7ff bee0 	b.w	80154c4 <__ieee754_sqrtf>
 8015704:	2d01      	cmp	r5, #1
 8015706:	d199      	bne.n	801563c <__ieee754_powf+0x30>
 8015708:	eeb1 0a40 	vneg.f32	s0, s0
 801570c:	e796      	b.n	801563c <__ieee754_powf+0x30>
 801570e:	0ff0      	lsrs	r0, r6, #31
 8015710:	3801      	subs	r0, #1
 8015712:	ea55 0300 	orrs.w	r3, r5, r0
 8015716:	d104      	bne.n	8015722 <__ieee754_powf+0x116>
 8015718:	ee38 8a48 	vsub.f32	s16, s16, s16
 801571c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015720:	e78c      	b.n	801563c <__ieee754_powf+0x30>
 8015722:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8015726:	d96d      	bls.n	8015804 <__ieee754_powf+0x1f8>
 8015728:	4baa      	ldr	r3, [pc, #680]	@ (80159d4 <__ieee754_powf+0x3c8>)
 801572a:	4598      	cmp	r8, r3
 801572c:	d808      	bhi.n	8015740 <__ieee754_powf+0x134>
 801572e:	2c00      	cmp	r4, #0
 8015730:	da0b      	bge.n	801574a <__ieee754_powf+0x13e>
 8015732:	2000      	movs	r0, #0
 8015734:	ecbd 8b02 	vpop	{d8}
 8015738:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801573c:	f000 bb96 	b.w	8015e6c <__math_oflowf>
 8015740:	4ba5      	ldr	r3, [pc, #660]	@ (80159d8 <__ieee754_powf+0x3cc>)
 8015742:	4598      	cmp	r8, r3
 8015744:	d908      	bls.n	8015758 <__ieee754_powf+0x14c>
 8015746:	2c00      	cmp	r4, #0
 8015748:	dcf3      	bgt.n	8015732 <__ieee754_powf+0x126>
 801574a:	2000      	movs	r0, #0
 801574c:	ecbd 8b02 	vpop	{d8}
 8015750:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015754:	f000 bb84 	b.w	8015e60 <__math_uflowf>
 8015758:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801575c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015760:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80159dc <__ieee754_powf+0x3d0>
 8015764:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8015768:	eee0 6a67 	vfms.f32	s13, s0, s15
 801576c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015770:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8015774:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015778:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80159e0 <__ieee754_powf+0x3d4>
 801577c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015780:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80159e4 <__ieee754_powf+0x3d8>
 8015784:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8015788:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80159e8 <__ieee754_powf+0x3dc>
 801578c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015790:	eeb0 7a67 	vmov.f32	s14, s15
 8015794:	eea0 7a26 	vfma.f32	s14, s0, s13
 8015798:	ee17 3a10 	vmov	r3, s14
 801579c:	f36f 030b 	bfc	r3, #0, #12
 80157a0:	ee07 3a10 	vmov	s14, r3
 80157a4:	eeb0 6a47 	vmov.f32	s12, s14
 80157a8:	eea0 6a66 	vfms.f32	s12, s0, s13
 80157ac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80157b0:	3d01      	subs	r5, #1
 80157b2:	4305      	orrs	r5, r0
 80157b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80157b8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80157bc:	f36f 040b 	bfc	r4, #0, #12
 80157c0:	bf18      	it	ne
 80157c2:	eeb0 8a66 	vmovne.f32	s16, s13
 80157c6:	ee06 4a90 	vmov	s13, r4
 80157ca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80157ce:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80157d2:	ee67 7a26 	vmul.f32	s15, s14, s13
 80157d6:	eee6 0a07 	vfma.f32	s1, s12, s14
 80157da:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80157de:	ee17 1a10 	vmov	r1, s14
 80157e2:	2900      	cmp	r1, #0
 80157e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80157e8:	f340 80dd 	ble.w	80159a6 <__ieee754_powf+0x39a>
 80157ec:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80157f0:	f240 80ca 	bls.w	8015988 <__ieee754_powf+0x37c>
 80157f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80157f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157fc:	bf4c      	ite	mi
 80157fe:	2001      	movmi	r0, #1
 8015800:	2000      	movpl	r0, #0
 8015802:	e797      	b.n	8015734 <__ieee754_powf+0x128>
 8015804:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8015808:	bf01      	itttt	eq
 801580a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80159ec <__ieee754_powf+0x3e0>
 801580e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8015812:	f06f 0317 	mvneq.w	r3, #23
 8015816:	ee17 7a90 	vmoveq	r7, s15
 801581a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801581e:	bf18      	it	ne
 8015820:	2300      	movne	r3, #0
 8015822:	3a7f      	subs	r2, #127	@ 0x7f
 8015824:	441a      	add	r2, r3
 8015826:	4b72      	ldr	r3, [pc, #456]	@ (80159f0 <__ieee754_powf+0x3e4>)
 8015828:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801582c:	429f      	cmp	r7, r3
 801582e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8015832:	dd06      	ble.n	8015842 <__ieee754_powf+0x236>
 8015834:	4b6f      	ldr	r3, [pc, #444]	@ (80159f4 <__ieee754_powf+0x3e8>)
 8015836:	429f      	cmp	r7, r3
 8015838:	f340 80a4 	ble.w	8015984 <__ieee754_powf+0x378>
 801583c:	3201      	adds	r2, #1
 801583e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8015842:	2600      	movs	r6, #0
 8015844:	4b6c      	ldr	r3, [pc, #432]	@ (80159f8 <__ieee754_powf+0x3ec>)
 8015846:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801584a:	ee07 1a10 	vmov	s14, r1
 801584e:	edd3 5a00 	vldr	s11, [r3]
 8015852:	4b6a      	ldr	r3, [pc, #424]	@ (80159fc <__ieee754_powf+0x3f0>)
 8015854:	ee75 7a87 	vadd.f32	s15, s11, s14
 8015858:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801585c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8015860:	1049      	asrs	r1, r1, #1
 8015862:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8015866:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801586a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801586e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8015872:	ee07 1a90 	vmov	s15, r1
 8015876:	ee26 5a24 	vmul.f32	s10, s12, s9
 801587a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801587e:	ee15 7a10 	vmov	r7, s10
 8015882:	401f      	ands	r7, r3
 8015884:	ee06 7a90 	vmov	s13, r7
 8015888:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801588c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8015890:	ee65 7a05 	vmul.f32	s15, s10, s10
 8015894:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8015898:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8015a00 <__ieee754_powf+0x3f4>
 801589c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8015a04 <__ieee754_powf+0x3f8>
 80158a0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80158a4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8015a08 <__ieee754_powf+0x3fc>
 80158a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80158ac:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80159dc <__ieee754_powf+0x3d0>
 80158b0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80158b4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8015a0c <__ieee754_powf+0x400>
 80158b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80158bc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8015a10 <__ieee754_powf+0x404>
 80158c0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80158c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80158c8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80158cc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80158d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80158d4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80158d8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80158dc:	eef0 5a67 	vmov.f32	s11, s15
 80158e0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80158e4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80158e8:	ee15 1a90 	vmov	r1, s11
 80158ec:	4019      	ands	r1, r3
 80158ee:	ee05 1a90 	vmov	s11, r1
 80158f2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80158f6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80158fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8015902:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015906:	eeb0 6a67 	vmov.f32	s12, s15
 801590a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801590e:	ee16 1a10 	vmov	r1, s12
 8015912:	4019      	ands	r1, r3
 8015914:	ee06 1a10 	vmov	s12, r1
 8015918:	eeb0 7a46 	vmov.f32	s14, s12
 801591c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8015920:	493c      	ldr	r1, [pc, #240]	@ (8015a14 <__ieee754_powf+0x408>)
 8015922:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8015926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801592a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8015a18 <__ieee754_powf+0x40c>
 801592e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8015a1c <__ieee754_powf+0x410>
 8015932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015936:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8015a20 <__ieee754_powf+0x414>
 801593a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801593e:	ed91 7a00 	vldr	s14, [r1]
 8015942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015946:	ee07 2a10 	vmov	s14, r2
 801594a:	4a36      	ldr	r2, [pc, #216]	@ (8015a24 <__ieee754_powf+0x418>)
 801594c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015950:	eeb0 7a67 	vmov.f32	s14, s15
 8015954:	eea6 7a25 	vfma.f32	s14, s12, s11
 8015958:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801595c:	ed92 5a00 	vldr	s10, [r2]
 8015960:	ee37 7a05 	vadd.f32	s14, s14, s10
 8015964:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015968:	ee17 2a10 	vmov	r2, s14
 801596c:	401a      	ands	r2, r3
 801596e:	ee07 2a10 	vmov	s14, r2
 8015972:	ee77 6a66 	vsub.f32	s13, s14, s13
 8015976:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801597a:	eee6 6a65 	vfms.f32	s13, s12, s11
 801597e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015982:	e715      	b.n	80157b0 <__ieee754_powf+0x1a4>
 8015984:	2601      	movs	r6, #1
 8015986:	e75d      	b.n	8015844 <__ieee754_powf+0x238>
 8015988:	d152      	bne.n	8015a30 <__ieee754_powf+0x424>
 801598a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8015a28 <__ieee754_powf+0x41c>
 801598e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015992:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8015996:	eef4 6ac7 	vcmpe.f32	s13, s14
 801599a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801599e:	f73f af29 	bgt.w	80157f4 <__ieee754_powf+0x1e8>
 80159a2:	2386      	movs	r3, #134	@ 0x86
 80159a4:	e048      	b.n	8015a38 <__ieee754_powf+0x42c>
 80159a6:	4a21      	ldr	r2, [pc, #132]	@ (8015a2c <__ieee754_powf+0x420>)
 80159a8:	4293      	cmp	r3, r2
 80159aa:	d907      	bls.n	80159bc <__ieee754_powf+0x3b0>
 80159ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80159b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159b4:	bf4c      	ite	mi
 80159b6:	2001      	movmi	r0, #1
 80159b8:	2000      	movpl	r0, #0
 80159ba:	e6c7      	b.n	801574c <__ieee754_powf+0x140>
 80159bc:	d138      	bne.n	8015a30 <__ieee754_powf+0x424>
 80159be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80159c2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80159c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ca:	dbea      	blt.n	80159a2 <__ieee754_powf+0x396>
 80159cc:	e7ee      	b.n	80159ac <__ieee754_powf+0x3a0>
 80159ce:	bf00      	nop
 80159d0:	00000000 	.word	0x00000000
 80159d4:	3f7ffff3 	.word	0x3f7ffff3
 80159d8:	3f800007 	.word	0x3f800007
 80159dc:	3eaaaaab 	.word	0x3eaaaaab
 80159e0:	3fb8aa00 	.word	0x3fb8aa00
 80159e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80159e8:	36eca570 	.word	0x36eca570
 80159ec:	4b800000 	.word	0x4b800000
 80159f0:	001cc471 	.word	0x001cc471
 80159f4:	005db3d6 	.word	0x005db3d6
 80159f8:	08016b54 	.word	0x08016b54
 80159fc:	fffff000 	.word	0xfffff000
 8015a00:	3e6c3255 	.word	0x3e6c3255
 8015a04:	3e53f142 	.word	0x3e53f142
 8015a08:	3e8ba305 	.word	0x3e8ba305
 8015a0c:	3edb6db7 	.word	0x3edb6db7
 8015a10:	3f19999a 	.word	0x3f19999a
 8015a14:	08016b44 	.word	0x08016b44
 8015a18:	3f76384f 	.word	0x3f76384f
 8015a1c:	3f763800 	.word	0x3f763800
 8015a20:	369dc3a0 	.word	0x369dc3a0
 8015a24:	08016b4c 	.word	0x08016b4c
 8015a28:	3338aa3c 	.word	0x3338aa3c
 8015a2c:	43160000 	.word	0x43160000
 8015a30:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8015a34:	d96f      	bls.n	8015b16 <__ieee754_powf+0x50a>
 8015a36:	15db      	asrs	r3, r3, #23
 8015a38:	3b7e      	subs	r3, #126	@ 0x7e
 8015a3a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8015a3e:	4118      	asrs	r0, r3
 8015a40:	4408      	add	r0, r1
 8015a42:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015a46:	4a4e      	ldr	r2, [pc, #312]	@ (8015b80 <__ieee754_powf+0x574>)
 8015a48:	3b7f      	subs	r3, #127	@ 0x7f
 8015a4a:	411a      	asrs	r2, r3
 8015a4c:	4002      	ands	r2, r0
 8015a4e:	ee07 2a10 	vmov	s14, r2
 8015a52:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8015a56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8015a5a:	f1c3 0317 	rsb	r3, r3, #23
 8015a5e:	4118      	asrs	r0, r3
 8015a60:	2900      	cmp	r1, #0
 8015a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015a66:	bfb8      	it	lt
 8015a68:	4240      	neglt	r0, r0
 8015a6a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8015a6e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8015b84 <__ieee754_powf+0x578>
 8015a72:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8015b88 <__ieee754_powf+0x57c>
 8015a76:	ee16 3a90 	vmov	r3, s13
 8015a7a:	f36f 030b 	bfc	r3, #0, #12
 8015a7e:	ee06 3a90 	vmov	s13, r3
 8015a82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015a86:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015a8a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8015a8e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8015b8c <__ieee754_powf+0x580>
 8015a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015a96:	eee0 7a87 	vfma.f32	s15, s1, s14
 8015a9a:	eeb0 7a67 	vmov.f32	s14, s15
 8015a9e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8015aa2:	eef0 5a47 	vmov.f32	s11, s14
 8015aa6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8015aaa:	ee67 6a07 	vmul.f32	s13, s14, s14
 8015aae:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8015ab2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8015b90 <__ieee754_powf+0x584>
 8015ab6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8015b94 <__ieee754_powf+0x588>
 8015aba:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015abe:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8015b98 <__ieee754_powf+0x58c>
 8015ac2:	eee6 5a26 	vfma.f32	s11, s12, s13
 8015ac6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8015b9c <__ieee754_powf+0x590>
 8015aca:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8015ace:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8015ba0 <__ieee754_powf+0x594>
 8015ad2:	eee6 5a26 	vfma.f32	s11, s12, s13
 8015ad6:	eeb0 6a47 	vmov.f32	s12, s14
 8015ada:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8015ade:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8015ae2:	ee67 5a06 	vmul.f32	s11, s14, s12
 8015ae6:	ee36 6a66 	vsub.f32	s12, s12, s13
 8015aea:	eee7 7a27 	vfma.f32	s15, s14, s15
 8015aee:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8015af2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015af6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015afa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015afe:	ee10 3a10 	vmov	r3, s0
 8015b02:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8015b06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015b0a:	da06      	bge.n	8015b1a <__ieee754_powf+0x50e>
 8015b0c:	f000 f928 	bl	8015d60 <scalbnf>
 8015b10:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015b14:	e592      	b.n	801563c <__ieee754_powf+0x30>
 8015b16:	2000      	movs	r0, #0
 8015b18:	e7a7      	b.n	8015a6a <__ieee754_powf+0x45e>
 8015b1a:	ee00 3a10 	vmov	s0, r3
 8015b1e:	e7f7      	b.n	8015b10 <__ieee754_powf+0x504>
 8015b20:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015b24:	e58a      	b.n	801563c <__ieee754_powf+0x30>
 8015b26:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8015ba4 <__ieee754_powf+0x598>
 8015b2a:	e587      	b.n	801563c <__ieee754_powf+0x30>
 8015b2c:	eeb0 0a48 	vmov.f32	s0, s16
 8015b30:	e584      	b.n	801563c <__ieee754_powf+0x30>
 8015b32:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8015b36:	f43f adbb 	beq.w	80156b0 <__ieee754_powf+0xa4>
 8015b3a:	2502      	movs	r5, #2
 8015b3c:	eeb0 0a48 	vmov.f32	s0, s16
 8015b40:	f000 f906 	bl	8015d50 <fabsf>
 8015b44:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8015b48:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8015b4c:	4647      	mov	r7, r8
 8015b4e:	d003      	beq.n	8015b58 <__ieee754_powf+0x54c>
 8015b50:	f1b8 0f00 	cmp.w	r8, #0
 8015b54:	f47f addb 	bne.w	801570e <__ieee754_powf+0x102>
 8015b58:	2c00      	cmp	r4, #0
 8015b5a:	bfbc      	itt	lt
 8015b5c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8015b60:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8015b64:	2e00      	cmp	r6, #0
 8015b66:	f6bf ad69 	bge.w	801563c <__ieee754_powf+0x30>
 8015b6a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8015b6e:	ea58 0805 	orrs.w	r8, r8, r5
 8015b72:	f47f adc7 	bne.w	8015704 <__ieee754_powf+0xf8>
 8015b76:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015b7a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015b7e:	e55d      	b.n	801563c <__ieee754_powf+0x30>
 8015b80:	ff800000 	.word	0xff800000
 8015b84:	3f317218 	.word	0x3f317218
 8015b88:	3f317200 	.word	0x3f317200
 8015b8c:	35bfbe8c 	.word	0x35bfbe8c
 8015b90:	b5ddea0e 	.word	0xb5ddea0e
 8015b94:	3331bb4c 	.word	0x3331bb4c
 8015b98:	388ab355 	.word	0x388ab355
 8015b9c:	bb360b61 	.word	0xbb360b61
 8015ba0:	3e2aaaab 	.word	0x3e2aaaab
 8015ba4:	00000000 	.word	0x00000000

08015ba8 <atanf>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	ee10 5a10 	vmov	r5, s0
 8015bae:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8015bb2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8015bb6:	eef0 7a40 	vmov.f32	s15, s0
 8015bba:	d310      	bcc.n	8015bde <atanf+0x36>
 8015bbc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8015bc0:	d904      	bls.n	8015bcc <atanf+0x24>
 8015bc2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8015bca:	bd38      	pop	{r3, r4, r5, pc}
 8015bcc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8015d04 <atanf+0x15c>
 8015bd0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8015d08 <atanf+0x160>
 8015bd4:	2d00      	cmp	r5, #0
 8015bd6:	bfc8      	it	gt
 8015bd8:	eef0 7a47 	vmovgt.f32	s15, s14
 8015bdc:	e7f3      	b.n	8015bc6 <atanf+0x1e>
 8015bde:	4b4b      	ldr	r3, [pc, #300]	@ (8015d0c <atanf+0x164>)
 8015be0:	429c      	cmp	r4, r3
 8015be2:	d810      	bhi.n	8015c06 <atanf+0x5e>
 8015be4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8015be8:	d20a      	bcs.n	8015c00 <atanf+0x58>
 8015bea:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8015d10 <atanf+0x168>
 8015bee:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015bf6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bfe:	dce2      	bgt.n	8015bc6 <atanf+0x1e>
 8015c00:	f04f 33ff 	mov.w	r3, #4294967295
 8015c04:	e013      	b.n	8015c2e <atanf+0x86>
 8015c06:	f000 f8a3 	bl	8015d50 <fabsf>
 8015c0a:	4b42      	ldr	r3, [pc, #264]	@ (8015d14 <atanf+0x16c>)
 8015c0c:	429c      	cmp	r4, r3
 8015c0e:	d84f      	bhi.n	8015cb0 <atanf+0x108>
 8015c10:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8015c14:	429c      	cmp	r4, r3
 8015c16:	d841      	bhi.n	8015c9c <atanf+0xf4>
 8015c18:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8015c1c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8015c20:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015c24:	2300      	movs	r3, #0
 8015c26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015c2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015c2e:	1c5a      	adds	r2, r3, #1
 8015c30:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015c34:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8015d18 <atanf+0x170>
 8015c38:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8015d1c <atanf+0x174>
 8015c3c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8015d20 <atanf+0x178>
 8015c40:	ee66 6a06 	vmul.f32	s13, s12, s12
 8015c44:	eee6 5a87 	vfma.f32	s11, s13, s14
 8015c48:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8015d24 <atanf+0x17c>
 8015c4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015c50:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8015d28 <atanf+0x180>
 8015c54:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015c58:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8015d2c <atanf+0x184>
 8015c5c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015c60:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8015d30 <atanf+0x188>
 8015c64:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015c68:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8015d34 <atanf+0x18c>
 8015c6c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015c70:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8015d38 <atanf+0x190>
 8015c74:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015c78:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8015d3c <atanf+0x194>
 8015c7c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8015c80:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8015d40 <atanf+0x198>
 8015c84:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015c88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015c8c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015c94:	d121      	bne.n	8015cda <atanf+0x132>
 8015c96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c9a:	e794      	b.n	8015bc6 <atanf+0x1e>
 8015c9c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015ca0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015ca4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015ca8:	2301      	movs	r3, #1
 8015caa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015cae:	e7be      	b.n	8015c2e <atanf+0x86>
 8015cb0:	4b24      	ldr	r3, [pc, #144]	@ (8015d44 <atanf+0x19c>)
 8015cb2:	429c      	cmp	r4, r3
 8015cb4:	d80b      	bhi.n	8015cce <atanf+0x126>
 8015cb6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8015cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015cbe:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015cc2:	2302      	movs	r3, #2
 8015cc4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015ccc:	e7af      	b.n	8015c2e <atanf+0x86>
 8015cce:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8015cd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015cd6:	2303      	movs	r3, #3
 8015cd8:	e7a9      	b.n	8015c2e <atanf+0x86>
 8015cda:	4a1b      	ldr	r2, [pc, #108]	@ (8015d48 <atanf+0x1a0>)
 8015cdc:	491b      	ldr	r1, [pc, #108]	@ (8015d4c <atanf+0x1a4>)
 8015cde:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015ce2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015ce6:	edd3 6a00 	vldr	s13, [r3]
 8015cea:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015cee:	2d00      	cmp	r5, #0
 8015cf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015cf4:	edd2 7a00 	vldr	s15, [r2]
 8015cf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015cfc:	bfb8      	it	lt
 8015cfe:	eef1 7a67 	vneglt.f32	s15, s15
 8015d02:	e760      	b.n	8015bc6 <atanf+0x1e>
 8015d04:	bfc90fdb 	.word	0xbfc90fdb
 8015d08:	3fc90fdb 	.word	0x3fc90fdb
 8015d0c:	3edfffff 	.word	0x3edfffff
 8015d10:	7149f2ca 	.word	0x7149f2ca
 8015d14:	3f97ffff 	.word	0x3f97ffff
 8015d18:	3c8569d7 	.word	0x3c8569d7
 8015d1c:	3d4bda59 	.word	0x3d4bda59
 8015d20:	bd6ef16b 	.word	0xbd6ef16b
 8015d24:	3d886b35 	.word	0x3d886b35
 8015d28:	3dba2e6e 	.word	0x3dba2e6e
 8015d2c:	3e124925 	.word	0x3e124925
 8015d30:	3eaaaaab 	.word	0x3eaaaaab
 8015d34:	bd15a221 	.word	0xbd15a221
 8015d38:	bd9d8795 	.word	0xbd9d8795
 8015d3c:	bde38e38 	.word	0xbde38e38
 8015d40:	be4ccccd 	.word	0xbe4ccccd
 8015d44:	401bffff 	.word	0x401bffff
 8015d48:	08016b6c 	.word	0x08016b6c
 8015d4c:	08016b5c 	.word	0x08016b5c

08015d50 <fabsf>:
 8015d50:	ee10 3a10 	vmov	r3, s0
 8015d54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015d58:	ee00 3a10 	vmov	s0, r3
 8015d5c:	4770      	bx	lr
	...

08015d60 <scalbnf>:
 8015d60:	ee10 3a10 	vmov	r3, s0
 8015d64:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8015d68:	d02b      	beq.n	8015dc2 <scalbnf+0x62>
 8015d6a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8015d6e:	d302      	bcc.n	8015d76 <scalbnf+0x16>
 8015d70:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015d74:	4770      	bx	lr
 8015d76:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8015d7a:	d123      	bne.n	8015dc4 <scalbnf+0x64>
 8015d7c:	4b24      	ldr	r3, [pc, #144]	@ (8015e10 <scalbnf+0xb0>)
 8015d7e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8015e14 <scalbnf+0xb4>
 8015d82:	4298      	cmp	r0, r3
 8015d84:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015d88:	db17      	blt.n	8015dba <scalbnf+0x5a>
 8015d8a:	ee10 3a10 	vmov	r3, s0
 8015d8e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015d92:	3a19      	subs	r2, #25
 8015d94:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015d98:	4288      	cmp	r0, r1
 8015d9a:	dd15      	ble.n	8015dc8 <scalbnf+0x68>
 8015d9c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8015e18 <scalbnf+0xb8>
 8015da0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8015e1c <scalbnf+0xbc>
 8015da4:	ee10 3a10 	vmov	r3, s0
 8015da8:	eeb0 7a67 	vmov.f32	s14, s15
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	bfb8      	it	lt
 8015db0:	eef0 7a66 	vmovlt.f32	s15, s13
 8015db4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8015db8:	4770      	bx	lr
 8015dba:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8015e20 <scalbnf+0xc0>
 8015dbe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015dc2:	4770      	bx	lr
 8015dc4:	0dd2      	lsrs	r2, r2, #23
 8015dc6:	e7e5      	b.n	8015d94 <scalbnf+0x34>
 8015dc8:	4410      	add	r0, r2
 8015dca:	28fe      	cmp	r0, #254	@ 0xfe
 8015dcc:	dce6      	bgt.n	8015d9c <scalbnf+0x3c>
 8015dce:	2800      	cmp	r0, #0
 8015dd0:	dd06      	ble.n	8015de0 <scalbnf+0x80>
 8015dd2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015dd6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8015dda:	ee00 3a10 	vmov	s0, r3
 8015dde:	4770      	bx	lr
 8015de0:	f110 0f16 	cmn.w	r0, #22
 8015de4:	da09      	bge.n	8015dfa <scalbnf+0x9a>
 8015de6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8015e20 <scalbnf+0xc0>
 8015dea:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8015e24 <scalbnf+0xc4>
 8015dee:	ee10 3a10 	vmov	r3, s0
 8015df2:	eeb0 7a67 	vmov.f32	s14, s15
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	e7d9      	b.n	8015dae <scalbnf+0x4e>
 8015dfa:	3019      	adds	r0, #25
 8015dfc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015e00:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8015e04:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8015e28 <scalbnf+0xc8>
 8015e08:	ee07 3a90 	vmov	s15, r3
 8015e0c:	e7d7      	b.n	8015dbe <scalbnf+0x5e>
 8015e0e:	bf00      	nop
 8015e10:	ffff3cb0 	.word	0xffff3cb0
 8015e14:	4c000000 	.word	0x4c000000
 8015e18:	7149f2ca 	.word	0x7149f2ca
 8015e1c:	f149f2ca 	.word	0xf149f2ca
 8015e20:	0da24260 	.word	0x0da24260
 8015e24:	8da24260 	.word	0x8da24260
 8015e28:	33000000 	.word	0x33000000

08015e2c <with_errnof>:
 8015e2c:	b510      	push	{r4, lr}
 8015e2e:	ed2d 8b02 	vpush	{d8}
 8015e32:	eeb0 8a40 	vmov.f32	s16, s0
 8015e36:	4604      	mov	r4, r0
 8015e38:	f7fd fada 	bl	80133f0 <__errno>
 8015e3c:	eeb0 0a48 	vmov.f32	s0, s16
 8015e40:	ecbd 8b02 	vpop	{d8}
 8015e44:	6004      	str	r4, [r0, #0]
 8015e46:	bd10      	pop	{r4, pc}

08015e48 <xflowf>:
 8015e48:	b130      	cbz	r0, 8015e58 <xflowf+0x10>
 8015e4a:	eef1 7a40 	vneg.f32	s15, s0
 8015e4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015e52:	2022      	movs	r0, #34	@ 0x22
 8015e54:	f7ff bfea 	b.w	8015e2c <with_errnof>
 8015e58:	eef0 7a40 	vmov.f32	s15, s0
 8015e5c:	e7f7      	b.n	8015e4e <xflowf+0x6>
	...

08015e60 <__math_uflowf>:
 8015e60:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015e68 <__math_uflowf+0x8>
 8015e64:	f7ff bff0 	b.w	8015e48 <xflowf>
 8015e68:	10000000 	.word	0x10000000

08015e6c <__math_oflowf>:
 8015e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015e74 <__math_oflowf+0x8>
 8015e70:	f7ff bfea 	b.w	8015e48 <xflowf>
 8015e74:	70000000 	.word	0x70000000

08015e78 <_init>:
 8015e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e7a:	bf00      	nop
 8015e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e7e:	bc08      	pop	{r3}
 8015e80:	469e      	mov	lr, r3
 8015e82:	4770      	bx	lr

08015e84 <_fini>:
 8015e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e86:	bf00      	nop
 8015e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e8a:	bc08      	pop	{r3}
 8015e8c:	469e      	mov	lr, r3
 8015e8e:	4770      	bx	lr
