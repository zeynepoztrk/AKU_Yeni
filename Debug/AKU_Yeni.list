
AKU_Yeni.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  080123a8  080123a8  000133a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012bbc  08012bbc  000141d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012bbc  08012bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012bc4  08012bc4  000141d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012bc4  08012bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012bc8  08012bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08012bcc  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ea0  200001d8  08012da4  000141d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005078  08012da4  00015078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028cf5  00000000  00000000  00014208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006563  00000000  00000000  0003cefd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002240  00000000  00000000  00043460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a7a  00000000  00000000  000456a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b339  00000000  00000000  0004711a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fba6  00000000  00000000  00072453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8f56  00000000  00000000  000a1ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018af4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fbc  00000000  00000000  0018af94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00194f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012390 	.word	0x08012390

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08012390 	.word	0x08012390

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <BMI088_Init_I2C>:
 *
 */

uint8_t BMI088_Init_I2C(BMI088 *imu,
                        I2C_HandleTypeDef *i2cHandle,
                        uint8_t accAddress, uint8_t gyrAddress) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	460b      	mov	r3, r1
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	4613      	mov	r3, r2
 8001008:	71bb      	strb	r3, [r7, #6]

    imu->i2cHandle = i2cHandle;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	601a      	str	r2, [r3, #0]
    imu->accAddress = 0x18 << 1;  // = 0x30
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2230      	movs	r2, #48	@ 0x30
 8001014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    imu->gyrAddress = 0x68 << 1;  // = 0xD0
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	22d0      	movs	r2, #208	@ 0xd0
 800101c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    imu->readingAcc = 0;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    imu->readingGyr = 0;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    uint8_t status = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	75fb      	strb	r3, [r7, #23]
    uint8_t data = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	75bb      	strb	r3, [r7, #22]

    if (HAL_I2C_IsDeviceReady(i2cHandle, 0x68 << 1, 3, 100) == HAL_OK) {
 8001038:	2364      	movs	r3, #100	@ 0x64
 800103a:	2203      	movs	r2, #3
 800103c:	21d0      	movs	r1, #208	@ 0xd0
 800103e:	68b8      	ldr	r0, [r7, #8]
 8001040:	f004 fd06 	bl	8005a50 <HAL_I2C_IsDeviceReady>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <BMI088_Init_I2C+0x5c>
        // BMI bulundu
    	printf("ok");
 800104a:	4891      	ldr	r0, [pc, #580]	@ (8001290 <BMI088_Init_I2C+0x29c>)
 800104c:	f00e ff8a 	bl	800ff64 <iprintf>
    } else {
        // BMI bağlı değil / bus kitli
    }

    if (HAL_I2C_IsDeviceReady(i2cHandle, imu->accAddress, 3, 100) == HAL_OK)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001056:	4619      	mov	r1, r3
 8001058:	2364      	movs	r3, #100	@ 0x64
 800105a:	2203      	movs	r2, #3
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f004 fcf7 	bl	8005a50 <HAL_I2C_IsDeviceReady>
     * ACCELEROMETER
     *
     */

    // Soft reset accelerometer
    data = 0xB6;
 8001062:	23b6      	movs	r3, #182	@ 0xb6
 8001064:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_SOFTRESET, 1, &data, 1, HAL_MAX_DELAY);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2301      	movs	r3, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	f107 0316 	add.w	r3, r7, #22
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	227e      	movs	r2, #126	@ 0x7e
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f004 f9b8 	bl	80053f8 <HAL_I2C_Mem_Write>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	4413      	add	r3, r2
 8001090:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(50);
 8001092:	2032      	movs	r0, #50	@ 0x32
 8001094:	f003 f84e 	bl	8004134 <HAL_Delay>

    // Read and check chip ID
    status += HAL_I2C_Mem_Read(i2cHandle, imu->accAddress, BMI_ACC_CHIP_ID, 1, &data, 1, HAL_MAX_DELAY);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	2301      	movs	r3, #1
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	f107 0316 	add.w	r3, r7, #22
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	2200      	movs	r2, #0
 80010b4:	68b8      	ldr	r0, [r7, #8]
 80010b6:	f004 fa99 	bl	80055ec <HAL_I2C_Mem_Read>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	4413      	add	r3, r2
 80010c2:	75fb      	strb	r3, [r7, #23]
    if (data != 0x1E) {
 80010c4:	7dbb      	ldrb	r3, [r7, #22]
 80010c6:	2b1e      	cmp	r3, #30
 80010c8:	d001      	beq.n	80010ce <BMI088_Init_I2C+0xda>
        return 1; // ACC chip ID mismatch
 80010ca:	2301      	movs	r3, #1
 80010cc:	e175      	b.n	80013ba <BMI088_Init_I2C+0x3c6>
    }

    HAL_Delay(10);
 80010ce:	200a      	movs	r0, #10
 80010d0:	f003 f830 	bl	8004134 <HAL_Delay>

    // Configure accelerometer
    data = 0xA8;
 80010d4:	23a8      	movs	r3, #168	@ 0xa8
 80010d6:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_CONF, 1, &data, 1, HAL_MAX_DELAY);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	9302      	str	r3, [sp, #8]
 80010e6:	2301      	movs	r3, #1
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	f107 0316 	add.w	r3, r7, #22
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	2240      	movs	r2, #64	@ 0x40
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f004 f97f 	bl	80053f8 <HAL_I2C_Mem_Write>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	4413      	add	r3, r2
 8001102:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f003 f815 	bl	8004134 <HAL_Delay>

    data = 0x00; // ±3g
 800110a:	2300      	movs	r3, #0
 800110c:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_RANGE, 1, &data, 1, HAL_MAX_DELAY);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	2301      	movs	r3, #1
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	f107 0316 	add.w	r3, r7, #22
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	2241      	movs	r2, #65	@ 0x41
 800112a:	68b8      	ldr	r0, [r7, #8]
 800112c:	f004 f964 	bl	80053f8 <HAL_I2C_Mem_Write>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	4413      	add	r3, r2
 8001138:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 800113a:	200a      	movs	r0, #10
 800113c:	f002 fffa 	bl	8004134 <HAL_Delay>

    // Enable accelerometer interrupts (optional)
    data = 0x0A;
 8001140:	230a      	movs	r3, #10
 8001142:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_INT1_IO_CONF, 1, &data, 1, HAL_MAX_DELAY);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	f107 0316 	add.w	r3, r7, #22
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	2253      	movs	r2, #83	@ 0x53
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f004 f949 	bl	80053f8 <HAL_I2C_Mem_Write>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	4413      	add	r3, r2
 800116e:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001170:	200a      	movs	r0, #10
 8001172:	f002 ffdf 	bl	8004134 <HAL_Delay>

    data = 0x04;
 8001176:	2304      	movs	r3, #4
 8001178:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_INT1_INT2_MAP_DATA, 1, &data, 1, HAL_MAX_DELAY);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001180:	4619      	mov	r1, r3
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	2301      	movs	r3, #1
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	f107 0316 	add.w	r3, r7, #22
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	2258      	movs	r2, #88	@ 0x58
 8001196:	68b8      	ldr	r0, [r7, #8]
 8001198:	f004 f92e 	bl	80053f8 <HAL_I2C_Mem_Write>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	4413      	add	r3, r2
 80011a4:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 80011a6:	200a      	movs	r0, #10
 80011a8:	f002 ffc4 	bl	8004134 <HAL_Delay>

    // Power ON
    data = 0x00;
 80011ac:	2300      	movs	r3, #0
 80011ae:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_PWR_CONF, 1, &data, 1, HAL_MAX_DELAY);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2301      	movs	r3, #1
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	f107 0316 	add.w	r3, r7, #22
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	227c      	movs	r2, #124	@ 0x7c
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	f004 f913 	bl	80053f8 <HAL_I2C_Mem_Write>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	4413      	add	r3, r2
 80011da:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f002 ffa9 	bl	8004134 <HAL_Delay>

    data = 0x04;
 80011e2:	2304      	movs	r3, #4
 80011e4:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_PWR_CTRL, 1, &data, 1, HAL_MAX_DELAY);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f107 0316 	add.w	r3, r7, #22
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	227d      	movs	r2, #125	@ 0x7d
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	f004 f8f8 	bl	80053f8 <HAL_I2C_Mem_Write>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	4413      	add	r3, r2
 8001210:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001212:	200a      	movs	r0, #10
 8001214:	f002 ff8e 	bl	8004134 <HAL_Delay>

    imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a1e      	ldr	r2, [pc, #120]	@ (8001294 <BMI088_Init_I2C+0x2a0>)
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->accTxBuf[0] = BMI_ACC_DATA;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2212      	movs	r2, #18
 8001222:	711a      	strb	r2, [r3, #4]
     * GYROSCOPE
     *
     */

    // Soft reset gyro
    data = 0xB6;
 8001224:	23b6      	movs	r3, #182	@ 0xb6
 8001226:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_GYR_SOFTRESET, 1, &data, 1, HAL_MAX_DELAY);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	2301      	movs	r3, #1
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	f107 0316 	add.w	r3, r7, #22
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	2214      	movs	r2, #20
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f004 f8d7 	bl	80053f8 <HAL_I2C_Mem_Write>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	4413      	add	r3, r2
 8001252:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(250);
 8001254:	20fa      	movs	r0, #250	@ 0xfa
 8001256:	f002 ff6d 	bl	8004134 <HAL_Delay>

    // Read and check chip ID
    status += HAL_I2C_Mem_Read(i2cHandle, imu->gyrAddress, BMI_GYR_CHIP_ID, 1, &data, 1, HAL_MAX_DELAY);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	2301      	movs	r3, #1
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	f107 0316 	add.w	r3, r7, #22
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2301      	movs	r3, #1
 8001274:	2200      	movs	r2, #0
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f004 f9b8 	bl	80055ec <HAL_I2C_Mem_Read>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	4413      	add	r3, r2
 8001284:	75fb      	strb	r3, [r7, #23]
    if (data != 0x0F) {
 8001286:	7dbb      	ldrb	r3, [r7, #22]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d005      	beq.n	8001298 <BMI088_Init_I2C+0x2a4>
        return 2; // GYR chip ID mismatch
 800128c:	2302      	movs	r3, #2
 800128e:	e094      	b.n	80013ba <BMI088_Init_I2C+0x3c6>
 8001290:	080123a8 	.word	0x080123a8
 8001294:	3a6b70a4 	.word	0x3a6b70a4
    }

    HAL_Delay(10);
 8001298:	200a      	movs	r0, #10
 800129a:	f002 ff4b 	bl	8004134 <HAL_Delay>

    // Configure gyroscope
    data = 0x01; // ±1000 dps
 800129e:	2301      	movs	r3, #1
 80012a0:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_GYR_RANGE, 1, &data, 1, HAL_MAX_DELAY);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	2301      	movs	r3, #1
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	f107 0316 	add.w	r3, r7, #22
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	220f      	movs	r2, #15
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f004 f89a 	bl	80053f8 <HAL_I2C_Mem_Write>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	4413      	add	r3, r2
 80012cc:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f002 ff30 	bl	8004134 <HAL_Delay>

    data = 0x07;
 80012d4:	2307      	movs	r3, #7
 80012d6:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_GYR_BANDWIDTH, 1, &data, 1, HAL_MAX_DELAY);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 0316 	add.w	r3, r7, #22
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	2210      	movs	r2, #16
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f004 f87f 	bl	80053f8 <HAL_I2C_Mem_Write>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	4413      	add	r3, r2
 8001302:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001304:	200a      	movs	r0, #10
 8001306:	f002 ff15 	bl	8004134 <HAL_Delay>

    // Gyro interrupts (optional)
    data = 0x80;
 800130a:	2380      	movs	r3, #128	@ 0x80
 800130c:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_GYR_INT_CTRL, 1, &data, 1, HAL_MAX_DELAY);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	2301      	movs	r3, #1
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	f107 0316 	add.w	r3, r7, #22
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	2215      	movs	r2, #21
 800132a:	68b8      	ldr	r0, [r7, #8]
 800132c:	f004 f864 	bl	80053f8 <HAL_I2C_Mem_Write>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	4413      	add	r3, r2
 8001338:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 800133a:	200a      	movs	r0, #10
 800133c:	f002 fefa 	bl	8004134 <HAL_Delay>

    data = 0x01;
 8001340:	2301      	movs	r3, #1
 8001342:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_INT3_INT4_IO_CONF, 1, &data, 1, HAL_MAX_DELAY);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2301      	movs	r3, #1
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	f107 0316 	add.w	r3, r7, #22
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	2216      	movs	r2, #22
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	f004 f849 	bl	80053f8 <HAL_I2C_Mem_Write>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	4413      	add	r3, r2
 800136e:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001370:	200a      	movs	r0, #10
 8001372:	f002 fedf 	bl	8004134 <HAL_Delay>

    data = 0x01;
 8001376:	2301      	movs	r3, #1
 8001378:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_INT3_INT4_IO_MAP, 1, &data, 1, HAL_MAX_DELAY);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2301      	movs	r3, #1
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	f107 0316 	add.w	r3, r7, #22
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2301      	movs	r3, #1
 8001394:	2218      	movs	r2, #24
 8001396:	68b8      	ldr	r0, [r7, #8]
 8001398:	f004 f82e 	bl	80053f8 <HAL_I2C_Mem_Write>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	4413      	add	r3, r2
 80013a4:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f002 fec4 	bl	8004134 <HAL_Delay>

    imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <BMI088_Init_I2C+0x3d0>)
 80013b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->gyrTxBuf[0] = BMI_GYR_DATA;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2202      	movs	r2, #2
 80013b6:	72da      	strb	r2, [r3, #11]

    return status;
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	3a0ba058 	.word	0x3a0ba058

080013c8 <configureLoRa>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
LoRa configureLoRa(){
 80013c8:	b4b0      	push	{r4, r5, r7}
 80013ca:	b08f      	sub	sp, #60	@ 0x3c
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013d4:	637b      	str	r3, [r7, #52]	@ 0x34
	void main(void) {
	    myLoRa = configureLoRa();  // ✅ Geçerli — stack’e kopyalanır
	    LoRa_init(&myLoRa);        // ✅ Pointer olarak gönderilir
	}

	myLoRa.CS_port         = NSS_GPIO_Port;
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <configureLoRa+0x74>)
 80013d8:	60bb      	str	r3, [r7, #8]
		myLoRa.CS_pin          = NSS_Pin;
 80013da:	2310      	movs	r3, #16
 80013dc:	81bb      	strh	r3, [r7, #12]
		myLoRa.reset_port      = RST_GPIO_Port;
 80013de:	4b17      	ldr	r3, [pc, #92]	@ (800143c <configureLoRa+0x74>)
 80013e0:	613b      	str	r3, [r7, #16]
		myLoRa.reset_pin       = RST_Pin;
 80013e2:	2308      	movs	r3, #8
 80013e4:	82bb      	strh	r3, [r7, #20]
		myLoRa.DIO0_port       = DIO0_GPIO_Port;
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <configureLoRa+0x78>)
 80013e8:	61bb      	str	r3, [r7, #24]
		myLoRa.DIO0_pin        = DIO0_Pin;
 80013ea:	2310      	movs	r3, #16
 80013ec:	83bb      	strh	r3, [r7, #28]
		myLoRa.hSPIx           = &hspi1;
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <configureLoRa+0x7c>)
 80013f0:	623b      	str	r3, [r7, #32]

		myLoRa.frequency             = 433.663   ;
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <configureLoRa+0x80>)
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
		myLoRa.spredingFactor        = SF_7      ;
 80013f6:	2307      	movs	r3, #7
 80013f8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		myLoRa.bandWidth			 = BW_500KHz ;
 80013fc:	2309      	movs	r3, #9
 80013fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		myLoRa.crcRate               = CR_4_5    ;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		myLoRa.power				 = POWER_20db;
 8001408:	23ff      	movs	r3, #255	@ 0xff
 800140a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		myLoRa.overCurrentProtection = 250       ;
 800140e:	23fa      	movs	r3, #250	@ 0xfa
 8001410:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		myLoRa.preamble			     = 8         ;
 8001414:	2308      	movs	r3, #8
 8001416:	863b      	strh	r3, [r7, #48]	@ 0x30

	return myLoRa;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	461d      	mov	r5, r3
 800141c:	f107 0408 	add.w	r4, r7, #8
 8001420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001428:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800142c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	373c      	adds	r7, #60	@ 0x3c
 8001434:	46bd      	mov	sp, r7
 8001436:	bcb0      	pop	{r4, r5, r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40020000 	.word	0x40020000
 8001440:	40020800 	.word	0x40020800
 8001444:	20000e2c 	.word	0x20000e2c
 8001448:	43d8d4dd 	.word	0x43d8d4dd

0800144c <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001456:	2101      	movs	r1, #1
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 fa20 	bl	800189e <LoRa_read>
 800145e:	4603      	mov	r3, r0
 8001460:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d107      	bne.n	800147c <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	f023 0307 	bic.w	r3, r3, #7
 8001472:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
 800147a:	e03e      	b.n	80014fa <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d10c      	bne.n	800149c <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001482:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001486:	f023 0307 	bic.w	r3, r3, #7
 800148a:	b25b      	sxtb	r3, r3
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	b25b      	sxtb	r3, r3
 8001492:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	61da      	str	r2, [r3, #28]
 800149a:	e02e      	b.n	80014fa <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d10c      	bne.n	80014bc <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80014a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014a6:	f023 0307 	bic.w	r3, r3, #7
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	f043 0303 	orr.w	r3, r3, #3
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2203      	movs	r2, #3
 80014b8:	61da      	str	r2, [r3, #28]
 80014ba:	e01e      	b.n	80014fa <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d10c      	bne.n	80014dc <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80014c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014c6:	f023 0307 	bic.w	r3, r3, #7
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	f043 0305 	orr.w	r3, r3, #5
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2205      	movs	r2, #5
 80014d8:	61da      	str	r2, [r3, #28]
 80014da:	e00e      	b.n	80014fa <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d10b      	bne.n	80014fa <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80014e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014e6:	f023 0307 	bic.w	r3, r3, #7
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	f043 0306 	orr.w	r3, r3, #6
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2206      	movs	r2, #6
 80014f8:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	461a      	mov	r2, r3
 80014fe:	2101      	movs	r1, #1
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f9e6 	bl	80018d2 <LoRa_write>
	//HAL_Delay(10);
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4613      	mov	r3, r2
 800151c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	889b      	ldrh	r3, [r3, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	4619      	mov	r1, r3
 800152a:	f003 fdd7 	bl	80050dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6998      	ldr	r0, [r3, #24]
 8001532:	88fa      	ldrh	r2, [r7, #6]
 8001534:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	f007 fac7 	bl	8008acc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800153e:	bf00      	nop
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4618      	mov	r0, r3
 8001546:	f007 ffd1 	bl	80094ec <HAL_SPI_GetState>
 800154a:	4603      	mov	r3, r0
 800154c:	2b01      	cmp	r3, #1
 800154e:	d1f7      	bne.n	8001540 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6998      	ldr	r0, [r3, #24]
 8001554:	8b3a      	ldrh	r2, [r7, #24]
 8001556:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	f007 fbfa 	bl	8008d54 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001560:	bf00      	nop
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4618      	mov	r0, r3
 8001568:	f007 ffc0 	bl	80094ec <HAL_SPI_GetState>
 800156c:	4603      	mov	r3, r0
 800156e:	2b01      	cmp	r3, #1
 8001570:	d1f7      	bne.n	8001562 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	889b      	ldrh	r3, [r3, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	4619      	mov	r1, r3
 800157e:	f003 fdad 	bl	80050dc <HAL_GPIO_WritePin>
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4613      	mov	r3, r2
 8001598:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	889b      	ldrh	r3, [r3, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	4619      	mov	r1, r3
 80015a6:	f003 fd99 	bl	80050dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6998      	ldr	r0, [r3, #24]
 80015ae:	88fa      	ldrh	r2, [r7, #6]
 80015b0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	f007 fa89 	bl	8008acc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80015ba:	bf00      	nop
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f007 ff93 	bl	80094ec <HAL_SPI_GetState>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d1f7      	bne.n	80015bc <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6998      	ldr	r0, [r3, #24]
 80015d0:	8b3a      	ldrh	r2, [r7, #24]
 80015d2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015d6:	6839      	ldr	r1, [r7, #0]
 80015d8:	f007 fa78 	bl	8008acc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80015dc:	bf00      	nop
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f007 ff82 	bl	80094ec <HAL_SPI_GetState>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d1f7      	bne.n	80015de <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	889b      	ldrh	r3, [r3, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	4619      	mov	r1, r3
 80015fa:	f003 fd6f 	bl	80050dc <HAL_GPIO_WritePin>
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8001612:	2126      	movs	r1, #38	@ 0x26
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f942 	bl	800189e <LoRa_read>
 800161a:	4603      	mov	r3, r0
 800161c:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d004      	beq.n	800162e <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e003      	b.n	8001636 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 800162e:	7bbb      	ldrb	r3, [r7, #14]
 8001630:	f023 0308 	bic.w	r3, r3, #8
 8001634:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	461a      	mov	r2, r3
 800163a:	2126      	movs	r1, #38	@ 0x26
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f948 	bl	80018d2 <LoRa_write>
	HAL_Delay(10);
 8001642:	200a      	movs	r0, #10
 8001644:	f002 fd76 	bl	8004134 <HAL_Delay>
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8001650:	b580      	push	{r7, lr}
 8001652:	b096      	sub	sp, #88	@ 0x58
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001658:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <LoRa_setAutoLDO+0x68>)
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	4611      	mov	r1, r2
 8001660:	2250      	movs	r2, #80	@ 0x50
 8001662:	4618      	mov	r0, r3
 8001664:	f00e fed9 	bl	801041a <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800166e:	461a      	mov	r2, r3
 8001670:	2301      	movs	r3, #1
 8001672:	4093      	lsls	r3, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff75 	bl	8000564 <__aeabi_i2d>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	3358      	adds	r3, #88	@ 0x58
 8001684:	443b      	add	r3, r7
 8001686:	3b50      	subs	r3, #80	@ 0x50
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7ff f8fe 	bl	800088c <__aeabi_ddiv>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff fa7e 	bl	8000b98 <__aeabi_d2iz>
 800169c:	4603      	mov	r3, r0
 800169e:	2b10      	cmp	r3, #16
 80016a0:	bfcc      	ite	gt
 80016a2:	2301      	movgt	r3, #1
 80016a4:	2300      	movle	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4619      	mov	r1, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffab 	bl	8001606 <LoRa_setLowDaraRateOptimization>
}
 80016b0:	bf00      	nop
 80016b2:	3758      	adds	r7, #88	@ 0x58
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	080123b0 	.word	0x080123b0
 80016bc:	00000000 	.word	0x00000000

080016c0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, float freq){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	ed87 0a00 	vstr	s0, [r7]
	uint8_t  data;
	uint32_t F;
	F = (uint32_t)((freq * 1000000.0) / 61.03515625);
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f7fe ff5b 	bl	8000588 <__aeabi_f2d>
 80016d2:	a31f      	add	r3, pc, #124	@ (adr r3, 8001750 <LoRa_setFrequency+0x90>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe ffae 	bl	8000638 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001758 <LoRa_setFrequency+0x98>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7ff f8cf 	bl	800088c <__aeabi_ddiv>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa77 	bl	8000be8 <__aeabi_d2uiz>
 80016fa:	4603      	mov	r3, r0
 80016fc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	0c1b      	lsrs	r3, r3, #16
 8001702:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001704:	7afb      	ldrb	r3, [r7, #11]
 8001706:	461a      	mov	r2, r3
 8001708:	2106      	movs	r1, #6
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8e1 	bl	80018d2 <LoRa_write>
	HAL_Delay(5);
 8001710:	2005      	movs	r0, #5
 8001712:	f002 fd0f 	bl	8004134 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800171c:	7afb      	ldrb	r3, [r7, #11]
 800171e:	461a      	mov	r2, r3
 8001720:	2107      	movs	r1, #7
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f8d5 	bl	80018d2 <LoRa_write>
	HAL_Delay(5);
 8001728:	2005      	movs	r0, #5
 800172a:	f002 fd03 	bl	8004134 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001732:	7afb      	ldrb	r3, [r7, #11]
 8001734:	461a      	mov	r2, r3
 8001736:	2108      	movs	r1, #8
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f8ca 	bl	80018d2 <LoRa_write>
	HAL_Delay(5);
 800173e:	2005      	movs	r0, #5
 8001740:	f002 fcf8 	bl	8004134 <HAL_Delay>
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	f3af 8000 	nop.w
 8001750:	00000000 	.word	0x00000000
 8001754:	412e8480 	.word	0x412e8480
 8001758:	00000000 	.word	0x00000000
 800175c:	404e8480 	.word	0x404e8480

08001760 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	2b0c      	cmp	r3, #12
 800176e:	dd01      	ble.n	8001774 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001770:	230c      	movs	r3, #12
 8001772:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2b06      	cmp	r3, #6
 8001778:	dc01      	bgt.n	800177e <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800177a:	2307      	movs	r3, #7
 800177c:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800177e:	211e      	movs	r1, #30
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f88c 	bl	800189e <LoRa_read>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800178a:	200a      	movs	r0, #10
 800178c:	f002 fcd2 	bl	8004134 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	b2da      	uxtb	r2, r3
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80017a4:	7bbb      	ldrb	r3, [r7, #14]
 80017a6:	461a      	mov	r2, r3
 80017a8:	211e      	movs	r1, #30
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f891 	bl	80018d2 <LoRa_write>
	HAL_Delay(10);
 80017b0:	200a      	movs	r0, #10
 80017b2:	f002 fcbf 	bl	8004134 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ff4a 	bl	8001650 <LoRa_setAutoLDO>
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	461a      	mov	r2, r3
 80017d4:	2109      	movs	r1, #9
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f87b 	bl	80018d2 <LoRa_write>
	HAL_Delay(10);
 80017dc:	200a      	movs	r0, #10
 80017de:	f002 fca9 	bl	8004134 <HAL_Delay>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	2b2c      	cmp	r3, #44	@ 0x2c
 8001800:	d801      	bhi.n	8001806 <LoRa_setOCP+0x1a>
		current = 45;
 8001802:	232d      	movs	r3, #45	@ 0x2d
 8001804:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	2bf0      	cmp	r3, #240	@ 0xf0
 800180a:	d901      	bls.n	8001810 <LoRa_setOCP+0x24>
		current = 240;
 800180c:	23f0      	movs	r3, #240	@ 0xf0
 800180e:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	2b78      	cmp	r3, #120	@ 0x78
 8001814:	d809      	bhi.n	800182a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	3b2d      	subs	r3, #45	@ 0x2d
 800181a:	4a12      	ldr	r2, [pc, #72]	@ (8001864 <LoRa_setOCP+0x78>)
 800181c:	fb82 1203 	smull	r1, r2, r2, r3
 8001820:	1052      	asrs	r2, r2, #1
 8001822:	17db      	asrs	r3, r3, #31
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e00b      	b.n	8001842 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	2bf0      	cmp	r3, #240	@ 0xf0
 800182e:	d808      	bhi.n	8001842 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	331e      	adds	r3, #30
 8001834:	4a0b      	ldr	r2, [pc, #44]	@ (8001864 <LoRa_setOCP+0x78>)
 8001836:	fb82 1203 	smull	r1, r2, r2, r3
 800183a:	1092      	asrs	r2, r2, #2
 800183c:	17db      	asrs	r3, r3, #31
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	3320      	adds	r3, #32
 8001846:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	461a      	mov	r2, r3
 800184c:	210b      	movs	r1, #11
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f83f 	bl	80018d2 <LoRa_write>
	HAL_Delay(10);
 8001854:	200a      	movs	r0, #10
 8001856:	f002 fc6d 	bl	8004134 <HAL_Delay>
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	66666667 	.word	0x66666667

08001868 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001870:	211e      	movs	r1, #30
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f813 	bl	800189e <LoRa_read>
 8001878:	4603      	mov	r3, r0
 800187a:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	f043 0307 	orr.w	r3, r3, #7
 8001882:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001884:	7bbb      	ldrb	r3, [r7, #14]
 8001886:	461a      	mov	r2, r3
 8001888:	211e      	movs	r1, #30
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f821 	bl	80018d2 <LoRa_write>
	HAL_Delay(10);
 8001890:	200a      	movs	r0, #10
 8001892:	f002 fc4f 	bl	8004134 <HAL_Delay>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af02      	add	r7, sp, #8
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80018b4:	f107 030f 	add.w	r3, r7, #15
 80018b8:	f107 010e 	add.w	r1, r7, #14
 80018bc:	2201      	movs	r2, #1
 80018be:	9200      	str	r2, [sp, #0]
 80018c0:	2201      	movs	r2, #1
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fe23 	bl	800150e <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af02      	add	r7, sp, #8
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	70fb      	strb	r3, [r7, #3]
 80018de:	4613      	mov	r3, r2
 80018e0:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	73bb      	strb	r3, [r7, #14]
	data = value;
 80018ec:	78bb      	ldrb	r3, [r7, #2]
 80018ee:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80018f0:	f107 030f 	add.w	r3, r7, #15
 80018f4:	f107 010e 	add.w	r1, r7, #14
 80018f8:	2201      	movs	r2, #1
 80018fa:	9200      	str	r2, [sp, #0]
 80018fc:	2201      	movs	r2, #1
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fe43 	bl	800158a <LoRa_writeReg>
	HAL_Delay(5);
 8001904:	2005      	movs	r0, #5
 8001906:	f002 fc15 	bl	8004134 <HAL_Delay>
}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	461a      	mov	r2, r3
 800191e:	460b      	mov	r3, r1
 8001920:	72fb      	strb	r3, [r7, #11]
 8001922:	4613      	mov	r3, r2
 8001924:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800192c:	b2db      	uxtb	r3, r3
 800192e:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	889b      	ldrh	r3, [r3, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	4619      	mov	r1, r3
 800193c:	f003 fbce 	bl	80050dc <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6998      	ldr	r0, [r3, #24]
 8001944:	f107 0117 	add.w	r1, r7, #23
 8001948:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800194c:	2201      	movs	r2, #1
 800194e:	f007 f8bd 	bl	8008acc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001952:	bf00      	nop
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4618      	mov	r0, r3
 800195a:	f007 fdc7 	bl	80094ec <HAL_SPI_GetState>
 800195e:	4603      	mov	r3, r0
 8001960:	2b01      	cmp	r3, #1
 8001962:	d1f7      	bne.n	8001954 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6998      	ldr	r0, [r3, #24]
 8001968:	7abb      	ldrb	r3, [r7, #10]
 800196a:	b29a      	uxth	r2, r3
 800196c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	f007 f8ab 	bl	8008acc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001976:	bf00      	nop
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4618      	mov	r0, r3
 800197e:	f007 fdb5 	bl	80094ec <HAL_SPI_GetState>
 8001982:	4603      	mov	r3, r0
 8001984:	2b01      	cmp	r3, #1
 8001986:	d1f7      	bne.n	8001978 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	889b      	ldrh	r3, [r3, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	4619      	mov	r1, r3
 8001994:	f003 fba2 	bl	80050dc <HAL_GPIO_WritePin>
}
 8001998:	bf00      	nop
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

	return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	4611      	mov	r1, r2
 80019c2:	461a      	mov	r2, r3
 80019c4:	460b      	mov	r3, r1
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	4613      	mov	r3, r2
 80019ca:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80019d2:	2101      	movs	r1, #1
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff fd39 	bl	800144c <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80019da:	210e      	movs	r1, #14
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f7ff ff5e 	bl	800189e <LoRa_read>
 80019e2:	4603      	mov	r3, r0
 80019e4:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80019e6:	7cfb      	ldrb	r3, [r7, #19]
 80019e8:	461a      	mov	r2, r3
 80019ea:	210d      	movs	r1, #13
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7ff ff70 	bl	80018d2 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	461a      	mov	r2, r3
 80019f6:	2122      	movs	r1, #34	@ 0x22
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7ff ff6a 	bl	80018d2 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	2100      	movs	r1, #0
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f7ff ff84 	bl	8001912 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001a0a:	2103      	movs	r1, #3
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f7ff fd1d 	bl	800144c <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001a12:	2112      	movs	r1, #18
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f7ff ff42 	bl	800189e <LoRa_read>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001a1e:	7cfb      	ldrb	r3, [r7, #19]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00a      	beq.n	8001a3e <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001a28:	22ff      	movs	r2, #255	@ 0xff
 8001a2a:	2112      	movs	r1, #18
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff ff50 	bl	80018d2 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001a32:	6979      	ldr	r1, [r7, #20]
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f7ff fd09 	bl	800144c <LoRa_gotoMode>
			return 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	80bb      	strh	r3, [r7, #4]
 8001a44:	88bb      	ldrh	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001a4a:	6979      	ldr	r1, [r7, #20]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f7ff fcfd 	bl	800144c <LoRa_gotoMode>
				return 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e003      	b.n	8001a5e <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f002 fb6c 	bl	8004134 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001a5c:	e7d9      	b.n	8001a12 <LoRa_transmit+0x5c>
	}
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001a6e:	2105      	movs	r1, #5
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fceb 	bl	800144c <LoRa_gotoMode>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff8a 	bl	80019a0 <LoRa_isvalid>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 8098 	beq.w	8001bc4 <LoRa_init+0x146>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001a94:	2100      	movs	r1, #0
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fcd8 	bl	800144c <LoRa_gotoMode>
			HAL_Delay(10);
 8001a9c:	200a      	movs	r0, #10
 8001a9e:	f002 fb49 	bl	8004134 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fefa 	bl	800189e <LoRa_read>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001aae:	200a      	movs	r0, #10
 8001ab0:	f002 fb40 	bl	8004134 <HAL_Delay>
			data = read | 0x80;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001aba:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff05 	bl	80018d2 <LoRa_write>
			HAL_Delay(100);
 8001ac8:	2064      	movs	r0, #100	@ 0x64
 8001aca:	f002 fb33 	bl	8004134 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fdf1 	bl	80016c0 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fe6c 	bl	80017c4 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001af2:	4619      	mov	r1, r3
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fe79 	bl	80017ec <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001afa:	2223      	movs	r2, #35	@ 0x23
 8001afc:	210c      	movs	r1, #12
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fee7 	bl	80018d2 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff feaf 	bl	8001868 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fe24 	bl	8001760 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001b18:	22ff      	movs	r2, #255	@ 0xff
 8001b1a:	211f      	movs	r1, #31
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fed8 	bl	80018d2 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001b3e:	7bbb      	ldrb	r3, [r7, #14]
 8001b40:	461a      	mov	r2, r3
 8001b42:	211d      	movs	r1, #29
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fec4 	bl	80018d2 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fd80 	bl	8001650 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2120      	movs	r1, #32
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff feb7 	bl	80018d2 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2121      	movs	r1, #33	@ 0x21
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff feaf 	bl	80018d2 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001b74:	2140      	movs	r1, #64	@ 0x40
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fe91 	bl	800189e <LoRa_read>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001b86:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001b88:	7bbb      	ldrb	r3, [r7, #14]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2140      	movs	r1, #64	@ 0x40
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fe9f 	bl	80018d2 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001b94:	2101      	movs	r1, #1
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fc58 	bl	800144c <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001ba2:	200a      	movs	r0, #10
 8001ba4:	f002 fac6 	bl	8004134 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001ba8:	2142      	movs	r1, #66	@ 0x42
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fe77 	bl	800189e <LoRa_read>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b12      	cmp	r3, #18
 8001bb8:	d101      	bne.n	8001bbe <LoRa_init+0x140>
				return LORA_OK;
 8001bba:	23c8      	movs	r3, #200	@ 0xc8
 8001bbc:	e004      	b.n	8001bc8 <LoRa_init+0x14a>
			else
				return LORA_NOT_FOUND;
 8001bbe:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001bc2:	e001      	b.n	8001bc8 <LoRa_init+0x14a>
	}
	else {
		return LORA_UNAVAILABLE;
 8001bc4:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <bmp5_init>:
*  @brief This API is the entry point.
*  It performs the selection of I2C/I3C/SPI read mechanism according to the
*  selected interface and reads the chip-id of the sensor.
*/
int8_t bmp5_init(struct bmp5_dev *dev)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t chip_id;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fc71 	bl	80024c0 <null_ptr_check>
 8001bde:	4603      	mov	r3, r0
 8001be0:	73fb      	strb	r3, [r7, #15]
     chip_id = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	737b      	strb	r3, [r7, #13]
     rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &chip_id, 1, dev);//chip_id neden okundu?sensörün gerçekten bağlı 
 8001be6:	f107 010d 	add.w	r1, r7, #13
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f000 f843 	bl	8001c7a <bmp5_get_regs>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73fb      	strb	r3, [r7, #15]
     //ve doğru model olduğunu kontrol etmek için

     if (rslt == BMP5_OK)
 8001bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d136      	bne.n	8001c6e <bmp5_init+0x9e>
         {
             dev->chip_id = 0;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]

             if (dev->intf == BMP5_SPI_INTF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	7d5b      	ldrb	r3, [r3, #21]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d108      	bne.n	8001c20 <bmp5_init+0x50>
             {
                 /* Performing a single read via SPI of registers,
                  * e.g. registers CHIP_ID, before the actual
                  * SPI communication with the device.
                  */
                 rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &reg_data, 1, dev);
 8001c0e:	f107 010e 	add.w	r1, r7, #14
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	2001      	movs	r0, #1
 8001c18:	f000 f82f 	bl	8001c7a <bmp5_get_regs>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	73fb      	strb	r3, [r7, #15]
             }

             if (rslt == BMP5_OK)
 8001c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d122      	bne.n	8001c6e <bmp5_init+0x9e>
             {
                 /* Read chip_id */
                 rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &chip_id, 1, dev);
 8001c28:	f107 010d 	add.w	r1, r7, #13
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2001      	movs	r0, #1
 8001c32:	f000 f822 	bl	8001c7a <bmp5_get_regs>
 8001c36:	4603      	mov	r3, r0
 8001c38:	73fb      	strb	r3, [r7, #15]

                 if (rslt == BMP5_OK)
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d115      	bne.n	8001c6e <bmp5_init+0x9e>
                 {
                     if (chip_id != 0)
 8001c42:	7b7b      	ldrb	r3, [r7, #13]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <bmp5_init+0x84>
                     {
                         /* Validate post power-up procedure */
                         rslt = power_up_check(dev);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fc75 	bl	8002538 <power_up_check>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	e001      	b.n	8001c58 <bmp5_init+0x88>
                     }
                     else
                     {
                         rslt = BMP5_E_INVALID_CHIP_ID;
 8001c54:	23fc      	movs	r3, #252	@ 0xfc
 8001c56:	73fb      	strb	r3, [r7, #15]
                     }

                     if (rslt == BMP5_OK)
 8001c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d106      	bne.n	8001c6e <bmp5_init+0x9e>
                     {
                         rslt = validate_chip_id(chip_id, dev);
 8001c60:	7b7b      	ldrb	r3, [r7, #13]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fc4b 	bl	8002500 <validate_chip_id>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	73fb      	strb	r3, [r7, #15]
                     }
                 }
             }
         }

         return rslt;
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
     }
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <bmp5_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp5_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp5_dev *dev)
{
 8001c7a:	b590      	push	{r4, r7, lr}
 8001c7c:	b087      	sub	sp, #28
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	4603      	mov	r3, r0
 8001c88:	73fb      	strb	r3, [r7, #15]
    //mikrodenetleyici (veya yazılım), sensörün içindeki verileri öğrenmek istiyor. Bu veriler sensörün register denilen hafıza alanlarında tutulur.
    //Bu fonksiyon da gidip o verileri okur ve RAM'deki bir tampon değişkene (reg_data) yazar
    int8_t rslt;
    rslt = null_ptr_check(dev);
 8001c8a:	6838      	ldr	r0, [r7, #0]
 8001c8c:	f000 fc18 	bl	80024c0 <null_ptr_check>
 8001c90:	4603      	mov	r3, r0
 8001c92:	75fb      	strb	r3, [r7, #23]


    /* Proceed if null check is fine */
    if ((rslt == BMP5_OK) && (reg_data != NULL))
 8001c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d116      	bne.n	8001cca <bmp5_get_regs+0x50>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d013      	beq.n	8001cca <bmp5_get_regs+0x50>
    {
        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689c      	ldr	r4, [r3, #8]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	7bf8      	ldrb	r0, [r7, #15]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	47a0      	blx	r4
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	751a      	strb	r2, [r3, #20]

        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <bmp5_get_regs+0x54>
        {
            /* Failure case */
            rslt = BMP5_E_COM_FAIL; //read işlemi başarısız
 8001cc4:	23fe      	movs	r3, #254	@ 0xfe
 8001cc6:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 8001cc8:	e001      	b.n	8001cce <bmp5_get_regs+0x54>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR; //en başta bir şey null ise
 8001cca:	23ff      	movs	r3, #255	@ 0xff
 8001ccc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}

08001cda <bmp5_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp5_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp5_dev *dev)
{
 8001cda:	b590      	push	{r4, r7, lr}
 8001cdc:	b087      	sub	sp, #28
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	75bb      	strb	r3, [r7, #22]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001cee:	6838      	ldr	r0, [r7, #0]
 8001cf0:	f000 fbe6 	bl	80024c0 <null_ptr_check>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMP5_OK) && (reg_data != NULL))
 8001cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d140      	bne.n	8001d82 <bmp5_set_regs+0xa8>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d03d      	beq.n	8001d82 <bmp5_set_regs+0xa8>
    {
        if (dev->intf == BMP5_SPI_INTF)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	7d5b      	ldrb	r3, [r3, #21]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d11d      	bne.n	8001d4a <bmp5_set_regs+0x70>
        {
            /* Write the data to the reg_addr */
            do
            {
                dev->intf_rslt = dev->write((reg_addr + idx), &reg_data[idx], 1, dev->intf_ptr);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68dc      	ldr	r4, [r3, #12]
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	7dbb      	ldrb	r3, [r7, #22]
 8001d16:	4413      	add	r3, r2
 8001d18:	b2d8      	uxtb	r0, r3
 8001d1a:	7dbb      	ldrb	r3, [r7, #22]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	18d1      	adds	r1, r2, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	47a0      	blx	r4
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	751a      	strb	r2, [r3, #20]
                idx++;
 8001d30:	7dbb      	ldrb	r3, [r7, #22]
 8001d32:	3301      	adds	r3, #1
 8001d34:	75bb      	strb	r3, [r7, #22]
            } while ((idx < len) && (dev->intf_rslt == BMP5_INTF_RET_SUCCESS));
 8001d36:	7dbb      	ldrb	r3, [r7, #22]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d919      	bls.n	8001d72 <bmp5_set_regs+0x98>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0e2      	beq.n	8001d0e <bmp5_set_regs+0x34>
 8001d48:	e013      	b.n	8001d72 <bmp5_set_regs+0x98>
        }
        else if ((dev->intf == BMP5_I2C_INTF) || (dev->intf == BMP5_I3C_INTF))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	7d5b      	ldrb	r3, [r3, #21]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d003      	beq.n	8001d5a <bmp5_set_regs+0x80>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	7d5b      	ldrb	r3, [r3, #21]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d10b      	bne.n	8001d72 <bmp5_set_regs+0x98>
        {
            /* Write the data to the reg_addr */
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68dc      	ldr	r4, [r3, #12]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	7bf8      	ldrb	r0, [r7, #15]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	68b9      	ldr	r1, [r7, #8]
 8001d68:	47a0      	blx	r4
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	751a      	strb	r2, [r3, #20]
        }

        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <bmp5_set_regs+0xac>
        {
            /* Failure case */
            rslt = BMP5_E_COM_FAIL;
 8001d7c:	23fe      	movs	r3, #254	@ 0xfe
 8001d7e:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 8001d80:	e001      	b.n	8001d86 <bmp5_set_regs+0xac>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8001d82:	23ff      	movs	r3, #255	@ 0xff
 8001d84:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd90      	pop	{r4, r7, pc}

08001d92 <bmp5_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp5_soft_reset(struct bmp5_dev *dev)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t por_status;
    uint8_t data = BMP5_SOFT_RESET_CMD;
 8001d9a:	23b6      	movs	r3, #182	@ 0xb6
 8001d9c:	733b      	strb	r3, [r7, #12]

    /* Reset the device */
    rslt = bmp5_set_regs(BMP5_REG_CMD, &data, 1, dev);
 8001d9e:	f107 010c 	add.w	r1, r7, #12
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	207e      	movs	r0, #126	@ 0x7e
 8001da8:	f7ff ff97 	bl	8001cda <bmp5_set_regs>
 8001dac:	4603      	mov	r3, r0
 8001dae:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8001db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d129      	bne.n	8001e0c <bmp5_soft_reset+0x7a>
    {
        /* Soft-reset execution takes 2 ms */
        //dev->delay_us(BMP5_DELAY_US_SOFT_RESET, dev->intf_ptr);
        HAL_Delay(10);
 8001db8:	200a      	movs	r0, #10
 8001dba:	f002 f9bb 	bl	8004134 <HAL_Delay>
        if (dev->intf == BMP5_SPI_INTF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7d5b      	ldrb	r3, [r3, #21]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d108      	bne.n	8001dd8 <bmp5_soft_reset+0x46>
        {
            /* Performing a single read via SPI of registers,
            * e.g. registers CHIP_ID, before the actual
            * SPI communication with the device.
            */
            rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &reg_data, 1, dev);
 8001dc6:	f107 010e 	add.w	r1, r7, #14
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7ff ff53 	bl	8001c7a <bmp5_get_regs>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMP5_OK)
 8001dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d115      	bne.n	8001e0c <bmp5_soft_reset+0x7a>
        {
            rslt = bmp5_get_interrupt_status(&por_status, dev);
 8001de0:	f107 030d 	add.w	r3, r7, #13
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f816 	bl	8001e18 <bmp5_get_interrupt_status>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 8001df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <bmp5_soft_reset+0x7a>
            {
                if (por_status & BMP5_INT_ASSERTED_POR_SOFTRESET_COMPLETE)
 8001df8:	7b7b      	ldrb	r3, [r7, #13]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <bmp5_soft_reset+0x76>
                {
                    rslt = BMP5_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e001      	b.n	8001e0c <bmp5_soft_reset+0x7a>
                }
                else
                {
                    rslt = BMP5_E_POR_SOFTRESET;
 8001e08:	23fa      	movs	r3, #250	@ 0xfa
 8001e0a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <bmp5_get_interrupt_status>:

/*!
 *  @brief This API is used to get interrupt status.
 */
int8_t bmp5_get_interrupt_status(uint8_t *int_status, struct bmp5_dev *dev)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (int_status != NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <bmp5_get_interrupt_status+0x22>
    {
        rslt = bmp5_get_regs(BMP5_REG_INT_STATUS, int_status, 1, dev);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	201d      	movs	r0, #29
 8001e30:	f7ff ff23 	bl	8001c7a <bmp5_get_regs>
 8001e34:	4603      	mov	r3, r0
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e001      	b.n	8001e3e <bmp5_get_interrupt_status+0x26>
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8001e3a:	23ff      	movs	r3, #255	@ 0xff
 8001e3c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <bmp5_get_power_mode>:

/*!
 *  @brief This API is used to get powermode of the sensor.
 */
int8_t bmp5_get_power_mode(enum bmp5_powermode *powermode, struct bmp5_dev *dev)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t deep_dis;
    uint8_t reg_data;
    uint8_t pwrmode;

    if (powermode != NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d03f      	beq.n	8001edc <bmp5_get_power_mode+0x90>
    {
        /* Read the power mode register */
        rslt = bmp5_get_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 8001e5c:	f107 010c 	add.w	r1, r7, #12
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2201      	movs	r2, #1
 8001e64:	2037      	movs	r0, #55	@ 0x37
 8001e66:	f7ff ff08 	bl	8001c7a <bmp5_get_regs>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d134      	bne.n	8001ee0 <bmp5_get_power_mode+0x94>
        {
            pwrmode = BMP5_GET_BITS_POS_0(reg_data, BMP5_POWERMODE);
 8001e76:	7b3b      	ldrb	r3, [r7, #12]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	73bb      	strb	r3, [r7, #14]

            switch (pwrmode)
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d828      	bhi.n	8001ed6 <bmp5_get_power_mode+0x8a>
 8001e84:	a201      	add	r2, pc, #4	@ (adr r2, 8001e8c <bmp5_get_power_mode+0x40>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001e9d 	.word	0x08001e9d
 8001e90:	08001ebf 	.word	0x08001ebf
 8001e94:	08001ec7 	.word	0x08001ec7
 8001e98:	08001ecf 	.word	0x08001ecf
            {
                case BMP5_POWERMODE_STANDBY:

                    /* Getting deep disable status */
                    deep_dis = BMP5_GET_BITSLICE(reg_data, BMP5_DEEP_DISABLE);
 8001e9c:	7b3b      	ldrb	r3, [r7, #12]
 8001e9e:	09db      	lsrs	r3, r3, #7
 8001ea0:	737b      	strb	r3, [r7, #13]
                    /* Checking deepstandby status only when powermode is in standby mode */

                    /* If deep_dis = 0(BMP5_DEEP_ENABLED) then deepstandby mode is enabled.
                     * If deep_dis = 1(BMP5_DEEP_DISABLED) then deepstandby mode is disabled
                     */
                    if (deep_dis == BMP5_DEEP_ENABLED)
 8001ea2:	7b7b      	ldrb	r3, [r7, #13]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d106      	bne.n	8001eb6 <bmp5_get_power_mode+0x6a>
                    {
                        rslt = check_deepstandby_mode(powermode, dev);
 8001ea8:	6839      	ldr	r1, [r7, #0]
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fb83 	bl	80025b6 <check_deepstandby_mode>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        *powermode = BMP5_POWERMODE_STANDBY;
                    }

                    break;
 8001eb4:	e014      	b.n	8001ee0 <bmp5_get_power_mode+0x94>
                        *powermode = BMP5_POWERMODE_STANDBY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
                    break;
 8001ebc:	e010      	b.n	8001ee0 <bmp5_get_power_mode+0x94>
                case BMP5_POWERMODE_NORMAL:
                    *powermode = BMP5_POWERMODE_NORMAL;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
                    break;
 8001ec4:	e00c      	b.n	8001ee0 <bmp5_get_power_mode+0x94>
                case BMP5_POWERMODE_FORCED:
                    *powermode = BMP5_POWERMODE_FORCED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2202      	movs	r2, #2
 8001eca:	701a      	strb	r2, [r3, #0]
                    break;
 8001ecc:	e008      	b.n	8001ee0 <bmp5_get_power_mode+0x94>
                case BMP5_POWERMODE_CONTINOUS:
                    *powermode = BMP5_POWERMODE_CONTINOUS;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	701a      	strb	r2, [r3, #0]
                    break;
 8001ed4:	e004      	b.n	8001ee0 <bmp5_get_power_mode+0x94>
                default:
                    rslt = BMP5_E_INVALID_POWERMODE;
 8001ed6:	23f9      	movs	r3, #249	@ 0xf9
 8001ed8:	73fb      	strb	r3, [r7, #15]
                    break;
 8001eda:	e001      	b.n	8001ee0 <bmp5_get_power_mode+0x94>
            }
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8001edc:	23ff      	movs	r3, #255	@ 0xff
 8001ede:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <bmp5_set_power_mode>:

/*!
 *  @brief This API is used to set powermode of the sensor.
 */
int8_t bmp5_set_power_mode(enum bmp5_powermode powermode, struct bmp5_dev *dev)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    enum bmp5_powermode lst_pwrmode;

    /* Existing power mode of the device is received in lst_pwrmode */
    rslt = bmp5_get_power_mode(&lst_pwrmode, dev);//Sensör şu anda hangi güç modunda?
 8001ef8:	f107 030e 	add.w	r3, r7, #14
 8001efc:	6839      	ldr	r1, [r7, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ffa4 	bl	8001e4c <bmp5_get_power_mode>
 8001f04:	4603      	mov	r3, r0
 8001f06:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8001f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d132      	bne.n	8001f76 <bmp5_set_power_mode+0x8a>
    {
        /* If the sensor is not in standby mode set the device to
         *  standby mode.
         */
        if (lst_pwrmode != BMP5_POWERMODE_STANDBY)
 8001f10:	7bbb      	ldrb	r3, [r7, #14]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00c      	beq.n	8001f30 <bmp5_set_power_mode+0x44>
        {
            /* Device should be set to standby before transiting to
             * forced mode or normal mode or continous mode.
             */
            rslt = set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 8001f16:	6839      	ldr	r1, [r7, #0]
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f000 fc00 	bl	800271e <set_power_mode>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73fb      	strb	r3, [r7, #15]
            //STANDBY moduna al.Sensörün modunu değiştirmeden önce STANDBY modunda olması gerekir.

            if (rslt == BMP5_OK)
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <bmp5_set_power_mode+0x44>
            {
                /* Give t_standby(as per data sheet) time for device to go into standby mode */
                //dev->delay_us(BMP5_DELAY_US_STANDBY, dev->intf_ptr);
            	HAL_Delay(10);
 8001f2a:	200a      	movs	r0, #10
 8001f2c:	f002 f902 	bl	8004134 <HAL_Delay>
            }
        }

        /* Set the desired power mode */
        if (rslt == BMP5_OK)
 8001f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d11e      	bne.n	8001f76 <bmp5_set_power_mode+0x8a>
        {
            switch (powermode)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d009      	beq.n	8001f52 <bmp5_set_power_mode+0x66>
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	dc15      	bgt.n	8001f6e <bmp5_set_power_mode+0x82>
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <bmp5_set_power_mode+0x88>
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db11      	blt.n	8001f6e <bmp5_set_power_mode+0x82>
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d80e      	bhi.n	8001f6e <bmp5_set_power_mode+0x82>
 8001f50:	e005      	b.n	8001f5e <bmp5_set_power_mode+0x72>
            {
                case BMP5_POWERMODE_DEEP_STANDBY:
                    rslt = set_deep_standby_mode(dev);
 8001f52:	6838      	ldr	r0, [r7, #0]
 8001f54:	f000 fb76 	bl	8002644 <set_deep_standby_mode>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	73fb      	strb	r3, [r7, #15]
                    break;
 8001f5c:	e00b      	b.n	8001f76 <bmp5_set_power_mode+0x8a>
                     */
                    break;
                case BMP5_POWERMODE_NORMAL:
                case BMP5_POWERMODE_FORCED:
                case BMP5_POWERMODE_CONTINOUS:
                    rslt = set_power_mode(powermode, dev);//İstenen moda geç
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	6839      	ldr	r1, [r7, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fbdb 	bl	800271e <set_power_mode>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
                    break;
 8001f6c:	e003      	b.n	8001f76 <bmp5_set_power_mode+0x8a>
                default:
                    rslt = BMP5_E_INVALID_POWERMODE;
 8001f6e:	23f9      	movs	r3, #249	@ 0xf9
 8001f70:	73fb      	strb	r3, [r7, #15]
                    break;
 8001f72:	e000      	b.n	8001f76 <bmp5_set_power_mode+0x8a>
                    break;
 8001f74:	bf00      	nop
            }
        }
    }

    return rslt;
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <bmp5_get_sensor_data>:
 * sensor and store it in the bmp5_sensor_data structure instance passed by the user.
 */
int8_t bmp5_get_sensor_data(struct bmp5_sensor_data *sensor_data,
                            const struct bmp5_osr_odr_press_config *osr_odr_press_cfg,
                            struct bmp5_dev *dev)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	@ 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[6] = { 0 };
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	809a      	strh	r2, [r3, #4]
    int32_t raw_data_t;
    uint32_t raw_data_p;

    rslt = bmp5_get_regs(BMP5_REG_TEMP_DATA_XLSB, reg_data, 6, dev);
 8001f9a:	f107 0114 	add.w	r1, r7, #20
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2206      	movs	r2, #6
 8001fa2:	201d      	movs	r0, #29
 8001fa4:	f7ff fe69 	bl	8001c7a <bmp5_get_regs>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP5_OK)
 8001fae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d13d      	bne.n	8002032 <bmp5_get_sensor_data+0xae>
    {
        raw_data_t = (int32_t) ((int32_t) ((uint32_t)(((uint32_t)reg_data[2] << 16) | ((uint16_t)reg_data[1] << 8) | reg_data[0]) << 8) >> 8);
 8001fb6:	7dbb      	ldrb	r3, [r7, #22]
 8001fb8:	041a      	lsls	r2, r3, #16
 8001fba:	7d7b      	ldrb	r3, [r7, #21]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	7d3a      	ldrb	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	121b      	asrs	r3, r3, #8
 8001fc8:	623b      	str	r3, [r7, #32]
        sensor_data->temperature =
            (int64_t)((raw_data_t / (float)65536.0) * (power(10, BMP5_FIXED_POINT_DIGIT_PRECISION)));
#else

        /* Division by 2^16(whose equivalent value is 65536) is performed to get temperature data in deg C */
        sensor_data->temperature = (float)(raw_data_t / 65536.0);
 8001fca:	6a38      	ldr	r0, [r7, #32]
 8001fcc:	f7fe faca 	bl	8000564 <__aeabi_i2d>
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <bmp5_get_sensor_data+0xbc>)
 8001fd6:	f7fe fc59 	bl	800088c <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7fe fe21 	bl	8000c28 <__aeabi_d2f>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	605a      	str	r2, [r3, #4]
#endif

        if (osr_odr_press_cfg->press_en == BMP5_ENABLE)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	789b      	ldrb	r3, [r3, #2]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d11a      	bne.n	800202a <bmp5_get_sensor_data+0xa6>
        {
            raw_data_p = (uint32_t)((uint32_t)(reg_data[5] << 16) | (uint16_t)(reg_data[4] << 8) | reg_data[3]);
 8001ff4:	7e7b      	ldrb	r3, [r7, #25]
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	7e3a      	ldrb	r2, [r7, #24]
 8001ffa:	0212      	lsls	r2, r2, #8
 8001ffc:	b292      	uxth	r2, r2
 8001ffe:	4313      	orrs	r3, r2
 8002000:	7dfa      	ldrb	r2, [r7, #23]
 8002002:	4313      	orrs	r3, r2
 8002004:	61fb      	str	r3, [r7, #28]
            sensor_data->pressure =
                (uint64_t)((raw_data_p / (float)64.0) * (power(10, BMP5_FIXED_POINT_DIGIT_PRECISION)));
#else

            /* Division by 2^6(whose equivalent value is 64) is performed to get pressure data in Pa */
            sensor_data->pressure = (float)(raw_data_p / 64.0);
 8002006:	69f8      	ldr	r0, [r7, #28]
 8002008:	f7fe fa9c 	bl	8000544 <__aeabi_ui2d>
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <bmp5_get_sensor_data+0xc0>)
 8002012:	f7fe fc3b 	bl	800088c <__aeabi_ddiv>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fe03 	bl	8000c28 <__aeabi_d2f>
 8002022:	4602      	mov	r2, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e003      	b.n	8002032 <bmp5_get_sensor_data+0xae>
#endif
        }
        else
        {
            sensor_data->pressure = 0.0;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
        }
    }

    return rslt;
 8002032:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002036:	4618      	mov	r0, r3
 8002038:	3728      	adds	r7, #40	@ 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40f00000 	.word	0x40f00000
 8002044:	40500000 	.word	0x40500000

08002048 <bmp5_int_source_select>:
/*!
 *  @brief This API is used to enable the interrupts(drdy interrupt, fifo full interrupt,
 *   fifo threshold enable and pressure data out of range interrupt).
 */
int8_t bmp5_int_source_select(const struct bmp5_int_source_select *int_source_select, struct bmp5_dev *dev)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    if (int_source_select != NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d058      	beq.n	800210a <bmp5_int_source_select+0xc2>
    {
        rslt = bmp5_get_regs(BMP5_REG_INT_SOURCE, &reg_data, 1, dev);
 8002058:	f107 010e 	add.w	r1, r7, #14
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2201      	movs	r2, #1
 8002060:	2015      	movs	r0, #21
 8002062:	f7ff fe0a 	bl	8001c7a <bmp5_get_regs>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d14d      	bne.n	800210e <bmp5_int_source_select+0xc6>
        {
            reg_data = BMP5_SET_BITS_POS_0(reg_data, BMP5_INT_DRDY_EN, int_source_select->drdy_en);
 8002072:	7bbb      	ldrb	r3, [r7, #14]
 8002074:	b25b      	sxtb	r3, r3
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	b25a      	sxtb	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b25b      	sxtb	r3, r3
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	b25b      	sxtb	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b25b      	sxtb	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	73bb      	strb	r3, [r7, #14]

            reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_FIFO_FULL_EN, int_source_select->fifo_full_en);
 8002090:	7bbb      	ldrb	r3, [r7, #14]
 8002092:	b25b      	sxtb	r3, r3
 8002094:	f023 0302 	bic.w	r3, r3, #2
 8002098:	b25a      	sxtb	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	785b      	ldrb	r3, [r3, #1]
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	b25b      	sxtb	r3, r3
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	73bb      	strb	r3, [r7, #14]

            reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_FIFO_THRES_EN, int_source_select->fifo_thres_en);
 80020b2:	7bbb      	ldrb	r3, [r7, #14]
 80020b4:	b25b      	sxtb	r3, r3
 80020b6:	f023 0304 	bic.w	r3, r3, #4
 80020ba:	b25a      	sxtb	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	789b      	ldrb	r3, [r3, #2]
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	b25b      	sxtb	r3, r3
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b25b      	sxtb	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	73bb      	strb	r3, [r7, #14]

            reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_OOR_PRESS_EN, int_source_select->oor_press_en);
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	b25b      	sxtb	r3, r3
 80020d8:	f023 0308 	bic.w	r3, r3, #8
 80020dc:	b25a      	sxtb	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	78db      	ldrb	r3, [r3, #3]
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	b25b      	sxtb	r3, r3
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	b25b      	sxtb	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	73bb      	strb	r3, [r7, #14]

            rslt = bmp5_set_regs(BMP5_REG_INT_SOURCE, &reg_data, 1, dev);
 80020f6:	f107 010e 	add.w	r1, r7, #14
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	2015      	movs	r0, #21
 8002100:	f7ff fdeb 	bl	8001cda <bmp5_set_regs>
 8002104:	4603      	mov	r3, r0
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e001      	b.n	800210e <bmp5_int_source_select+0xc6>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800210a:	23ff      	movs	r3, #255	@ 0xff
 800210c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <bmp5_configure_interrupt>:
int8_t bmp5_configure_interrupt(enum bmp5_intr_mode int_mode,
                                enum bmp5_intr_polarity int_pol,
                                enum bmp5_intr_drive int_od,
                                enum bmp5_intr_en_dis int_en,
                                struct bmp5_dev *dev)
{
 800211a:	b590      	push	{r4, r7, lr}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	4604      	mov	r4, r0
 8002122:	4608      	mov	r0, r1
 8002124:	4611      	mov	r1, r2
 8002126:	461a      	mov	r2, r3
 8002128:	4623      	mov	r3, r4
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	4603      	mov	r3, r0
 800212e:	71bb      	strb	r3, [r7, #6]
 8002130:	460b      	mov	r3, r1
 8002132:	717b      	strb	r3, [r7, #5]
 8002134:	4613      	mov	r3, r2
 8002136:	713b      	strb	r3, [r7, #4]
    /* Variable to store the function result */
    int8_t rslt;

    /* Variable to get interrupt configuration */
    uint8_t reg_data = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	73bb      	strb	r3, [r7, #14]

    /* Variable to set interrupt source */
    uint8_t int_source = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	737b      	strb	r3, [r7, #13]

    /* Variable to get interrupt status */
    uint8_t int_status = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	733b      	strb	r3, [r7, #12]

    /* Get interrupt configuration */
    rslt = bmp5_get_regs(BMP5_REG_INT_CONFIG, &reg_data, 1, dev);
 8002144:	f107 010e 	add.w	r1, r7, #14
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	2201      	movs	r2, #1
 800214c:	2014      	movs	r0, #20
 800214e:	f7ff fd94 	bl	8001c7a <bmp5_get_regs>
 8002152:	4603      	mov	r3, r0
 8002154:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d160      	bne.n	8002220 <bmp5_configure_interrupt+0x106>
    {
        /* Any change between latched/pulsed mode has to be applied while interrupt is disabled */
        /* Step 1 : Turn off all INT sources (INT_SOURCE -> 0x00) */
        rslt = bmp5_set_regs(BMP5_REG_INT_SOURCE, &int_source, 1, dev);
 800215e:	f107 010d 	add.w	r1, r7, #13
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	2201      	movs	r2, #1
 8002166:	2015      	movs	r0, #21
 8002168:	f7ff fdb7 	bl	8001cda <bmp5_set_regs>
 800216c:	4603      	mov	r3, r0
 800216e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 8002170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d153      	bne.n	8002220 <bmp5_configure_interrupt+0x106>
        {
            /* Step 2 : Read the INT_STATUS register to clear the status */
            rslt = bmp5_get_regs(BMP5_REG_INT_STATUS, &int_status, 1, dev);
 8002178:	f107 010c 	add.w	r1, r7, #12
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	2201      	movs	r2, #1
 8002180:	201d      	movs	r0, #29
 8002182:	f7ff fd7a 	bl	8001c7a <bmp5_get_regs>
 8002186:	4603      	mov	r3, r0
 8002188:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 800218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d146      	bne.n	8002220 <bmp5_configure_interrupt+0x106>
            {
                /* Step 3 : Set the desired mode in INT_CONFIG.int_mode */
                reg_data = BMP5_SET_BITS_POS_0(reg_data, BMP5_INT_MODE, int_mode);
 8002192:	7bbb      	ldrb	r3, [r7, #14]
 8002194:	b25b      	sxtb	r3, r3
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	b25a      	sxtb	r2, r3
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	b25b      	sxtb	r3, r3
 80021a6:	4313      	orrs	r3, r2
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	73bb      	strb	r3, [r7, #14]
                reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_POL, int_pol);
 80021ae:	7bbb      	ldrb	r3, [r7, #14]
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	f023 0302 	bic.w	r3, r3, #2
 80021b6:	b25a      	sxtb	r2, r3
 80021b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	73bb      	strb	r3, [r7, #14]
                reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_OD, int_od);
 80021ce:	7bbb      	ldrb	r3, [r7, #14]
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	f023 0304 	bic.w	r3, r3, #4
 80021d6:	b25a      	sxtb	r2, r3
 80021d8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	b25b      	sxtb	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b25b      	sxtb	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	73bb      	strb	r3, [r7, #14]
                reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_EN, int_en);
 80021ee:	7bbb      	ldrb	r3, [r7, #14]
 80021f0:	b25b      	sxtb	r3, r3
 80021f2:	f023 0308 	bic.w	r3, r3, #8
 80021f6:	b25a      	sxtb	r2, r3
 80021f8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	b25b      	sxtb	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b25b      	sxtb	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	73bb      	strb	r3, [r7, #14]

                /* Finally transfer the interrupt configurations */
                rslt = bmp5_set_regs(BMP5_REG_INT_CONFIG, &reg_data, 1, dev);
 800220e:	f107 010e 	add.w	r1, r7, #14
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	2201      	movs	r2, #1
 8002216:	2014      	movs	r0, #20
 8002218:	f7ff fd5f 	bl	8001cda <bmp5_set_regs>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002220:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bd90      	pop	{r4, r7, pc}

0800222c <bmp5_get_osr_odr_press_config>:
/*!
 *  @brief This API gets the configuration for oversampling of temperature, oversampling of
 *  pressure and ODR configuration along with pressure enable.
 */
int8_t bmp5_get_osr_odr_press_config(struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store OSR and ODR config */
    uint8_t reg_data[2];

    if (osr_odr_press_cfg != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d02b      	beq.n	8002294 <bmp5_get_osr_odr_press_config+0x68>
    {
        /* Get OSR and ODR configuration in burst read */
        rslt = bmp5_get_regs(BMP5_REG_OSR_CONFIG, reg_data, 2, dev);
 800223c:	f107 010c 	add.w	r1, r7, #12
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2202      	movs	r2, #2
 8002244:	2036      	movs	r0, #54	@ 0x36
 8002246:	f7ff fd18 	bl	8001c7a <bmp5_get_regs>
 800224a:	4603      	mov	r3, r0
 800224c:	73fb      	strb	r3, [r7, #15]
        //BMP5_REG_OSR_CONFIG adresinden başla ve 2 bayt oku.
        //Bu iki bayt içinde hem OSR hem ODR ayarları bulunur.

        if (rslt == BMP5_OK)
 800224e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d120      	bne.n	8002298 <bmp5_get_osr_odr_press_config+0x6c>
        {
            //Bitleri parçala ve yapı içine doldur:
            osr_odr_press_cfg->osr_t = BMP5_GET_BITS_POS_0(reg_data[0], BMP5_TEMP_OS);
 8002256:	7b3b      	ldrb	r3, [r7, #12]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	b2da      	uxtb	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	701a      	strb	r2, [r3, #0]
            osr_odr_press_cfg->osr_p = BMP5_GET_BITSLICE(reg_data[0], BMP5_PRESS_OS);
 8002262:	7b3b      	ldrb	r3, [r7, #12]
 8002264:	10db      	asrs	r3, r3, #3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	b2da      	uxtb	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	705a      	strb	r2, [r3, #1]
            osr_odr_press_cfg->press_en = BMP5_GET_BITSLICE(reg_data[0], BMP5_PRESS_EN);
 8002272:	7b3b      	ldrb	r3, [r7, #12]
 8002274:	119b      	asrs	r3, r3, #6
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	b2da      	uxtb	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	709a      	strb	r2, [r3, #2]
            osr_odr_press_cfg->odr = BMP5_GET_BITSLICE(reg_data[1], BMP5_ODR);
 8002282:	7b7b      	ldrb	r3, [r7, #13]
 8002284:	109b      	asrs	r3, r3, #2
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	b2da      	uxtb	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	70da      	strb	r2, [r3, #3]
 8002292:	e001      	b.n	8002298 <bmp5_get_osr_odr_press_config+0x6c>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8002294:	23ff      	movs	r3, #255	@ 0xff
 8002296:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002298:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <bmp5_set_osr_odr_press_config>:
 *
 *  @note If ODR is set to a value higher than 5Hz then powermode is set as standby mode, as ODR value greater than 5HZ
 *  without disabling deep-standby mode makes powermode invalid.
 */
int8_t bmp5_set_osr_odr_press_config(const struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
    /* Variable to store the function result */
    int8_t rslt = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]

    /* Variable to set ODR and OSR config */
    uint8_t reg_data[2] = { 0 };
 80022b2:	2300      	movs	r3, #0
 80022b4:	81bb      	strh	r3, [r7, #12]

    if (osr_odr_press_cfg != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d065      	beq.n	8002388 <bmp5_set_osr_odr_press_config+0xe4>
        /* If ODR is set to a value higher than 5Hz then powermode is set as standby mode, as ODR value greater than 5HZ
         * without disabling deep-standby mode makes powermode invalid.
         * NOTE: Register value for 5Hz is greater compared to ODRs higher than it. Thus in this below condition odr
         * is checked whether less than 5Hz macro.
         */
        if (osr_odr_press_cfg->odr < BMP5_ODR_05_HZ)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	78db      	ldrb	r3, [r3, #3]
 80022c0:	2b17      	cmp	r3, #23
 80022c2:	d804      	bhi.n	80022ce <bmp5_set_osr_odr_press_config+0x2a>
        {
            rslt = set_standby_mode(dev);
 80022c4:	6838      	ldr	r0, [r7, #0]
 80022c6:	f000 fa5f 	bl	8002788 <set_standby_mode>
 80022ca:	4603      	mov	r3, r0
 80022cc:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMP5_OK)
 80022ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d15a      	bne.n	800238c <bmp5_set_osr_odr_press_config+0xe8>
        {
            rslt = bmp5_get_regs(BMP5_REG_OSR_CONFIG, reg_data, 2, dev);
 80022d6:	f107 010c 	add.w	r1, r7, #12
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2202      	movs	r2, #2
 80022de:	2036      	movs	r0, #54	@ 0x36
 80022e0:	f7ff fccb 	bl	8001c7a <bmp5_get_regs>
 80022e4:	4603      	mov	r3, r0
 80022e6:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 80022e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d14d      	bne.n	800238c <bmp5_set_osr_odr_press_config+0xe8>
            {
                reg_data[0] = BMP5_SET_BITS_POS_0(reg_data[0], BMP5_TEMP_OS, osr_odr_press_cfg->osr_t);
 80022f0:	7b3b      	ldrb	r3, [r7, #12]
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	f023 0307 	bic.w	r3, r3, #7
 80022f8:	b25a      	sxtb	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b25b      	sxtb	r3, r3
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	b25b      	sxtb	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	b25b      	sxtb	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	733b      	strb	r3, [r7, #12]
                reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_PRESS_OS, osr_odr_press_cfg->osr_p);
 800230e:	7b3b      	ldrb	r3, [r7, #12]
 8002310:	b25b      	sxtb	r3, r3
 8002312:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002316:	b25a      	sxtb	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	785b      	ldrb	r3, [r3, #1]
 800231c:	b25b      	sxtb	r3, r3
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	b25b      	sxtb	r3, r3
 8002322:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002326:	b25b      	sxtb	r3, r3
 8002328:	4313      	orrs	r3, r2
 800232a:	b25b      	sxtb	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	733b      	strb	r3, [r7, #12]
                reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_PRESS_EN, osr_odr_press_cfg->press_en);
 8002330:	7b3b      	ldrb	r3, [r7, #12]
 8002332:	b25b      	sxtb	r3, r3
 8002334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002338:	b25a      	sxtb	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	789b      	ldrb	r3, [r3, #2]
 800233e:	b25b      	sxtb	r3, r3
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	b25b      	sxtb	r3, r3
 8002344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002348:	b25b      	sxtb	r3, r3
 800234a:	4313      	orrs	r3, r2
 800234c:	b25b      	sxtb	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	733b      	strb	r3, [r7, #12]
                reg_data[1] = BMP5_SET_BITSLICE(reg_data[1], BMP5_ODR, osr_odr_press_cfg->odr);
 8002352:	7b7b      	ldrb	r3, [r7, #13]
 8002354:	b25b      	sxtb	r3, r3
 8002356:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 800235a:	b25a      	sxtb	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	78db      	ldrb	r3, [r3, #3]
 8002360:	b25b      	sxtb	r3, r3
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	b25b      	sxtb	r3, r3
 8002366:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800236a:	b25b      	sxtb	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b25b      	sxtb	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	737b      	strb	r3, [r7, #13]

                /* Set ODR and OSR configuration */
                rslt = bmp5_set_regs(BMP5_REG_OSR_CONFIG, reg_data, 2, dev);
 8002374:	f107 010c 	add.w	r1, r7, #12
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2202      	movs	r2, #2
 800237c:	2036      	movs	r0, #54	@ 0x36
 800237e:	f7ff fcac 	bl	8001cda <bmp5_set_regs>
 8002382:	4603      	mov	r3, r0
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e001      	b.n	800238c <bmp5_set_osr_odr_press_config+0xe8>
            }
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8002388:	23ff      	movs	r3, #255	@ 0xff
 800238a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800238c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <bmp5_get_iir_config>:

/*!
 *  @brief This API gets the configuration for IIR of temperature and pressure.
 */
int8_t bmp5_get_iir_config(struct bmp5_iir_config *iir_cfg, struct bmp5_dev *dev)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to get IIR config */
    uint8_t reg_data[2];

    if (iir_cfg != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d02f      	beq.n	8002408 <bmp5_get_iir_config+0x70>
    {
        /* Get IIR configuration */
        rslt = bmp5_get_regs(BMP5_REG_DSP_CONFIG, reg_data, 2, dev);
 80023a8:	f107 010c 	add.w	r1, r7, #12
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2202      	movs	r2, #2
 80023b0:	2030      	movs	r0, #48	@ 0x30
 80023b2:	f7ff fc62 	bl	8001c7a <bmp5_get_regs>
 80023b6:	4603      	mov	r3, r0
 80023b8:	73fb      	strb	r3, [r7, #15]

        iir_cfg->shdw_set_iir_t = BMP5_GET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_TEMP);
 80023ba:	7b3b      	ldrb	r3, [r7, #12]
 80023bc:	10db      	asrs	r3, r3, #3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	709a      	strb	r2, [r3, #2]
        iir_cfg->shdw_set_iir_p = BMP5_GET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_PRESS);
 80023ca:	7b3b      	ldrb	r3, [r7, #12]
 80023cc:	115b      	asrs	r3, r3, #5
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	70da      	strb	r2, [r3, #3]
        iir_cfg->iir_flush_forced_en = BMP5_GET_BITSLICE(reg_data[0], BMP5_IIR_FLUSH_FORCED_EN);
 80023da:	7b3b      	ldrb	r3, [r7, #12]
 80023dc:	109b      	asrs	r3, r3, #2
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	711a      	strb	r2, [r3, #4]

        iir_cfg->set_iir_t = BMP5_GET_BITS_POS_0(reg_data[1], BMP5_SET_IIR_TEMP);
 80023ea:	7b7b      	ldrb	r3, [r7, #13]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	701a      	strb	r2, [r3, #0]
        iir_cfg->set_iir_p = BMP5_GET_BITSLICE(reg_data[1], BMP5_SET_IIR_PRESS);
 80023f6:	7b7b      	ldrb	r3, [r7, #13]
 80023f8:	10db      	asrs	r3, r3, #3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	b2da      	uxtb	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	705a      	strb	r2, [r3, #1]
 8002406:	e001      	b.n	800240c <bmp5_get_iir_config+0x74>
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8002408:	23ff      	movs	r3, #255	@ 0xff
 800240a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800240c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <bmp5_set_iir_config>:
 *
 *  @note If IIR value for both temperature and pressure is set a value other than bypass then powermode is set
 *  as standby mode, as IIR with value other than bypass without disabling deep-standby mode makes powermode invalid.
 */
int8_t bmp5_set_iir_config(const struct bmp5_iir_config *iir_cfg, struct bmp5_dev *dev)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
    /* Variable to store the function result */
    int8_t rslt = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]

    /* Variable to store existing powermode */
    enum bmp5_powermode curr_pwrmode;

    if (iir_cfg != NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d041      	beq.n	80024b0 <bmp5_set_iir_config+0x98>
    {
        /* If IIR value for both temperature and pressure is set a value other than bypass then powermode is set
         * as standby mode, as IIR with value other than bypass without disabling deep-standby mode makes powermode
         * invalid.
         */
        if ((iir_cfg->set_iir_t != BMP5_IIR_FILTER_BYPASS) || (iir_cfg->set_iir_p != BMP5_IIR_FILTER_BYPASS))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <bmp5_set_iir_config+0x24>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	785b      	ldrb	r3, [r3, #1]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d004      	beq.n	8002446 <bmp5_set_iir_config+0x2e>
        {
            rslt = set_standby_mode(dev);
 800243c:	6838      	ldr	r0, [r7, #0]
 800243e:	f000 f9a3 	bl	8002788 <set_standby_mode>
 8002442:	4603      	mov	r3, r0
 8002444:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMP5_OK)
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d132      	bne.n	80024b4 <bmp5_set_iir_config+0x9c>
        {
            rslt = bmp5_get_power_mode(&curr_pwrmode, dev);
 800244e:	f107 030e 	add.w	r3, r7, #14
 8002452:	6839      	ldr	r1, [r7, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fcf9 	bl	8001e4c <bmp5_get_power_mode>
 800245a:	4603      	mov	r3, r0
 800245c:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d126      	bne.n	80024b4 <bmp5_set_iir_config+0x9c>
            {
                /* IIR configuration is writable only during STANDBY mode(as per datasheet) */
                if (curr_pwrmode != BMP5_POWERMODE_STANDBY)
 8002466:	7bbb      	ldrb	r3, [r7, #14]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <bmp5_set_iir_config+0x60>
                {
                    /* If sensor is not in standby mode, set sensor in standby mode */
                    rslt = bmp5_set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 800246c:	6839      	ldr	r1, [r7, #0]
 800246e:	2000      	movs	r0, #0
 8002470:	f7ff fd3c 	bl	8001eec <bmp5_set_power_mode>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]
                }

                if (rslt == BMP5_OK)
 8002478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <bmp5_set_iir_config+0x74>
                {
                    rslt = set_iir_config(iir_cfg, dev);
 8002480:	6839      	ldr	r1, [r7, #0]
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f99f 	bl	80027c6 <set_iir_config>
 8002488:	4603      	mov	r3, r0
 800248a:	73fb      	strb	r3, [r7, #15]
                }

                /* If previous mode is not standbymode return sensor to that previous mode
                * after setting iir configuration
                */
                if (rslt == BMP5_OK)
 800248c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10f      	bne.n	80024b4 <bmp5_set_iir_config+0x9c>
                {
                    /* Since IIR works only in standby mode we are not re-writing to deepstandby mode
                    * as deep standby mode resets the IIR settings to default
                    */
                    if ((curr_pwrmode != BMP5_POWERMODE_STANDBY) && (curr_pwrmode != BMP5_POWERMODE_DEEP_STANDBY))
 8002494:	7bbb      	ldrb	r3, [r7, #14]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00c      	beq.n	80024b4 <bmp5_set_iir_config+0x9c>
 800249a:	7bbb      	ldrb	r3, [r7, #14]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d009      	beq.n	80024b4 <bmp5_set_iir_config+0x9c>
                    {
                        rslt = bmp5_set_power_mode(curr_pwrmode, dev);
 80024a0:	7bbb      	ldrb	r3, [r7, #14]
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fd21 	bl	8001eec <bmp5_set_power_mode>
 80024aa:	4603      	mov	r3, r0
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e001      	b.n	80024b4 <bmp5_set_iir_config+0x9c>
            }
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 80024b0:	23ff      	movs	r3, #255	@ 0xff
 80024b2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80024b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp5_dev *dev)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
    //dev yapısı ve içindeki fonksiyonların atanmış (null olmayan) olup olmadığını kontrol eder
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <null_ptr_check+0x26>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <null_ptr_check+0x26>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <null_ptr_check+0x26>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d102      	bne.n	80024ec <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BMP5_E_NULL_PTR;
 80024e6:	23ff      	movs	r3, #255	@ 0xff
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e001      	b.n	80024f0 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP5_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80024f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <validate_chip_id>:

/*!
 * @brief This internal API is used to validate the chip id of the sensor.
 */
static int8_t validate_chip_id(uint8_t chip_id, struct bmp5_dev *dev)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    if ((chip_id == BMP5_CHIP_ID_PRIM) || (chip_id == BMP5_CHIP_ID_SEC))
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b50      	cmp	r3, #80	@ 0x50
 8002510:	d002      	beq.n	8002518 <validate_chip_id+0x18>
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	2b51      	cmp	r3, #81	@ 0x51
 8002516:	d105      	bne.n	8002524 <validate_chip_id+0x24>
    {
        /* Updating chip_id in device structure */
        dev->chip_id = chip_id;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	79fa      	ldrb	r2, [r7, #7]
 800251c:	701a      	strb	r2, [r3, #0]
        rslt = BMP5_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	e001      	b.n	8002528 <validate_chip_id+0x28>
    }
    else
    {
        rslt = BMP5_E_DEV_NOT_FOUND;
 8002524:	23fd      	movs	r3, #253	@ 0xfd
 8002526:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <power_up_check>:
/*!
 * @brief This internal API is used to validate the post power-up procedure.
 */

static int8_t power_up_check(struct bmp5_dev *dev)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t nvm_status;
    uint8_t por_status;

    bmp5_soft_reset(dev); //Sensör yazılımsal olarak resetleniyor.
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fc26 	bl	8001d92 <bmp5_soft_reset>
    HAL_Delay(10);
 8002546:	200a      	movs	r0, #10
 8002548:	f001 fdf4 	bl	8004134 <HAL_Delay>

    rslt = get_nvm_status(&nvm_status, dev); //Sensör içindeki NVM (kalıcı bellek) hazır mı?
 800254c:	f107 030e 	add.w	r3, r7, #14
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f99f 	bl	8002896 <get_nvm_status>
 8002558:	4603      	mov	r3, r0
 800255a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 800255c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d122      	bne.n	80025aa <power_up_check+0x72>
    {
        /* Check if nvm_rdy status = 1 and nvm_err status = 0 to proceed */
        if ((nvm_status & BMP5_INT_NVM_RDY) && (!(nvm_status & BMP5_INT_NVM_ERR)))
 8002564:	7bbb      	ldrb	r3, [r7, #14]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d01b      	beq.n	80025a6 <power_up_check+0x6e>
 800256e:	7bbb      	ldrb	r3, [r7, #14]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d116      	bne.n	80025a6 <power_up_check+0x6e>
        {
            rslt = bmp5_get_interrupt_status(&por_status, dev); //Bu, sensörün "açılış/reset işlemi tamamlandı mı?" bilgisini alır.
 8002578:	f107 030d 	add.w	r3, r7, #13
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fc4a 	bl	8001e18 <bmp5_get_interrupt_status>
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]
            //POR (Power-On Reset) durumu kontrol edilir
            if (rslt == BMP5_OK)
 8002588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10c      	bne.n	80025aa <power_up_check+0x72>
            {
                /* Check if por/soft-reset complete status = 1 to proceed */
                //POR( bir cihazın ilk defa enerji verildiğinde kendini resetlemesi anlamına gelir.) tamamlanmış mı?
                if (por_status & BMP5_INT_ASSERTED_POR_SOFTRESET_COMPLETE)
 8002590:	7b7b      	ldrb	r3, [r7, #13]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <power_up_check+0x68>
                {
                    rslt = BMP5_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP5_OK)
 800259e:	e004      	b.n	80025aa <power_up_check+0x72>
                }
                else
                {
                    rslt = BMP5_E_POWER_UP;
 80025a0:	23fb      	movs	r3, #251	@ 0xfb
 80025a2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP5_OK)
 80025a4:	e001      	b.n	80025aa <power_up_check+0x72>
                }
            }
        }
        else
        {
            rslt = BMP5_E_POWER_UP;
 80025a6:	23fb      	movs	r3, #251	@ 0xfb
 80025a8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <check_deepstandby_mode>:

/*!
 * @brief This internal API is used to check if sensor is in deepstandby mode.
 */
static int8_t check_deepstandby_mode(enum bmp5_powermode *powermode, struct bmp5_dev *dev)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t fifo_frame_sel;
    struct bmp5_iir_config iir_cfg = { 0 };
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	711a      	strb	r2, [r3, #4]
    struct bmp5_osr_odr_press_config osr_odr_press_cfg = { 0 };
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]

    rslt = bmp5_get_regs(BMP5_REG_FIFO_SEL, &fifo_frame_sel, 1, dev);
 80025ce:	f107 0116 	add.w	r1, r7, #22
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	2018      	movs	r0, #24
 80025d8:	f7ff fb4f 	bl	8001c7a <bmp5_get_regs>
 80025dc:	4603      	mov	r3, r0
 80025de:	75fb      	strb	r3, [r7, #23]
    fifo_frame_sel = BMP5_GET_BITS_POS_0(fifo_frame_sel, BMP5_FIFO_FRAME_SEL);
 80025e0:	7dbb      	ldrb	r3, [r7, #22]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	75bb      	strb	r3, [r7, #22]

    if (rslt == BMP5_OK)
 80025ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d113      	bne.n	800261a <check_deepstandby_mode+0x64>
    {
        rslt = bmp5_get_osr_odr_press_config(&osr_odr_press_cfg, dev);
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	6839      	ldr	r1, [r7, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fe17 	bl	800222c <bmp5_get_osr_odr_press_config>
 80025fe:	4603      	mov	r3, r0
 8002600:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP5_OK)
 8002602:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d107      	bne.n	800261a <check_deepstandby_mode+0x64>
        {
            rslt = bmp5_get_iir_config(&iir_cfg, dev);
 800260a:	f107 0310 	add.w	r3, r7, #16
 800260e:	6839      	ldr	r1, [r7, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fec1 	bl	8002398 <bmp5_get_iir_config>
 8002616:	4603      	mov	r3, r0
 8002618:	75fb      	strb	r3, [r7, #23]
    }

    /* As per datasheet odr should be less than 5Hz. But register value for 5Hz is less than 4Hz and so,
     * thus in this below condition odr is checked whether greater than 5Hz macro.
     */
    if ((osr_odr_press_cfg.odr > BMP5_ODR_05_HZ) && (fifo_frame_sel == BMP5_DISABLE) &&
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b18      	cmp	r3, #24
 800261e:	d90b      	bls.n	8002638 <check_deepstandby_mode+0x82>
 8002620:	7dbb      	ldrb	r3, [r7, #22]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d108      	bne.n	8002638 <check_deepstandby_mode+0x82>
        (iir_cfg.set_iir_t == BMP5_IIR_FILTER_BYPASS) && (iir_cfg.set_iir_p == BMP5_IIR_FILTER_BYPASS))
 8002626:	7c3b      	ldrb	r3, [r7, #16]
    if ((osr_odr_press_cfg.odr > BMP5_ODR_05_HZ) && (fifo_frame_sel == BMP5_DISABLE) &&
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <check_deepstandby_mode+0x82>
        (iir_cfg.set_iir_t == BMP5_IIR_FILTER_BYPASS) && (iir_cfg.set_iir_p == BMP5_IIR_FILTER_BYPASS))
 800262c:	7c7b      	ldrb	r3, [r7, #17]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <check_deepstandby_mode+0x82>
    {
        *powermode = BMP5_POWERMODE_DEEP_STANDBY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2204      	movs	r2, #4
 8002636:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002638:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <set_deep_standby_mode>:

/*!
 * @brief This internal API is used to set sensor in deep standby mode.
 */
static int8_t set_deep_standby_mode(struct bmp5_dev *dev)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp5_get_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 800264c:	f107 010e 	add.w	r1, r7, #14
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	2037      	movs	r0, #55	@ 0x37
 8002656:	f7ff fb10 	bl	8001c7a <bmp5_get_regs>
 800265a:	4603      	mov	r3, r0
 800265c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 800265e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d155      	bne.n	8002712 <set_deep_standby_mode+0xce>
    {
        /* Setting deep_dis = 0(BMP5_DEEP_ENABLED) enables the deep standby mode */
        reg_data = BMP5_SET_BIT_VAL_0(reg_data, BMP5_DEEP_DISABLE);
 8002666:	7bbb      	ldrb	r3, [r7, #14]
 8002668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800266c:	b2db      	uxtb	r3, r3
 800266e:	73bb      	strb	r3, [r7, #14]

        /* Set ODR less then 5Hz - ODR used is 1Hz */
        reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_ODR, BMP5_ODR_01_HZ);
 8002670:	7bbb      	ldrb	r3, [r7, #14]
 8002672:	b25b      	sxtb	r3, r3
 8002674:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8002678:	b25b      	sxtb	r3, r3
 800267a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800267e:	b25b      	sxtb	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	73bb      	strb	r3, [r7, #14]

        /* Write the value to the odr config register(0x37) */
        rslt = bmp5_set_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 8002684:	f107 010e 	add.w	r1, r7, #14
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	2037      	movs	r0, #55	@ 0x37
 800268e:	f7ff fb24 	bl	8001cda <bmp5_set_regs>
 8002692:	4603      	mov	r3, r0
 8002694:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 8002696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11a      	bne.n	80026d4 <set_deep_standby_mode+0x90>
        {
            rslt = bmp5_get_regs(BMP5_REG_DSP_IIR, &reg_data, 1, dev);
 800269e:	f107 010e 	add.w	r1, r7, #14
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	2031      	movs	r0, #49	@ 0x31
 80026a8:	f7ff fae7 	bl	8001c7a <bmp5_get_regs>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 80026b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10d      	bne.n	80026d4 <set_deep_standby_mode+0x90>
                /* Set iir_t and iir_p as Bypass(0x00) */

                /* The register holds only iir_t and iir_p and the last 2 bits are reserved.
                 * Thus using the macro BMP5_IIR_BYPASS(0xC0) the register value is set as zero.
                 */
                reg_data = reg_data & BMP5_IIR_BYPASS;
 80026b8:	7bbb      	ldrb	r3, [r7, #14]
 80026ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	73bb      	strb	r3, [r7, #14]

                /* Write the value to the IIR register(0x31) */
                rslt = bmp5_set_regs(BMP5_REG_DSP_IIR, &reg_data, 1, dev);
 80026c2:	f107 010e 	add.w	r1, r7, #14
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	2031      	movs	r0, #49	@ 0x31
 80026cc:	f7ff fb05 	bl	8001cda <bmp5_set_regs>
 80026d0:	4603      	mov	r3, r0
 80026d2:	73fb      	strb	r3, [r7, #15]
            }
        }

        if (rslt == BMP5_OK)
 80026d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d11a      	bne.n	8002712 <set_deep_standby_mode+0xce>
        {
            rslt = bmp5_get_regs(BMP5_REG_FIFO_SEL, &reg_data, 1, dev);
 80026dc:	f107 010e 	add.w	r1, r7, #14
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	2018      	movs	r0, #24
 80026e6:	f7ff fac8 	bl	8001c7a <bmp5_get_regs>
 80026ea:	4603      	mov	r3, r0
 80026ec:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10d      	bne.n	8002712 <set_deep_standby_mode+0xce>
            {
                /* Disable fifo frame selct */
                reg_data = BMP5_SET_BIT_VAL_0(reg_data, BMP5_FIFO_FRAME_SEL);
 80026f6:	7bbb      	ldrb	r3, [r7, #14]
 80026f8:	f023 0303 	bic.w	r3, r3, #3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	73bb      	strb	r3, [r7, #14]

                /* Write the value to the fifo select register(0x18) */
                rslt = bmp5_set_regs(BMP5_REG_FIFO_SEL, &reg_data, 1, dev);
 8002700:	f107 010e 	add.w	r1, r7, #14
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	2018      	movs	r0, #24
 800270a:	f7ff fae6 	bl	8001cda <bmp5_set_regs>
 800270e:	4603      	mov	r3, r0
 8002710:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002712:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <set_power_mode>:

/*!
 * @brief This internal API is used to set sensor in standby or normal or forced or continous powermode.
 */
static int8_t set_power_mode(enum bmp5_powermode powermode, struct bmp5_dev *dev)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	6039      	str	r1, [r7, #0]
 8002728:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp5_get_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 800272a:	f107 010e 	add.w	r1, r7, #14
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2201      	movs	r2, #1
 8002732:	2037      	movs	r0, #55	@ 0x37
 8002734:	f7ff faa1 	bl	8001c7a <bmp5_get_regs>
 8002738:	4603      	mov	r3, r0
 800273a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 800273c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d11b      	bne.n	800277c <set_power_mode+0x5e>
    {
        /* Setting deep_dis = 1(BMP5_DEEP_DISABLED) disables the deep standby mode */
        reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_DEEP_DISABLE, BMP5_DEEP_DISABLED);
 8002744:	7bbb      	ldrb	r3, [r7, #14]
 8002746:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800274a:	b2db      	uxtb	r3, r3
 800274c:	73bb      	strb	r3, [r7, #14]

        reg_data = BMP5_SET_BITS_POS_0(reg_data, BMP5_POWERMODE, powermode);
 800274e:	7bbb      	ldrb	r3, [r7, #14]
 8002750:	b25b      	sxtb	r3, r3
 8002752:	f023 0303 	bic.w	r3, r3, #3
 8002756:	b25a      	sxtb	r2, r3
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	b25b      	sxtb	r3, r3
 8002762:	4313      	orrs	r3, r2
 8002764:	b25b      	sxtb	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	73bb      	strb	r3, [r7, #14]

        rslt = bmp5_set_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 800276a:	f107 010e 	add.w	r1, r7, #14
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2201      	movs	r2, #1
 8002772:	2037      	movs	r0, #55	@ 0x37
 8002774:	f7ff fab1 	bl	8001cda <bmp5_set_regs>
 8002778:	4603      	mov	r3, r0
 800277a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800277c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <set_standby_mode>:

/*!
 * @brief This internal API is used to set sensor in standby powermode when powermode is deepstandby mode.
 */
static int8_t set_standby_mode(struct bmp5_dev *dev)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    enum bmp5_powermode pwrmode;

    rslt = bmp5_get_power_mode(&pwrmode, dev);
 8002790:	f107 030e 	add.w	r3, r7, #14
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fb58 	bl	8001e4c <bmp5_get_power_mode>
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 80027a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d108      	bne.n	80027ba <set_standby_mode+0x32>
    {
        if (pwrmode == BMP5_POWERMODE_DEEP_STANDBY)
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d105      	bne.n	80027ba <set_standby_mode+0x32>
        {
            rslt = bmp5_set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7ff fb9b 	bl	8001eec <bmp5_set_power_mode>
 80027b6:	4603      	mov	r3, r0
 80027b8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80027ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <set_iir_config>:

/*!
 * @brief This internal API is used to set the IIR for temperature and pressure.
 */
static int8_t set_iir_config(const struct bmp5_iir_config *iir_cfg, struct bmp5_dev *dev)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to set IIR config */
    uint8_t reg_data[2];

    rslt = bmp5_get_regs(BMP5_REG_DSP_CONFIG, reg_data, 2, dev);
 80027d0:	f107 010c 	add.w	r1, r7, #12
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2202      	movs	r2, #2
 80027d8:	2030      	movs	r0, #48	@ 0x30
 80027da:	f7ff fa4e 	bl	8001c7a <bmp5_get_regs>
 80027de:	4603      	mov	r3, r0
 80027e0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d14f      	bne.n	800288a <set_iir_config+0xc4>
    {
        reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_TEMP, iir_cfg->shdw_set_iir_t);
 80027ea:	7b3b      	ldrb	r3, [r7, #12]
 80027ec:	b25b      	sxtb	r3, r3
 80027ee:	f023 0308 	bic.w	r3, r3, #8
 80027f2:	b25a      	sxtb	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	789b      	ldrb	r3, [r3, #2]
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	b25b      	sxtb	r3, r3
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	b25b      	sxtb	r3, r3
 8002804:	4313      	orrs	r3, r2
 8002806:	b25b      	sxtb	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	733b      	strb	r3, [r7, #12]
        reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_PRESS, iir_cfg->shdw_set_iir_p);
 800280c:	7b3b      	ldrb	r3, [r7, #12]
 800280e:	b25b      	sxtb	r3, r3
 8002810:	f023 0320 	bic.w	r3, r3, #32
 8002814:	b25a      	sxtb	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	78db      	ldrb	r3, [r3, #3]
 800281a:	b25b      	sxtb	r3, r3
 800281c:	015b      	lsls	r3, r3, #5
 800281e:	b25b      	sxtb	r3, r3
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	b25b      	sxtb	r3, r3
 8002826:	4313      	orrs	r3, r2
 8002828:	b25b      	sxtb	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	733b      	strb	r3, [r7, #12]
        reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_IIR_FLUSH_FORCED_EN, iir_cfg->iir_flush_forced_en);
 800282e:	7b3b      	ldrb	r3, [r7, #12]
 8002830:	b25b      	sxtb	r3, r3
 8002832:	f023 0304 	bic.w	r3, r3, #4
 8002836:	b25a      	sxtb	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	791b      	ldrb	r3, [r3, #4]
 800283c:	b25b      	sxtb	r3, r3
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	b25b      	sxtb	r3, r3
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	b25b      	sxtb	r3, r3
 8002848:	4313      	orrs	r3, r2
 800284a:	b25b      	sxtb	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	733b      	strb	r3, [r7, #12]

        reg_data[1] = iir_cfg->set_iir_t;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	737b      	strb	r3, [r7, #13]
        reg_data[1] = BMP5_SET_BITSLICE(reg_data[1], BMP5_SET_IIR_PRESS, iir_cfg->set_iir_p);
 8002856:	7b7b      	ldrb	r3, [r7, #13]
 8002858:	b25b      	sxtb	r3, r3
 800285a:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800285e:	b25a      	sxtb	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	785b      	ldrb	r3, [r3, #1]
 8002864:	b25b      	sxtb	r3, r3
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	b25b      	sxtb	r3, r3
 800286a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800286e:	b25b      	sxtb	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	b25b      	sxtb	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	737b      	strb	r3, [r7, #13]

        /* Set IIR configuration */
        rslt = bmp5_set_regs(BMP5_REG_DSP_CONFIG, reg_data, 2, dev);
 8002878:	f107 010c 	add.w	r1, r7, #12
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2202      	movs	r2, #2
 8002880:	2030      	movs	r0, #48	@ 0x30
 8002882:	f7ff fa2a 	bl	8001cda <bmp5_set_regs>
 8002886:	4603      	mov	r3, r0
 8002888:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800288a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <get_nvm_status>:

/*!
 *  @brief This API is used to get nvm status.
 */
static int8_t get_nvm_status(uint8_t *nvm_status, struct bmp5_dev *dev)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (nvm_status != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <get_nvm_status+0x22>
    {
        rslt = bmp5_get_regs(BMP5_REG_STATUS, nvm_status, 1, dev);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2201      	movs	r2, #1
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	2028      	movs	r0, #40	@ 0x28
 80028ae:	f7ff f9e4 	bl	8001c7a <bmp5_get_regs>
 80028b2:	4603      	mov	r3, r0
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	e001      	b.n	80028bc <get_nvm_status+0x26>
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 80028b8:	23ff      	movs	r3, #255	@ 0xff
 80028ba:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <bmp5_i2c_read>:
 */
BMP5_INTF_RET_TYPE bmp5_i2c_read(uint8_t reg_addr,
                                  uint8_t *reg_data,
                                  uint32_t length,
                                  void *intf_ptr)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	@ 0x30
 80028cc:	af04      	add	r7, sp, #16
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	4603      	mov	r3, r0
 80028d6:	73fb      	strb	r3, [r7, #15]
	uint8_t device_addr = BMP581_I2C_ADDR<<1;
 80028d8:	238c      	movs	r3, #140	@ 0x8c
 80028da:	77fb      	strb	r3, [r7, #31]

	    (void)intf_ptr;
    HAL_StatusTypeDef status;
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	61bb      	str	r3, [r7, #24]

    // Hattın meşgul olup olmadığını kontrol et

        HAL_I2C_DeInit(hi2c);
 80028e0:	69b8      	ldr	r0, [r7, #24]
 80028e2:	f002 fd59 	bl	8005398 <HAL_I2C_DeInit>
        HAL_Delay(10);
 80028e6:	200a      	movs	r0, #10
 80028e8:	f001 fc24 	bl	8004134 <HAL_Delay>
        HAL_I2C_Init(hi2c);
 80028ec:	69b8      	ldr	r0, [r7, #24]
 80028ee:	f002 fc0f 	bl	8005110 <HAL_I2C_Init>



    // Cihaz hazır mı?
    if (HAL_I2C_IsDeviceReady(hi2c, device_addr, 3, 10) != HAL_OK)
 80028f2:	7ffb      	ldrb	r3, [r7, #31]
 80028f4:	b299      	uxth	r1, r3
 80028f6:	230a      	movs	r3, #10
 80028f8:	2203      	movs	r2, #3
 80028fa:	69b8      	ldr	r0, [r7, #24]
 80028fc:	f003 f8a8 	bl	8005a50 <HAL_I2C_IsDeviceReady>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <bmp5_i2c_read+0x4e>
    {
        printf("I2C Cihaz hazır değil! Adres: 0x%02X\n", device_addr);
 8002906:	7ffb      	ldrb	r3, [r7, #31]
 8002908:	4619      	mov	r1, r3
 800290a:	4826      	ldr	r0, [pc, #152]	@ (80029a4 <bmp5_i2c_read+0xdc>)
 800290c:	f00d fb2a 	bl	800ff64 <iprintf>
        return BMP5_E_COM_FAIL;
 8002910:	f06f 0301 	mvn.w	r3, #1
 8002914:	e041      	b.n	800299a <bmp5_i2c_read+0xd2>
    }
    status = HAL_I2C_IsDeviceReady(hi2c, 0x8C, 3, 10);
 8002916:	230a      	movs	r3, #10
 8002918:	2203      	movs	r2, #3
 800291a:	218c      	movs	r1, #140	@ 0x8c
 800291c:	69b8      	ldr	r0, [r7, #24]
 800291e:	f003 f897 	bl	8005a50 <HAL_I2C_IsDeviceReady>
 8002922:	4603      	mov	r3, r0
 8002924:	75fb      	strb	r3, [r7, #23]
    printf("IsDeviceReady: %s\n", (status == HAL_OK) ? "OK" : "FAIL");
 8002926:	7dfb      	ldrb	r3, [r7, #23]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <bmp5_i2c_read+0x68>
 800292c:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <bmp5_i2c_read+0xe0>)
 800292e:	e000      	b.n	8002932 <bmp5_i2c_read+0x6a>
 8002930:	4b1e      	ldr	r3, [pc, #120]	@ (80029ac <bmp5_i2c_read+0xe4>)
 8002932:	4619      	mov	r1, r3
 8002934:	481e      	ldr	r0, [pc, #120]	@ (80029b0 <bmp5_i2c_read+0xe8>)
 8002936:	f00d fb15 	bl	800ff64 <iprintf>


    // Okuma işlemi
    status = HAL_I2C_Mem_Read(hi2c,
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	b29b      	uxth	r3, r3
 8002942:	210a      	movs	r1, #10
 8002944:	9102      	str	r1, [sp, #8]
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2301      	movs	r3, #1
 800294e:	218c      	movs	r1, #140	@ 0x8c
 8002950:	69b8      	ldr	r0, [r7, #24]
 8002952:	f002 fe4b 	bl	80055ec <HAL_I2C_Mem_Read>
 8002956:	4603      	mov	r3, r0
 8002958:	75fb      	strb	r3, [r7, #23]
                               reg_addr,
                               I2C_MEMADD_SIZE_8BIT,
                               reg_data,
                               length,
                               10);
    printf("READ: addr=0x%02X reg=0x%02X len=%lu\n", dev_addr, reg_addr, length);
 800295a:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <bmp5_i2c_read+0xec>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4814      	ldr	r0, [pc, #80]	@ (80029b8 <bmp5_i2c_read+0xf0>)
 8002966:	f00d fafd 	bl	800ff64 <iprintf>

    if (status != HAL_OK)
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <bmp5_i2c_read+0xb8>
    {
        printf("HAL_I2C_Mem_Read FAILED! Status=%d\n", status);
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	4619      	mov	r1, r3
 8002974:	4811      	ldr	r0, [pc, #68]	@ (80029bc <bmp5_i2c_read+0xf4>)
 8002976:	f00d faf5 	bl	800ff64 <iprintf>
        return BMP5_E_COM_FAIL;
 800297a:	f06f 0301 	mvn.w	r3, #1
 800297e:	e00c      	b.n	800299a <bmp5_i2c_read+0xd2>
    }




    if (status != HAL_OK)
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <bmp5_i2c_read+0xd0>
    {
        printf("I2C READ ERROR: Reg=0x%02X Len=%lu Status=%d\n", reg_addr, length, status);
 8002986:	7bf9      	ldrb	r1, [r7, #15]
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	480c      	ldr	r0, [pc, #48]	@ (80029c0 <bmp5_i2c_read+0xf8>)
 800298e:	f00d fae9 	bl	800ff64 <iprintf>
        return BMP5_E_COM_FAIL;
 8002992:	f06f 0301 	mvn.w	r3, #1
 8002996:	e000      	b.n	800299a <bmp5_i2c_read+0xd2>
    }

    return BMP5_INTF_RET_SUCCESS;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	08012400 	.word	0x08012400
 80029a8:	08012428 	.word	0x08012428
 80029ac:	0801242c 	.word	0x0801242c
 80029b0:	08012434 	.word	0x08012434
 80029b4:	200001f4 	.word	0x200001f4
 80029b8:	08012448 	.word	0x08012448
 80029bc:	08012470 	.word	0x08012470
 80029c0:	08012494 	.word	0x08012494

080029c4 <bmp5_i2c_write>:
 */
BMP5_INTF_RET_TYPE bmp5_i2c_write(uint8_t reg_addr,
                                   const uint8_t *reg_data,
                                   uint32_t length,
                                   void *intf_ptr)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	@ 0x28
 80029c8:	af04      	add	r7, sp, #16
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4603      	mov	r3, r0
 80029d2:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;

    // I2C handle'ı interface pointer'dan al
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	617b      	str	r3, [r7, #20]

    // I2C 8-bit adres (0x46 << 1 = 0x8C, veya 0x47 << 1 = 0x8E)
    uint8_t dev_addr = BMP581_I2C_ADDR;  // Örn: #define BMP581_I2C_ADDR (0x46 << 1)
 80029d8:	2346      	movs	r3, #70	@ 0x46
 80029da:	74fb      	strb	r3, [r7, #19]

    // Yazma işlemini gerçekleştir
    status = HAL_I2C_Mem_Write(hi2c,
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	210a      	movs	r1, #10
 80029e6:	9102      	str	r1, [sp, #8]
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	2301      	movs	r3, #1
 80029f0:	218c      	movs	r1, #140	@ 0x8c
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f002 fd00 	bl	80053f8 <HAL_I2C_Mem_Write>
 80029f8:	4603      	mov	r3, r0
 80029fa:	74bb      	strb	r3, [r7, #18]
                               (uint8_t *)reg_data,
                               length,
                               10);  // timeout: 100 ms

    // Başarı kontrolü
    if (status != HAL_OK)
 80029fc:	7cbb      	ldrb	r3, [r7, #18]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <bmp5_i2c_write+0x50>
    {
        printf("I2C WRITE FAIL: Reg=0x%02X Len=%lu Status=%d\n", reg_addr, length, status);
 8002a02:	7bf9      	ldrb	r1, [r7, #15]
 8002a04:	7cbb      	ldrb	r3, [r7, #18]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4805      	ldr	r0, [pc, #20]	@ (8002a20 <bmp5_i2c_write+0x5c>)
 8002a0a:	f00d faab 	bl	800ff64 <iprintf>
        return BMP5_E_COM_FAIL;
 8002a0e:	f06f 0301 	mvn.w	r3, #1
 8002a12:	e000      	b.n	8002a16 <bmp5_i2c_write+0x52>
    }

    return BMP5_INTF_RET_SUCCESS;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	080124c4 	.word	0x080124c4

08002a24 <bmp5_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmp5_error_codes_print_result(const char api_name[], int8_t rslt)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMP5_OK)
 8002a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d05d      	beq.n	8002af4 <bmp5_error_codes_print_result+0xd0>
    {
        printf("%s\t", api_name);
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4830      	ldr	r0, [pc, #192]	@ (8002afc <bmp5_error_codes_print_result+0xd8>)
 8002a3c:	f00d fa92 	bl	800ff64 <iprintf>
        if (rslt == BMP5_E_NULL_PTR)
 8002a40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d106      	bne.n	8002a58 <bmp5_error_codes_print_result+0x34>
        {
            printf("Error [%d] : Null pointer\r\n", rslt);
 8002a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	482b      	ldr	r0, [pc, #172]	@ (8002b00 <bmp5_error_codes_print_result+0xdc>)
 8002a52:	f00d fa87 	bl	800ff64 <iprintf>
        {
            /* For more error codes refer "*_defs.h" */
            printf("Error [%d] : Unknown error code\r\n", rslt);
        }
    }
}
 8002a56:	e04d      	b.n	8002af4 <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_COM_FAIL)
 8002a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a5c:	f113 0f02 	cmn.w	r3, #2
 8002a60:	d106      	bne.n	8002a70 <bmp5_error_codes_print_result+0x4c>
            printf("Error [%d] : Communication failure\r\n", rslt);
 8002a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a66:	4619      	mov	r1, r3
 8002a68:	4826      	ldr	r0, [pc, #152]	@ (8002b04 <bmp5_error_codes_print_result+0xe0>)
 8002a6a:	f00d fa7b 	bl	800ff64 <iprintf>
}
 8002a6e:	e041      	b.n	8002af4 <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_DEV_NOT_FOUND)
 8002a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a74:	f113 0f03 	cmn.w	r3, #3
 8002a78:	d106      	bne.n	8002a88 <bmp5_error_codes_print_result+0x64>
            printf("Error [%d] : Device not found\r\n", rslt);
 8002a7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4821      	ldr	r0, [pc, #132]	@ (8002b08 <bmp5_error_codes_print_result+0xe4>)
 8002a82:	f00d fa6f 	bl	800ff64 <iprintf>
}
 8002a86:	e035      	b.n	8002af4 <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_INVALID_CHIP_ID)
 8002a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a8c:	f113 0f04 	cmn.w	r3, #4
 8002a90:	d106      	bne.n	8002aa0 <bmp5_error_codes_print_result+0x7c>
            printf("Error [%d] : Invalid chip id\r\n", rslt);
 8002a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a96:	4619      	mov	r1, r3
 8002a98:	481c      	ldr	r0, [pc, #112]	@ (8002b0c <bmp5_error_codes_print_result+0xe8>)
 8002a9a:	f00d fa63 	bl	800ff64 <iprintf>
}
 8002a9e:	e029      	b.n	8002af4 <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_POWER_UP)
 8002aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aa4:	f113 0f05 	cmn.w	r3, #5
 8002aa8:	d106      	bne.n	8002ab8 <bmp5_error_codes_print_result+0x94>
            printf("Error [%d] : Power up error\r\n", rslt);
 8002aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4817      	ldr	r0, [pc, #92]	@ (8002b10 <bmp5_error_codes_print_result+0xec>)
 8002ab2:	f00d fa57 	bl	800ff64 <iprintf>
}
 8002ab6:	e01d      	b.n	8002af4 <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_POR_SOFTRESET)
 8002ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002abc:	f113 0f06 	cmn.w	r3, #6
 8002ac0:	d106      	bne.n	8002ad0 <bmp5_error_codes_print_result+0xac>
            printf("Error [%d] : Power-on reset/softreset failure\r\n", rslt);
 8002ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4812      	ldr	r0, [pc, #72]	@ (8002b14 <bmp5_error_codes_print_result+0xf0>)
 8002aca:	f00d fa4b 	bl	800ff64 <iprintf>
}
 8002ace:	e011      	b.n	8002af4 <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_INVALID_POWERMODE)
 8002ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad4:	f113 0f07 	cmn.w	r3, #7
 8002ad8:	d106      	bne.n	8002ae8 <bmp5_error_codes_print_result+0xc4>
            printf("Error [%d] : Invalid powermode\r\n", rslt);
 8002ada:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	480d      	ldr	r0, [pc, #52]	@ (8002b18 <bmp5_error_codes_print_result+0xf4>)
 8002ae2:	f00d fa3f 	bl	800ff64 <iprintf>
}
 8002ae6:	e005      	b.n	8002af4 <bmp5_error_codes_print_result+0xd0>
            printf("Error [%d] : Unknown error code\r\n", rslt);
 8002ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aec:	4619      	mov	r1, r3
 8002aee:	480b      	ldr	r0, [pc, #44]	@ (8002b1c <bmp5_error_codes_print_result+0xf8>)
 8002af0:	f00d fa38 	bl	800ff64 <iprintf>
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	080124f4 	.word	0x080124f4
 8002b00:	080124f8 	.word	0x080124f8
 8002b04:	08012514 	.word	0x08012514
 8002b08:	0801253c 	.word	0x0801253c
 8002b0c:	0801255c 	.word	0x0801255c
 8002b10:	0801257c 	.word	0x0801257c
 8002b14:	0801259c 	.word	0x0801259c
 8002b18:	080125cc 	.word	0x080125cc
 8002b1c:	080125f0 	.word	0x080125f0

08002b20 <init_bmp5_interface>:

/*!
 *  @brief Function to select the interface between SPI and I2C.
 */
int8_t init_bmp5_interface(struct bmp5_dev *bmp5_dev, uint8_t intf)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	@ 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
    int8_t rslt = BMP5_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (bmp5_dev == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <init_bmp5_interface+0x1e>
    {
        return BMP5_E_NULL_PTR;
 8002b38:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3c:	e039      	b.n	8002bb2 <init_bmp5_interface+0x92>
    }

    // I2C arayüzü kullanılacaksa
    if (intf == BMP5_I2C_INTF)
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d134      	bne.n	8002bae <init_bmp5_interface+0x8e>
    {
        printf("I2C Interface\n");
 8002b44:	481d      	ldr	r0, [pc, #116]	@ (8002bbc <init_bmp5_interface+0x9c>)
 8002b46:	f00d fa75 	bl	8010034 <puts>

        bmp5_dev->intf_ptr = &hi2c1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc0 <init_bmp5_interface+0xa0>)
 8002b4e:	605a      	str	r2, [r3, #4]
        bmp5_dev->read = bmp5_i2c_read;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc4 <init_bmp5_interface+0xa4>)
 8002b54:	609a      	str	r2, [r3, #8]
        bmp5_dev->write = bmp5_i2c_write;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc8 <init_bmp5_interface+0xa8>)
 8002b5a:	60da      	str	r2, [r3, #12]
        bmp5_dev->intf = BMP5_I2C_INTF;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	755a      	strb	r2, [r3, #21]
        //bmp5_dev->delay_us = bmp5_delay;

        // INT pini ayarla (PB6)
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	611a      	str	r2, [r3, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b15      	ldr	r3, [pc, #84]	@ (8002bcc <init_bmp5_interface+0xac>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	4a14      	ldr	r2, [pc, #80]	@ (8002bcc <init_bmp5_interface+0xac>)
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <init_bmp5_interface+0xac>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b8e:	2340      	movs	r3, #64	@ 0x40
 8002b90:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b96:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9c:	f107 0310 	add.w	r3, r7, #16
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	480b      	ldr	r0, [pc, #44]	@ (8002bd0 <init_bmp5_interface+0xb0>)
 8002ba4:	f001 fffa 	bl	8004b9c <HAL_GPIO_Init>
    else
    {
        return BMP5_E_COM_FAIL;  // Geçersiz arayüz tipi
    }

    return rslt;  // Başarıyla tamamlandıysa BMP5_OK döner
 8002ba8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002bac:	e001      	b.n	8002bb2 <init_bmp5_interface+0x92>
        return BMP5_E_COM_FAIL;  // Geçersiz arayüz tipi
 8002bae:	f06f 0301 	mvn.w	r3, #1
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3728      	adds	r7, #40	@ 0x28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	08012614 	.word	0x08012614
 8002bc0:	20000c40 	.word	0x20000c40
 8002bc4:	080028c9 	.word	0x080028c9
 8002bc8:	080029c5 	.word	0x080029c5
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020400 	.word	0x40020400

08002bd4 <control_init>:

#include "control.h"


void control_init(BMI088 *imu)              
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
BMI088_Init_I2C(&imu, &hi2c3, acc_adress, gyro_adress);
 8002bdc:	1d38      	adds	r0, r7, #4
 8002bde:	23d2      	movs	r3, #210	@ 0xd2
 8002be0:	2230      	movs	r2, #48	@ 0x30
 8002be2:	4906      	ldr	r1, [pc, #24]	@ (8002bfc <control_init+0x28>)
 8002be4:	f7fe fa06 	bl	8000ff4 <BMI088_Init_I2C>

HAL_StatusTypeDef kontrol = HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002be8:	2100      	movs	r1, #0
 8002bea:	4805      	ldr	r0, [pc, #20]	@ (8002c00 <control_init+0x2c>)
 8002bec:	f006 fefc 	bl	80099e8 <HAL_TIM_PWM_Start>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	73fb      	strb	r3, [r7, #15]

}
 8002bf4:	bf00      	nop
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000c94 	.word	0x20000c94
 8002c00:	20000ed0 	.word	0x20000ed0

08002c04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <MX_DMA_Init+0x4c>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	4a0f      	ldr	r2, [pc, #60]	@ (8002c50 <MX_DMA_Init+0x4c>)
 8002c14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <MX_DMA_Init+0x4c>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2105      	movs	r1, #5
 8002c2a:	203b      	movs	r0, #59	@ 0x3b
 8002c2c:	f001 fb82 	bl	8004334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002c30:	203b      	movs	r0, #59	@ 0x3b
 8002c32:	f001 fb9b 	bl	800436c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2105      	movs	r1, #5
 8002c3a:	2045      	movs	r0, #69	@ 0x45
 8002c3c:	f001 fb7a 	bl	8004334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002c40:	2045      	movs	r0, #69	@ 0x45
 8002c42:	f001 fb93 	bl	800436c <HAL_NVIC_EnableIRQ>

}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800

08002c54 <vApplicationIdleHook>:
void vApplicationTickHook(void);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <vApplicationMallocFailedHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a07      	ldr	r2, [pc, #28]	@ (8002cac <vApplicationGetIdleTaskMemory+0x2c>)
 8002c90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4a06      	ldr	r2, [pc, #24]	@ (8002cb0 <vApplicationGetIdleTaskMemory+0x30>)
 8002c96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c9e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	200003a0 	.word	0x200003a0
 8002cb0:	20000440 	.word	0x20000440

08002cb4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002cb4:	b5b0      	push	{r4, r5, r7, lr}
 8002cb6:	b0aa      	sub	sp, #168	@ 0xa8
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

	spiMutex = xSemaphoreCreateMutex();
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f00a f94b 	bl	800cf56 <xQueueCreateMutex>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	4a3e      	ldr	r2, [pc, #248]	@ (8002dbc <MX_FREERTOS_Init+0x108>)
 8002cc4:	6013      	str	r3, [r2, #0]
	sdMutex = xSemaphoreCreateMutex();
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f00a f945 	bl	800cf56 <xQueueCreateMutex>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4a3c      	ldr	r2, [pc, #240]	@ (8002dc0 <MX_FREERTOS_Init+0x10c>)
 8002cd0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8002cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc4 <MX_FREERTOS_Init+0x110>)
 8002cd4:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8002cd8:	461d      	mov	r5, r3
 8002cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ce2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002ce6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f009 fd36 	bl	800c75e <osThreadCreate>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a34      	ldr	r2, [pc, #208]	@ (8002dc8 <MX_FREERTOS_Init+0x114>)
 8002cf6:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_BMI088 */
  osThreadDef(YRT_BMI088, BMI088_fonk, osPriorityBelowNormal, 0, 512);
 8002cf8:	4b34      	ldr	r3, [pc, #208]	@ (8002dcc <MX_FREERTOS_Init+0x118>)
 8002cfa:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8002cfe:	461d      	mov	r5, r3
 8002d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_BMI088Handle = osThreadCreate(osThread(YRT_BMI088), NULL);
 8002d0c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f009 fd23 	bl	800c75e <osThreadCreate>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd0 <MX_FREERTOS_Init+0x11c>)
 8002d1c:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_BMP581 */
  osThreadDef(YRT_BMP581, BMP581_fonk, osPriorityNormal, 0, 512);
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd4 <MX_FREERTOS_Init+0x120>)
 8002d20:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8002d24:	461d      	mov	r5, r3
 8002d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_BMP581Handle = osThreadCreate(osThread(YRT_BMP581), NULL);
 8002d32:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f009 fd10 	bl	800c75e <osThreadCreate>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4a25      	ldr	r2, [pc, #148]	@ (8002dd8 <MX_FREERTOS_Init+0x124>)
 8002d42:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_TRANSMIT */
  osThreadDef(YRT_TRANSMIT, Transmit_veri, osPriorityAboveNormal, 0, 512);
 8002d44:	4b25      	ldr	r3, [pc, #148]	@ (8002ddc <MX_FREERTOS_Init+0x128>)
 8002d46:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002d4a:	461d      	mov	r5, r3
 8002d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_TRANSMITHandle = osThreadCreate(osThread(YRT_TRANSMIT), NULL);
 8002d58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f009 fcfd 	bl	800c75e <osThreadCreate>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4a1e      	ldr	r2, [pc, #120]	@ (8002de0 <MX_FREERTOS_Init+0x12c>)
 8002d68:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_SDCARD */
  osThreadDef(YRT_SDCARD, SDfonk, osPriorityNormal, 0, 512);
 8002d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002de4 <MX_FREERTOS_Init+0x130>)
 8002d6c:	f107 041c 	add.w	r4, r7, #28
 8002d70:	461d      	mov	r5, r3
 8002d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_SDCARDHandle = osThreadCreate(osThread(YRT_SDCARD), NULL);
 8002d7e:	f107 031c 	add.w	r3, r7, #28
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f009 fcea 	bl	800c75e <osThreadCreate>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <MX_FREERTOS_Init+0x134>)
 8002d8e:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_ServoMotor */
  osThreadDef(YRT_ServoMotor, servo_fonk, osPriorityNormal, 0, 512);
 8002d90:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <MX_FREERTOS_Init+0x138>)
 8002d92:	463c      	mov	r4, r7
 8002d94:	461d      	mov	r5, r3
 8002d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_ServoMotorHandle = osThreadCreate(osThread(YRT_ServoMotor), NULL);
 8002da2:	463b      	mov	r3, r7
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f009 fcd9 	bl	800c75e <osThreadCreate>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4a10      	ldr	r2, [pc, #64]	@ (8002df0 <MX_FREERTOS_Init+0x13c>)
 8002db0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002db2:	bf00      	nop
 8002db4:	37a8      	adds	r7, #168	@ 0xa8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200001f8 	.word	0x200001f8
 8002dc0:	200001fc 	.word	0x200001fc
 8002dc4:	08012630 	.word	0x08012630
 8002dc8:	20000388 	.word	0x20000388
 8002dcc:	08012658 	.word	0x08012658
 8002dd0:	2000038c 	.word	0x2000038c
 8002dd4:	08012680 	.word	0x08012680
 8002dd8:	20000390 	.word	0x20000390
 8002ddc:	080126ac 	.word	0x080126ac
 8002de0:	20000394 	.word	0x20000394
 8002de4:	080126d4 	.word	0x080126d4
 8002de8:	20000398 	.word	0x20000398
 8002dec:	08012700 	.word	0x08012700
 8002df0:	2000039c 	.word	0x2000039c

08002df4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f009 fcfa 	bl	800c7f6 <osDelay>
 8002e02:	e7fb      	b.n	8002dfc <StartDefaultTask+0x8>

08002e04 <BMI088_fonk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BMI088_fonk */
void BMI088_fonk(void const * argument)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	 	 	// BMI088_ReadGyroscope(&imu);     /*BURADA ALINANA VERİLERİ SERVO TASK'INE GÖNDER*/
	 	 	
      // rollpitchyaw(&imu);   
      

	 vTaskDelay(pdMS_TO_TICKS(50));         
 8002e0c:	2032      	movs	r0, #50	@ 0x32
 8002e0e:	f00b f89f 	bl	800df50 <vTaskDelay>
 8002e12:	e7fb      	b.n	8002e0c <BMI088_fonk+0x8>

08002e14 <BMP581_fonk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BMP581_fonk */
void BMP581_fonk(void const * argument)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BMP581_fonk */
  /* Infinite loop */
  for(;;)
  {
	  BMP581();
 8002e1c:	f000 fc48 	bl	80036b0 <BMP581>
	  vTaskDelay(pdMS_TO_TICKS(100));
 8002e20:	2064      	movs	r0, #100	@ 0x64
 8002e22:	f00b f895 	bl	800df50 <vTaskDelay>
  {
 8002e26:	bf00      	nop
 8002e28:	e7f8      	b.n	8002e1c <BMP581_fonk+0x8>
	...

08002e2c <Transmit_veri>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Transmit_veri */
void Transmit_veri(void const * argument)
{
 8002e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e30:	b09e      	sub	sp, #120	@ 0x78
 8002e32:	af0c      	add	r7, sp, #48	@ 0x30
 8002e34:	6478      	str	r0, [r7, #68]	@ 0x44
  /* USER CODE BEGIN Transmit_veri */

	    // SPI ile Lora işlem
	 myLoRa = configureLoRa();
 8002e36:	4c64      	ldr	r4, [pc, #400]	@ (8002fc8 <Transmit_veri+0x19c>)
 8002e38:	f107 0310 	add.w	r3, r7, #16
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fac3 	bl	80013c8 <configureLoRa>
 8002e42:	4625      	mov	r5, r4
 8002e44:	f107 0410 	add.w	r4, r7, #16
 8002e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e50:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002e54:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	 if(LoRa_init(&myLoRa)== LORA_OK){
 8002e58:	485b      	ldr	r0, [pc, #364]	@ (8002fc8 <Transmit_veri+0x19c>)
 8002e5a:	f7fe fe10 	bl	8001a7e <LoRa_init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2bc8      	cmp	r3, #200	@ 0xc8
 8002e62:	d102      	bne.n	8002e6a <Transmit_veri+0x3e>
	    LoRa_stat = 1;
 8002e64:	4b59      	ldr	r3, [pc, #356]	@ (8002fcc <Transmit_veri+0x1a0>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
	    }
	   LoRa_startReceiving(&myLoRa);
 8002e6a:	4857      	ldr	r0, [pc, #348]	@ (8002fc8 <Transmit_veri+0x19c>)
 8002e6c:	f7fe fdfb 	bl	8001a66 <LoRa_startReceiving>

	   snprintf(logBuf,sizeof(logBuf), "ivme_x: %.3f,\nivme_y: %.3f,\nivme_z: %.3f,\nroll: %.3f,\npitch: %.3f,\nyaw: %.3f\n\r", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 8002e70:	4b57      	ldr	r3, [pc, #348]	@ (8002fd0 <Transmit_veri+0x1a4>)
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fb87 	bl	8000588 <__aeabi_f2d>
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	460d      	mov	r5, r1
 8002e7e:	4b54      	ldr	r3, [pc, #336]	@ (8002fd0 <Transmit_veri+0x1a4>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd fb80 	bl	8000588 <__aeabi_f2d>
 8002e88:	4680      	mov	r8, r0
 8002e8a:	4689      	mov	r9, r1
 8002e8c:	4b50      	ldr	r3, [pc, #320]	@ (8002fd0 <Transmit_veri+0x1a4>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd fb79 	bl	8000588 <__aeabi_f2d>
 8002e96:	4682      	mov	sl, r0
 8002e98:	468b      	mov	fp, r1
 8002e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8002fd4 <Transmit_veri+0x1a8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd fb72 	bl	8000588 <__aeabi_f2d>
 8002ea4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd8 <Transmit_veri+0x1ac>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd fb6b 	bl	8000588 <__aeabi_f2d>
 8002eb2:	e9c7 0100 	strd	r0, r1, [r7]
 8002eb6:	4b49      	ldr	r3, [pc, #292]	@ (8002fdc <Transmit_veri+0x1b0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fb64 	bl	8000588 <__aeabi_f2d>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8002ec8:	ed97 7b00 	vldr	d7, [r7]
 8002ecc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002ed0:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ed4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002ed8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002edc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002ee0:	e9cd 4500 	strd	r4, r5, [sp]
 8002ee4:	4a3e      	ldr	r2, [pc, #248]	@ (8002fe0 <Transmit_veri+0x1b4>)
 8002ee6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002eea:	483e      	ldr	r0, [pc, #248]	@ (8002fe4 <Transmit_veri+0x1b8>)
 8002eec:	f00d f8aa 	bl	8010044 <sniprintf>
	   	 		  roll, pitch, yaw);

	   LoRa_transmit(&myLoRa, (uint8_t*)logBuf, strlen(logBuf), 10);
 8002ef0:	483c      	ldr	r0, [pc, #240]	@ (8002fe4 <Transmit_veri+0x1b8>)
 8002ef2:	f7fd f9dd 	bl	80002b0 <strlen>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	230a      	movs	r3, #10
 8002efc:	4939      	ldr	r1, [pc, #228]	@ (8002fe4 <Transmit_veri+0x1b8>)
 8002efe:	4832      	ldr	r0, [pc, #200]	@ (8002fc8 <Transmit_veri+0x19c>)
 8002f00:	f7fe fd59 	bl	80019b6 <LoRa_transmit>
  /* Infinite loop */
  for(;;)
  {
	  snprintf(logBuf,sizeof(logBuf), "ivme_x: %.3f,\nivme_y: %.3f,\nivme_z: %.3f,\nroll: %.3f,\npitch: %.3f,\nyaw: %.3f\n\r", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 8002f04:	4b32      	ldr	r3, [pc, #200]	@ (8002fd0 <Transmit_veri+0x1a4>)
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd fb3d 	bl	8000588 <__aeabi_f2d>
 8002f0e:	4604      	mov	r4, r0
 8002f10:	460d      	mov	r5, r1
 8002f12:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd0 <Transmit_veri+0x1a4>)
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fb36 	bl	8000588 <__aeabi_f2d>
 8002f1c:	4680      	mov	r8, r0
 8002f1e:	4689      	mov	r9, r1
 8002f20:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd0 <Transmit_veri+0x1a4>)
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fb2f 	bl	8000588 <__aeabi_f2d>
 8002f2a:	4682      	mov	sl, r0
 8002f2c:	468b      	mov	fp, r1
 8002f2e:	4b29      	ldr	r3, [pc, #164]	@ (8002fd4 <Transmit_veri+0x1a8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fb28 	bl	8000588 <__aeabi_f2d>
 8002f38:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002f3c:	4b26      	ldr	r3, [pc, #152]	@ (8002fd8 <Transmit_veri+0x1ac>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd fb21 	bl	8000588 <__aeabi_f2d>
 8002f46:	e9c7 0100 	strd	r0, r1, [r7]
 8002f4a:	4b24      	ldr	r3, [pc, #144]	@ (8002fdc <Transmit_veri+0x1b0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd fb1a 	bl	8000588 <__aeabi_f2d>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8002f5c:	ed97 7b00 	vldr	d7, [r7]
 8002f60:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002f64:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f68:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002f6c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002f70:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002f74:	e9cd 4500 	strd	r4, r5, [sp]
 8002f78:	4a19      	ldr	r2, [pc, #100]	@ (8002fe0 <Transmit_veri+0x1b4>)
 8002f7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f7e:	4819      	ldr	r0, [pc, #100]	@ (8002fe4 <Transmit_veri+0x1b8>)
 8002f80:	f00d f860 	bl	8010044 <sniprintf>
	 	   	 		  roll, pitch, yaw);
	  if (xSemaphoreTake(spiMutex, portMAX_DELAY) == pdTRUE) {
 8002f84:	4b18      	ldr	r3, [pc, #96]	@ (8002fe8 <Transmit_veri+0x1bc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f04f 31ff 	mov.w	r1, #4294967295
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f00a fb27 	bl	800d5e0 <xQueueSemaphoreTake>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d1b5      	bne.n	8002f04 <Transmit_veri+0xd8>

	 	   LoRa_transmit(&myLoRa, (uint8_t*)logBuf, strlen(logBuf), 10);
 8002f98:	4812      	ldr	r0, [pc, #72]	@ (8002fe4 <Transmit_veri+0x1b8>)
 8002f9a:	f7fd f989 	bl	80002b0 <strlen>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	230a      	movs	r3, #10
 8002fa4:	490f      	ldr	r1, [pc, #60]	@ (8002fe4 <Transmit_veri+0x1b8>)
 8002fa6:	4808      	ldr	r0, [pc, #32]	@ (8002fc8 <Transmit_veri+0x19c>)
 8002fa8:	f7fe fd05 	bl	80019b6 <LoRa_transmit>
    osDelay(1);
 8002fac:	2001      	movs	r0, #1
 8002fae:	f009 fc22 	bl	800c7f6 <osDelay>
    xSemaphoreGive(spiMutex); // işi bitince bırak
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <Transmit_veri+0x1bc>)
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2100      	movs	r1, #0
 8002fbc:	f009 fffe 	bl	800cfbc <xQueueGenericSend>
    vTaskDelay(pdMS_TO_TICKS(200));
 8002fc0:	20c8      	movs	r0, #200	@ 0xc8
 8002fc2:	f00a ffc5 	bl	800df50 <vTaskDelay>
	  snprintf(logBuf,sizeof(logBuf), "ivme_x: %.3f,\nivme_y: %.3f,\nivme_z: %.3f,\nroll: %.3f,\npitch: %.3f,\nyaw: %.3f\n\r", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 8002fc6:	e79d      	b.n	8002f04 <Transmit_veri+0xd8>
 8002fc8:	20000244 	.word	0x20000244
 8002fcc:	20000270 	.word	0x20000270
 8002fd0:	20000200 	.word	0x20000200
 8002fd4:	20000274 	.word	0x20000274
 8002fd8:	20000278 	.word	0x20000278
 8002fdc:	2000027c 	.word	0x2000027c
 8002fe0:	0801271c 	.word	0x0801271c
 8002fe4:	20000280 	.word	0x20000280
 8002fe8:	200001f8 	.word	0x200001f8

08002fec <SDfonk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SDfonk */
void SDfonk(void const * argument)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
//	  	            	 f_close(&file);
//	  	  	           xSemaphoreGive(sdMutex);
//
//	  	             }
//	  	         }
    osDelay(1);
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f009 fbfe 	bl	800c7f6 <osDelay>
 8002ffa:	e7fb      	b.n	8002ff4 <SDfonk+0x8>

08002ffc <servo_fonk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo_fonk */
void servo_fonk(void const * argument)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servo_fonk */
  control_init(&imu);      /* BMI VE PWM INIT YAPILDI*/
 8003004:	4803      	ldr	r0, [pc, #12]	@ (8003014 <servo_fonk+0x18>)
 8003006:	f7ff fde5 	bl	8002bd4 <control_init>
	  // 	  }




    osDelay(1);
 800300a:	2001      	movs	r0, #1
 800300c:	f009 fbf3 	bl	800c7f6 <osDelay>
 8003010:	e7fb      	b.n	800300a <servo_fonk+0xe>
 8003012:	bf00      	nop
 8003014:	20000200 	.word	0x20000200

08003018 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	@ 0x28
 800301c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301e:	f107 0314 	add.w	r3, r7, #20
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	4b48      	ldr	r3, [pc, #288]	@ (8003154 <MX_GPIO_Init+0x13c>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	4a47      	ldr	r2, [pc, #284]	@ (8003154 <MX_GPIO_Init+0x13c>)
 8003038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800303c:	6313      	str	r3, [r2, #48]	@ 0x30
 800303e:	4b45      	ldr	r3, [pc, #276]	@ (8003154 <MX_GPIO_Init+0x13c>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4b41      	ldr	r3, [pc, #260]	@ (8003154 <MX_GPIO_Init+0x13c>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	4a40      	ldr	r2, [pc, #256]	@ (8003154 <MX_GPIO_Init+0x13c>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6313      	str	r3, [r2, #48]	@ 0x30
 800305a:	4b3e      	ldr	r3, [pc, #248]	@ (8003154 <MX_GPIO_Init+0x13c>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	4b3a      	ldr	r3, [pc, #232]	@ (8003154 <MX_GPIO_Init+0x13c>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	4a39      	ldr	r2, [pc, #228]	@ (8003154 <MX_GPIO_Init+0x13c>)
 8003070:	f043 0304 	orr.w	r3, r3, #4
 8003074:	6313      	str	r3, [r2, #48]	@ 0x30
 8003076:	4b37      	ldr	r3, [pc, #220]	@ (8003154 <MX_GPIO_Init+0x13c>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	4b33      	ldr	r3, [pc, #204]	@ (8003154 <MX_GPIO_Init+0x13c>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	4a32      	ldr	r2, [pc, #200]	@ (8003154 <MX_GPIO_Init+0x13c>)
 800308c:	f043 0302 	orr.w	r3, r3, #2
 8003090:	6313      	str	r3, [r2, #48]	@ 0x30
 8003092:	4b30      	ldr	r3, [pc, #192]	@ (8003154 <MX_GPIO_Init+0x13c>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003154 <MX_GPIO_Init+0x13c>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003154 <MX_GPIO_Init+0x13c>)
 80030a8:	f043 0308 	orr.w	r3, r3, #8
 80030ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ae:	4b29      	ldr	r3, [pc, #164]	@ (8003154 <MX_GPIO_Init+0x13c>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_SET);
 80030ba:	2201      	movs	r2, #1
 80030bc:	2118      	movs	r1, #24
 80030be:	4826      	ldr	r0, [pc, #152]	@ (8003158 <MX_GPIO_Init+0x140>)
 80030c0:	f002 f80c 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 80030c4:	2318      	movs	r3, #24
 80030c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c8:	2301      	movs	r3, #1
 80030ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d0:	2300      	movs	r3, #0
 80030d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	4619      	mov	r1, r3
 80030da:	481f      	ldr	r0, [pc, #124]	@ (8003158 <MX_GPIO_Init+0x140>)
 80030dc:	f001 fd5e 	bl	8004b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80030e0:	2310      	movs	r3, #16
 80030e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	4619      	mov	r1, r3
 80030f4:	4819      	ldr	r0, [pc, #100]	@ (800315c <MX_GPIO_Init+0x144>)
 80030f6:	f001 fd51 	bl	8004b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80030fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003104:	2302      	movs	r3, #2
 8003106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	4619      	mov	r1, r3
 800310e:	4814      	ldr	r0, [pc, #80]	@ (8003160 <MX_GPIO_Init+0x148>)
 8003110:	f001 fd44 	bl	8004b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8003114:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800311a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800311e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	4619      	mov	r1, r3
 800312a:	480b      	ldr	r0, [pc, #44]	@ (8003158 <MX_GPIO_Init+0x140>)
 800312c:	f001 fd36 	bl	8004b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BMP_INT_Pin */
  GPIO_InitStruct.Pin = BMP_INT_Pin;
 8003130:	2320      	movs	r3, #32
 8003132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003134:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMP_INT_GPIO_Port, &GPIO_InitStruct);
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	4619      	mov	r1, r3
 8003144:	4806      	ldr	r0, [pc, #24]	@ (8003160 <MX_GPIO_Init+0x148>)
 8003146:	f001 fd29 	bl	8004b9c <HAL_GPIO_Init>

}
 800314a:	bf00      	nop
 800314c:	3728      	adds	r7, #40	@ 0x28
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	40020000 	.word	0x40020000
 800315c:	40020800 	.word	0x40020800
 8003160:	40020400 	.word	0x40020400

08003164 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003168:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <MX_I2C1_Init+0x50>)
 800316a:	4a13      	ldr	r2, [pc, #76]	@ (80031b8 <MX_I2C1_Init+0x54>)
 800316c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800316e:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <MX_I2C1_Init+0x50>)
 8003170:	4a12      	ldr	r2, [pc, #72]	@ (80031bc <MX_I2C1_Init+0x58>)
 8003172:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003174:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <MX_I2C1_Init+0x50>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800317a:	4b0e      	ldr	r3, [pc, #56]	@ (80031b4 <MX_I2C1_Init+0x50>)
 800317c:	2200      	movs	r2, #0
 800317e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003180:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <MX_I2C1_Init+0x50>)
 8003182:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003186:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003188:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <MX_I2C1_Init+0x50>)
 800318a:	2200      	movs	r2, #0
 800318c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800318e:	4b09      	ldr	r3, [pc, #36]	@ (80031b4 <MX_I2C1_Init+0x50>)
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003194:	4b07      	ldr	r3, [pc, #28]	@ (80031b4 <MX_I2C1_Init+0x50>)
 8003196:	2200      	movs	r2, #0
 8003198:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800319a:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <MX_I2C1_Init+0x50>)
 800319c:	2200      	movs	r2, #0
 800319e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031a0:	4804      	ldr	r0, [pc, #16]	@ (80031b4 <MX_I2C1_Init+0x50>)
 80031a2:	f001 ffb5 	bl	8005110 <HAL_I2C_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031ac:	f000 f9d4 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031b0:	bf00      	nop
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20000c40 	.word	0x20000c40
 80031b8:	40005400 	.word	0x40005400
 80031bc:	000186a0 	.word	0x000186a0

080031c0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80031c4:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <MX_I2C3_Init+0x50>)
 80031c6:	4a13      	ldr	r2, [pc, #76]	@ (8003214 <MX_I2C3_Init+0x54>)
 80031c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80031ca:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <MX_I2C3_Init+0x50>)
 80031cc:	4a12      	ldr	r2, [pc, #72]	@ (8003218 <MX_I2C3_Init+0x58>)
 80031ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <MX_I2C3_Init+0x50>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <MX_I2C3_Init+0x50>)
 80031d8:	2200      	movs	r2, #0
 80031da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <MX_I2C3_Init+0x50>)
 80031de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <MX_I2C3_Init+0x50>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80031ea:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <MX_I2C3_Init+0x50>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031f0:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <MX_I2C3_Init+0x50>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <MX_I2C3_Init+0x50>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80031fc:	4804      	ldr	r0, [pc, #16]	@ (8003210 <MX_I2C3_Init+0x50>)
 80031fe:	f001 ff87 	bl	8005110 <HAL_I2C_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003208:	f000 f9a6 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000c94 	.word	0x20000c94
 8003214:	40005c00 	.word	0x40005c00
 8003218:	000186a0 	.word	0x000186a0

0800321c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08c      	sub	sp, #48	@ 0x30
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 031c 	add.w	r3, r7, #28
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a42      	ldr	r2, [pc, #264]	@ (8003344 <HAL_I2C_MspInit+0x128>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d12c      	bne.n	8003298 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	4a40      	ldr	r2, [pc, #256]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 8003248:	f043 0302 	orr.w	r3, r3, #2
 800324c:	6313      	str	r3, [r2, #48]	@ 0x30
 800324e:	4b3e      	ldr	r3, [pc, #248]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800325a:	23c0      	movs	r3, #192	@ 0xc0
 800325c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800325e:	2312      	movs	r3, #18
 8003260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003262:	2301      	movs	r3, #1
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003266:	2303      	movs	r3, #3
 8003268:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800326a:	2304      	movs	r3, #4
 800326c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326e:	f107 031c 	add.w	r3, r7, #28
 8003272:	4619      	mov	r1, r3
 8003274:	4835      	ldr	r0, [pc, #212]	@ (800334c <HAL_I2C_MspInit+0x130>)
 8003276:	f001 fc91 	bl	8004b9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	4b32      	ldr	r3, [pc, #200]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	4a31      	ldr	r2, [pc, #196]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 8003284:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003288:	6413      	str	r3, [r2, #64]	@ 0x40
 800328a:	4b2f      	ldr	r3, [pc, #188]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003296:	e050      	b.n	800333a <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2c      	ldr	r2, [pc, #176]	@ (8003350 <HAL_I2C_MspInit+0x134>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d14b      	bne.n	800333a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	4b28      	ldr	r3, [pc, #160]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	4a27      	ldr	r2, [pc, #156]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b2:	4b25      	ldr	r3, [pc, #148]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	4b21      	ldr	r3, [pc, #132]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	4a20      	ldr	r2, [pc, #128]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032e0:	2312      	movs	r3, #18
 80032e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e4:	2301      	movs	r3, #1
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e8:	2303      	movs	r3, #3
 80032ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032ec:	2304      	movs	r3, #4
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	4619      	mov	r1, r3
 80032f6:	4817      	ldr	r0, [pc, #92]	@ (8003354 <HAL_I2C_MspInit+0x138>)
 80032f8:	f001 fc50 	bl	8004b9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003302:	2312      	movs	r3, #18
 8003304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003306:	2301      	movs	r3, #1
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330a:	2303      	movs	r3, #3
 800330c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800330e:	2304      	movs	r3, #4
 8003310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003312:	f107 031c 	add.w	r3, r7, #28
 8003316:	4619      	mov	r1, r3
 8003318:	480f      	ldr	r0, [pc, #60]	@ (8003358 <HAL_I2C_MspInit+0x13c>)
 800331a:	f001 fc3f 	bl	8004b9c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	4a08      	ldr	r2, [pc, #32]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 8003328:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800332c:	6413      	str	r3, [r2, #64]	@ 0x40
 800332e:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_I2C_MspInit+0x12c>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
}
 800333a:	bf00      	nop
 800333c:	3730      	adds	r7, #48	@ 0x30
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40005400 	.word	0x40005400
 8003348:	40023800 	.word	0x40023800
 800334c:	40020400 	.word	0x40020400
 8003350:	40005c00 	.word	0x40005c00
 8003354:	40020800 	.word	0x40020800
 8003358:	40020000 	.word	0x40020000

0800335c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a15      	ldr	r2, [pc, #84]	@ (80033c0 <HAL_I2C_MspDeInit+0x64>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10e      	bne.n	800338c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800336e:	4b15      	ldr	r3, [pc, #84]	@ (80033c4 <HAL_I2C_MspDeInit+0x68>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	4a14      	ldr	r2, [pc, #80]	@ (80033c4 <HAL_I2C_MspDeInit+0x68>)
 8003374:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003378:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800337a:	2140      	movs	r1, #64	@ 0x40
 800337c:	4812      	ldr	r0, [pc, #72]	@ (80033c8 <HAL_I2C_MspDeInit+0x6c>)
 800337e:	f001 fda1 	bl	8004ec4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003382:	2180      	movs	r1, #128	@ 0x80
 8003384:	4810      	ldr	r0, [pc, #64]	@ (80033c8 <HAL_I2C_MspDeInit+0x6c>)
 8003386:	f001 fd9d 	bl	8004ec4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800338a:	e014      	b.n	80033b6 <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0e      	ldr	r2, [pc, #56]	@ (80033cc <HAL_I2C_MspDeInit+0x70>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d10f      	bne.n	80033b6 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003396:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_I2C_MspDeInit+0x68>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	4a0a      	ldr	r2, [pc, #40]	@ (80033c4 <HAL_I2C_MspDeInit+0x68>)
 800339c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80033a0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80033a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033a6:	480a      	ldr	r0, [pc, #40]	@ (80033d0 <HAL_I2C_MspDeInit+0x74>)
 80033a8:	f001 fd8c 	bl	8004ec4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80033ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033b0:	4808      	ldr	r0, [pc, #32]	@ (80033d4 <HAL_I2C_MspDeInit+0x78>)
 80033b2:	f001 fd87 	bl	8004ec4 <HAL_GPIO_DeInit>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40005400 	.word	0x40005400
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40005c00 	.word	0x40005c00
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020000 	.word	0x40020000

080033d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033dc:	f000 fe68 	bl	80040b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033e0:	f000 f834 	bl	800344c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033e4:	f7ff fe18 	bl	8003018 <MX_GPIO_Init>
  MX_DMA_Init();
 80033e8:	f7ff fc0c 	bl	8002c04 <MX_DMA_Init>
  MX_I2C1_Init();
 80033ec:	f7ff feba 	bl	8003164 <MX_I2C1_Init>
  MX_I2C3_Init();
 80033f0:	f7ff fee6 	bl	80031c0 <MX_I2C3_Init>
  MX_SPI1_Init();
 80033f4:	f000 fb18 	bl	8003a28 <MX_SPI1_Init>
  MX_SDIO_SD_Init();
 80033f8:	f000 f98e 	bl	8003718 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80033fc:	f007 ff44 	bl	800b288 <MX_FATFS_Init>
  MX_TIM2_Init();
 8003400:	f000 fd5e 	bl	8003ec0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_SD_DeInit(&hsd);
 8003404:	480e      	ldr	r0, [pc, #56]	@ (8003440 <main+0x68>)
 8003406:	f004 fa41 	bl	800788c <HAL_SD_DeInit>
  HAL_Delay(10);
 800340a:	200a      	movs	r0, #10
 800340c:	f000 fe92 	bl	8004134 <HAL_Delay>
  if (HAL_SD_Init(&hsd) == HAL_OK) {
 8003410:	480b      	ldr	r0, [pc, #44]	@ (8003440 <main+0x68>)
 8003412:	f004 f993 	bl	800773c <HAL_SD_Init>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <main+0x5a>
      if (HAL_SD_InitCard(&hsd) == HAL_OK) {
 800341c:	4808      	ldr	r0, [pc, #32]	@ (8003440 <main+0x68>)
 800341e:	f004 f9bd 	bl	800779c <HAL_SD_InitCard>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d104      	bne.n	8003432 <main+0x5a>
          f_mount(&SDFatFS, SDPath, 1);
 8003428:	2201      	movs	r2, #1
 800342a:	4906      	ldr	r1, [pc, #24]	@ (8003444 <main+0x6c>)
 800342c:	4806      	ldr	r0, [pc, #24]	@ (8003448 <main+0x70>)
 800342e:	f009 f83f 	bl	800c4b0 <f_mount>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003432:	f7ff fc3f 	bl	8002cb4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003436:	f009 f96f 	bl	800c718 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800343a:	bf00      	nop
 800343c:	e7fd      	b.n	800343a <main+0x62>
 800343e:	bf00      	nop
 8003440:	20000ce8 	.word	0x20000ce8
 8003444:	20000f20 	.word	0x20000f20
 8003448:	20000f24 	.word	0x20000f24

0800344c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b094      	sub	sp, #80	@ 0x50
 8003450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003452:	f107 031c 	add.w	r3, r7, #28
 8003456:	2234      	movs	r2, #52	@ 0x34
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f00c ff00 	bl	8010260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003460:	f107 0308 	add.w	r3, r7, #8
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003470:	2300      	movs	r3, #0
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	4b2d      	ldr	r3, [pc, #180]	@ (800352c <SystemClock_Config+0xe0>)
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	4a2c      	ldr	r2, [pc, #176]	@ (800352c <SystemClock_Config+0xe0>)
 800347a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800347e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003480:	4b2a      	ldr	r3, [pc, #168]	@ (800352c <SystemClock_Config+0xe0>)
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800348c:	2300      	movs	r3, #0
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4b27      	ldr	r3, [pc, #156]	@ (8003530 <SystemClock_Config+0xe4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a26      	ldr	r2, [pc, #152]	@ (8003530 <SystemClock_Config+0xe4>)
 8003496:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b24      	ldr	r3, [pc, #144]	@ (8003530 <SystemClock_Config+0xe4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034a8:	2301      	movs	r3, #1
 80034aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034b2:	2302      	movs	r3, #2
 80034b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80034ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80034bc:	2308      	movs	r3, #8
 80034be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80034c0:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80034c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034c6:	2302      	movs	r3, #2
 80034c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80034ca:	2307      	movs	r3, #7
 80034cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80034ce:	2302      	movs	r3, #2
 80034d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034d2:	f107 031c 	add.w	r3, r7, #28
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 fe92 	bl	8007200 <HAL_RCC_OscConfig>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80034e2:	f000 f839 	bl	8003558 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80034e6:	f002 ff95 	bl	8006414 <HAL_PWREx_EnableOverDrive>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80034f0:	f000 f832 	bl	8003558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034f4:	230f      	movs	r3, #15
 80034f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80034f8:	2303      	movs	r3, #3
 80034fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003500:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003504:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003506:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800350a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800350c:	f107 0308 	add.w	r3, r7, #8
 8003510:	2105      	movs	r1, #5
 8003512:	4618      	mov	r0, r3
 8003514:	f002 ffce 	bl	80064b4 <HAL_RCC_ClockConfig>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800351e:	f000 f81b 	bl	8003558 <Error_Handler>
  }
}
 8003522:	bf00      	nop
 8003524:	3750      	adds	r7, #80	@ 0x50
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
 8003530:	40007000 	.word	0x40007000

08003534 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003546:	f000 fdd5 	bl	80040f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40010000 	.word	0x40010000

08003558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800355c:	b672      	cpsid	i
}
 800355e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <Error_Handler+0x8>

08003564 <set_config>:

/******************************************************************************/
/*!            Functions                                        */

static int8_t set_config(struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af02      	add	r7, sp, #8
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
    //BMP5 sensörünü ölçüm yapmaya hazır hale getirecek şekilde konfigüre etmek
    int8_t rslt;
    struct bmp5_iir_config set_iir_cfg;
    struct bmp5_int_source_select int_source_select;

    rslt = bmp5_set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 800356e:	6839      	ldr	r1, [r7, #0]
 8003570:	2000      	movs	r0, #0
 8003572:	f7fe fcbb 	bl	8001eec <bmp5_set_power_mode>
 8003576:	4603      	mov	r3, r0
 8003578:	75fb      	strb	r3, [r7, #23]
    //bmp5_error_codes_print_result("bmp5_set_power_mode1", rslt);

    if (rslt == BMP5_OK)
 800357a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d148      	bne.n	8003614 <set_config+0xb0>
    {
        /* Get default odr */
        rslt = bmp5_get_osr_odr_press_config(osr_odr_press_cfg, dev);
 8003582:	6839      	ldr	r1, [r7, #0]
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fe fe51 	bl	800222c <bmp5_get_osr_odr_press_config>
 800358a:	4603      	mov	r3, r0
 800358c:	75fb      	strb	r3, [r7, #23]
        //şu anki sıcaklık/basınç oversampling ve data rate bilgileri okunur.
        //bmp5_error_codes_print_result("bmp5_get_osr_odr_press_config", rslt);

        if (rslt == BMP5_OK)
 800358e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d108      	bne.n	80035a8 <set_config+0x44>
        {
            /* Enable pressure */
            osr_odr_press_cfg->press_en = BMP5_ENABLE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	709a      	strb	r2, [r3, #2]
            rslt = bmp5_set_osr_odr_press_config(osr_odr_press_cfg, dev);
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fe fe80 	bl	80022a4 <bmp5_set_osr_odr_press_config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	75fb      	strb	r3, [r7, #23]
            //Basınç ölçümünü etkinleştir ve yeni ayarı yaz
            //bmp5_error_codes_print_result("bmp5_set_osr_odr_press_config", rslt);
        }

        if (rslt == BMP5_OK)
 80035a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10f      	bne.n	80035d0 <set_config+0x6c>
        {
            //IIR (Filtre) ayarlarını yap:
            set_iir_cfg.set_iir_t = BMP5_IIR_FILTER_COEFF_1;
 80035b0:	2301      	movs	r3, #1
 80035b2:	743b      	strb	r3, [r7, #16]
            set_iir_cfg.set_iir_p = BMP5_IIR_FILTER_COEFF_1; //COEFF_1 = en hafif filtreleme (hızlı tepki, daha az yumuşatma).
 80035b4:	2301      	movs	r3, #1
 80035b6:	747b      	strb	r3, [r7, #17]
            set_iir_cfg.shdw_set_iir_t = BMP5_ENABLE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	74bb      	strb	r3, [r7, #18]
            set_iir_cfg.shdw_set_iir_p = BMP5_ENABLE;
 80035bc:	2301      	movs	r3, #1
 80035be:	74fb      	strb	r3, [r7, #19]

            rslt = bmp5_set_iir_config(&set_iir_cfg, dev);
 80035c0:	f107 0310 	add.w	r3, r7, #16
 80035c4:	6839      	ldr	r1, [r7, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe ff26 	bl	8002418 <bmp5_set_iir_config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	75fb      	strb	r3, [r7, #23]
            //bmp5_error_codes_print_result("bmp5_set_iir_config", rslt);
        }

        if (rslt == BMP5_OK)
 80035d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d117      	bne.n	8003608 <set_config+0xa4>
        {
            rslt = bmp5_configure_interrupt(BMP5_PULSED, BMP5_ACTIVE_HIGH, BMP5_INTR_PUSH_PULL, BMP5_INTR_ENABLE, dev);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2301      	movs	r3, #1
 80035de:	2200      	movs	r2, #0
 80035e0:	2101      	movs	r1, #1
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fe fd99 	bl	800211a <bmp5_configure_interrupt>
 80035e8:	4603      	mov	r3, r0
 80035ea:	75fb      	strb	r3, [r7, #23]
            //bmp5_error_codes_print_result("bmp5_configure_interrupt", rslt);

            if (rslt == BMP5_OK)
 80035ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <set_config+0xa4>
            {
                /* Note : Select INT_SOURCE after configuring interrupt */
                int_source_select.drdy_en = BMP5_ENABLE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	733b      	strb	r3, [r7, #12]
                rslt = bmp5_int_source_select(&int_source_select, dev);
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	6839      	ldr	r1, [r7, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe fd22 	bl	8002048 <bmp5_int_source_select>
 8003604:	4603      	mov	r3, r0
 8003606:	75fb      	strb	r3, [r7, #23]
            }
        }

        /* Set powermode as continous */
        //Sensörü sürekli ölçüm moduna al (continuous):
        rslt = bmp5_set_power_mode(BMP5_POWERMODE_CONTINOUS, dev);
 8003608:	6839      	ldr	r1, [r7, #0]
 800360a:	2003      	movs	r0, #3
 800360c:	f7fe fc6e 	bl	8001eec <bmp5_set_power_mode>
 8003610:	4603      	mov	r3, r0
 8003612:	75fb      	strb	r3, [r7, #23]
        //bmp5_error_codes_print_result("bmp5_set_power_mode", rslt);
    }

    return rslt;
 8003614:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <get_sensor_data>:

static int8_t get_sensor_data(const struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 8003620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003622:	b087      	sub	sp, #28
 8003624:	af02      	add	r7, sp, #8
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
	int8_t rslt = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
	    uint8_t idx = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	73bb      	strb	r3, [r7, #14]
	    extern struct bmp5_sensor_data sensor_data;

	    while (idx < 3)
 8003632:	e02d      	b.n	8003690 <get_sensor_data+0x70>
	    {
            //BMP5 sensöründen 3 defa ölçüm alarak sıcaklık ve basınç verilerini okumak
	        rslt = bmp5_get_sensor_data(&sensor_data, osr_odr_press_cfg, dev);
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	481a      	ldr	r0, [pc, #104]	@ (80036a4 <get_sensor_data+0x84>)
 800363a:	f7fe fca3 	bl	8001f84 <bmp5_get_sensor_data>
 800363e:	4603      	mov	r3, r0
 8003640:	73fb      	strb	r3, [r7, #15]
	        bmp5_error_codes_print_result("bmp5_get_sensor_data", rslt);
 8003642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003646:	4619      	mov	r1, r3
 8003648:	4817      	ldr	r0, [pc, #92]	@ (80036a8 <get_sensor_data+0x88>)
 800364a:	f7ff f9eb 	bl	8002a24 <bmp5_error_codes_print_result>

	        if (rslt == BMP5_OK)
 800364e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d119      	bne.n	800368a <get_sensor_data+0x6a>
	        {
	#ifdef BMP5_USE_FIXED_POINT
	            //printf("%d, %lu, %ld\n", idx, pressure, temperature);
	#else
	            printf("%d, %f, %f\n", idx, sensor_data.pressure, sensor_data.temperature);
 8003656:	7bbe      	ldrb	r6, [r7, #14]
 8003658:	4b12      	ldr	r3, [pc, #72]	@ (80036a4 <get_sensor_data+0x84>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fc ff93 	bl	8000588 <__aeabi_f2d>
 8003662:	4604      	mov	r4, r0
 8003664:	460d      	mov	r5, r1
 8003666:	4b0f      	ldr	r3, [pc, #60]	@ (80036a4 <get_sensor_data+0x84>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ff8c 	bl	8000588 <__aeabi_f2d>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	e9cd 2300 	strd	r2, r3, [sp]
 8003678:	4622      	mov	r2, r4
 800367a:	462b      	mov	r3, r5
 800367c:	4631      	mov	r1, r6
 800367e:	480b      	ldr	r0, [pc, #44]	@ (80036ac <get_sensor_data+0x8c>)
 8003680:	f00c fc70 	bl	800ff64 <iprintf>
	#endif
	            idx++;
 8003684:	7bbb      	ldrb	r3, [r7, #14]
 8003686:	3301      	adds	r3, #1
 8003688:	73bb      	strb	r3, [r7, #14]
	        }

	        HAL_Delay(10);  // 20ms bekle, sensör ODR'sine göre ayarla
 800368a:	200a      	movs	r0, #10
 800368c:	f000 fd52 	bl	8004134 <HAL_Delay>
	    while (idx < 3)
 8003690:	7bbb      	ldrb	r3, [r7, #14]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d9ce      	bls.n	8003634 <get_sensor_data+0x14>
	    }

	    return rslt;
 8003696:	f997 300f 	ldrsb.w	r3, [r7, #15]
	}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000380 	.word	0x20000380
 80036a8:	0801276c 	.word	0x0801276c
 80036ac:	08012784 	.word	0x08012784

080036b0 <BMP581>:

void BMP581(void){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
int8_t rslt;
	      struct bmp5_dev dev;
	      struct bmp5_osr_odr_press_config osr_odr_press_cfg = { 0 };
 80036b6:	2300      	movs	r3, #0
 80036b8:	603b      	str	r3, [r7, #0]

	      /* Interface reference is given as a parameter
	       * For I2C : BMP5_I2C_INTF
	       * For SPI : BMP5_SPI_INTF
	       */
	      rslt = init_bmp5_interface(&dev, BMP5_I2C_INTF);
 80036ba:	1d3b      	adds	r3, r7, #4
 80036bc:	2101      	movs	r1, #1
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fa2e 	bl	8002b20 <init_bmp5_interface>
 80036c4:	4603      	mov	r3, r0
 80036c6:	77fb      	strb	r3, [r7, #31]
	      bmp5_error_codes_print_result("bmp5_interface_init", rslt);
 80036c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036cc:	4619      	mov	r1, r3
 80036ce:	4811      	ldr	r0, [pc, #68]	@ (8003714 <BMP581+0x64>)
 80036d0:	f7ff f9a8 	bl	8002a24 <bmp5_error_codes_print_result>

	      if (rslt == BMP5_OK)
 80036d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d116      	bne.n	800370a <BMP581+0x5a>
	      {
	          rslt = bmp5_init(&dev);
 80036dc:	1d3b      	adds	r3, r7, #4
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fa76 	bl	8001bd0 <bmp5_init>
 80036e4:	4603      	mov	r3, r0
 80036e6:	77fb      	strb	r3, [r7, #31]
	          //bmp5_error_codes_print_result("bmp5_init", rslt);
	          rslt = set_config(&osr_odr_press_cfg, &dev);
 80036e8:	1d3a      	adds	r2, r7, #4
 80036ea:	463b      	mov	r3, r7
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff ff38 	bl	8003564 <set_config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	77fb      	strb	r3, [r7, #31]
	          //bmp5_error_codes_print_result("set_config", rslt);
	          rslt = get_sensor_data(&osr_odr_press_cfg, &dev);
 80036f8:	1d3a      	adds	r2, r7, #4
 80036fa:	463b      	mov	r3, r7
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff ff8e 	bl	8003620 <get_sensor_data>
 8003704:	4603      	mov	r3, r0
 8003706:	77fb      	strb	r3, [r7, #31]
	          //bmp5_error_codes_print_result("get_sensor_data", rslt);
	          
	      }
	      return rslt;
 8003708:	bf00      	nop
 800370a:	bf00      	nop
        }
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	08012790 	.word	0x08012790

08003718 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800371c:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <MX_SDIO_SD_Init+0x38>)
 800371e:	4a0d      	ldr	r2, [pc, #52]	@ (8003754 <MX_SDIO_SD_Init+0x3c>)
 8003720:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003722:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <MX_SDIO_SD_Init+0x38>)
 8003724:	2200      	movs	r2, #0
 8003726:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003728:	4b09      	ldr	r3, [pc, #36]	@ (8003750 <MX_SDIO_SD_Init+0x38>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800372e:	4b08      	ldr	r3, [pc, #32]	@ (8003750 <MX_SDIO_SD_Init+0x38>)
 8003730:	2200      	movs	r2, #0
 8003732:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003734:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <MX_SDIO_SD_Init+0x38>)
 8003736:	2200      	movs	r2, #0
 8003738:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800373a:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <MX_SDIO_SD_Init+0x38>)
 800373c:	2200      	movs	r2, #0
 800373e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003740:	4b03      	ldr	r3, [pc, #12]	@ (8003750 <MX_SDIO_SD_Init+0x38>)
 8003742:	2200      	movs	r2, #0
 8003744:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003746:	bf00      	nop
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	20000ce8 	.word	0x20000ce8
 8003754:	40012c00 	.word	0x40012c00

08003758 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b0a2      	sub	sp, #136	@ 0x88
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003770:	f107 0318 	add.w	r3, r7, #24
 8003774:	225c      	movs	r2, #92	@ 0x5c
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f00c fd71 	bl	8010260 <memset>
  if(sdHandle->Instance==SDIO)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a84      	ldr	r2, [pc, #528]	@ (8003994 <HAL_SD_MspInit+0x23c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	f040 8100 	bne.w	800398a <HAL_SD_MspInit+0x232>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800378a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800378e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003790:	2300      	movs	r3, #0
 8003792:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003794:	2300      	movs	r3, #0
 8003796:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003798:	f107 0318 	add.w	r3, r7, #24
 800379c:	4618      	mov	r0, r3
 800379e:	f002 ffd5 	bl	800674c <HAL_RCCEx_PeriphCLKConfig>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80037a8:	f7ff fed6 	bl	8003558 <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	4b79      	ldr	r3, [pc, #484]	@ (8003998 <HAL_SD_MspInit+0x240>)
 80037b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b4:	4a78      	ldr	r2, [pc, #480]	@ (8003998 <HAL_SD_MspInit+0x240>)
 80037b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80037bc:	4b76      	ldr	r3, [pc, #472]	@ (8003998 <HAL_SD_MspInit+0x240>)
 80037be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	4b72      	ldr	r3, [pc, #456]	@ (8003998 <HAL_SD_MspInit+0x240>)
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	4a71      	ldr	r2, [pc, #452]	@ (8003998 <HAL_SD_MspInit+0x240>)
 80037d2:	f043 0302 	orr.w	r3, r3, #2
 80037d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003998 <HAL_SD_MspInit+0x240>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003998 <HAL_SD_MspInit+0x240>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003998 <HAL_SD_MspInit+0x240>)
 80037ee:	f043 0304 	orr.w	r3, r3, #4
 80037f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f4:	4b68      	ldr	r3, [pc, #416]	@ (8003998 <HAL_SD_MspInit+0x240>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	4b64      	ldr	r3, [pc, #400]	@ (8003998 <HAL_SD_MspInit+0x240>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003808:	4a63      	ldr	r2, [pc, #396]	@ (8003998 <HAL_SD_MspInit+0x240>)
 800380a:	f043 0308 	orr.w	r3, r3, #8
 800380e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003810:	4b61      	ldr	r3, [pc, #388]	@ (8003998 <HAL_SD_MspInit+0x240>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800381c:	2304      	movs	r3, #4
 800381e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003820:	2302      	movs	r3, #2
 8003822:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003824:	2301      	movs	r3, #1
 8003826:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003828:	2303      	movs	r3, #3
 800382a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800382e:	230c      	movs	r3, #12
 8003830:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003834:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003838:	4619      	mov	r1, r3
 800383a:	4858      	ldr	r0, [pc, #352]	@ (800399c <HAL_SD_MspInit+0x244>)
 800383c:	f001 f9ae 	bl	8004b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003844:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003846:	2302      	movs	r3, #2
 8003848:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800384a:	2301      	movs	r3, #1
 800384c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384e:	2303      	movs	r3, #3
 8003850:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003854:	230c      	movs	r3, #12
 8003856:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800385a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800385e:	4619      	mov	r1, r3
 8003860:	484f      	ldr	r0, [pc, #316]	@ (80039a0 <HAL_SD_MspInit+0x248>)
 8003862:	f001 f99b 	bl	8004b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003866:	2304      	movs	r3, #4
 8003868:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386a:	2302      	movs	r3, #2
 800386c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003872:	2303      	movs	r3, #3
 8003874:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003878:	230c      	movs	r3, #12
 800387a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800387e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003882:	4619      	mov	r1, r3
 8003884:	4847      	ldr	r0, [pc, #284]	@ (80039a4 <HAL_SD_MspInit+0x24c>)
 8003886:	f001 f989 	bl	8004b9c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800388a:	4b47      	ldr	r3, [pc, #284]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 800388c:	4a47      	ldr	r2, [pc, #284]	@ (80039ac <HAL_SD_MspInit+0x254>)
 800388e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003890:	4b45      	ldr	r3, [pc, #276]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 8003892:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003896:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003898:	4b43      	ldr	r3, [pc, #268]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800389e:	4b42      	ldr	r3, [pc, #264]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038a4:	4b40      	ldr	r3, [pc, #256]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038aa:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038ac:	4b3e      	ldr	r3, [pc, #248]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038b2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038b4:	4b3c      	ldr	r3, [pc, #240]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80038ba:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80038bc:	4b3a      	ldr	r3, [pc, #232]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038be:	2220      	movs	r2, #32
 80038c0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80038c2:	4b39      	ldr	r3, [pc, #228]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80038c8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80038ca:	4b37      	ldr	r3, [pc, #220]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038cc:	2204      	movs	r2, #4
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80038d0:	4b35      	ldr	r3, [pc, #212]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038d2:	2203      	movs	r2, #3
 80038d4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80038d6:	4b34      	ldr	r3, [pc, #208]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80038de:	4b32      	ldr	r3, [pc, #200]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038e0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80038e4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80038e6:	4830      	ldr	r0, [pc, #192]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038e8:	f000 fd5c 	bl	80043a4 <HAL_DMA_Init>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80038f2:	f7ff fe31 	bl	8003558 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a2b      	ldr	r2, [pc, #172]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80038fc:	4a2a      	ldr	r2, [pc, #168]	@ (80039a8 <HAL_SD_MspInit+0x250>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003902:	4b2b      	ldr	r3, [pc, #172]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 8003904:	4a2b      	ldr	r2, [pc, #172]	@ (80039b4 <HAL_SD_MspInit+0x25c>)
 8003906:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003908:	4b29      	ldr	r3, [pc, #164]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 800390a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800390e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003910:	4b27      	ldr	r3, [pc, #156]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 8003912:	2240      	movs	r2, #64	@ 0x40
 8003914:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003916:	4b26      	ldr	r3, [pc, #152]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 8003918:	2200      	movs	r2, #0
 800391a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800391c:	4b24      	ldr	r3, [pc, #144]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 800391e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003922:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003924:	4b22      	ldr	r3, [pc, #136]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 8003926:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800392a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800392c:	4b20      	ldr	r3, [pc, #128]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 800392e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003932:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003934:	4b1e      	ldr	r3, [pc, #120]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 8003936:	2220      	movs	r2, #32
 8003938:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800393a:	4b1d      	ldr	r3, [pc, #116]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 800393c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003940:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003942:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 8003944:	2204      	movs	r2, #4
 8003946:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003948:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 800394a:	2203      	movs	r2, #3
 800394c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800394e:	4b18      	ldr	r3, [pc, #96]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 8003950:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003954:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003956:	4b16      	ldr	r3, [pc, #88]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 8003958:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800395c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800395e:	4814      	ldr	r0, [pc, #80]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 8003960:	f000 fd20 	bl	80043a4 <HAL_DMA_Init>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_SD_MspInit+0x216>
    {
      Error_Handler();
 800396a:	f7ff fdf5 	bl	8003558 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a0f      	ldr	r2, [pc, #60]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 8003972:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003974:	4a0e      	ldr	r2, [pc, #56]	@ (80039b0 <HAL_SD_MspInit+0x258>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800397a:	2200      	movs	r2, #0
 800397c:	2105      	movs	r1, #5
 800397e:	2031      	movs	r0, #49	@ 0x31
 8003980:	f000 fcd8 	bl	8004334 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003984:	2031      	movs	r0, #49	@ 0x31
 8003986:	f000 fcf1 	bl	800436c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800398a:	bf00      	nop
 800398c:	3788      	adds	r7, #136	@ 0x88
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40012c00 	.word	0x40012c00
 8003998:	40023800 	.word	0x40023800
 800399c:	40020400 	.word	0x40020400
 80039a0:	40020800 	.word	0x40020800
 80039a4:	40020c00 	.word	0x40020c00
 80039a8:	20000d6c 	.word	0x20000d6c
 80039ac:	40026458 	.word	0x40026458
 80039b0:	20000dcc 	.word	0x20000dcc
 80039b4:	400264a0 	.word	0x400264a0

080039b8 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

  if(sdHandle->Instance==SDIO)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a13      	ldr	r2, [pc, #76]	@ (8003a14 <HAL_SD_MspDeInit+0x5c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d11f      	bne.n	8003a0a <HAL_SD_MspDeInit+0x52>
  {
  /* USER CODE BEGIN SDIO_MspDeInit 0 */

  /* USER CODE END SDIO_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDIO_CLK_DISABLE();
 80039ca:	4b13      	ldr	r3, [pc, #76]	@ (8003a18 <HAL_SD_MspDeInit+0x60>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	4a12      	ldr	r2, [pc, #72]	@ (8003a18 <HAL_SD_MspDeInit+0x60>)
 80039d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039d4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80039d6:	2104      	movs	r1, #4
 80039d8:	4810      	ldr	r0, [pc, #64]	@ (8003a1c <HAL_SD_MspDeInit+0x64>)
 80039da:	f001 fa73 	bl	8004ec4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 80039de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039e2:	480f      	ldr	r0, [pc, #60]	@ (8003a20 <HAL_SD_MspDeInit+0x68>)
 80039e4:	f001 fa6e 	bl	8004ec4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80039e8:	2104      	movs	r1, #4
 80039ea:	480e      	ldr	r0, [pc, #56]	@ (8003a24 <HAL_SD_MspDeInit+0x6c>)
 80039ec:	f001 fa6a 	bl	8004ec4 <HAL_GPIO_DeInit>

    /* SDIO DMA DeInit */
    HAL_DMA_DeInit(sdHandle->hdmarx);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fd83 	bl	8004500 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(sdHandle->hdmatx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fd7e 	bl	8004500 <HAL_DMA_DeInit>

    /* SDIO interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDIO_IRQn);
 8003a04:	2031      	movs	r0, #49	@ 0x31
 8003a06:	f000 fcbf 	bl	8004388 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDIO_MspDeInit 1 */

  /* USER CODE END SDIO_MspDeInit 1 */
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40020400 	.word	0x40020400
 8003a20:	40020800 	.word	0x40020800
 8003a24:	40020c00 	.word	0x40020c00

08003a28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003a2c:	4b17      	ldr	r3, [pc, #92]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a2e:	4a18      	ldr	r2, [pc, #96]	@ (8003a90 <MX_SPI1_Init+0x68>)
 8003a30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a32:	4b16      	ldr	r3, [pc, #88]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a3a:	4b14      	ldr	r3, [pc, #80]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a40:	4b12      	ldr	r3, [pc, #72]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a46:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a52:	4b0e      	ldr	r3, [pc, #56]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a60:	4b0a      	ldr	r3, [pc, #40]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a66:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a6c:	4b07      	ldr	r3, [pc, #28]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a72:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a74:	220a      	movs	r2, #10
 8003a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a78:	4804      	ldr	r0, [pc, #16]	@ (8003a8c <MX_SPI1_Init+0x64>)
 8003a7a:	f004 ff9e 	bl	80089ba <HAL_SPI_Init>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a84:	f7ff fd68 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a88:	bf00      	nop
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000e2c 	.word	0x20000e2c
 8003a90:	40013000 	.word	0x40013000

08003a94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08a      	sub	sp, #40	@ 0x28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b28 <HAL_SPI_MspInit+0x94>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d133      	bne.n	8003b1e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	4b1c      	ldr	r3, [pc, #112]	@ (8003b2c <HAL_SPI_MspInit+0x98>)
 8003abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abe:	4a1b      	ldr	r2, [pc, #108]	@ (8003b2c <HAL_SPI_MspInit+0x98>)
 8003ac0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ac6:	4b19      	ldr	r3, [pc, #100]	@ (8003b2c <HAL_SPI_MspInit+0x98>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	4b15      	ldr	r3, [pc, #84]	@ (8003b2c <HAL_SPI_MspInit+0x98>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	4a14      	ldr	r2, [pc, #80]	@ (8003b2c <HAL_SPI_MspInit+0x98>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ae2:	4b12      	ldr	r3, [pc, #72]	@ (8003b2c <HAL_SPI_MspInit+0x98>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003aee:	23e0      	movs	r3, #224	@ 0xe0
 8003af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af2:	2302      	movs	r3, #2
 8003af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afa:	2303      	movs	r3, #3
 8003afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003afe:	2305      	movs	r3, #5
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b02:	f107 0314 	add.w	r3, r7, #20
 8003b06:	4619      	mov	r1, r3
 8003b08:	4809      	ldr	r0, [pc, #36]	@ (8003b30 <HAL_SPI_MspInit+0x9c>)
 8003b0a:	f001 f847 	bl	8004b9c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2105      	movs	r1, #5
 8003b12:	2023      	movs	r0, #35	@ 0x23
 8003b14:	f000 fc0e 	bl	8004334 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003b18:	2023      	movs	r0, #35	@ 0x23
 8003b1a:	f000 fc27 	bl	800436c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003b1e:	bf00      	nop
 8003b20:	3728      	adds	r7, #40	@ 0x28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40013000 	.word	0x40013000
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40020000 	.word	0x40020000

08003b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <HAL_MspInit+0x54>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	4a11      	ldr	r2, [pc, #68]	@ (8003b88 <HAL_MspInit+0x54>)
 8003b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b88 <HAL_MspInit+0x54>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <HAL_MspInit+0x54>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b88 <HAL_MspInit+0x54>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b66:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <HAL_MspInit+0x54>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b72:	2200      	movs	r2, #0
 8003b74:	210f      	movs	r1, #15
 8003b76:	f06f 0001 	mvn.w	r0, #1
 8003b7a:	f000 fbdb 	bl	8004334 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800

08003b8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08c      	sub	sp, #48	@ 0x30
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8003c60 <HAL_InitTick+0xd4>)
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba4:	4a2e      	ldr	r2, [pc, #184]	@ (8003c60 <HAL_InitTick+0xd4>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bac:	4b2c      	ldr	r3, [pc, #176]	@ (8003c60 <HAL_InitTick+0xd4>)
 8003bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003bb8:	f107 020c 	add.w	r2, r7, #12
 8003bbc:	f107 0310 	add.w	r3, r7, #16
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f002 fd90 	bl	80066e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003bc8:	f002 fd7a 	bl	80066c0 <HAL_RCC_GetPCLK2Freq>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd4:	4a23      	ldr	r2, [pc, #140]	@ (8003c64 <HAL_InitTick+0xd8>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	0c9b      	lsrs	r3, r3, #18
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003be0:	4b21      	ldr	r3, [pc, #132]	@ (8003c68 <HAL_InitTick+0xdc>)
 8003be2:	4a22      	ldr	r2, [pc, #136]	@ (8003c6c <HAL_InitTick+0xe0>)
 8003be4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003be6:	4b20      	ldr	r3, [pc, #128]	@ (8003c68 <HAL_InitTick+0xdc>)
 8003be8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003bec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003bee:	4a1e      	ldr	r2, [pc, #120]	@ (8003c68 <HAL_InitTick+0xdc>)
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c68 <HAL_InitTick+0xdc>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003c68 <HAL_InitTick+0xdc>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c00:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <HAL_InitTick+0xdc>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003c06:	4818      	ldr	r0, [pc, #96]	@ (8003c68 <HAL_InitTick+0xdc>)
 8003c08:	f005 fdd4 	bl	80097b4 <HAL_TIM_Base_Init>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003c12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11b      	bne.n	8003c52 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003c1a:	4813      	ldr	r0, [pc, #76]	@ (8003c68 <HAL_InitTick+0xdc>)
 8003c1c:	f005 fe1a 	bl	8009854 <HAL_TIM_Base_Start_IT>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003c26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d111      	bne.n	8003c52 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c2e:	2019      	movs	r0, #25
 8003c30:	f000 fb9c 	bl	800436c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b0f      	cmp	r3, #15
 8003c38:	d808      	bhi.n	8003c4c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	2019      	movs	r0, #25
 8003c40:	f000 fb78 	bl	8004334 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c44:	4a0a      	ldr	r2, [pc, #40]	@ (8003c70 <HAL_InitTick+0xe4>)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e002      	b.n	8003c52 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003c52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3730      	adds	r7, #48	@ 0x30
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800
 8003c64:	431bde83 	.word	0x431bde83
 8003c68:	20000e84 	.word	0x20000e84
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	20000004 	.word	0x20000004

08003c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <NMI_Handler+0x4>

08003c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c80:	bf00      	nop
 8003c82:	e7fd      	b.n	8003c80 <HardFault_Handler+0x4>

08003c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <MemManage_Handler+0x4>

08003c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c90:	bf00      	nop
 8003c92:	e7fd      	b.n	8003c90 <BusFault_Handler+0x4>

08003c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c98:	bf00      	nop
 8003c9a:	e7fd      	b.n	8003c98 <UsageFault_Handler+0x4>

08003c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cb0:	4802      	ldr	r0, [pc, #8]	@ (8003cbc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003cb2:	f005 ff61 	bl	8009b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000e84 	.word	0x20000e84

08003cc0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003cc4:	4802      	ldr	r0, [pc, #8]	@ (8003cd0 <SPI1_IRQHandler+0x10>)
 8003cc6:	f005 fb07 	bl	80092d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000e2c 	.word	0x20000e2c

08003cd4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003cd8:	4802      	ldr	r0, [pc, #8]	@ (8003ce4 <SDIO_IRQHandler+0x10>)
 8003cda:	f003 ffb9 	bl	8007c50 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000ce8 	.word	0x20000ce8

08003ce8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003cec:	4802      	ldr	r0, [pc, #8]	@ (8003cf8 <DMA2_Stream3_IRQHandler+0x10>)
 8003cee:	f000 fcdf 	bl	80046b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000d6c 	.word	0x20000d6c

08003cfc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003d00:	4802      	ldr	r0, [pc, #8]	@ (8003d0c <DMA2_Stream6_IRQHandler+0x10>)
 8003d02:	f000 fcd5 	bl	80046b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000dcc 	.word	0x20000dcc

08003d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return 1;
 8003d14:	2301      	movs	r3, #1
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <_kill>:

int _kill(int pid, int sig)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d2a:	f00c fb49 	bl	80103c0 <__errno>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2216      	movs	r2, #22
 8003d32:	601a      	str	r2, [r3, #0]
  return -1;
 8003d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <_exit>:

void _exit (int status)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d48:	f04f 31ff 	mov.w	r1, #4294967295
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ffe7 	bl	8003d20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d52:	bf00      	nop
 8003d54:	e7fd      	b.n	8003d52 <_exit+0x12>

08003d56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e00a      	b.n	8003d7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d68:	f3af 8000 	nop.w
 8003d6c:	4601      	mov	r1, r0
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	60ba      	str	r2, [r7, #8]
 8003d74:	b2ca      	uxtb	r2, r1
 8003d76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	dbf0      	blt.n	8003d68 <_read+0x12>
  }

  return len;
 8003d86:	687b      	ldr	r3, [r7, #4]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	e009      	b.n	8003db6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	60ba      	str	r2, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3301      	adds	r3, #1
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	dbf1      	blt.n	8003da2 <_write+0x12>
  }
  return len;
 8003dbe:	687b      	ldr	r3, [r7, #4]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_close>:

int _close(int file)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003df0:	605a      	str	r2, [r3, #4]
  return 0;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <_isatty>:

int _isatty(int file)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e08:	2301      	movs	r3, #1
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e38:	4a14      	ldr	r2, [pc, #80]	@ (8003e8c <_sbrk+0x5c>)
 8003e3a:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <_sbrk+0x60>)
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e44:	4b13      	ldr	r3, [pc, #76]	@ (8003e94 <_sbrk+0x64>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e4c:	4b11      	ldr	r3, [pc, #68]	@ (8003e94 <_sbrk+0x64>)
 8003e4e:	4a12      	ldr	r2, [pc, #72]	@ (8003e98 <_sbrk+0x68>)
 8003e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e52:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <_sbrk+0x64>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4413      	add	r3, r2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d207      	bcs.n	8003e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e60:	f00c faae 	bl	80103c0 <__errno>
 8003e64:	4603      	mov	r3, r0
 8003e66:	220c      	movs	r2, #12
 8003e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	e009      	b.n	8003e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e70:	4b08      	ldr	r3, [pc, #32]	@ (8003e94 <_sbrk+0x64>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e76:	4b07      	ldr	r3, [pc, #28]	@ (8003e94 <_sbrk+0x64>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	4a05      	ldr	r2, [pc, #20]	@ (8003e94 <_sbrk+0x64>)
 8003e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e82:	68fb      	ldr	r3, [r7, #12]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20020000 	.word	0x20020000
 8003e90:	00000400 	.word	0x00000400
 8003e94:	20000ecc 	.word	0x20000ecc
 8003e98:	20005078 	.word	0x20005078

08003e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ea0:	4b06      	ldr	r3, [pc, #24]	@ (8003ebc <SystemInit+0x20>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea6:	4a05      	ldr	r2, [pc, #20]	@ (8003ebc <SystemInit+0x20>)
 8003ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08e      	sub	sp, #56	@ 0x38
 8003ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ec6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	609a      	str	r2, [r3, #8]
 8003ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ed4:	f107 0320 	add.w	r3, r7, #32
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
 8003eec:	615a      	str	r2, [r3, #20]
 8003eee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa8 <MX_TIM2_Init+0xe8>)
 8003ef2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ef6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa8 <MX_TIM2_Init+0xe8>)
 8003efa:	f240 628f 	movw	r2, #1679	@ 0x68f
 8003efe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f00:	4b29      	ldr	r3, [pc, #164]	@ (8003fa8 <MX_TIM2_Init+0xe8>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8003f06:	4b28      	ldr	r3, [pc, #160]	@ (8003fa8 <MX_TIM2_Init+0xe8>)
 8003f08:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8003f0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f0e:	4b26      	ldr	r3, [pc, #152]	@ (8003fa8 <MX_TIM2_Init+0xe8>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f14:	4b24      	ldr	r3, [pc, #144]	@ (8003fa8 <MX_TIM2_Init+0xe8>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f1a:	4823      	ldr	r0, [pc, #140]	@ (8003fa8 <MX_TIM2_Init+0xe8>)
 8003f1c:	f005 fc4a 	bl	80097b4 <HAL_TIM_Base_Init>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003f26:	f7ff fb17 	bl	8003558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f34:	4619      	mov	r1, r3
 8003f36:	481c      	ldr	r0, [pc, #112]	@ (8003fa8 <MX_TIM2_Init+0xe8>)
 8003f38:	f005 ffd0 	bl	8009edc <HAL_TIM_ConfigClockSource>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003f42:	f7ff fb09 	bl	8003558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003f46:	4818      	ldr	r0, [pc, #96]	@ (8003fa8 <MX_TIM2_Init+0xe8>)
 8003f48:	f005 fcf4 	bl	8009934 <HAL_TIM_PWM_Init>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003f52:	f7ff fb01 	bl	8003558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f56:	2300      	movs	r3, #0
 8003f58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f5e:	f107 0320 	add.w	r3, r7, #32
 8003f62:	4619      	mov	r1, r3
 8003f64:	4810      	ldr	r0, [pc, #64]	@ (8003fa8 <MX_TIM2_Init+0xe8>)
 8003f66:	f006 fbbf 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003f70:	f7ff faf2 	bl	8003558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f74:	2360      	movs	r3, #96	@ 0x60
 8003f76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f84:	1d3b      	adds	r3, r7, #4
 8003f86:	2200      	movs	r2, #0
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4807      	ldr	r0, [pc, #28]	@ (8003fa8 <MX_TIM2_Init+0xe8>)
 8003f8c:	f005 fee4 	bl	8009d58 <HAL_TIM_PWM_ConfigChannel>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003f96:	f7ff fadf 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003f9a:	4803      	ldr	r0, [pc, #12]	@ (8003fa8 <MX_TIM2_Init+0xe8>)
 8003f9c:	f000 f826 	bl	8003fec <HAL_TIM_MspPostInit>

}
 8003fa0:	bf00      	nop
 8003fa2:	3738      	adds	r7, #56	@ 0x38
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000ed0 	.word	0x20000ed0

08003fac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fbc:	d10d      	bne.n	8003fda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	4b09      	ldr	r3, [pc, #36]	@ (8003fe8 <HAL_TIM_Base_MspInit+0x3c>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	4a08      	ldr	r2, [pc, #32]	@ (8003fe8 <HAL_TIM_Base_MspInit+0x3c>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fce:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <HAL_TIM_Base_MspInit+0x3c>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003fda:	bf00      	nop
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800

08003fec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff4:	f107 030c 	add.w	r3, r7, #12
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400c:	d11e      	bne.n	800404c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <HAL_TIM_MspPostInit+0x68>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004016:	4a0f      	ldr	r2, [pc, #60]	@ (8004054 <HAL_TIM_MspPostInit+0x68>)
 8004018:	f043 0302 	orr.w	r3, r3, #2
 800401c:	6313      	str	r3, [r2, #48]	@ 0x30
 800401e:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <HAL_TIM_MspPostInit+0x68>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800402a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800402e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004030:	2302      	movs	r3, #2
 8004032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004038:	2300      	movs	r3, #0
 800403a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800403c:	2301      	movs	r3, #1
 800403e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004040:	f107 030c 	add.w	r3, r7, #12
 8004044:	4619      	mov	r1, r3
 8004046:	4804      	ldr	r0, [pc, #16]	@ (8004058 <HAL_TIM_MspPostInit+0x6c>)
 8004048:	f000 fda8 	bl	8004b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800404c:	bf00      	nop
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40023800 	.word	0x40023800
 8004058:	40020400 	.word	0x40020400

0800405c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800405c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004094 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004060:	f7ff ff1c 	bl	8003e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004064:	480c      	ldr	r0, [pc, #48]	@ (8004098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004066:	490d      	ldr	r1, [pc, #52]	@ (800409c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004068:	4a0d      	ldr	r2, [pc, #52]	@ (80040a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800406a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800406c:	e002      	b.n	8004074 <LoopCopyDataInit>

0800406e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800406e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004072:	3304      	adds	r3, #4

08004074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004078:	d3f9      	bcc.n	800406e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800407a:	4a0a      	ldr	r2, [pc, #40]	@ (80040a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800407c:	4c0a      	ldr	r4, [pc, #40]	@ (80040a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800407e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004080:	e001      	b.n	8004086 <LoopFillZerobss>

08004082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004084:	3204      	adds	r2, #4

08004086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004088:	d3fb      	bcc.n	8004082 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800408a:	f00c f99f 	bl	80103cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800408e:	f7ff f9a3 	bl	80033d8 <main>
  bx  lr    
 8004092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800409c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80040a0:	08012bcc 	.word	0x08012bcc
  ldr r2, =_sbss
 80040a4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80040a8:	20005078 	.word	0x20005078

080040ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040ac:	e7fe      	b.n	80040ac <ADC_IRQHandler>
	...

080040b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040b4:	4b0e      	ldr	r3, [pc, #56]	@ (80040f0 <HAL_Init+0x40>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0d      	ldr	r2, [pc, #52]	@ (80040f0 <HAL_Init+0x40>)
 80040ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040c0:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <HAL_Init+0x40>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0a      	ldr	r2, [pc, #40]	@ (80040f0 <HAL_Init+0x40>)
 80040c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040cc:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <HAL_Init+0x40>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a07      	ldr	r2, [pc, #28]	@ (80040f0 <HAL_Init+0x40>)
 80040d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040d8:	2003      	movs	r0, #3
 80040da:	f000 f920 	bl	800431e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040de:	200f      	movs	r0, #15
 80040e0:	f7ff fd54 	bl	8003b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040e4:	f7ff fd26 	bl	8003b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40023c00 	.word	0x40023c00

080040f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040f8:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <HAL_IncTick+0x20>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_IncTick+0x24>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4413      	add	r3, r2
 8004104:	4a04      	ldr	r2, [pc, #16]	@ (8004118 <HAL_IncTick+0x24>)
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000008 	.word	0x20000008
 8004118:	20000f18 	.word	0x20000f18

0800411c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return uwTick;
 8004120:	4b03      	ldr	r3, [pc, #12]	@ (8004130 <HAL_GetTick+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000f18 	.word	0x20000f18

08004134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800413c:	f7ff ffee 	bl	800411c <HAL_GetTick>
 8004140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414c:	d005      	beq.n	800415a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800414e:	4b0a      	ldr	r3, [pc, #40]	@ (8004178 <HAL_Delay+0x44>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800415a:	bf00      	nop
 800415c:	f7ff ffde 	bl	800411c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	429a      	cmp	r2, r3
 800416a:	d8f7      	bhi.n	800415c <HAL_Delay+0x28>
  {
  }
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000008 	.word	0x20000008

0800417c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800418c:	4b0c      	ldr	r3, [pc, #48]	@ (80041c0 <__NVIC_SetPriorityGrouping+0x44>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004198:	4013      	ands	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ae:	4a04      	ldr	r2, [pc, #16]	@ (80041c0 <__NVIC_SetPriorityGrouping+0x44>)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	60d3      	str	r3, [r2, #12]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041c8:	4b04      	ldr	r3, [pc, #16]	@ (80041dc <__NVIC_GetPriorityGrouping+0x18>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	0a1b      	lsrs	r3, r3, #8
 80041ce:	f003 0307 	and.w	r3, r3, #7
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	e000ed00 	.word	0xe000ed00

080041e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	db0b      	blt.n	800420a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	f003 021f 	and.w	r2, r3, #31
 80041f8:	4907      	ldr	r1, [pc, #28]	@ (8004218 <__NVIC_EnableIRQ+0x38>)
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2001      	movs	r0, #1
 8004202:	fa00 f202 	lsl.w	r2, r0, r2
 8004206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	e000e100 	.word	0xe000e100

0800421c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422a:	2b00      	cmp	r3, #0
 800422c:	db12      	blt.n	8004254 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	f003 021f 	and.w	r2, r3, #31
 8004234:	490a      	ldr	r1, [pc, #40]	@ (8004260 <__NVIC_DisableIRQ+0x44>)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	2001      	movs	r0, #1
 800423e:	fa00 f202 	lsl.w	r2, r0, r2
 8004242:	3320      	adds	r3, #32
 8004244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004248:	f3bf 8f4f 	dsb	sy
}
 800424c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800424e:	f3bf 8f6f 	isb	sy
}
 8004252:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000e100 	.word	0xe000e100

08004264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	6039      	str	r1, [r7, #0]
 800426e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004274:	2b00      	cmp	r3, #0
 8004276:	db0a      	blt.n	800428e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	b2da      	uxtb	r2, r3
 800427c:	490c      	ldr	r1, [pc, #48]	@ (80042b0 <__NVIC_SetPriority+0x4c>)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	0112      	lsls	r2, r2, #4
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	440b      	add	r3, r1
 8004288:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800428c:	e00a      	b.n	80042a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4908      	ldr	r1, [pc, #32]	@ (80042b4 <__NVIC_SetPriority+0x50>)
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	3b04      	subs	r3, #4
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	440b      	add	r3, r1
 80042a2:	761a      	strb	r2, [r3, #24]
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	e000e100 	.word	0xe000e100
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	@ 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f1c3 0307 	rsb	r3, r3, #7
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	bf28      	it	cs
 80042d6:	2304      	movcs	r3, #4
 80042d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3304      	adds	r3, #4
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d902      	bls.n	80042e8 <NVIC_EncodePriority+0x30>
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3b03      	subs	r3, #3
 80042e6:	e000      	b.n	80042ea <NVIC_EncodePriority+0x32>
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ec:	f04f 32ff 	mov.w	r2, #4294967295
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43da      	mvns	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	401a      	ands	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004300:	f04f 31ff 	mov.w	r1, #4294967295
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	43d9      	mvns	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004310:	4313      	orrs	r3, r2
         );
}
 8004312:	4618      	mov	r0, r3
 8004314:	3724      	adds	r7, #36	@ 0x24
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff ff28 	bl	800417c <__NVIC_SetPriorityGrouping>
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004346:	f7ff ff3d 	bl	80041c4 <__NVIC_GetPriorityGrouping>
 800434a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	6978      	ldr	r0, [r7, #20]
 8004352:	f7ff ffb1 	bl	80042b8 <NVIC_EncodePriority>
 8004356:	4602      	mov	r2, r0
 8004358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435c:	4611      	mov	r1, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff ff80 	bl	8004264 <__NVIC_SetPriority>
}
 8004364:	bf00      	nop
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ff30 	bl	80041e0 <__NVIC_EnableIRQ>
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff ff40 	bl	800421c <__NVIC_DisableIRQ>
}
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043b0:	f7ff feb4 	bl	800411c <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e099      	b.n	80044f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043e0:	e00f      	b.n	8004402 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043e2:	f7ff fe9b 	bl	800411c <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d908      	bls.n	8004402 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2203      	movs	r2, #3
 80043fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e078      	b.n	80044f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e8      	bne.n	80043e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4b38      	ldr	r3, [pc, #224]	@ (80044fc <HAL_DMA_Init+0x158>)
 800441c:	4013      	ands	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800442e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800443a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	2b04      	cmp	r3, #4
 800445a:	d107      	bne.n	800446c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004464:	4313      	orrs	r3, r2
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f023 0307 	bic.w	r3, r3, #7
 8004482:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004492:	2b04      	cmp	r3, #4
 8004494:	d117      	bne.n	80044c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fafb 	bl	8004aa4 <DMA_CheckFifoParam>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2240      	movs	r2, #64	@ 0x40
 80044b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80044c2:	2301      	movs	r3, #1
 80044c4:	e016      	b.n	80044f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fab2 	bl	8004a38 <DMA_CalcBaseAndBitshift>
 80044d4:	4603      	mov	r3, r0
 80044d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044dc:	223f      	movs	r2, #63	@ 0x3f
 80044de:	409a      	lsls	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	f010803f 	.word	0xf010803f

08004500 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e050      	b.n	80045b4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d101      	bne.n	8004522 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800451e:	2302      	movs	r3, #2
 8004520:	e048      	b.n	80045b4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0201 	bic.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2200      	movs	r2, #0
 8004540:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2200      	movs	r2, #0
 8004548:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2200      	movs	r2, #0
 8004558:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2221      	movs	r2, #33	@ 0x21
 8004560:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa68 	bl	8004a38 <DMA_CalcBaseAndBitshift>
 8004568:	4603      	mov	r3, r0
 800456a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004594:	223f      	movs	r2, #63	@ 0x3f
 8004596:	409a      	lsls	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_DMA_Start_IT+0x26>
 80045de:	2302      	movs	r3, #2
 80045e0:	e040      	b.n	8004664 <HAL_DMA_Start_IT+0xa8>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d12f      	bne.n	8004656 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2202      	movs	r2, #2
 80045fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f9e6 	bl	80049dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004614:	223f      	movs	r2, #63	@ 0x3f
 8004616:	409a      	lsls	r2, r3
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0216 	orr.w	r2, r2, #22
 800462a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0208 	orr.w	r2, r2, #8
 8004642:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e005      	b.n	8004662 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800465e:	2302      	movs	r3, #2
 8004660:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004662:	7dfb      	ldrb	r3, [r7, #23]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d004      	beq.n	800468a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2280      	movs	r2, #128	@ 0x80
 8004684:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e00c      	b.n	80046a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2205      	movs	r2, #5
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046bc:	4b8e      	ldr	r3, [pc, #568]	@ (80048f8 <HAL_DMA_IRQHandler+0x248>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a8e      	ldr	r2, [pc, #568]	@ (80048fc <HAL_DMA_IRQHandler+0x24c>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	0a9b      	lsrs	r3, r3, #10
 80046c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046da:	2208      	movs	r2, #8
 80046dc:	409a      	lsls	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4013      	ands	r3, r2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d01a      	beq.n	800471c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d013      	beq.n	800471c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0204 	bic.w	r2, r2, #4
 8004702:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004708:	2208      	movs	r2, #8
 800470a:	409a      	lsls	r2, r3
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004714:	f043 0201 	orr.w	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004720:	2201      	movs	r2, #1
 8004722:	409a      	lsls	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d012      	beq.n	8004752 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473e:	2201      	movs	r2, #1
 8004740:	409a      	lsls	r2, r3
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474a:	f043 0202 	orr.w	r2, r3, #2
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004756:	2204      	movs	r2, #4
 8004758:	409a      	lsls	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4013      	ands	r3, r2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d012      	beq.n	8004788 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00b      	beq.n	8004788 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004774:	2204      	movs	r2, #4
 8004776:	409a      	lsls	r2, r3
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004780:	f043 0204 	orr.w	r2, r3, #4
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478c:	2210      	movs	r2, #16
 800478e:	409a      	lsls	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d043      	beq.n	8004820 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d03c      	beq.n	8004820 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047aa:	2210      	movs	r2, #16
 80047ac:	409a      	lsls	r2, r3
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d018      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d108      	bne.n	80047e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d024      	beq.n	8004820 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
 80047de:	e01f      	b.n	8004820 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01b      	beq.n	8004820 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
 80047f0:	e016      	b.n	8004820 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d107      	bne.n	8004810 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0208 	bic.w	r2, r2, #8
 800480e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004824:	2220      	movs	r2, #32
 8004826:	409a      	lsls	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 808f 	beq.w	8004950 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8087 	beq.w	8004950 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004846:	2220      	movs	r2, #32
 8004848:	409a      	lsls	r2, r3
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b05      	cmp	r3, #5
 8004858:	d136      	bne.n	80048c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0216 	bic.w	r2, r2, #22
 8004868:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004878:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	d103      	bne.n	800488a <HAL_DMA_IRQHandler+0x1da>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0208 	bic.w	r2, r2, #8
 8004898:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489e:	223f      	movs	r2, #63	@ 0x3f
 80048a0:	409a      	lsls	r2, r3
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d07e      	beq.n	80049bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
        }
        return;
 80048c6:	e079      	b.n	80049bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01d      	beq.n	8004912 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10d      	bne.n	8004900 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d031      	beq.n	8004950 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4798      	blx	r3
 80048f4:	e02c      	b.n	8004950 <HAL_DMA_IRQHandler+0x2a0>
 80048f6:	bf00      	nop
 80048f8:	20000000 	.word	0x20000000
 80048fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d023      	beq.n	8004950 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	4798      	blx	r3
 8004910:	e01e      	b.n	8004950 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10f      	bne.n	8004940 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0210 	bic.w	r2, r2, #16
 800492e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004954:	2b00      	cmp	r3, #0
 8004956:	d032      	beq.n	80049be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d022      	beq.n	80049aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2205      	movs	r2, #5
 8004968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	3301      	adds	r3, #1
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	429a      	cmp	r2, r3
 8004986:	d307      	bcc.n	8004998 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f2      	bne.n	800497c <HAL_DMA_IRQHandler+0x2cc>
 8004996:	e000      	b.n	800499a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004998:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	4798      	blx	r3
 80049ba:	e000      	b.n	80049be <HAL_DMA_IRQHandler+0x30e>
        return;
 80049bc:	bf00      	nop
    }
  }
}
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b40      	cmp	r3, #64	@ 0x40
 8004a08:	d108      	bne.n	8004a1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a1a:	e007      	b.n	8004a2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	60da      	str	r2, [r3, #12]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	3b10      	subs	r3, #16
 8004a48:	4a14      	ldr	r2, [pc, #80]	@ (8004a9c <DMA_CalcBaseAndBitshift+0x64>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a52:	4a13      	ldr	r2, [pc, #76]	@ (8004aa0 <DMA_CalcBaseAndBitshift+0x68>)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d909      	bls.n	8004a7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a6e:	f023 0303 	bic.w	r3, r3, #3
 8004a72:	1d1a      	adds	r2, r3, #4
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a78:	e007      	b.n	8004a8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a82:	f023 0303 	bic.w	r3, r3, #3
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	aaaaaaab 	.word	0xaaaaaaab
 8004aa0:	08012828 	.word	0x08012828

08004aa4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d11f      	bne.n	8004afe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d856      	bhi.n	8004b72 <DMA_CheckFifoParam+0xce>
 8004ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8004acc <DMA_CheckFifoParam+0x28>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004add 	.word	0x08004add
 8004ad0:	08004aef 	.word	0x08004aef
 8004ad4:	08004add 	.word	0x08004add
 8004ad8:	08004b73 	.word	0x08004b73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d046      	beq.n	8004b76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aec:	e043      	b.n	8004b76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004af6:	d140      	bne.n	8004b7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004afc:	e03d      	b.n	8004b7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b06:	d121      	bne.n	8004b4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d837      	bhi.n	8004b7e <DMA_CheckFifoParam+0xda>
 8004b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b14 <DMA_CheckFifoParam+0x70>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b25 	.word	0x08004b25
 8004b18:	08004b2b 	.word	0x08004b2b
 8004b1c:	08004b25 	.word	0x08004b25
 8004b20:	08004b3d 	.word	0x08004b3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	e030      	b.n	8004b8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d025      	beq.n	8004b82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b3a:	e022      	b.n	8004b82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b44:	d11f      	bne.n	8004b86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b4a:	e01c      	b.n	8004b86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d903      	bls.n	8004b5a <DMA_CheckFifoParam+0xb6>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d003      	beq.n	8004b60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b58:	e018      	b.n	8004b8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b5e:	e015      	b.n	8004b8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00e      	beq.n	8004b8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b70:	e00b      	b.n	8004b8a <DMA_CheckFifoParam+0xe6>
      break;
 8004b72:	bf00      	nop
 8004b74:	e00a      	b.n	8004b8c <DMA_CheckFifoParam+0xe8>
      break;
 8004b76:	bf00      	nop
 8004b78:	e008      	b.n	8004b8c <DMA_CheckFifoParam+0xe8>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e006      	b.n	8004b8c <DMA_CheckFifoParam+0xe8>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e004      	b.n	8004b8c <DMA_CheckFifoParam+0xe8>
      break;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <DMA_CheckFifoParam+0xe8>
      break;   
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <DMA_CheckFifoParam+0xe8>
      break;
 8004b8a:	bf00      	nop
    }
  } 
  
  return status; 
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop

08004b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b089      	sub	sp, #36	@ 0x24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	e165      	b.n	8004e84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bb8:	2201      	movs	r2, #1
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	f040 8154 	bne.w	8004e7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d005      	beq.n	8004bee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d130      	bne.n	8004c50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4013      	ands	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c24:	2201      	movs	r2, #1
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f003 0201 	and.w	r2, r3, #1
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d017      	beq.n	8004c8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	2203      	movs	r2, #3
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4013      	ands	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d123      	bne.n	8004ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	08da      	lsrs	r2, r3, #3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3208      	adds	r2, #8
 8004ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	220f      	movs	r2, #15
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	08da      	lsrs	r2, r3, #3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3208      	adds	r2, #8
 8004cda:	69b9      	ldr	r1, [r7, #24]
 8004cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	2203      	movs	r2, #3
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 0203 	and.w	r2, r3, #3
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80ae 	beq.w	8004e7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	4b5d      	ldr	r3, [pc, #372]	@ (8004e9c <HAL_GPIO_Init+0x300>)
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	4a5c      	ldr	r2, [pc, #368]	@ (8004e9c <HAL_GPIO_Init+0x300>)
 8004d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d32:	4b5a      	ldr	r3, [pc, #360]	@ (8004e9c <HAL_GPIO_Init+0x300>)
 8004d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d3e:	4a58      	ldr	r2, [pc, #352]	@ (8004ea0 <HAL_GPIO_Init+0x304>)
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	089b      	lsrs	r3, r3, #2
 8004d44:	3302      	adds	r3, #2
 8004d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	220f      	movs	r2, #15
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a4f      	ldr	r2, [pc, #316]	@ (8004ea4 <HAL_GPIO_Init+0x308>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d025      	beq.n	8004db6 <HAL_GPIO_Init+0x21a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8004ea8 <HAL_GPIO_Init+0x30c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01f      	beq.n	8004db2 <HAL_GPIO_Init+0x216>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a4d      	ldr	r2, [pc, #308]	@ (8004eac <HAL_GPIO_Init+0x310>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d019      	beq.n	8004dae <HAL_GPIO_Init+0x212>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a4c      	ldr	r2, [pc, #304]	@ (8004eb0 <HAL_GPIO_Init+0x314>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <HAL_GPIO_Init+0x20e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a4b      	ldr	r2, [pc, #300]	@ (8004eb4 <HAL_GPIO_Init+0x318>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00d      	beq.n	8004da6 <HAL_GPIO_Init+0x20a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb8 <HAL_GPIO_Init+0x31c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d007      	beq.n	8004da2 <HAL_GPIO_Init+0x206>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a49      	ldr	r2, [pc, #292]	@ (8004ebc <HAL_GPIO_Init+0x320>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d101      	bne.n	8004d9e <HAL_GPIO_Init+0x202>
 8004d9a:	2306      	movs	r3, #6
 8004d9c:	e00c      	b.n	8004db8 <HAL_GPIO_Init+0x21c>
 8004d9e:	2307      	movs	r3, #7
 8004da0:	e00a      	b.n	8004db8 <HAL_GPIO_Init+0x21c>
 8004da2:	2305      	movs	r3, #5
 8004da4:	e008      	b.n	8004db8 <HAL_GPIO_Init+0x21c>
 8004da6:	2304      	movs	r3, #4
 8004da8:	e006      	b.n	8004db8 <HAL_GPIO_Init+0x21c>
 8004daa:	2303      	movs	r3, #3
 8004dac:	e004      	b.n	8004db8 <HAL_GPIO_Init+0x21c>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e002      	b.n	8004db8 <HAL_GPIO_Init+0x21c>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <HAL_GPIO_Init+0x21c>
 8004db6:	2300      	movs	r3, #0
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	f002 0203 	and.w	r2, r2, #3
 8004dbe:	0092      	lsls	r2, r2, #2
 8004dc0:	4093      	lsls	r3, r2
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dc8:	4935      	ldr	r1, [pc, #212]	@ (8004ea0 <HAL_GPIO_Init+0x304>)
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	089b      	lsrs	r3, r3, #2
 8004dce:	3302      	adds	r3, #2
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dd6:	4b3a      	ldr	r3, [pc, #232]	@ (8004ec0 <HAL_GPIO_Init+0x324>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	43db      	mvns	r3, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4013      	ands	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dfa:	4a31      	ldr	r2, [pc, #196]	@ (8004ec0 <HAL_GPIO_Init+0x324>)
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e00:	4b2f      	ldr	r3, [pc, #188]	@ (8004ec0 <HAL_GPIO_Init+0x324>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e24:	4a26      	ldr	r2, [pc, #152]	@ (8004ec0 <HAL_GPIO_Init+0x324>)
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e2a:	4b25      	ldr	r3, [pc, #148]	@ (8004ec0 <HAL_GPIO_Init+0x324>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	43db      	mvns	r3, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4013      	ands	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec0 <HAL_GPIO_Init+0x324>)
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e54:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec0 <HAL_GPIO_Init+0x324>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e78:	4a11      	ldr	r2, [pc, #68]	@ (8004ec0 <HAL_GPIO_Init+0x324>)
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	3301      	adds	r3, #1
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2b0f      	cmp	r3, #15
 8004e88:	f67f ae96 	bls.w	8004bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	3724      	adds	r7, #36	@ 0x24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	40013800 	.word	0x40013800
 8004ea4:	40020000 	.word	0x40020000
 8004ea8:	40020400 	.word	0x40020400
 8004eac:	40020800 	.word	0x40020800
 8004eb0:	40020c00 	.word	0x40020c00
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	40021400 	.word	0x40021400
 8004ebc:	40021800 	.word	0x40021800
 8004ec0:	40013c00 	.word	0x40013c00

08004ec4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e0c7      	b.n	8005070 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	f040 80b7 	bne.w	800506a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004efc:	4a62      	ldr	r2, [pc, #392]	@ (8005088 <HAL_GPIO_DeInit+0x1c4>)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	089b      	lsrs	r3, r3, #2
 8004f02:	3302      	adds	r3, #2
 8004f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f08:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	220f      	movs	r2, #15
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a5a      	ldr	r2, [pc, #360]	@ (800508c <HAL_GPIO_DeInit+0x1c8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d025      	beq.n	8004f72 <HAL_GPIO_DeInit+0xae>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a59      	ldr	r2, [pc, #356]	@ (8005090 <HAL_GPIO_DeInit+0x1cc>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01f      	beq.n	8004f6e <HAL_GPIO_DeInit+0xaa>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a58      	ldr	r2, [pc, #352]	@ (8005094 <HAL_GPIO_DeInit+0x1d0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d019      	beq.n	8004f6a <HAL_GPIO_DeInit+0xa6>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a57      	ldr	r2, [pc, #348]	@ (8005098 <HAL_GPIO_DeInit+0x1d4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_GPIO_DeInit+0xa2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a56      	ldr	r2, [pc, #344]	@ (800509c <HAL_GPIO_DeInit+0x1d8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00d      	beq.n	8004f62 <HAL_GPIO_DeInit+0x9e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a55      	ldr	r2, [pc, #340]	@ (80050a0 <HAL_GPIO_DeInit+0x1dc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <HAL_GPIO_DeInit+0x9a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a54      	ldr	r2, [pc, #336]	@ (80050a4 <HAL_GPIO_DeInit+0x1e0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d101      	bne.n	8004f5a <HAL_GPIO_DeInit+0x96>
 8004f56:	2306      	movs	r3, #6
 8004f58:	e00c      	b.n	8004f74 <HAL_GPIO_DeInit+0xb0>
 8004f5a:	2307      	movs	r3, #7
 8004f5c:	e00a      	b.n	8004f74 <HAL_GPIO_DeInit+0xb0>
 8004f5e:	2305      	movs	r3, #5
 8004f60:	e008      	b.n	8004f74 <HAL_GPIO_DeInit+0xb0>
 8004f62:	2304      	movs	r3, #4
 8004f64:	e006      	b.n	8004f74 <HAL_GPIO_DeInit+0xb0>
 8004f66:	2303      	movs	r3, #3
 8004f68:	e004      	b.n	8004f74 <HAL_GPIO_DeInit+0xb0>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e002      	b.n	8004f74 <HAL_GPIO_DeInit+0xb0>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <HAL_GPIO_DeInit+0xb0>
 8004f72:	2300      	movs	r3, #0
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	f002 0203 	and.w	r2, r2, #3
 8004f7a:	0092      	lsls	r2, r2, #2
 8004f7c:	4093      	lsls	r3, r2
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d132      	bne.n	8004fea <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004f84:	4b48      	ldr	r3, [pc, #288]	@ (80050a8 <HAL_GPIO_DeInit+0x1e4>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	4946      	ldr	r1, [pc, #280]	@ (80050a8 <HAL_GPIO_DeInit+0x1e4>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004f92:	4b45      	ldr	r3, [pc, #276]	@ (80050a8 <HAL_GPIO_DeInit+0x1e4>)
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	4943      	ldr	r1, [pc, #268]	@ (80050a8 <HAL_GPIO_DeInit+0x1e4>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004fa0:	4b41      	ldr	r3, [pc, #260]	@ (80050a8 <HAL_GPIO_DeInit+0x1e4>)
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	493f      	ldr	r1, [pc, #252]	@ (80050a8 <HAL_GPIO_DeInit+0x1e4>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004fae:	4b3e      	ldr	r3, [pc, #248]	@ (80050a8 <HAL_GPIO_DeInit+0x1e4>)
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	493c      	ldr	r1, [pc, #240]	@ (80050a8 <HAL_GPIO_DeInit+0x1e4>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	220f      	movs	r2, #15
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8005088 <HAL_GPIO_DeInit+0x1c4>)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	089b      	lsrs	r3, r3, #2
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	43da      	mvns	r2, r3
 8004fdc:	482a      	ldr	r0, [pc, #168]	@ (8005088 <HAL_GPIO_DeInit+0x1c4>)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	089b      	lsrs	r3, r3, #2
 8004fe2:	400a      	ands	r2, r1
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	2103      	movs	r1, #3
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	08da      	lsrs	r2, r3, #3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3208      	adds	r2, #8
 8005008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	220f      	movs	r2, #15
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43db      	mvns	r3, r3
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	08d2      	lsrs	r2, r2, #3
 8005020:	4019      	ands	r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3208      	adds	r2, #8
 8005026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	2103      	movs	r1, #3
 8005034:	fa01 f303 	lsl.w	r3, r1, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	401a      	ands	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	2101      	movs	r1, #1
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	fa01 f303 	lsl.w	r3, r1, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	401a      	ands	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	2103      	movs	r1, #3
 800505e:	fa01 f303 	lsl.w	r3, r1, r3
 8005062:	43db      	mvns	r3, r3
 8005064:	401a      	ands	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	3301      	adds	r3, #1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2b0f      	cmp	r3, #15
 8005074:	f67f af34 	bls.w	8004ee0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40013800 	.word	0x40013800
 800508c:	40020000 	.word	0x40020000
 8005090:	40020400 	.word	0x40020400
 8005094:	40020800 	.word	0x40020800
 8005098:	40020c00 	.word	0x40020c00
 800509c:	40021000 	.word	0x40021000
 80050a0:	40021400 	.word	0x40021400
 80050a4:	40021800 	.word	0x40021800
 80050a8:	40013c00 	.word	0x40013c00

080050ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	887b      	ldrh	r3, [r7, #2]
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
 80050c8:	e001      	b.n	80050ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	807b      	strh	r3, [r7, #2]
 80050e8:	4613      	mov	r3, r2
 80050ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050ec:	787b      	ldrb	r3, [r7, #1]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050f2:	887a      	ldrh	r2, [r7, #2]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050f8:	e003      	b.n	8005102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050fa:	887b      	ldrh	r3, [r7, #2]
 80050fc:	041a      	lsls	r2, r3, #16
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	619a      	str	r2, [r3, #24]
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e12b      	b.n	800537a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fe f870 	bl	800321c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	@ 0x24
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0201 	bic.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005174:	f001 fa90 	bl	8006698 <HAL_RCC_GetPCLK1Freq>
 8005178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4a81      	ldr	r2, [pc, #516]	@ (8005384 <HAL_I2C_Init+0x274>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d807      	bhi.n	8005194 <HAL_I2C_Init+0x84>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4a80      	ldr	r2, [pc, #512]	@ (8005388 <HAL_I2C_Init+0x278>)
 8005188:	4293      	cmp	r3, r2
 800518a:	bf94      	ite	ls
 800518c:	2301      	movls	r3, #1
 800518e:	2300      	movhi	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e006      	b.n	80051a2 <HAL_I2C_Init+0x92>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a7d      	ldr	r2, [pc, #500]	@ (800538c <HAL_I2C_Init+0x27c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	bf94      	ite	ls
 800519c:	2301      	movls	r3, #1
 800519e:	2300      	movhi	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0e7      	b.n	800537a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4a78      	ldr	r2, [pc, #480]	@ (8005390 <HAL_I2C_Init+0x280>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	0c9b      	lsrs	r3, r3, #18
 80051b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005384 <HAL_I2C_Init+0x274>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d802      	bhi.n	80051e4 <HAL_I2C_Init+0xd4>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	3301      	adds	r3, #1
 80051e2:	e009      	b.n	80051f8 <HAL_I2C_Init+0xe8>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	4a69      	ldr	r2, [pc, #420]	@ (8005394 <HAL_I2C_Init+0x284>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	099b      	lsrs	r3, r3, #6
 80051f6:	3301      	adds	r3, #1
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800520a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	495c      	ldr	r1, [pc, #368]	@ (8005384 <HAL_I2C_Init+0x274>)
 8005214:	428b      	cmp	r3, r1
 8005216:	d819      	bhi.n	800524c <HAL_I2C_Init+0x13c>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	1e59      	subs	r1, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	fbb1 f3f3 	udiv	r3, r1, r3
 8005226:	1c59      	adds	r1, r3, #1
 8005228:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800522c:	400b      	ands	r3, r1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_I2C_Init+0x138>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1e59      	subs	r1, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005240:	3301      	adds	r3, #1
 8005242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005246:	e051      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 8005248:	2304      	movs	r3, #4
 800524a:	e04f      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d111      	bne.n	8005278 <HAL_I2C_Init+0x168>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1e58      	subs	r0, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6859      	ldr	r1, [r3, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	440b      	add	r3, r1
 8005262:	fbb0 f3f3 	udiv	r3, r0, r3
 8005266:	3301      	adds	r3, #1
 8005268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	e012      	b.n	800529e <HAL_I2C_Init+0x18e>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1e58      	subs	r0, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	0099      	lsls	r1, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	fbb0 f3f3 	udiv	r3, r0, r3
 800528e:	3301      	adds	r3, #1
 8005290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_I2C_Init+0x196>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e022      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10e      	bne.n	80052cc <HAL_I2C_Init+0x1bc>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1e58      	subs	r0, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	440b      	add	r3, r1
 80052bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80052c0:	3301      	adds	r3, #1
 80052c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ca:	e00f      	b.n	80052ec <HAL_I2C_Init+0x1dc>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1e58      	subs	r0, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6859      	ldr	r1, [r3, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	0099      	lsls	r1, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e2:	3301      	adds	r3, #1
 80052e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	6809      	ldr	r1, [r1, #0]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69da      	ldr	r2, [r3, #28]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800531a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6911      	ldr	r1, [r2, #16]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68d2      	ldr	r2, [r2, #12]
 8005326:	4311      	orrs	r1, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	430b      	orrs	r3, r1
 800532e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695a      	ldr	r2, [r3, #20]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	000186a0 	.word	0x000186a0
 8005388:	001e847f 	.word	0x001e847f
 800538c:	003d08ff 	.word	0x003d08ff
 8005390:	431bde83 	.word	0x431bde83
 8005394:	10624dd3 	.word	0x10624dd3

08005398 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e021      	b.n	80053ee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2224      	movs	r2, #36	@ 0x24
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fd ffca 	bl	800335c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	4608      	mov	r0, r1
 8005402:	4611      	mov	r1, r2
 8005404:	461a      	mov	r2, r3
 8005406:	4603      	mov	r3, r0
 8005408:	817b      	strh	r3, [r7, #10]
 800540a:	460b      	mov	r3, r1
 800540c:	813b      	strh	r3, [r7, #8]
 800540e:	4613      	mov	r3, r2
 8005410:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005412:	f7fe fe83 	bl	800411c <HAL_GetTick>
 8005416:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b20      	cmp	r3, #32
 8005422:	f040 80d9 	bne.w	80055d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	2319      	movs	r3, #25
 800542c:	2201      	movs	r2, #1
 800542e:	496d      	ldr	r1, [pc, #436]	@ (80055e4 <HAL_I2C_Mem_Write+0x1ec>)
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 fdb9 	bl	8005fa8 <I2C_WaitOnFlagUntilTimeout>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800543c:	2302      	movs	r3, #2
 800543e:	e0cc      	b.n	80055da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_I2C_Mem_Write+0x56>
 800544a:	2302      	movs	r3, #2
 800544c:	e0c5      	b.n	80055da <HAL_I2C_Mem_Write+0x1e2>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b01      	cmp	r3, #1
 8005462:	d007      	beq.n	8005474 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005482:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2221      	movs	r2, #33	@ 0x21
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2240      	movs	r2, #64	@ 0x40
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a3a      	ldr	r2, [r7, #32]
 800549e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4a4d      	ldr	r2, [pc, #308]	@ (80055e8 <HAL_I2C_Mem_Write+0x1f0>)
 80054b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054b6:	88f8      	ldrh	r0, [r7, #6]
 80054b8:	893a      	ldrh	r2, [r7, #8]
 80054ba:	8979      	ldrh	r1, [r7, #10]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	4603      	mov	r3, r0
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fbf0 	bl	8005cac <I2C_RequestMemoryWrite>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d052      	beq.n	8005578 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e081      	b.n	80055da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fe7e 	bl	80061dc <I2C_WaitOnTXEFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00d      	beq.n	8005502 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d107      	bne.n	80054fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e06b      	b.n	80055da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	781a      	ldrb	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b04      	cmp	r3, #4
 800553e:	d11b      	bne.n	8005578 <HAL_I2C_Mem_Write+0x180>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005544:	2b00      	cmp	r3, #0
 8005546:	d017      	beq.n	8005578 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554c:	781a      	ldrb	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1aa      	bne.n	80054d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 fe71 	bl	800626c <I2C_WaitOnBTFFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005594:	2b04      	cmp	r3, #4
 8005596:	d107      	bne.n	80055a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e016      	b.n	80055da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e000      	b.n	80055da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	00100002 	.word	0x00100002
 80055e8:	ffff0000 	.word	0xffff0000

080055ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08c      	sub	sp, #48	@ 0x30
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	4608      	mov	r0, r1
 80055f6:	4611      	mov	r1, r2
 80055f8:	461a      	mov	r2, r3
 80055fa:	4603      	mov	r3, r0
 80055fc:	817b      	strh	r3, [r7, #10]
 80055fe:	460b      	mov	r3, r1
 8005600:	813b      	strh	r3, [r7, #8]
 8005602:	4613      	mov	r3, r2
 8005604:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005606:	f7fe fd89 	bl	800411c <HAL_GetTick>
 800560a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b20      	cmp	r3, #32
 8005616:	f040 8214 	bne.w	8005a42 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	2319      	movs	r3, #25
 8005620:	2201      	movs	r2, #1
 8005622:	497b      	ldr	r1, [pc, #492]	@ (8005810 <HAL_I2C_Mem_Read+0x224>)
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 fcbf 	bl	8005fa8 <I2C_WaitOnFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005630:	2302      	movs	r3, #2
 8005632:	e207      	b.n	8005a44 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_I2C_Mem_Read+0x56>
 800563e:	2302      	movs	r3, #2
 8005640:	e200      	b.n	8005a44 <HAL_I2C_Mem_Read+0x458>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b01      	cmp	r3, #1
 8005656:	d007      	beq.n	8005668 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005676:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2222      	movs	r2, #34	@ 0x22
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2240      	movs	r2, #64	@ 0x40
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005692:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005698:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4a5b      	ldr	r2, [pc, #364]	@ (8005814 <HAL_I2C_Mem_Read+0x228>)
 80056a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056aa:	88f8      	ldrh	r0, [r7, #6]
 80056ac:	893a      	ldrh	r2, [r7, #8]
 80056ae:	8979      	ldrh	r1, [r7, #10]
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	4603      	mov	r3, r0
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fb8c 	bl	8005dd8 <I2C_RequestMemoryRead>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e1bc      	b.n	8005a44 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d113      	bne.n	80056fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d2:	2300      	movs	r3, #0
 80056d4:	623b      	str	r3, [r7, #32]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	623b      	str	r3, [r7, #32]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	623b      	str	r3, [r7, #32]
 80056e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	e190      	b.n	8005a1c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d11b      	bne.n	800573a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005710:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e170      	b.n	8005a1c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573e:	2b02      	cmp	r3, #2
 8005740:	d11b      	bne.n	800577a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005750:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005760:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005762:	2300      	movs	r3, #0
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	e150      	b.n	8005a1c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005790:	e144      	b.n	8005a1c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005796:	2b03      	cmp	r3, #3
 8005798:	f200 80f1 	bhi.w	800597e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d123      	bne.n	80057ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 fda7 	bl	80062fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e145      	b.n	8005a44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057ea:	e117      	b.n	8005a1c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d14e      	bne.n	8005892 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fa:	2200      	movs	r2, #0
 80057fc:	4906      	ldr	r1, [pc, #24]	@ (8005818 <HAL_I2C_Mem_Read+0x22c>)
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fbd2 	bl	8005fa8 <I2C_WaitOnFlagUntilTimeout>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e11a      	b.n	8005a44 <HAL_I2C_Mem_Read+0x458>
 800580e:	bf00      	nop
 8005810:	00100002 	.word	0x00100002
 8005814:	ffff0000 	.word	0xffff0000
 8005818:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800582a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005890:	e0c4      	b.n	8005a1c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005898:	2200      	movs	r2, #0
 800589a:	496c      	ldr	r1, [pc, #432]	@ (8005a4c <HAL_I2C_Mem_Read+0x460>)
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fb83 	bl	8005fa8 <I2C_WaitOnFlagUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0cb      	b.n	8005a44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	2200      	movs	r2, #0
 80058f6:	4955      	ldr	r1, [pc, #340]	@ (8005a4c <HAL_I2C_Mem_Read+0x460>)
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 fb55 	bl	8005fa8 <I2C_WaitOnFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e09d      	b.n	8005a44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005916:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691a      	ldr	r2, [r3, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800597c:	e04e      	b.n	8005a1c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800597e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005980:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fcba 	bl	80062fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e058      	b.n	8005a44 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d124      	bne.n	8005a1c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d107      	bne.n	80059ea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f47f aeb6 	bne.w	8005792 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e000      	b.n	8005a44 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005a42:	2302      	movs	r3, #2
  }
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3728      	adds	r7, #40	@ 0x28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	00010004 	.word	0x00010004

08005a50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	@ 0x28
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005a60:	f7fe fb5c 	bl	800411c <HAL_GetTick>
 8005a64:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	f040 8111 	bne.w	8005c9a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	2319      	movs	r3, #25
 8005a7e:	2201      	movs	r2, #1
 8005a80:	4988      	ldr	r1, [pc, #544]	@ (8005ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fa90 	bl	8005fa8 <I2C_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e104      	b.n	8005c9c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_I2C_IsDeviceReady+0x50>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e0fd      	b.n	8005c9c <HAL_I2C_IsDeviceReady+0x24c>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d007      	beq.n	8005ac6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ad4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2224      	movs	r2, #36	@ 0x24
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a70      	ldr	r2, [pc, #448]	@ (8005ca8 <HAL_I2C_IsDeviceReady+0x258>)
 8005ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005af8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 fa4e 	bl	8005fa8 <I2C_WaitOnFlagUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00d      	beq.n	8005b2e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b20:	d103      	bne.n	8005b2a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b28:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e0b6      	b.n	8005c9c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b2e:	897b      	ldrh	r3, [r7, #10]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b3c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005b3e:	f7fe faed 	bl	800411c <HAL_GetTick>
 8005b42:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	bf0c      	ite	eq
 8005b52:	2301      	moveq	r3, #1
 8005b54:	2300      	movne	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b68:	bf0c      	ite	eq
 8005b6a:	2301      	moveq	r3, #1
 8005b6c:	2300      	movne	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b72:	e025      	b.n	8005bc0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b74:	f7fe fad2 	bl	800411c <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <HAL_I2C_IsDeviceReady+0x13a>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	22a0      	movs	r2, #160	@ 0xa0
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2301      	moveq	r3, #1
 8005ba2:	2300      	movne	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb6:	bf0c      	ite	eq
 8005bb8:	2301      	moveq	r3, #1
 8005bba:	2300      	movne	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2ba0      	cmp	r3, #160	@ 0xa0
 8005bca:	d005      	beq.n	8005bd8 <HAL_I2C_IsDeviceReady+0x188>
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d102      	bne.n	8005bd8 <HAL_I2C_IsDeviceReady+0x188>
 8005bd2:	7dbb      	ldrb	r3, [r7, #22]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0cd      	beq.n	8005b74 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d129      	bne.n	8005c42 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bfc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bfe:	2300      	movs	r3, #0
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	2319      	movs	r3, #25
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	4921      	ldr	r1, [pc, #132]	@ (8005ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f9c2 	bl	8005fa8 <I2C_WaitOnFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e036      	b.n	8005c9c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e02c      	b.n	8005c9c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c50:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c5a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	2319      	movs	r3, #25
 8005c62:	2201      	movs	r2, #1
 8005c64:	490f      	ldr	r1, [pc, #60]	@ (8005ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f99e 	bl	8005fa8 <I2C_WaitOnFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e012      	b.n	8005c9c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	f4ff af32 	bcc.w	8005aea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005c9a:	2302      	movs	r3, #2
  }
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	00100002 	.word	0x00100002
 8005ca8:	ffff0000 	.word	0xffff0000

08005cac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	461a      	mov	r2, r3
 8005cba:	4603      	mov	r3, r0
 8005cbc:	817b      	strh	r3, [r7, #10]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	813b      	strh	r3, [r7, #8]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 f960 	bl	8005fa8 <I2C_WaitOnFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00d      	beq.n	8005d0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cfc:	d103      	bne.n	8005d06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e05f      	b.n	8005dca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d0a:	897b      	ldrh	r3, [r7, #10]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	6a3a      	ldr	r2, [r7, #32]
 8005d1e:	492d      	ldr	r1, [pc, #180]	@ (8005dd4 <I2C_RequestMemoryWrite+0x128>)
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f9bb 	bl	800609c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e04c      	b.n	8005dca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d48:	6a39      	ldr	r1, [r7, #32]
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 fa46 	bl	80061dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00d      	beq.n	8005d72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d107      	bne.n	8005d6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e02b      	b.n	8005dca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d105      	bne.n	8005d84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d78:	893b      	ldrh	r3, [r7, #8]
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	611a      	str	r2, [r3, #16]
 8005d82:	e021      	b.n	8005dc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d84:	893b      	ldrh	r3, [r7, #8]
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d94:	6a39      	ldr	r1, [r7, #32]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fa20 	bl	80061dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00d      	beq.n	8005dbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d107      	bne.n	8005dba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005db8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e005      	b.n	8005dca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dbe:	893b      	ldrh	r3, [r7, #8]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	00010002 	.word	0x00010002

08005dd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af02      	add	r7, sp, #8
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	461a      	mov	r2, r3
 8005de6:	4603      	mov	r3, r0
 8005de8:	817b      	strh	r3, [r7, #10]
 8005dea:	460b      	mov	r3, r1
 8005dec:	813b      	strh	r3, [r7, #8]
 8005dee:	4613      	mov	r3, r2
 8005df0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 f8c2 	bl	8005fa8 <I2C_WaitOnFlagUntilTimeout>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00d      	beq.n	8005e46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e38:	d103      	bne.n	8005e42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e0aa      	b.n	8005f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e46:	897b      	ldrh	r3, [r7, #10]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	6a3a      	ldr	r2, [r7, #32]
 8005e5a:	4952      	ldr	r1, [pc, #328]	@ (8005fa4 <I2C_RequestMemoryRead+0x1cc>)
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f91d 	bl	800609c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e097      	b.n	8005f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e84:	6a39      	ldr	r1, [r7, #32]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f9a8 	bl	80061dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00d      	beq.n	8005eae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d107      	bne.n	8005eaa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ea8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e076      	b.n	8005f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eae:	88fb      	ldrh	r3, [r7, #6]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d105      	bne.n	8005ec0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eb4:	893b      	ldrh	r3, [r7, #8]
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	611a      	str	r2, [r3, #16]
 8005ebe:	e021      	b.n	8005f04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ec0:	893b      	ldrh	r3, [r7, #8]
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed0:	6a39      	ldr	r1, [r7, #32]
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 f982 	bl	80061dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00d      	beq.n	8005efa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d107      	bne.n	8005ef6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ef4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e050      	b.n	8005f9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005efa:	893b      	ldrh	r3, [r7, #8]
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f06:	6a39      	ldr	r1, [r7, #32]
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f967 	bl	80061dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00d      	beq.n	8005f30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d107      	bne.n	8005f2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e035      	b.n	8005f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 f82b 	bl	8005fa8 <I2C_WaitOnFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00d      	beq.n	8005f74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f66:	d103      	bne.n	8005f70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e013      	b.n	8005f9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f74:	897b      	ldrh	r3, [r7, #10]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	f043 0301 	orr.w	r3, r3, #1
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f86:	6a3a      	ldr	r2, [r7, #32]
 8005f88:	4906      	ldr	r1, [pc, #24]	@ (8005fa4 <I2C_RequestMemoryRead+0x1cc>)
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 f886 	bl	800609c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	00010002 	.word	0x00010002

08005fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fb8:	e048      	b.n	800604c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc0:	d044      	beq.n	800604c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc2:	f7fe f8ab 	bl	800411c <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d302      	bcc.n	8005fd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d139      	bne.n	800604c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	0c1b      	lsrs	r3, r3, #16
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d10d      	bne.n	8005ffe <I2C_WaitOnFlagUntilTimeout+0x56>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	43da      	mvns	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4013      	ands	r3, r2
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	bf0c      	ite	eq
 8005ff4:	2301      	moveq	r3, #1
 8005ff6:	2300      	movne	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	e00c      	b.n	8006018 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	43da      	mvns	r2, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4013      	ands	r3, r2
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	bf0c      	ite	eq
 8006010:	2301      	moveq	r3, #1
 8006012:	2300      	movne	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	429a      	cmp	r2, r3
 800601c:	d116      	bne.n	800604c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006038:	f043 0220 	orr.w	r2, r3, #32
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e023      	b.n	8006094 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10d      	bne.n	8006072 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	43da      	mvns	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4013      	ands	r3, r2
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	e00c      	b.n	800608c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	43da      	mvns	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	4013      	ands	r3, r2
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	bf0c      	ite	eq
 8006084:	2301      	moveq	r3, #1
 8006086:	2300      	movne	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	429a      	cmp	r2, r3
 8006090:	d093      	beq.n	8005fba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060aa:	e071      	b.n	8006190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ba:	d123      	bne.n	8006104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f0:	f043 0204 	orr.w	r2, r3, #4
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e067      	b.n	80061d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610a:	d041      	beq.n	8006190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610c:	f7fe f806 	bl	800411c <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	429a      	cmp	r2, r3
 800611a:	d302      	bcc.n	8006122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d136      	bne.n	8006190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	0c1b      	lsrs	r3, r3, #16
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d10c      	bne.n	8006146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	43da      	mvns	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4013      	ands	r3, r2
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	bf14      	ite	ne
 800613e:	2301      	movne	r3, #1
 8006140:	2300      	moveq	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	e00b      	b.n	800615e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	43da      	mvns	r2, r3
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	4013      	ands	r3, r2
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	bf14      	ite	ne
 8006158:	2301      	movne	r3, #1
 800615a:	2300      	moveq	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d016      	beq.n	8006190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e021      	b.n	80061d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	0c1b      	lsrs	r3, r3, #16
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b01      	cmp	r3, #1
 8006198:	d10c      	bne.n	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	43da      	mvns	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4013      	ands	r3, r2
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bf14      	ite	ne
 80061ac:	2301      	movne	r3, #1
 80061ae:	2300      	moveq	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	e00b      	b.n	80061cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	43da      	mvns	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4013      	ands	r3, r2
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	bf14      	ite	ne
 80061c6:	2301      	movne	r3, #1
 80061c8:	2300      	moveq	r3, #0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f47f af6d 	bne.w	80060ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061e8:	e034      	b.n	8006254 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 f8e3 	bl	80063b6 <I2C_IsAcknowledgeFailed>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e034      	b.n	8006264 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d028      	beq.n	8006254 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006202:	f7fd ff8b 	bl	800411c <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	429a      	cmp	r2, r3
 8006210:	d302      	bcc.n	8006218 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d11d      	bne.n	8006254 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006222:	2b80      	cmp	r3, #128	@ 0x80
 8006224:	d016      	beq.n	8006254 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006240:	f043 0220 	orr.w	r2, r3, #32
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e007      	b.n	8006264 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800625e:	2b80      	cmp	r3, #128	@ 0x80
 8006260:	d1c3      	bne.n	80061ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006278:	e034      	b.n	80062e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 f89b 	bl	80063b6 <I2C_IsAcknowledgeFailed>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e034      	b.n	80062f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d028      	beq.n	80062e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006292:	f7fd ff43 	bl	800411c <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d302      	bcc.n	80062a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d11d      	bne.n	80062e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d016      	beq.n	80062e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d0:	f043 0220 	orr.w	r2, r3, #32
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e007      	b.n	80062f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	f003 0304 	and.w	r3, r3, #4
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d1c3      	bne.n	800627a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006308:	e049      	b.n	800639e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b10      	cmp	r3, #16
 8006316:	d119      	bne.n	800634c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0210 	mvn.w	r2, #16
 8006320:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e030      	b.n	80063ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634c:	f7fd fee6 	bl	800411c <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	429a      	cmp	r2, r3
 800635a:	d302      	bcc.n	8006362 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d11d      	bne.n	800639e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636c:	2b40      	cmp	r3, #64	@ 0x40
 800636e:	d016      	beq.n	800639e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2220      	movs	r2, #32
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638a:	f043 0220 	orr.w	r2, r3, #32
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e007      	b.n	80063ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a8:	2b40      	cmp	r3, #64	@ 0x40
 80063aa:	d1ae      	bne.n	800630a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063cc:	d11b      	bne.n	8006406 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f2:	f043 0204 	orr.w	r2, r3, #4
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800641e:	2300      	movs	r3, #0
 8006420:	603b      	str	r3, [r7, #0]
 8006422:	4b20      	ldr	r3, [pc, #128]	@ (80064a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	4a1f      	ldr	r2, [pc, #124]	@ (80064a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800642c:	6413      	str	r3, [r2, #64]	@ 0x40
 800642e:	4b1d      	ldr	r3, [pc, #116]	@ (80064a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006436:	603b      	str	r3, [r7, #0]
 8006438:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800643a:	4b1b      	ldr	r3, [pc, #108]	@ (80064a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800643c:	2201      	movs	r2, #1
 800643e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006440:	f7fd fe6c 	bl	800411c <HAL_GetTick>
 8006444:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006446:	e009      	b.n	800645c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006448:	f7fd fe68 	bl	800411c <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006456:	d901      	bls.n	800645c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e01f      	b.n	800649c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800645c:	4b13      	ldr	r3, [pc, #76]	@ (80064ac <HAL_PWREx_EnableOverDrive+0x98>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006468:	d1ee      	bne.n	8006448 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800646a:	4b11      	ldr	r3, [pc, #68]	@ (80064b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006470:	f7fd fe54 	bl	800411c <HAL_GetTick>
 8006474:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006476:	e009      	b.n	800648c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006478:	f7fd fe50 	bl	800411c <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006486:	d901      	bls.n	800648c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e007      	b.n	800649c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800648c:	4b07      	ldr	r3, [pc, #28]	@ (80064ac <HAL_PWREx_EnableOverDrive+0x98>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006498:	d1ee      	bne.n	8006478 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40023800 	.word	0x40023800
 80064a8:	420e0040 	.word	0x420e0040
 80064ac:	40007000 	.word	0x40007000
 80064b0:	420e0044 	.word	0x420e0044

080064b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0cc      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064c8:	4b68      	ldr	r3, [pc, #416]	@ (800666c <HAL_RCC_ClockConfig+0x1b8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d90c      	bls.n	80064f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d6:	4b65      	ldr	r3, [pc, #404]	@ (800666c <HAL_RCC_ClockConfig+0x1b8>)
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064de:	4b63      	ldr	r3, [pc, #396]	@ (800666c <HAL_RCC_ClockConfig+0x1b8>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d001      	beq.n	80064f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0b8      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d020      	beq.n	800653e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006508:	4b59      	ldr	r3, [pc, #356]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	4a58      	ldr	r2, [pc, #352]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006512:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006520:	4b53      	ldr	r3, [pc, #332]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	4a52      	ldr	r2, [pc, #328]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006526:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800652a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800652c:	4b50      	ldr	r3, [pc, #320]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	494d      	ldr	r1, [pc, #308]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	4313      	orrs	r3, r2
 800653c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d044      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d107      	bne.n	8006562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006552:	4b47      	ldr	r3, [pc, #284]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d119      	bne.n	8006592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e07f      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d003      	beq.n	8006572 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800656e:	2b03      	cmp	r3, #3
 8006570:	d107      	bne.n	8006582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006572:	4b3f      	ldr	r3, [pc, #252]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e06f      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006582:	4b3b      	ldr	r3, [pc, #236]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e067      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006592:	4b37      	ldr	r3, [pc, #220]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f023 0203 	bic.w	r2, r3, #3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	4934      	ldr	r1, [pc, #208]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065a4:	f7fd fdba 	bl	800411c <HAL_GetTick>
 80065a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065aa:	e00a      	b.n	80065c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ac:	f7fd fdb6 	bl	800411c <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e04f      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 020c 	and.w	r2, r3, #12
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d1eb      	bne.n	80065ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065d4:	4b25      	ldr	r3, [pc, #148]	@ (800666c <HAL_RCC_ClockConfig+0x1b8>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 030f 	and.w	r3, r3, #15
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d20c      	bcs.n	80065fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065e2:	4b22      	ldr	r3, [pc, #136]	@ (800666c <HAL_RCC_ClockConfig+0x1b8>)
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ea:	4b20      	ldr	r3, [pc, #128]	@ (800666c <HAL_RCC_ClockConfig+0x1b8>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d001      	beq.n	80065fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e032      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006608:	4b19      	ldr	r3, [pc, #100]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4916      	ldr	r1, [pc, #88]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006616:	4313      	orrs	r3, r2
 8006618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006626:	4b12      	ldr	r3, [pc, #72]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	00db      	lsls	r3, r3, #3
 8006634:	490e      	ldr	r1, [pc, #56]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006636:	4313      	orrs	r3, r2
 8006638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800663a:	f000 fbb1 	bl	8006da0 <HAL_RCC_GetSysClockFreq>
 800663e:	4602      	mov	r2, r0
 8006640:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	091b      	lsrs	r3, r3, #4
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	490a      	ldr	r1, [pc, #40]	@ (8006674 <HAL_RCC_ClockConfig+0x1c0>)
 800664c:	5ccb      	ldrb	r3, [r1, r3]
 800664e:	fa22 f303 	lsr.w	r3, r2, r3
 8006652:	4a09      	ldr	r2, [pc, #36]	@ (8006678 <HAL_RCC_ClockConfig+0x1c4>)
 8006654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006656:	4b09      	ldr	r3, [pc, #36]	@ (800667c <HAL_RCC_ClockConfig+0x1c8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7fd fa96 	bl	8003b8c <HAL_InitTick>

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40023c00 	.word	0x40023c00
 8006670:	40023800 	.word	0x40023800
 8006674:	08012810 	.word	0x08012810
 8006678:	20000000 	.word	0x20000000
 800667c:	20000004 	.word	0x20000004

08006680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006684:	4b03      	ldr	r3, [pc, #12]	@ (8006694 <HAL_RCC_GetHCLKFreq+0x14>)
 8006686:	681b      	ldr	r3, [r3, #0]
}
 8006688:	4618      	mov	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000000 	.word	0x20000000

08006698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800669c:	f7ff fff0 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 80066a0:	4602      	mov	r2, r0
 80066a2:	4b05      	ldr	r3, [pc, #20]	@ (80066b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	0a9b      	lsrs	r3, r3, #10
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	4903      	ldr	r1, [pc, #12]	@ (80066bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ae:	5ccb      	ldrb	r3, [r1, r3]
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40023800 	.word	0x40023800
 80066bc:	08012820 	.word	0x08012820

080066c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066c4:	f7ff ffdc 	bl	8006680 <HAL_RCC_GetHCLKFreq>
 80066c8:	4602      	mov	r2, r0
 80066ca:	4b05      	ldr	r3, [pc, #20]	@ (80066e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	0b5b      	lsrs	r3, r3, #13
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	4903      	ldr	r1, [pc, #12]	@ (80066e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066d6:	5ccb      	ldrb	r3, [r1, r3]
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066dc:	4618      	mov	r0, r3
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	40023800 	.word	0x40023800
 80066e4:	08012820 	.word	0x08012820

080066e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	220f      	movs	r2, #15
 80066f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066f8:	4b12      	ldr	r3, [pc, #72]	@ (8006744 <HAL_RCC_GetClockConfig+0x5c>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 0203 	and.w	r2, r3, #3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006704:	4b0f      	ldr	r3, [pc, #60]	@ (8006744 <HAL_RCC_GetClockConfig+0x5c>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006710:	4b0c      	ldr	r3, [pc, #48]	@ (8006744 <HAL_RCC_GetClockConfig+0x5c>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800671c:	4b09      	ldr	r3, [pc, #36]	@ (8006744 <HAL_RCC_GetClockConfig+0x5c>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	08db      	lsrs	r3, r3, #3
 8006722:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800672a:	4b07      	ldr	r3, [pc, #28]	@ (8006748 <HAL_RCC_GetClockConfig+0x60>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 020f 	and.w	r2, r3, #15
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	601a      	str	r2, [r3, #0]
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40023800 	.word	0x40023800
 8006748:	40023c00 	.word	0x40023c00

0800674c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08c      	sub	sp, #48	@ 0x30
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d010      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006784:	4b6f      	ldr	r3, [pc, #444]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800678a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006792:	496c      	ldr	r1, [pc, #432]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80067a2:	2301      	movs	r3, #1
 80067a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d010      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80067b2:	4b64      	ldr	r3, [pc, #400]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067b8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c0:	4960      	ldr	r1, [pc, #384]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80067d0:	2301      	movs	r3, #1
 80067d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d017      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067e0:	4b58      	ldr	r3, [pc, #352]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ee:	4955      	ldr	r1, [pc, #340]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067fe:	d101      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006800:	2301      	movs	r3, #1
 8006802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800680c:	2301      	movs	r3, #1
 800680e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b00      	cmp	r3, #0
 800681a:	d017      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800681c:	4b49      	ldr	r3, [pc, #292]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800681e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006822:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800682a:	4946      	ldr	r1, [pc, #280]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006836:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800683a:	d101      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800683c:	2301      	movs	r3, #1
 800683e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006848:	2301      	movs	r3, #1
 800684a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 808a 	beq.w	800696e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800685a:	2300      	movs	r3, #0
 800685c:	60bb      	str	r3, [r7, #8]
 800685e:	4b39      	ldr	r3, [pc, #228]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006862:	4a38      	ldr	r2, [pc, #224]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006868:	6413      	str	r3, [r2, #64]	@ 0x40
 800686a:	4b36      	ldr	r3, [pc, #216]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006872:	60bb      	str	r3, [r7, #8]
 8006874:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006876:	4b34      	ldr	r3, [pc, #208]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a33      	ldr	r2, [pc, #204]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800687c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006880:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006882:	f7fd fc4b 	bl	800411c <HAL_GetTick>
 8006886:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006888:	e008      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800688a:	f7fd fc47 	bl	800411c <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e278      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800689c:	4b2a      	ldr	r3, [pc, #168]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0f0      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068a8:	4b26      	ldr	r3, [pc, #152]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068b0:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d02f      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068c0:	6a3a      	ldr	r2, [r7, #32]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d028      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ce:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068d0:	4b1e      	ldr	r3, [pc, #120]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068d6:	4b1d      	ldr	r3, [pc, #116]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068dc:	4a19      	ldr	r2, [pc, #100]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068e2:	4b18      	ldr	r3, [pc, #96]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d114      	bne.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068ee:	f7fd fc15 	bl	800411c <HAL_GetTick>
 80068f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f4:	e00a      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f6:	f7fd fc11 	bl	800411c <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006904:	4293      	cmp	r3, r2
 8006906:	d901      	bls.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e240      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690c:	4b0d      	ldr	r3, [pc, #52]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0ee      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006924:	d114      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006926:	4b07      	ldr	r3, [pc, #28]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006932:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800693a:	4902      	ldr	r1, [pc, #8]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800693c:	4313      	orrs	r3, r2
 800693e:	608b      	str	r3, [r1, #8]
 8006940:	e00c      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006942:	bf00      	nop
 8006944:	40023800 	.word	0x40023800
 8006948:	40007000 	.word	0x40007000
 800694c:	42470e40 	.word	0x42470e40
 8006950:	4b4a      	ldr	r3, [pc, #296]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	4a49      	ldr	r2, [pc, #292]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006956:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800695a:	6093      	str	r3, [r2, #8]
 800695c:	4b47      	ldr	r3, [pc, #284]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800695e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006968:	4944      	ldr	r1, [pc, #272]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800696a:	4313      	orrs	r3, r2
 800696c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0310 	and.w	r3, r3, #16
 8006976:	2b00      	cmp	r3, #0
 8006978:	d004      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8006980:	4b3f      	ldr	r3, [pc, #252]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006982:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006990:	4b3a      	ldr	r3, [pc, #232]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006996:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800699e:	4937      	ldr	r1, [pc, #220]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069b2:	4b32      	ldr	r3, [pc, #200]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069b8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069c0:	492e      	ldr	r1, [pc, #184]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d011      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80069d4:	4b29      	ldr	r3, [pc, #164]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069da:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e2:	4926      	ldr	r1, [pc, #152]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069f2:	d101      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80069f4:	2301      	movs	r3, #1
 80069f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00a      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006a04:	4b1d      	ldr	r3, [pc, #116]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a0a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a12:	491a      	ldr	r1, [pc, #104]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d011      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006a26:	4b15      	ldr	r3, [pc, #84]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a2c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a34:	4911      	ldr	r1, [pc, #68]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a44:	d101      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006a46:	2301      	movs	r3, #1
 8006a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d005      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a58:	f040 80ff 	bne.w	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a5c:	4b09      	ldr	r3, [pc, #36]	@ (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a62:	f7fd fb5b 	bl	800411c <HAL_GetTick>
 8006a66:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a68:	e00e      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a6a:	f7fd fb57 	bl	800411c <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d907      	bls.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e188      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006a7c:	40023800 	.word	0x40023800
 8006a80:	424711e0 	.word	0x424711e0
 8006a84:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a88:	4b7e      	ldr	r3, [pc, #504]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1ea      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d009      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d028      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d124      	bne.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006abc:	4b71      	ldr	r3, [pc, #452]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ac2:	0c1b      	lsrs	r3, r3, #16
 8006ac4:	f003 0303 	and.w	r3, r3, #3
 8006ac8:	3301      	adds	r3, #1
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ace:	4b6d      	ldr	r3, [pc, #436]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ad4:	0e1b      	lsrs	r3, r3, #24
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	019b      	lsls	r3, r3, #6
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	085b      	lsrs	r3, r3, #1
 8006aec:	3b01      	subs	r3, #1
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	431a      	orrs	r2, r3
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	061b      	lsls	r3, r3, #24
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	071b      	lsls	r3, r3, #28
 8006afe:	4961      	ldr	r1, [pc, #388]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0304 	and.w	r3, r3, #4
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d004      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b1a:	d00a      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d035      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b30:	d130      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006b32:	4b54      	ldr	r3, [pc, #336]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b38:	0c1b      	lsrs	r3, r3, #16
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	3301      	adds	r3, #1
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b44:	4b4f      	ldr	r3, [pc, #316]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b4a:	0f1b      	lsrs	r3, r3, #28
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	019b      	lsls	r3, r3, #6
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	085b      	lsrs	r3, r3, #1
 8006b62:	3b01      	subs	r3, #1
 8006b64:	041b      	lsls	r3, r3, #16
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	061b      	lsls	r3, r3, #24
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	071b      	lsls	r3, r3, #28
 8006b74:	4943      	ldr	r1, [pc, #268]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b7c:	4b41      	ldr	r3, [pc, #260]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b82:	f023 021f 	bic.w	r2, r3, #31
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	493d      	ldr	r1, [pc, #244]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d029      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ba8:	d124      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006baa:	4b36      	ldr	r3, [pc, #216]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bb0:	0c1b      	lsrs	r3, r3, #16
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bbc:	4b31      	ldr	r3, [pc, #196]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bc2:	0f1b      	lsrs	r3, r3, #28
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	019b      	lsls	r3, r3, #6
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	041b      	lsls	r3, r3, #16
 8006be0:	431a      	orrs	r2, r3
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	061b      	lsls	r3, r3, #24
 8006be6:	431a      	orrs	r2, r3
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	071b      	lsls	r3, r3, #28
 8006bec:	4925      	ldr	r1, [pc, #148]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d016      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	019b      	lsls	r3, r3, #6
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	3b01      	subs	r3, #1
 8006c14:	041b      	lsls	r3, r3, #16
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	061b      	lsls	r3, r3, #24
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	071b      	lsls	r3, r3, #28
 8006c26:	4917      	ldr	r1, [pc, #92]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c2e:	4b16      	ldr	r3, [pc, #88]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c34:	f7fd fa72 	bl	800411c <HAL_GetTick>
 8006c38:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c3c:	f7fd fa6e 	bl	800411c <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e09f      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0f0      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8006c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	f040 8095 	bne.w	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c62:	4b0a      	ldr	r3, [pc, #40]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c68:	f7fd fa58 	bl	800411c <HAL_GetTick>
 8006c6c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c6e:	e00f      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c70:	f7fd fa54 	bl	800411c <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d908      	bls.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e085      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006c82:	bf00      	nop
 8006c84:	40023800 	.word	0x40023800
 8006c88:	42470068 	.word	0x42470068
 8006c8c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c90:	4b41      	ldr	r3, [pc, #260]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c9c:	d0e8      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0304 	and.w	r3, r3, #4
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d009      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d02b      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d127      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006cc6:	4b34      	ldr	r3, [pc, #208]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	019b      	lsls	r3, r3, #6
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	041b      	lsls	r3, r3, #16
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	061b      	lsls	r3, r3, #24
 8006cf4:	4928      	ldr	r1, [pc, #160]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006cfc:	4b26      	ldr	r3, [pc, #152]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d02:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	021b      	lsls	r3, r3, #8
 8006d0e:	4922      	ldr	r1, [pc, #136]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d01d      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d2a:	d118      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d32:	0e1b      	lsrs	r3, r3, #24
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699a      	ldr	r2, [r3, #24]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	019b      	lsls	r3, r3, #6
 8006d44:	431a      	orrs	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	041b      	lsls	r3, r3, #16
 8006d50:	431a      	orrs	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	061b      	lsls	r3, r3, #24
 8006d56:	4910      	ldr	r1, [pc, #64]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006d60:	2201      	movs	r2, #1
 8006d62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d64:	f7fd f9da 	bl	800411c <HAL_GetTick>
 8006d68:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d6a:	e008      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d6c:	f7fd f9d6 	bl	800411c <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e007      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d7e:	4b06      	ldr	r3, [pc, #24]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d8a:	d1ef      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3730      	adds	r7, #48	@ 0x30
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	40023800 	.word	0x40023800
 8006d9c:	42470070 	.word	0x42470070

08006da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006da4:	b0ae      	sub	sp, #184	@ 0xb8
 8006da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dc6:	4bcb      	ldr	r3, [pc, #812]	@ (80070f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	2b0c      	cmp	r3, #12
 8006dd0:	f200 8206 	bhi.w	80071e0 <HAL_RCC_GetSysClockFreq+0x440>
 8006dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ddc <HAL_RCC_GetSysClockFreq+0x3c>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006e11 	.word	0x08006e11
 8006de0:	080071e1 	.word	0x080071e1
 8006de4:	080071e1 	.word	0x080071e1
 8006de8:	080071e1 	.word	0x080071e1
 8006dec:	08006e19 	.word	0x08006e19
 8006df0:	080071e1 	.word	0x080071e1
 8006df4:	080071e1 	.word	0x080071e1
 8006df8:	080071e1 	.word	0x080071e1
 8006dfc:	08006e21 	.word	0x08006e21
 8006e00:	080071e1 	.word	0x080071e1
 8006e04:	080071e1 	.word	0x080071e1
 8006e08:	080071e1 	.word	0x080071e1
 8006e0c:	08007011 	.word	0x08007011
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e10:	4bb9      	ldr	r3, [pc, #740]	@ (80070f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006e16:	e1e7      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e18:	4bb8      	ldr	r3, [pc, #736]	@ (80070fc <HAL_RCC_GetSysClockFreq+0x35c>)
 8006e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006e1e:	e1e3      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e20:	4bb4      	ldr	r3, [pc, #720]	@ (80070f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e2c:	4bb1      	ldr	r3, [pc, #708]	@ (80070f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d071      	beq.n	8006f1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e38:	4bae      	ldr	r3, [pc, #696]	@ (80070f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	099b      	lsrs	r3, r3, #6
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e44:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e54:	2300      	movs	r3, #0
 8006e56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e5e:	4622      	mov	r2, r4
 8006e60:	462b      	mov	r3, r5
 8006e62:	f04f 0000 	mov.w	r0, #0
 8006e66:	f04f 0100 	mov.w	r1, #0
 8006e6a:	0159      	lsls	r1, r3, #5
 8006e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e70:	0150      	lsls	r0, r2, #5
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4621      	mov	r1, r4
 8006e78:	1a51      	subs	r1, r2, r1
 8006e7a:	6439      	str	r1, [r7, #64]	@ 0x40
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8006e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	f04f 0300 	mov.w	r3, #0
 8006e8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006e90:	4649      	mov	r1, r9
 8006e92:	018b      	lsls	r3, r1, #6
 8006e94:	4641      	mov	r1, r8
 8006e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e9a:	4641      	mov	r1, r8
 8006e9c:	018a      	lsls	r2, r1, #6
 8006e9e:	4641      	mov	r1, r8
 8006ea0:	1a51      	subs	r1, r2, r1
 8006ea2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8006eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	f04f 0300 	mov.w	r3, #0
 8006eb4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006eb8:	4649      	mov	r1, r9
 8006eba:	00cb      	lsls	r3, r1, #3
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	00ca      	lsls	r2, r1, #3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4622      	mov	r2, r4
 8006ece:	189b      	adds	r3, r3, r2
 8006ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	460a      	mov	r2, r1
 8006ed6:	eb42 0303 	adc.w	r3, r2, r3
 8006eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006edc:	f04f 0200 	mov.w	r2, #0
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006ee8:	4629      	mov	r1, r5
 8006eea:	024b      	lsls	r3, r1, #9
 8006eec:	4621      	mov	r1, r4
 8006eee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	024a      	lsls	r2, r1, #9
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	4619      	mov	r1, r3
 8006efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006f0c:	f7f9 fedc 	bl	8000cc8 <__aeabi_uldivmod>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4613      	mov	r3, r2
 8006f16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f1a:	e067      	b.n	8006fec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f1c:	4b75      	ldr	r3, [pc, #468]	@ (80070f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	099b      	lsrs	r3, r3, #6
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f28:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f36:	2300      	movs	r3, #0
 8006f38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006f3e:	4622      	mov	r2, r4
 8006f40:	462b      	mov	r3, r5
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f04f 0100 	mov.w	r1, #0
 8006f4a:	0159      	lsls	r1, r3, #5
 8006f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f50:	0150      	lsls	r0, r2, #5
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4621      	mov	r1, r4
 8006f58:	1a51      	subs	r1, r2, r1
 8006f5a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006f70:	4649      	mov	r1, r9
 8006f72:	018b      	lsls	r3, r1, #6
 8006f74:	4641      	mov	r1, r8
 8006f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f7a:	4641      	mov	r1, r8
 8006f7c:	018a      	lsls	r2, r1, #6
 8006f7e:	4641      	mov	r1, r8
 8006f80:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f84:	4649      	mov	r1, r9
 8006f86:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f9e:	4692      	mov	sl, r2
 8006fa0:	469b      	mov	fp, r3
 8006fa2:	4623      	mov	r3, r4
 8006fa4:	eb1a 0303 	adds.w	r3, sl, r3
 8006fa8:	623b      	str	r3, [r7, #32]
 8006faa:	462b      	mov	r3, r5
 8006fac:	eb4b 0303 	adc.w	r3, fp, r3
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	028b      	lsls	r3, r1, #10
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fc8:	4621      	mov	r1, r4
 8006fca:	028a      	lsls	r2, r1, #10
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4619      	mov	r1, r3
 8006fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fd8:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006fde:	f7f9 fe73 	bl	8000cc8 <__aeabi_uldivmod>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006fec:	4b41      	ldr	r3, [pc, #260]	@ (80070f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006ffe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007006:	fbb2 f3f3 	udiv	r3, r2, r3
 800700a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800700e:	e0eb      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007010:	4b38      	ldr	r3, [pc, #224]	@ (80070f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800701c:	4b35      	ldr	r3, [pc, #212]	@ (80070f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d06b      	beq.n	8007100 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007028:	4b32      	ldr	r3, [pc, #200]	@ (80070f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	099b      	lsrs	r3, r3, #6
 800702e:	2200      	movs	r2, #0
 8007030:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007032:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007034:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703a:	663b      	str	r3, [r7, #96]	@ 0x60
 800703c:	2300      	movs	r3, #0
 800703e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007040:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007044:	4622      	mov	r2, r4
 8007046:	462b      	mov	r3, r5
 8007048:	f04f 0000 	mov.w	r0, #0
 800704c:	f04f 0100 	mov.w	r1, #0
 8007050:	0159      	lsls	r1, r3, #5
 8007052:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007056:	0150      	lsls	r0, r2, #5
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4621      	mov	r1, r4
 800705e:	1a51      	subs	r1, r2, r1
 8007060:	61b9      	str	r1, [r7, #24]
 8007062:	4629      	mov	r1, r5
 8007064:	eb63 0301 	sbc.w	r3, r3, r1
 8007068:	61fb      	str	r3, [r7, #28]
 800706a:	f04f 0200 	mov.w	r2, #0
 800706e:	f04f 0300 	mov.w	r3, #0
 8007072:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007076:	4659      	mov	r1, fp
 8007078:	018b      	lsls	r3, r1, #6
 800707a:	4651      	mov	r1, sl
 800707c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007080:	4651      	mov	r1, sl
 8007082:	018a      	lsls	r2, r1, #6
 8007084:	4651      	mov	r1, sl
 8007086:	ebb2 0801 	subs.w	r8, r2, r1
 800708a:	4659      	mov	r1, fp
 800708c:	eb63 0901 	sbc.w	r9, r3, r1
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	f04f 0300 	mov.w	r3, #0
 8007098:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800709c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070a4:	4690      	mov	r8, r2
 80070a6:	4699      	mov	r9, r3
 80070a8:	4623      	mov	r3, r4
 80070aa:	eb18 0303 	adds.w	r3, r8, r3
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	462b      	mov	r3, r5
 80070b2:	eb49 0303 	adc.w	r3, r9, r3
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	f04f 0300 	mov.w	r3, #0
 80070c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80070c4:	4629      	mov	r1, r5
 80070c6:	024b      	lsls	r3, r1, #9
 80070c8:	4621      	mov	r1, r4
 80070ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80070ce:	4621      	mov	r1, r4
 80070d0:	024a      	lsls	r2, r1, #9
 80070d2:	4610      	mov	r0, r2
 80070d4:	4619      	mov	r1, r3
 80070d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070da:	2200      	movs	r2, #0
 80070dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80070e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80070e4:	f7f9 fdf0 	bl	8000cc8 <__aeabi_uldivmod>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4613      	mov	r3, r2
 80070ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070f2:	e065      	b.n	80071c0 <HAL_RCC_GetSysClockFreq+0x420>
 80070f4:	40023800 	.word	0x40023800
 80070f8:	00f42400 	.word	0x00f42400
 80070fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007100:	4b3d      	ldr	r3, [pc, #244]	@ (80071f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	099b      	lsrs	r3, r3, #6
 8007106:	2200      	movs	r2, #0
 8007108:	4618      	mov	r0, r3
 800710a:	4611      	mov	r1, r2
 800710c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007110:	653b      	str	r3, [r7, #80]	@ 0x50
 8007112:	2300      	movs	r3, #0
 8007114:	657b      	str	r3, [r7, #84]	@ 0x54
 8007116:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800711a:	4642      	mov	r2, r8
 800711c:	464b      	mov	r3, r9
 800711e:	f04f 0000 	mov.w	r0, #0
 8007122:	f04f 0100 	mov.w	r1, #0
 8007126:	0159      	lsls	r1, r3, #5
 8007128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800712c:	0150      	lsls	r0, r2, #5
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4641      	mov	r1, r8
 8007134:	1a51      	subs	r1, r2, r1
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	4649      	mov	r1, r9
 800713a:	eb63 0301 	sbc.w	r3, r3, r1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800714c:	4659      	mov	r1, fp
 800714e:	018b      	lsls	r3, r1, #6
 8007150:	4651      	mov	r1, sl
 8007152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007156:	4651      	mov	r1, sl
 8007158:	018a      	lsls	r2, r1, #6
 800715a:	4651      	mov	r1, sl
 800715c:	1a54      	subs	r4, r2, r1
 800715e:	4659      	mov	r1, fp
 8007160:	eb63 0501 	sbc.w	r5, r3, r1
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	f04f 0300 	mov.w	r3, #0
 800716c:	00eb      	lsls	r3, r5, #3
 800716e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007172:	00e2      	lsls	r2, r4, #3
 8007174:	4614      	mov	r4, r2
 8007176:	461d      	mov	r5, r3
 8007178:	4643      	mov	r3, r8
 800717a:	18e3      	adds	r3, r4, r3
 800717c:	603b      	str	r3, [r7, #0]
 800717e:	464b      	mov	r3, r9
 8007180:	eb45 0303 	adc.w	r3, r5, r3
 8007184:	607b      	str	r3, [r7, #4]
 8007186:	f04f 0200 	mov.w	r2, #0
 800718a:	f04f 0300 	mov.w	r3, #0
 800718e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007192:	4629      	mov	r1, r5
 8007194:	028b      	lsls	r3, r1, #10
 8007196:	4621      	mov	r1, r4
 8007198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800719c:	4621      	mov	r1, r4
 800719e:	028a      	lsls	r2, r1, #10
 80071a0:	4610      	mov	r0, r2
 80071a2:	4619      	mov	r1, r3
 80071a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071a8:	2200      	movs	r2, #0
 80071aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80071ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80071b2:	f7f9 fd89 	bl	8000cc8 <__aeabi_uldivmod>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4613      	mov	r3, r2
 80071bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80071c0:	4b0d      	ldr	r3, [pc, #52]	@ (80071f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	0f1b      	lsrs	r3, r3, #28
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80071ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80071d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80071de:	e003      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071e0:	4b06      	ldr	r3, [pc, #24]	@ (80071fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80071e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80071e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	37b8      	adds	r7, #184	@ 0xb8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071f6:	bf00      	nop
 80071f8:	40023800 	.word	0x40023800
 80071fc:	00f42400 	.word	0x00f42400

08007200 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e28d      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 8083 	beq.w	8007326 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007220:	4b94      	ldr	r3, [pc, #592]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 030c 	and.w	r3, r3, #12
 8007228:	2b04      	cmp	r3, #4
 800722a:	d019      	beq.n	8007260 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800722c:	4b91      	ldr	r3, [pc, #580]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 030c 	and.w	r3, r3, #12
        || \
 8007234:	2b08      	cmp	r3, #8
 8007236:	d106      	bne.n	8007246 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007238:	4b8e      	ldr	r3, [pc, #568]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007244:	d00c      	beq.n	8007260 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007246:	4b8b      	ldr	r3, [pc, #556]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800724e:	2b0c      	cmp	r3, #12
 8007250:	d112      	bne.n	8007278 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007252:	4b88      	ldr	r3, [pc, #544]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800725a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800725e:	d10b      	bne.n	8007278 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007260:	4b84      	ldr	r3, [pc, #528]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d05b      	beq.n	8007324 <HAL_RCC_OscConfig+0x124>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d157      	bne.n	8007324 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e25a      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007280:	d106      	bne.n	8007290 <HAL_RCC_OscConfig+0x90>
 8007282:	4b7c      	ldr	r3, [pc, #496]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a7b      	ldr	r2, [pc, #492]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	e01d      	b.n	80072cc <HAL_RCC_OscConfig+0xcc>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007298:	d10c      	bne.n	80072b4 <HAL_RCC_OscConfig+0xb4>
 800729a:	4b76      	ldr	r3, [pc, #472]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a75      	ldr	r2, [pc, #468]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 80072a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	4b73      	ldr	r3, [pc, #460]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a72      	ldr	r2, [pc, #456]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 80072ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	e00b      	b.n	80072cc <HAL_RCC_OscConfig+0xcc>
 80072b4:	4b6f      	ldr	r3, [pc, #444]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a6e      	ldr	r2, [pc, #440]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 80072ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	4b6c      	ldr	r3, [pc, #432]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a6b      	ldr	r2, [pc, #428]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 80072c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d013      	beq.n	80072fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d4:	f7fc ff22 	bl	800411c <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072da:	e008      	b.n	80072ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072dc:	f7fc ff1e 	bl	800411c <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b64      	cmp	r3, #100	@ 0x64
 80072e8:	d901      	bls.n	80072ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e21f      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ee:	4b61      	ldr	r3, [pc, #388]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0f0      	beq.n	80072dc <HAL_RCC_OscConfig+0xdc>
 80072fa:	e014      	b.n	8007326 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fc:	f7fc ff0e 	bl	800411c <HAL_GetTick>
 8007300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007304:	f7fc ff0a 	bl	800411c <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b64      	cmp	r3, #100	@ 0x64
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e20b      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007316:	4b57      	ldr	r3, [pc, #348]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f0      	bne.n	8007304 <HAL_RCC_OscConfig+0x104>
 8007322:	e000      	b.n	8007326 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d06f      	beq.n	8007412 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007332:	4b50      	ldr	r3, [pc, #320]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 030c 	and.w	r3, r3, #12
 800733a:	2b00      	cmp	r3, #0
 800733c:	d017      	beq.n	800736e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800733e:	4b4d      	ldr	r3, [pc, #308]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f003 030c 	and.w	r3, r3, #12
        || \
 8007346:	2b08      	cmp	r3, #8
 8007348:	d105      	bne.n	8007356 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800734a:	4b4a      	ldr	r3, [pc, #296]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00b      	beq.n	800736e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007356:	4b47      	ldr	r3, [pc, #284]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800735e:	2b0c      	cmp	r3, #12
 8007360:	d11c      	bne.n	800739c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007362:	4b44      	ldr	r3, [pc, #272]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d116      	bne.n	800739c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800736e:	4b41      	ldr	r3, [pc, #260]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <HAL_RCC_OscConfig+0x186>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d001      	beq.n	8007386 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e1d3      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007386:	4b3b      	ldr	r3, [pc, #236]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	4937      	ldr	r1, [pc, #220]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007396:	4313      	orrs	r3, r2
 8007398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800739a:	e03a      	b.n	8007412 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d020      	beq.n	80073e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073a4:	4b34      	ldr	r3, [pc, #208]	@ (8007478 <HAL_RCC_OscConfig+0x278>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073aa:	f7fc feb7 	bl	800411c <HAL_GetTick>
 80073ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073b0:	e008      	b.n	80073c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073b2:	f7fc feb3 	bl	800411c <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e1b4      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0f0      	beq.n	80073b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073d0:	4b28      	ldr	r3, [pc, #160]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	4925      	ldr	r1, [pc, #148]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	600b      	str	r3, [r1, #0]
 80073e4:	e015      	b.n	8007412 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073e6:	4b24      	ldr	r3, [pc, #144]	@ (8007478 <HAL_RCC_OscConfig+0x278>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ec:	f7fc fe96 	bl	800411c <HAL_GetTick>
 80073f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073f4:	f7fc fe92 	bl	800411c <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e193      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007406:	4b1b      	ldr	r3, [pc, #108]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1f0      	bne.n	80073f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0308 	and.w	r3, r3, #8
 800741a:	2b00      	cmp	r3, #0
 800741c:	d036      	beq.n	800748c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d016      	beq.n	8007454 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007426:	4b15      	ldr	r3, [pc, #84]	@ (800747c <HAL_RCC_OscConfig+0x27c>)
 8007428:	2201      	movs	r2, #1
 800742a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742c:	f7fc fe76 	bl	800411c <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007434:	f7fc fe72 	bl	800411c <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e173      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007446:	4b0b      	ldr	r3, [pc, #44]	@ (8007474 <HAL_RCC_OscConfig+0x274>)
 8007448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0f0      	beq.n	8007434 <HAL_RCC_OscConfig+0x234>
 8007452:	e01b      	b.n	800748c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007454:	4b09      	ldr	r3, [pc, #36]	@ (800747c <HAL_RCC_OscConfig+0x27c>)
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800745a:	f7fc fe5f 	bl	800411c <HAL_GetTick>
 800745e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007460:	e00e      	b.n	8007480 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007462:	f7fc fe5b 	bl	800411c <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d907      	bls.n	8007480 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e15c      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
 8007474:	40023800 	.word	0x40023800
 8007478:	42470000 	.word	0x42470000
 800747c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007480:	4b8a      	ldr	r3, [pc, #552]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1ea      	bne.n	8007462 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8097 	beq.w	80075c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800749a:	2300      	movs	r3, #0
 800749c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800749e:	4b83      	ldr	r3, [pc, #524]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 80074a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10f      	bne.n	80074ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074aa:	2300      	movs	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]
 80074ae:	4b7f      	ldr	r3, [pc, #508]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b2:	4a7e      	ldr	r2, [pc, #504]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 80074b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80074ba:	4b7c      	ldr	r3, [pc, #496]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074c6:	2301      	movs	r3, #1
 80074c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ca:	4b79      	ldr	r3, [pc, #484]	@ (80076b0 <HAL_RCC_OscConfig+0x4b0>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d118      	bne.n	8007508 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074d6:	4b76      	ldr	r3, [pc, #472]	@ (80076b0 <HAL_RCC_OscConfig+0x4b0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a75      	ldr	r2, [pc, #468]	@ (80076b0 <HAL_RCC_OscConfig+0x4b0>)
 80074dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074e2:	f7fc fe1b 	bl	800411c <HAL_GetTick>
 80074e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e8:	e008      	b.n	80074fc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ea:	f7fc fe17 	bl	800411c <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e118      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074fc:	4b6c      	ldr	r3, [pc, #432]	@ (80076b0 <HAL_RCC_OscConfig+0x4b0>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0f0      	beq.n	80074ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d106      	bne.n	800751e <HAL_RCC_OscConfig+0x31e>
 8007510:	4b66      	ldr	r3, [pc, #408]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007514:	4a65      	ldr	r2, [pc, #404]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007516:	f043 0301 	orr.w	r3, r3, #1
 800751a:	6713      	str	r3, [r2, #112]	@ 0x70
 800751c:	e01c      	b.n	8007558 <HAL_RCC_OscConfig+0x358>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2b05      	cmp	r3, #5
 8007524:	d10c      	bne.n	8007540 <HAL_RCC_OscConfig+0x340>
 8007526:	4b61      	ldr	r3, [pc, #388]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752a:	4a60      	ldr	r2, [pc, #384]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 800752c:	f043 0304 	orr.w	r3, r3, #4
 8007530:	6713      	str	r3, [r2, #112]	@ 0x70
 8007532:	4b5e      	ldr	r3, [pc, #376]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007536:	4a5d      	ldr	r2, [pc, #372]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007538:	f043 0301 	orr.w	r3, r3, #1
 800753c:	6713      	str	r3, [r2, #112]	@ 0x70
 800753e:	e00b      	b.n	8007558 <HAL_RCC_OscConfig+0x358>
 8007540:	4b5a      	ldr	r3, [pc, #360]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007544:	4a59      	ldr	r2, [pc, #356]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007546:	f023 0301 	bic.w	r3, r3, #1
 800754a:	6713      	str	r3, [r2, #112]	@ 0x70
 800754c:	4b57      	ldr	r3, [pc, #348]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 800754e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007550:	4a56      	ldr	r2, [pc, #344]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007552:	f023 0304 	bic.w	r3, r3, #4
 8007556:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d015      	beq.n	800758c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007560:	f7fc fddc 	bl	800411c <HAL_GetTick>
 8007564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007566:	e00a      	b.n	800757e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007568:	f7fc fdd8 	bl	800411c <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007576:	4293      	cmp	r3, r2
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e0d7      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800757e:	4b4b      	ldr	r3, [pc, #300]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0ee      	beq.n	8007568 <HAL_RCC_OscConfig+0x368>
 800758a:	e014      	b.n	80075b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800758c:	f7fc fdc6 	bl	800411c <HAL_GetTick>
 8007590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007592:	e00a      	b.n	80075aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007594:	f7fc fdc2 	bl	800411c <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e0c1      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075aa:	4b40      	ldr	r3, [pc, #256]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1ee      	bne.n	8007594 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d105      	bne.n	80075c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075bc:	4b3b      	ldr	r3, [pc, #236]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 80075be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c0:	4a3a      	ldr	r2, [pc, #232]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 80075c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 80ad 	beq.w	800772c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075d2:	4b36      	ldr	r3, [pc, #216]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 030c 	and.w	r3, r3, #12
 80075da:	2b08      	cmp	r3, #8
 80075dc:	d060      	beq.n	80076a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d145      	bne.n	8007672 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075e6:	4b33      	ldr	r3, [pc, #204]	@ (80076b4 <HAL_RCC_OscConfig+0x4b4>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ec:	f7fc fd96 	bl	800411c <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f4:	f7fc fd92 	bl	800411c <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e093      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007606:	4b29      	ldr	r3, [pc, #164]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f0      	bne.n	80075f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69da      	ldr	r2, [r3, #28]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007620:	019b      	lsls	r3, r3, #6
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007628:	085b      	lsrs	r3, r3, #1
 800762a:	3b01      	subs	r3, #1
 800762c:	041b      	lsls	r3, r3, #16
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007634:	061b      	lsls	r3, r3, #24
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763c:	071b      	lsls	r3, r3, #28
 800763e:	491b      	ldr	r1, [pc, #108]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007640:	4313      	orrs	r3, r2
 8007642:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007644:	4b1b      	ldr	r3, [pc, #108]	@ (80076b4 <HAL_RCC_OscConfig+0x4b4>)
 8007646:	2201      	movs	r2, #1
 8007648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764a:	f7fc fd67 	bl	800411c <HAL_GetTick>
 800764e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007650:	e008      	b.n	8007664 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007652:	f7fc fd63 	bl	800411c <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d901      	bls.n	8007664 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e064      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007664:	4b11      	ldr	r3, [pc, #68]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d0f0      	beq.n	8007652 <HAL_RCC_OscConfig+0x452>
 8007670:	e05c      	b.n	800772c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007672:	4b10      	ldr	r3, [pc, #64]	@ (80076b4 <HAL_RCC_OscConfig+0x4b4>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007678:	f7fc fd50 	bl	800411c <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007680:	f7fc fd4c 	bl	800411c <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e04d      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007692:	4b06      	ldr	r3, [pc, #24]	@ (80076ac <HAL_RCC_OscConfig+0x4ac>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f0      	bne.n	8007680 <HAL_RCC_OscConfig+0x480>
 800769e:	e045      	b.n	800772c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d107      	bne.n	80076b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e040      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
 80076ac:	40023800 	.word	0x40023800
 80076b0:	40007000 	.word	0x40007000
 80076b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076b8:	4b1f      	ldr	r3, [pc, #124]	@ (8007738 <HAL_RCC_OscConfig+0x538>)
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d030      	beq.n	8007728 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d129      	bne.n	8007728 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076de:	429a      	cmp	r2, r3
 80076e0:	d122      	bne.n	8007728 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80076e8:	4013      	ands	r3, r2
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80076ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d119      	bne.n	8007728 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fe:	085b      	lsrs	r3, r3, #1
 8007700:	3b01      	subs	r3, #1
 8007702:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007704:	429a      	cmp	r2, r3
 8007706:	d10f      	bne.n	8007728 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007712:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007714:	429a      	cmp	r2, r3
 8007716:	d107      	bne.n	8007728 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007722:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007724:	429a      	cmp	r2, r3
 8007726:	d001      	beq.n	800772c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e000      	b.n	800772e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40023800 	.word	0x40023800

0800773c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e022      	b.n	8007794 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d105      	bne.n	8007766 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7fb fff9 	bl	8003758 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2203      	movs	r2, #3
 800776a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f814 	bl	800779c <HAL_SD_InitCard>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e00a      	b.n	8007794 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800779c:	b5b0      	push	{r4, r5, r7, lr}
 800779e:	b08e      	sub	sp, #56	@ 0x38
 80077a0:	af04      	add	r7, sp, #16
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80077a8:	2300      	movs	r3, #0
 80077aa:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80077ac:	2300      	movs	r3, #0
 80077ae:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80077b0:	2300      	movs	r3, #0
 80077b2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80077b4:	2300      	movs	r3, #0
 80077b6:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80077b8:	2376      	movs	r3, #118	@ 0x76
 80077ba:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681d      	ldr	r5, [r3, #0]
 80077c0:	466c      	mov	r4, sp
 80077c2:	f107 0318 	add.w	r3, r7, #24
 80077c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80077ce:	f107 030c 	add.w	r3, r7, #12
 80077d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077d4:	4628      	mov	r0, r5
 80077d6:	f003 f817 	bl	800a808 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80077da:	4b2a      	ldr	r3, [pc, #168]	@ (8007884 <HAL_SD_InitCard+0xe8>)
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f003 f858 	bl	800a89a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80077ea:	4b26      	ldr	r3, [pc, #152]	@ (8007884 <HAL_SD_InitCard+0xe8>)
 80077ec:	2201      	movs	r2, #1
 80077ee:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80077f0:	2002      	movs	r0, #2
 80077f2:	f7fc fc9f 	bl	8004134 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 ff76 	bl	80086e8 <SD_PowerON>
 80077fc:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e02e      	b.n	800787a <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fe95 	bl	800854c <SD_InitCard>
 8007822:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00b      	beq.n	8007842 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e01b      	b.n	800787a <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800784a:	4618      	mov	r0, r3
 800784c:	f003 f8c5 	bl	800a9da <SDMMC_CmdBlockLength>
 8007850:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00f      	beq.n	8007878 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a0a      	ldr	r2, [pc, #40]	@ (8007888 <HAL_SD_InitCard+0xec>)
 800785e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e000      	b.n	800787a <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3728      	adds	r7, #40	@ 0x28
 800787e:	46bd      	mov	sp, r7
 8007880:	bdb0      	pop	{r4, r5, r7, pc}
 8007882:	bf00      	nop
 8007884:	422580a0 	.word	0x422580a0
 8007888:	004005ff 	.word	0x004005ff

0800788c <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e011      	b.n	80078c2 <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2203      	movs	r2, #3
 80078a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 ffac 	bl	8008804 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7fc f883 	bl	80039b8 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_RESET;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08c      	sub	sp, #48	@ 0x30
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d107      	bne.n	80078f4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e0be      	b.n	8007a72 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	f040 80b7 	bne.w	8007a70 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007908:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	441a      	add	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007912:	429a      	cmp	r2, r3
 8007914:	d907      	bls.n	8007926 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e0a5      	b.n	8007a72 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2203      	movs	r2, #3
 800792a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2200      	movs	r2, #0
 8007934:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007944:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794a:	4a4c      	ldr	r2, [pc, #304]	@ (8007a7c <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800794c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007952:	4a4b      	ldr	r2, [pc, #300]	@ (8007a80 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007954:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795a:	2200      	movs	r2, #0
 800795c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007962:	2200      	movs	r2, #0
 8007964:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3380      	adds	r3, #128	@ 0x80
 800798c:	4619      	mov	r1, r3
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	025b      	lsls	r3, r3, #9
 8007994:	089b      	lsrs	r3, r3, #2
 8007996:	f7fc fe11 	bl	80045bc <HAL_DMA_Start_IT>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d017      	beq.n	80079d0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80079ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a33      	ldr	r2, [pc, #204]	@ (8007a84 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80079b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e050      	b.n	8007a72 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80079d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007a88 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80079d2:	2201      	movs	r2, #1
 80079d4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d002      	beq.n	80079e4 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 80079de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e0:	025b      	lsls	r3, r3, #9
 80079e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079e4:	f04f 33ff 	mov.w	r3, #4294967295
 80079e8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	025b      	lsls	r3, r3, #9
 80079ee:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80079f0:	2390      	movs	r3, #144	@ 0x90
 80079f2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80079f4:	2302      	movs	r3, #2
 80079f6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80079fc:	2301      	movs	r3, #1
 80079fe:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f107 0210 	add.w	r2, r7, #16
 8007a08:	4611      	mov	r1, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f002 ffb9 	bl	800a982 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d90a      	bls.n	8007a2c <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2282      	movs	r2, #130	@ 0x82
 8007a1a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a22:	4618      	mov	r0, r3
 8007a24:	f003 f81d 	bl	800aa62 <SDMMC_CmdReadMultiBlock>
 8007a28:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007a2a:	e009      	b.n	8007a40 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2281      	movs	r2, #129	@ 0x81
 8007a30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f002 fff0 	bl	800aa1e <SDMMC_CmdReadSingleBlock>
 8007a3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d012      	beq.n	8007a6c <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8007a84 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007a4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a54:	431a      	orrs	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e002      	b.n	8007a72 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e000      	b.n	8007a72 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007a70:	2302      	movs	r3, #2
  }
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3730      	adds	r7, #48	@ 0x30
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	0800835b 	.word	0x0800835b
 8007a80:	080083cd 	.word	0x080083cd
 8007a84:	004005ff 	.word	0x004005ff
 8007a88:	4225858c 	.word	0x4225858c

08007a8c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08c      	sub	sp, #48	@ 0x30
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d107      	bne.n	8007ab4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e0c1      	b.n	8007c38 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	f040 80ba 	bne.w	8007c36 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	441a      	add	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d907      	bls.n	8007ae6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ada:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e0a8      	b.n	8007c38 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2203      	movs	r2, #3
 8007aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2200      	movs	r2, #0
 8007af4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 021a 	orr.w	r2, r2, #26
 8007b04:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b0a:	4a4d      	ldr	r2, [pc, #308]	@ (8007c40 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8007b0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b12:	4a4c      	ldr	r2, [pc, #304]	@ (8007c44 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8007b14:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d002      	beq.n	8007b2c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b28:	025b      	lsls	r3, r3, #9
 8007b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d90a      	bls.n	8007b48 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	22a0      	movs	r2, #160	@ 0xa0
 8007b36:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f002 ffd3 	bl	800aaea <SDMMC_CmdWriteMultiBlock>
 8007b44:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007b46:	e009      	b.n	8007b5c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2290      	movs	r2, #144	@ 0x90
 8007b4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b54:	4618      	mov	r0, r3
 8007b56:	f002 ffa6 	bl	800aaa6 <SDMMC_CmdWriteSingleBlock>
 8007b5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d012      	beq.n	8007b88 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a38      	ldr	r2, [pc, #224]	@ (8007c48 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007b68:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b70:	431a      	orrs	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e057      	b.n	8007c38 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007b88:	4b30      	ldr	r3, [pc, #192]	@ (8007c4c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b92:	2240      	movs	r2, #64	@ 0x40
 8007b94:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3380      	adds	r3, #128	@ 0x80
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	025b      	lsls	r3, r3, #9
 8007bc4:	089b      	lsrs	r3, r3, #2
 8007bc6:	f7fc fcf9 	bl	80045bc <HAL_DMA_Start_IT>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01a      	beq.n	8007c06 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 021a 	bic.w	r2, r2, #26
 8007bde:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a18      	ldr	r2, [pc, #96]	@ (8007c48 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007be6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e018      	b.n	8007c38 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c06:	f04f 33ff 	mov.w	r3, #4294967295
 8007c0a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	025b      	lsls	r3, r3, #9
 8007c10:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007c12:	2390      	movs	r3, #144	@ 0x90
 8007c14:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007c16:	2300      	movs	r3, #0
 8007c18:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f107 0210 	add.w	r2, r7, #16
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f002 fea8 	bl	800a982 <SDIO_ConfigData>

      return HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	e000      	b.n	8007c38 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8007c36:	2302      	movs	r3, #2
  }
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3730      	adds	r7, #48	@ 0x30
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	08008331 	.word	0x08008331
 8007c44:	080083cd 	.word	0x080083cd
 8007c48:	004005ff 	.word	0x004005ff
 8007c4c:	4225858c 	.word	0x4225858c

08007c50 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c5c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d008      	beq.n	8007c7e <HAL_SD_IRQHandler+0x2e>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f003 0308 	and.w	r3, r3, #8
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fdf9 	bl	800886e <SD_Read_IT>
 8007c7c:	e155      	b.n	8007f2a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 808f 	beq.w	8007dac <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c96:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6812      	ldr	r2, [r2, #0]
 8007ca2:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8007ca6:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8007caa:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0201 	bic.w	r2, r2, #1
 8007cba:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f003 0308 	and.w	r3, r3, #8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d039      	beq.n	8007d3a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d104      	bne.n	8007cda <HAL_SD_IRQHandler+0x8a>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d011      	beq.n	8007cfe <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f002 ff26 	bl	800ab30 <SDMMC_CmdStopTransfer>
 8007ce4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f91f 	bl	8007f3c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007d06:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d104      	bne.n	8007d2a <HAL_SD_IRQHandler+0xda>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f003 fb3c 	bl	800b3a8 <HAL_SD_RxCpltCallback>
 8007d30:	e0fb      	b.n	8007f2a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f003 fb2e 	bl	800b394 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007d38:	e0f7      	b.n	8007f2a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80f2 	beq.w	8007f2a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d011      	beq.n	8007d74 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f002 feeb 	bl	800ab30 <SDMMC_CmdStopTransfer>
 8007d5a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d008      	beq.n	8007d74 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f8e4 	bl	8007f3c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f040 80d5 	bne.w	8007f2a <HAL_SD_IRQHandler+0x2da>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f040 80cf 	bne.w	8007f2a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0208 	bic.w	r2, r2, #8
 8007d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f003 faf5 	bl	800b394 <HAL_SD_TxCpltCallback>
}
 8007daa:	e0be      	b.n	8007f2a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d008      	beq.n	8007dcc <HAL_SD_IRQHandler+0x17c>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f003 0308 	and.w	r3, r3, #8
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fda3 	bl	8008910 <SD_Write_IT>
 8007dca:	e0ae      	b.n	8007f2a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 80a7 	beq.w	8007f2a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dee:	f043 0202 	orr.w	r2, r3, #2
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dfc:	f003 0308 	and.w	r3, r3, #8
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d005      	beq.n	8007e10 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e08:	f043 0208 	orr.w	r2, r3, #8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e22:	f043 0220 	orr.w	r2, r3, #32
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e30:	f003 0310 	and.w	r3, r3, #16
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3c:	f043 0210 	orr.w	r2, r3, #16
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007e4c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007e5c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f002 fe64 	bl	800ab30 <SDMMC_CmdStopTransfer>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f003 0308 	and.w	r3, r3, #8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f855 	bl	8007f3c <HAL_SD_ErrorCallback>
}
 8007e92:	e04a      	b.n	8007f2a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d045      	beq.n	8007f2a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f003 0310 	and.w	r3, r3, #16
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d104      	bne.n	8007eb2 <HAL_SD_IRQHandler+0x262>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d011      	beq.n	8007ed6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8007f34 <HAL_SD_IRQHandler+0x2e4>)
 8007eb8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fc fbd4 	bl	800466c <HAL_DMA_Abort_IT>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d02f      	beq.n	8007f2a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 face 	bl	8008470 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007ed4:	e029      	b.n	8007f2a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d104      	bne.n	8007eea <HAL_SD_IRQHandler+0x29a>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d011      	beq.n	8007f0e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eee:	4a12      	ldr	r2, [pc, #72]	@ (8007f38 <HAL_SD_IRQHandler+0x2e8>)
 8007ef0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fc fbb8 	bl	800466c <HAL_DMA_Abort_IT>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d013      	beq.n	8007f2a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fae9 	bl	80084de <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007f0c:	e00d      	b.n	8007f2a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f003 fa2c 	bl	800b380 <HAL_SD_AbortCallback>
}
 8007f28:	e7ff      	b.n	8007f2a <HAL_SD_IRQHandler+0x2da>
 8007f2a:	bf00      	nop
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	08008471 	.word	0x08008471
 8007f38:	080084df 	.word	0x080084df

08007f3c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f5e:	0f9b      	lsrs	r3, r3, #30
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f6a:	0e9b      	lsrs	r3, r3, #26
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f7c:	0e1b      	lsrs	r3, r3, #24
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f003 0303 	and.w	r3, r3, #3
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f8e:	0c1b      	lsrs	r3, r3, #16
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f9a:	0a1b      	lsrs	r3, r3, #8
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fb0:	0d1b      	lsrs	r3, r3, #20
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fbc:	0c1b      	lsrs	r3, r3, #16
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	f003 030f 	and.w	r3, r3, #15
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fce:	0bdb      	lsrs	r3, r3, #15
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fe0:	0b9b      	lsrs	r3, r3, #14
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ff2:	0b5b      	lsrs	r3, r3, #13
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008004:	0b1b      	lsrs	r3, r3, #12
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2200      	movs	r2, #0
 8008016:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800801c:	2b00      	cmp	r3, #0
 800801e:	d163      	bne.n	80080e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008024:	009a      	lsls	r2, r3, #2
 8008026:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800802a:	4013      	ands	r3, r2
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008030:	0f92      	lsrs	r2, r2, #30
 8008032:	431a      	orrs	r2, r3
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800803c:	0edb      	lsrs	r3, r3, #27
 800803e:	b2db      	uxtb	r3, r3
 8008040:	f003 0307 	and.w	r3, r3, #7
 8008044:	b2da      	uxtb	r2, r3
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800804e:	0e1b      	lsrs	r3, r3, #24
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	b2da      	uxtb	r2, r3
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008060:	0d5b      	lsrs	r3, r3, #21
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	b2da      	uxtb	r2, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008072:	0c9b      	lsrs	r3, r3, #18
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	b2da      	uxtb	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008084:	0bdb      	lsrs	r3, r3, #15
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	b2da      	uxtb	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	7e1b      	ldrb	r3, [r3, #24]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0307 	and.w	r3, r3, #7
 80080a6:	3302      	adds	r3, #2
 80080a8:	2201      	movs	r2, #1
 80080aa:	fa02 f303 	lsl.w	r3, r2, r3
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80080b2:	fb03 f202 	mul.w	r2, r3, r2
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	7a1b      	ldrb	r3, [r3, #8]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	2201      	movs	r2, #1
 80080c6:	409a      	lsls	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80080d4:	0a52      	lsrs	r2, r2, #9
 80080d6:	fb03 f202 	mul.w	r2, r3, r2
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80080e6:	e031      	b.n	800814c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d11d      	bne.n	800812c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080f4:	041b      	lsls	r3, r3, #16
 80080f6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080fe:	0c1b      	lsrs	r3, r3, #16
 8008100:	431a      	orrs	r2, r3
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	3301      	adds	r3, #1
 800810c:	029a      	lsls	r2, r3, #10
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008120:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	661a      	str	r2, [r3, #96]	@ 0x60
 800812a:	e00f      	b.n	800814c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a58      	ldr	r2, [pc, #352]	@ (8008294 <HAL_SD_GetCardCSD+0x344>)
 8008132:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008138:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e09d      	b.n	8008288 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008150:	0b9b      	lsrs	r3, r3, #14
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	b2da      	uxtb	r2, r3
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008162:	09db      	lsrs	r3, r3, #7
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800816a:	b2da      	uxtb	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008174:	b2db      	uxtb	r3, r3
 8008176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800817a:	b2da      	uxtb	r2, r3
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008184:	0fdb      	lsrs	r3, r3, #31
 8008186:	b2da      	uxtb	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008190:	0f5b      	lsrs	r3, r3, #29
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	b2da      	uxtb	r2, r3
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081a2:	0e9b      	lsrs	r3, r3, #26
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081b4:	0d9b      	lsrs	r3, r3, #22
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 030f 	and.w	r3, r3, #15
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081c6:	0d5b      	lsrs	r3, r3, #21
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e2:	0c1b      	lsrs	r3, r3, #16
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f6:	0bdb      	lsrs	r3, r3, #15
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800820a:	0b9b      	lsrs	r3, r3, #14
 800820c:	b2db      	uxtb	r3, r3
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	b2da      	uxtb	r2, r3
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821e:	0b5b      	lsrs	r3, r3, #13
 8008220:	b2db      	uxtb	r3, r3
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	b2da      	uxtb	r2, r3
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008232:	0b1b      	lsrs	r3, r3, #12
 8008234:	b2db      	uxtb	r3, r3
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	b2da      	uxtb	r2, r3
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008246:	0a9b      	lsrs	r3, r3, #10
 8008248:	b2db      	uxtb	r3, r3
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	b2da      	uxtb	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800825a:	0a1b      	lsrs	r3, r3, #8
 800825c:	b2db      	uxtb	r3, r3
 800825e:	f003 0303 	and.w	r3, r3, #3
 8008262:	b2da      	uxtb	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800826e:	085b      	lsrs	r3, r3, #1
 8008270:	b2db      	uxtb	r3, r3
 8008272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008276:	b2da      	uxtb	r2, r3
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	004005ff 	.word	0x004005ff

08008298 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80082fc:	f107 030c 	add.w	r3, r7, #12
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa8b 	bl	800881e <SD_SendStatus>
 8008308:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	0a5b      	lsrs	r3, r3, #9
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008326:	693b      	ldr	r3, [r7, #16]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800834c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800834e:	bf00      	nop
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008366:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800836c:	2b82      	cmp	r3, #130	@ 0x82
 800836e:	d111      	bne.n	8008394 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f002 fbdb 	bl	800ab30 <SDMMC_CmdStopTransfer>
 800837a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	431a      	orrs	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7ff fdd4 	bl	8007f3c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0208 	bic.w	r2, r2, #8
 80083a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80083ac:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f002 fff3 	bl	800b3a8 <HAL_SD_RxCpltCallback>
#endif
}
 80083c2:	bf00      	nop
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7fc faf2 	bl	80049c4 <HAL_DMA_GetError>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d03e      	beq.n	8008464 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083f4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d002      	beq.n	8008402 <SD_DMAError+0x36>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d12d      	bne.n	800845e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a19      	ldr	r2, [pc, #100]	@ (800846c <SD_DMAError+0xa0>)
 8008408:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008418:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008426:	6978      	ldr	r0, [r7, #20]
 8008428:	f7ff ff62 	bl	80082f0 <HAL_SD_GetCardState>
 800842c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b06      	cmp	r3, #6
 8008432:	d002      	beq.n	800843a <SD_DMAError+0x6e>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b05      	cmp	r3, #5
 8008438:	d10a      	bne.n	8008450 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f002 fb76 	bl	800ab30 <SDMMC_CmdStopTransfer>
 8008444:	4602      	mov	r2, r0
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844a:	431a      	orrs	r2, r3
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2200      	movs	r2, #0
 800845c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800845e:	6978      	ldr	r0, [r7, #20]
 8008460:	f7ff fd6c 	bl	8007f3c <HAL_SD_ErrorCallback>
#endif
  }
}
 8008464:	bf00      	nop
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	004005ff 	.word	0x004005ff

08008470 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008486:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f7ff ff31 	bl	80082f0 <HAL_SD_GetCardState>
 800848e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b06      	cmp	r3, #6
 80084a2:	d002      	beq.n	80084aa <SD_DMATxAbort+0x3a>
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b05      	cmp	r3, #5
 80084a8:	d10a      	bne.n	80084c0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f002 fb3e 	bl	800ab30 <SDMMC_CmdStopTransfer>
 80084b4:	4602      	mov	r2, r0
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ba:	431a      	orrs	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d103      	bne.n	80084d0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f002 ff59 	bl	800b380 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80084ce:	e002      	b.n	80084d6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7ff fd33 	bl	8007f3c <HAL_SD_ErrorCallback>
}
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80084f4:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff fefa 	bl	80082f0 <HAL_SD_GetCardState>
 80084fc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b06      	cmp	r3, #6
 8008510:	d002      	beq.n	8008518 <SD_DMARxAbort+0x3a>
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b05      	cmp	r3, #5
 8008516:	d10a      	bne.n	800852e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f002 fb07 	bl	800ab30 <SDMMC_CmdStopTransfer>
 8008522:	4602      	mov	r2, r0
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008528:	431a      	orrs	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008532:	2b00      	cmp	r3, #0
 8008534:	d103      	bne.n	800853e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f002 ff22 	bl	800b380 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800853c:	e002      	b.n	8008544 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7ff fcfc 	bl	8007f3c <HAL_SD_ErrorCallback>
}
 8008544:	bf00      	nop
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800854c:	b5b0      	push	{r4, r5, r7, lr}
 800854e:	b094      	sub	sp, #80	@ 0x50
 8008550:	af04      	add	r7, sp, #16
 8008552:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008554:	2301      	movs	r3, #1
 8008556:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4618      	mov	r0, r3
 800855e:	f002 f9b8 	bl	800a8d2 <SDIO_GetPowerState>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d102      	bne.n	800856e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008568:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800856c:	e0b8      	b.n	80086e0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008572:	2b03      	cmp	r3, #3
 8008574:	d02f      	beq.n	80085d6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4618      	mov	r0, r3
 800857c:	f002 fb9f 	bl	800acbe <SDMMC_CmdSendCID>
 8008580:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <SD_InitCard+0x40>
    {
      return errorstate;
 8008588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800858a:	e0a9      	b.n	80086e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2100      	movs	r1, #0
 8008592:	4618      	mov	r0, r3
 8008594:	f002 f9e2 	bl	800a95c <SDIO_GetResponse>
 8008598:	4602      	mov	r2, r0
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2104      	movs	r1, #4
 80085a4:	4618      	mov	r0, r3
 80085a6:	f002 f9d9 	bl	800a95c <SDIO_GetResponse>
 80085aa:	4602      	mov	r2, r0
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2108      	movs	r1, #8
 80085b6:	4618      	mov	r0, r3
 80085b8:	f002 f9d0 	bl	800a95c <SDIO_GetResponse>
 80085bc:	4602      	mov	r2, r0
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	210c      	movs	r1, #12
 80085c8:	4618      	mov	r0, r3
 80085ca:	f002 f9c7 	bl	800a95c <SDIO_GetResponse>
 80085ce:	4602      	mov	r2, r0
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d00d      	beq.n	80085fa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f107 020e 	add.w	r2, r7, #14
 80085e6:	4611      	mov	r1, r2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f002 fba5 	bl	800ad38 <SDMMC_CmdSetRelAdd>
 80085ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <SD_InitCard+0xae>
    {
      return errorstate;
 80085f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f8:	e072      	b.n	80086e0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d036      	beq.n	8008670 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008602:	89fb      	ldrh	r3, [r7, #14]
 8008604:	461a      	mov	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008612:	041b      	lsls	r3, r3, #16
 8008614:	4619      	mov	r1, r3
 8008616:	4610      	mov	r0, r2
 8008618:	f002 fb6f 	bl	800acfa <SDMMC_CmdSendCSD>
 800861c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800861e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008626:	e05b      	b.n	80086e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f002 f994 	bl	800a95c <SDIO_GetResponse>
 8008634:	4602      	mov	r2, r0
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2104      	movs	r1, #4
 8008640:	4618      	mov	r0, r3
 8008642:	f002 f98b 	bl	800a95c <SDIO_GetResponse>
 8008646:	4602      	mov	r2, r0
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2108      	movs	r1, #8
 8008652:	4618      	mov	r0, r3
 8008654:	f002 f982 	bl	800a95c <SDIO_GetResponse>
 8008658:	4602      	mov	r2, r0
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	210c      	movs	r1, #12
 8008664:	4618      	mov	r0, r3
 8008666:	f002 f979 	bl	800a95c <SDIO_GetResponse>
 800866a:	4602      	mov	r2, r0
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2104      	movs	r1, #4
 8008676:	4618      	mov	r0, r3
 8008678:	f002 f970 	bl	800a95c <SDIO_GetResponse>
 800867c:	4603      	mov	r3, r0
 800867e:	0d1a      	lsrs	r2, r3, #20
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008684:	f107 0310 	add.w	r3, r7, #16
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff fc60 	bl	8007f50 <HAL_SD_GetCardCSD>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d002      	beq.n	800869c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008696:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800869a:	e021      	b.n	80086e0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6819      	ldr	r1, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086a4:	041b      	lsls	r3, r3, #16
 80086a6:	2200      	movs	r2, #0
 80086a8:	461c      	mov	r4, r3
 80086aa:	4615      	mov	r5, r2
 80086ac:	4622      	mov	r2, r4
 80086ae:	462b      	mov	r3, r5
 80086b0:	4608      	mov	r0, r1
 80086b2:	f002 fa5f 	bl	800ab74 <SDMMC_CmdSelDesel>
 80086b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80086b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <SD_InitCard+0x176>
  {
    return errorstate;
 80086be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c0:	e00e      	b.n	80086e0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681d      	ldr	r5, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	466c      	mov	r4, sp
 80086ca:	f103 0210 	add.w	r2, r3, #16
 80086ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80086d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086d4:	3304      	adds	r3, #4
 80086d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086d8:	4628      	mov	r0, r5
 80086da:	f002 f895 	bl	800a808 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3740      	adds	r7, #64	@ 0x40
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bdb0      	pop	{r4, r5, r7, pc}

080086e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	617b      	str	r3, [r7, #20]
 80086f8:	2300      	movs	r3, #0
 80086fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f002 fa5a 	bl	800abba <SDMMC_CmdGoIdleState>
 8008706:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <SD_PowerON+0x2a>
  {
    return errorstate;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	e072      	b.n	80087f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f002 fa6d 	bl	800abf6 <SDMMC_CmdOperCond>
 800871c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00d      	beq.n	8008740 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4618      	mov	r0, r3
 8008730:	f002 fa43 	bl	800abba <SDMMC_CmdGoIdleState>
 8008734:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d004      	beq.n	8008746 <SD_PowerON+0x5e>
    {
      return errorstate;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	e05b      	b.n	80087f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800874a:	2b01      	cmp	r3, #1
 800874c:	d137      	bne.n	80087be <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2100      	movs	r1, #0
 8008754:	4618      	mov	r0, r3
 8008756:	f002 fa6d 	bl	800ac34 <SDMMC_CmdAppCommand>
 800875a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d02d      	beq.n	80087be <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008762:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008766:	e047      	b.n	80087f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2100      	movs	r1, #0
 800876e:	4618      	mov	r0, r3
 8008770:	f002 fa60 	bl	800ac34 <SDMMC_CmdAppCommand>
 8008774:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <SD_PowerON+0x98>
    {
      return errorstate;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	e03b      	b.n	80087f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	491e      	ldr	r1, [pc, #120]	@ (8008800 <SD_PowerON+0x118>)
 8008786:	4618      	mov	r0, r3
 8008788:	f002 fa76 	bl	800ac78 <SDMMC_CmdAppOperCommand>
 800878c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008794:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008798:	e02e      	b.n	80087f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2100      	movs	r1, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f002 f8db 	bl	800a95c <SDIO_GetResponse>
 80087a6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	0fdb      	lsrs	r3, r3, #31
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d101      	bne.n	80087b4 <SD_PowerON+0xcc>
 80087b0:	2301      	movs	r3, #1
 80087b2:	e000      	b.n	80087b6 <SD_PowerON+0xce>
 80087b4:	2300      	movs	r3, #0
 80087b6:	613b      	str	r3, [r7, #16]

    count++;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	3301      	adds	r3, #1
 80087bc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d802      	bhi.n	80087ce <SD_PowerON+0xe6>
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d0cc      	beq.n	8008768 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d902      	bls.n	80087de <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80087d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80087dc:	e00c      	b.n	80087f8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80087ee:	e002      	b.n	80087f6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	c1100000 	.word	0xc1100000

08008804 <SD_PowerOFF>:
  * @brief  Turns the SDIO output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDIO_PowerState_OFF(hsd->Instance);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4618      	mov	r0, r3
 8008812:	f002 f850 	bl	800a8b6 <SDIO_PowerState_OFF>
}
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d102      	bne.n	8008834 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800882e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008832:	e018      	b.n	8008866 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800883c:	041b      	lsls	r3, r3, #16
 800883e:	4619      	mov	r1, r3
 8008840:	4610      	mov	r0, r2
 8008842:	f002 fa9a 	bl	800ad7a <SDMMC_CmdSendStatus>
 8008846:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <SD_SendStatus+0x34>
  {
    return errorstate;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	e009      	b.n	8008866 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2100      	movs	r1, #0
 8008858:	4618      	mov	r0, r3
 800885a:	f002 f87f 	bl	800a95c <SDIO_GetResponse>
 800885e:	4602      	mov	r2, r0
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b086      	sub	sp, #24
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008880:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d03f      	beq.n	8008908 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008888:	2300      	movs	r3, #0
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	e033      	b.n	80088f6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4618      	mov	r0, r3
 8008894:	f001 ffe3 	bl	800a85e <SDIO_ReadFIFO>
 8008898:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	b2da      	uxtb	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3301      	adds	r3, #1
 80088a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	0a1b      	lsrs	r3, r3, #8
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	3301      	adds	r3, #1
 80088bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	0c1b      	lsrs	r3, r3, #16
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3301      	adds	r3, #1
 80088d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	0e1b      	lsrs	r3, r3, #24
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	3301      	adds	r3, #1
 80088f4:	617b      	str	r3, [r7, #20]
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b07      	cmp	r3, #7
 80088fa:	d9c8      	bls.n	800888e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008908:	bf00      	nop
 800890a:	3718      	adds	r7, #24
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008922:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d043      	beq.n	80089b2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800892a:	2300      	movs	r3, #0
 800892c:	617b      	str	r3, [r7, #20]
 800892e:	e037      	b.n	80089a0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3301      	adds	r3, #1
 800893a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	3b01      	subs	r3, #1
 8008940:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	021a      	lsls	r2, r3, #8
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	4313      	orrs	r3, r2
 800894c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3301      	adds	r3, #1
 8008952:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	3b01      	subs	r3, #1
 8008958:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	041a      	lsls	r2, r3, #16
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4313      	orrs	r3, r2
 8008964:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3301      	adds	r3, #1
 800896a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	3b01      	subs	r3, #1
 8008970:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	061a      	lsls	r2, r3, #24
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	4313      	orrs	r3, r2
 800897c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3301      	adds	r3, #1
 8008982:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	3b01      	subs	r3, #1
 8008988:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f107 0208 	add.w	r2, r7, #8
 8008992:	4611      	mov	r1, r2
 8008994:	4618      	mov	r0, r3
 8008996:	f001 ff6f 	bl	800a878 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	3301      	adds	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2b07      	cmp	r3, #7
 80089a4:	d9c4      	bls.n	8008930 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80089b2:	bf00      	nop
 80089b4:	3718      	adds	r7, #24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e07b      	b.n	8008ac4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d108      	bne.n	80089e6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089dc:	d009      	beq.n	80089f2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	61da      	str	r2, [r3, #28]
 80089e4:	e005      	b.n	80089f2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d106      	bne.n	8008a12 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7fb f841 	bl	8003a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2202      	movs	r2, #2
 8008a16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a28:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008a3a:	431a      	orrs	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a44:	431a      	orrs	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	431a      	orrs	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a62:	431a      	orrs	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	69db      	ldr	r3, [r3, #28]
 8008a68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a76:	ea42 0103 	orr.w	r1, r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	0c1b      	lsrs	r3, r3, #16
 8008a90:	f003 0104 	and.w	r1, r3, #4
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a98:	f003 0210 	and.w	r2, r3, #16
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	69da      	ldr	r2, [r3, #28]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ab2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008adc:	f7fb fb1e 	bl	800411c <HAL_GetTick>
 8008ae0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008ae2:	88fb      	ldrh	r3, [r7, #6]
 8008ae4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d001      	beq.n	8008af6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008af2:	2302      	movs	r3, #2
 8008af4:	e12a      	b.n	8008d4c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <HAL_SPI_Transmit+0x36>
 8008afc:	88fb      	ldrh	r3, [r7, #6]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e122      	b.n	8008d4c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_SPI_Transmit+0x48>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e11b      	b.n	8008d4c <HAL_SPI_Transmit+0x280>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2203      	movs	r2, #3
 8008b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	88fa      	ldrh	r2, [r7, #6]
 8008b34:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	88fa      	ldrh	r2, [r7, #6]
 8008b3a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b62:	d10f      	bne.n	8008b84 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b8e:	2b40      	cmp	r3, #64	@ 0x40
 8008b90:	d007      	beq.n	8008ba2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ba0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008baa:	d152      	bne.n	8008c52 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <HAL_SPI_Transmit+0xee>
 8008bb4:	8b7b      	ldrh	r3, [r7, #26]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d145      	bne.n	8008c46 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bbe:	881a      	ldrh	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bca:	1c9a      	adds	r2, r3, #2
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008bde:	e032      	b.n	8008c46 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d112      	bne.n	8008c14 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf2:	881a      	ldrh	r2, [r3, #0]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bfe:	1c9a      	adds	r2, r3, #2
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008c12:	e018      	b.n	8008c46 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c14:	f7fb fa82 	bl	800411c <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d803      	bhi.n	8008c2c <HAL_SPI_Transmit+0x160>
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2a:	d102      	bne.n	8008c32 <HAL_SPI_Transmit+0x166>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e082      	b.n	8008d4c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1c7      	bne.n	8008be0 <HAL_SPI_Transmit+0x114>
 8008c50:	e053      	b.n	8008cfa <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <HAL_SPI_Transmit+0x194>
 8008c5a:	8b7b      	ldrh	r3, [r7, #26]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d147      	bne.n	8008cf0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	330c      	adds	r3, #12
 8008c6a:	7812      	ldrb	r2, [r2, #0]
 8008c6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c86:	e033      	b.n	8008cf0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d113      	bne.n	8008cbe <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	330c      	adds	r3, #12
 8008ca0:	7812      	ldrb	r2, [r2, #0]
 8008ca2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008cbc:	e018      	b.n	8008cf0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cbe:	f7fb fa2d 	bl	800411c <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d803      	bhi.n	8008cd6 <HAL_SPI_Transmit+0x20a>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd4:	d102      	bne.n	8008cdc <HAL_SPI_Transmit+0x210>
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d109      	bne.n	8008cf0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e02d      	b.n	8008d4c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1c6      	bne.n	8008c88 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cfa:	69fa      	ldr	r2, [r7, #28]
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 fd04 	bl	800970c <SPI_EndRxTxTransaction>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d002      	beq.n	8008d10 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d18:	2300      	movs	r3, #0
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	617b      	str	r3, [r7, #20]
 8008d2c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e000      	b.n	8008d4c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
  }
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3720      	adds	r7, #32
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	4613      	mov	r3, r2
 8008d62:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d001      	beq.n	8008d74 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008d70:	2302      	movs	r3, #2
 8008d72:	e104      	b.n	8008f7e <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <HAL_SPI_Receive+0x2c>
 8008d7a:	88fb      	ldrh	r3, [r7, #6]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e0fc      	b.n	8008f7e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d8c:	d112      	bne.n	8008db4 <HAL_SPI_Receive+0x60>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10e      	bne.n	8008db4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2204      	movs	r2, #4
 8008d9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008d9e:	88fa      	ldrh	r2, [r7, #6]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	4613      	mov	r3, r2
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	68b9      	ldr	r1, [r7, #8]
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 f8eb 	bl	8008f86 <HAL_SPI_TransmitReceive>
 8008db0:	4603      	mov	r3, r0
 8008db2:	e0e4      	b.n	8008f7e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008db4:	f7fb f9b2 	bl	800411c <HAL_GetTick>
 8008db8:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_SPI_Receive+0x74>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e0da      	b.n	8008f7e <HAL_SPI_Receive+0x22a>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2204      	movs	r2, #4
 8008dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	88fa      	ldrh	r2, [r7, #6]
 8008de8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	88fa      	ldrh	r2, [r7, #6]
 8008dee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e16:	d10f      	bne.n	8008e38 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e42:	2b40      	cmp	r3, #64	@ 0x40
 8008e44:	d007      	beq.n	8008e56 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d170      	bne.n	8008f40 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008e5e:	e035      	b.n	8008ecc <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d115      	bne.n	8008e9a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f103 020c 	add.w	r2, r3, #12
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7a:	7812      	ldrb	r2, [r2, #0]
 8008e7c:	b2d2      	uxtb	r2, r2
 8008e7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	3b01      	subs	r3, #1
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008e98:	e018      	b.n	8008ecc <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e9a:	f7fb f93f 	bl	800411c <HAL_GetTick>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d803      	bhi.n	8008eb2 <HAL_SPI_Receive+0x15e>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb0:	d102      	bne.n	8008eb8 <HAL_SPI_Receive+0x164>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d109      	bne.n	8008ecc <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e058      	b.n	8008f7e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1c4      	bne.n	8008e60 <HAL_SPI_Receive+0x10c>
 8008ed6:	e038      	b.n	8008f4a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d113      	bne.n	8008f0e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef0:	b292      	uxth	r2, r2
 8008ef2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef8:	1c9a      	adds	r2, r3, #2
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	3b01      	subs	r3, #1
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008f0c:	e018      	b.n	8008f40 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f0e:	f7fb f905 	bl	800411c <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d803      	bhi.n	8008f26 <HAL_SPI_Receive+0x1d2>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f24:	d102      	bne.n	8008f2c <HAL_SPI_Receive+0x1d8>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d109      	bne.n	8008f40 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e01e      	b.n	8008f7e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1c6      	bne.n	8008ed8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f000 fb76 	bl	8009640 <SPI_EndRxTransaction>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d002      	beq.n	8008f60 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e000      	b.n	8008f7e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
  }
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b08a      	sub	sp, #40	@ 0x28
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	60b9      	str	r1, [r7, #8]
 8008f90:	607a      	str	r2, [r7, #4]
 8008f92:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f94:	2301      	movs	r3, #1
 8008f96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f98:	f7fb f8c0 	bl	800411c <HAL_GetTick>
 8008f9c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008fa4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008fac:	887b      	ldrh	r3, [r7, #2]
 8008fae:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008fb0:	7ffb      	ldrb	r3, [r7, #31]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d00c      	beq.n	8008fd0 <HAL_SPI_TransmitReceive+0x4a>
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fbc:	d106      	bne.n	8008fcc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d102      	bne.n	8008fcc <HAL_SPI_TransmitReceive+0x46>
 8008fc6:	7ffb      	ldrb	r3, [r7, #31]
 8008fc8:	2b04      	cmp	r3, #4
 8008fca:	d001      	beq.n	8008fd0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008fcc:	2302      	movs	r3, #2
 8008fce:	e17f      	b.n	80092d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <HAL_SPI_TransmitReceive+0x5c>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <HAL_SPI_TransmitReceive+0x5c>
 8008fdc:	887b      	ldrh	r3, [r7, #2]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e174      	b.n	80092d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_SPI_TransmitReceive+0x6e>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e16d      	b.n	80092d0 <HAL_SPI_TransmitReceive+0x34a>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b04      	cmp	r3, #4
 8009006:	d003      	beq.n	8009010 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2205      	movs	r2, #5
 800900c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	887a      	ldrh	r2, [r7, #2]
 8009020:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	887a      	ldrh	r2, [r7, #2]
 8009026:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	887a      	ldrh	r2, [r7, #2]
 8009032:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	887a      	ldrh	r2, [r7, #2]
 8009038:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009050:	2b40      	cmp	r3, #64	@ 0x40
 8009052:	d007      	beq.n	8009064 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009062:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800906c:	d17e      	bne.n	800916c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <HAL_SPI_TransmitReceive+0xf6>
 8009076:	8afb      	ldrh	r3, [r7, #22]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d16c      	bne.n	8009156 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009080:	881a      	ldrh	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800908c:	1c9a      	adds	r2, r3, #2
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009096:	b29b      	uxth	r3, r3
 8009098:	3b01      	subs	r3, #1
 800909a:	b29a      	uxth	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090a0:	e059      	b.n	8009156 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f003 0302 	and.w	r3, r3, #2
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d11b      	bne.n	80090e8 <HAL_SPI_TransmitReceive+0x162>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d016      	beq.n	80090e8 <HAL_SPI_TransmitReceive+0x162>
 80090ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d113      	bne.n	80090e8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c4:	881a      	ldrh	r2, [r3, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d0:	1c9a      	adds	r2, r3, #2
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090da:	b29b      	uxth	r3, r3
 80090dc:	3b01      	subs	r3, #1
 80090de:	b29a      	uxth	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d119      	bne.n	800912a <HAL_SPI_TransmitReceive+0x1a4>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d014      	beq.n	800912a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68da      	ldr	r2, [r3, #12]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800910a:	b292      	uxth	r2, r2
 800910c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009112:	1c9a      	adds	r2, r3, #2
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800911c:	b29b      	uxth	r3, r3
 800911e:	3b01      	subs	r3, #1
 8009120:	b29a      	uxth	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009126:	2301      	movs	r3, #1
 8009128:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800912a:	f7fa fff7 	bl	800411c <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009136:	429a      	cmp	r2, r3
 8009138:	d80d      	bhi.n	8009156 <HAL_SPI_TransmitReceive+0x1d0>
 800913a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d009      	beq.n	8009156 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e0bc      	b.n	80092d0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800915a:	b29b      	uxth	r3, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1a0      	bne.n	80090a2 <HAL_SPI_TransmitReceive+0x11c>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009164:	b29b      	uxth	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d19b      	bne.n	80090a2 <HAL_SPI_TransmitReceive+0x11c>
 800916a:	e082      	b.n	8009272 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <HAL_SPI_TransmitReceive+0x1f4>
 8009174:	8afb      	ldrh	r3, [r7, #22]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d171      	bne.n	800925e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	330c      	adds	r3, #12
 8009184:	7812      	ldrb	r2, [r2, #0]
 8009186:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800918c:	1c5a      	adds	r2, r3, #1
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009196:	b29b      	uxth	r3, r3
 8009198:	3b01      	subs	r3, #1
 800919a:	b29a      	uxth	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091a0:	e05d      	b.n	800925e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f003 0302 	and.w	r3, r3, #2
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d11c      	bne.n	80091ea <HAL_SPI_TransmitReceive+0x264>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d017      	beq.n	80091ea <HAL_SPI_TransmitReceive+0x264>
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d114      	bne.n	80091ea <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	330c      	adds	r3, #12
 80091ca:	7812      	ldrb	r2, [r2, #0]
 80091cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091dc:	b29b      	uxth	r3, r3
 80091de:	3b01      	subs	r3, #1
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d119      	bne.n	800922c <HAL_SPI_TransmitReceive+0x2a6>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d014      	beq.n	800922c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68da      	ldr	r2, [r3, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800921e:	b29b      	uxth	r3, r3
 8009220:	3b01      	subs	r3, #1
 8009222:	b29a      	uxth	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009228:	2301      	movs	r3, #1
 800922a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800922c:	f7fa ff76 	bl	800411c <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009238:	429a      	cmp	r2, r3
 800923a:	d803      	bhi.n	8009244 <HAL_SPI_TransmitReceive+0x2be>
 800923c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009242:	d102      	bne.n	800924a <HAL_SPI_TransmitReceive+0x2c4>
 8009244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009246:	2b00      	cmp	r3, #0
 8009248:	d109      	bne.n	800925e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e038      	b.n	80092d0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009262:	b29b      	uxth	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d19c      	bne.n	80091a2 <HAL_SPI_TransmitReceive+0x21c>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800926c:	b29b      	uxth	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d197      	bne.n	80091a2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009272:	6a3a      	ldr	r2, [r7, #32]
 8009274:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 fa48 	bl	800970c <SPI_EndRxTxTransaction>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d008      	beq.n	8009294 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2220      	movs	r2, #32
 8009286:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e01d      	b.n	80092d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800929c:	2300      	movs	r3, #0
 800929e:	613b      	str	r3, [r7, #16]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	613b      	str	r3, [r7, #16]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	613b      	str	r3, [r7, #16]
 80092b0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e000      	b.n	80092d0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80092ce:	2300      	movs	r3, #0
  }
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3728      	adds	r7, #40	@ 0x28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	099b      	lsrs	r3, r3, #6
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10f      	bne.n	800931c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00a      	beq.n	800931c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	099b      	lsrs	r3, r3, #6
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	d004      	beq.n	800931c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	4798      	blx	r3
    return;
 800931a:	e0d7      	b.n	80094cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	085b      	lsrs	r3, r3, #1
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00a      	beq.n	800933e <HAL_SPI_IRQHandler+0x66>
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	09db      	lsrs	r3, r3, #7
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	4798      	blx	r3
    return;
 800933c:	e0c6      	b.n	80094cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	095b      	lsrs	r3, r3, #5
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10c      	bne.n	8009364 <HAL_SPI_IRQHandler+0x8c>
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	099b      	lsrs	r3, r3, #6
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d106      	bne.n	8009364 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	0a1b      	lsrs	r3, r3, #8
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 80b4 	beq.w	80094cc <HAL_SPI_IRQHandler+0x1f4>
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	095b      	lsrs	r3, r3, #5
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 80ad 	beq.w	80094cc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	099b      	lsrs	r3, r3, #6
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	d023      	beq.n	80093c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b03      	cmp	r3, #3
 8009388:	d011      	beq.n	80093ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800938e:	f043 0204 	orr.w	r2, r3, #4
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009396:	2300      	movs	r3, #0
 8009398:	617b      	str	r3, [r7, #20]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	617b      	str	r3, [r7, #20]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	617b      	str	r3, [r7, #20]
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	e00b      	b.n	80093c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093ae:	2300      	movs	r3, #0
 80093b0:	613b      	str	r3, [r7, #16]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	613b      	str	r3, [r7, #16]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	613b      	str	r3, [r7, #16]
 80093c2:	693b      	ldr	r3, [r7, #16]
        return;
 80093c4:	e082      	b.n	80094cc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	095b      	lsrs	r3, r3, #5
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d014      	beq.n	80093fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093d6:	f043 0201 	orr.w	r2, r3, #1
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80093de:	2300      	movs	r3, #0
 80093e0:	60fb      	str	r3, [r7, #12]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	60fb      	str	r3, [r7, #12]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	0a1b      	lsrs	r3, r3, #8
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00c      	beq.n	8009422 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800940c:	f043 0208 	orr.w	r2, r3, #8
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009414:	2300      	movs	r3, #0
 8009416:	60bb      	str	r3, [r7, #8]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	60bb      	str	r3, [r7, #8]
 8009420:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009426:	2b00      	cmp	r3, #0
 8009428:	d04f      	beq.n	80094ca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009438:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	f003 0302 	and.w	r3, r3, #2
 8009448:	2b00      	cmp	r3, #0
 800944a:	d104      	bne.n	8009456 <HAL_SPI_IRQHandler+0x17e>
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d034      	beq.n	80094c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0203 	bic.w	r2, r2, #3
 8009464:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800946a:	2b00      	cmp	r3, #0
 800946c:	d011      	beq.n	8009492 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009472:	4a18      	ldr	r2, [pc, #96]	@ (80094d4 <HAL_SPI_IRQHandler+0x1fc>)
 8009474:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800947a:	4618      	mov	r0, r3
 800947c:	f7fb f8f6 	bl	800466c <HAL_DMA_Abort_IT>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d005      	beq.n	8009492 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800948a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009496:	2b00      	cmp	r3, #0
 8009498:	d016      	beq.n	80094c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800949e:	4a0d      	ldr	r2, [pc, #52]	@ (80094d4 <HAL_SPI_IRQHandler+0x1fc>)
 80094a0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fb f8e0 	bl	800466c <HAL_DMA_Abort_IT>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00a      	beq.n	80094c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80094be:	e003      	b.n	80094c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f809 	bl	80094d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80094c6:	e000      	b.n	80094ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80094c8:	bf00      	nop
    return;
 80094ca:	bf00      	nop
  }
}
 80094cc:	3720      	adds	r7, #32
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	08009509 	.word	0x08009509

080094d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80094fa:	b2db      	uxtb	r3, r3
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009514:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f7ff ffd8 	bl	80094d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009528:	bf00      	nop
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b088      	sub	sp, #32
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	4613      	mov	r3, r2
 800953e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009540:	f7fa fdec 	bl	800411c <HAL_GetTick>
 8009544:	4602      	mov	r2, r0
 8009546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009548:	1a9b      	subs	r3, r3, r2
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	4413      	add	r3, r2
 800954e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009550:	f7fa fde4 	bl	800411c <HAL_GetTick>
 8009554:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009556:	4b39      	ldr	r3, [pc, #228]	@ (800963c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	015b      	lsls	r3, r3, #5
 800955c:	0d1b      	lsrs	r3, r3, #20
 800955e:	69fa      	ldr	r2, [r7, #28]
 8009560:	fb02 f303 	mul.w	r3, r2, r3
 8009564:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009566:	e055      	b.n	8009614 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956e:	d051      	beq.n	8009614 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009570:	f7fa fdd4 	bl	800411c <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	429a      	cmp	r2, r3
 800957e:	d902      	bls.n	8009586 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d13d      	bne.n	8009602 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009594:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800959e:	d111      	bne.n	80095c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095a8:	d004      	beq.n	80095b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095b2:	d107      	bne.n	80095c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095cc:	d10f      	bne.n	80095ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e018      	b.n	8009634 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d102      	bne.n	800960e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	61fb      	str	r3, [r7, #28]
 800960c:	e002      	b.n	8009614 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	3b01      	subs	r3, #1
 8009612:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689a      	ldr	r2, [r3, #8]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	4013      	ands	r3, r2
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	429a      	cmp	r2, r3
 8009622:	bf0c      	ite	eq
 8009624:	2301      	moveq	r3, #1
 8009626:	2300      	movne	r3, #0
 8009628:	b2db      	uxtb	r3, r3
 800962a:	461a      	mov	r2, r3
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	429a      	cmp	r2, r3
 8009630:	d19a      	bne.n	8009568 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3720      	adds	r7, #32
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	20000000 	.word	0x20000000

08009640 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af02      	add	r7, sp, #8
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009654:	d111      	bne.n	800967a <SPI_EndRxTransaction+0x3a>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800965e:	d004      	beq.n	800966a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009668:	d107      	bne.n	800967a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009678:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009682:	d12a      	bne.n	80096da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800968c:	d012      	beq.n	80096b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	2200      	movs	r2, #0
 8009696:	2180      	movs	r1, #128	@ 0x80
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f7ff ff49 	bl	8009530 <SPI_WaitFlagStateUntilTimeout>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d02d      	beq.n	8009700 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096a8:	f043 0220 	orr.w	r2, r3, #32
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e026      	b.n	8009702 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2200      	movs	r2, #0
 80096bc:	2101      	movs	r1, #1
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f7ff ff36 	bl	8009530 <SPI_WaitFlagStateUntilTimeout>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01a      	beq.n	8009700 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ce:	f043 0220 	orr.w	r2, r3, #32
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80096d6:	2303      	movs	r3, #3
 80096d8:	e013      	b.n	8009702 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2200      	movs	r2, #0
 80096e2:	2101      	movs	r1, #1
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f7ff ff23 	bl	8009530 <SPI_WaitFlagStateUntilTimeout>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d007      	beq.n	8009700 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f4:	f043 0220 	orr.w	r2, r3, #32
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e000      	b.n	8009702 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
	...

0800970c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b088      	sub	sp, #32
 8009710:	af02      	add	r7, sp, #8
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2201      	movs	r2, #1
 8009720:	2102      	movs	r1, #2
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f7ff ff04 	bl	8009530 <SPI_WaitFlagStateUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d007      	beq.n	800973e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009732:	f043 0220 	orr.w	r2, r3, #32
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e032      	b.n	80097a4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800973e:	4b1b      	ldr	r3, [pc, #108]	@ (80097ac <SPI_EndRxTxTransaction+0xa0>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a1b      	ldr	r2, [pc, #108]	@ (80097b0 <SPI_EndRxTxTransaction+0xa4>)
 8009744:	fba2 2303 	umull	r2, r3, r2, r3
 8009748:	0d5b      	lsrs	r3, r3, #21
 800974a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800974e:	fb02 f303 	mul.w	r3, r2, r3
 8009752:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800975c:	d112      	bne.n	8009784 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2200      	movs	r2, #0
 8009766:	2180      	movs	r1, #128	@ 0x80
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f7ff fee1 	bl	8009530 <SPI_WaitFlagStateUntilTimeout>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d016      	beq.n	80097a2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009778:	f043 0220 	orr.w	r2, r3, #32
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	e00f      	b.n	80097a4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00a      	beq.n	80097a0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	3b01      	subs	r3, #1
 800978e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800979a:	2b80      	cmp	r3, #128	@ 0x80
 800979c:	d0f2      	beq.n	8009784 <SPI_EndRxTxTransaction+0x78>
 800979e:	e000      	b.n	80097a2 <SPI_EndRxTxTransaction+0x96>
        break;
 80097a0:	bf00      	nop
  }

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20000000 	.word	0x20000000
 80097b0:	165e9f81 	.word	0x165e9f81

080097b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e041      	b.n	800984a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d106      	bne.n	80097e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7fa fbe6 	bl	8003fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2202      	movs	r2, #2
 80097e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3304      	adds	r3, #4
 80097f0:	4619      	mov	r1, r3
 80097f2:	4610      	mov	r0, r2
 80097f4:	f000 fc62 	bl	800a0bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
	...

08009854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b01      	cmp	r3, #1
 8009866:	d001      	beq.n	800986c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e04e      	b.n	800990a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68da      	ldr	r2, [r3, #12]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f042 0201 	orr.w	r2, r2, #1
 8009882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a23      	ldr	r2, [pc, #140]	@ (8009918 <HAL_TIM_Base_Start_IT+0xc4>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d022      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009896:	d01d      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a1f      	ldr	r2, [pc, #124]	@ (800991c <HAL_TIM_Base_Start_IT+0xc8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d018      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009920 <HAL_TIM_Base_Start_IT+0xcc>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d013      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a1c      	ldr	r2, [pc, #112]	@ (8009924 <HAL_TIM_Base_Start_IT+0xd0>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d00e      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009928 <HAL_TIM_Base_Start_IT+0xd4>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d009      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a19      	ldr	r2, [pc, #100]	@ (800992c <HAL_TIM_Base_Start_IT+0xd8>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d004      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a18      	ldr	r2, [pc, #96]	@ (8009930 <HAL_TIM_Base_Start_IT+0xdc>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d111      	bne.n	80098f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f003 0307 	and.w	r3, r3, #7
 80098de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2b06      	cmp	r3, #6
 80098e4:	d010      	beq.n	8009908 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f042 0201 	orr.w	r2, r2, #1
 80098f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f6:	e007      	b.n	8009908 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f042 0201 	orr.w	r2, r2, #1
 8009906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	40010000 	.word	0x40010000
 800991c:	40000400 	.word	0x40000400
 8009920:	40000800 	.word	0x40000800
 8009924:	40000c00 	.word	0x40000c00
 8009928:	40010400 	.word	0x40010400
 800992c:	40014000 	.word	0x40014000
 8009930:	40001800 	.word	0x40001800

08009934 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d101      	bne.n	8009946 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e041      	b.n	80099ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	d106      	bne.n	8009960 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f839 	bl	80099d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2202      	movs	r2, #2
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3304      	adds	r3, #4
 8009970:	4619      	mov	r1, r3
 8009972:	4610      	mov	r0, r2
 8009974:	f000 fba2 	bl	800a0bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
	...

080099e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d109      	bne.n	8009a0c <HAL_TIM_PWM_Start+0x24>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	bf14      	ite	ne
 8009a04:	2301      	movne	r3, #1
 8009a06:	2300      	moveq	r3, #0
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	e022      	b.n	8009a52 <HAL_TIM_PWM_Start+0x6a>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d109      	bne.n	8009a26 <HAL_TIM_PWM_Start+0x3e>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	bf14      	ite	ne
 8009a1e:	2301      	movne	r3, #1
 8009a20:	2300      	moveq	r3, #0
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	e015      	b.n	8009a52 <HAL_TIM_PWM_Start+0x6a>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d109      	bne.n	8009a40 <HAL_TIM_PWM_Start+0x58>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	bf14      	ite	ne
 8009a38:	2301      	movne	r3, #1
 8009a3a:	2300      	moveq	r3, #0
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	e008      	b.n	8009a52 <HAL_TIM_PWM_Start+0x6a>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	bf14      	ite	ne
 8009a4c:	2301      	movne	r3, #1
 8009a4e:	2300      	moveq	r3, #0
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e07c      	b.n	8009b54 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d104      	bne.n	8009a6a <HAL_TIM_PWM_Start+0x82>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2202      	movs	r2, #2
 8009a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a68:	e013      	b.n	8009a92 <HAL_TIM_PWM_Start+0xaa>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b04      	cmp	r3, #4
 8009a6e:	d104      	bne.n	8009a7a <HAL_TIM_PWM_Start+0x92>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a78:	e00b      	b.n	8009a92 <HAL_TIM_PWM_Start+0xaa>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b08      	cmp	r3, #8
 8009a7e:	d104      	bne.n	8009a8a <HAL_TIM_PWM_Start+0xa2>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2202      	movs	r2, #2
 8009a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a88:	e003      	b.n	8009a92 <HAL_TIM_PWM_Start+0xaa>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2201      	movs	r2, #1
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 fdfe 	bl	800a69c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8009b5c <HAL_TIM_PWM_Start+0x174>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d004      	beq.n	8009ab4 <HAL_TIM_PWM_Start+0xcc>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a2c      	ldr	r2, [pc, #176]	@ (8009b60 <HAL_TIM_PWM_Start+0x178>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d101      	bne.n	8009ab8 <HAL_TIM_PWM_Start+0xd0>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e000      	b.n	8009aba <HAL_TIM_PWM_Start+0xd2>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d007      	beq.n	8009ace <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009acc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a22      	ldr	r2, [pc, #136]	@ (8009b5c <HAL_TIM_PWM_Start+0x174>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d022      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ae0:	d01d      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8009b64 <HAL_TIM_PWM_Start+0x17c>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d018      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b68 <HAL_TIM_PWM_Start+0x180>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d013      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a1c      	ldr	r2, [pc, #112]	@ (8009b6c <HAL_TIM_PWM_Start+0x184>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d00e      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a16      	ldr	r2, [pc, #88]	@ (8009b60 <HAL_TIM_PWM_Start+0x178>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d009      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a18      	ldr	r2, [pc, #96]	@ (8009b70 <HAL_TIM_PWM_Start+0x188>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d004      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a16      	ldr	r2, [pc, #88]	@ (8009b74 <HAL_TIM_PWM_Start+0x18c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d111      	bne.n	8009b42 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f003 0307 	and.w	r3, r3, #7
 8009b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b06      	cmp	r3, #6
 8009b2e:	d010      	beq.n	8009b52 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f042 0201 	orr.w	r2, r2, #1
 8009b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b40:	e007      	b.n	8009b52 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f042 0201 	orr.w	r2, r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	40010000 	.word	0x40010000
 8009b60:	40010400 	.word	0x40010400
 8009b64:	40000400 	.word	0x40000400
 8009b68:	40000800 	.word	0x40000800
 8009b6c:	40000c00 	.word	0x40000c00
 8009b70:	40014000 	.word	0x40014000
 8009b74:	40001800 	.word	0x40001800

08009b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f003 0302 	and.w	r3, r3, #2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d020      	beq.n	8009bdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f003 0302 	and.w	r3, r3, #2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d01b      	beq.n	8009bdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f06f 0202 	mvn.w	r2, #2
 8009bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	f003 0303 	and.w	r3, r3, #3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa5b 	bl	800a07e <HAL_TIM_IC_CaptureCallback>
 8009bc8:	e005      	b.n	8009bd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fa4d 	bl	800a06a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fa5e 	bl	800a092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f003 0304 	and.w	r3, r3, #4
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d020      	beq.n	8009c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01b      	beq.n	8009c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f06f 0204 	mvn.w	r2, #4
 8009bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fa35 	bl	800a07e <HAL_TIM_IC_CaptureCallback>
 8009c14:	e005      	b.n	8009c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fa27 	bl	800a06a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fa38 	bl	800a092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f003 0308 	and.w	r3, r3, #8
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d020      	beq.n	8009c74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f003 0308 	and.w	r3, r3, #8
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d01b      	beq.n	8009c74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f06f 0208 	mvn.w	r2, #8
 8009c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2204      	movs	r2, #4
 8009c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	f003 0303 	and.w	r3, r3, #3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fa0f 	bl	800a07e <HAL_TIM_IC_CaptureCallback>
 8009c60:	e005      	b.n	8009c6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fa01 	bl	800a06a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fa12 	bl	800a092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f003 0310 	and.w	r3, r3, #16
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d020      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f003 0310 	and.w	r3, r3, #16
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01b      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f06f 0210 	mvn.w	r2, #16
 8009c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2208      	movs	r2, #8
 8009c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f9e9 	bl	800a07e <HAL_TIM_IC_CaptureCallback>
 8009cac:	e005      	b.n	8009cba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f9db 	bl	800a06a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f9ec 	bl	800a092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00c      	beq.n	8009ce4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d007      	beq.n	8009ce4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f06f 0201 	mvn.w	r2, #1
 8009cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7f9 fc28 	bl	8003534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00c      	beq.n	8009d08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d007      	beq.n	8009d08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fd76 	bl	800a7f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00c      	beq.n	8009d2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d007      	beq.n	8009d2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f9bd 	bl	800a0a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	f003 0320 	and.w	r3, r3, #32
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00c      	beq.n	8009d50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f003 0320 	and.w	r3, r3, #32
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d007      	beq.n	8009d50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f06f 0220 	mvn.w	r2, #32
 8009d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fd48 	bl	800a7e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d50:	bf00      	nop
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d101      	bne.n	8009d76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d72:	2302      	movs	r3, #2
 8009d74:	e0ae      	b.n	8009ed4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b0c      	cmp	r3, #12
 8009d82:	f200 809f 	bhi.w	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009d86:	a201      	add	r2, pc, #4	@ (adr r2, 8009d8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8c:	08009dc1 	.word	0x08009dc1
 8009d90:	08009ec5 	.word	0x08009ec5
 8009d94:	08009ec5 	.word	0x08009ec5
 8009d98:	08009ec5 	.word	0x08009ec5
 8009d9c:	08009e01 	.word	0x08009e01
 8009da0:	08009ec5 	.word	0x08009ec5
 8009da4:	08009ec5 	.word	0x08009ec5
 8009da8:	08009ec5 	.word	0x08009ec5
 8009dac:	08009e43 	.word	0x08009e43
 8009db0:	08009ec5 	.word	0x08009ec5
 8009db4:	08009ec5 	.word	0x08009ec5
 8009db8:	08009ec5 	.word	0x08009ec5
 8009dbc:	08009e83 	.word	0x08009e83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68b9      	ldr	r1, [r7, #8]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 fa1e 	bl	800a208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	699a      	ldr	r2, [r3, #24]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 0208 	orr.w	r2, r2, #8
 8009dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	699a      	ldr	r2, [r3, #24]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f022 0204 	bic.w	r2, r2, #4
 8009dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6999      	ldr	r1, [r3, #24]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	691a      	ldr	r2, [r3, #16]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	619a      	str	r2, [r3, #24]
      break;
 8009dfe:	e064      	b.n	8009eca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68b9      	ldr	r1, [r7, #8]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 fa6e 	bl	800a2e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	699a      	ldr	r2, [r3, #24]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	699a      	ldr	r2, [r3, #24]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6999      	ldr	r1, [r3, #24]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	021a      	lsls	r2, r3, #8
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	619a      	str	r2, [r3, #24]
      break;
 8009e40:	e043      	b.n	8009eca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68b9      	ldr	r1, [r7, #8]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f000 fac3 	bl	800a3d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	69da      	ldr	r2, [r3, #28]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f042 0208 	orr.w	r2, r2, #8
 8009e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	69da      	ldr	r2, [r3, #28]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f022 0204 	bic.w	r2, r2, #4
 8009e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	69d9      	ldr	r1, [r3, #28]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	691a      	ldr	r2, [r3, #16]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	61da      	str	r2, [r3, #28]
      break;
 8009e80:	e023      	b.n	8009eca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68b9      	ldr	r1, [r7, #8]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 fb17 	bl	800a4bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	69da      	ldr	r2, [r3, #28]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	69da      	ldr	r2, [r3, #28]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	69d9      	ldr	r1, [r3, #28]
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	021a      	lsls	r2, r3, #8
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	61da      	str	r2, [r3, #28]
      break;
 8009ec2:	e002      	b.n	8009eca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d101      	bne.n	8009ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	e0b4      	b.n	800a062 <HAL_TIM_ConfigClockSource+0x186>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2202      	movs	r2, #2
 8009f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f30:	d03e      	beq.n	8009fb0 <HAL_TIM_ConfigClockSource+0xd4>
 8009f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f36:	f200 8087 	bhi.w	800a048 <HAL_TIM_ConfigClockSource+0x16c>
 8009f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f3e:	f000 8086 	beq.w	800a04e <HAL_TIM_ConfigClockSource+0x172>
 8009f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f46:	d87f      	bhi.n	800a048 <HAL_TIM_ConfigClockSource+0x16c>
 8009f48:	2b70      	cmp	r3, #112	@ 0x70
 8009f4a:	d01a      	beq.n	8009f82 <HAL_TIM_ConfigClockSource+0xa6>
 8009f4c:	2b70      	cmp	r3, #112	@ 0x70
 8009f4e:	d87b      	bhi.n	800a048 <HAL_TIM_ConfigClockSource+0x16c>
 8009f50:	2b60      	cmp	r3, #96	@ 0x60
 8009f52:	d050      	beq.n	8009ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8009f54:	2b60      	cmp	r3, #96	@ 0x60
 8009f56:	d877      	bhi.n	800a048 <HAL_TIM_ConfigClockSource+0x16c>
 8009f58:	2b50      	cmp	r3, #80	@ 0x50
 8009f5a:	d03c      	beq.n	8009fd6 <HAL_TIM_ConfigClockSource+0xfa>
 8009f5c:	2b50      	cmp	r3, #80	@ 0x50
 8009f5e:	d873      	bhi.n	800a048 <HAL_TIM_ConfigClockSource+0x16c>
 8009f60:	2b40      	cmp	r3, #64	@ 0x40
 8009f62:	d058      	beq.n	800a016 <HAL_TIM_ConfigClockSource+0x13a>
 8009f64:	2b40      	cmp	r3, #64	@ 0x40
 8009f66:	d86f      	bhi.n	800a048 <HAL_TIM_ConfigClockSource+0x16c>
 8009f68:	2b30      	cmp	r3, #48	@ 0x30
 8009f6a:	d064      	beq.n	800a036 <HAL_TIM_ConfigClockSource+0x15a>
 8009f6c:	2b30      	cmp	r3, #48	@ 0x30
 8009f6e:	d86b      	bhi.n	800a048 <HAL_TIM_ConfigClockSource+0x16c>
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	d060      	beq.n	800a036 <HAL_TIM_ConfigClockSource+0x15a>
 8009f74:	2b20      	cmp	r3, #32
 8009f76:	d867      	bhi.n	800a048 <HAL_TIM_ConfigClockSource+0x16c>
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d05c      	beq.n	800a036 <HAL_TIM_ConfigClockSource+0x15a>
 8009f7c:	2b10      	cmp	r3, #16
 8009f7e:	d05a      	beq.n	800a036 <HAL_TIM_ConfigClockSource+0x15a>
 8009f80:	e062      	b.n	800a048 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f92:	f000 fb63 	bl	800a65c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	609a      	str	r2, [r3, #8]
      break;
 8009fae:	e04f      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009fc0:	f000 fb4c 	bl	800a65c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	689a      	ldr	r2, [r3, #8]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009fd2:	609a      	str	r2, [r3, #8]
      break;
 8009fd4:	e03c      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f000 fac0 	bl	800a568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2150      	movs	r1, #80	@ 0x50
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fb19 	bl	800a626 <TIM_ITRx_SetConfig>
      break;
 8009ff4:	e02c      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a002:	461a      	mov	r2, r3
 800a004:	f000 fadf 	bl	800a5c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2160      	movs	r1, #96	@ 0x60
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 fb09 	bl	800a626 <TIM_ITRx_SetConfig>
      break;
 800a014:	e01c      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a022:	461a      	mov	r2, r3
 800a024:	f000 faa0 	bl	800a568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2140      	movs	r1, #64	@ 0x40
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 faf9 	bl	800a626 <TIM_ITRx_SetConfig>
      break;
 800a034:	e00c      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4619      	mov	r1, r3
 800a040:	4610      	mov	r0, r2
 800a042:	f000 faf0 	bl	800a626 <TIM_ITRx_SetConfig>
      break;
 800a046:	e003      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	73fb      	strb	r3, [r7, #15]
      break;
 800a04c:	e000      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a04e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a060:	7bfb      	ldrb	r3, [r7, #15]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b083      	sub	sp, #12
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a072:	bf00      	nop
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a07e:	b480      	push	{r7}
 800a080:	b083      	sub	sp, #12
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a092:	b480      	push	{r7}
 800a094:	b083      	sub	sp, #12
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a09a:	bf00      	nop
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b083      	sub	sp, #12
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
	...

0800a0bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a43      	ldr	r2, [pc, #268]	@ (800a1dc <TIM_Base_SetConfig+0x120>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d013      	beq.n	800a0fc <TIM_Base_SetConfig+0x40>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0da:	d00f      	beq.n	800a0fc <TIM_Base_SetConfig+0x40>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a40      	ldr	r2, [pc, #256]	@ (800a1e0 <TIM_Base_SetConfig+0x124>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d00b      	beq.n	800a0fc <TIM_Base_SetConfig+0x40>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a3f      	ldr	r2, [pc, #252]	@ (800a1e4 <TIM_Base_SetConfig+0x128>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d007      	beq.n	800a0fc <TIM_Base_SetConfig+0x40>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a3e      	ldr	r2, [pc, #248]	@ (800a1e8 <TIM_Base_SetConfig+0x12c>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d003      	beq.n	800a0fc <TIM_Base_SetConfig+0x40>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a3d      	ldr	r2, [pc, #244]	@ (800a1ec <TIM_Base_SetConfig+0x130>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d108      	bne.n	800a10e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a32      	ldr	r2, [pc, #200]	@ (800a1dc <TIM_Base_SetConfig+0x120>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d02b      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a11c:	d027      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a2f      	ldr	r2, [pc, #188]	@ (800a1e0 <TIM_Base_SetConfig+0x124>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d023      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a2e      	ldr	r2, [pc, #184]	@ (800a1e4 <TIM_Base_SetConfig+0x128>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d01f      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a2d      	ldr	r2, [pc, #180]	@ (800a1e8 <TIM_Base_SetConfig+0x12c>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d01b      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a2c      	ldr	r2, [pc, #176]	@ (800a1ec <TIM_Base_SetConfig+0x130>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d017      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a2b      	ldr	r2, [pc, #172]	@ (800a1f0 <TIM_Base_SetConfig+0x134>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d013      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a2a      	ldr	r2, [pc, #168]	@ (800a1f4 <TIM_Base_SetConfig+0x138>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00f      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a29      	ldr	r2, [pc, #164]	@ (800a1f8 <TIM_Base_SetConfig+0x13c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d00b      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a28      	ldr	r2, [pc, #160]	@ (800a1fc <TIM_Base_SetConfig+0x140>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d007      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a27      	ldr	r2, [pc, #156]	@ (800a200 <TIM_Base_SetConfig+0x144>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d003      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a26      	ldr	r2, [pc, #152]	@ (800a204 <TIM_Base_SetConfig+0x148>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d108      	bne.n	800a180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	689a      	ldr	r2, [r3, #8]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a0e      	ldr	r2, [pc, #56]	@ (800a1dc <TIM_Base_SetConfig+0x120>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d003      	beq.n	800a1ae <TIM_Base_SetConfig+0xf2>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a10      	ldr	r2, [pc, #64]	@ (800a1ec <TIM_Base_SetConfig+0x130>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d103      	bne.n	800a1b6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	691a      	ldr	r2, [r3, #16]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f043 0204 	orr.w	r2, r3, #4
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	601a      	str	r2, [r3, #0]
}
 800a1ce:	bf00      	nop
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	40010000 	.word	0x40010000
 800a1e0:	40000400 	.word	0x40000400
 800a1e4:	40000800 	.word	0x40000800
 800a1e8:	40000c00 	.word	0x40000c00
 800a1ec:	40010400 	.word	0x40010400
 800a1f0:	40014000 	.word	0x40014000
 800a1f4:	40014400 	.word	0x40014400
 800a1f8:	40014800 	.word	0x40014800
 800a1fc:	40001800 	.word	0x40001800
 800a200:	40001c00 	.word	0x40001c00
 800a204:	40002000 	.word	0x40002000

0800a208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a1b      	ldr	r3, [r3, #32]
 800a21c:	f023 0201 	bic.w	r2, r3, #1
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f023 0303 	bic.w	r3, r3, #3
 800a23e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f023 0302 	bic.w	r3, r3, #2
 800a250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	4313      	orrs	r3, r2
 800a25a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a20      	ldr	r2, [pc, #128]	@ (800a2e0 <TIM_OC1_SetConfig+0xd8>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d003      	beq.n	800a26c <TIM_OC1_SetConfig+0x64>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a1f      	ldr	r2, [pc, #124]	@ (800a2e4 <TIM_OC1_SetConfig+0xdc>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d10c      	bne.n	800a286 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f023 0308 	bic.w	r3, r3, #8
 800a272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	697a      	ldr	r2, [r7, #20]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f023 0304 	bic.w	r3, r3, #4
 800a284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a15      	ldr	r2, [pc, #84]	@ (800a2e0 <TIM_OC1_SetConfig+0xd8>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d003      	beq.n	800a296 <TIM_OC1_SetConfig+0x8e>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a14      	ldr	r2, [pc, #80]	@ (800a2e4 <TIM_OC1_SetConfig+0xdc>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d111      	bne.n	800a2ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a29c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a2a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	685a      	ldr	r2, [r3, #4]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	621a      	str	r2, [r3, #32]
}
 800a2d4:	bf00      	nop
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	40010000 	.word	0x40010000
 800a2e4:	40010400 	.word	0x40010400

0800a2e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a1b      	ldr	r3, [r3, #32]
 800a2fc:	f023 0210 	bic.w	r2, r3, #16
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	021b      	lsls	r3, r3, #8
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	4313      	orrs	r3, r2
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	f023 0320 	bic.w	r3, r3, #32
 800a332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	011b      	lsls	r3, r3, #4
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a22      	ldr	r2, [pc, #136]	@ (800a3cc <TIM_OC2_SetConfig+0xe4>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d003      	beq.n	800a350 <TIM_OC2_SetConfig+0x68>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a21      	ldr	r2, [pc, #132]	@ (800a3d0 <TIM_OC2_SetConfig+0xe8>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d10d      	bne.n	800a36c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	011b      	lsls	r3, r3, #4
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	4313      	orrs	r3, r2
 800a362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a36a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a17      	ldr	r2, [pc, #92]	@ (800a3cc <TIM_OC2_SetConfig+0xe4>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d003      	beq.n	800a37c <TIM_OC2_SetConfig+0x94>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a16      	ldr	r2, [pc, #88]	@ (800a3d0 <TIM_OC2_SetConfig+0xe8>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d113      	bne.n	800a3a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a38a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	4313      	orrs	r3, r2
 800a396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	621a      	str	r2, [r3, #32]
}
 800a3be:	bf00      	nop
 800a3c0:	371c      	adds	r7, #28
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	40010000 	.word	0x40010000
 800a3d0:	40010400 	.word	0x40010400

0800a3d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a1b      	ldr	r3, [r3, #32]
 800a3e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f023 0303 	bic.w	r3, r3, #3
 800a40a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4313      	orrs	r3, r2
 800a414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a41c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	021b      	lsls	r3, r3, #8
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	4313      	orrs	r3, r2
 800a428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a21      	ldr	r2, [pc, #132]	@ (800a4b4 <TIM_OC3_SetConfig+0xe0>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d003      	beq.n	800a43a <TIM_OC3_SetConfig+0x66>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a20      	ldr	r2, [pc, #128]	@ (800a4b8 <TIM_OC3_SetConfig+0xe4>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d10d      	bne.n	800a456 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	021b      	lsls	r3, r3, #8
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a16      	ldr	r2, [pc, #88]	@ (800a4b4 <TIM_OC3_SetConfig+0xe0>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d003      	beq.n	800a466 <TIM_OC3_SetConfig+0x92>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a15      	ldr	r2, [pc, #84]	@ (800a4b8 <TIM_OC3_SetConfig+0xe4>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d113      	bne.n	800a48e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a46c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	011b      	lsls	r3, r3, #4
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	4313      	orrs	r3, r2
 800a480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	621a      	str	r2, [r3, #32]
}
 800a4a8:	bf00      	nop
 800a4aa:	371c      	adds	r7, #28
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	40010000 	.word	0x40010000
 800a4b8:	40010400 	.word	0x40010400

0800a4bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	021b      	lsls	r3, r3, #8
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	031b      	lsls	r3, r3, #12
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	4313      	orrs	r3, r2
 800a512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a12      	ldr	r2, [pc, #72]	@ (800a560 <TIM_OC4_SetConfig+0xa4>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d003      	beq.n	800a524 <TIM_OC4_SetConfig+0x68>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a11      	ldr	r2, [pc, #68]	@ (800a564 <TIM_OC4_SetConfig+0xa8>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d109      	bne.n	800a538 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a52a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	019b      	lsls	r3, r3, #6
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	4313      	orrs	r3, r2
 800a536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	621a      	str	r2, [r3, #32]
}
 800a552:	bf00      	nop
 800a554:	371c      	adds	r7, #28
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	40010000 	.word	0x40010000
 800a564:	40010400 	.word	0x40010400

0800a568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6a1b      	ldr	r3, [r3, #32]
 800a578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	f023 0201 	bic.w	r2, r3, #1
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	011b      	lsls	r3, r3, #4
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f023 030a 	bic.w	r3, r3, #10
 800a5a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	621a      	str	r2, [r3, #32]
}
 800a5ba:	bf00      	nop
 800a5bc:	371c      	adds	r7, #28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b087      	sub	sp, #28
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	60f8      	str	r0, [r7, #12]
 800a5ce:	60b9      	str	r1, [r7, #8]
 800a5d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6a1b      	ldr	r3, [r3, #32]
 800a5dc:	f023 0210 	bic.w	r2, r3, #16
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	031b      	lsls	r3, r3, #12
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a602:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	011b      	lsls	r3, r3, #4
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	621a      	str	r2, [r3, #32]
}
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a626:	b480      	push	{r7}
 800a628:	b085      	sub	sp, #20
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a63c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4313      	orrs	r3, r2
 800a644:	f043 0307 	orr.w	r3, r3, #7
 800a648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	609a      	str	r2, [r3, #8]
}
 800a650:	bf00      	nop
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	021a      	lsls	r2, r3, #8
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	431a      	orrs	r2, r3
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	4313      	orrs	r3, r2
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	4313      	orrs	r3, r2
 800a688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	609a      	str	r2, [r3, #8]
}
 800a690:	bf00      	nop
 800a692:	371c      	adds	r7, #28
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f003 031f 	and.w	r3, r3, #31
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6a1a      	ldr	r2, [r3, #32]
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	43db      	mvns	r3, r3
 800a6be:	401a      	ands	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6a1a      	ldr	r2, [r3, #32]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	f003 031f 	and.w	r3, r3, #31
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d4:	431a      	orrs	r2, r3
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	621a      	str	r2, [r3, #32]
}
 800a6da:	bf00      	nop
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
	...

0800a6e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d101      	bne.n	800a700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e05a      	b.n	800a7b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2202      	movs	r2, #2
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a21      	ldr	r2, [pc, #132]	@ (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d022      	beq.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a74c:	d01d      	beq.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a1d      	ldr	r2, [pc, #116]	@ (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d018      	beq.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a1b      	ldr	r2, [pc, #108]	@ (800a7cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d013      	beq.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a1a      	ldr	r2, [pc, #104]	@ (800a7d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d00e      	beq.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a18      	ldr	r2, [pc, #96]	@ (800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d009      	beq.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a17      	ldr	r2, [pc, #92]	@ (800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d004      	beq.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a15      	ldr	r2, [pc, #84]	@ (800a7dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d10c      	bne.n	800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	4313      	orrs	r3, r2
 800a79a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	40010000 	.word	0x40010000
 800a7c8:	40000400 	.word	0x40000400
 800a7cc:	40000800 	.word	0x40000800
 800a7d0:	40000c00 	.word	0x40000c00
 800a7d4:	40010400 	.word	0x40010400
 800a7d8:	40014000 	.word	0x40014000
 800a7dc:	40001800 	.word	0x40001800

0800a7e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a808:	b084      	sub	sp, #16
 800a80a:	b480      	push	{r7}
 800a80c:	b085      	sub	sp, #20
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	f107 001c 	add.w	r0, r7, #28
 800a816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a81e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a820:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a822:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a826:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a82a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a82e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a832:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	4313      	orrs	r3, r2
 800a838:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a842:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	431a      	orrs	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	b004      	add	sp, #16
 800a85c:	4770      	bx	lr

0800a85e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a85e:	b480      	push	{r7}
 800a860:	b083      	sub	sp, #12
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a89a:	b480      	push	{r7}
 800a89c:	b083      	sub	sp, #12
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2203      	movs	r2, #3
 800a8a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <SDIO_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_OFF(SDIO_TypeDef *SDIOx)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b083      	sub	sp, #12
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDIOx->POWER = (uint32_t)0x00000000;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 0303 	and.w	r3, r3, #3
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b085      	sub	sp, #20
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a90c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a912:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a918:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a928:	f023 030f 	bic.w	r3, r3, #15
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	431a      	orrs	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a942:	b480      	push	{r7}
 800a944:	b083      	sub	sp, #12
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	b2db      	uxtb	r3, r3
}
 800a950:	4618      	mov	r0, r3
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	3314      	adds	r3, #20
 800a96a:	461a      	mov	r2, r3
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	4413      	add	r3, r2
 800a970:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
}  
 800a976:	4618      	mov	r0, r3
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a982:	b480      	push	{r7}
 800a984:	b085      	sub	sp, #20
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9a8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a9ae:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a9b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	431a      	orrs	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0

}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b088      	sub	sp, #32
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
 800a9e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9ec:	2340      	movs	r3, #64	@ 0x40
 800a9ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9fa:	f107 0308 	add.w	r3, r7, #8
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f7ff ff74 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800aa06:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa0a:	2110      	movs	r1, #16
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f9d7 	bl	800adc0 <SDMMC_GetCmdResp1>
 800aa12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa14:	69fb      	ldr	r3, [r7, #28]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3720      	adds	r7, #32
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b088      	sub	sp, #32
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aa2c:	2311      	movs	r3, #17
 800aa2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa30:	2340      	movs	r3, #64	@ 0x40
 800aa32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa34:	2300      	movs	r3, #0
 800aa36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa3e:	f107 0308 	add.w	r3, r7, #8
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7ff ff52 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aa4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa4e:	2111      	movs	r1, #17
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f9b5 	bl	800adc0 <SDMMC_GetCmdResp1>
 800aa56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa58:	69fb      	ldr	r3, [r7, #28]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3720      	adds	r7, #32
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b088      	sub	sp, #32
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aa70:	2312      	movs	r3, #18
 800aa72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa74:	2340      	movs	r3, #64	@ 0x40
 800aa76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa82:	f107 0308 	add.w	r3, r7, #8
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff ff30 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aa8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa92:	2112      	movs	r1, #18
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f993 	bl	800adc0 <SDMMC_GetCmdResp1>
 800aa9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa9c:	69fb      	ldr	r3, [r7, #28]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3720      	adds	r7, #32
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b088      	sub	sp, #32
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800aab4:	2318      	movs	r3, #24
 800aab6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aab8:	2340      	movs	r3, #64	@ 0x40
 800aaba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aabc:	2300      	movs	r3, #0
 800aabe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aac0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aac4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aac6:	f107 0308 	add.w	r3, r7, #8
 800aaca:	4619      	mov	r1, r3
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff ff0e 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aad6:	2118      	movs	r1, #24
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 f971 	bl	800adc0 <SDMMC_GetCmdResp1>
 800aade:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aae0:	69fb      	ldr	r3, [r7, #28]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3720      	adds	r7, #32
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b088      	sub	sp, #32
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800aaf8:	2319      	movs	r3, #25
 800aafa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aafc:	2340      	movs	r3, #64	@ 0x40
 800aafe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab00:	2300      	movs	r3, #0
 800ab02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab0a:	f107 0308 	add.w	r3, r7, #8
 800ab0e:	4619      	mov	r1, r3
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7ff feec 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ab16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab1a:	2119      	movs	r1, #25
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 f94f 	bl	800adc0 <SDMMC_GetCmdResp1>
 800ab22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab24:	69fb      	ldr	r3, [r7, #28]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3720      	adds	r7, #32
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
	...

0800ab30 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ab3c:	230c      	movs	r3, #12
 800ab3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab40:	2340      	movs	r3, #64	@ 0x40
 800ab42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab44:	2300      	movs	r3, #0
 800ab46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab4e:	f107 0308 	add.w	r3, r7, #8
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff feca 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ab5a:	4a05      	ldr	r2, [pc, #20]	@ (800ab70 <SDMMC_CmdStopTransfer+0x40>)
 800ab5c:	210c      	movs	r1, #12
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f92e 	bl	800adc0 <SDMMC_GetCmdResp1>
 800ab64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab66:	69fb      	ldr	r3, [r7, #28]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3720      	adds	r7, #32
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	05f5e100 	.word	0x05f5e100

0800ab74 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08a      	sub	sp, #40	@ 0x28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ab84:	2307      	movs	r3, #7
 800ab86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab88:	2340      	movs	r3, #64	@ 0x40
 800ab8a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab94:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab96:	f107 0310 	add.w	r3, r7, #16
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f7ff fea6 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800aba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aba6:	2107      	movs	r1, #7
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 f909 	bl	800adc0 <SDMMC_GetCmdResp1>
 800abae:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800abb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3728      	adds	r7, #40	@ 0x28
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b088      	sub	sp, #32
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800abc2:	2300      	movs	r3, #0
 800abc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800abc6:	2300      	movs	r3, #0
 800abc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800abca:	2300      	movs	r3, #0
 800abcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abce:	2300      	movs	r3, #0
 800abd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abd8:	f107 0308 	add.w	r3, r7, #8
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7ff fe85 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fb23 	bl	800b230 <SDMMC_GetCmdError>
 800abea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abec:	69fb      	ldr	r3, [r7, #28]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3720      	adds	r7, #32
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b088      	sub	sp, #32
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800abfe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ac02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ac04:	2308      	movs	r3, #8
 800ac06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac08:	2340      	movs	r3, #64	@ 0x40
 800ac0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac16:	f107 0308 	add.w	r3, r7, #8
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7ff fe66 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 fab6 	bl	800b194 <SDMMC_GetCmdResp7>
 800ac28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac2a:	69fb      	ldr	r3, [r7, #28]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3720      	adds	r7, #32
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b088      	sub	sp, #32
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ac42:	2337      	movs	r3, #55	@ 0x37
 800ac44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac46:	2340      	movs	r3, #64	@ 0x40
 800ac48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac54:	f107 0308 	add.w	r3, r7, #8
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7ff fe47 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ac60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac64:	2137      	movs	r1, #55	@ 0x37
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 f8aa 	bl	800adc0 <SDMMC_GetCmdResp1>
 800ac6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac6e:	69fb      	ldr	r3, [r7, #28]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3720      	adds	r7, #32
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b088      	sub	sp, #32
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ac88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ac8e:	2329      	movs	r3, #41	@ 0x29
 800ac90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac92:	2340      	movs	r3, #64	@ 0x40
 800ac94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac96:	2300      	movs	r3, #0
 800ac98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aca0:	f107 0308 	add.w	r3, r7, #8
 800aca4:	4619      	mov	r1, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff fe21 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f9bd 	bl	800b02c <SDMMC_GetCmdResp3>
 800acb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acb4:	69fb      	ldr	r3, [r7, #28]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3720      	adds	r7, #32
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b088      	sub	sp, #32
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800acc6:	2300      	movs	r3, #0
 800acc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800acca:	2302      	movs	r3, #2
 800accc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800acce:	23c0      	movs	r3, #192	@ 0xc0
 800acd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acd2:	2300      	movs	r3, #0
 800acd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800acda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acdc:	f107 0308 	add.w	r3, r7, #8
 800ace0:	4619      	mov	r1, r3
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7ff fe03 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f957 	bl	800af9c <SDMMC_GetCmdResp2>
 800acee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acf0:	69fb      	ldr	r3, [r7, #28]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3720      	adds	r7, #32
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b088      	sub	sp, #32
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ad08:	2309      	movs	r3, #9
 800ad0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ad0c:	23c0      	movs	r3, #192	@ 0xc0
 800ad0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad10:	2300      	movs	r3, #0
 800ad12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad1a:	f107 0308 	add.w	r3, r7, #8
 800ad1e:	4619      	mov	r1, r3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff fde4 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f938 	bl	800af9c <SDMMC_GetCmdResp2>
 800ad2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad2e:	69fb      	ldr	r3, [r7, #28]
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3720      	adds	r7, #32
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b088      	sub	sp, #32
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad42:	2300      	movs	r3, #0
 800ad44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ad46:	2303      	movs	r3, #3
 800ad48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad4a:	2340      	movs	r3, #64	@ 0x40
 800ad4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad58:	f107 0308 	add.w	r3, r7, #8
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7ff fdc5 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ad64:	683a      	ldr	r2, [r7, #0]
 800ad66:	2103      	movs	r1, #3
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f99d 	bl	800b0a8 <SDMMC_GetCmdResp6>
 800ad6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad70:	69fb      	ldr	r3, [r7, #28]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3720      	adds	r7, #32
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b088      	sub	sp, #32
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
 800ad82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ad88:	230d      	movs	r3, #13
 800ad8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad8c:	2340      	movs	r3, #64	@ 0x40
 800ad8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad90:	2300      	movs	r3, #0
 800ad92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad9a:	f107 0308 	add.w	r3, r7, #8
 800ad9e:	4619      	mov	r1, r3
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7ff fda4 	bl	800a8ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ada6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adaa:	210d      	movs	r1, #13
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f807 	bl	800adc0 <SDMMC_GetCmdResp1>
 800adb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adb4:	69fb      	ldr	r3, [r7, #28]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3720      	adds	r7, #32
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
	...

0800adc0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	460b      	mov	r3, r1
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800adce:	4b70      	ldr	r3, [pc, #448]	@ (800af90 <SDMMC_GetCmdResp1+0x1d0>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a70      	ldr	r2, [pc, #448]	@ (800af94 <SDMMC_GetCmdResp1+0x1d4>)
 800add4:	fba2 2303 	umull	r2, r3, r2, r3
 800add8:	0a5a      	lsrs	r2, r3, #9
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	fb02 f303 	mul.w	r3, r2, r3
 800ade0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	1e5a      	subs	r2, r3, #1
 800ade6:	61fa      	str	r2, [r7, #28]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d102      	bne.n	800adf2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800adec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800adf0:	e0c9      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adf6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d0ef      	beq.n	800ade2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1ea      	bne.n	800ade2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d004      	beq.n	800ae22 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2204      	movs	r2, #4
 800ae1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae1e:	2304      	movs	r3, #4
 800ae20:	e0b1      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae26:	f003 0301 	and.w	r3, r3, #1
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d004      	beq.n	800ae38 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2201      	movs	r2, #1
 800ae32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e0a6      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	22c5      	movs	r2, #197	@ 0xc5
 800ae3c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7ff fd7f 	bl	800a942 <SDIO_GetCommandResponse>
 800ae44:	4603      	mov	r3, r0
 800ae46:	461a      	mov	r2, r3
 800ae48:	7afb      	ldrb	r3, [r7, #11]
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d001      	beq.n	800ae52 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e099      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ae52:	2100      	movs	r1, #0
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7ff fd81 	bl	800a95c <SDIO_GetResponse>
 800ae5a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	4b4e      	ldr	r3, [pc, #312]	@ (800af98 <SDMMC_GetCmdResp1+0x1d8>)
 800ae60:	4013      	ands	r3, r2
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d101      	bne.n	800ae6a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ae66:	2300      	movs	r3, #0
 800ae68:	e08d      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	da02      	bge.n	800ae76 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ae70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ae74:	e087      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d001      	beq.n	800ae84 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ae80:	2340      	movs	r3, #64	@ 0x40
 800ae82:	e080      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ae8e:	2380      	movs	r3, #128	@ 0x80
 800ae90:	e079      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ae9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aea0:	e071      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aeac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aeb0:	e069      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aebc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aec0:	e061      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d002      	beq.n	800aed2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aecc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aed0:	e059      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aedc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aee0:	e051      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d002      	beq.n	800aef2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aeec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800aef0:	e049      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aefc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800af00:	e041      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800af0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af10:	e039      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d002      	beq.n	800af22 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800af1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800af20:	e031      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d002      	beq.n	800af32 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800af2c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800af30:	e029      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800af3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800af40:	e021      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d002      	beq.n	800af52 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800af4c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800af50:	e019      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800af5c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800af60:	e011      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800af6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800af70:	e009      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f003 0308 	and.w	r3, r3, #8
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800af7c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800af80:	e001      	b.n	800af86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800af86:	4618      	mov	r0, r3
 800af88:	3720      	adds	r7, #32
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	20000000 	.word	0x20000000
 800af94:	10624dd3 	.word	0x10624dd3
 800af98:	fdffe008 	.word	0xfdffe008

0800af9c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800afa4:	4b1f      	ldr	r3, [pc, #124]	@ (800b024 <SDMMC_GetCmdResp2+0x88>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a1f      	ldr	r2, [pc, #124]	@ (800b028 <SDMMC_GetCmdResp2+0x8c>)
 800afaa:	fba2 2303 	umull	r2, r3, r2, r3
 800afae:	0a5b      	lsrs	r3, r3, #9
 800afb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afb4:	fb02 f303 	mul.w	r3, r2, r3
 800afb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	1e5a      	subs	r2, r3, #1
 800afbe:	60fa      	str	r2, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d102      	bne.n	800afca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afc4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800afc8:	e026      	b.n	800b018 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d0ef      	beq.n	800afba <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1ea      	bne.n	800afba <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afe8:	f003 0304 	and.w	r3, r3, #4
 800afec:	2b00      	cmp	r3, #0
 800afee:	d004      	beq.n	800affa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2204      	movs	r2, #4
 800aff4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aff6:	2304      	movs	r3, #4
 800aff8:	e00e      	b.n	800b018 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	2b00      	cmp	r3, #0
 800b004:	d004      	beq.n	800b010 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2201      	movs	r2, #1
 800b00a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e003      	b.n	800b018 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	22c5      	movs	r2, #197	@ 0xc5
 800b014:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3714      	adds	r7, #20
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr
 800b024:	20000000 	.word	0x20000000
 800b028:	10624dd3 	.word	0x10624dd3

0800b02c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b034:	4b1a      	ldr	r3, [pc, #104]	@ (800b0a0 <SDMMC_GetCmdResp3+0x74>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a1a      	ldr	r2, [pc, #104]	@ (800b0a4 <SDMMC_GetCmdResp3+0x78>)
 800b03a:	fba2 2303 	umull	r2, r3, r2, r3
 800b03e:	0a5b      	lsrs	r3, r3, #9
 800b040:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b044:	fb02 f303 	mul.w	r3, r2, r3
 800b048:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	1e5a      	subs	r2, r3, #1
 800b04e:	60fa      	str	r2, [r7, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d102      	bne.n	800b05a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b054:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b058:	e01b      	b.n	800b092 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b05e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b066:	2b00      	cmp	r3, #0
 800b068:	d0ef      	beq.n	800b04a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1ea      	bne.n	800b04a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b078:	f003 0304 	and.w	r3, r3, #4
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d004      	beq.n	800b08a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2204      	movs	r2, #4
 800b084:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b086:	2304      	movs	r3, #4
 800b088:	e003      	b.n	800b092 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	22c5      	movs	r2, #197	@ 0xc5
 800b08e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	20000000 	.word	0x20000000
 800b0a4:	10624dd3 	.word	0x10624dd3

0800b0a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	607a      	str	r2, [r7, #4]
 800b0b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0b6:	4b35      	ldr	r3, [pc, #212]	@ (800b18c <SDMMC_GetCmdResp6+0xe4>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a35      	ldr	r2, [pc, #212]	@ (800b190 <SDMMC_GetCmdResp6+0xe8>)
 800b0bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b0c0:	0a5b      	lsrs	r3, r3, #9
 800b0c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0c6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ca:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	1e5a      	subs	r2, r3, #1
 800b0d0:	61fa      	str	r2, [r7, #28]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d102      	bne.n	800b0dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b0da:	e052      	b.n	800b182 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0e0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d0ef      	beq.n	800b0cc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1ea      	bne.n	800b0cc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0fa:	f003 0304 	and.w	r3, r3, #4
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d004      	beq.n	800b10c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2204      	movs	r2, #4
 800b106:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b108:	2304      	movs	r3, #4
 800b10a:	e03a      	b.n	800b182 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d004      	beq.n	800b122 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2201      	movs	r2, #1
 800b11c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b11e:	2301      	movs	r3, #1
 800b120:	e02f      	b.n	800b182 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f7ff fc0d 	bl	800a942 <SDIO_GetCommandResponse>
 800b128:	4603      	mov	r3, r0
 800b12a:	461a      	mov	r2, r3
 800b12c:	7afb      	ldrb	r3, [r7, #11]
 800b12e:	4293      	cmp	r3, r2
 800b130:	d001      	beq.n	800b136 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b132:	2301      	movs	r3, #1
 800b134:	e025      	b.n	800b182 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	22c5      	movs	r2, #197	@ 0xc5
 800b13a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b13c:	2100      	movs	r1, #0
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f7ff fc0c 	bl	800a95c <SDIO_GetResponse>
 800b144:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d106      	bne.n	800b15e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	0c1b      	lsrs	r3, r3, #16
 800b154:	b29a      	uxth	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b15a:	2300      	movs	r3, #0
 800b15c:	e011      	b.n	800b182 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d002      	beq.n	800b16e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b168:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b16c:	e009      	b.n	800b182 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b17c:	e001      	b.n	800b182 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b17e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b182:	4618      	mov	r0, r3
 800b184:	3720      	adds	r7, #32
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20000000 	.word	0x20000000
 800b190:	10624dd3 	.word	0x10624dd3

0800b194 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b19c:	4b22      	ldr	r3, [pc, #136]	@ (800b228 <SDMMC_GetCmdResp7+0x94>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a22      	ldr	r2, [pc, #136]	@ (800b22c <SDMMC_GetCmdResp7+0x98>)
 800b1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1a6:	0a5b      	lsrs	r3, r3, #9
 800b1a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1ac:	fb02 f303 	mul.w	r3, r2, r3
 800b1b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	1e5a      	subs	r2, r3, #1
 800b1b6:	60fa      	str	r2, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d102      	bne.n	800b1c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b1c0:	e02c      	b.n	800b21c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d0ef      	beq.n	800b1b2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1ea      	bne.n	800b1b2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1e0:	f003 0304 	and.w	r3, r3, #4
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d004      	beq.n	800b1f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2204      	movs	r2, #4
 800b1ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1ee:	2304      	movs	r3, #4
 800b1f0:	e014      	b.n	800b21c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d004      	beq.n	800b208 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b204:	2301      	movs	r3, #1
 800b206:	e009      	b.n	800b21c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b20c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2240      	movs	r2, #64	@ 0x40
 800b218:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b21a:	2300      	movs	r3, #0
  
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr
 800b228:	20000000 	.word	0x20000000
 800b22c:	10624dd3 	.word	0x10624dd3

0800b230 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b238:	4b11      	ldr	r3, [pc, #68]	@ (800b280 <SDMMC_GetCmdError+0x50>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a11      	ldr	r2, [pc, #68]	@ (800b284 <SDMMC_GetCmdError+0x54>)
 800b23e:	fba2 2303 	umull	r2, r3, r2, r3
 800b242:	0a5b      	lsrs	r3, r3, #9
 800b244:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b248:	fb02 f303 	mul.w	r3, r2, r3
 800b24c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	1e5a      	subs	r2, r3, #1
 800b252:	60fa      	str	r2, [r7, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d102      	bne.n	800b25e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b258:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b25c:	e009      	b.n	800b272 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b266:	2b00      	cmp	r3, #0
 800b268:	d0f1      	beq.n	800b24e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	22c5      	movs	r2, #197	@ 0xc5
 800b26e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	20000000 	.word	0x20000000
 800b284:	10624dd3 	.word	0x10624dd3

0800b288 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b28c:	4904      	ldr	r1, [pc, #16]	@ (800b2a0 <MX_FATFS_Init+0x18>)
 800b28e:	4805      	ldr	r0, [pc, #20]	@ (800b2a4 <MX_FATFS_Init+0x1c>)
 800b290:	f001 f9be 	bl	800c610 <FATFS_LinkDriver>
 800b294:	4603      	mov	r3, r0
 800b296:	461a      	mov	r2, r3
 800b298:	4b03      	ldr	r3, [pc, #12]	@ (800b2a8 <MX_FATFS_Init+0x20>)
 800b29a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b29c:	bf00      	nop
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	20000f20 	.word	0x20000f20
 800b2a4:	08012830 	.word	0x08012830
 800b2a8:	20000f1c 	.word	0x20000f1c

0800b2ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b2b6:	f000 f888 	bl	800b3ca <BSP_SD_IsDetected>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d001      	beq.n	800b2c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e005      	b.n	800b2d0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b2c4:	4804      	ldr	r0, [pc, #16]	@ (800b2d8 <BSP_SD_Init+0x2c>)
 800b2c6:	f7fc fa39 	bl	800773c <HAL_SD_Init>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b2ce:	79fb      	ldrb	r3, [r7, #7]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20000ce8 	.word	0x20000ce8

0800b2dc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	68f9      	ldr	r1, [r7, #12]
 800b2f2:	4806      	ldr	r0, [pc, #24]	@ (800b30c <BSP_SD_ReadBlocks_DMA+0x30>)
 800b2f4:	f7fc faea 	bl	80078cc <HAL_SD_ReadBlocks_DMA>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b302:	7dfb      	ldrb	r3, [r7, #23]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3718      	adds	r7, #24
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	20000ce8 	.word	0x20000ce8

0800b310 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b31c:	2300      	movs	r3, #0
 800b31e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	68f9      	ldr	r1, [r7, #12]
 800b326:	4806      	ldr	r0, [pc, #24]	@ (800b340 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b328:	f7fc fbb0 	bl	8007a8c <HAL_SD_WriteBlocks_DMA>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d001      	beq.n	800b336 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b336:	7dfb      	ldrb	r3, [r7, #23]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	20000ce8 	.word	0x20000ce8

0800b344 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b348:	4805      	ldr	r0, [pc, #20]	@ (800b360 <BSP_SD_GetCardState+0x1c>)
 800b34a:	f7fc ffd1 	bl	80082f0 <HAL_SD_GetCardState>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b04      	cmp	r3, #4
 800b352:	bf14      	ite	ne
 800b354:	2301      	movne	r3, #1
 800b356:	2300      	moveq	r3, #0
 800b358:	b2db      	uxtb	r3, r3
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20000ce8 	.word	0x20000ce8

0800b364 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b36c:	6879      	ldr	r1, [r7, #4]
 800b36e:	4803      	ldr	r0, [pc, #12]	@ (800b37c <BSP_SD_GetCardInfo+0x18>)
 800b370:	f7fc ff92 	bl	8008298 <HAL_SD_GetCardInfo>
}
 800b374:	bf00      	nop
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	20000ce8 	.word	0x20000ce8

0800b380 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b388:	f000 f818 	bl	800b3bc <BSP_SD_AbortCallback>
}
 800b38c:	bf00      	nop
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b39c:	f000 f9c4 	bl	800b728 <BSP_SD_WriteCpltCallback>
}
 800b3a0:	bf00      	nop
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b3b0:	f000 f9c8 	bl	800b744 <BSP_SD_ReadCpltCallback>
}
 800b3b4:	bf00      	nop
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	af00      	add	r7, sp, #0

}
 800b3c0:	bf00      	nop
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b3d4:	f000 f80c 	bl	800b3f0 <BSP_PlatformIsDetected>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b3e2:	79fb      	ldrb	r3, [r7, #7]
 800b3e4:	b2db      	uxtb	r3, r3
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
	...

0800b3f0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b3fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b3fe:	4806      	ldr	r0, [pc, #24]	@ (800b418 <BSP_PlatformIsDetected+0x28>)
 800b400:	f7f9 fe54 	bl	80050ac <HAL_GPIO_ReadPin>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b40a:	2300      	movs	r3, #0
 800b40c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b40e:	79fb      	ldrb	r3, [r7, #7]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	40020400 	.word	0x40020400

0800b41c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b424:	f001 f98b 	bl	800c73e <osKernelSysTick>
 800b428:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b42a:	e006      	b.n	800b43a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b42c:	f7ff ff8a 	bl	800b344 <BSP_SD_GetCardState>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d101      	bne.n	800b43a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b436:	2300      	movs	r3, #0
 800b438:	e009      	b.n	800b44e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b43a:	f001 f980 	bl	800c73e <osKernelSysTick>
 800b43e:	4602      	mov	r2, r0
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	429a      	cmp	r2, r3
 800b448:	d8f0      	bhi.n	800b42c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b44a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
	...

0800b458 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	4603      	mov	r3, r0
 800b460:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b462:	4b0b      	ldr	r3, [pc, #44]	@ (800b490 <SD_CheckStatus+0x38>)
 800b464:	2201      	movs	r2, #1
 800b466:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b468:	f7ff ff6c 	bl	800b344 <BSP_SD_GetCardState>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d107      	bne.n	800b482 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b472:	4b07      	ldr	r3, [pc, #28]	@ (800b490 <SD_CheckStatus+0x38>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	b2db      	uxtb	r3, r3
 800b478:	f023 0301 	bic.w	r3, r3, #1
 800b47c:	b2da      	uxtb	r2, r3
 800b47e:	4b04      	ldr	r3, [pc, #16]	@ (800b490 <SD_CheckStatus+0x38>)
 800b480:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b482:	4b03      	ldr	r3, [pc, #12]	@ (800b490 <SD_CheckStatus+0x38>)
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	b2db      	uxtb	r3, r3
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	20000009 	.word	0x20000009

0800b494 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b494:	b590      	push	{r4, r7, lr}
 800b496:	b087      	sub	sp, #28
 800b498:	af00      	add	r7, sp, #0
 800b49a:	4603      	mov	r3, r0
 800b49c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b49e:	4b20      	ldr	r3, [pc, #128]	@ (800b520 <SD_initialize+0x8c>)
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b4a4:	f001 f93f 	bl	800c726 <osKernelRunning>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d030      	beq.n	800b510 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b4ae:	f7ff fefd 	bl	800b2ac <BSP_SD_Init>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d107      	bne.n	800b4c8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b4b8:	79fb      	ldrb	r3, [r7, #7]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff ffcc 	bl	800b458 <SD_CheckStatus>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	4b16      	ldr	r3, [pc, #88]	@ (800b520 <SD_initialize+0x8c>)
 800b4c6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b4c8:	4b15      	ldr	r3, [pc, #84]	@ (800b520 <SD_initialize+0x8c>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d01e      	beq.n	800b510 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b4d2:	4b14      	ldr	r3, [pc, #80]	@ (800b524 <SD_initialize+0x90>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10e      	bne.n	800b4f8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b4da:	4b13      	ldr	r3, [pc, #76]	@ (800b528 <SD_initialize+0x94>)
 800b4dc:	f107 0408 	add.w	r4, r7, #8
 800b4e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b4e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b4e6:	f107 0308 	add.w	r3, r7, #8
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f001 fa46 	bl	800c97e <osMessageCreate>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	4a0b      	ldr	r2, [pc, #44]	@ (800b524 <SD_initialize+0x90>)
 800b4f6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b4f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b524 <SD_initialize+0x90>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d107      	bne.n	800b510 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b500:	4b07      	ldr	r3, [pc, #28]	@ (800b520 <SD_initialize+0x8c>)
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	b2db      	uxtb	r3, r3
 800b506:	f043 0301 	orr.w	r3, r3, #1
 800b50a:	b2da      	uxtb	r2, r3
 800b50c:	4b04      	ldr	r3, [pc, #16]	@ (800b520 <SD_initialize+0x8c>)
 800b50e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b510:	4b03      	ldr	r3, [pc, #12]	@ (800b520 <SD_initialize+0x8c>)
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	b2db      	uxtb	r3, r3
}
 800b516:	4618      	mov	r0, r3
 800b518:	371c      	adds	r7, #28
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd90      	pop	{r4, r7, pc}
 800b51e:	bf00      	nop
 800b520:	20000009 	.word	0x20000009
 800b524:	20001160 	.word	0x20001160
 800b528:	080127a4 	.word	0x080127a4

0800b52c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	4603      	mov	r3, r0
 800b534:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b536:	79fb      	ldrb	r3, [r7, #7]
 800b538:	4618      	mov	r0, r3
 800b53a:	f7ff ff8d 	bl	800b458 <SD_CheckStatus>
 800b53e:	4603      	mov	r3, r0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b08a      	sub	sp, #40	@ 0x28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60b9      	str	r1, [r7, #8]
 800b550:	607a      	str	r2, [r7, #4]
 800b552:	603b      	str	r3, [r7, #0]
 800b554:	4603      	mov	r3, r0
 800b556:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b55e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b562:	f7ff ff5b 	bl	800b41c <SD_CheckStatusWithTimeout>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	da02      	bge.n	800b572 <SD_read+0x2a>
  {
    return res;
 800b56c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b570:	e032      	b.n	800b5d8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	6879      	ldr	r1, [r7, #4]
 800b576:	68b8      	ldr	r0, [r7, #8]
 800b578:	f7ff feb0 	bl	800b2dc <BSP_SD_ReadBlocks_DMA>
 800b57c:	4603      	mov	r3, r0
 800b57e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800b582:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b586:	2b00      	cmp	r3, #0
 800b588:	d124      	bne.n	800b5d4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b58a:	4b15      	ldr	r3, [pc, #84]	@ (800b5e0 <SD_read+0x98>)
 800b58c:	6819      	ldr	r1, [r3, #0]
 800b58e:	f107 0314 	add.w	r3, r7, #20
 800b592:	f247 5230 	movw	r2, #30000	@ 0x7530
 800b596:	4618      	mov	r0, r3
 800b598:	f001 fa5a 	bl	800ca50 <osMessageGet>

    if (event.status == osEventMessage)
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	2b10      	cmp	r3, #16
 800b5a0:	d118      	bne.n	800b5d4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d115      	bne.n	800b5d4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b5a8:	f001 f8c9 	bl	800c73e <osKernelSysTick>
 800b5ac:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b5ae:	e008      	b.n	800b5c2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b5b0:	f7ff fec8 	bl	800b344 <BSP_SD_GetCardState>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d103      	bne.n	800b5c2 <SD_read+0x7a>
              {
                res = RES_OK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b5c0:	e008      	b.n	800b5d4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b5c2:	f001 f8bc 	bl	800c73e <osKernelSysTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	6a3b      	ldr	r3, [r7, #32]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d9ed      	bls.n	800b5b0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3728      	adds	r7, #40	@ 0x28
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	20001160 	.word	0x20001160

0800b5e4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b08a      	sub	sp, #40	@ 0x28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60b9      	str	r1, [r7, #8]
 800b5ec:	607a      	str	r2, [r7, #4]
 800b5ee:	603b      	str	r3, [r7, #0]
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b5fa:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b5fe:	f7ff ff0d 	bl	800b41c <SD_CheckStatusWithTimeout>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	da02      	bge.n	800b60e <SD_write+0x2a>
  {
    return res;
 800b608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b60c:	e02e      	b.n	800b66c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	68b8      	ldr	r0, [r7, #8]
 800b614:	f7ff fe7c 	bl	800b310 <BSP_SD_WriteBlocks_DMA>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d124      	bne.n	800b668 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b61e:	4b15      	ldr	r3, [pc, #84]	@ (800b674 <SD_write+0x90>)
 800b620:	6819      	ldr	r1, [r3, #0]
 800b622:	f107 0314 	add.w	r3, r7, #20
 800b626:	f247 5230 	movw	r2, #30000	@ 0x7530
 800b62a:	4618      	mov	r0, r3
 800b62c:	f001 fa10 	bl	800ca50 <osMessageGet>

    if (event.status == osEventMessage)
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2b10      	cmp	r3, #16
 800b634:	d118      	bne.n	800b668 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d115      	bne.n	800b668 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b63c:	f001 f87f 	bl	800c73e <osKernelSysTick>
 800b640:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b642:	e008      	b.n	800b656 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b644:	f7ff fe7e 	bl	800b344 <BSP_SD_GetCardState>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d103      	bne.n	800b656 <SD_write+0x72>
          {
            res = RES_OK;
 800b64e:	2300      	movs	r3, #0
 800b650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800b654:	e008      	b.n	800b668 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b656:	f001 f872 	bl	800c73e <osKernelSysTick>
 800b65a:	4602      	mov	r2, r0
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b664:	4293      	cmp	r3, r2
 800b666:	d9ed      	bls.n	800b644 <SD_write+0x60>
        res = RES_OK;
    }

#endif

  return res;
 800b668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3728      	adds	r7, #40	@ 0x28
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	20001160 	.word	0x20001160

0800b678 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08c      	sub	sp, #48	@ 0x30
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	603a      	str	r2, [r7, #0]
 800b682:	71fb      	strb	r3, [r7, #7]
 800b684:	460b      	mov	r3, r1
 800b686:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b688:	2301      	movs	r3, #1
 800b68a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b68e:	4b25      	ldr	r3, [pc, #148]	@ (800b724 <SD_ioctl+0xac>)
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	b2db      	uxtb	r3, r3
 800b694:	f003 0301 	and.w	r3, r3, #1
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <SD_ioctl+0x28>
 800b69c:	2303      	movs	r3, #3
 800b69e:	e03c      	b.n	800b71a <SD_ioctl+0xa2>

  switch (cmd)
 800b6a0:	79bb      	ldrb	r3, [r7, #6]
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d834      	bhi.n	800b710 <SD_ioctl+0x98>
 800b6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b6ac <SD_ioctl+0x34>)
 800b6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ac:	0800b6bd 	.word	0x0800b6bd
 800b6b0:	0800b6c5 	.word	0x0800b6c5
 800b6b4:	0800b6dd 	.word	0x0800b6dd
 800b6b8:	0800b6f7 	.word	0x0800b6f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b6c2:	e028      	b.n	800b716 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b6c4:	f107 030c 	add.w	r3, r7, #12
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7ff fe4b 	bl	800b364 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b6ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b6da:	e01c      	b.n	800b716 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b6dc:	f107 030c 	add.w	r3, r7, #12
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7ff fe3f 	bl	800b364 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b6f4:	e00f      	b.n	800b716 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b6f6:	f107 030c 	add.w	r3, r7, #12
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7ff fe32 	bl	800b364 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b702:	0a5a      	lsrs	r2, r3, #9
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b70e:	e002      	b.n	800b716 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b710:	2304      	movs	r3, #4
 800b712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b716:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3730      	adds	r7, #48	@ 0x30
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	20000009 	.word	0x20000009

0800b728 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800b72c:	4b04      	ldr	r3, [pc, #16]	@ (800b740 <BSP_SD_WriteCpltCallback+0x18>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2200      	movs	r2, #0
 800b732:	2102      	movs	r1, #2
 800b734:	4618      	mov	r0, r3
 800b736:	f001 f94b 	bl	800c9d0 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800b73a:	bf00      	nop
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	20001160 	.word	0x20001160

0800b744 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b748:	4b04      	ldr	r3, [pc, #16]	@ (800b75c <BSP_SD_ReadCpltCallback+0x18>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2200      	movs	r2, #0
 800b74e:	2101      	movs	r1, #1
 800b750:	4618      	mov	r0, r3
 800b752:	f001 f93d 	bl	800c9d0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800b756:	bf00      	nop
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20001160 	.word	0x20001160

0800b760 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	4603      	mov	r3, r0
 800b768:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b76a:	79fb      	ldrb	r3, [r7, #7]
 800b76c:	4a08      	ldr	r2, [pc, #32]	@ (800b790 <disk_status+0x30>)
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	79fa      	ldrb	r2, [r7, #7]
 800b778:	4905      	ldr	r1, [pc, #20]	@ (800b790 <disk_status+0x30>)
 800b77a:	440a      	add	r2, r1
 800b77c:	7a12      	ldrb	r2, [r2, #8]
 800b77e:	4610      	mov	r0, r2
 800b780:	4798      	blx	r3
 800b782:	4603      	mov	r3, r0
 800b784:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b786:	7bfb      	ldrb	r3, [r7, #15]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	2000118c 	.word	0x2000118c

0800b794 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b7a2:	79fb      	ldrb	r3, [r7, #7]
 800b7a4:	4a0e      	ldr	r2, [pc, #56]	@ (800b7e0 <disk_initialize+0x4c>)
 800b7a6:	5cd3      	ldrb	r3, [r2, r3]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d114      	bne.n	800b7d6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b7ac:	79fb      	ldrb	r3, [r7, #7]
 800b7ae:	4a0c      	ldr	r2, [pc, #48]	@ (800b7e0 <disk_initialize+0x4c>)
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	4413      	add	r3, r2
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	79fa      	ldrb	r2, [r7, #7]
 800b7ba:	4909      	ldr	r1, [pc, #36]	@ (800b7e0 <disk_initialize+0x4c>)
 800b7bc:	440a      	add	r2, r1
 800b7be:	7a12      	ldrb	r2, [r2, #8]
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	4798      	blx	r3
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b7c8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d103      	bne.n	800b7d6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b7ce:	79fb      	ldrb	r3, [r7, #7]
 800b7d0:	4a03      	ldr	r2, [pc, #12]	@ (800b7e0 <disk_initialize+0x4c>)
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	2000118c 	.word	0x2000118c

0800b7e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b7e4:	b590      	push	{r4, r7, lr}
 800b7e6:	b087      	sub	sp, #28
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60b9      	str	r1, [r7, #8]
 800b7ec:	607a      	str	r2, [r7, #4]
 800b7ee:	603b      	str	r3, [r7, #0]
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
 800b7f6:	4a0a      	ldr	r2, [pc, #40]	@ (800b820 <disk_read+0x3c>)
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	4413      	add	r3, r2
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	689c      	ldr	r4, [r3, #8]
 800b800:	7bfb      	ldrb	r3, [r7, #15]
 800b802:	4a07      	ldr	r2, [pc, #28]	@ (800b820 <disk_read+0x3c>)
 800b804:	4413      	add	r3, r2
 800b806:	7a18      	ldrb	r0, [r3, #8]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	68b9      	ldr	r1, [r7, #8]
 800b80e:	47a0      	blx	r4
 800b810:	4603      	mov	r3, r0
 800b812:	75fb      	strb	r3, [r7, #23]
  return res;
 800b814:	7dfb      	ldrb	r3, [r7, #23]
}
 800b816:	4618      	mov	r0, r3
 800b818:	371c      	adds	r7, #28
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd90      	pop	{r4, r7, pc}
 800b81e:	bf00      	nop
 800b820:	2000118c 	.word	0x2000118c

0800b824 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b824:	b590      	push	{r4, r7, lr}
 800b826:	b087      	sub	sp, #28
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60b9      	str	r1, [r7, #8]
 800b82c:	607a      	str	r2, [r7, #4]
 800b82e:	603b      	str	r3, [r7, #0]
 800b830:	4603      	mov	r3, r0
 800b832:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b834:	7bfb      	ldrb	r3, [r7, #15]
 800b836:	4a0a      	ldr	r2, [pc, #40]	@ (800b860 <disk_write+0x3c>)
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	68dc      	ldr	r4, [r3, #12]
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	4a07      	ldr	r2, [pc, #28]	@ (800b860 <disk_write+0x3c>)
 800b844:	4413      	add	r3, r2
 800b846:	7a18      	ldrb	r0, [r3, #8]
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	68b9      	ldr	r1, [r7, #8]
 800b84e:	47a0      	blx	r4
 800b850:	4603      	mov	r3, r0
 800b852:	75fb      	strb	r3, [r7, #23]
  return res;
 800b854:	7dfb      	ldrb	r3, [r7, #23]
}
 800b856:	4618      	mov	r0, r3
 800b858:	371c      	adds	r7, #28
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd90      	pop	{r4, r7, pc}
 800b85e:	bf00      	nop
 800b860:	2000118c 	.word	0x2000118c

0800b864 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3301      	adds	r3, #1
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b874:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b878:	021b      	lsls	r3, r3, #8
 800b87a:	b21a      	sxth	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	b21b      	sxth	r3, r3
 800b882:	4313      	orrs	r3, r2
 800b884:	b21b      	sxth	r3, r3
 800b886:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b888:	89fb      	ldrh	r3, [r7, #14]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b896:	b480      	push	{r7}
 800b898:	b085      	sub	sp, #20
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	3303      	adds	r3, #3
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	021b      	lsls	r3, r3, #8
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	3202      	adds	r2, #2
 800b8ae:	7812      	ldrb	r2, [r2, #0]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	021b      	lsls	r3, r3, #8
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	3201      	adds	r2, #1
 800b8bc:	7812      	ldrb	r2, [r2, #0]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	021b      	lsls	r3, r3, #8
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	7812      	ldrb	r2, [r2, #0]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	60fb      	str	r3, [r7, #12]
	return rv;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800b8dc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b8e0:	b09d      	sub	sp, #116	@ 0x74
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800b8e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8e8:	3307      	adds	r3, #7
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	469a      	mov	sl, r3
 800b8f2:	4693      	mov	fp, r2
 800b8f4:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800b8f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b8fc:	f04f 0000 	mov.w	r0, #0
 800b900:	f04f 0100 	mov.w	r1, #0
 800b904:	0219      	lsls	r1, r3, #8
 800b906:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b90a:	0210      	lsls	r0, r2, #8
 800b90c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b90e:	3306      	adds	r3, #6
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	b2db      	uxtb	r3, r3
 800b914:	2200      	movs	r2, #0
 800b916:	461c      	mov	r4, r3
 800b918:	4615      	mov	r5, r2
 800b91a:	ea40 0804 	orr.w	r8, r0, r4
 800b91e:	ea41 0905 	orr.w	r9, r1, r5
 800b922:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800b926:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b92a:	f04f 0000 	mov.w	r0, #0
 800b92e:	f04f 0100 	mov.w	r1, #0
 800b932:	0219      	lsls	r1, r3, #8
 800b934:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b938:	0210      	lsls	r0, r2, #8
 800b93a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b93c:	3305      	adds	r3, #5
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	b2db      	uxtb	r3, r3
 800b942:	2200      	movs	r2, #0
 800b944:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b946:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800b948:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800b94c:	4623      	mov	r3, r4
 800b94e:	4303      	orrs	r3, r0
 800b950:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b952:	462b      	mov	r3, r5
 800b954:	430b      	orrs	r3, r1
 800b956:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b958:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800b95c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800b960:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b964:	f04f 0000 	mov.w	r0, #0
 800b968:	f04f 0100 	mov.w	r1, #0
 800b96c:	0219      	lsls	r1, r3, #8
 800b96e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b972:	0210      	lsls	r0, r2, #8
 800b974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b976:	3304      	adds	r3, #4
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2200      	movs	r2, #0
 800b97e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b980:	657a      	str	r2, [r7, #84]	@ 0x54
 800b982:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800b986:	4623      	mov	r3, r4
 800b988:	4303      	orrs	r3, r0
 800b98a:	623b      	str	r3, [r7, #32]
 800b98c:	462b      	mov	r3, r5
 800b98e:	430b      	orrs	r3, r1
 800b990:	627b      	str	r3, [r7, #36]	@ 0x24
 800b992:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b996:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800b99a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b99e:	f04f 0000 	mov.w	r0, #0
 800b9a2:	f04f 0100 	mov.w	r1, #0
 800b9a6:	0219      	lsls	r1, r3, #8
 800b9a8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b9ac:	0210      	lsls	r0, r2, #8
 800b9ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9b0:	3303      	adds	r3, #3
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b9bc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800b9c0:	4623      	mov	r3, r4
 800b9c2:	4303      	orrs	r3, r0
 800b9c4:	61bb      	str	r3, [r7, #24]
 800b9c6:	462b      	mov	r3, r5
 800b9c8:	430b      	orrs	r3, r1
 800b9ca:	61fb      	str	r3, [r7, #28]
 800b9cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b9d0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800b9d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b9d8:	f04f 0000 	mov.w	r0, #0
 800b9dc:	f04f 0100 	mov.w	r1, #0
 800b9e0:	0219      	lsls	r1, r3, #8
 800b9e2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b9e6:	0210      	lsls	r0, r2, #8
 800b9e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9ea:	3302      	adds	r3, #2
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9f4:	647a      	str	r2, [r7, #68]	@ 0x44
 800b9f6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800b9fa:	4623      	mov	r3, r4
 800b9fc:	4303      	orrs	r3, r0
 800b9fe:	613b      	str	r3, [r7, #16]
 800ba00:	462b      	mov	r3, r5
 800ba02:	430b      	orrs	r3, r1
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ba0a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800ba0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ba12:	f04f 0200 	mov.w	r2, #0
 800ba16:	f04f 0300 	mov.w	r3, #0
 800ba1a:	020b      	lsls	r3, r1, #8
 800ba1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ba20:	0202      	lsls	r2, r0, #8
 800ba22:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ba24:	3101      	adds	r1, #1
 800ba26:	7809      	ldrb	r1, [r1, #0]
 800ba28:	b2c9      	uxtb	r1, r1
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ba2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800ba30:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800ba34:	4621      	mov	r1, r4
 800ba36:	4311      	orrs	r1, r2
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	4319      	orrs	r1, r3
 800ba3e:	60f9      	str	r1, [r7, #12]
 800ba40:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ba44:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800ba48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ba4c:	f04f 0200 	mov.w	r2, #0
 800ba50:	f04f 0300 	mov.w	r3, #0
 800ba54:	020b      	lsls	r3, r1, #8
 800ba56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ba5a:	0202      	lsls	r2, r0, #8
 800ba5c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ba5e:	7809      	ldrb	r1, [r1, #0]
 800ba60:	b2c9      	uxtb	r1, r1
 800ba62:	2000      	movs	r0, #0
 800ba64:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba66:	6378      	str	r0, [r7, #52]	@ 0x34
 800ba68:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	4311      	orrs	r1, r2
 800ba70:	6039      	str	r1, [r7, #0]
 800ba72:	4629      	mov	r1, r5
 800ba74:	4319      	orrs	r1, r3
 800ba76:	6079      	str	r1, [r7, #4]
 800ba78:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ba7c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800ba80:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800ba84:	4610      	mov	r0, r2
 800ba86:	4619      	mov	r1, r3
 800ba88:	3774      	adds	r7, #116	@ 0x74
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ba90:	4770      	bx	lr

0800ba92 <mem_cmp>:
	} while (--cnt);
}

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ba92:	b480      	push	{r7}
 800ba94:	b089      	sub	sp, #36	@ 0x24
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	60f8      	str	r0, [r7, #12]
 800ba9a:	60b9      	str	r1, [r7, #8]
 800ba9c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	61fb      	str	r3, [r7, #28]
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800baa6:	2300      	movs	r3, #0
 800baa8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800baaa:	69fb      	ldr	r3, [r7, #28]
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	61fa      	str	r2, [r7, #28]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	4619      	mov	r1, r3
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	61ba      	str	r2, [r7, #24]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	1acb      	subs	r3, r1, r3
 800babe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	3b01      	subs	r3, #1
 800bac4:	607b      	str	r3, [r7, #4]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d002      	beq.n	800bad2 <mem_cmp+0x40>
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0eb      	beq.n	800baaa <mem_cmp+0x18>

	return r;
 800bad2:	697b      	ldr	r3, [r7, #20]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3724      	adds	r7, #36	@ 0x24
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d009      	beq.n	800bb02 <lock_fs+0x22>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	695b      	ldr	r3, [r3, #20]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 fdc6 	bl	800c684 <ff_req_grant>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d001      	beq.n	800bb02 <lock_fs+0x22>
 800bafe:	2301      	movs	r3, #1
 800bb00:	e000      	b.n	800bb04 <lock_fs+0x24>
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	460b      	mov	r3, r1
 800bb16:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00d      	beq.n	800bb3a <unlock_fs+0x2e>
 800bb1e:	78fb      	ldrb	r3, [r7, #3]
 800bb20:	2b0c      	cmp	r3, #12
 800bb22:	d00a      	beq.n	800bb3a <unlock_fs+0x2e>
 800bb24:	78fb      	ldrb	r3, [r7, #3]
 800bb26:	2b0b      	cmp	r3, #11
 800bb28:	d007      	beq.n	800bb3a <unlock_fs+0x2e>
 800bb2a:	78fb      	ldrb	r3, [r7, #3]
 800bb2c:	2b0f      	cmp	r3, #15
 800bb2e:	d004      	beq.n	800bb3a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f000 fdba 	bl	800c6ae <ff_rel_grant>
	}
}
 800bb3a:	bf00      	nop
 800bb3c:	3708      	adds	r7, #8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
	...

0800bb44 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	e010      	b.n	800bb74 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bb52:	4a0d      	ldr	r2, [pc, #52]	@ (800bb88 <clear_lock+0x44>)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	011b      	lsls	r3, r3, #4
 800bb58:	4413      	add	r3, r2
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d105      	bne.n	800bb6e <clear_lock+0x2a>
 800bb62:	4a09      	ldr	r2, [pc, #36]	@ (800bb88 <clear_lock+0x44>)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	4413      	add	r3, r2
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3301      	adds	r3, #1
 800bb72:	60fb      	str	r3, [r7, #12]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d9eb      	bls.n	800bb52 <clear_lock+0xe>
	}
}
 800bb7a:	bf00      	nop
 800bb7c:	bf00      	nop
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr
 800bb88:	2000116c 	.word	0x2000116c

0800bb8c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	78db      	ldrb	r3, [r3, #3]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d034      	beq.n	800bc0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	7858      	ldrb	r0, [r3, #1]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	f7ff fe36 	bl	800b824 <disk_write>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d002      	beq.n	800bbc4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	73fb      	strb	r3, [r7, #15]
 800bbc2:	e022      	b.n	800bc0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	1ad2      	subs	r2, r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d217      	bcs.n	800bc0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	789b      	ldrb	r3, [r3, #2]
 800bbde:	613b      	str	r3, [r7, #16]
 800bbe0:	e010      	b.n	800bc04 <sync_window+0x78>
					wsect += fs->fsize;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	4413      	add	r3, r2
 800bbea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7858      	ldrb	r0, [r3, #1]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	f7ff fe13 	bl	800b824 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	3b01      	subs	r3, #1
 800bc02:	613b      	str	r3, [r7, #16]
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d8eb      	bhi.n	800bbe2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3718      	adds	r7, #24
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d01b      	beq.n	800bc64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7ff ffad 	bl	800bb8c <sync_window>
 800bc32:	4603      	mov	r3, r0
 800bc34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d113      	bne.n	800bc64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	7858      	ldrb	r0, [r3, #1]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800bc46:	2301      	movs	r3, #1
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	f7ff fdcb 	bl	800b7e4 <disk_read>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d004      	beq.n	800bc5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bc54:	f04f 33ff 	mov.w	r3, #4294967295
 800bc58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b083      	sub	sp, #12
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	3b02      	subs	r3, #2
 800bc7c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	3b02      	subs	r3, #2
 800bc84:	683a      	ldr	r2, [r7, #0]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d301      	bcc.n	800bc8e <clust2sect+0x20>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	e008      	b.n	800bca0 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	895b      	ldrh	r3, [r3, #10]
 800bc92:	461a      	mov	r2, r3
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	fb03 f202 	mul.w	r2, r3, r2
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc9e:	4413      	add	r3, r2
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bcb4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d031      	beq.n	800bd26 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	617b      	str	r3, [r7, #20]
 800bcc8:	e002      	b.n	800bcd0 <get_ldnumber+0x24>
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	3301      	adds	r3, #1
 800bcce:	617b      	str	r3, [r7, #20]
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	2b1f      	cmp	r3, #31
 800bcd6:	d903      	bls.n	800bce0 <get_ldnumber+0x34>
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	2b3a      	cmp	r3, #58	@ 0x3a
 800bcde:	d1f4      	bne.n	800bcca <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	2b3a      	cmp	r3, #58	@ 0x3a
 800bce6:	d11c      	bne.n	800bd22 <get_ldnumber+0x76>
			tp = *path;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	1c5a      	adds	r2, r3, #1
 800bcf2:	60fa      	str	r2, [r7, #12]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	3b30      	subs	r3, #48	@ 0x30
 800bcf8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	2b09      	cmp	r3, #9
 800bcfe:	d80e      	bhi.n	800bd1e <get_ldnumber+0x72>
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d10a      	bne.n	800bd1e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d107      	bne.n	800bd1e <get_ldnumber+0x72>
					vol = (int)i;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	3301      	adds	r3, #1
 800bd16:	617b      	str	r3, [r7, #20]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	e002      	b.n	800bd28 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bd22:	2300      	movs	r3, #0
 800bd24:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bd26:	693b      	ldr	r3, [r7, #16]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	371c      	adds	r7, #28
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	70da      	strb	r2, [r3, #3]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4a:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bd4c:	6839      	ldr	r1, [r7, #0]
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f7ff ff60 	bl	800bc14 <move_window>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d001      	beq.n	800bd5e <check_fs+0x2a>
 800bd5a:	2304      	movs	r3, #4
 800bd5c:	e044      	b.n	800bde8 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	333c      	adds	r3, #60	@ 0x3c
 800bd62:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7ff fd7c 	bl	800b864 <ld_word>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	461a      	mov	r2, r3
 800bd70:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d001      	beq.n	800bd7c <check_fs+0x48>
 800bd78:	2303      	movs	r3, #3
 800bd7a:	e035      	b.n	800bde8 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd82:	2be9      	cmp	r3, #233	@ 0xe9
 800bd84:	d009      	beq.n	800bd9a <check_fs+0x66>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd8c:	2beb      	cmp	r3, #235	@ 0xeb
 800bd8e:	d11e      	bne.n	800bdce <check_fs+0x9a>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bd96:	2b90      	cmp	r3, #144	@ 0x90
 800bd98:	d119      	bne.n	800bdce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	333c      	adds	r3, #60	@ 0x3c
 800bd9e:	3336      	adds	r3, #54	@ 0x36
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7ff fd78 	bl	800b896 <ld_dword>
 800bda6:	4603      	mov	r3, r0
 800bda8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bdac:	4a10      	ldr	r2, [pc, #64]	@ (800bdf0 <check_fs+0xbc>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d101      	bne.n	800bdb6 <check_fs+0x82>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	e018      	b.n	800bde8 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	333c      	adds	r3, #60	@ 0x3c
 800bdba:	3352      	adds	r3, #82	@ 0x52
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7ff fd6a 	bl	800b896 <ld_dword>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	4a0b      	ldr	r2, [pc, #44]	@ (800bdf4 <check_fs+0xc0>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d101      	bne.n	800bdce <check_fs+0x9a>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	e00c      	b.n	800bde8 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	333c      	adds	r3, #60	@ 0x3c
 800bdd2:	220b      	movs	r2, #11
 800bdd4:	4908      	ldr	r1, [pc, #32]	@ (800bdf8 <check_fs+0xc4>)
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff fe5b 	bl	800ba92 <mem_cmp>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d101      	bne.n	800bde6 <check_fs+0xb2>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e000      	b.n	800bde8 <check_fs+0xb4>
#endif
	return 2;
 800bde6:	2302      	movs	r3, #2
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	00544146 	.word	0x00544146
 800bdf4:	33544146 	.word	0x33544146
 800bdf8:	080127c8 	.word	0x080127c8

0800bdfc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bdfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be00:	b09c      	sub	sp, #112	@ 0x70
 800be02:	af00      	add	r7, sp, #0
 800be04:	61f8      	str	r0, [r7, #28]
 800be06:	61b9      	str	r1, [r7, #24]
 800be08:	4613      	mov	r3, r2
 800be0a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	2200      	movs	r2, #0
 800be10:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800be12:	69f8      	ldr	r0, [r7, #28]
 800be14:	f7ff ff4a 	bl	800bcac <get_ldnumber>
 800be18:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800be1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	da01      	bge.n	800be24 <find_volume+0x28>
 800be20:	230b      	movs	r3, #11
 800be22:	e339      	b.n	800c498 <find_volume+0x69c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800be24:	4a9d      	ldr	r2, [pc, #628]	@ (800c09c <find_volume+0x2a0>)
 800be26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be2c:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800be2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <find_volume+0x3c>
 800be34:	230c      	movs	r3, #12
 800be36:	e32f      	b.n	800c498 <find_volume+0x69c>

	ENTER_FF(fs);						/* Lock the volume */
 800be38:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800be3a:	f7ff fe51 	bl	800bae0 <lock_fs>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d101      	bne.n	800be48 <find_volume+0x4c>
 800be44:	230f      	movs	r3, #15
 800be46:	e327      	b.n	800c498 <find_volume+0x69c>
	*rfs = fs;							/* Return pointer to the file system object */
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be4c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
 800be50:	f023 0301 	bic.w	r3, r3, #1
 800be54:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800be56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d01a      	beq.n	800be94 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800be5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be60:	785b      	ldrb	r3, [r3, #1]
 800be62:	4618      	mov	r0, r3
 800be64:	f7ff fc7c 	bl	800b760 <disk_status>
 800be68:	4603      	mov	r3, r0
 800be6a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800be6e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800be72:	f003 0301 	and.w	r3, r3, #1
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10c      	bne.n	800be94 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800be7a:	7dfb      	ldrb	r3, [r7, #23]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d007      	beq.n	800be90 <find_volume+0x94>
 800be80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800be84:	f003 0304 	and.w	r3, r3, #4
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d001      	beq.n	800be90 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800be8c:	230a      	movs	r3, #10
 800be8e:	e303      	b.n	800c498 <find_volume+0x69c>
			}
			return FR_OK;				/* The file system object is valid */
 800be90:	2300      	movs	r3, #0
 800be92:	e301      	b.n	800c498 <find_volume+0x69c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800be94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800be9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bea0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bea4:	785b      	ldrb	r3, [r3, #1]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7ff fc74 	bl	800b794 <disk_initialize>
 800beac:	4603      	mov	r3, r0
 800beae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800beb2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800beb6:	f003 0301 	and.w	r3, r3, #1
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bebe:	2303      	movs	r3, #3
 800bec0:	e2ea      	b.n	800c498 <find_volume+0x69c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bec2:	7dfb      	ldrb	r3, [r7, #23]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d007      	beq.n	800bed8 <find_volume+0xdc>
 800bec8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800becc:	f003 0304 	and.w	r3, r3, #4
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800bed4:	230a      	movs	r3, #10
 800bed6:	e2df      	b.n	800c498 <find_volume+0x69c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bed8:	2300      	movs	r3, #0
 800beda:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bedc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bede:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bee0:	f7ff ff28 	bl	800bd34 <check_fs>
 800bee4:	4603      	mov	r3, r0
 800bee6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800beea:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800beee:	2b02      	cmp	r3, #2
 800bef0:	d14d      	bne.n	800bf8e <find_volume+0x192>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bef2:	2300      	movs	r3, #0
 800bef4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bef6:	e020      	b.n	800bf3a <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800befa:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800befe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf00:	011b      	lsls	r3, r3, #4
 800bf02:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bf06:	4413      	add	r3, r2
 800bf08:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bf0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf0c:	3304      	adds	r3, #4
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d006      	beq.n	800bf22 <find_volume+0x126>
 800bf14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf16:	3308      	adds	r3, #8
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff fcbc 	bl	800b896 <ld_dword>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	e000      	b.n	800bf24 <find_volume+0x128>
 800bf22:	2200      	movs	r2, #0
 800bf24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	3360      	adds	r3, #96	@ 0x60
 800bf2a:	f107 0110 	add.w	r1, r7, #16
 800bf2e:	440b      	add	r3, r1
 800bf30:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf36:	3301      	adds	r3, #1
 800bf38:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	d9db      	bls.n	800bef8 <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bf40:	2300      	movs	r3, #0
 800bf42:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800bf44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d002      	beq.n	800bf50 <find_volume+0x154>
 800bf4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bf50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	3360      	adds	r3, #96	@ 0x60
 800bf56:	f107 0210 	add.w	r2, r7, #16
 800bf5a:	4413      	add	r3, r2
 800bf5c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800bf60:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bf62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d005      	beq.n	800bf74 <find_volume+0x178>
 800bf68:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bf6a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bf6c:	f7ff fee2 	bl	800bd34 <check_fs>
 800bf70:	4603      	mov	r3, r0
 800bf72:	e000      	b.n	800bf76 <find_volume+0x17a>
 800bf74:	2303      	movs	r3, #3
 800bf76:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bf7a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d905      	bls.n	800bf8e <find_volume+0x192>
 800bf82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf84:	3301      	adds	r3, #1
 800bf86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf8a:	2b03      	cmp	r3, #3
 800bf8c:	d9e0      	bls.n	800bf50 <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bf8e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bf92:	2b04      	cmp	r3, #4
 800bf94:	d101      	bne.n	800bf9a <find_volume+0x19e>
 800bf96:	2301      	movs	r3, #1
 800bf98:	e27e      	b.n	800c498 <find_volume+0x69c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bf9a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d901      	bls.n	800bfa6 <find_volume+0x1aa>
 800bfa2:	230d      	movs	r3, #13
 800bfa4:	e278      	b.n	800c498 <find_volume+0x69c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800bfa6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	f040 80fa 	bne.w	800c1a4 <find_volume+0x3a8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800bfb0:	230b      	movs	r3, #11
 800bfb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bfb4:	e002      	b.n	800bfbc <find_volume+0x1c0>
 800bfb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfb8:	3301      	adds	r3, #1
 800bfba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bfbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfbe:	2b3f      	cmp	r3, #63	@ 0x3f
 800bfc0:	d806      	bhi.n	800bfd0 <find_volume+0x1d4>
 800bfc2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bfc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfc6:	4413      	add	r3, r2
 800bfc8:	333c      	adds	r3, #60	@ 0x3c
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d0f2      	beq.n	800bfb6 <find_volume+0x1ba>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800bfd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfd2:	2b3f      	cmp	r3, #63	@ 0x3f
 800bfd4:	d801      	bhi.n	800bfda <find_volume+0x1de>
 800bfd6:	230d      	movs	r3, #13
 800bfd8:	e25e      	b.n	800c498 <find_volume+0x69c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800bfda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfdc:	333c      	adds	r3, #60	@ 0x3c
 800bfde:	3368      	adds	r3, #104	@ 0x68
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7ff fc3f 	bl	800b864 <ld_word>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfec:	d001      	beq.n	800bff2 <find_volume+0x1f6>
 800bfee:	230d      	movs	r3, #13
 800bff0:	e252      	b.n	800c498 <find_volume+0x69c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800bff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bff4:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800bff8:	2b09      	cmp	r3, #9
 800bffa:	d001      	beq.n	800c000 <find_volume+0x204>
			return FR_NO_FILESYSTEM;
 800bffc:	230d      	movs	r3, #13
 800bffe:	e24b      	b.n	800c498 <find_volume+0x69c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800c000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c002:	333c      	adds	r3, #60	@ 0x3c
 800c004:	3348      	adds	r3, #72	@ 0x48
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff fc68 	bl	800b8dc <ld_qword>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c012:	2000      	movs	r0, #0
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	68b9      	ldr	r1, [r7, #8]
 800c01a:	1851      	adds	r1, r2, r1
 800c01c:	6039      	str	r1, [r7, #0]
 800c01e:	68f9      	ldr	r1, [r7, #12]
 800c020:	eb43 0101 	adc.w	r1, r3, r1
 800c024:	6079      	str	r1, [r7, #4]
 800c026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c02a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800c02e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800c032:	2b01      	cmp	r3, #1
 800c034:	d301      	bcc.n	800c03a <find_volume+0x23e>
 800c036:	230d      	movs	r3, #13
 800c038:	e22e      	b.n	800c498 <find_volume+0x69c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800c03a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c03c:	333c      	adds	r3, #60	@ 0x3c
 800c03e:	3354      	adds	r3, #84	@ 0x54
 800c040:	4618      	mov	r0, r3
 800c042:	f7ff fc28 	bl	800b896 <ld_dword>
 800c046:	4602      	mov	r2, r0
 800c048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c04a:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800c04c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c04e:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800c052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c054:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800c056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c058:	789b      	ldrb	r3, [r3, #2]
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d001      	beq.n	800c062 <find_volume+0x266>
 800c05e:	230d      	movs	r3, #13
 800c060:	e21a      	b.n	800c498 <find_volume+0x69c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800c062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c064:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c068:	461a      	mov	r2, r3
 800c06a:	2301      	movs	r3, #1
 800c06c:	4093      	lsls	r3, r2
 800c06e:	b29a      	uxth	r2, r3
 800c070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c072:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800c074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c076:	895b      	ldrh	r3, [r3, #10]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d101      	bne.n	800c080 <find_volume+0x284>
 800c07c:	230d      	movs	r3, #13
 800c07e:	e20b      	b.n	800c498 <find_volume+0x69c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800c080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c082:	333c      	adds	r3, #60	@ 0x3c
 800c084:	335c      	adds	r3, #92	@ 0x5c
 800c086:	4618      	mov	r0, r3
 800c088:	f7ff fc05 	bl	800b896 <ld_dword>
 800c08c:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800c08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c090:	4a03      	ldr	r2, [pc, #12]	@ (800c0a0 <find_volume+0x2a4>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d906      	bls.n	800c0a4 <find_volume+0x2a8>
 800c096:	230d      	movs	r3, #13
 800c098:	e1fe      	b.n	800c498 <find_volume+0x69c>
 800c09a:	bf00      	nop
 800c09c:	20001164 	.word	0x20001164
 800c0a0:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800c0a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0a6:	1c9a      	adds	r2, r3, #2
 800c0a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0aa:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800c0ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c0b0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800c0b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0b4:	333c      	adds	r3, #60	@ 0x3c
 800c0b6:	3358      	adds	r3, #88	@ 0x58
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff fbec 	bl	800b896 <ld_dword>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0c2:	441a      	add	r2, r3
 800c0c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0c6:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800c0c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ca:	333c      	adds	r3, #60	@ 0x3c
 800c0cc:	3350      	adds	r3, #80	@ 0x50
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7ff fbe1 	bl	800b896 <ld_dword>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0d8:	441a      	add	r2, r3
 800c0da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0dc:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800c0de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	469a      	mov	sl, r3
 800c0e6:	4693      	mov	fp, r2
 800c0e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ea:	895b      	ldrh	r3, [r3, #10]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0f0:	fb02 f303 	mul.w	r3, r2, r3
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	4698      	mov	r8, r3
 800c0f8:	4691      	mov	r9, r2
 800c0fa:	eb1a 0408 	adds.w	r4, sl, r8
 800c0fe:	eb4b 0509 	adc.w	r5, fp, r9
 800c102:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800c106:	42a2      	cmp	r2, r4
 800c108:	41ab      	sbcs	r3, r5
 800c10a:	d201      	bcs.n	800c110 <find_volume+0x314>
 800c10c:	230d      	movs	r3, #13
 800c10e:	e1c3      	b.n	800c498 <find_volume+0x69c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800c110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c112:	333c      	adds	r3, #60	@ 0x3c
 800c114:	3360      	adds	r3, #96	@ 0x60
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff fbbd 	bl	800b896 <ld_dword>
 800c11c:	4602      	mov	r2, r0
 800c11e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c120:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800c122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c126:	4619      	mov	r1, r3
 800c128:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c12a:	f7ff fda0 	bl	800bc6e <clust2sect>
 800c12e:	4603      	mov	r3, r0
 800c130:	4619      	mov	r1, r3
 800c132:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c134:	f7ff fd6e 	bl	800bc14 <move_window>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <find_volume+0x346>
 800c13e:	2301      	movs	r3, #1
 800c140:	e1aa      	b.n	800c498 <find_volume+0x69c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c142:	2300      	movs	r3, #0
 800c144:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c146:	e015      	b.n	800c174 <find_volume+0x378>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c148:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c14a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c14c:	4413      	add	r3, r2
 800c14e:	333c      	adds	r3, #60	@ 0x3c
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	2b81      	cmp	r3, #129	@ 0x81
 800c154:	d10b      	bne.n	800c16e <find_volume+0x372>
 800c156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c158:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800c15c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c15e:	3314      	adds	r3, #20
 800c160:	4413      	add	r3, r2
 800c162:	4618      	mov	r0, r3
 800c164:	f7ff fb97 	bl	800b896 <ld_dword>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d007      	beq.n	800c17e <find_volume+0x382>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c16e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c170:	3320      	adds	r3, #32
 800c172:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c174:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c17a:	d3e5      	bcc.n	800c148 <find_volume+0x34c>
 800c17c:	e000      	b.n	800c180 <find_volume+0x384>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c17e:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800c180:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c186:	d101      	bne.n	800c18c <find_volume+0x390>
 800c188:	230d      	movs	r3, #13
 800c18a:	e185      	b.n	800c498 <find_volume+0x69c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c18c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c18e:	f04f 32ff 	mov.w	r2, #4294967295
 800c192:	61da      	str	r2, [r3, #28]
 800c194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c196:	69da      	ldr	r2, [r3, #28]
 800c198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c19a:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800c19c:	2304      	movs	r3, #4
 800c19e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800c1a2:	e167      	b.n	800c474 <find_volume+0x678>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c1a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1a6:	333c      	adds	r3, #60	@ 0x3c
 800c1a8:	330b      	adds	r3, #11
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7ff fb5a 	bl	800b864 <ld_word>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1b6:	d001      	beq.n	800c1bc <find_volume+0x3c0>
 800c1b8:	230d      	movs	r3, #13
 800c1ba:	e16d      	b.n	800c498 <find_volume+0x69c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c1bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1be:	333c      	adds	r3, #60	@ 0x3c
 800c1c0:	3316      	adds	r3, #22
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7ff fb4e 	bl	800b864 <ld_word>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c1cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d106      	bne.n	800c1e0 <find_volume+0x3e4>
 800c1d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1d4:	333c      	adds	r3, #60	@ 0x3c
 800c1d6:	3324      	adds	r3, #36	@ 0x24
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7ff fb5c 	bl	800b896 <ld_dword>
 800c1de:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800c1e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c1e4:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c1e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1e8:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800c1ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c1f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f2:	789b      	ldrb	r3, [r3, #2]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d005      	beq.n	800c204 <find_volume+0x408>
 800c1f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1fa:	789b      	ldrb	r3, [r3, #2]
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d001      	beq.n	800c204 <find_volume+0x408>
 800c200:	230d      	movs	r3, #13
 800c202:	e149      	b.n	800c498 <find_volume+0x69c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c206:	789b      	ldrb	r3, [r3, #2]
 800c208:	461a      	mov	r2, r3
 800c20a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c20c:	fb02 f303 	mul.w	r3, r2, r3
 800c210:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c214:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800c218:	461a      	mov	r2, r3
 800c21a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c21c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c21e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c220:	895b      	ldrh	r3, [r3, #10]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d008      	beq.n	800c238 <find_volume+0x43c>
 800c226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c228:	895b      	ldrh	r3, [r3, #10]
 800c22a:	461a      	mov	r2, r3
 800c22c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c22e:	895b      	ldrh	r3, [r3, #10]
 800c230:	3b01      	subs	r3, #1
 800c232:	4013      	ands	r3, r2
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <find_volume+0x440>
 800c238:	230d      	movs	r3, #13
 800c23a:	e12d      	b.n	800c498 <find_volume+0x69c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c23c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c23e:	333c      	adds	r3, #60	@ 0x3c
 800c240:	3311      	adds	r3, #17
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff fb0e 	bl	800b864 <ld_word>
 800c248:	4603      	mov	r3, r0
 800c24a:	461a      	mov	r2, r3
 800c24c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c24e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c252:	891b      	ldrh	r3, [r3, #8]
 800c254:	f003 030f 	and.w	r3, r3, #15
 800c258:	b29b      	uxth	r3, r3
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d001      	beq.n	800c262 <find_volume+0x466>
 800c25e:	230d      	movs	r3, #13
 800c260:	e11a      	b.n	800c498 <find_volume+0x69c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c264:	333c      	adds	r3, #60	@ 0x3c
 800c266:	3313      	adds	r3, #19
 800c268:	4618      	mov	r0, r3
 800c26a:	f7ff fafb 	bl	800b864 <ld_word>
 800c26e:	4603      	mov	r3, r0
 800c270:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c274:	2b00      	cmp	r3, #0
 800c276:	d106      	bne.n	800c286 <find_volume+0x48a>
 800c278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c27a:	333c      	adds	r3, #60	@ 0x3c
 800c27c:	3320      	adds	r3, #32
 800c27e:	4618      	mov	r0, r3
 800c280:	f7ff fb09 	bl	800b896 <ld_dword>
 800c284:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c288:	333c      	adds	r3, #60	@ 0x3c
 800c28a:	330e      	adds	r3, #14
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff fae9 	bl	800b864 <ld_word>
 800c292:	4603      	mov	r3, r0
 800c294:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c298:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d101      	bne.n	800c2a4 <find_volume+0x4a8>
 800c2a0:	230d      	movs	r3, #13
 800c2a2:	e0f9      	b.n	800c498 <find_volume+0x69c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c2a4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c2a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c2aa:	4413      	add	r3, r2
 800c2ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2ae:	8912      	ldrh	r2, [r2, #8]
 800c2b0:	0912      	lsrs	r2, r2, #4
 800c2b2:	b292      	uxth	r2, r2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c2b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c2ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d201      	bcs.n	800c2c4 <find_volume+0x4c8>
 800c2c0:	230d      	movs	r3, #13
 800c2c2:	e0e9      	b.n	800c498 <find_volume+0x69c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c2c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c2c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2c8:	1ad3      	subs	r3, r2, r3
 800c2ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2cc:	8952      	ldrh	r2, [r2, #10]
 800c2ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <find_volume+0x4e2>
 800c2da:	230d      	movs	r3, #13
 800c2dc:	e0dc      	b.n	800c498 <find_volume+0x69c>
		fmt = FS_FAT32;
 800c2de:	2303      	movs	r3, #3
 800c2e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c2e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2e6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d802      	bhi.n	800c2f4 <find_volume+0x4f8>
 800c2ee:	2302      	movs	r3, #2
 800c2f0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c2f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2f6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d802      	bhi.n	800c304 <find_volume+0x508>
 800c2fe:	2301      	movs	r3, #1
 800c300:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c306:	1c9a      	adds	r2, r3, #2
 800c308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c30a:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800c30c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c30e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c310:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c312:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c316:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c318:	441a      	add	r2, r3
 800c31a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c31c:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800c31e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c322:	441a      	add	r2, r3
 800c324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c326:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800c328:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c32c:	2b03      	cmp	r3, #3
 800c32e:	d11e      	bne.n	800c36e <find_volume+0x572>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c332:	333c      	adds	r3, #60	@ 0x3c
 800c334:	332a      	adds	r3, #42	@ 0x2a
 800c336:	4618      	mov	r0, r3
 800c338:	f7ff fa94 	bl	800b864 <ld_word>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <find_volume+0x54a>
 800c342:	230d      	movs	r3, #13
 800c344:	e0a8      	b.n	800c498 <find_volume+0x69c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c348:	891b      	ldrh	r3, [r3, #8]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <find_volume+0x556>
 800c34e:	230d      	movs	r3, #13
 800c350:	e0a2      	b.n	800c498 <find_volume+0x69c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c354:	333c      	adds	r3, #60	@ 0x3c
 800c356:	332c      	adds	r3, #44	@ 0x2c
 800c358:	4618      	mov	r0, r3
 800c35a:	f7ff fa9c 	bl	800b896 <ld_dword>
 800c35e:	4602      	mov	r2, r0
 800c360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c362:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c366:	6a1b      	ldr	r3, [r3, #32]
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c36c:	e01f      	b.n	800c3ae <find_volume+0x5b2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c36e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c370:	891b      	ldrh	r3, [r3, #8]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <find_volume+0x57e>
 800c376:	230d      	movs	r3, #13
 800c378:	e08e      	b.n	800c498 <find_volume+0x69c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c37a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c37e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c380:	441a      	add	r2, r3
 800c382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c384:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c386:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c38a:	2b02      	cmp	r3, #2
 800c38c:	d103      	bne.n	800c396 <find_volume+0x59a>
 800c38e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c390:	6a1b      	ldr	r3, [r3, #32]
 800c392:	005b      	lsls	r3, r3, #1
 800c394:	e00a      	b.n	800c3ac <find_volume+0x5b0>
 800c396:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c398:	6a1a      	ldr	r2, [r3, #32]
 800c39a:	4613      	mov	r3, r2
 800c39c:	005b      	lsls	r3, r3, #1
 800c39e:	4413      	add	r3, r2
 800c3a0:	085a      	lsrs	r2, r3, #1
 800c3a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c3ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c3ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3b4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c3b8:	0a5b      	lsrs	r3, r3, #9
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d201      	bcs.n	800c3c2 <find_volume+0x5c6>
 800c3be:	230d      	movs	r3, #13
 800c3c0:	e06a      	b.n	800c498 <find_volume+0x69c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c3c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3c8:	61da      	str	r2, [r3, #28]
 800c3ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3cc:	69da      	ldr	r2, [r3, #28]
 800c3ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3d0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800c3d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3d4:	2280      	movs	r2, #128	@ 0x80
 800c3d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c3d8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c3dc:	2b03      	cmp	r3, #3
 800c3de:	d149      	bne.n	800c474 <find_volume+0x678>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c3e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3e2:	333c      	adds	r3, #60	@ 0x3c
 800c3e4:	3330      	adds	r3, #48	@ 0x30
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff fa3c 	bl	800b864 <ld_word>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d140      	bne.n	800c474 <find_volume+0x678>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c3f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c3fa:	f7ff fc0b 	bl	800bc14 <move_window>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d137      	bne.n	800c474 <find_volume+0x678>
		{
			fs->fsi_flag = 0;
 800c404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c406:	2200      	movs	r2, #0
 800c408:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c40a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c40c:	333c      	adds	r3, #60	@ 0x3c
 800c40e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff fa26 	bl	800b864 <ld_word>
 800c418:	4603      	mov	r3, r0
 800c41a:	461a      	mov	r2, r3
 800c41c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c420:	429a      	cmp	r2, r3
 800c422:	d127      	bne.n	800c474 <find_volume+0x678>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c426:	333c      	adds	r3, #60	@ 0x3c
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff fa34 	bl	800b896 <ld_dword>
 800c42e:	4603      	mov	r3, r0
 800c430:	4a1c      	ldr	r2, [pc, #112]	@ (800c4a4 <find_volume+0x6a8>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d11e      	bne.n	800c474 <find_volume+0x678>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c438:	333c      	adds	r3, #60	@ 0x3c
 800c43a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c43e:	4618      	mov	r0, r3
 800c440:	f7ff fa29 	bl	800b896 <ld_dword>
 800c444:	4603      	mov	r3, r0
 800c446:	4a18      	ldr	r2, [pc, #96]	@ (800c4a8 <find_volume+0x6ac>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d113      	bne.n	800c474 <find_volume+0x678>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c44c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c44e:	333c      	adds	r3, #60	@ 0x3c
 800c450:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff fa1e 	bl	800b896 <ld_dword>
 800c45a:	4602      	mov	r2, r0
 800c45c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c45e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c462:	333c      	adds	r3, #60	@ 0x3c
 800c464:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c468:	4618      	mov	r0, r3
 800c46a:	f7ff fa14 	bl	800b896 <ld_dword>
 800c46e:	4602      	mov	r2, r0
 800c470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c472:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c476:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800c47a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c47c:	4b0b      	ldr	r3, [pc, #44]	@ (800c4ac <find_volume+0x6b0>)
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	3301      	adds	r3, #1
 800c482:	b29a      	uxth	r2, r3
 800c484:	4b09      	ldr	r3, [pc, #36]	@ (800c4ac <find_volume+0x6b0>)
 800c486:	801a      	strh	r2, [r3, #0]
 800c488:	4b08      	ldr	r3, [pc, #32]	@ (800c4ac <find_volume+0x6b0>)
 800c48a:	881a      	ldrh	r2, [r3, #0]
 800c48c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c48e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c490:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c492:	f7ff fb57 	bl	800bb44 <clear_lock>
#endif
	return FR_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3770      	adds	r7, #112	@ 0x70
 800c49c:	46bd      	mov	sp, r7
 800c49e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4a2:	bf00      	nop
 800c4a4:	41615252 	.word	0x41615252
 800c4a8:	61417272 	.word	0x61417272
 800c4ac:	20001168 	.word	0x20001168

0800c4b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b088      	sub	sp, #32
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c4c2:	f107 0310 	add.w	r3, r7, #16
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7ff fbf0 	bl	800bcac <get_ldnumber>
 800c4cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	da01      	bge.n	800c4d8 <f_mount+0x28>
 800c4d4:	230b      	movs	r3, #11
 800c4d6:	e048      	b.n	800c56a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c4d8:	4a26      	ldr	r2, [pc, #152]	@ (800c574 <f_mount+0xc4>)
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00f      	beq.n	800c508 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c4e8:	69b8      	ldr	r0, [r7, #24]
 800c4ea:	f7ff fb2b 	bl	800bb44 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	695b      	ldr	r3, [r3, #20]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 f8ba 	bl	800c66c <ff_del_syncobj>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d101      	bne.n	800c502 <f_mount+0x52>
 800c4fe:	2302      	movs	r3, #2
 800c500:	e033      	b.n	800c56a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	2200      	movs	r2, #0
 800c506:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00f      	beq.n	800c52e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	b2da      	uxtb	r2, r3
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	3314      	adds	r3, #20
 800c51c:	4619      	mov	r1, r3
 800c51e:	4610      	mov	r0, r2
 800c520:	f000 f885 	bl	800c62e <ff_cre_syncobj>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <f_mount+0x7e>
 800c52a:	2302      	movs	r3, #2
 800c52c:	e01d      	b.n	800c56a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	4910      	ldr	r1, [pc, #64]	@ (800c574 <f_mount+0xc4>)
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d002      	beq.n	800c544 <f_mount+0x94>
 800c53e:	79fb      	ldrb	r3, [r7, #7]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d001      	beq.n	800c548 <f_mount+0x98>
 800c544:	2300      	movs	r3, #0
 800c546:	e010      	b.n	800c56a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c548:	f107 010c 	add.w	r1, r7, #12
 800c54c:	f107 0308 	add.w	r3, r7, #8
 800c550:	2200      	movs	r2, #0
 800c552:	4618      	mov	r0, r3
 800c554:	f7ff fc52 	bl	800bdfc <find_volume>
 800c558:	4603      	mov	r3, r0
 800c55a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	7dfa      	ldrb	r2, [r7, #23]
 800c560:	4611      	mov	r1, r2
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff fad2 	bl	800bb0c <unlock_fs>
 800c568:	7dfb      	ldrb	r3, [r7, #23]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3720      	adds	r7, #32
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	20001164 	.word	0x20001164

0800c578 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c578:	b480      	push	{r7}
 800c57a:	b087      	sub	sp, #28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	4613      	mov	r3, r2
 800c584:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c586:	2301      	movs	r3, #1
 800c588:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c58e:	4b1f      	ldr	r3, [pc, #124]	@ (800c60c <FATFS_LinkDriverEx+0x94>)
 800c590:	7a5b      	ldrb	r3, [r3, #9]
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	d131      	bne.n	800c5fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c598:	4b1c      	ldr	r3, [pc, #112]	@ (800c60c <FATFS_LinkDriverEx+0x94>)
 800c59a:	7a5b      	ldrb	r3, [r3, #9]
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	461a      	mov	r2, r3
 800c5a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c5a6:	4b19      	ldr	r3, [pc, #100]	@ (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5a8:	7a5b      	ldrb	r3, [r3, #9]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	4a17      	ldr	r2, [pc, #92]	@ (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c5b6:	4b15      	ldr	r3, [pc, #84]	@ (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5b8:	7a5b      	ldrb	r3, [r3, #9]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	461a      	mov	r2, r3
 800c5be:	4b13      	ldr	r3, [pc, #76]	@ (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5c0:	4413      	add	r3, r2
 800c5c2:	79fa      	ldrb	r2, [r7, #7]
 800c5c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c5c6:	4b11      	ldr	r3, [pc, #68]	@ (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5c8:	7a5b      	ldrb	r3, [r3, #9]
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	1c5a      	adds	r2, r3, #1
 800c5ce:	b2d1      	uxtb	r1, r2
 800c5d0:	4a0e      	ldr	r2, [pc, #56]	@ (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5d2:	7251      	strb	r1, [r2, #9]
 800c5d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c5d6:	7dbb      	ldrb	r3, [r7, #22]
 800c5d8:	3330      	adds	r3, #48	@ 0x30
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	223a      	movs	r2, #58	@ 0x3a
 800c5e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	3302      	adds	r3, #2
 800c5ec:	222f      	movs	r2, #47	@ 0x2f
 800c5ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	3303      	adds	r3, #3
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	371c      	adds	r7, #28
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	2000118c 	.word	0x2000118c

0800c610 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c61a:	2200      	movs	r2, #0
 800c61c:	6839      	ldr	r1, [r7, #0]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7ff ffaa 	bl	800c578 <FATFS_LinkDriverEx>
 800c624:	4603      	mov	r3, r0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b086      	sub	sp, #24
 800c632:	af00      	add	r7, sp, #0
 800c634:	4603      	mov	r3, r0
 800c636:	6039      	str	r1, [r7, #0]
 800c638:	71fb      	strb	r3, [r7, #7]

    int ret;
#if _USE_MUTEX

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
 800c63a:	2300      	movs	r3, #0
 800c63c:	60fb      	str	r3, [r7, #12]
 800c63e:	2300      	movs	r3, #0
 800c640:	613b      	str	r3, [r7, #16]
    *sobj = osMutexCreate(osMutex(MTX));
 800c642:	f107 030c 	add.w	r3, r7, #12
 800c646:	4618      	mov	r0, r3
 800c648:	f000 f8e9 	bl	800c81e <osMutexCreate>
 800c64c:	4602      	mov	r2, r0
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	bf14      	ite	ne
 800c65a:	2301      	movne	r3, #1
 800c65c:	2300      	moveq	r3, #0
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	617b      	str	r3, [r7, #20]

    return ret;
 800c662:	697b      	ldr	r3, [r7, #20]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3718      	adds	r7, #24
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f96f 	bl	800c958 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800c67a:	2301      	movs	r3, #1
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
 800c690:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 f8db 	bl	800c850 <osMutexWait>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d101      	bne.n	800c6a4 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b082      	sub	sp, #8
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f918 	bl	800c8ec <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800c6bc:	bf00      	nop
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c6d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6d6:	2b84      	cmp	r3, #132	@ 0x84
 800c6d8:	d005      	beq.n	800c6e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c6da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	3303      	adds	r3, #3
 800c6e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6fa:	f3ef 8305 	mrs	r3, IPSR
 800c6fe:	607b      	str	r3, [r7, #4]
  return(result);
 800c700:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c702:	2b00      	cmp	r3, #0
 800c704:	bf14      	ite	ne
 800c706:	2301      	movne	r3, #1
 800c708:	2300      	moveq	r3, #0
 800c70a:	b2db      	uxtb	r3, r3
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c71c:	f001 fc4e 	bl	800dfbc <vTaskStartScheduler>
  
  return osOK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	bd80      	pop	{r7, pc}

0800c726 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c72a:	f002 f893 	bl	800e854 <xTaskGetSchedulerState>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b01      	cmp	r3, #1
 800c732:	d101      	bne.n	800c738 <osKernelRunning+0x12>
    return 0;
 800c734:	2300      	movs	r3, #0
 800c736:	e000      	b.n	800c73a <osKernelRunning+0x14>
  else
    return 1;
 800c738:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c742:	f7ff ffd7 	bl	800c6f4 <inHandlerMode>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d003      	beq.n	800c754 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c74c:	f001 fd5c 	bl	800e208 <xTaskGetTickCountFromISR>
 800c750:	4603      	mov	r3, r0
 800c752:	e002      	b.n	800c75a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c754:	f001 fd48 	bl	800e1e8 <xTaskGetTickCount>
 800c758:	4603      	mov	r3, r0
  }
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c75e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c760:	b089      	sub	sp, #36	@ 0x24
 800c762:	af04      	add	r7, sp, #16
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	695b      	ldr	r3, [r3, #20]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d020      	beq.n	800c7b2 <osThreadCreate+0x54>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	699b      	ldr	r3, [r3, #24]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d01c      	beq.n	800c7b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	685c      	ldr	r4, [r3, #4]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	691e      	ldr	r6, [r3, #16]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7ff ff9a 	bl	800c6c4 <makeFreeRtosPriority>
 800c790:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c79a:	9202      	str	r2, [sp, #8]
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	9100      	str	r1, [sp, #0]
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	4632      	mov	r2, r6
 800c7a4:	4629      	mov	r1, r5
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f001 fa22 	bl	800dbf0 <xTaskCreateStatic>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	60fb      	str	r3, [r7, #12]
 800c7b0:	e01c      	b.n	800c7ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	685c      	ldr	r4, [r3, #4]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7be:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7ff ff7c 	bl	800c6c4 <makeFreeRtosPriority>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	f107 030c 	add.w	r3, r7, #12
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	9200      	str	r2, [sp, #0]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	4632      	mov	r2, r6
 800c7da:	4629      	mov	r1, r5
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f001 fa67 	bl	800dcb0 <xTaskCreate>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d001      	beq.n	800c7ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	e000      	b.n	800c7ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3714      	adds	r7, #20
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b084      	sub	sp, #16
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d001      	beq.n	800c80c <osDelay+0x16>
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	e000      	b.n	800c80e <osDelay+0x18>
 800c80c:	2301      	movs	r3, #1
 800c80e:	4618      	mov	r0, r3
 800c810:	f001 fb9e 	bl	800df50 <vTaskDelay>
  
  return osOK;
 800c814:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c816:	4618      	mov	r0, r3
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c81e:	b580      	push	{r7, lr}
 800c820:	b082      	sub	sp, #8
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d007      	beq.n	800c83e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	4619      	mov	r1, r3
 800c834:	2001      	movs	r0, #1
 800c836:	f000 fba6 	bl	800cf86 <xQueueCreateMutexStatic>
 800c83a:	4603      	mov	r3, r0
 800c83c:	e003      	b.n	800c846 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c83e:	2001      	movs	r0, #1
 800c840:	f000 fb89 	bl	800cf56 <xQueueCreateMutex>
 800c844:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c846:	4618      	mov	r0, r3
 800c848:	3708      	adds	r7, #8
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
	...

0800c850 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c85a:	2300      	movs	r3, #0
 800c85c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d101      	bne.n	800c868 <osMutexWait+0x18>
    return osErrorParameter;
 800c864:	2380      	movs	r3, #128	@ 0x80
 800c866:	e03a      	b.n	800c8de <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800c868:	2300      	movs	r3, #0
 800c86a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c872:	d103      	bne.n	800c87c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800c874:	f04f 33ff 	mov.w	r3, #4294967295
 800c878:	60fb      	str	r3, [r7, #12]
 800c87a:	e009      	b.n	800c890 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d006      	beq.n	800c890 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d101      	bne.n	800c890 <osMutexWait+0x40>
      ticks = 1;
 800c88c:	2301      	movs	r3, #1
 800c88e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c890:	f7ff ff30 	bl	800c6f4 <inHandlerMode>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d017      	beq.n	800c8ca <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c89a:	f107 0308 	add.w	r3, r7, #8
 800c89e:	461a      	mov	r2, r3
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 ffac 	bl	800d800 <xQueueReceiveFromISR>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d001      	beq.n	800c8b2 <osMutexWait+0x62>
      return osErrorOS;
 800c8ae:	23ff      	movs	r3, #255	@ 0xff
 800c8b0:	e015      	b.n	800c8de <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d011      	beq.n	800c8dc <osMutexWait+0x8c>
 800c8b8:	4b0b      	ldr	r3, [pc, #44]	@ (800c8e8 <osMutexWait+0x98>)
 800c8ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8be:	601a      	str	r2, [r3, #0]
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	f3bf 8f6f 	isb	sy
 800c8c8:	e008      	b.n	800c8dc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800c8ca:	68f9      	ldr	r1, [r7, #12]
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 fe87 	bl	800d5e0 <xQueueSemaphoreTake>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d001      	beq.n	800c8dc <osMutexWait+0x8c>
    return osErrorOS;
 800c8d8:	23ff      	movs	r3, #255	@ 0xff
 800c8da:	e000      	b.n	800c8de <osMutexWait+0x8e>
  }
  
  return osOK;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3710      	adds	r7, #16
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	e000ed04 	.word	0xe000ed04

0800c8ec <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800c8fc:	f7ff fefa 	bl	800c6f4 <inHandlerMode>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d016      	beq.n	800c934 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c906:	f107 0308 	add.w	r3, r7, #8
 800c90a:	4619      	mov	r1, r3
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fcf5 	bl	800d2fc <xQueueGiveFromISR>
 800c912:	4603      	mov	r3, r0
 800c914:	2b01      	cmp	r3, #1
 800c916:	d001      	beq.n	800c91c <osMutexRelease+0x30>
      return osErrorOS;
 800c918:	23ff      	movs	r3, #255	@ 0xff
 800c91a:	e017      	b.n	800c94c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d013      	beq.n	800c94a <osMutexRelease+0x5e>
 800c922:	4b0c      	ldr	r3, [pc, #48]	@ (800c954 <osMutexRelease+0x68>)
 800c924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c928:	601a      	str	r2, [r3, #0]
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	f3bf 8f6f 	isb	sy
 800c932:	e00a      	b.n	800c94a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800c934:	2300      	movs	r3, #0
 800c936:	2200      	movs	r2, #0
 800c938:	2100      	movs	r1, #0
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 fb3e 	bl	800cfbc <xQueueGenericSend>
 800c940:	4603      	mov	r3, r0
 800c942:	2b01      	cmp	r3, #1
 800c944:	d001      	beq.n	800c94a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800c946:	23ff      	movs	r3, #255	@ 0xff
 800c948:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800c94a:	68fb      	ldr	r3, [r7, #12]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	e000ed04 	.word	0xe000ed04

0800c958 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c960:	f7ff fec8 	bl	800c6f4 <inHandlerMode>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d001      	beq.n	800c96e <osMutexDelete+0x16>
    return osErrorISR;
 800c96a:	2382      	movs	r3, #130	@ 0x82
 800c96c:	e003      	b.n	800c976 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 ffc8 	bl	800d904 <vQueueDelete>

  return osOK;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c97e:	b590      	push	{r4, r7, lr}
 800c980:	b085      	sub	sp, #20
 800c982:	af02      	add	r7, sp, #8
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d011      	beq.n	800c9b4 <osMessageCreate+0x36>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00d      	beq.n	800c9b4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6818      	ldr	r0, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6859      	ldr	r1, [r3, #4]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	689a      	ldr	r2, [r3, #8]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	2400      	movs	r4, #0
 800c9aa:	9400      	str	r4, [sp, #0]
 800c9ac:	f000 f9e2 	bl	800cd74 <xQueueGenericCreateStatic>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	e008      	b.n	800c9c6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6818      	ldr	r0, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	4619      	mov	r1, r3
 800c9c0:	f000 fa55 	bl	800ce6e <xQueueGenericCreate>
 800c9c4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd90      	pop	{r4, r7, pc}
	...

0800c9d0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d101      	bne.n	800c9ee <osMessagePut+0x1e>
    ticks = 1;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c9ee:	f7ff fe81 	bl	800c6f4 <inHandlerMode>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d018      	beq.n	800ca2a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c9f8:	f107 0210 	add.w	r2, r7, #16
 800c9fc:	f107 0108 	add.w	r1, r7, #8
 800ca00:	2300      	movs	r3, #0
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f000 fbdc 	bl	800d1c0 <xQueueGenericSendFromISR>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d001      	beq.n	800ca12 <osMessagePut+0x42>
      return osErrorOS;
 800ca0e:	23ff      	movs	r3, #255	@ 0xff
 800ca10:	e018      	b.n	800ca44 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d014      	beq.n	800ca42 <osMessagePut+0x72>
 800ca18:	4b0c      	ldr	r3, [pc, #48]	@ (800ca4c <osMessagePut+0x7c>)
 800ca1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca1e:	601a      	str	r2, [r3, #0]
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	e00b      	b.n	800ca42 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ca2a:	f107 0108 	add.w	r1, r7, #8
 800ca2e:	2300      	movs	r3, #0
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	68f8      	ldr	r0, [r7, #12]
 800ca34:	f000 fac2 	bl	800cfbc <xQueueGenericSend>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d001      	beq.n	800ca42 <osMessagePut+0x72>
      return osErrorOS;
 800ca3e:	23ff      	movs	r3, #255	@ 0xff
 800ca40:	e000      	b.n	800ca44 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ca42:	2300      	movs	r3, #0
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	e000ed04 	.word	0xe000ed04

0800ca50 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ca50:	b590      	push	{r4, r7, lr}
 800ca52:	b08b      	sub	sp, #44	@ 0x2c
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10a      	bne.n	800ca80 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ca6a:	2380      	movs	r3, #128	@ 0x80
 800ca6c:	617b      	str	r3, [r7, #20]
    return event;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	461c      	mov	r4, r3
 800ca72:	f107 0314 	add.w	r3, r7, #20
 800ca76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ca7e:	e054      	b.n	800cb2a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ca80:	2300      	movs	r3, #0
 800ca82:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8e:	d103      	bne.n	800ca98 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ca90:	f04f 33ff 	mov.w	r3, #4294967295
 800ca94:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca96:	e009      	b.n	800caac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d006      	beq.n	800caac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800caa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d101      	bne.n	800caac <osMessageGet+0x5c>
      ticks = 1;
 800caa8:	2301      	movs	r3, #1
 800caaa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800caac:	f7ff fe22 	bl	800c6f4 <inHandlerMode>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d01c      	beq.n	800caf0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cab6:	f107 0220 	add.w	r2, r7, #32
 800caba:	f107 0314 	add.w	r3, r7, #20
 800cabe:	3304      	adds	r3, #4
 800cac0:	4619      	mov	r1, r3
 800cac2:	68b8      	ldr	r0, [r7, #8]
 800cac4:	f000 fe9c 	bl	800d800 <xQueueReceiveFromISR>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d102      	bne.n	800cad4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cace:	2310      	movs	r3, #16
 800cad0:	617b      	str	r3, [r7, #20]
 800cad2:	e001      	b.n	800cad8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cad4:	2300      	movs	r3, #0
 800cad6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cad8:	6a3b      	ldr	r3, [r7, #32]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d01d      	beq.n	800cb1a <osMessageGet+0xca>
 800cade:	4b15      	ldr	r3, [pc, #84]	@ (800cb34 <osMessageGet+0xe4>)
 800cae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cae4:	601a      	str	r2, [r3, #0]
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	e014      	b.n	800cb1a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800caf0:	f107 0314 	add.w	r3, r7, #20
 800caf4:	3304      	adds	r3, #4
 800caf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caf8:	4619      	mov	r1, r3
 800cafa:	68b8      	ldr	r0, [r7, #8]
 800cafc:	f000 fc8e 	bl	800d41c <xQueueReceive>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d102      	bne.n	800cb0c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cb06:	2310      	movs	r3, #16
 800cb08:	617b      	str	r3, [r7, #20]
 800cb0a:	e006      	b.n	800cb1a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d101      	bne.n	800cb16 <osMessageGet+0xc6>
 800cb12:	2300      	movs	r3, #0
 800cb14:	e000      	b.n	800cb18 <osMessageGet+0xc8>
 800cb16:	2340      	movs	r3, #64	@ 0x40
 800cb18:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	461c      	mov	r4, r3
 800cb1e:	f107 0314 	add.w	r3, r7, #20
 800cb22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	372c      	adds	r7, #44	@ 0x2c
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd90      	pop	{r4, r7, pc}
 800cb32:	bf00      	nop
 800cb34:	e000ed04 	.word	0xe000ed04

0800cb38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f103 0208 	add.w	r2, r3, #8
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f103 0208 	add.w	r2, r3, #8
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f103 0208 	add.w	r2, r3, #8
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb86:	bf00      	nop
 800cb88:	370c      	adds	r7, #12
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb92:	b480      	push	{r7}
 800cb94:	b085      	sub	sp, #20
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
 800cb9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	689a      	ldr	r2, [r3, #8]
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	683a      	ldr	r2, [r7, #0]
 800cbb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	683a      	ldr	r2, [r7, #0]
 800cbbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	601a      	str	r2, [r3, #0]
}
 800cbce:	bf00      	nop
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr

0800cbda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cbda:	b480      	push	{r7}
 800cbdc:	b085      	sub	sp, #20
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
 800cbe2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf0:	d103      	bne.n	800cbfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	60fb      	str	r3, [r7, #12]
 800cbf8:	e00c      	b.n	800cc14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	3308      	adds	r3, #8
 800cbfe:	60fb      	str	r3, [r7, #12]
 800cc00:	e002      	b.n	800cc08 <vListInsert+0x2e>
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	60fb      	str	r3, [r7, #12]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d2f6      	bcs.n	800cc02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	683a      	ldr	r2, [r7, #0]
 800cc2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	1c5a      	adds	r2, r3, #1
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	601a      	str	r2, [r3, #0]
}
 800cc40:	bf00      	nop
 800cc42:	3714      	adds	r7, #20
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b085      	sub	sp, #20
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	6892      	ldr	r2, [r2, #8]
 800cc62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	6852      	ldr	r2, [r2, #4]
 800cc6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d103      	bne.n	800cc80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	689a      	ldr	r2, [r3, #8]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	1e5a      	subs	r2, r3, #1
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d10b      	bne.n	800cccc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ccb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ccc6:	bf00      	nop
 800ccc8:	bf00      	nop
 800ccca:	e7fd      	b.n	800ccc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cccc:	f002 f91c 	bl	800ef08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccd8:	68f9      	ldr	r1, [r7, #12]
 800ccda:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ccdc:	fb01 f303 	mul.w	r3, r1, r3
 800cce0:	441a      	add	r2, r3
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	68f9      	ldr	r1, [r7, #12]
 800cd00:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cd02:	fb01 f303 	mul.w	r3, r1, r3
 800cd06:	441a      	add	r2, r3
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	22ff      	movs	r2, #255	@ 0xff
 800cd10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	22ff      	movs	r2, #255	@ 0xff
 800cd18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d114      	bne.n	800cd4c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	691b      	ldr	r3, [r3, #16]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d01a      	beq.n	800cd60 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	3310      	adds	r3, #16
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f001 fbc8 	bl	800e4c4 <xTaskRemoveFromEventList>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d012      	beq.n	800cd60 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd70 <xQueueGenericReset+0xd0>)
 800cd3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd40:	601a      	str	r2, [r3, #0]
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	f3bf 8f6f 	isb	sy
 800cd4a:	e009      	b.n	800cd60 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	3310      	adds	r3, #16
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7ff fef1 	bl	800cb38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	3324      	adds	r3, #36	@ 0x24
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7ff feec 	bl	800cb38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd60:	f002 f904 	bl	800ef6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd64:	2301      	movs	r3, #1
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	e000ed04 	.word	0xe000ed04

0800cd74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b08e      	sub	sp, #56	@ 0x38
 800cd78:	af02      	add	r7, sp, #8
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
 800cd80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10b      	bne.n	800cda0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cd88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd9a:	bf00      	nop
 800cd9c:	bf00      	nop
 800cd9e:	e7fd      	b.n	800cd9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d10b      	bne.n	800cdbe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cdb8:	bf00      	nop
 800cdba:	bf00      	nop
 800cdbc:	e7fd      	b.n	800cdba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <xQueueGenericCreateStatic+0x56>
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d001      	beq.n	800cdce <xQueueGenericCreateStatic+0x5a>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e000      	b.n	800cdd0 <xQueueGenericCreateStatic+0x5c>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10b      	bne.n	800cdec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cdd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd8:	f383 8811 	msr	BASEPRI, r3
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	623b      	str	r3, [r7, #32]
}
 800cde6:	bf00      	nop
 800cde8:	bf00      	nop
 800cdea:	e7fd      	b.n	800cde8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d102      	bne.n	800cdf8 <xQueueGenericCreateStatic+0x84>
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d101      	bne.n	800cdfc <xQueueGenericCreateStatic+0x88>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e000      	b.n	800cdfe <xQueueGenericCreateStatic+0x8a>
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d10b      	bne.n	800ce1a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ce02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce06:	f383 8811 	msr	BASEPRI, r3
 800ce0a:	f3bf 8f6f 	isb	sy
 800ce0e:	f3bf 8f4f 	dsb	sy
 800ce12:	61fb      	str	r3, [r7, #28]
}
 800ce14:	bf00      	nop
 800ce16:	bf00      	nop
 800ce18:	e7fd      	b.n	800ce16 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ce1a:	2348      	movs	r3, #72	@ 0x48
 800ce1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	2b48      	cmp	r3, #72	@ 0x48
 800ce22:	d00b      	beq.n	800ce3c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ce24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce28:	f383 8811 	msr	BASEPRI, r3
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f3bf 8f4f 	dsb	sy
 800ce34:	61bb      	str	r3, [r7, #24]
}
 800ce36:	bf00      	nop
 800ce38:	bf00      	nop
 800ce3a:	e7fd      	b.n	800ce38 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ce42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00d      	beq.n	800ce64 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce50:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ce54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	68b9      	ldr	r1, [r7, #8]
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f000 f840 	bl	800cee4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3730      	adds	r7, #48	@ 0x30
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b08a      	sub	sp, #40	@ 0x28
 800ce72:	af02      	add	r7, sp, #8
 800ce74:	60f8      	str	r0, [r7, #12]
 800ce76:	60b9      	str	r1, [r7, #8]
 800ce78:	4613      	mov	r3, r2
 800ce7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10b      	bne.n	800ce9a <xQueueGenericCreate+0x2c>
	__asm volatile
 800ce82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	613b      	str	r3, [r7, #16]
}
 800ce94:	bf00      	nop
 800ce96:	bf00      	nop
 800ce98:	e7fd      	b.n	800ce96 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	fb02 f303 	mul.w	r3, r2, r3
 800cea2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	3348      	adds	r3, #72	@ 0x48
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f002 f94f 	bl	800f14c <pvPortMalloc>
 800ceae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ceb0:	69bb      	ldr	r3, [r7, #24]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d011      	beq.n	800ceda <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	3348      	adds	r3, #72	@ 0x48
 800cebe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cec8:	79fa      	ldrb	r2, [r7, #7]
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	9300      	str	r3, [sp, #0]
 800cece:	4613      	mov	r3, r2
 800ced0:	697a      	ldr	r2, [r7, #20]
 800ced2:	68b9      	ldr	r1, [r7, #8]
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f000 f805 	bl	800cee4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ceda:	69bb      	ldr	r3, [r7, #24]
	}
 800cedc:	4618      	mov	r0, r3
 800cede:	3720      	adds	r7, #32
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d103      	bne.n	800cf00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	69ba      	ldr	r2, [r7, #24]
 800cefc:	601a      	str	r2, [r3, #0]
 800cefe:	e002      	b.n	800cf06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf12:	2101      	movs	r1, #1
 800cf14:	69b8      	ldr	r0, [r7, #24]
 800cf16:	f7ff fec3 	bl	800cca0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf1a:	bf00      	nop
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b082      	sub	sp, #8
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00e      	beq.n	800cf4e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cf42:	2300      	movs	r3, #0
 800cf44:	2200      	movs	r2, #0
 800cf46:	2100      	movs	r1, #0
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 f837 	bl	800cfbc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cf4e:	bf00      	nop
 800cf50:	3708      	adds	r7, #8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b086      	sub	sp, #24
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf60:	2301      	movs	r3, #1
 800cf62:	617b      	str	r3, [r7, #20]
 800cf64:	2300      	movs	r3, #0
 800cf66:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cf68:	79fb      	ldrb	r3, [r7, #7]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	6939      	ldr	r1, [r7, #16]
 800cf6e:	6978      	ldr	r0, [r7, #20]
 800cf70:	f7ff ff7d 	bl	800ce6e <xQueueGenericCreate>
 800cf74:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f7ff ffd3 	bl	800cf22 <prvInitialiseMutex>

		return xNewQueue;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
	}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3718      	adds	r7, #24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b088      	sub	sp, #32
 800cf8a:	af02      	add	r7, sp, #8
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	6039      	str	r1, [r7, #0]
 800cf90:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf92:	2301      	movs	r3, #1
 800cf94:	617b      	str	r3, [r7, #20]
 800cf96:	2300      	movs	r3, #0
 800cf98:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cf9a:	79fb      	ldrb	r3, [r7, #7]
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	6939      	ldr	r1, [r7, #16]
 800cfa4:	6978      	ldr	r0, [r7, #20]
 800cfa6:	f7ff fee5 	bl	800cd74 <xQueueGenericCreateStatic>
 800cfaa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f7ff ffb8 	bl	800cf22 <prvInitialiseMutex>

		return xNewQueue;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
	}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08e      	sub	sp, #56	@ 0x38
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	607a      	str	r2, [r7, #4]
 800cfc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10b      	bne.n	800cff0 <xQueueGenericSend+0x34>
	__asm volatile
 800cfd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfdc:	f383 8811 	msr	BASEPRI, r3
 800cfe0:	f3bf 8f6f 	isb	sy
 800cfe4:	f3bf 8f4f 	dsb	sy
 800cfe8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cfea:	bf00      	nop
 800cfec:	bf00      	nop
 800cfee:	e7fd      	b.n	800cfec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d103      	bne.n	800cffe <xQueueGenericSend+0x42>
 800cff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <xQueueGenericSend+0x46>
 800cffe:	2301      	movs	r3, #1
 800d000:	e000      	b.n	800d004 <xQueueGenericSend+0x48>
 800d002:	2300      	movs	r3, #0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d10b      	bne.n	800d020 <xQueueGenericSend+0x64>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d01a:	bf00      	nop
 800d01c:	bf00      	nop
 800d01e:	e7fd      	b.n	800d01c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	2b02      	cmp	r3, #2
 800d024:	d103      	bne.n	800d02e <xQueueGenericSend+0x72>
 800d026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d101      	bne.n	800d032 <xQueueGenericSend+0x76>
 800d02e:	2301      	movs	r3, #1
 800d030:	e000      	b.n	800d034 <xQueueGenericSend+0x78>
 800d032:	2300      	movs	r3, #0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d10b      	bne.n	800d050 <xQueueGenericSend+0x94>
	__asm volatile
 800d038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d03c:	f383 8811 	msr	BASEPRI, r3
 800d040:	f3bf 8f6f 	isb	sy
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	623b      	str	r3, [r7, #32]
}
 800d04a:	bf00      	nop
 800d04c:	bf00      	nop
 800d04e:	e7fd      	b.n	800d04c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d050:	f001 fc00 	bl	800e854 <xTaskGetSchedulerState>
 800d054:	4603      	mov	r3, r0
 800d056:	2b00      	cmp	r3, #0
 800d058:	d102      	bne.n	800d060 <xQueueGenericSend+0xa4>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d101      	bne.n	800d064 <xQueueGenericSend+0xa8>
 800d060:	2301      	movs	r3, #1
 800d062:	e000      	b.n	800d066 <xQueueGenericSend+0xaa>
 800d064:	2300      	movs	r3, #0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10b      	bne.n	800d082 <xQueueGenericSend+0xc6>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d06e:	f383 8811 	msr	BASEPRI, r3
 800d072:	f3bf 8f6f 	isb	sy
 800d076:	f3bf 8f4f 	dsb	sy
 800d07a:	61fb      	str	r3, [r7, #28]
}
 800d07c:	bf00      	nop
 800d07e:	bf00      	nop
 800d080:	e7fd      	b.n	800d07e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d082:	f001 ff41 	bl	800ef08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d08c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d08e:	429a      	cmp	r2, r3
 800d090:	d302      	bcc.n	800d098 <xQueueGenericSend+0xdc>
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	2b02      	cmp	r3, #2
 800d096:	d129      	bne.n	800d0ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d098:	683a      	ldr	r2, [r7, #0]
 800d09a:	68b9      	ldr	r1, [r7, #8]
 800d09c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d09e:	f000 fc6d 	bl	800d97c <prvCopyDataToQueue>
 800d0a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d010      	beq.n	800d0ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ae:	3324      	adds	r3, #36	@ 0x24
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f001 fa07 	bl	800e4c4 <xTaskRemoveFromEventList>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d013      	beq.n	800d0e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d0bc:	4b3f      	ldr	r3, [pc, #252]	@ (800d1bc <xQueueGenericSend+0x200>)
 800d0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0c2:	601a      	str	r2, [r3, #0]
 800d0c4:	f3bf 8f4f 	dsb	sy
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	e00a      	b.n	800d0e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d007      	beq.n	800d0e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d0d4:	4b39      	ldr	r3, [pc, #228]	@ (800d1bc <xQueueGenericSend+0x200>)
 800d0d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d0e4:	f001 ff42 	bl	800ef6c <vPortExitCritical>
				return pdPASS;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e063      	b.n	800d1b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d103      	bne.n	800d0fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d0f2:	f001 ff3b 	bl	800ef6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	e05c      	b.n	800d1b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d106      	bne.n	800d10e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d100:	f107 0314 	add.w	r3, r7, #20
 800d104:	4618      	mov	r0, r3
 800d106:	f001 fa41 	bl	800e58c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d10a:	2301      	movs	r3, #1
 800d10c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d10e:	f001 ff2d 	bl	800ef6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d112:	f000 ffbd 	bl	800e090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d116:	f001 fef7 	bl	800ef08 <vPortEnterCritical>
 800d11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d11c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d120:	b25b      	sxtb	r3, r3
 800d122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d126:	d103      	bne.n	800d130 <xQueueGenericSend+0x174>
 800d128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d12a:	2200      	movs	r2, #0
 800d12c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d132:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d136:	b25b      	sxtb	r3, r3
 800d138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d13c:	d103      	bne.n	800d146 <xQueueGenericSend+0x18a>
 800d13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d146:	f001 ff11 	bl	800ef6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d14a:	1d3a      	adds	r2, r7, #4
 800d14c:	f107 0314 	add.w	r3, r7, #20
 800d150:	4611      	mov	r1, r2
 800d152:	4618      	mov	r0, r3
 800d154:	f001 fa30 	bl	800e5b8 <xTaskCheckForTimeOut>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d124      	bne.n	800d1a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d15e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d160:	f000 fd04 	bl	800db6c <prvIsQueueFull>
 800d164:	4603      	mov	r3, r0
 800d166:	2b00      	cmp	r3, #0
 800d168:	d018      	beq.n	800d19c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16c:	3310      	adds	r3, #16
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	4611      	mov	r1, r2
 800d172:	4618      	mov	r0, r3
 800d174:	f001 f980 	bl	800e478 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d17a:	f000 fc8f 	bl	800da9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d17e:	f000 ff95 	bl	800e0ac <xTaskResumeAll>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	f47f af7c 	bne.w	800d082 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d18a:	4b0c      	ldr	r3, [pc, #48]	@ (800d1bc <xQueueGenericSend+0x200>)
 800d18c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d190:	601a      	str	r2, [r3, #0]
 800d192:	f3bf 8f4f 	dsb	sy
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	e772      	b.n	800d082 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d19c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d19e:	f000 fc7d 	bl	800da9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1a2:	f000 ff83 	bl	800e0ac <xTaskResumeAll>
 800d1a6:	e76c      	b.n	800d082 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d1a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d1aa:	f000 fc77 	bl	800da9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1ae:	f000 ff7d 	bl	800e0ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d1b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3738      	adds	r7, #56	@ 0x38
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	e000ed04 	.word	0xe000ed04

0800d1c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b090      	sub	sp, #64	@ 0x40
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	607a      	str	r2, [r7, #4]
 800d1cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d10b      	bne.n	800d1f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1dc:	f383 8811 	msr	BASEPRI, r3
 800d1e0:	f3bf 8f6f 	isb	sy
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d1ea:	bf00      	nop
 800d1ec:	bf00      	nop
 800d1ee:	e7fd      	b.n	800d1ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d103      	bne.n	800d1fe <xQueueGenericSendFromISR+0x3e>
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <xQueueGenericSendFromISR+0x42>
 800d1fe:	2301      	movs	r3, #1
 800d200:	e000      	b.n	800d204 <xQueueGenericSendFromISR+0x44>
 800d202:	2300      	movs	r3, #0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10b      	bne.n	800d220 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20c:	f383 8811 	msr	BASEPRI, r3
 800d210:	f3bf 8f6f 	isb	sy
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d21a:	bf00      	nop
 800d21c:	bf00      	nop
 800d21e:	e7fd      	b.n	800d21c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	2b02      	cmp	r3, #2
 800d224:	d103      	bne.n	800d22e <xQueueGenericSendFromISR+0x6e>
 800d226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d101      	bne.n	800d232 <xQueueGenericSendFromISR+0x72>
 800d22e:	2301      	movs	r3, #1
 800d230:	e000      	b.n	800d234 <xQueueGenericSendFromISR+0x74>
 800d232:	2300      	movs	r3, #0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d10b      	bne.n	800d250 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23c:	f383 8811 	msr	BASEPRI, r3
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	623b      	str	r3, [r7, #32]
}
 800d24a:	bf00      	nop
 800d24c:	bf00      	nop
 800d24e:	e7fd      	b.n	800d24c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d250:	f001 ff3a 	bl	800f0c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d254:	f3ef 8211 	mrs	r2, BASEPRI
 800d258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	61fa      	str	r2, [r7, #28]
 800d26a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d26c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d26e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d278:	429a      	cmp	r2, r3
 800d27a:	d302      	bcc.n	800d282 <xQueueGenericSendFromISR+0xc2>
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	2b02      	cmp	r3, #2
 800d280:	d12f      	bne.n	800d2e2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d284:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d288:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d28e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d290:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d292:	683a      	ldr	r2, [r7, #0]
 800d294:	68b9      	ldr	r1, [r7, #8]
 800d296:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d298:	f000 fb70 	bl	800d97c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d29c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a4:	d112      	bne.n	800d2cc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d016      	beq.n	800d2dc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b0:	3324      	adds	r3, #36	@ 0x24
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f001 f906 	bl	800e4c4 <xTaskRemoveFromEventList>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00e      	beq.n	800d2dc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d00b      	beq.n	800d2dc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	601a      	str	r2, [r3, #0]
 800d2ca:	e007      	b.n	800d2dc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d2cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	b25a      	sxtb	r2, r3
 800d2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d2e0:	e001      	b.n	800d2e6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d2f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3740      	adds	r7, #64	@ 0x40
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b08e      	sub	sp, #56	@ 0x38
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d10b      	bne.n	800d328 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d314:	f383 8811 	msr	BASEPRI, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	623b      	str	r3, [r7, #32]
}
 800d322:	bf00      	nop
 800d324:	bf00      	nop
 800d326:	e7fd      	b.n	800d324 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00b      	beq.n	800d348 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	61fb      	str	r3, [r7, #28]
}
 800d342:	bf00      	nop
 800d344:	bf00      	nop
 800d346:	e7fd      	b.n	800d344 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d103      	bne.n	800d358 <xQueueGiveFromISR+0x5c>
 800d350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d101      	bne.n	800d35c <xQueueGiveFromISR+0x60>
 800d358:	2301      	movs	r3, #1
 800d35a:	e000      	b.n	800d35e <xQueueGiveFromISR+0x62>
 800d35c:	2300      	movs	r3, #0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d10b      	bne.n	800d37a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d366:	f383 8811 	msr	BASEPRI, r3
 800d36a:	f3bf 8f6f 	isb	sy
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	61bb      	str	r3, [r7, #24]
}
 800d374:	bf00      	nop
 800d376:	bf00      	nop
 800d378:	e7fd      	b.n	800d376 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d37a:	f001 fea5 	bl	800f0c8 <vPortValidateInterruptPriority>
	__asm volatile
 800d37e:	f3ef 8211 	mrs	r2, BASEPRI
 800d382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d386:	f383 8811 	msr	BASEPRI, r3
 800d38a:	f3bf 8f6f 	isb	sy
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	617a      	str	r2, [r7, #20]
 800d394:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d396:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d398:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d39e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d22b      	bcs.n	800d402 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b6:	1c5a      	adds	r2, r3, #1
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c4:	d112      	bne.n	800d3ec <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d016      	beq.n	800d3fc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d0:	3324      	adds	r3, #36	@ 0x24
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f001 f876 	bl	800e4c4 <xTaskRemoveFromEventList>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d00e      	beq.n	800d3fc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00b      	beq.n	800d3fc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	601a      	str	r2, [r3, #0]
 800d3ea:	e007      	b.n	800d3fc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	b25a      	sxtb	r2, r3
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800d400:	e001      	b.n	800d406 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d402:	2300      	movs	r3, #0
 800d404:	637b      	str	r3, [r7, #52]	@ 0x34
 800d406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d408:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f383 8811 	msr	BASEPRI, r3
}
 800d410:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d414:	4618      	mov	r0, r3
 800d416:	3738      	adds	r7, #56	@ 0x38
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b08c      	sub	sp, #48	@ 0x30
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d428:	2300      	movs	r3, #0
 800d42a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d432:	2b00      	cmp	r3, #0
 800d434:	d10b      	bne.n	800d44e <xQueueReceive+0x32>
	__asm volatile
 800d436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	623b      	str	r3, [r7, #32]
}
 800d448:	bf00      	nop
 800d44a:	bf00      	nop
 800d44c:	e7fd      	b.n	800d44a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d103      	bne.n	800d45c <xQueueReceive+0x40>
 800d454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <xQueueReceive+0x44>
 800d45c:	2301      	movs	r3, #1
 800d45e:	e000      	b.n	800d462 <xQueueReceive+0x46>
 800d460:	2300      	movs	r3, #0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10b      	bne.n	800d47e <xQueueReceive+0x62>
	__asm volatile
 800d466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d46a:	f383 8811 	msr	BASEPRI, r3
 800d46e:	f3bf 8f6f 	isb	sy
 800d472:	f3bf 8f4f 	dsb	sy
 800d476:	61fb      	str	r3, [r7, #28]
}
 800d478:	bf00      	nop
 800d47a:	bf00      	nop
 800d47c:	e7fd      	b.n	800d47a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d47e:	f001 f9e9 	bl	800e854 <xTaskGetSchedulerState>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d102      	bne.n	800d48e <xQueueReceive+0x72>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d101      	bne.n	800d492 <xQueueReceive+0x76>
 800d48e:	2301      	movs	r3, #1
 800d490:	e000      	b.n	800d494 <xQueueReceive+0x78>
 800d492:	2300      	movs	r3, #0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10b      	bne.n	800d4b0 <xQueueReceive+0x94>
	__asm volatile
 800d498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	61bb      	str	r3, [r7, #24]
}
 800d4aa:	bf00      	nop
 800d4ac:	bf00      	nop
 800d4ae:	e7fd      	b.n	800d4ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4b0:	f001 fd2a 	bl	800ef08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d01f      	beq.n	800d500 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4c0:	68b9      	ldr	r1, [r7, #8]
 800d4c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4c4:	f000 fac4 	bl	800da50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ca:	1e5a      	subs	r2, r3, #1
 800d4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d00f      	beq.n	800d4f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4da:	3310      	adds	r3, #16
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 fff1 	bl	800e4c4 <xTaskRemoveFromEventList>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d007      	beq.n	800d4f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d4e8:	4b3c      	ldr	r3, [pc, #240]	@ (800d5dc <xQueueReceive+0x1c0>)
 800d4ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4ee:	601a      	str	r2, [r3, #0]
 800d4f0:	f3bf 8f4f 	dsb	sy
 800d4f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d4f8:	f001 fd38 	bl	800ef6c <vPortExitCritical>
				return pdPASS;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e069      	b.n	800d5d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d103      	bne.n	800d50e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d506:	f001 fd31 	bl	800ef6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d50a:	2300      	movs	r3, #0
 800d50c:	e062      	b.n	800d5d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d510:	2b00      	cmp	r3, #0
 800d512:	d106      	bne.n	800d522 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d514:	f107 0310 	add.w	r3, r7, #16
 800d518:	4618      	mov	r0, r3
 800d51a:	f001 f837 	bl	800e58c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d51e:	2301      	movs	r3, #1
 800d520:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d522:	f001 fd23 	bl	800ef6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d526:	f000 fdb3 	bl	800e090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d52a:	f001 fced 	bl	800ef08 <vPortEnterCritical>
 800d52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d534:	b25b      	sxtb	r3, r3
 800d536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d53a:	d103      	bne.n	800d544 <xQueueReceive+0x128>
 800d53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d53e:	2200      	movs	r2, #0
 800d540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d54a:	b25b      	sxtb	r3, r3
 800d54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d550:	d103      	bne.n	800d55a <xQueueReceive+0x13e>
 800d552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d554:	2200      	movs	r2, #0
 800d556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d55a:	f001 fd07 	bl	800ef6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d55e:	1d3a      	adds	r2, r7, #4
 800d560:	f107 0310 	add.w	r3, r7, #16
 800d564:	4611      	mov	r1, r2
 800d566:	4618      	mov	r0, r3
 800d568:	f001 f826 	bl	800e5b8 <xTaskCheckForTimeOut>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d123      	bne.n	800d5ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d574:	f000 fae4 	bl	800db40 <prvIsQueueEmpty>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d017      	beq.n	800d5ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d580:	3324      	adds	r3, #36	@ 0x24
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	4611      	mov	r1, r2
 800d586:	4618      	mov	r0, r3
 800d588:	f000 ff76 	bl	800e478 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d58c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d58e:	f000 fa85 	bl	800da9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d592:	f000 fd8b 	bl	800e0ac <xTaskResumeAll>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d189      	bne.n	800d4b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d59c:	4b0f      	ldr	r3, [pc, #60]	@ (800d5dc <xQueueReceive+0x1c0>)
 800d59e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	e780      	b.n	800d4b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d5ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5b0:	f000 fa74 	bl	800da9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5b4:	f000 fd7a 	bl	800e0ac <xTaskResumeAll>
 800d5b8:	e77a      	b.n	800d4b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d5ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5bc:	f000 fa6e 	bl	800da9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5c0:	f000 fd74 	bl	800e0ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5c6:	f000 fabb 	bl	800db40 <prvIsQueueEmpty>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f43f af6f 	beq.w	800d4b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d5d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3730      	adds	r7, #48	@ 0x30
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	e000ed04 	.word	0xe000ed04

0800d5e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08e      	sub	sp, #56	@ 0x38
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d10b      	bne.n	800d614 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	623b      	str	r3, [r7, #32]
}
 800d60e:	bf00      	nop
 800d610:	bf00      	nop
 800d612:	e7fd      	b.n	800d610 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00b      	beq.n	800d634 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d620:	f383 8811 	msr	BASEPRI, r3
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	61fb      	str	r3, [r7, #28]
}
 800d62e:	bf00      	nop
 800d630:	bf00      	nop
 800d632:	e7fd      	b.n	800d630 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d634:	f001 f90e 	bl	800e854 <xTaskGetSchedulerState>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d102      	bne.n	800d644 <xQueueSemaphoreTake+0x64>
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d101      	bne.n	800d648 <xQueueSemaphoreTake+0x68>
 800d644:	2301      	movs	r3, #1
 800d646:	e000      	b.n	800d64a <xQueueSemaphoreTake+0x6a>
 800d648:	2300      	movs	r3, #0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d10b      	bne.n	800d666 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	61bb      	str	r3, [r7, #24]
}
 800d660:	bf00      	nop
 800d662:	bf00      	nop
 800d664:	e7fd      	b.n	800d662 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d666:	f001 fc4f 	bl	800ef08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d66c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d66e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d672:	2b00      	cmp	r3, #0
 800d674:	d024      	beq.n	800d6c0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d678:	1e5a      	subs	r2, r3, #1
 800d67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d67c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d104      	bne.n	800d690 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d686:	f001 fa91 	bl	800ebac <pvTaskIncrementMutexHeldCount>
 800d68a:	4602      	mov	r2, r0
 800d68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d692:	691b      	ldr	r3, [r3, #16]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00f      	beq.n	800d6b8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d69a:	3310      	adds	r3, #16
 800d69c:	4618      	mov	r0, r3
 800d69e:	f000 ff11 	bl	800e4c4 <xTaskRemoveFromEventList>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d007      	beq.n	800d6b8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6a8:	4b54      	ldr	r3, [pc, #336]	@ (800d7fc <xQueueSemaphoreTake+0x21c>)
 800d6aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6ae:	601a      	str	r2, [r3, #0]
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d6b8:	f001 fc58 	bl	800ef6c <vPortExitCritical>
				return pdPASS;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e098      	b.n	800d7f2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d112      	bne.n	800d6ec <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00b      	beq.n	800d6e4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	617b      	str	r3, [r7, #20]
}
 800d6de:	bf00      	nop
 800d6e0:	bf00      	nop
 800d6e2:	e7fd      	b.n	800d6e0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d6e4:	f001 fc42 	bl	800ef6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	e082      	b.n	800d7f2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d106      	bne.n	800d700 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6f2:	f107 030c 	add.w	r3, r7, #12
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f000 ff48 	bl	800e58c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d700:	f001 fc34 	bl	800ef6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d704:	f000 fcc4 	bl	800e090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d708:	f001 fbfe 	bl	800ef08 <vPortEnterCritical>
 800d70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d712:	b25b      	sxtb	r3, r3
 800d714:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d718:	d103      	bne.n	800d722 <xQueueSemaphoreTake+0x142>
 800d71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71c:	2200      	movs	r2, #0
 800d71e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d724:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d728:	b25b      	sxtb	r3, r3
 800d72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72e:	d103      	bne.n	800d738 <xQueueSemaphoreTake+0x158>
 800d730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d732:	2200      	movs	r2, #0
 800d734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d738:	f001 fc18 	bl	800ef6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d73c:	463a      	mov	r2, r7
 800d73e:	f107 030c 	add.w	r3, r7, #12
 800d742:	4611      	mov	r1, r2
 800d744:	4618      	mov	r0, r3
 800d746:	f000 ff37 	bl	800e5b8 <xTaskCheckForTimeOut>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d132      	bne.n	800d7b6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d750:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d752:	f000 f9f5 	bl	800db40 <prvIsQueueEmpty>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d026      	beq.n	800d7aa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d109      	bne.n	800d778 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d764:	f001 fbd0 	bl	800ef08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f001 f88f 	bl	800e890 <xTaskPriorityInherit>
 800d772:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d774:	f001 fbfa 	bl	800ef6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77a:	3324      	adds	r3, #36	@ 0x24
 800d77c:	683a      	ldr	r2, [r7, #0]
 800d77e:	4611      	mov	r1, r2
 800d780:	4618      	mov	r0, r3
 800d782:	f000 fe79 	bl	800e478 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d786:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d788:	f000 f988 	bl	800da9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d78c:	f000 fc8e 	bl	800e0ac <xTaskResumeAll>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	f47f af67 	bne.w	800d666 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d798:	4b18      	ldr	r3, [pc, #96]	@ (800d7fc <xQueueSemaphoreTake+0x21c>)
 800d79a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d79e:	601a      	str	r2, [r3, #0]
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	f3bf 8f6f 	isb	sy
 800d7a8:	e75d      	b.n	800d666 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d7aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7ac:	f000 f976 	bl	800da9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7b0:	f000 fc7c 	bl	800e0ac <xTaskResumeAll>
 800d7b4:	e757      	b.n	800d666 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d7b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7b8:	f000 f970 	bl	800da9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7bc:	f000 fc76 	bl	800e0ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7c2:	f000 f9bd 	bl	800db40 <prvIsQueueEmpty>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f43f af4c 	beq.w	800d666 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00d      	beq.n	800d7f0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d7d4:	f001 fb98 	bl	800ef08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d7d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7da:	f000 f8b7 	bl	800d94c <prvGetDisinheritPriorityAfterTimeout>
 800d7de:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f001 f950 	bl	800ea8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d7ec:	f001 fbbe 	bl	800ef6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d7f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3738      	adds	r7, #56	@ 0x38
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	e000ed04 	.word	0xe000ed04

0800d800 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b08e      	sub	sp, #56	@ 0x38
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d812:	2b00      	cmp	r3, #0
 800d814:	d10b      	bne.n	800d82e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d81a:	f383 8811 	msr	BASEPRI, r3
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	623b      	str	r3, [r7, #32]
}
 800d828:	bf00      	nop
 800d82a:	bf00      	nop
 800d82c:	e7fd      	b.n	800d82a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d103      	bne.n	800d83c <xQueueReceiveFromISR+0x3c>
 800d834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d101      	bne.n	800d840 <xQueueReceiveFromISR+0x40>
 800d83c:	2301      	movs	r3, #1
 800d83e:	e000      	b.n	800d842 <xQueueReceiveFromISR+0x42>
 800d840:	2300      	movs	r3, #0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d10b      	bne.n	800d85e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84a:	f383 8811 	msr	BASEPRI, r3
 800d84e:	f3bf 8f6f 	isb	sy
 800d852:	f3bf 8f4f 	dsb	sy
 800d856:	61fb      	str	r3, [r7, #28]
}
 800d858:	bf00      	nop
 800d85a:	bf00      	nop
 800d85c:	e7fd      	b.n	800d85a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d85e:	f001 fc33 	bl	800f0c8 <vPortValidateInterruptPriority>
	__asm volatile
 800d862:	f3ef 8211 	mrs	r2, BASEPRI
 800d866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	61ba      	str	r2, [r7, #24]
 800d878:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d87a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d87c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d882:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d886:	2b00      	cmp	r3, #0
 800d888:	d02f      	beq.n	800d8ea <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d894:	68b9      	ldr	r1, [r7, #8]
 800d896:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d898:	f000 f8da 	bl	800da50 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d89e:	1e5a      	subs	r2, r3, #1
 800d8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d8a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ac:	d112      	bne.n	800d8d4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d016      	beq.n	800d8e4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b8:	3310      	adds	r3, #16
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 fe02 	bl	800e4c4 <xTaskRemoveFromEventList>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00e      	beq.n	800d8e4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00b      	beq.n	800d8e4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	601a      	str	r2, [r3, #0]
 800d8d2:	e007      	b.n	800d8e4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8d8:	3301      	adds	r3, #1
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	b25a      	sxtb	r2, r3
 800d8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8e8:	e001      	b.n	800d8ee <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	f383 8811 	msr	BASEPRI, r3
}
 800d8f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3738      	adds	r7, #56	@ 0x38
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d10b      	bne.n	800d92e <vQueueDelete+0x2a>
	__asm volatile
 800d916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d91a:	f383 8811 	msr	BASEPRI, r3
 800d91e:	f3bf 8f6f 	isb	sy
 800d922:	f3bf 8f4f 	dsb	sy
 800d926:	60bb      	str	r3, [r7, #8]
}
 800d928:	bf00      	nop
 800d92a:	bf00      	nop
 800d92c:	e7fd      	b.n	800d92a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	f000 f934 	bl	800db9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d102      	bne.n	800d944 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f001 fcd8 	bl	800f2f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d944:	bf00      	nop
 800d946:	3710      	adds	r7, #16
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d94c:	b480      	push	{r7}
 800d94e:	b085      	sub	sp, #20
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d006      	beq.n	800d96a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f1c3 0307 	rsb	r3, r3, #7
 800d966:	60fb      	str	r3, [r7, #12]
 800d968:	e001      	b.n	800d96e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d96a:	2300      	movs	r3, #0
 800d96c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d96e:	68fb      	ldr	r3, [r7, #12]
	}
 800d970:	4618      	mov	r0, r3
 800d972:	3714      	adds	r7, #20
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b086      	sub	sp, #24
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d988:	2300      	movs	r3, #0
 800d98a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d990:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d996:	2b00      	cmp	r3, #0
 800d998:	d10d      	bne.n	800d9b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d14d      	bne.n	800da3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f000 ffe8 	bl	800e97c <xTaskPriorityDisinherit>
 800d9ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	609a      	str	r2, [r3, #8]
 800d9b4:	e043      	b.n	800da3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d119      	bne.n	800d9f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6858      	ldr	r0, [r3, #4]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	68b9      	ldr	r1, [r7, #8]
 800d9c8:	f002 fd27 	bl	801041a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9d4:	441a      	add	r2, r3
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d32b      	bcc.n	800da3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	605a      	str	r2, [r3, #4]
 800d9ee:	e026      	b.n	800da3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	68d8      	ldr	r0, [r3, #12]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	68b9      	ldr	r1, [r7, #8]
 800d9fc:	f002 fd0d 	bl	801041a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	68da      	ldr	r2, [r3, #12]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da08:	425b      	negs	r3, r3
 800da0a:	441a      	add	r2, r3
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	68da      	ldr	r2, [r3, #12]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d207      	bcs.n	800da2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	689a      	ldr	r2, [r3, #8]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da24:	425b      	negs	r3, r3
 800da26:	441a      	add	r2, r3
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b02      	cmp	r3, #2
 800da30:	d105      	bne.n	800da3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	3b01      	subs	r3, #1
 800da3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	1c5a      	adds	r2, r3, #1
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800da46:	697b      	ldr	r3, [r7, #20]
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3718      	adds	r7, #24
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d018      	beq.n	800da94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	68da      	ldr	r2, [r3, #12]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da6a:	441a      	add	r2, r3
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	68da      	ldr	r2, [r3, #12]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d303      	bcc.n	800da84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	68d9      	ldr	r1, [r3, #12]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da8c:	461a      	mov	r2, r3
 800da8e:	6838      	ldr	r0, [r7, #0]
 800da90:	f002 fcc3 	bl	801041a <memcpy>
	}
}
 800da94:	bf00      	nop
 800da96:	3708      	adds	r7, #8
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800daa4:	f001 fa30 	bl	800ef08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800daae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dab0:	e011      	b.n	800dad6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d012      	beq.n	800dae0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	3324      	adds	r3, #36	@ 0x24
 800dabe:	4618      	mov	r0, r3
 800dac0:	f000 fd00 	bl	800e4c4 <xTaskRemoveFromEventList>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d001      	beq.n	800dace <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800daca:	f000 fdd9 	bl	800e680 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dace:	7bfb      	ldrb	r3, [r7, #15]
 800dad0:	3b01      	subs	r3, #1
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	dce9      	bgt.n	800dab2 <prvUnlockQueue+0x16>
 800dade:	e000      	b.n	800dae2 <prvUnlockQueue+0x46>
					break;
 800dae0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	22ff      	movs	r2, #255	@ 0xff
 800dae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800daea:	f001 fa3f 	bl	800ef6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800daee:	f001 fa0b 	bl	800ef08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800daf8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dafa:	e011      	b.n	800db20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	691b      	ldr	r3, [r3, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d012      	beq.n	800db2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	3310      	adds	r3, #16
 800db08:	4618      	mov	r0, r3
 800db0a:	f000 fcdb 	bl	800e4c4 <xTaskRemoveFromEventList>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800db14:	f000 fdb4 	bl	800e680 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800db18:	7bbb      	ldrb	r3, [r7, #14]
 800db1a:	3b01      	subs	r3, #1
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db24:	2b00      	cmp	r3, #0
 800db26:	dce9      	bgt.n	800dafc <prvUnlockQueue+0x60>
 800db28:	e000      	b.n	800db2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800db2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	22ff      	movs	r2, #255	@ 0xff
 800db30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800db34:	f001 fa1a 	bl	800ef6c <vPortExitCritical>
}
 800db38:	bf00      	nop
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db48:	f001 f9de 	bl	800ef08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db50:	2b00      	cmp	r3, #0
 800db52:	d102      	bne.n	800db5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800db54:	2301      	movs	r3, #1
 800db56:	60fb      	str	r3, [r7, #12]
 800db58:	e001      	b.n	800db5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800db5a:	2300      	movs	r3, #0
 800db5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db5e:	f001 fa05 	bl	800ef6c <vPortExitCritical>

	return xReturn;
 800db62:	68fb      	ldr	r3, [r7, #12]
}
 800db64:	4618      	mov	r0, r3
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db74:	f001 f9c8 	bl	800ef08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db80:	429a      	cmp	r2, r3
 800db82:	d102      	bne.n	800db8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800db84:	2301      	movs	r3, #1
 800db86:	60fb      	str	r3, [r7, #12]
 800db88:	e001      	b.n	800db8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800db8a:	2300      	movs	r3, #0
 800db8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db8e:	f001 f9ed 	bl	800ef6c <vPortExitCritical>

	return xReturn;
 800db92:	68fb      	ldr	r3, [r7, #12]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800db9c:	b480      	push	{r7}
 800db9e:	b085      	sub	sp, #20
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dba4:	2300      	movs	r3, #0
 800dba6:	60fb      	str	r3, [r7, #12]
 800dba8:	e016      	b.n	800dbd8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dbaa:	4a10      	ldr	r2, [pc, #64]	@ (800dbec <vQueueUnregisterQueue+0x50>)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	00db      	lsls	r3, r3, #3
 800dbb0:	4413      	add	r3, r2
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d10b      	bne.n	800dbd2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dbba:	4a0c      	ldr	r2, [pc, #48]	@ (800dbec <vQueueUnregisterQueue+0x50>)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dbc4:	4a09      	ldr	r2, [pc, #36]	@ (800dbec <vQueueUnregisterQueue+0x50>)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	00db      	lsls	r3, r3, #3
 800dbca:	4413      	add	r3, r2
 800dbcc:	2200      	movs	r2, #0
 800dbce:	605a      	str	r2, [r3, #4]
				break;
 800dbd0:	e006      	b.n	800dbe0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	60fb      	str	r3, [r7, #12]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2b07      	cmp	r3, #7
 800dbdc:	d9e5      	bls.n	800dbaa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dbde:	bf00      	nop
 800dbe0:	bf00      	nop
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr
 800dbec:	20001198 	.word	0x20001198

0800dbf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b08e      	sub	sp, #56	@ 0x38
 800dbf4:	af04      	add	r7, sp, #16
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
 800dbfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dbfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10b      	bne.n	800dc1c <xTaskCreateStatic+0x2c>
	__asm volatile
 800dc04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc08:	f383 8811 	msr	BASEPRI, r3
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	623b      	str	r3, [r7, #32]
}
 800dc16:	bf00      	nop
 800dc18:	bf00      	nop
 800dc1a:	e7fd      	b.n	800dc18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10b      	bne.n	800dc3a <xTaskCreateStatic+0x4a>
	__asm volatile
 800dc22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc26:	f383 8811 	msr	BASEPRI, r3
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	61fb      	str	r3, [r7, #28]
}
 800dc34:	bf00      	nop
 800dc36:	bf00      	nop
 800dc38:	e7fd      	b.n	800dc36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dc3a:	23a0      	movs	r3, #160	@ 0xa0
 800dc3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	2ba0      	cmp	r3, #160	@ 0xa0
 800dc42:	d00b      	beq.n	800dc5c <xTaskCreateStatic+0x6c>
	__asm volatile
 800dc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc48:	f383 8811 	msr	BASEPRI, r3
 800dc4c:	f3bf 8f6f 	isb	sy
 800dc50:	f3bf 8f4f 	dsb	sy
 800dc54:	61bb      	str	r3, [r7, #24]
}
 800dc56:	bf00      	nop
 800dc58:	bf00      	nop
 800dc5a:	e7fd      	b.n	800dc58 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dc5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d01e      	beq.n	800dca2 <xTaskCreateStatic+0xb2>
 800dc64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d01b      	beq.n	800dca2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc76:	2202      	movs	r2, #2
 800dc78:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	9303      	str	r3, [sp, #12]
 800dc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc82:	9302      	str	r3, [sp, #8]
 800dc84:	f107 0314 	add.w	r3, r7, #20
 800dc88:	9301      	str	r3, [sp, #4]
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	68b9      	ldr	r1, [r7, #8]
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f000 f851 	bl	800dd3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc9c:	f000 f8ee 	bl	800de7c <prvAddNewTaskToReadyList>
 800dca0:	e001      	b.n	800dca6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dca2:	2300      	movs	r3, #0
 800dca4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dca6:	697b      	ldr	r3, [r7, #20]
	}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3728      	adds	r7, #40	@ 0x28
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b08c      	sub	sp, #48	@ 0x30
 800dcb4:	af04      	add	r7, sp, #16
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	603b      	str	r3, [r7, #0]
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dcc0:	88fb      	ldrh	r3, [r7, #6]
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f001 fa41 	bl	800f14c <pvPortMalloc>
 800dcca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00e      	beq.n	800dcf0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dcd2:	20a0      	movs	r0, #160	@ 0xa0
 800dcd4:	f001 fa3a 	bl	800f14c <pvPortMalloc>
 800dcd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d003      	beq.n	800dce8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	697a      	ldr	r2, [r7, #20]
 800dce4:	631a      	str	r2, [r3, #48]	@ 0x30
 800dce6:	e005      	b.n	800dcf4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dce8:	6978      	ldr	r0, [r7, #20]
 800dcea:	f001 fb03 	bl	800f2f4 <vPortFree>
 800dcee:	e001      	b.n	800dcf4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d017      	beq.n	800dd2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd02:	88fa      	ldrh	r2, [r7, #6]
 800dd04:	2300      	movs	r3, #0
 800dd06:	9303      	str	r3, [sp, #12]
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	9302      	str	r3, [sp, #8]
 800dd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0e:	9301      	str	r3, [sp, #4]
 800dd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	68b9      	ldr	r1, [r7, #8]
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f000 f80f 	bl	800dd3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd1e:	69f8      	ldr	r0, [r7, #28]
 800dd20:	f000 f8ac 	bl	800de7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dd24:	2301      	movs	r3, #1
 800dd26:	61bb      	str	r3, [r7, #24]
 800dd28:	e002      	b.n	800dd30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dd2a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dd30:	69bb      	ldr	r3, [r7, #24]
	}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3720      	adds	r7, #32
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
	...

0800dd3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b088      	sub	sp, #32
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	607a      	str	r2, [r7, #4]
 800dd48:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd54:	3b01      	subs	r3, #1
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	4413      	add	r3, r2
 800dd5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dd5c:	69bb      	ldr	r3, [r7, #24]
 800dd5e:	f023 0307 	bic.w	r3, r3, #7
 800dd62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	f003 0307 	and.w	r3, r3, #7
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00b      	beq.n	800dd86 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	617b      	str	r3, [r7, #20]
}
 800dd80:	bf00      	nop
 800dd82:	bf00      	nop
 800dd84:	e7fd      	b.n	800dd82 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d01f      	beq.n	800ddcc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	61fb      	str	r3, [r7, #28]
 800dd90:	e012      	b.n	800ddb8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dd92:	68ba      	ldr	r2, [r7, #8]
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	4413      	add	r3, r2
 800dd98:	7819      	ldrb	r1, [r3, #0]
 800dd9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	4413      	add	r3, r2
 800dda0:	3334      	adds	r3, #52	@ 0x34
 800dda2:	460a      	mov	r2, r1
 800dda4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dda6:	68ba      	ldr	r2, [r7, #8]
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	4413      	add	r3, r2
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d006      	beq.n	800ddc0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	61fb      	str	r3, [r7, #28]
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	2b0f      	cmp	r3, #15
 800ddbc:	d9e9      	bls.n	800dd92 <prvInitialiseNewTask+0x56>
 800ddbe:	e000      	b.n	800ddc2 <prvInitialiseNewTask+0x86>
			{
				break;
 800ddc0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ddc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ddca:	e003      	b.n	800ddd4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ddd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddd6:	2b06      	cmp	r3, #6
 800ddd8:	d901      	bls.n	800ddde <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ddda:	2306      	movs	r3, #6
 800dddc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ddde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dde2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dde4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dde8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ddea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddec:	2200      	movs	r2, #0
 800ddee:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fe febf 	bl	800cb78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ddfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfc:	3318      	adds	r3, #24
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fe feba 	bl	800cb78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de0c:	f1c3 0207 	rsb	r2, r3, #7
 800de10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800de14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de18:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800de1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de1c:	2200      	movs	r2, #0
 800de1e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de24:	2200      	movs	r2, #0
 800de26:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800de2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de2c:	334c      	adds	r3, #76	@ 0x4c
 800de2e:	224c      	movs	r2, #76	@ 0x4c
 800de30:	2100      	movs	r1, #0
 800de32:	4618      	mov	r0, r3
 800de34:	f002 fa14 	bl	8010260 <memset>
 800de38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de3a:	4a0d      	ldr	r2, [pc, #52]	@ (800de70 <prvInitialiseNewTask+0x134>)
 800de3c:	651a      	str	r2, [r3, #80]	@ 0x50
 800de3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de40:	4a0c      	ldr	r2, [pc, #48]	@ (800de74 <prvInitialiseNewTask+0x138>)
 800de42:	655a      	str	r2, [r3, #84]	@ 0x54
 800de44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de46:	4a0c      	ldr	r2, [pc, #48]	@ (800de78 <prvInitialiseNewTask+0x13c>)
 800de48:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800de4a:	683a      	ldr	r2, [r7, #0]
 800de4c:	68f9      	ldr	r1, [r7, #12]
 800de4e:	69b8      	ldr	r0, [r7, #24]
 800de50:	f000 ff26 	bl	800eca0 <pxPortInitialiseStack>
 800de54:	4602      	mov	r2, r0
 800de56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800de5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de66:	bf00      	nop
 800de68:	3720      	adds	r7, #32
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	20004f2c 	.word	0x20004f2c
 800de74:	20004f94 	.word	0x20004f94
 800de78:	20004ffc 	.word	0x20004ffc

0800de7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de84:	f001 f840 	bl	800ef08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800de88:	4b2a      	ldr	r3, [pc, #168]	@ (800df34 <prvAddNewTaskToReadyList+0xb8>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	3301      	adds	r3, #1
 800de8e:	4a29      	ldr	r2, [pc, #164]	@ (800df34 <prvAddNewTaskToReadyList+0xb8>)
 800de90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800de92:	4b29      	ldr	r3, [pc, #164]	@ (800df38 <prvAddNewTaskToReadyList+0xbc>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d109      	bne.n	800deae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800de9a:	4a27      	ldr	r2, [pc, #156]	@ (800df38 <prvAddNewTaskToReadyList+0xbc>)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dea0:	4b24      	ldr	r3, [pc, #144]	@ (800df34 <prvAddNewTaskToReadyList+0xb8>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d110      	bne.n	800deca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dea8:	f000 fc10 	bl	800e6cc <prvInitialiseTaskLists>
 800deac:	e00d      	b.n	800deca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800deae:	4b23      	ldr	r3, [pc, #140]	@ (800df3c <prvAddNewTaskToReadyList+0xc0>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d109      	bne.n	800deca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800deb6:	4b20      	ldr	r3, [pc, #128]	@ (800df38 <prvAddNewTaskToReadyList+0xbc>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d802      	bhi.n	800deca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dec4:	4a1c      	ldr	r2, [pc, #112]	@ (800df38 <prvAddNewTaskToReadyList+0xbc>)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800deca:	4b1d      	ldr	r3, [pc, #116]	@ (800df40 <prvAddNewTaskToReadyList+0xc4>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	3301      	adds	r3, #1
 800ded0:	4a1b      	ldr	r2, [pc, #108]	@ (800df40 <prvAddNewTaskToReadyList+0xc4>)
 800ded2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded8:	2201      	movs	r2, #1
 800deda:	409a      	lsls	r2, r3
 800dedc:	4b19      	ldr	r3, [pc, #100]	@ (800df44 <prvAddNewTaskToReadyList+0xc8>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	4a18      	ldr	r2, [pc, #96]	@ (800df44 <prvAddNewTaskToReadyList+0xc8>)
 800dee4:	6013      	str	r3, [r2, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deea:	4613      	mov	r3, r2
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	4413      	add	r3, r2
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	4a15      	ldr	r2, [pc, #84]	@ (800df48 <prvAddNewTaskToReadyList+0xcc>)
 800def4:	441a      	add	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	3304      	adds	r3, #4
 800defa:	4619      	mov	r1, r3
 800defc:	4610      	mov	r0, r2
 800defe:	f7fe fe48 	bl	800cb92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800df02:	f001 f833 	bl	800ef6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800df06:	4b0d      	ldr	r3, [pc, #52]	@ (800df3c <prvAddNewTaskToReadyList+0xc0>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d00e      	beq.n	800df2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800df0e:	4b0a      	ldr	r3, [pc, #40]	@ (800df38 <prvAddNewTaskToReadyList+0xbc>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df18:	429a      	cmp	r2, r3
 800df1a:	d207      	bcs.n	800df2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df1c:	4b0b      	ldr	r3, [pc, #44]	@ (800df4c <prvAddNewTaskToReadyList+0xd0>)
 800df1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df22:	601a      	str	r2, [r3, #0]
 800df24:	f3bf 8f4f 	dsb	sy
 800df28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df2c:	bf00      	nop
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	200012d8 	.word	0x200012d8
 800df38:	200011d8 	.word	0x200011d8
 800df3c:	200012e4 	.word	0x200012e4
 800df40:	200012f4 	.word	0x200012f4
 800df44:	200012e0 	.word	0x200012e0
 800df48:	200011dc 	.word	0x200011dc
 800df4c:	e000ed04 	.word	0xe000ed04

0800df50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800df58:	2300      	movs	r3, #0
 800df5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d018      	beq.n	800df94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800df62:	4b14      	ldr	r3, [pc, #80]	@ (800dfb4 <vTaskDelay+0x64>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00b      	beq.n	800df82 <vTaskDelay+0x32>
	__asm volatile
 800df6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df6e:	f383 8811 	msr	BASEPRI, r3
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	60bb      	str	r3, [r7, #8]
}
 800df7c:	bf00      	nop
 800df7e:	bf00      	nop
 800df80:	e7fd      	b.n	800df7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800df82:	f000 f885 	bl	800e090 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800df86:	2100      	movs	r1, #0
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 fe23 	bl	800ebd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800df8e:	f000 f88d 	bl	800e0ac <xTaskResumeAll>
 800df92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d107      	bne.n	800dfaa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800df9a:	4b07      	ldr	r3, [pc, #28]	@ (800dfb8 <vTaskDelay+0x68>)
 800df9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfa0:	601a      	str	r2, [r3, #0]
 800dfa2:	f3bf 8f4f 	dsb	sy
 800dfa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfaa:	bf00      	nop
 800dfac:	3710      	adds	r7, #16
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	20001300 	.word	0x20001300
 800dfb8:	e000ed04 	.word	0xe000ed04

0800dfbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b08a      	sub	sp, #40	@ 0x28
 800dfc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dfca:	463a      	mov	r2, r7
 800dfcc:	1d39      	adds	r1, r7, #4
 800dfce:	f107 0308 	add.w	r3, r7, #8
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7f4 fe54 	bl	8002c80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dfd8:	6839      	ldr	r1, [r7, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	68ba      	ldr	r2, [r7, #8]
 800dfde:	9202      	str	r2, [sp, #8]
 800dfe0:	9301      	str	r3, [sp, #4]
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	9300      	str	r3, [sp, #0]
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	460a      	mov	r2, r1
 800dfea:	4921      	ldr	r1, [pc, #132]	@ (800e070 <vTaskStartScheduler+0xb4>)
 800dfec:	4821      	ldr	r0, [pc, #132]	@ (800e074 <vTaskStartScheduler+0xb8>)
 800dfee:	f7ff fdff 	bl	800dbf0 <xTaskCreateStatic>
 800dff2:	4603      	mov	r3, r0
 800dff4:	4a20      	ldr	r2, [pc, #128]	@ (800e078 <vTaskStartScheduler+0xbc>)
 800dff6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dff8:	4b1f      	ldr	r3, [pc, #124]	@ (800e078 <vTaskStartScheduler+0xbc>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d002      	beq.n	800e006 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e000:	2301      	movs	r3, #1
 800e002:	617b      	str	r3, [r7, #20]
 800e004:	e001      	b.n	800e00a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e006:	2300      	movs	r3, #0
 800e008:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	2b01      	cmp	r3, #1
 800e00e:	d11b      	bne.n	800e048 <vTaskStartScheduler+0x8c>
	__asm volatile
 800e010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e014:	f383 8811 	msr	BASEPRI, r3
 800e018:	f3bf 8f6f 	isb	sy
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	613b      	str	r3, [r7, #16]
}
 800e022:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e024:	4b15      	ldr	r3, [pc, #84]	@ (800e07c <vTaskStartScheduler+0xc0>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	334c      	adds	r3, #76	@ 0x4c
 800e02a:	4a15      	ldr	r2, [pc, #84]	@ (800e080 <vTaskStartScheduler+0xc4>)
 800e02c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e02e:	4b15      	ldr	r3, [pc, #84]	@ (800e084 <vTaskStartScheduler+0xc8>)
 800e030:	f04f 32ff 	mov.w	r2, #4294967295
 800e034:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e036:	4b14      	ldr	r3, [pc, #80]	@ (800e088 <vTaskStartScheduler+0xcc>)
 800e038:	2201      	movs	r2, #1
 800e03a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e03c:	4b13      	ldr	r3, [pc, #76]	@ (800e08c <vTaskStartScheduler+0xd0>)
 800e03e:	2200      	movs	r2, #0
 800e040:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e042:	f000 febd 	bl	800edc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e046:	e00f      	b.n	800e068 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e04e:	d10b      	bne.n	800e068 <vTaskStartScheduler+0xac>
	__asm volatile
 800e050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e054:	f383 8811 	msr	BASEPRI, r3
 800e058:	f3bf 8f6f 	isb	sy
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	60fb      	str	r3, [r7, #12]
}
 800e062:	bf00      	nop
 800e064:	bf00      	nop
 800e066:	e7fd      	b.n	800e064 <vTaskStartScheduler+0xa8>
}
 800e068:	bf00      	nop
 800e06a:	3718      	adds	r7, #24
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	08012808 	.word	0x08012808
 800e074:	0800e699 	.word	0x0800e699
 800e078:	200012fc 	.word	0x200012fc
 800e07c:	200011d8 	.word	0x200011d8
 800e080:	2000001c 	.word	0x2000001c
 800e084:	200012f8 	.word	0x200012f8
 800e088:	200012e4 	.word	0x200012e4
 800e08c:	200012dc 	.word	0x200012dc

0800e090 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e090:	b480      	push	{r7}
 800e092:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e094:	4b04      	ldr	r3, [pc, #16]	@ (800e0a8 <vTaskSuspendAll+0x18>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	3301      	adds	r3, #1
 800e09a:	4a03      	ldr	r2, [pc, #12]	@ (800e0a8 <vTaskSuspendAll+0x18>)
 800e09c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e09e:	bf00      	nop
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr
 800e0a8:	20001300 	.word	0x20001300

0800e0ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e0ba:	4b42      	ldr	r3, [pc, #264]	@ (800e1c4 <xTaskResumeAll+0x118>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d10b      	bne.n	800e0da <xTaskResumeAll+0x2e>
	__asm volatile
 800e0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c6:	f383 8811 	msr	BASEPRI, r3
 800e0ca:	f3bf 8f6f 	isb	sy
 800e0ce:	f3bf 8f4f 	dsb	sy
 800e0d2:	603b      	str	r3, [r7, #0]
}
 800e0d4:	bf00      	nop
 800e0d6:	bf00      	nop
 800e0d8:	e7fd      	b.n	800e0d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e0da:	f000 ff15 	bl	800ef08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e0de:	4b39      	ldr	r3, [pc, #228]	@ (800e1c4 <xTaskResumeAll+0x118>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3b01      	subs	r3, #1
 800e0e4:	4a37      	ldr	r2, [pc, #220]	@ (800e1c4 <xTaskResumeAll+0x118>)
 800e0e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0e8:	4b36      	ldr	r3, [pc, #216]	@ (800e1c4 <xTaskResumeAll+0x118>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d161      	bne.n	800e1b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e0f0:	4b35      	ldr	r3, [pc, #212]	@ (800e1c8 <xTaskResumeAll+0x11c>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d05d      	beq.n	800e1b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0f8:	e02e      	b.n	800e158 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0fa:	4b34      	ldr	r3, [pc, #208]	@ (800e1cc <xTaskResumeAll+0x120>)
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3318      	adds	r3, #24
 800e106:	4618      	mov	r0, r3
 800e108:	f7fe fda0 	bl	800cc4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	3304      	adds	r3, #4
 800e110:	4618      	mov	r0, r3
 800e112:	f7fe fd9b 	bl	800cc4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e11a:	2201      	movs	r2, #1
 800e11c:	409a      	lsls	r2, r3
 800e11e:	4b2c      	ldr	r3, [pc, #176]	@ (800e1d0 <xTaskResumeAll+0x124>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	4313      	orrs	r3, r2
 800e124:	4a2a      	ldr	r2, [pc, #168]	@ (800e1d0 <xTaskResumeAll+0x124>)
 800e126:	6013      	str	r3, [r2, #0]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e12c:	4613      	mov	r3, r2
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	4413      	add	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4a27      	ldr	r2, [pc, #156]	@ (800e1d4 <xTaskResumeAll+0x128>)
 800e136:	441a      	add	r2, r3
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	3304      	adds	r3, #4
 800e13c:	4619      	mov	r1, r3
 800e13e:	4610      	mov	r0, r2
 800e140:	f7fe fd27 	bl	800cb92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e148:	4b23      	ldr	r3, [pc, #140]	@ (800e1d8 <xTaskResumeAll+0x12c>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e14e:	429a      	cmp	r2, r3
 800e150:	d302      	bcc.n	800e158 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e152:	4b22      	ldr	r3, [pc, #136]	@ (800e1dc <xTaskResumeAll+0x130>)
 800e154:	2201      	movs	r2, #1
 800e156:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e158:	4b1c      	ldr	r3, [pc, #112]	@ (800e1cc <xTaskResumeAll+0x120>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1cc      	bne.n	800e0fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d001      	beq.n	800e16a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e166:	f000 fb55 	bl	800e814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e16a:	4b1d      	ldr	r3, [pc, #116]	@ (800e1e0 <xTaskResumeAll+0x134>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d010      	beq.n	800e198 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e176:	f000 f859 	bl	800e22c <xTaskIncrementTick>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d002      	beq.n	800e186 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e180:	4b16      	ldr	r3, [pc, #88]	@ (800e1dc <xTaskResumeAll+0x130>)
 800e182:	2201      	movs	r2, #1
 800e184:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	3b01      	subs	r3, #1
 800e18a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d1f1      	bne.n	800e176 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e192:	4b13      	ldr	r3, [pc, #76]	@ (800e1e0 <xTaskResumeAll+0x134>)
 800e194:	2200      	movs	r2, #0
 800e196:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e198:	4b10      	ldr	r3, [pc, #64]	@ (800e1dc <xTaskResumeAll+0x130>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d009      	beq.n	800e1b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e1a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e1e4 <xTaskResumeAll+0x138>)
 800e1a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1aa:	601a      	str	r2, [r3, #0]
 800e1ac:	f3bf 8f4f 	dsb	sy
 800e1b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1b4:	f000 feda 	bl	800ef6c <vPortExitCritical>

	return xAlreadyYielded;
 800e1b8:	68bb      	ldr	r3, [r7, #8]
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3710      	adds	r7, #16
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	20001300 	.word	0x20001300
 800e1c8:	200012d8 	.word	0x200012d8
 800e1cc:	20001298 	.word	0x20001298
 800e1d0:	200012e0 	.word	0x200012e0
 800e1d4:	200011dc 	.word	0x200011dc
 800e1d8:	200011d8 	.word	0x200011d8
 800e1dc:	200012ec 	.word	0x200012ec
 800e1e0:	200012e8 	.word	0x200012e8
 800e1e4:	e000ed04 	.word	0xe000ed04

0800e1e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e1ee:	4b05      	ldr	r3, [pc, #20]	@ (800e204 <xTaskGetTickCount+0x1c>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e1f4:	687b      	ldr	r3, [r7, #4]
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	370c      	adds	r7, #12
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	200012dc 	.word	0x200012dc

0800e208 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e20e:	f000 ff5b 	bl	800f0c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e212:	2300      	movs	r3, #0
 800e214:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e216:	4b04      	ldr	r3, [pc, #16]	@ (800e228 <xTaskGetTickCountFromISR+0x20>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e21c:	683b      	ldr	r3, [r7, #0]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	200012dc 	.word	0x200012dc

0800e22c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b086      	sub	sp, #24
 800e230:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e232:	2300      	movs	r3, #0
 800e234:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e236:	4b53      	ldr	r3, [pc, #332]	@ (800e384 <xTaskIncrementTick+0x158>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	f040 8095 	bne.w	800e36a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e240:	4b51      	ldr	r3, [pc, #324]	@ (800e388 <xTaskIncrementTick+0x15c>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	3301      	adds	r3, #1
 800e246:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e248:	4a4f      	ldr	r2, [pc, #316]	@ (800e388 <xTaskIncrementTick+0x15c>)
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d121      	bne.n	800e298 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e254:	4b4d      	ldr	r3, [pc, #308]	@ (800e38c <xTaskIncrementTick+0x160>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00b      	beq.n	800e276 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e262:	f383 8811 	msr	BASEPRI, r3
 800e266:	f3bf 8f6f 	isb	sy
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	603b      	str	r3, [r7, #0]
}
 800e270:	bf00      	nop
 800e272:	bf00      	nop
 800e274:	e7fd      	b.n	800e272 <xTaskIncrementTick+0x46>
 800e276:	4b45      	ldr	r3, [pc, #276]	@ (800e38c <xTaskIncrementTick+0x160>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	60fb      	str	r3, [r7, #12]
 800e27c:	4b44      	ldr	r3, [pc, #272]	@ (800e390 <xTaskIncrementTick+0x164>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a42      	ldr	r2, [pc, #264]	@ (800e38c <xTaskIncrementTick+0x160>)
 800e282:	6013      	str	r3, [r2, #0]
 800e284:	4a42      	ldr	r2, [pc, #264]	@ (800e390 <xTaskIncrementTick+0x164>)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	6013      	str	r3, [r2, #0]
 800e28a:	4b42      	ldr	r3, [pc, #264]	@ (800e394 <xTaskIncrementTick+0x168>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	3301      	adds	r3, #1
 800e290:	4a40      	ldr	r2, [pc, #256]	@ (800e394 <xTaskIncrementTick+0x168>)
 800e292:	6013      	str	r3, [r2, #0]
 800e294:	f000 fabe 	bl	800e814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e298:	4b3f      	ldr	r3, [pc, #252]	@ (800e398 <xTaskIncrementTick+0x16c>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	693a      	ldr	r2, [r7, #16]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d348      	bcc.n	800e334 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2a2:	4b3a      	ldr	r3, [pc, #232]	@ (800e38c <xTaskIncrementTick+0x160>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d104      	bne.n	800e2b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2ac:	4b3a      	ldr	r3, [pc, #232]	@ (800e398 <xTaskIncrementTick+0x16c>)
 800e2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b2:	601a      	str	r2, [r3, #0]
					break;
 800e2b4:	e03e      	b.n	800e334 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2b6:	4b35      	ldr	r3, [pc, #212]	@ (800e38c <xTaskIncrementTick+0x160>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e2c6:	693a      	ldr	r2, [r7, #16]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d203      	bcs.n	800e2d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e2ce:	4a32      	ldr	r2, [pc, #200]	@ (800e398 <xTaskIncrementTick+0x16c>)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e2d4:	e02e      	b.n	800e334 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	3304      	adds	r3, #4
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fe fcb6 	bl	800cc4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d004      	beq.n	800e2f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	3318      	adds	r3, #24
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fe fcad 	bl	800cc4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	409a      	lsls	r2, r3
 800e2fa:	4b28      	ldr	r3, [pc, #160]	@ (800e39c <xTaskIncrementTick+0x170>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4313      	orrs	r3, r2
 800e300:	4a26      	ldr	r2, [pc, #152]	@ (800e39c <xTaskIncrementTick+0x170>)
 800e302:	6013      	str	r3, [r2, #0]
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e308:	4613      	mov	r3, r2
 800e30a:	009b      	lsls	r3, r3, #2
 800e30c:	4413      	add	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4a23      	ldr	r2, [pc, #140]	@ (800e3a0 <xTaskIncrementTick+0x174>)
 800e312:	441a      	add	r2, r3
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	3304      	adds	r3, #4
 800e318:	4619      	mov	r1, r3
 800e31a:	4610      	mov	r0, r2
 800e31c:	f7fe fc39 	bl	800cb92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e324:	4b1f      	ldr	r3, [pc, #124]	@ (800e3a4 <xTaskIncrementTick+0x178>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d3b9      	bcc.n	800e2a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e32e:	2301      	movs	r3, #1
 800e330:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e332:	e7b6      	b.n	800e2a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e334:	4b1b      	ldr	r3, [pc, #108]	@ (800e3a4 <xTaskIncrementTick+0x178>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e33a:	4919      	ldr	r1, [pc, #100]	@ (800e3a0 <xTaskIncrementTick+0x174>)
 800e33c:	4613      	mov	r3, r2
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	4413      	add	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	440b      	add	r3, r1
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d901      	bls.n	800e350 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e34c:	2301      	movs	r3, #1
 800e34e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800e350:	4b15      	ldr	r3, [pc, #84]	@ (800e3a8 <xTaskIncrementTick+0x17c>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d101      	bne.n	800e35c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800e358:	f7f4 fc83 	bl	8002c62 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e35c:	4b13      	ldr	r3, [pc, #76]	@ (800e3ac <xTaskIncrementTick+0x180>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d009      	beq.n	800e378 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800e364:	2301      	movs	r3, #1
 800e366:	617b      	str	r3, [r7, #20]
 800e368:	e006      	b.n	800e378 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e36a:	4b0f      	ldr	r3, [pc, #60]	@ (800e3a8 <xTaskIncrementTick+0x17c>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	3301      	adds	r3, #1
 800e370:	4a0d      	ldr	r2, [pc, #52]	@ (800e3a8 <xTaskIncrementTick+0x17c>)
 800e372:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800e374:	f7f4 fc75 	bl	8002c62 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800e378:	697b      	ldr	r3, [r7, #20]
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3718      	adds	r7, #24
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	20001300 	.word	0x20001300
 800e388:	200012dc 	.word	0x200012dc
 800e38c:	20001290 	.word	0x20001290
 800e390:	20001294 	.word	0x20001294
 800e394:	200012f0 	.word	0x200012f0
 800e398:	200012f8 	.word	0x200012f8
 800e39c:	200012e0 	.word	0x200012e0
 800e3a0:	200011dc 	.word	0x200011dc
 800e3a4:	200011d8 	.word	0x200011d8
 800e3a8:	200012e8 	.word	0x200012e8
 800e3ac:	200012ec 	.word	0x200012ec

0800e3b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e3b6:	4b2a      	ldr	r3, [pc, #168]	@ (800e460 <vTaskSwitchContext+0xb0>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d003      	beq.n	800e3c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e3be:	4b29      	ldr	r3, [pc, #164]	@ (800e464 <vTaskSwitchContext+0xb4>)
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e3c4:	e045      	b.n	800e452 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800e3c6:	4b27      	ldr	r3, [pc, #156]	@ (800e464 <vTaskSwitchContext+0xb4>)
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3cc:	4b26      	ldr	r3, [pc, #152]	@ (800e468 <vTaskSwitchContext+0xb8>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	fab3 f383 	clz	r3, r3
 800e3d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e3da:	7afb      	ldrb	r3, [r7, #11]
 800e3dc:	f1c3 031f 	rsb	r3, r3, #31
 800e3e0:	617b      	str	r3, [r7, #20]
 800e3e2:	4922      	ldr	r1, [pc, #136]	@ (800e46c <vTaskSwitchContext+0xbc>)
 800e3e4:	697a      	ldr	r2, [r7, #20]
 800e3e6:	4613      	mov	r3, r2
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	4413      	add	r3, r2
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	440b      	add	r3, r1
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10b      	bne.n	800e40e <vTaskSwitchContext+0x5e>
	__asm volatile
 800e3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fa:	f383 8811 	msr	BASEPRI, r3
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	607b      	str	r3, [r7, #4]
}
 800e408:	bf00      	nop
 800e40a:	bf00      	nop
 800e40c:	e7fd      	b.n	800e40a <vTaskSwitchContext+0x5a>
 800e40e:	697a      	ldr	r2, [r7, #20]
 800e410:	4613      	mov	r3, r2
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	4413      	add	r3, r2
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	4a14      	ldr	r2, [pc, #80]	@ (800e46c <vTaskSwitchContext+0xbc>)
 800e41a:	4413      	add	r3, r2
 800e41c:	613b      	str	r3, [r7, #16]
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	685a      	ldr	r2, [r3, #4]
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	605a      	str	r2, [r3, #4]
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	685a      	ldr	r2, [r3, #4]
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	3308      	adds	r3, #8
 800e430:	429a      	cmp	r2, r3
 800e432:	d104      	bne.n	800e43e <vTaskSwitchContext+0x8e>
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	685a      	ldr	r2, [r3, #4]
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	605a      	str	r2, [r3, #4]
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	4a0a      	ldr	r2, [pc, #40]	@ (800e470 <vTaskSwitchContext+0xc0>)
 800e446:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e448:	4b09      	ldr	r3, [pc, #36]	@ (800e470 <vTaskSwitchContext+0xc0>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	334c      	adds	r3, #76	@ 0x4c
 800e44e:	4a09      	ldr	r2, [pc, #36]	@ (800e474 <vTaskSwitchContext+0xc4>)
 800e450:	6013      	str	r3, [r2, #0]
}
 800e452:	bf00      	nop
 800e454:	371c      	adds	r7, #28
 800e456:	46bd      	mov	sp, r7
 800e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45c:	4770      	bx	lr
 800e45e:	bf00      	nop
 800e460:	20001300 	.word	0x20001300
 800e464:	200012ec 	.word	0x200012ec
 800e468:	200012e0 	.word	0x200012e0
 800e46c:	200011dc 	.word	0x200011dc
 800e470:	200011d8 	.word	0x200011d8
 800e474:	2000001c 	.word	0x2000001c

0800e478 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d10b      	bne.n	800e4a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e48c:	f383 8811 	msr	BASEPRI, r3
 800e490:	f3bf 8f6f 	isb	sy
 800e494:	f3bf 8f4f 	dsb	sy
 800e498:	60fb      	str	r3, [r7, #12]
}
 800e49a:	bf00      	nop
 800e49c:	bf00      	nop
 800e49e:	e7fd      	b.n	800e49c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4a0:	4b07      	ldr	r3, [pc, #28]	@ (800e4c0 <vTaskPlaceOnEventList+0x48>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3318      	adds	r3, #24
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f7fe fb96 	bl	800cbda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e4ae:	2101      	movs	r1, #1
 800e4b0:	6838      	ldr	r0, [r7, #0]
 800e4b2:	f000 fb8f 	bl	800ebd4 <prvAddCurrentTaskToDelayedList>
}
 800e4b6:	bf00      	nop
 800e4b8:	3710      	adds	r7, #16
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	200011d8 	.word	0x200011d8

0800e4c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d10b      	bne.n	800e4f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	60fb      	str	r3, [r7, #12]
}
 800e4ec:	bf00      	nop
 800e4ee:	bf00      	nop
 800e4f0:	e7fd      	b.n	800e4ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	3318      	adds	r3, #24
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fe fba8 	bl	800cc4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4fc:	4b1d      	ldr	r3, [pc, #116]	@ (800e574 <xTaskRemoveFromEventList+0xb0>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d11c      	bne.n	800e53e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	3304      	adds	r3, #4
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fe fb9f 	bl	800cc4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e512:	2201      	movs	r2, #1
 800e514:	409a      	lsls	r2, r3
 800e516:	4b18      	ldr	r3, [pc, #96]	@ (800e578 <xTaskRemoveFromEventList+0xb4>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4313      	orrs	r3, r2
 800e51c:	4a16      	ldr	r2, [pc, #88]	@ (800e578 <xTaskRemoveFromEventList+0xb4>)
 800e51e:	6013      	str	r3, [r2, #0]
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e524:	4613      	mov	r3, r2
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	4a13      	ldr	r2, [pc, #76]	@ (800e57c <xTaskRemoveFromEventList+0xb8>)
 800e52e:	441a      	add	r2, r3
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	3304      	adds	r3, #4
 800e534:	4619      	mov	r1, r3
 800e536:	4610      	mov	r0, r2
 800e538:	f7fe fb2b 	bl	800cb92 <vListInsertEnd>
 800e53c:	e005      	b.n	800e54a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	3318      	adds	r3, #24
 800e542:	4619      	mov	r1, r3
 800e544:	480e      	ldr	r0, [pc, #56]	@ (800e580 <xTaskRemoveFromEventList+0xbc>)
 800e546:	f7fe fb24 	bl	800cb92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e54e:	4b0d      	ldr	r3, [pc, #52]	@ (800e584 <xTaskRemoveFromEventList+0xc0>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e554:	429a      	cmp	r2, r3
 800e556:	d905      	bls.n	800e564 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e558:	2301      	movs	r3, #1
 800e55a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e55c:	4b0a      	ldr	r3, [pc, #40]	@ (800e588 <xTaskRemoveFromEventList+0xc4>)
 800e55e:	2201      	movs	r2, #1
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	e001      	b.n	800e568 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e564:	2300      	movs	r3, #0
 800e566:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e568:	697b      	ldr	r3, [r7, #20]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3718      	adds	r7, #24
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	20001300 	.word	0x20001300
 800e578:	200012e0 	.word	0x200012e0
 800e57c:	200011dc 	.word	0x200011dc
 800e580:	20001298 	.word	0x20001298
 800e584:	200011d8 	.word	0x200011d8
 800e588:	200012ec 	.word	0x200012ec

0800e58c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e594:	4b06      	ldr	r3, [pc, #24]	@ (800e5b0 <vTaskInternalSetTimeOutState+0x24>)
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e59c:	4b05      	ldr	r3, [pc, #20]	@ (800e5b4 <vTaskInternalSetTimeOutState+0x28>)
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	605a      	str	r2, [r3, #4]
}
 800e5a4:	bf00      	nop
 800e5a6:	370c      	adds	r7, #12
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr
 800e5b0:	200012f0 	.word	0x200012f0
 800e5b4:	200012dc 	.word	0x200012dc

0800e5b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b088      	sub	sp, #32
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d10b      	bne.n	800e5e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5cc:	f383 8811 	msr	BASEPRI, r3
 800e5d0:	f3bf 8f6f 	isb	sy
 800e5d4:	f3bf 8f4f 	dsb	sy
 800e5d8:	613b      	str	r3, [r7, #16]
}
 800e5da:	bf00      	nop
 800e5dc:	bf00      	nop
 800e5de:	e7fd      	b.n	800e5dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d10b      	bne.n	800e5fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ea:	f383 8811 	msr	BASEPRI, r3
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f3bf 8f4f 	dsb	sy
 800e5f6:	60fb      	str	r3, [r7, #12]
}
 800e5f8:	bf00      	nop
 800e5fa:	bf00      	nop
 800e5fc:	e7fd      	b.n	800e5fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e5fe:	f000 fc83 	bl	800ef08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e602:	4b1d      	ldr	r3, [pc, #116]	@ (800e678 <xTaskCheckForTimeOut+0xc0>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	69ba      	ldr	r2, [r7, #24]
 800e60e:	1ad3      	subs	r3, r2, r3
 800e610:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e61a:	d102      	bne.n	800e622 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e61c:	2300      	movs	r3, #0
 800e61e:	61fb      	str	r3, [r7, #28]
 800e620:	e023      	b.n	800e66a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	4b15      	ldr	r3, [pc, #84]	@ (800e67c <xTaskCheckForTimeOut+0xc4>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d007      	beq.n	800e63e <xTaskCheckForTimeOut+0x86>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	69ba      	ldr	r2, [r7, #24]
 800e634:	429a      	cmp	r2, r3
 800e636:	d302      	bcc.n	800e63e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e638:	2301      	movs	r3, #1
 800e63a:	61fb      	str	r3, [r7, #28]
 800e63c:	e015      	b.n	800e66a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	697a      	ldr	r2, [r7, #20]
 800e644:	429a      	cmp	r2, r3
 800e646:	d20b      	bcs.n	800e660 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	1ad2      	subs	r2, r2, r3
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f7ff ff99 	bl	800e58c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e65a:	2300      	movs	r3, #0
 800e65c:	61fb      	str	r3, [r7, #28]
 800e65e:	e004      	b.n	800e66a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	2200      	movs	r2, #0
 800e664:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e666:	2301      	movs	r3, #1
 800e668:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e66a:	f000 fc7f 	bl	800ef6c <vPortExitCritical>

	return xReturn;
 800e66e:	69fb      	ldr	r3, [r7, #28]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3720      	adds	r7, #32
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	200012dc 	.word	0x200012dc
 800e67c:	200012f0 	.word	0x200012f0

0800e680 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e680:	b480      	push	{r7}
 800e682:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e684:	4b03      	ldr	r3, [pc, #12]	@ (800e694 <vTaskMissedYield+0x14>)
 800e686:	2201      	movs	r2, #1
 800e688:	601a      	str	r2, [r3, #0]
}
 800e68a:	bf00      	nop
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr
 800e694:	200012ec 	.word	0x200012ec

0800e698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6a0:	f000 f854 	bl	800e74c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6a4:	4b07      	ldr	r3, [pc, #28]	@ (800e6c4 <prvIdleTask+0x2c>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d907      	bls.n	800e6bc <prvIdleTask+0x24>
			{
				taskYIELD();
 800e6ac:	4b06      	ldr	r3, [pc, #24]	@ (800e6c8 <prvIdleTask+0x30>)
 800e6ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6b2:	601a      	str	r2, [r3, #0]
 800e6b4:	f3bf 8f4f 	dsb	sy
 800e6b8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e6bc:	f7f4 faca 	bl	8002c54 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e6c0:	e7ee      	b.n	800e6a0 <prvIdleTask+0x8>
 800e6c2:	bf00      	nop
 800e6c4:	200011dc 	.word	0x200011dc
 800e6c8:	e000ed04 	.word	0xe000ed04

0800e6cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	607b      	str	r3, [r7, #4]
 800e6d6:	e00c      	b.n	800e6f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	4613      	mov	r3, r2
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	4413      	add	r3, r2
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	4a12      	ldr	r2, [pc, #72]	@ (800e72c <prvInitialiseTaskLists+0x60>)
 800e6e4:	4413      	add	r3, r2
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fe fa26 	bl	800cb38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	607b      	str	r3, [r7, #4]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2b06      	cmp	r3, #6
 800e6f6:	d9ef      	bls.n	800e6d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e6f8:	480d      	ldr	r0, [pc, #52]	@ (800e730 <prvInitialiseTaskLists+0x64>)
 800e6fa:	f7fe fa1d 	bl	800cb38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e6fe:	480d      	ldr	r0, [pc, #52]	@ (800e734 <prvInitialiseTaskLists+0x68>)
 800e700:	f7fe fa1a 	bl	800cb38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e704:	480c      	ldr	r0, [pc, #48]	@ (800e738 <prvInitialiseTaskLists+0x6c>)
 800e706:	f7fe fa17 	bl	800cb38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e70a:	480c      	ldr	r0, [pc, #48]	@ (800e73c <prvInitialiseTaskLists+0x70>)
 800e70c:	f7fe fa14 	bl	800cb38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e710:	480b      	ldr	r0, [pc, #44]	@ (800e740 <prvInitialiseTaskLists+0x74>)
 800e712:	f7fe fa11 	bl	800cb38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e716:	4b0b      	ldr	r3, [pc, #44]	@ (800e744 <prvInitialiseTaskLists+0x78>)
 800e718:	4a05      	ldr	r2, [pc, #20]	@ (800e730 <prvInitialiseTaskLists+0x64>)
 800e71a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e71c:	4b0a      	ldr	r3, [pc, #40]	@ (800e748 <prvInitialiseTaskLists+0x7c>)
 800e71e:	4a05      	ldr	r2, [pc, #20]	@ (800e734 <prvInitialiseTaskLists+0x68>)
 800e720:	601a      	str	r2, [r3, #0]
}
 800e722:	bf00      	nop
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	200011dc 	.word	0x200011dc
 800e730:	20001268 	.word	0x20001268
 800e734:	2000127c 	.word	0x2000127c
 800e738:	20001298 	.word	0x20001298
 800e73c:	200012ac 	.word	0x200012ac
 800e740:	200012c4 	.word	0x200012c4
 800e744:	20001290 	.word	0x20001290
 800e748:	20001294 	.word	0x20001294

0800e74c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e752:	e019      	b.n	800e788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e754:	f000 fbd8 	bl	800ef08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e758:	4b10      	ldr	r3, [pc, #64]	@ (800e79c <prvCheckTasksWaitingTermination+0x50>)
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	68db      	ldr	r3, [r3, #12]
 800e75e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	3304      	adds	r3, #4
 800e764:	4618      	mov	r0, r3
 800e766:	f7fe fa71 	bl	800cc4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e76a:	4b0d      	ldr	r3, [pc, #52]	@ (800e7a0 <prvCheckTasksWaitingTermination+0x54>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	3b01      	subs	r3, #1
 800e770:	4a0b      	ldr	r2, [pc, #44]	@ (800e7a0 <prvCheckTasksWaitingTermination+0x54>)
 800e772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e774:	4b0b      	ldr	r3, [pc, #44]	@ (800e7a4 <prvCheckTasksWaitingTermination+0x58>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	3b01      	subs	r3, #1
 800e77a:	4a0a      	ldr	r2, [pc, #40]	@ (800e7a4 <prvCheckTasksWaitingTermination+0x58>)
 800e77c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e77e:	f000 fbf5 	bl	800ef6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f000 f810 	bl	800e7a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e788:	4b06      	ldr	r3, [pc, #24]	@ (800e7a4 <prvCheckTasksWaitingTermination+0x58>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d1e1      	bne.n	800e754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e790:	bf00      	nop
 800e792:	bf00      	nop
 800e794:	3708      	adds	r7, #8
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	200012ac 	.word	0x200012ac
 800e7a0:	200012d8 	.word	0x200012d8
 800e7a4:	200012c0 	.word	0x200012c0

0800e7a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	334c      	adds	r3, #76	@ 0x4c
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f001 fd6f 	bl	8010298 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d108      	bne.n	800e7d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f000 fd93 	bl	800f2f4 <vPortFree>
				vPortFree( pxTCB );
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 fd90 	bl	800f2f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e7d4:	e019      	b.n	800e80a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d103      	bne.n	800e7e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 fd87 	bl	800f2f4 <vPortFree>
	}
 800e7e6:	e010      	b.n	800e80a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d00b      	beq.n	800e80a <prvDeleteTCB+0x62>
	__asm volatile
 800e7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7f6:	f383 8811 	msr	BASEPRI, r3
 800e7fa:	f3bf 8f6f 	isb	sy
 800e7fe:	f3bf 8f4f 	dsb	sy
 800e802:	60fb      	str	r3, [r7, #12]
}
 800e804:	bf00      	nop
 800e806:	bf00      	nop
 800e808:	e7fd      	b.n	800e806 <prvDeleteTCB+0x5e>
	}
 800e80a:	bf00      	nop
 800e80c:	3710      	adds	r7, #16
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
	...

0800e814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e81a:	4b0c      	ldr	r3, [pc, #48]	@ (800e84c <prvResetNextTaskUnblockTime+0x38>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d104      	bne.n	800e82e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e824:	4b0a      	ldr	r3, [pc, #40]	@ (800e850 <prvResetNextTaskUnblockTime+0x3c>)
 800e826:	f04f 32ff 	mov.w	r2, #4294967295
 800e82a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e82c:	e008      	b.n	800e840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e82e:	4b07      	ldr	r3, [pc, #28]	@ (800e84c <prvResetNextTaskUnblockTime+0x38>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	4a04      	ldr	r2, [pc, #16]	@ (800e850 <prvResetNextTaskUnblockTime+0x3c>)
 800e83e:	6013      	str	r3, [r2, #0]
}
 800e840:	bf00      	nop
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr
 800e84c:	20001290 	.word	0x20001290
 800e850:	200012f8 	.word	0x200012f8

0800e854 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e854:	b480      	push	{r7}
 800e856:	b083      	sub	sp, #12
 800e858:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e85a:	4b0b      	ldr	r3, [pc, #44]	@ (800e888 <xTaskGetSchedulerState+0x34>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d102      	bne.n	800e868 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e862:	2301      	movs	r3, #1
 800e864:	607b      	str	r3, [r7, #4]
 800e866:	e008      	b.n	800e87a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e868:	4b08      	ldr	r3, [pc, #32]	@ (800e88c <xTaskGetSchedulerState+0x38>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d102      	bne.n	800e876 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e870:	2302      	movs	r3, #2
 800e872:	607b      	str	r3, [r7, #4]
 800e874:	e001      	b.n	800e87a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e876:	2300      	movs	r3, #0
 800e878:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e87a:	687b      	ldr	r3, [r7, #4]
	}
 800e87c:	4618      	mov	r0, r3
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr
 800e888:	200012e4 	.word	0x200012e4
 800e88c:	20001300 	.word	0x20001300

0800e890 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e89c:	2300      	movs	r3, #0
 800e89e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d05e      	beq.n	800e964 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8aa:	4b31      	ldr	r3, [pc, #196]	@ (800e970 <xTaskPriorityInherit+0xe0>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d24e      	bcs.n	800e952 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	699b      	ldr	r3, [r3, #24]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	db06      	blt.n	800e8ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8bc:	4b2c      	ldr	r3, [pc, #176]	@ (800e970 <xTaskPriorityInherit+0xe0>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8c2:	f1c3 0207 	rsb	r2, r3, #7
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	6959      	ldr	r1, [r3, #20]
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4413      	add	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4a26      	ldr	r2, [pc, #152]	@ (800e974 <xTaskPriorityInherit+0xe4>)
 800e8dc:	4413      	add	r3, r2
 800e8de:	4299      	cmp	r1, r3
 800e8e0:	d12f      	bne.n	800e942 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	3304      	adds	r3, #4
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fe f9b0 	bl	800cc4c <uxListRemove>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d10a      	bne.n	800e908 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8fc:	43da      	mvns	r2, r3
 800e8fe:	4b1e      	ldr	r3, [pc, #120]	@ (800e978 <xTaskPriorityInherit+0xe8>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4013      	ands	r3, r2
 800e904:	4a1c      	ldr	r2, [pc, #112]	@ (800e978 <xTaskPriorityInherit+0xe8>)
 800e906:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e908:	4b19      	ldr	r3, [pc, #100]	@ (800e970 <xTaskPriorityInherit+0xe0>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e916:	2201      	movs	r2, #1
 800e918:	409a      	lsls	r2, r3
 800e91a:	4b17      	ldr	r3, [pc, #92]	@ (800e978 <xTaskPriorityInherit+0xe8>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4313      	orrs	r3, r2
 800e920:	4a15      	ldr	r2, [pc, #84]	@ (800e978 <xTaskPriorityInherit+0xe8>)
 800e922:	6013      	str	r3, [r2, #0]
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e928:	4613      	mov	r3, r2
 800e92a:	009b      	lsls	r3, r3, #2
 800e92c:	4413      	add	r3, r2
 800e92e:	009b      	lsls	r3, r3, #2
 800e930:	4a10      	ldr	r2, [pc, #64]	@ (800e974 <xTaskPriorityInherit+0xe4>)
 800e932:	441a      	add	r2, r3
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	3304      	adds	r3, #4
 800e938:	4619      	mov	r1, r3
 800e93a:	4610      	mov	r0, r2
 800e93c:	f7fe f929 	bl	800cb92 <vListInsertEnd>
 800e940:	e004      	b.n	800e94c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e942:	4b0b      	ldr	r3, [pc, #44]	@ (800e970 <xTaskPriorityInherit+0xe0>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e94c:	2301      	movs	r3, #1
 800e94e:	60fb      	str	r3, [r7, #12]
 800e950:	e008      	b.n	800e964 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e956:	4b06      	ldr	r3, [pc, #24]	@ (800e970 <xTaskPriorityInherit+0xe0>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d201      	bcs.n	800e964 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e960:	2301      	movs	r3, #1
 800e962:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e964:	68fb      	ldr	r3, [r7, #12]
	}
 800e966:	4618      	mov	r0, r3
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	200011d8 	.word	0x200011d8
 800e974:	200011dc 	.word	0x200011dc
 800e978:	200012e0 	.word	0x200012e0

0800e97c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e988:	2300      	movs	r3, #0
 800e98a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d070      	beq.n	800ea74 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e992:	4b3b      	ldr	r3, [pc, #236]	@ (800ea80 <xTaskPriorityDisinherit+0x104>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	693a      	ldr	r2, [r7, #16]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d00b      	beq.n	800e9b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9a0:	f383 8811 	msr	BASEPRI, r3
 800e9a4:	f3bf 8f6f 	isb	sy
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	60fb      	str	r3, [r7, #12]
}
 800e9ae:	bf00      	nop
 800e9b0:	bf00      	nop
 800e9b2:	e7fd      	b.n	800e9b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d10b      	bne.n	800e9d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c0:	f383 8811 	msr	BASEPRI, r3
 800e9c4:	f3bf 8f6f 	isb	sy
 800e9c8:	f3bf 8f4f 	dsb	sy
 800e9cc:	60bb      	str	r3, [r7, #8]
}
 800e9ce:	bf00      	nop
 800e9d0:	bf00      	nop
 800e9d2:	e7fd      	b.n	800e9d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e9d8:	1e5a      	subs	r2, r3, #1
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d044      	beq.n	800ea74 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d140      	bne.n	800ea74 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	3304      	adds	r3, #4
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fe f928 	bl	800cc4c <uxListRemove>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d115      	bne.n	800ea2e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea06:	491f      	ldr	r1, [pc, #124]	@ (800ea84 <xTaskPriorityDisinherit+0x108>)
 800ea08:	4613      	mov	r3, r2
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	4413      	add	r3, r2
 800ea0e:	009b      	lsls	r3, r3, #2
 800ea10:	440b      	add	r3, r1
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d10a      	bne.n	800ea2e <xTaskPriorityDisinherit+0xb2>
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea22:	43da      	mvns	r2, r3
 800ea24:	4b18      	ldr	r3, [pc, #96]	@ (800ea88 <xTaskPriorityDisinherit+0x10c>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4013      	ands	r3, r2
 800ea2a:	4a17      	ldr	r2, [pc, #92]	@ (800ea88 <xTaskPriorityDisinherit+0x10c>)
 800ea2c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea3a:	f1c3 0207 	rsb	r2, r3, #7
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea46:	2201      	movs	r2, #1
 800ea48:	409a      	lsls	r2, r3
 800ea4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ea88 <xTaskPriorityDisinherit+0x10c>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	4a0d      	ldr	r2, [pc, #52]	@ (800ea88 <xTaskPriorityDisinherit+0x10c>)
 800ea52:	6013      	str	r3, [r2, #0]
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea58:	4613      	mov	r3, r2
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	4413      	add	r3, r2
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	4a08      	ldr	r2, [pc, #32]	@ (800ea84 <xTaskPriorityDisinherit+0x108>)
 800ea62:	441a      	add	r2, r3
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	3304      	adds	r3, #4
 800ea68:	4619      	mov	r1, r3
 800ea6a:	4610      	mov	r0, r2
 800ea6c:	f7fe f891 	bl	800cb92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ea70:	2301      	movs	r3, #1
 800ea72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea74:	697b      	ldr	r3, [r7, #20]
	}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3718      	adds	r7, #24
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	200011d8 	.word	0x200011d8
 800ea84:	200011dc 	.word	0x200011dc
 800ea88:	200012e0 	.word	0x200012e0

0800ea8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b088      	sub	sp, #32
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d079      	beq.n	800eb98 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d10b      	bne.n	800eac4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	60fb      	str	r3, [r7, #12]
}
 800eabe:	bf00      	nop
 800eac0:	bf00      	nop
 800eac2:	e7fd      	b.n	800eac0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eac8:	683a      	ldr	r2, [r7, #0]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d902      	bls.n	800ead4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	61fb      	str	r3, [r7, #28]
 800ead2:	e002      	b.n	800eada <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ead4:	69bb      	ldr	r3, [r7, #24]
 800ead6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ead8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eade:	69fa      	ldr	r2, [r7, #28]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d059      	beq.n	800eb98 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eae8:	697a      	ldr	r2, [r7, #20]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d154      	bne.n	800eb98 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eaee:	4b2c      	ldr	r3, [pc, #176]	@ (800eba0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	69ba      	ldr	r2, [r7, #24]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d10b      	bne.n	800eb10 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800eaf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eafc:	f383 8811 	msr	BASEPRI, r3
 800eb00:	f3bf 8f6f 	isb	sy
 800eb04:	f3bf 8f4f 	dsb	sy
 800eb08:	60bb      	str	r3, [r7, #8]
}
 800eb0a:	bf00      	nop
 800eb0c:	bf00      	nop
 800eb0e:	e7fd      	b.n	800eb0c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	69fa      	ldr	r2, [r7, #28]
 800eb1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb1c:	69bb      	ldr	r3, [r7, #24]
 800eb1e:	699b      	ldr	r3, [r3, #24]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	db04      	blt.n	800eb2e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	f1c3 0207 	rsb	r2, r3, #7
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	6959      	ldr	r1, [r3, #20]
 800eb32:	693a      	ldr	r2, [r7, #16]
 800eb34:	4613      	mov	r3, r2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	4413      	add	r3, r2
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	4a19      	ldr	r2, [pc, #100]	@ (800eba4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eb3e:	4413      	add	r3, r2
 800eb40:	4299      	cmp	r1, r3
 800eb42:	d129      	bne.n	800eb98 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	3304      	adds	r3, #4
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fe f87f 	bl	800cc4c <uxListRemove>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d10a      	bne.n	800eb6a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800eb54:	69bb      	ldr	r3, [r7, #24]
 800eb56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb58:	2201      	movs	r2, #1
 800eb5a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb5e:	43da      	mvns	r2, r3
 800eb60:	4b11      	ldr	r3, [pc, #68]	@ (800eba8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4013      	ands	r3, r2
 800eb66:	4a10      	ldr	r2, [pc, #64]	@ (800eba8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800eb68:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eb6a:	69bb      	ldr	r3, [r7, #24]
 800eb6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb6e:	2201      	movs	r2, #1
 800eb70:	409a      	lsls	r2, r3
 800eb72:	4b0d      	ldr	r3, [pc, #52]	@ (800eba8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4313      	orrs	r3, r2
 800eb78:	4a0b      	ldr	r2, [pc, #44]	@ (800eba8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800eb7a:	6013      	str	r3, [r2, #0]
 800eb7c:	69bb      	ldr	r3, [r7, #24]
 800eb7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb80:	4613      	mov	r3, r2
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	4413      	add	r3, r2
 800eb86:	009b      	lsls	r3, r3, #2
 800eb88:	4a06      	ldr	r2, [pc, #24]	@ (800eba4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eb8a:	441a      	add	r2, r3
 800eb8c:	69bb      	ldr	r3, [r7, #24]
 800eb8e:	3304      	adds	r3, #4
 800eb90:	4619      	mov	r1, r3
 800eb92:	4610      	mov	r0, r2
 800eb94:	f7fd fffd 	bl	800cb92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb98:	bf00      	nop
 800eb9a:	3720      	adds	r7, #32
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	200011d8 	.word	0x200011d8
 800eba4:	200011dc 	.word	0x200011dc
 800eba8:	200012e0 	.word	0x200012e0

0800ebac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ebac:	b480      	push	{r7}
 800ebae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ebb0:	4b07      	ldr	r3, [pc, #28]	@ (800ebd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d004      	beq.n	800ebc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ebb8:	4b05      	ldr	r3, [pc, #20]	@ (800ebd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ebbe:	3201      	adds	r2, #1
 800ebc0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800ebc2:	4b03      	ldr	r3, [pc, #12]	@ (800ebd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
	}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr
 800ebd0:	200011d8 	.word	0x200011d8

0800ebd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ebde:	4b29      	ldr	r3, [pc, #164]	@ (800ec84 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebe4:	4b28      	ldr	r3, [pc, #160]	@ (800ec88 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	3304      	adds	r3, #4
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7fe f82e 	bl	800cc4c <uxListRemove>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d10b      	bne.n	800ec0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ebf6:	4b24      	ldr	r3, [pc, #144]	@ (800ec88 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ec02:	43da      	mvns	r2, r3
 800ec04:	4b21      	ldr	r3, [pc, #132]	@ (800ec8c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4013      	ands	r3, r2
 800ec0a:	4a20      	ldr	r2, [pc, #128]	@ (800ec8c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ec0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec14:	d10a      	bne.n	800ec2c <prvAddCurrentTaskToDelayedList+0x58>
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d007      	beq.n	800ec2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec1c:	4b1a      	ldr	r3, [pc, #104]	@ (800ec88 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	3304      	adds	r3, #4
 800ec22:	4619      	mov	r1, r3
 800ec24:	481a      	ldr	r0, [pc, #104]	@ (800ec90 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ec26:	f7fd ffb4 	bl	800cb92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ec2a:	e026      	b.n	800ec7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	4413      	add	r3, r2
 800ec32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ec34:	4b14      	ldr	r3, [pc, #80]	@ (800ec88 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	68ba      	ldr	r2, [r7, #8]
 800ec3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ec3c:	68ba      	ldr	r2, [r7, #8]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d209      	bcs.n	800ec58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec44:	4b13      	ldr	r3, [pc, #76]	@ (800ec94 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	4b0f      	ldr	r3, [pc, #60]	@ (800ec88 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	3304      	adds	r3, #4
 800ec4e:	4619      	mov	r1, r3
 800ec50:	4610      	mov	r0, r2
 800ec52:	f7fd ffc2 	bl	800cbda <vListInsert>
}
 800ec56:	e010      	b.n	800ec7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec58:	4b0f      	ldr	r3, [pc, #60]	@ (800ec98 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ec5a:	681a      	ldr	r2, [r3, #0]
 800ec5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ec88 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3304      	adds	r3, #4
 800ec62:	4619      	mov	r1, r3
 800ec64:	4610      	mov	r0, r2
 800ec66:	f7fd ffb8 	bl	800cbda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ec6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ec9c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	68ba      	ldr	r2, [r7, #8]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d202      	bcs.n	800ec7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ec74:	4a09      	ldr	r2, [pc, #36]	@ (800ec9c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	6013      	str	r3, [r2, #0]
}
 800ec7a:	bf00      	nop
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	200012dc 	.word	0x200012dc
 800ec88:	200011d8 	.word	0x200011d8
 800ec8c:	200012e0 	.word	0x200012e0
 800ec90:	200012c4 	.word	0x200012c4
 800ec94:	20001294 	.word	0x20001294
 800ec98:	20001290 	.word	0x20001290
 800ec9c:	200012f8 	.word	0x200012f8

0800eca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eca0:	b480      	push	{r7}
 800eca2:	b085      	sub	sp, #20
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	3b04      	subs	r3, #4
 800ecb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ecb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	3b04      	subs	r3, #4
 800ecbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	f023 0201 	bic.w	r2, r3, #1
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	3b04      	subs	r3, #4
 800ecce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ecd0:	4a0c      	ldr	r2, [pc, #48]	@ (800ed04 <pxPortInitialiseStack+0x64>)
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	3b14      	subs	r3, #20
 800ecda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	3b04      	subs	r3, #4
 800ece6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f06f 0202 	mvn.w	r2, #2
 800ecee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	3b20      	subs	r3, #32
 800ecf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3714      	adds	r7, #20
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr
 800ed04:	0800ed09 	.word	0x0800ed09

0800ed08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b085      	sub	sp, #20
 800ed0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ed12:	4b13      	ldr	r3, [pc, #76]	@ (800ed60 <prvTaskExitError+0x58>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed1a:	d00b      	beq.n	800ed34 <prvTaskExitError+0x2c>
	__asm volatile
 800ed1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	60fb      	str	r3, [r7, #12]
}
 800ed2e:	bf00      	nop
 800ed30:	bf00      	nop
 800ed32:	e7fd      	b.n	800ed30 <prvTaskExitError+0x28>
	__asm volatile
 800ed34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed38:	f383 8811 	msr	BASEPRI, r3
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	f3bf 8f4f 	dsb	sy
 800ed44:	60bb      	str	r3, [r7, #8]
}
 800ed46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ed48:	bf00      	nop
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d0fc      	beq.n	800ed4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ed50:	bf00      	nop
 800ed52:	bf00      	nop
 800ed54:	3714      	adds	r7, #20
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	2000000c 	.word	0x2000000c
	...

0800ed70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ed70:	4b07      	ldr	r3, [pc, #28]	@ (800ed90 <pxCurrentTCBConst2>)
 800ed72:	6819      	ldr	r1, [r3, #0]
 800ed74:	6808      	ldr	r0, [r1, #0]
 800ed76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed7a:	f380 8809 	msr	PSP, r0
 800ed7e:	f3bf 8f6f 	isb	sy
 800ed82:	f04f 0000 	mov.w	r0, #0
 800ed86:	f380 8811 	msr	BASEPRI, r0
 800ed8a:	4770      	bx	lr
 800ed8c:	f3af 8000 	nop.w

0800ed90 <pxCurrentTCBConst2>:
 800ed90:	200011d8 	.word	0x200011d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ed94:	bf00      	nop
 800ed96:	bf00      	nop

0800ed98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ed98:	4808      	ldr	r0, [pc, #32]	@ (800edbc <prvPortStartFirstTask+0x24>)
 800ed9a:	6800      	ldr	r0, [r0, #0]
 800ed9c:	6800      	ldr	r0, [r0, #0]
 800ed9e:	f380 8808 	msr	MSP, r0
 800eda2:	f04f 0000 	mov.w	r0, #0
 800eda6:	f380 8814 	msr	CONTROL, r0
 800edaa:	b662      	cpsie	i
 800edac:	b661      	cpsie	f
 800edae:	f3bf 8f4f 	dsb	sy
 800edb2:	f3bf 8f6f 	isb	sy
 800edb6:	df00      	svc	0
 800edb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800edba:	bf00      	nop
 800edbc:	e000ed08 	.word	0xe000ed08

0800edc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b086      	sub	sp, #24
 800edc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800edc6:	4b47      	ldr	r3, [pc, #284]	@ (800eee4 <xPortStartScheduler+0x124>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	4a47      	ldr	r2, [pc, #284]	@ (800eee8 <xPortStartScheduler+0x128>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d10b      	bne.n	800ede8 <xPortStartScheduler+0x28>
	__asm volatile
 800edd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	60fb      	str	r3, [r7, #12]
}
 800ede2:	bf00      	nop
 800ede4:	bf00      	nop
 800ede6:	e7fd      	b.n	800ede4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ede8:	4b3e      	ldr	r3, [pc, #248]	@ (800eee4 <xPortStartScheduler+0x124>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4a3f      	ldr	r2, [pc, #252]	@ (800eeec <xPortStartScheduler+0x12c>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d10b      	bne.n	800ee0a <xPortStartScheduler+0x4a>
	__asm volatile
 800edf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf6:	f383 8811 	msr	BASEPRI, r3
 800edfa:	f3bf 8f6f 	isb	sy
 800edfe:	f3bf 8f4f 	dsb	sy
 800ee02:	613b      	str	r3, [r7, #16]
}
 800ee04:	bf00      	nop
 800ee06:	bf00      	nop
 800ee08:	e7fd      	b.n	800ee06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ee0a:	4b39      	ldr	r3, [pc, #228]	@ (800eef0 <xPortStartScheduler+0x130>)
 800ee0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	22ff      	movs	r2, #255	@ 0xff
 800ee1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ee24:	78fb      	ldrb	r3, [r7, #3]
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ee2c:	b2da      	uxtb	r2, r3
 800ee2e:	4b31      	ldr	r3, [pc, #196]	@ (800eef4 <xPortStartScheduler+0x134>)
 800ee30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ee32:	4b31      	ldr	r3, [pc, #196]	@ (800eef8 <xPortStartScheduler+0x138>)
 800ee34:	2207      	movs	r2, #7
 800ee36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee38:	e009      	b.n	800ee4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ee3a:	4b2f      	ldr	r3, [pc, #188]	@ (800eef8 <xPortStartScheduler+0x138>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	3b01      	subs	r3, #1
 800ee40:	4a2d      	ldr	r2, [pc, #180]	@ (800eef8 <xPortStartScheduler+0x138>)
 800ee42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ee44:	78fb      	ldrb	r3, [r7, #3]
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	005b      	lsls	r3, r3, #1
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee4e:	78fb      	ldrb	r3, [r7, #3]
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee56:	2b80      	cmp	r3, #128	@ 0x80
 800ee58:	d0ef      	beq.n	800ee3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ee5a:	4b27      	ldr	r3, [pc, #156]	@ (800eef8 <xPortStartScheduler+0x138>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f1c3 0307 	rsb	r3, r3, #7
 800ee62:	2b04      	cmp	r3, #4
 800ee64:	d00b      	beq.n	800ee7e <xPortStartScheduler+0xbe>
	__asm volatile
 800ee66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee6a:	f383 8811 	msr	BASEPRI, r3
 800ee6e:	f3bf 8f6f 	isb	sy
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	60bb      	str	r3, [r7, #8]
}
 800ee78:	bf00      	nop
 800ee7a:	bf00      	nop
 800ee7c:	e7fd      	b.n	800ee7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ee7e:	4b1e      	ldr	r3, [pc, #120]	@ (800eef8 <xPortStartScheduler+0x138>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	021b      	lsls	r3, r3, #8
 800ee84:	4a1c      	ldr	r2, [pc, #112]	@ (800eef8 <xPortStartScheduler+0x138>)
 800ee86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ee88:	4b1b      	ldr	r3, [pc, #108]	@ (800eef8 <xPortStartScheduler+0x138>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ee90:	4a19      	ldr	r2, [pc, #100]	@ (800eef8 <xPortStartScheduler+0x138>)
 800ee92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ee9c:	4b17      	ldr	r3, [pc, #92]	@ (800eefc <xPortStartScheduler+0x13c>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4a16      	ldr	r2, [pc, #88]	@ (800eefc <xPortStartScheduler+0x13c>)
 800eea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800eea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eea8:	4b14      	ldr	r3, [pc, #80]	@ (800eefc <xPortStartScheduler+0x13c>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a13      	ldr	r2, [pc, #76]	@ (800eefc <xPortStartScheduler+0x13c>)
 800eeae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800eeb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eeb4:	f000 f8da 	bl	800f06c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eeb8:	4b11      	ldr	r3, [pc, #68]	@ (800ef00 <xPortStartScheduler+0x140>)
 800eeba:	2200      	movs	r2, #0
 800eebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eebe:	f000 f8f9 	bl	800f0b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eec2:	4b10      	ldr	r3, [pc, #64]	@ (800ef04 <xPortStartScheduler+0x144>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a0f      	ldr	r2, [pc, #60]	@ (800ef04 <xPortStartScheduler+0x144>)
 800eec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800eecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eece:	f7ff ff63 	bl	800ed98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eed2:	f7ff fa6d 	bl	800e3b0 <vTaskSwitchContext>
	prvTaskExitError();
 800eed6:	f7ff ff17 	bl	800ed08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eeda:	2300      	movs	r3, #0
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3718      	adds	r7, #24
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	e000ed00 	.word	0xe000ed00
 800eee8:	410fc271 	.word	0x410fc271
 800eeec:	410fc270 	.word	0x410fc270
 800eef0:	e000e400 	.word	0xe000e400
 800eef4:	20001304 	.word	0x20001304
 800eef8:	20001308 	.word	0x20001308
 800eefc:	e000ed20 	.word	0xe000ed20
 800ef00:	2000000c 	.word	0x2000000c
 800ef04:	e000ef34 	.word	0xe000ef34

0800ef08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	607b      	str	r3, [r7, #4]
}
 800ef20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ef22:	4b10      	ldr	r3, [pc, #64]	@ (800ef64 <vPortEnterCritical+0x5c>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	3301      	adds	r3, #1
 800ef28:	4a0e      	ldr	r2, [pc, #56]	@ (800ef64 <vPortEnterCritical+0x5c>)
 800ef2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ef2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ef64 <vPortEnterCritical+0x5c>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	d110      	bne.n	800ef56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ef34:	4b0c      	ldr	r3, [pc, #48]	@ (800ef68 <vPortEnterCritical+0x60>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00b      	beq.n	800ef56 <vPortEnterCritical+0x4e>
	__asm volatile
 800ef3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef42:	f383 8811 	msr	BASEPRI, r3
 800ef46:	f3bf 8f6f 	isb	sy
 800ef4a:	f3bf 8f4f 	dsb	sy
 800ef4e:	603b      	str	r3, [r7, #0]
}
 800ef50:	bf00      	nop
 800ef52:	bf00      	nop
 800ef54:	e7fd      	b.n	800ef52 <vPortEnterCritical+0x4a>
	}
}
 800ef56:	bf00      	nop
 800ef58:	370c      	adds	r7, #12
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
 800ef62:	bf00      	nop
 800ef64:	2000000c 	.word	0x2000000c
 800ef68:	e000ed04 	.word	0xe000ed04

0800ef6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ef72:	4b12      	ldr	r3, [pc, #72]	@ (800efbc <vPortExitCritical+0x50>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d10b      	bne.n	800ef92 <vPortExitCritical+0x26>
	__asm volatile
 800ef7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef7e:	f383 8811 	msr	BASEPRI, r3
 800ef82:	f3bf 8f6f 	isb	sy
 800ef86:	f3bf 8f4f 	dsb	sy
 800ef8a:	607b      	str	r3, [r7, #4]
}
 800ef8c:	bf00      	nop
 800ef8e:	bf00      	nop
 800ef90:	e7fd      	b.n	800ef8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ef92:	4b0a      	ldr	r3, [pc, #40]	@ (800efbc <vPortExitCritical+0x50>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	3b01      	subs	r3, #1
 800ef98:	4a08      	ldr	r2, [pc, #32]	@ (800efbc <vPortExitCritical+0x50>)
 800ef9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ef9c:	4b07      	ldr	r3, [pc, #28]	@ (800efbc <vPortExitCritical+0x50>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d105      	bne.n	800efb0 <vPortExitCritical+0x44>
 800efa4:	2300      	movs	r3, #0
 800efa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	f383 8811 	msr	BASEPRI, r3
}
 800efae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800efb0:	bf00      	nop
 800efb2:	370c      	adds	r7, #12
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr
 800efbc:	2000000c 	.word	0x2000000c

0800efc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800efc0:	f3ef 8009 	mrs	r0, PSP
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	4b15      	ldr	r3, [pc, #84]	@ (800f020 <pxCurrentTCBConst>)
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	f01e 0f10 	tst.w	lr, #16
 800efd0:	bf08      	it	eq
 800efd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800efd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efda:	6010      	str	r0, [r2, #0]
 800efdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800efe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800efe4:	f380 8811 	msr	BASEPRI, r0
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	f3bf 8f6f 	isb	sy
 800eff0:	f7ff f9de 	bl	800e3b0 <vTaskSwitchContext>
 800eff4:	f04f 0000 	mov.w	r0, #0
 800eff8:	f380 8811 	msr	BASEPRI, r0
 800effc:	bc09      	pop	{r0, r3}
 800effe:	6819      	ldr	r1, [r3, #0]
 800f000:	6808      	ldr	r0, [r1, #0]
 800f002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f006:	f01e 0f10 	tst.w	lr, #16
 800f00a:	bf08      	it	eq
 800f00c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f010:	f380 8809 	msr	PSP, r0
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	4770      	bx	lr
 800f01a:	bf00      	nop
 800f01c:	f3af 8000 	nop.w

0800f020 <pxCurrentTCBConst>:
 800f020:	200011d8 	.word	0x200011d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f024:	bf00      	nop
 800f026:	bf00      	nop

0800f028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	607b      	str	r3, [r7, #4]
}
 800f040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f042:	f7ff f8f3 	bl	800e22c <xTaskIncrementTick>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d003      	beq.n	800f054 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f04c:	4b06      	ldr	r3, [pc, #24]	@ (800f068 <SysTick_Handler+0x40>)
 800f04e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f052:	601a      	str	r2, [r3, #0]
 800f054:	2300      	movs	r3, #0
 800f056:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	f383 8811 	msr	BASEPRI, r3
}
 800f05e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f060:	bf00      	nop
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	e000ed04 	.word	0xe000ed04

0800f06c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f06c:	b480      	push	{r7}
 800f06e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f070:	4b0b      	ldr	r3, [pc, #44]	@ (800f0a0 <vPortSetupTimerInterrupt+0x34>)
 800f072:	2200      	movs	r2, #0
 800f074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f076:	4b0b      	ldr	r3, [pc, #44]	@ (800f0a4 <vPortSetupTimerInterrupt+0x38>)
 800f078:	2200      	movs	r2, #0
 800f07a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f07c:	4b0a      	ldr	r3, [pc, #40]	@ (800f0a8 <vPortSetupTimerInterrupt+0x3c>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4a0a      	ldr	r2, [pc, #40]	@ (800f0ac <vPortSetupTimerInterrupt+0x40>)
 800f082:	fba2 2303 	umull	r2, r3, r2, r3
 800f086:	099b      	lsrs	r3, r3, #6
 800f088:	4a09      	ldr	r2, [pc, #36]	@ (800f0b0 <vPortSetupTimerInterrupt+0x44>)
 800f08a:	3b01      	subs	r3, #1
 800f08c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f08e:	4b04      	ldr	r3, [pc, #16]	@ (800f0a0 <vPortSetupTimerInterrupt+0x34>)
 800f090:	2207      	movs	r2, #7
 800f092:	601a      	str	r2, [r3, #0]
}
 800f094:	bf00      	nop
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr
 800f09e:	bf00      	nop
 800f0a0:	e000e010 	.word	0xe000e010
 800f0a4:	e000e018 	.word	0xe000e018
 800f0a8:	20000000 	.word	0x20000000
 800f0ac:	10624dd3 	.word	0x10624dd3
 800f0b0:	e000e014 	.word	0xe000e014

0800f0b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f0b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f0c4 <vPortEnableVFP+0x10>
 800f0b8:	6801      	ldr	r1, [r0, #0]
 800f0ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f0be:	6001      	str	r1, [r0, #0]
 800f0c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f0c2:	bf00      	nop
 800f0c4:	e000ed88 	.word	0xe000ed88

0800f0c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b085      	sub	sp, #20
 800f0cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f0ce:	f3ef 8305 	mrs	r3, IPSR
 800f0d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2b0f      	cmp	r3, #15
 800f0d8:	d915      	bls.n	800f106 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f0da:	4a18      	ldr	r2, [pc, #96]	@ (800f13c <vPortValidateInterruptPriority+0x74>)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	4413      	add	r3, r2
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f0e4:	4b16      	ldr	r3, [pc, #88]	@ (800f140 <vPortValidateInterruptPriority+0x78>)
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	7afa      	ldrb	r2, [r7, #11]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d20b      	bcs.n	800f106 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0f2:	f383 8811 	msr	BASEPRI, r3
 800f0f6:	f3bf 8f6f 	isb	sy
 800f0fa:	f3bf 8f4f 	dsb	sy
 800f0fe:	607b      	str	r3, [r7, #4]
}
 800f100:	bf00      	nop
 800f102:	bf00      	nop
 800f104:	e7fd      	b.n	800f102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f106:	4b0f      	ldr	r3, [pc, #60]	@ (800f144 <vPortValidateInterruptPriority+0x7c>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f10e:	4b0e      	ldr	r3, [pc, #56]	@ (800f148 <vPortValidateInterruptPriority+0x80>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	429a      	cmp	r2, r3
 800f114:	d90b      	bls.n	800f12e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f11a:	f383 8811 	msr	BASEPRI, r3
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f3bf 8f4f 	dsb	sy
 800f126:	603b      	str	r3, [r7, #0]
}
 800f128:	bf00      	nop
 800f12a:	bf00      	nop
 800f12c:	e7fd      	b.n	800f12a <vPortValidateInterruptPriority+0x62>
	}
 800f12e:	bf00      	nop
 800f130:	3714      	adds	r7, #20
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	e000e3f0 	.word	0xe000e3f0
 800f140:	20001304 	.word	0x20001304
 800f144:	e000ed0c 	.word	0xe000ed0c
 800f148:	20001308 	.word	0x20001308

0800f14c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b08a      	sub	sp, #40	@ 0x28
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f154:	2300      	movs	r3, #0
 800f156:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f158:	f7fe ff9a 	bl	800e090 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f15c:	4b5f      	ldr	r3, [pc, #380]	@ (800f2dc <pvPortMalloc+0x190>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d101      	bne.n	800f168 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f164:	f000 f92a 	bl	800f3bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f168:	4b5d      	ldr	r3, [pc, #372]	@ (800f2e0 <pvPortMalloc+0x194>)
 800f16a:	681a      	ldr	r2, [r3, #0]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4013      	ands	r3, r2
 800f170:	2b00      	cmp	r3, #0
 800f172:	f040 8095 	bne.w	800f2a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d01e      	beq.n	800f1ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f17c:	2208      	movs	r2, #8
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4413      	add	r3, r2
 800f182:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f003 0307 	and.w	r3, r3, #7
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d015      	beq.n	800f1ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f023 0307 	bic.w	r3, r3, #7
 800f194:	3308      	adds	r3, #8
 800f196:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f003 0307 	and.w	r3, r3, #7
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00b      	beq.n	800f1ba <pvPortMalloc+0x6e>
	__asm volatile
 800f1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a6:	f383 8811 	msr	BASEPRI, r3
 800f1aa:	f3bf 8f6f 	isb	sy
 800f1ae:	f3bf 8f4f 	dsb	sy
 800f1b2:	617b      	str	r3, [r7, #20]
}
 800f1b4:	bf00      	nop
 800f1b6:	bf00      	nop
 800f1b8:	e7fd      	b.n	800f1b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d06f      	beq.n	800f2a0 <pvPortMalloc+0x154>
 800f1c0:	4b48      	ldr	r3, [pc, #288]	@ (800f2e4 <pvPortMalloc+0x198>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d86a      	bhi.n	800f2a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f1ca:	4b47      	ldr	r3, [pc, #284]	@ (800f2e8 <pvPortMalloc+0x19c>)
 800f1cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f1ce:	4b46      	ldr	r3, [pc, #280]	@ (800f2e8 <pvPortMalloc+0x19c>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f1d4:	e004      	b.n	800f1e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d903      	bls.n	800f1f2 <pvPortMalloc+0xa6>
 800f1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1f1      	bne.n	800f1d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f1f2:	4b3a      	ldr	r3, [pc, #232]	@ (800f2dc <pvPortMalloc+0x190>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d051      	beq.n	800f2a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f1fc:	6a3b      	ldr	r3, [r7, #32]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2208      	movs	r2, #8
 800f202:	4413      	add	r3, r2
 800f204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	6a3b      	ldr	r3, [r7, #32]
 800f20c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f210:	685a      	ldr	r2, [r3, #4]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	1ad2      	subs	r2, r2, r3
 800f216:	2308      	movs	r3, #8
 800f218:	005b      	lsls	r3, r3, #1
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d920      	bls.n	800f260 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f21e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	4413      	add	r3, r2
 800f224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f226:	69bb      	ldr	r3, [r7, #24]
 800f228:	f003 0307 	and.w	r3, r3, #7
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d00b      	beq.n	800f248 <pvPortMalloc+0xfc>
	__asm volatile
 800f230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f234:	f383 8811 	msr	BASEPRI, r3
 800f238:	f3bf 8f6f 	isb	sy
 800f23c:	f3bf 8f4f 	dsb	sy
 800f240:	613b      	str	r3, [r7, #16]
}
 800f242:	bf00      	nop
 800f244:	bf00      	nop
 800f246:	e7fd      	b.n	800f244 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f24a:	685a      	ldr	r2, [r3, #4]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	1ad2      	subs	r2, r2, r3
 800f250:	69bb      	ldr	r3, [r7, #24]
 800f252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f256:	687a      	ldr	r2, [r7, #4]
 800f258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f25a:	69b8      	ldr	r0, [r7, #24]
 800f25c:	f000 f910 	bl	800f480 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f260:	4b20      	ldr	r3, [pc, #128]	@ (800f2e4 <pvPortMalloc+0x198>)
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	1ad3      	subs	r3, r2, r3
 800f26a:	4a1e      	ldr	r2, [pc, #120]	@ (800f2e4 <pvPortMalloc+0x198>)
 800f26c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f26e:	4b1d      	ldr	r3, [pc, #116]	@ (800f2e4 <pvPortMalloc+0x198>)
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	4b1e      	ldr	r3, [pc, #120]	@ (800f2ec <pvPortMalloc+0x1a0>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	429a      	cmp	r2, r3
 800f278:	d203      	bcs.n	800f282 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f27a:	4b1a      	ldr	r3, [pc, #104]	@ (800f2e4 <pvPortMalloc+0x198>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	4a1b      	ldr	r2, [pc, #108]	@ (800f2ec <pvPortMalloc+0x1a0>)
 800f280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f284:	685a      	ldr	r2, [r3, #4]
 800f286:	4b16      	ldr	r3, [pc, #88]	@ (800f2e0 <pvPortMalloc+0x194>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	431a      	orrs	r2, r3
 800f28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f28e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f292:	2200      	movs	r2, #0
 800f294:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f296:	4b16      	ldr	r3, [pc, #88]	@ (800f2f0 <pvPortMalloc+0x1a4>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	3301      	adds	r3, #1
 800f29c:	4a14      	ldr	r2, [pc, #80]	@ (800f2f0 <pvPortMalloc+0x1a4>)
 800f29e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f2a0:	f7fe ff04 	bl	800e0ac <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d101      	bne.n	800f2ae <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f2aa:	f7f3 fce1 	bl	8002c70 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	f003 0307 	and.w	r3, r3, #7
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d00b      	beq.n	800f2d0 <pvPortMalloc+0x184>
	__asm volatile
 800f2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2bc:	f383 8811 	msr	BASEPRI, r3
 800f2c0:	f3bf 8f6f 	isb	sy
 800f2c4:	f3bf 8f4f 	dsb	sy
 800f2c8:	60fb      	str	r3, [r7, #12]
}
 800f2ca:	bf00      	nop
 800f2cc:	bf00      	nop
 800f2ce:	e7fd      	b.n	800f2cc <pvPortMalloc+0x180>
	return pvReturn;
 800f2d0:	69fb      	ldr	r3, [r7, #28]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3728      	adds	r7, #40	@ 0x28
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	20004f14 	.word	0x20004f14
 800f2e0:	20004f28 	.word	0x20004f28
 800f2e4:	20004f18 	.word	0x20004f18
 800f2e8:	20004f0c 	.word	0x20004f0c
 800f2ec:	20004f1c 	.word	0x20004f1c
 800f2f0:	20004f20 	.word	0x20004f20

0800f2f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b086      	sub	sp, #24
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d04f      	beq.n	800f3a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f306:	2308      	movs	r3, #8
 800f308:	425b      	negs	r3, r3
 800f30a:	697a      	ldr	r2, [r7, #20]
 800f30c:	4413      	add	r3, r2
 800f30e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	685a      	ldr	r2, [r3, #4]
 800f318:	4b25      	ldr	r3, [pc, #148]	@ (800f3b0 <vPortFree+0xbc>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	4013      	ands	r3, r2
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d10b      	bne.n	800f33a <vPortFree+0x46>
	__asm volatile
 800f322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f326:	f383 8811 	msr	BASEPRI, r3
 800f32a:	f3bf 8f6f 	isb	sy
 800f32e:	f3bf 8f4f 	dsb	sy
 800f332:	60fb      	str	r3, [r7, #12]
}
 800f334:	bf00      	nop
 800f336:	bf00      	nop
 800f338:	e7fd      	b.n	800f336 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00b      	beq.n	800f35a <vPortFree+0x66>
	__asm volatile
 800f342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f346:	f383 8811 	msr	BASEPRI, r3
 800f34a:	f3bf 8f6f 	isb	sy
 800f34e:	f3bf 8f4f 	dsb	sy
 800f352:	60bb      	str	r3, [r7, #8]
}
 800f354:	bf00      	nop
 800f356:	bf00      	nop
 800f358:	e7fd      	b.n	800f356 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	685a      	ldr	r2, [r3, #4]
 800f35e:	4b14      	ldr	r3, [pc, #80]	@ (800f3b0 <vPortFree+0xbc>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	4013      	ands	r3, r2
 800f364:	2b00      	cmp	r3, #0
 800f366:	d01e      	beq.n	800f3a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d11a      	bne.n	800f3a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	685a      	ldr	r2, [r3, #4]
 800f374:	4b0e      	ldr	r3, [pc, #56]	@ (800f3b0 <vPortFree+0xbc>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	43db      	mvns	r3, r3
 800f37a:	401a      	ands	r2, r3
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f380:	f7fe fe86 	bl	800e090 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	685a      	ldr	r2, [r3, #4]
 800f388:	4b0a      	ldr	r3, [pc, #40]	@ (800f3b4 <vPortFree+0xc0>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	4413      	add	r3, r2
 800f38e:	4a09      	ldr	r2, [pc, #36]	@ (800f3b4 <vPortFree+0xc0>)
 800f390:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f392:	6938      	ldr	r0, [r7, #16]
 800f394:	f000 f874 	bl	800f480 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f398:	4b07      	ldr	r3, [pc, #28]	@ (800f3b8 <vPortFree+0xc4>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	3301      	adds	r3, #1
 800f39e:	4a06      	ldr	r2, [pc, #24]	@ (800f3b8 <vPortFree+0xc4>)
 800f3a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f3a2:	f7fe fe83 	bl	800e0ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f3a6:	bf00      	nop
 800f3a8:	3718      	adds	r7, #24
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	20004f28 	.word	0x20004f28
 800f3b4:	20004f18 	.word	0x20004f18
 800f3b8:	20004f24 	.word	0x20004f24

0800f3bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f3c2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f3c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f3c8:	4b27      	ldr	r3, [pc, #156]	@ (800f468 <prvHeapInit+0xac>)
 800f3ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f003 0307 	and.w	r3, r3, #7
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d00c      	beq.n	800f3f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	3307      	adds	r3, #7
 800f3da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f023 0307 	bic.w	r3, r3, #7
 800f3e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f3e4:	68ba      	ldr	r2, [r7, #8]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	1ad3      	subs	r3, r2, r3
 800f3ea:	4a1f      	ldr	r2, [pc, #124]	@ (800f468 <prvHeapInit+0xac>)
 800f3ec:	4413      	add	r3, r2
 800f3ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f3f4:	4a1d      	ldr	r2, [pc, #116]	@ (800f46c <prvHeapInit+0xb0>)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f3fa:	4b1c      	ldr	r3, [pc, #112]	@ (800f46c <prvHeapInit+0xb0>)
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	68ba      	ldr	r2, [r7, #8]
 800f404:	4413      	add	r3, r2
 800f406:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f408:	2208      	movs	r2, #8
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	1a9b      	subs	r3, r3, r2
 800f40e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f023 0307 	bic.w	r3, r3, #7
 800f416:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	4a15      	ldr	r2, [pc, #84]	@ (800f470 <prvHeapInit+0xb4>)
 800f41c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f41e:	4b14      	ldr	r3, [pc, #80]	@ (800f470 <prvHeapInit+0xb4>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2200      	movs	r2, #0
 800f424:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f426:	4b12      	ldr	r3, [pc, #72]	@ (800f470 <prvHeapInit+0xb4>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2200      	movs	r2, #0
 800f42c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	68fa      	ldr	r2, [r7, #12]
 800f436:	1ad2      	subs	r2, r2, r3
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f43c:	4b0c      	ldr	r3, [pc, #48]	@ (800f470 <prvHeapInit+0xb4>)
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	4a0a      	ldr	r2, [pc, #40]	@ (800f474 <prvHeapInit+0xb8>)
 800f44a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	4a09      	ldr	r2, [pc, #36]	@ (800f478 <prvHeapInit+0xbc>)
 800f452:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f454:	4b09      	ldr	r3, [pc, #36]	@ (800f47c <prvHeapInit+0xc0>)
 800f456:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f45a:	601a      	str	r2, [r3, #0]
}
 800f45c:	bf00      	nop
 800f45e:	3714      	adds	r7, #20
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr
 800f468:	2000130c 	.word	0x2000130c
 800f46c:	20004f0c 	.word	0x20004f0c
 800f470:	20004f14 	.word	0x20004f14
 800f474:	20004f1c 	.word	0x20004f1c
 800f478:	20004f18 	.word	0x20004f18
 800f47c:	20004f28 	.word	0x20004f28

0800f480 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f480:	b480      	push	{r7}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f488:	4b28      	ldr	r3, [pc, #160]	@ (800f52c <prvInsertBlockIntoFreeList+0xac>)
 800f48a:	60fb      	str	r3, [r7, #12]
 800f48c:	e002      	b.n	800f494 <prvInsertBlockIntoFreeList+0x14>
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	60fb      	str	r3, [r7, #12]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d8f7      	bhi.n	800f48e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	68ba      	ldr	r2, [r7, #8]
 800f4a8:	4413      	add	r3, r2
 800f4aa:	687a      	ldr	r2, [r7, #4]
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d108      	bne.n	800f4c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	685a      	ldr	r2, [r3, #4]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	441a      	add	r2, r3
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	68ba      	ldr	r2, [r7, #8]
 800f4cc:	441a      	add	r2, r3
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d118      	bne.n	800f508 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	4b15      	ldr	r3, [pc, #84]	@ (800f530 <prvInsertBlockIntoFreeList+0xb0>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d00d      	beq.n	800f4fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	685a      	ldr	r2, [r3, #4]
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	441a      	add	r2, r3
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	601a      	str	r2, [r3, #0]
 800f4fc:	e008      	b.n	800f510 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f4fe:	4b0c      	ldr	r3, [pc, #48]	@ (800f530 <prvInsertBlockIntoFreeList+0xb0>)
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	601a      	str	r2, [r3, #0]
 800f506:	e003      	b.n	800f510 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f510:	68fa      	ldr	r2, [r7, #12]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	429a      	cmp	r2, r3
 800f516:	d002      	beq.n	800f51e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f51e:	bf00      	nop
 800f520:	3714      	adds	r7, #20
 800f522:	46bd      	mov	sp, r7
 800f524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f528:	4770      	bx	lr
 800f52a:	bf00      	nop
 800f52c:	20004f0c 	.word	0x20004f0c
 800f530:	20004f14 	.word	0x20004f14

0800f534 <__cvt>:
 800f534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f538:	ec57 6b10 	vmov	r6, r7, d0
 800f53c:	2f00      	cmp	r7, #0
 800f53e:	460c      	mov	r4, r1
 800f540:	4619      	mov	r1, r3
 800f542:	463b      	mov	r3, r7
 800f544:	bfbb      	ittet	lt
 800f546:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f54a:	461f      	movlt	r7, r3
 800f54c:	2300      	movge	r3, #0
 800f54e:	232d      	movlt	r3, #45	@ 0x2d
 800f550:	700b      	strb	r3, [r1, #0]
 800f552:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f554:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f558:	4691      	mov	r9, r2
 800f55a:	f023 0820 	bic.w	r8, r3, #32
 800f55e:	bfbc      	itt	lt
 800f560:	4632      	movlt	r2, r6
 800f562:	4616      	movlt	r6, r2
 800f564:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f568:	d005      	beq.n	800f576 <__cvt+0x42>
 800f56a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f56e:	d100      	bne.n	800f572 <__cvt+0x3e>
 800f570:	3401      	adds	r4, #1
 800f572:	2102      	movs	r1, #2
 800f574:	e000      	b.n	800f578 <__cvt+0x44>
 800f576:	2103      	movs	r1, #3
 800f578:	ab03      	add	r3, sp, #12
 800f57a:	9301      	str	r3, [sp, #4]
 800f57c:	ab02      	add	r3, sp, #8
 800f57e:	9300      	str	r3, [sp, #0]
 800f580:	ec47 6b10 	vmov	d0, r6, r7
 800f584:	4653      	mov	r3, sl
 800f586:	4622      	mov	r2, r4
 800f588:	f000 ffde 	bl	8010548 <_dtoa_r>
 800f58c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f590:	4605      	mov	r5, r0
 800f592:	d119      	bne.n	800f5c8 <__cvt+0x94>
 800f594:	f019 0f01 	tst.w	r9, #1
 800f598:	d00e      	beq.n	800f5b8 <__cvt+0x84>
 800f59a:	eb00 0904 	add.w	r9, r0, r4
 800f59e:	2200      	movs	r2, #0
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	f7f1 faaf 	bl	8000b08 <__aeabi_dcmpeq>
 800f5aa:	b108      	cbz	r0, 800f5b0 <__cvt+0x7c>
 800f5ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800f5b0:	2230      	movs	r2, #48	@ 0x30
 800f5b2:	9b03      	ldr	r3, [sp, #12]
 800f5b4:	454b      	cmp	r3, r9
 800f5b6:	d31e      	bcc.n	800f5f6 <__cvt+0xc2>
 800f5b8:	9b03      	ldr	r3, [sp, #12]
 800f5ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5bc:	1b5b      	subs	r3, r3, r5
 800f5be:	4628      	mov	r0, r5
 800f5c0:	6013      	str	r3, [r2, #0]
 800f5c2:	b004      	add	sp, #16
 800f5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f5cc:	eb00 0904 	add.w	r9, r0, r4
 800f5d0:	d1e5      	bne.n	800f59e <__cvt+0x6a>
 800f5d2:	7803      	ldrb	r3, [r0, #0]
 800f5d4:	2b30      	cmp	r3, #48	@ 0x30
 800f5d6:	d10a      	bne.n	800f5ee <__cvt+0xba>
 800f5d8:	2200      	movs	r2, #0
 800f5da:	2300      	movs	r3, #0
 800f5dc:	4630      	mov	r0, r6
 800f5de:	4639      	mov	r1, r7
 800f5e0:	f7f1 fa92 	bl	8000b08 <__aeabi_dcmpeq>
 800f5e4:	b918      	cbnz	r0, 800f5ee <__cvt+0xba>
 800f5e6:	f1c4 0401 	rsb	r4, r4, #1
 800f5ea:	f8ca 4000 	str.w	r4, [sl]
 800f5ee:	f8da 3000 	ldr.w	r3, [sl]
 800f5f2:	4499      	add	r9, r3
 800f5f4:	e7d3      	b.n	800f59e <__cvt+0x6a>
 800f5f6:	1c59      	adds	r1, r3, #1
 800f5f8:	9103      	str	r1, [sp, #12]
 800f5fa:	701a      	strb	r2, [r3, #0]
 800f5fc:	e7d9      	b.n	800f5b2 <__cvt+0x7e>

0800f5fe <__exponent>:
 800f5fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f600:	2900      	cmp	r1, #0
 800f602:	bfba      	itte	lt
 800f604:	4249      	neglt	r1, r1
 800f606:	232d      	movlt	r3, #45	@ 0x2d
 800f608:	232b      	movge	r3, #43	@ 0x2b
 800f60a:	2909      	cmp	r1, #9
 800f60c:	7002      	strb	r2, [r0, #0]
 800f60e:	7043      	strb	r3, [r0, #1]
 800f610:	dd29      	ble.n	800f666 <__exponent+0x68>
 800f612:	f10d 0307 	add.w	r3, sp, #7
 800f616:	461d      	mov	r5, r3
 800f618:	270a      	movs	r7, #10
 800f61a:	461a      	mov	r2, r3
 800f61c:	fbb1 f6f7 	udiv	r6, r1, r7
 800f620:	fb07 1416 	mls	r4, r7, r6, r1
 800f624:	3430      	adds	r4, #48	@ 0x30
 800f626:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f62a:	460c      	mov	r4, r1
 800f62c:	2c63      	cmp	r4, #99	@ 0x63
 800f62e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f632:	4631      	mov	r1, r6
 800f634:	dcf1      	bgt.n	800f61a <__exponent+0x1c>
 800f636:	3130      	adds	r1, #48	@ 0x30
 800f638:	1e94      	subs	r4, r2, #2
 800f63a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f63e:	1c41      	adds	r1, r0, #1
 800f640:	4623      	mov	r3, r4
 800f642:	42ab      	cmp	r3, r5
 800f644:	d30a      	bcc.n	800f65c <__exponent+0x5e>
 800f646:	f10d 0309 	add.w	r3, sp, #9
 800f64a:	1a9b      	subs	r3, r3, r2
 800f64c:	42ac      	cmp	r4, r5
 800f64e:	bf88      	it	hi
 800f650:	2300      	movhi	r3, #0
 800f652:	3302      	adds	r3, #2
 800f654:	4403      	add	r3, r0
 800f656:	1a18      	subs	r0, r3, r0
 800f658:	b003      	add	sp, #12
 800f65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f65c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f660:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f664:	e7ed      	b.n	800f642 <__exponent+0x44>
 800f666:	2330      	movs	r3, #48	@ 0x30
 800f668:	3130      	adds	r1, #48	@ 0x30
 800f66a:	7083      	strb	r3, [r0, #2]
 800f66c:	70c1      	strb	r1, [r0, #3]
 800f66e:	1d03      	adds	r3, r0, #4
 800f670:	e7f1      	b.n	800f656 <__exponent+0x58>
	...

0800f674 <_printf_float>:
 800f674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f678:	b08d      	sub	sp, #52	@ 0x34
 800f67a:	460c      	mov	r4, r1
 800f67c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f680:	4616      	mov	r6, r2
 800f682:	461f      	mov	r7, r3
 800f684:	4605      	mov	r5, r0
 800f686:	f000 fdf3 	bl	8010270 <_localeconv_r>
 800f68a:	6803      	ldr	r3, [r0, #0]
 800f68c:	9304      	str	r3, [sp, #16]
 800f68e:	4618      	mov	r0, r3
 800f690:	f7f0 fe0e 	bl	80002b0 <strlen>
 800f694:	2300      	movs	r3, #0
 800f696:	930a      	str	r3, [sp, #40]	@ 0x28
 800f698:	f8d8 3000 	ldr.w	r3, [r8]
 800f69c:	9005      	str	r0, [sp, #20]
 800f69e:	3307      	adds	r3, #7
 800f6a0:	f023 0307 	bic.w	r3, r3, #7
 800f6a4:	f103 0208 	add.w	r2, r3, #8
 800f6a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f6ac:	f8d4 b000 	ldr.w	fp, [r4]
 800f6b0:	f8c8 2000 	str.w	r2, [r8]
 800f6b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f6b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f6bc:	9307      	str	r3, [sp, #28]
 800f6be:	f8cd 8018 	str.w	r8, [sp, #24]
 800f6c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f6c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6ca:	4b9c      	ldr	r3, [pc, #624]	@ (800f93c <_printf_float+0x2c8>)
 800f6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f6d0:	f7f1 fa4c 	bl	8000b6c <__aeabi_dcmpun>
 800f6d4:	bb70      	cbnz	r0, 800f734 <_printf_float+0xc0>
 800f6d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6da:	4b98      	ldr	r3, [pc, #608]	@ (800f93c <_printf_float+0x2c8>)
 800f6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e0:	f7f1 fa26 	bl	8000b30 <__aeabi_dcmple>
 800f6e4:	bb30      	cbnz	r0, 800f734 <_printf_float+0xc0>
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	4640      	mov	r0, r8
 800f6ec:	4649      	mov	r1, r9
 800f6ee:	f7f1 fa15 	bl	8000b1c <__aeabi_dcmplt>
 800f6f2:	b110      	cbz	r0, 800f6fa <_printf_float+0x86>
 800f6f4:	232d      	movs	r3, #45	@ 0x2d
 800f6f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6fa:	4a91      	ldr	r2, [pc, #580]	@ (800f940 <_printf_float+0x2cc>)
 800f6fc:	4b91      	ldr	r3, [pc, #580]	@ (800f944 <_printf_float+0x2d0>)
 800f6fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f702:	bf8c      	ite	hi
 800f704:	4690      	movhi	r8, r2
 800f706:	4698      	movls	r8, r3
 800f708:	2303      	movs	r3, #3
 800f70a:	6123      	str	r3, [r4, #16]
 800f70c:	f02b 0304 	bic.w	r3, fp, #4
 800f710:	6023      	str	r3, [r4, #0]
 800f712:	f04f 0900 	mov.w	r9, #0
 800f716:	9700      	str	r7, [sp, #0]
 800f718:	4633      	mov	r3, r6
 800f71a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f71c:	4621      	mov	r1, r4
 800f71e:	4628      	mov	r0, r5
 800f720:	f000 f9d2 	bl	800fac8 <_printf_common>
 800f724:	3001      	adds	r0, #1
 800f726:	f040 808d 	bne.w	800f844 <_printf_float+0x1d0>
 800f72a:	f04f 30ff 	mov.w	r0, #4294967295
 800f72e:	b00d      	add	sp, #52	@ 0x34
 800f730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f734:	4642      	mov	r2, r8
 800f736:	464b      	mov	r3, r9
 800f738:	4640      	mov	r0, r8
 800f73a:	4649      	mov	r1, r9
 800f73c:	f7f1 fa16 	bl	8000b6c <__aeabi_dcmpun>
 800f740:	b140      	cbz	r0, 800f754 <_printf_float+0xe0>
 800f742:	464b      	mov	r3, r9
 800f744:	2b00      	cmp	r3, #0
 800f746:	bfbc      	itt	lt
 800f748:	232d      	movlt	r3, #45	@ 0x2d
 800f74a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f74e:	4a7e      	ldr	r2, [pc, #504]	@ (800f948 <_printf_float+0x2d4>)
 800f750:	4b7e      	ldr	r3, [pc, #504]	@ (800f94c <_printf_float+0x2d8>)
 800f752:	e7d4      	b.n	800f6fe <_printf_float+0x8a>
 800f754:	6863      	ldr	r3, [r4, #4]
 800f756:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f75a:	9206      	str	r2, [sp, #24]
 800f75c:	1c5a      	adds	r2, r3, #1
 800f75e:	d13b      	bne.n	800f7d8 <_printf_float+0x164>
 800f760:	2306      	movs	r3, #6
 800f762:	6063      	str	r3, [r4, #4]
 800f764:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f768:	2300      	movs	r3, #0
 800f76a:	6022      	str	r2, [r4, #0]
 800f76c:	9303      	str	r3, [sp, #12]
 800f76e:	ab0a      	add	r3, sp, #40	@ 0x28
 800f770:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f774:	ab09      	add	r3, sp, #36	@ 0x24
 800f776:	9300      	str	r3, [sp, #0]
 800f778:	6861      	ldr	r1, [r4, #4]
 800f77a:	ec49 8b10 	vmov	d0, r8, r9
 800f77e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f782:	4628      	mov	r0, r5
 800f784:	f7ff fed6 	bl	800f534 <__cvt>
 800f788:	9b06      	ldr	r3, [sp, #24]
 800f78a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f78c:	2b47      	cmp	r3, #71	@ 0x47
 800f78e:	4680      	mov	r8, r0
 800f790:	d129      	bne.n	800f7e6 <_printf_float+0x172>
 800f792:	1cc8      	adds	r0, r1, #3
 800f794:	db02      	blt.n	800f79c <_printf_float+0x128>
 800f796:	6863      	ldr	r3, [r4, #4]
 800f798:	4299      	cmp	r1, r3
 800f79a:	dd41      	ble.n	800f820 <_printf_float+0x1ac>
 800f79c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f7a0:	fa5f fa8a 	uxtb.w	sl, sl
 800f7a4:	3901      	subs	r1, #1
 800f7a6:	4652      	mov	r2, sl
 800f7a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f7ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800f7ae:	f7ff ff26 	bl	800f5fe <__exponent>
 800f7b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f7b4:	1813      	adds	r3, r2, r0
 800f7b6:	2a01      	cmp	r2, #1
 800f7b8:	4681      	mov	r9, r0
 800f7ba:	6123      	str	r3, [r4, #16]
 800f7bc:	dc02      	bgt.n	800f7c4 <_printf_float+0x150>
 800f7be:	6822      	ldr	r2, [r4, #0]
 800f7c0:	07d2      	lsls	r2, r2, #31
 800f7c2:	d501      	bpl.n	800f7c8 <_printf_float+0x154>
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	6123      	str	r3, [r4, #16]
 800f7c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d0a2      	beq.n	800f716 <_printf_float+0xa2>
 800f7d0:	232d      	movs	r3, #45	@ 0x2d
 800f7d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7d6:	e79e      	b.n	800f716 <_printf_float+0xa2>
 800f7d8:	9a06      	ldr	r2, [sp, #24]
 800f7da:	2a47      	cmp	r2, #71	@ 0x47
 800f7dc:	d1c2      	bne.n	800f764 <_printf_float+0xf0>
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d1c0      	bne.n	800f764 <_printf_float+0xf0>
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e7bd      	b.n	800f762 <_printf_float+0xee>
 800f7e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f7ea:	d9db      	bls.n	800f7a4 <_printf_float+0x130>
 800f7ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f7f0:	d118      	bne.n	800f824 <_printf_float+0x1b0>
 800f7f2:	2900      	cmp	r1, #0
 800f7f4:	6863      	ldr	r3, [r4, #4]
 800f7f6:	dd0b      	ble.n	800f810 <_printf_float+0x19c>
 800f7f8:	6121      	str	r1, [r4, #16]
 800f7fa:	b913      	cbnz	r3, 800f802 <_printf_float+0x18e>
 800f7fc:	6822      	ldr	r2, [r4, #0]
 800f7fe:	07d0      	lsls	r0, r2, #31
 800f800:	d502      	bpl.n	800f808 <_printf_float+0x194>
 800f802:	3301      	adds	r3, #1
 800f804:	440b      	add	r3, r1
 800f806:	6123      	str	r3, [r4, #16]
 800f808:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f80a:	f04f 0900 	mov.w	r9, #0
 800f80e:	e7db      	b.n	800f7c8 <_printf_float+0x154>
 800f810:	b913      	cbnz	r3, 800f818 <_printf_float+0x1a4>
 800f812:	6822      	ldr	r2, [r4, #0]
 800f814:	07d2      	lsls	r2, r2, #31
 800f816:	d501      	bpl.n	800f81c <_printf_float+0x1a8>
 800f818:	3302      	adds	r3, #2
 800f81a:	e7f4      	b.n	800f806 <_printf_float+0x192>
 800f81c:	2301      	movs	r3, #1
 800f81e:	e7f2      	b.n	800f806 <_printf_float+0x192>
 800f820:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f826:	4299      	cmp	r1, r3
 800f828:	db05      	blt.n	800f836 <_printf_float+0x1c2>
 800f82a:	6823      	ldr	r3, [r4, #0]
 800f82c:	6121      	str	r1, [r4, #16]
 800f82e:	07d8      	lsls	r0, r3, #31
 800f830:	d5ea      	bpl.n	800f808 <_printf_float+0x194>
 800f832:	1c4b      	adds	r3, r1, #1
 800f834:	e7e7      	b.n	800f806 <_printf_float+0x192>
 800f836:	2900      	cmp	r1, #0
 800f838:	bfd4      	ite	le
 800f83a:	f1c1 0202 	rsble	r2, r1, #2
 800f83e:	2201      	movgt	r2, #1
 800f840:	4413      	add	r3, r2
 800f842:	e7e0      	b.n	800f806 <_printf_float+0x192>
 800f844:	6823      	ldr	r3, [r4, #0]
 800f846:	055a      	lsls	r2, r3, #21
 800f848:	d407      	bmi.n	800f85a <_printf_float+0x1e6>
 800f84a:	6923      	ldr	r3, [r4, #16]
 800f84c:	4642      	mov	r2, r8
 800f84e:	4631      	mov	r1, r6
 800f850:	4628      	mov	r0, r5
 800f852:	47b8      	blx	r7
 800f854:	3001      	adds	r0, #1
 800f856:	d12b      	bne.n	800f8b0 <_printf_float+0x23c>
 800f858:	e767      	b.n	800f72a <_printf_float+0xb6>
 800f85a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f85e:	f240 80dd 	bls.w	800fa1c <_printf_float+0x3a8>
 800f862:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f866:	2200      	movs	r2, #0
 800f868:	2300      	movs	r3, #0
 800f86a:	f7f1 f94d 	bl	8000b08 <__aeabi_dcmpeq>
 800f86e:	2800      	cmp	r0, #0
 800f870:	d033      	beq.n	800f8da <_printf_float+0x266>
 800f872:	4a37      	ldr	r2, [pc, #220]	@ (800f950 <_printf_float+0x2dc>)
 800f874:	2301      	movs	r3, #1
 800f876:	4631      	mov	r1, r6
 800f878:	4628      	mov	r0, r5
 800f87a:	47b8      	blx	r7
 800f87c:	3001      	adds	r0, #1
 800f87e:	f43f af54 	beq.w	800f72a <_printf_float+0xb6>
 800f882:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f886:	4543      	cmp	r3, r8
 800f888:	db02      	blt.n	800f890 <_printf_float+0x21c>
 800f88a:	6823      	ldr	r3, [r4, #0]
 800f88c:	07d8      	lsls	r0, r3, #31
 800f88e:	d50f      	bpl.n	800f8b0 <_printf_float+0x23c>
 800f890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f894:	4631      	mov	r1, r6
 800f896:	4628      	mov	r0, r5
 800f898:	47b8      	blx	r7
 800f89a:	3001      	adds	r0, #1
 800f89c:	f43f af45 	beq.w	800f72a <_printf_float+0xb6>
 800f8a0:	f04f 0900 	mov.w	r9, #0
 800f8a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800f8a8:	f104 0a1a 	add.w	sl, r4, #26
 800f8ac:	45c8      	cmp	r8, r9
 800f8ae:	dc09      	bgt.n	800f8c4 <_printf_float+0x250>
 800f8b0:	6823      	ldr	r3, [r4, #0]
 800f8b2:	079b      	lsls	r3, r3, #30
 800f8b4:	f100 8103 	bmi.w	800fabe <_printf_float+0x44a>
 800f8b8:	68e0      	ldr	r0, [r4, #12]
 800f8ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8bc:	4298      	cmp	r0, r3
 800f8be:	bfb8      	it	lt
 800f8c0:	4618      	movlt	r0, r3
 800f8c2:	e734      	b.n	800f72e <_printf_float+0xba>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	4652      	mov	r2, sl
 800f8c8:	4631      	mov	r1, r6
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	47b8      	blx	r7
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	f43f af2b 	beq.w	800f72a <_printf_float+0xb6>
 800f8d4:	f109 0901 	add.w	r9, r9, #1
 800f8d8:	e7e8      	b.n	800f8ac <_printf_float+0x238>
 800f8da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	dc39      	bgt.n	800f954 <_printf_float+0x2e0>
 800f8e0:	4a1b      	ldr	r2, [pc, #108]	@ (800f950 <_printf_float+0x2dc>)
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	4631      	mov	r1, r6
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	47b8      	blx	r7
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	f43f af1d 	beq.w	800f72a <_printf_float+0xb6>
 800f8f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f8f4:	ea59 0303 	orrs.w	r3, r9, r3
 800f8f8:	d102      	bne.n	800f900 <_printf_float+0x28c>
 800f8fa:	6823      	ldr	r3, [r4, #0]
 800f8fc:	07d9      	lsls	r1, r3, #31
 800f8fe:	d5d7      	bpl.n	800f8b0 <_printf_float+0x23c>
 800f900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f904:	4631      	mov	r1, r6
 800f906:	4628      	mov	r0, r5
 800f908:	47b8      	blx	r7
 800f90a:	3001      	adds	r0, #1
 800f90c:	f43f af0d 	beq.w	800f72a <_printf_float+0xb6>
 800f910:	f04f 0a00 	mov.w	sl, #0
 800f914:	f104 0b1a 	add.w	fp, r4, #26
 800f918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f91a:	425b      	negs	r3, r3
 800f91c:	4553      	cmp	r3, sl
 800f91e:	dc01      	bgt.n	800f924 <_printf_float+0x2b0>
 800f920:	464b      	mov	r3, r9
 800f922:	e793      	b.n	800f84c <_printf_float+0x1d8>
 800f924:	2301      	movs	r3, #1
 800f926:	465a      	mov	r2, fp
 800f928:	4631      	mov	r1, r6
 800f92a:	4628      	mov	r0, r5
 800f92c:	47b8      	blx	r7
 800f92e:	3001      	adds	r0, #1
 800f930:	f43f aefb 	beq.w	800f72a <_printf_float+0xb6>
 800f934:	f10a 0a01 	add.w	sl, sl, #1
 800f938:	e7ee      	b.n	800f918 <_printf_float+0x2a4>
 800f93a:	bf00      	nop
 800f93c:	7fefffff 	.word	0x7fefffff
 800f940:	08012848 	.word	0x08012848
 800f944:	08012844 	.word	0x08012844
 800f948:	08012850 	.word	0x08012850
 800f94c:	0801284c 	.word	0x0801284c
 800f950:	08012854 	.word	0x08012854
 800f954:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f956:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f95a:	4553      	cmp	r3, sl
 800f95c:	bfa8      	it	ge
 800f95e:	4653      	movge	r3, sl
 800f960:	2b00      	cmp	r3, #0
 800f962:	4699      	mov	r9, r3
 800f964:	dc36      	bgt.n	800f9d4 <_printf_float+0x360>
 800f966:	f04f 0b00 	mov.w	fp, #0
 800f96a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f96e:	f104 021a 	add.w	r2, r4, #26
 800f972:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f974:	9306      	str	r3, [sp, #24]
 800f976:	eba3 0309 	sub.w	r3, r3, r9
 800f97a:	455b      	cmp	r3, fp
 800f97c:	dc31      	bgt.n	800f9e2 <_printf_float+0x36e>
 800f97e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f980:	459a      	cmp	sl, r3
 800f982:	dc3a      	bgt.n	800f9fa <_printf_float+0x386>
 800f984:	6823      	ldr	r3, [r4, #0]
 800f986:	07da      	lsls	r2, r3, #31
 800f988:	d437      	bmi.n	800f9fa <_printf_float+0x386>
 800f98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f98c:	ebaa 0903 	sub.w	r9, sl, r3
 800f990:	9b06      	ldr	r3, [sp, #24]
 800f992:	ebaa 0303 	sub.w	r3, sl, r3
 800f996:	4599      	cmp	r9, r3
 800f998:	bfa8      	it	ge
 800f99a:	4699      	movge	r9, r3
 800f99c:	f1b9 0f00 	cmp.w	r9, #0
 800f9a0:	dc33      	bgt.n	800fa0a <_printf_float+0x396>
 800f9a2:	f04f 0800 	mov.w	r8, #0
 800f9a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9aa:	f104 0b1a 	add.w	fp, r4, #26
 800f9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9b0:	ebaa 0303 	sub.w	r3, sl, r3
 800f9b4:	eba3 0309 	sub.w	r3, r3, r9
 800f9b8:	4543      	cmp	r3, r8
 800f9ba:	f77f af79 	ble.w	800f8b0 <_printf_float+0x23c>
 800f9be:	2301      	movs	r3, #1
 800f9c0:	465a      	mov	r2, fp
 800f9c2:	4631      	mov	r1, r6
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	47b8      	blx	r7
 800f9c8:	3001      	adds	r0, #1
 800f9ca:	f43f aeae 	beq.w	800f72a <_printf_float+0xb6>
 800f9ce:	f108 0801 	add.w	r8, r8, #1
 800f9d2:	e7ec      	b.n	800f9ae <_printf_float+0x33a>
 800f9d4:	4642      	mov	r2, r8
 800f9d6:	4631      	mov	r1, r6
 800f9d8:	4628      	mov	r0, r5
 800f9da:	47b8      	blx	r7
 800f9dc:	3001      	adds	r0, #1
 800f9de:	d1c2      	bne.n	800f966 <_printf_float+0x2f2>
 800f9e0:	e6a3      	b.n	800f72a <_printf_float+0xb6>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	4631      	mov	r1, r6
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	9206      	str	r2, [sp, #24]
 800f9ea:	47b8      	blx	r7
 800f9ec:	3001      	adds	r0, #1
 800f9ee:	f43f ae9c 	beq.w	800f72a <_printf_float+0xb6>
 800f9f2:	9a06      	ldr	r2, [sp, #24]
 800f9f4:	f10b 0b01 	add.w	fp, fp, #1
 800f9f8:	e7bb      	b.n	800f972 <_printf_float+0x2fe>
 800f9fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9fe:	4631      	mov	r1, r6
 800fa00:	4628      	mov	r0, r5
 800fa02:	47b8      	blx	r7
 800fa04:	3001      	adds	r0, #1
 800fa06:	d1c0      	bne.n	800f98a <_printf_float+0x316>
 800fa08:	e68f      	b.n	800f72a <_printf_float+0xb6>
 800fa0a:	9a06      	ldr	r2, [sp, #24]
 800fa0c:	464b      	mov	r3, r9
 800fa0e:	4442      	add	r2, r8
 800fa10:	4631      	mov	r1, r6
 800fa12:	4628      	mov	r0, r5
 800fa14:	47b8      	blx	r7
 800fa16:	3001      	adds	r0, #1
 800fa18:	d1c3      	bne.n	800f9a2 <_printf_float+0x32e>
 800fa1a:	e686      	b.n	800f72a <_printf_float+0xb6>
 800fa1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fa20:	f1ba 0f01 	cmp.w	sl, #1
 800fa24:	dc01      	bgt.n	800fa2a <_printf_float+0x3b6>
 800fa26:	07db      	lsls	r3, r3, #31
 800fa28:	d536      	bpl.n	800fa98 <_printf_float+0x424>
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	4642      	mov	r2, r8
 800fa2e:	4631      	mov	r1, r6
 800fa30:	4628      	mov	r0, r5
 800fa32:	47b8      	blx	r7
 800fa34:	3001      	adds	r0, #1
 800fa36:	f43f ae78 	beq.w	800f72a <_printf_float+0xb6>
 800fa3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa3e:	4631      	mov	r1, r6
 800fa40:	4628      	mov	r0, r5
 800fa42:	47b8      	blx	r7
 800fa44:	3001      	adds	r0, #1
 800fa46:	f43f ae70 	beq.w	800f72a <_printf_float+0xb6>
 800fa4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fa4e:	2200      	movs	r2, #0
 800fa50:	2300      	movs	r3, #0
 800fa52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa56:	f7f1 f857 	bl	8000b08 <__aeabi_dcmpeq>
 800fa5a:	b9c0      	cbnz	r0, 800fa8e <_printf_float+0x41a>
 800fa5c:	4653      	mov	r3, sl
 800fa5e:	f108 0201 	add.w	r2, r8, #1
 800fa62:	4631      	mov	r1, r6
 800fa64:	4628      	mov	r0, r5
 800fa66:	47b8      	blx	r7
 800fa68:	3001      	adds	r0, #1
 800fa6a:	d10c      	bne.n	800fa86 <_printf_float+0x412>
 800fa6c:	e65d      	b.n	800f72a <_printf_float+0xb6>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	465a      	mov	r2, fp
 800fa72:	4631      	mov	r1, r6
 800fa74:	4628      	mov	r0, r5
 800fa76:	47b8      	blx	r7
 800fa78:	3001      	adds	r0, #1
 800fa7a:	f43f ae56 	beq.w	800f72a <_printf_float+0xb6>
 800fa7e:	f108 0801 	add.w	r8, r8, #1
 800fa82:	45d0      	cmp	r8, sl
 800fa84:	dbf3      	blt.n	800fa6e <_printf_float+0x3fa>
 800fa86:	464b      	mov	r3, r9
 800fa88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fa8c:	e6df      	b.n	800f84e <_printf_float+0x1da>
 800fa8e:	f04f 0800 	mov.w	r8, #0
 800fa92:	f104 0b1a 	add.w	fp, r4, #26
 800fa96:	e7f4      	b.n	800fa82 <_printf_float+0x40e>
 800fa98:	2301      	movs	r3, #1
 800fa9a:	4642      	mov	r2, r8
 800fa9c:	e7e1      	b.n	800fa62 <_printf_float+0x3ee>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	464a      	mov	r2, r9
 800faa2:	4631      	mov	r1, r6
 800faa4:	4628      	mov	r0, r5
 800faa6:	47b8      	blx	r7
 800faa8:	3001      	adds	r0, #1
 800faaa:	f43f ae3e 	beq.w	800f72a <_printf_float+0xb6>
 800faae:	f108 0801 	add.w	r8, r8, #1
 800fab2:	68e3      	ldr	r3, [r4, #12]
 800fab4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fab6:	1a5b      	subs	r3, r3, r1
 800fab8:	4543      	cmp	r3, r8
 800faba:	dcf0      	bgt.n	800fa9e <_printf_float+0x42a>
 800fabc:	e6fc      	b.n	800f8b8 <_printf_float+0x244>
 800fabe:	f04f 0800 	mov.w	r8, #0
 800fac2:	f104 0919 	add.w	r9, r4, #25
 800fac6:	e7f4      	b.n	800fab2 <_printf_float+0x43e>

0800fac8 <_printf_common>:
 800fac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800facc:	4616      	mov	r6, r2
 800face:	4698      	mov	r8, r3
 800fad0:	688a      	ldr	r2, [r1, #8]
 800fad2:	690b      	ldr	r3, [r1, #16]
 800fad4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fad8:	4293      	cmp	r3, r2
 800fada:	bfb8      	it	lt
 800fadc:	4613      	movlt	r3, r2
 800fade:	6033      	str	r3, [r6, #0]
 800fae0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fae4:	4607      	mov	r7, r0
 800fae6:	460c      	mov	r4, r1
 800fae8:	b10a      	cbz	r2, 800faee <_printf_common+0x26>
 800faea:	3301      	adds	r3, #1
 800faec:	6033      	str	r3, [r6, #0]
 800faee:	6823      	ldr	r3, [r4, #0]
 800faf0:	0699      	lsls	r1, r3, #26
 800faf2:	bf42      	ittt	mi
 800faf4:	6833      	ldrmi	r3, [r6, #0]
 800faf6:	3302      	addmi	r3, #2
 800faf8:	6033      	strmi	r3, [r6, #0]
 800fafa:	6825      	ldr	r5, [r4, #0]
 800fafc:	f015 0506 	ands.w	r5, r5, #6
 800fb00:	d106      	bne.n	800fb10 <_printf_common+0x48>
 800fb02:	f104 0a19 	add.w	sl, r4, #25
 800fb06:	68e3      	ldr	r3, [r4, #12]
 800fb08:	6832      	ldr	r2, [r6, #0]
 800fb0a:	1a9b      	subs	r3, r3, r2
 800fb0c:	42ab      	cmp	r3, r5
 800fb0e:	dc26      	bgt.n	800fb5e <_printf_common+0x96>
 800fb10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fb14:	6822      	ldr	r2, [r4, #0]
 800fb16:	3b00      	subs	r3, #0
 800fb18:	bf18      	it	ne
 800fb1a:	2301      	movne	r3, #1
 800fb1c:	0692      	lsls	r2, r2, #26
 800fb1e:	d42b      	bmi.n	800fb78 <_printf_common+0xb0>
 800fb20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fb24:	4641      	mov	r1, r8
 800fb26:	4638      	mov	r0, r7
 800fb28:	47c8      	blx	r9
 800fb2a:	3001      	adds	r0, #1
 800fb2c:	d01e      	beq.n	800fb6c <_printf_common+0xa4>
 800fb2e:	6823      	ldr	r3, [r4, #0]
 800fb30:	6922      	ldr	r2, [r4, #16]
 800fb32:	f003 0306 	and.w	r3, r3, #6
 800fb36:	2b04      	cmp	r3, #4
 800fb38:	bf02      	ittt	eq
 800fb3a:	68e5      	ldreq	r5, [r4, #12]
 800fb3c:	6833      	ldreq	r3, [r6, #0]
 800fb3e:	1aed      	subeq	r5, r5, r3
 800fb40:	68a3      	ldr	r3, [r4, #8]
 800fb42:	bf0c      	ite	eq
 800fb44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb48:	2500      	movne	r5, #0
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	bfc4      	itt	gt
 800fb4e:	1a9b      	subgt	r3, r3, r2
 800fb50:	18ed      	addgt	r5, r5, r3
 800fb52:	2600      	movs	r6, #0
 800fb54:	341a      	adds	r4, #26
 800fb56:	42b5      	cmp	r5, r6
 800fb58:	d11a      	bne.n	800fb90 <_printf_common+0xc8>
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	e008      	b.n	800fb70 <_printf_common+0xa8>
 800fb5e:	2301      	movs	r3, #1
 800fb60:	4652      	mov	r2, sl
 800fb62:	4641      	mov	r1, r8
 800fb64:	4638      	mov	r0, r7
 800fb66:	47c8      	blx	r9
 800fb68:	3001      	adds	r0, #1
 800fb6a:	d103      	bne.n	800fb74 <_printf_common+0xac>
 800fb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb74:	3501      	adds	r5, #1
 800fb76:	e7c6      	b.n	800fb06 <_printf_common+0x3e>
 800fb78:	18e1      	adds	r1, r4, r3
 800fb7a:	1c5a      	adds	r2, r3, #1
 800fb7c:	2030      	movs	r0, #48	@ 0x30
 800fb7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fb82:	4422      	add	r2, r4
 800fb84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fb88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fb8c:	3302      	adds	r3, #2
 800fb8e:	e7c7      	b.n	800fb20 <_printf_common+0x58>
 800fb90:	2301      	movs	r3, #1
 800fb92:	4622      	mov	r2, r4
 800fb94:	4641      	mov	r1, r8
 800fb96:	4638      	mov	r0, r7
 800fb98:	47c8      	blx	r9
 800fb9a:	3001      	adds	r0, #1
 800fb9c:	d0e6      	beq.n	800fb6c <_printf_common+0xa4>
 800fb9e:	3601      	adds	r6, #1
 800fba0:	e7d9      	b.n	800fb56 <_printf_common+0x8e>
	...

0800fba4 <_printf_i>:
 800fba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fba8:	7e0f      	ldrb	r7, [r1, #24]
 800fbaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fbac:	2f78      	cmp	r7, #120	@ 0x78
 800fbae:	4691      	mov	r9, r2
 800fbb0:	4680      	mov	r8, r0
 800fbb2:	460c      	mov	r4, r1
 800fbb4:	469a      	mov	sl, r3
 800fbb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fbba:	d807      	bhi.n	800fbcc <_printf_i+0x28>
 800fbbc:	2f62      	cmp	r7, #98	@ 0x62
 800fbbe:	d80a      	bhi.n	800fbd6 <_printf_i+0x32>
 800fbc0:	2f00      	cmp	r7, #0
 800fbc2:	f000 80d1 	beq.w	800fd68 <_printf_i+0x1c4>
 800fbc6:	2f58      	cmp	r7, #88	@ 0x58
 800fbc8:	f000 80b8 	beq.w	800fd3c <_printf_i+0x198>
 800fbcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fbd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fbd4:	e03a      	b.n	800fc4c <_printf_i+0xa8>
 800fbd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fbda:	2b15      	cmp	r3, #21
 800fbdc:	d8f6      	bhi.n	800fbcc <_printf_i+0x28>
 800fbde:	a101      	add	r1, pc, #4	@ (adr r1, 800fbe4 <_printf_i+0x40>)
 800fbe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fbe4:	0800fc3d 	.word	0x0800fc3d
 800fbe8:	0800fc51 	.word	0x0800fc51
 800fbec:	0800fbcd 	.word	0x0800fbcd
 800fbf0:	0800fbcd 	.word	0x0800fbcd
 800fbf4:	0800fbcd 	.word	0x0800fbcd
 800fbf8:	0800fbcd 	.word	0x0800fbcd
 800fbfc:	0800fc51 	.word	0x0800fc51
 800fc00:	0800fbcd 	.word	0x0800fbcd
 800fc04:	0800fbcd 	.word	0x0800fbcd
 800fc08:	0800fbcd 	.word	0x0800fbcd
 800fc0c:	0800fbcd 	.word	0x0800fbcd
 800fc10:	0800fd4f 	.word	0x0800fd4f
 800fc14:	0800fc7b 	.word	0x0800fc7b
 800fc18:	0800fd09 	.word	0x0800fd09
 800fc1c:	0800fbcd 	.word	0x0800fbcd
 800fc20:	0800fbcd 	.word	0x0800fbcd
 800fc24:	0800fd71 	.word	0x0800fd71
 800fc28:	0800fbcd 	.word	0x0800fbcd
 800fc2c:	0800fc7b 	.word	0x0800fc7b
 800fc30:	0800fbcd 	.word	0x0800fbcd
 800fc34:	0800fbcd 	.word	0x0800fbcd
 800fc38:	0800fd11 	.word	0x0800fd11
 800fc3c:	6833      	ldr	r3, [r6, #0]
 800fc3e:	1d1a      	adds	r2, r3, #4
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	6032      	str	r2, [r6, #0]
 800fc44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	e09c      	b.n	800fd8a <_printf_i+0x1e6>
 800fc50:	6833      	ldr	r3, [r6, #0]
 800fc52:	6820      	ldr	r0, [r4, #0]
 800fc54:	1d19      	adds	r1, r3, #4
 800fc56:	6031      	str	r1, [r6, #0]
 800fc58:	0606      	lsls	r6, r0, #24
 800fc5a:	d501      	bpl.n	800fc60 <_printf_i+0xbc>
 800fc5c:	681d      	ldr	r5, [r3, #0]
 800fc5e:	e003      	b.n	800fc68 <_printf_i+0xc4>
 800fc60:	0645      	lsls	r5, r0, #25
 800fc62:	d5fb      	bpl.n	800fc5c <_printf_i+0xb8>
 800fc64:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fc68:	2d00      	cmp	r5, #0
 800fc6a:	da03      	bge.n	800fc74 <_printf_i+0xd0>
 800fc6c:	232d      	movs	r3, #45	@ 0x2d
 800fc6e:	426d      	negs	r5, r5
 800fc70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc74:	4858      	ldr	r0, [pc, #352]	@ (800fdd8 <_printf_i+0x234>)
 800fc76:	230a      	movs	r3, #10
 800fc78:	e011      	b.n	800fc9e <_printf_i+0xfa>
 800fc7a:	6821      	ldr	r1, [r4, #0]
 800fc7c:	6833      	ldr	r3, [r6, #0]
 800fc7e:	0608      	lsls	r0, r1, #24
 800fc80:	f853 5b04 	ldr.w	r5, [r3], #4
 800fc84:	d402      	bmi.n	800fc8c <_printf_i+0xe8>
 800fc86:	0649      	lsls	r1, r1, #25
 800fc88:	bf48      	it	mi
 800fc8a:	b2ad      	uxthmi	r5, r5
 800fc8c:	2f6f      	cmp	r7, #111	@ 0x6f
 800fc8e:	4852      	ldr	r0, [pc, #328]	@ (800fdd8 <_printf_i+0x234>)
 800fc90:	6033      	str	r3, [r6, #0]
 800fc92:	bf14      	ite	ne
 800fc94:	230a      	movne	r3, #10
 800fc96:	2308      	moveq	r3, #8
 800fc98:	2100      	movs	r1, #0
 800fc9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fc9e:	6866      	ldr	r6, [r4, #4]
 800fca0:	60a6      	str	r6, [r4, #8]
 800fca2:	2e00      	cmp	r6, #0
 800fca4:	db05      	blt.n	800fcb2 <_printf_i+0x10e>
 800fca6:	6821      	ldr	r1, [r4, #0]
 800fca8:	432e      	orrs	r6, r5
 800fcaa:	f021 0104 	bic.w	r1, r1, #4
 800fcae:	6021      	str	r1, [r4, #0]
 800fcb0:	d04b      	beq.n	800fd4a <_printf_i+0x1a6>
 800fcb2:	4616      	mov	r6, r2
 800fcb4:	fbb5 f1f3 	udiv	r1, r5, r3
 800fcb8:	fb03 5711 	mls	r7, r3, r1, r5
 800fcbc:	5dc7      	ldrb	r7, [r0, r7]
 800fcbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fcc2:	462f      	mov	r7, r5
 800fcc4:	42bb      	cmp	r3, r7
 800fcc6:	460d      	mov	r5, r1
 800fcc8:	d9f4      	bls.n	800fcb4 <_printf_i+0x110>
 800fcca:	2b08      	cmp	r3, #8
 800fccc:	d10b      	bne.n	800fce6 <_printf_i+0x142>
 800fcce:	6823      	ldr	r3, [r4, #0]
 800fcd0:	07df      	lsls	r7, r3, #31
 800fcd2:	d508      	bpl.n	800fce6 <_printf_i+0x142>
 800fcd4:	6923      	ldr	r3, [r4, #16]
 800fcd6:	6861      	ldr	r1, [r4, #4]
 800fcd8:	4299      	cmp	r1, r3
 800fcda:	bfde      	ittt	le
 800fcdc:	2330      	movle	r3, #48	@ 0x30
 800fcde:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fce2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fce6:	1b92      	subs	r2, r2, r6
 800fce8:	6122      	str	r2, [r4, #16]
 800fcea:	f8cd a000 	str.w	sl, [sp]
 800fcee:	464b      	mov	r3, r9
 800fcf0:	aa03      	add	r2, sp, #12
 800fcf2:	4621      	mov	r1, r4
 800fcf4:	4640      	mov	r0, r8
 800fcf6:	f7ff fee7 	bl	800fac8 <_printf_common>
 800fcfa:	3001      	adds	r0, #1
 800fcfc:	d14a      	bne.n	800fd94 <_printf_i+0x1f0>
 800fcfe:	f04f 30ff 	mov.w	r0, #4294967295
 800fd02:	b004      	add	sp, #16
 800fd04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd08:	6823      	ldr	r3, [r4, #0]
 800fd0a:	f043 0320 	orr.w	r3, r3, #32
 800fd0e:	6023      	str	r3, [r4, #0]
 800fd10:	4832      	ldr	r0, [pc, #200]	@ (800fddc <_printf_i+0x238>)
 800fd12:	2778      	movs	r7, #120	@ 0x78
 800fd14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fd18:	6823      	ldr	r3, [r4, #0]
 800fd1a:	6831      	ldr	r1, [r6, #0]
 800fd1c:	061f      	lsls	r7, r3, #24
 800fd1e:	f851 5b04 	ldr.w	r5, [r1], #4
 800fd22:	d402      	bmi.n	800fd2a <_printf_i+0x186>
 800fd24:	065f      	lsls	r7, r3, #25
 800fd26:	bf48      	it	mi
 800fd28:	b2ad      	uxthmi	r5, r5
 800fd2a:	6031      	str	r1, [r6, #0]
 800fd2c:	07d9      	lsls	r1, r3, #31
 800fd2e:	bf44      	itt	mi
 800fd30:	f043 0320 	orrmi.w	r3, r3, #32
 800fd34:	6023      	strmi	r3, [r4, #0]
 800fd36:	b11d      	cbz	r5, 800fd40 <_printf_i+0x19c>
 800fd38:	2310      	movs	r3, #16
 800fd3a:	e7ad      	b.n	800fc98 <_printf_i+0xf4>
 800fd3c:	4826      	ldr	r0, [pc, #152]	@ (800fdd8 <_printf_i+0x234>)
 800fd3e:	e7e9      	b.n	800fd14 <_printf_i+0x170>
 800fd40:	6823      	ldr	r3, [r4, #0]
 800fd42:	f023 0320 	bic.w	r3, r3, #32
 800fd46:	6023      	str	r3, [r4, #0]
 800fd48:	e7f6      	b.n	800fd38 <_printf_i+0x194>
 800fd4a:	4616      	mov	r6, r2
 800fd4c:	e7bd      	b.n	800fcca <_printf_i+0x126>
 800fd4e:	6833      	ldr	r3, [r6, #0]
 800fd50:	6825      	ldr	r5, [r4, #0]
 800fd52:	6961      	ldr	r1, [r4, #20]
 800fd54:	1d18      	adds	r0, r3, #4
 800fd56:	6030      	str	r0, [r6, #0]
 800fd58:	062e      	lsls	r6, r5, #24
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	d501      	bpl.n	800fd62 <_printf_i+0x1be>
 800fd5e:	6019      	str	r1, [r3, #0]
 800fd60:	e002      	b.n	800fd68 <_printf_i+0x1c4>
 800fd62:	0668      	lsls	r0, r5, #25
 800fd64:	d5fb      	bpl.n	800fd5e <_printf_i+0x1ba>
 800fd66:	8019      	strh	r1, [r3, #0]
 800fd68:	2300      	movs	r3, #0
 800fd6a:	6123      	str	r3, [r4, #16]
 800fd6c:	4616      	mov	r6, r2
 800fd6e:	e7bc      	b.n	800fcea <_printf_i+0x146>
 800fd70:	6833      	ldr	r3, [r6, #0]
 800fd72:	1d1a      	adds	r2, r3, #4
 800fd74:	6032      	str	r2, [r6, #0]
 800fd76:	681e      	ldr	r6, [r3, #0]
 800fd78:	6862      	ldr	r2, [r4, #4]
 800fd7a:	2100      	movs	r1, #0
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	f7f0 fa47 	bl	8000210 <memchr>
 800fd82:	b108      	cbz	r0, 800fd88 <_printf_i+0x1e4>
 800fd84:	1b80      	subs	r0, r0, r6
 800fd86:	6060      	str	r0, [r4, #4]
 800fd88:	6863      	ldr	r3, [r4, #4]
 800fd8a:	6123      	str	r3, [r4, #16]
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd92:	e7aa      	b.n	800fcea <_printf_i+0x146>
 800fd94:	6923      	ldr	r3, [r4, #16]
 800fd96:	4632      	mov	r2, r6
 800fd98:	4649      	mov	r1, r9
 800fd9a:	4640      	mov	r0, r8
 800fd9c:	47d0      	blx	sl
 800fd9e:	3001      	adds	r0, #1
 800fda0:	d0ad      	beq.n	800fcfe <_printf_i+0x15a>
 800fda2:	6823      	ldr	r3, [r4, #0]
 800fda4:	079b      	lsls	r3, r3, #30
 800fda6:	d413      	bmi.n	800fdd0 <_printf_i+0x22c>
 800fda8:	68e0      	ldr	r0, [r4, #12]
 800fdaa:	9b03      	ldr	r3, [sp, #12]
 800fdac:	4298      	cmp	r0, r3
 800fdae:	bfb8      	it	lt
 800fdb0:	4618      	movlt	r0, r3
 800fdb2:	e7a6      	b.n	800fd02 <_printf_i+0x15e>
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	4632      	mov	r2, r6
 800fdb8:	4649      	mov	r1, r9
 800fdba:	4640      	mov	r0, r8
 800fdbc:	47d0      	blx	sl
 800fdbe:	3001      	adds	r0, #1
 800fdc0:	d09d      	beq.n	800fcfe <_printf_i+0x15a>
 800fdc2:	3501      	adds	r5, #1
 800fdc4:	68e3      	ldr	r3, [r4, #12]
 800fdc6:	9903      	ldr	r1, [sp, #12]
 800fdc8:	1a5b      	subs	r3, r3, r1
 800fdca:	42ab      	cmp	r3, r5
 800fdcc:	dcf2      	bgt.n	800fdb4 <_printf_i+0x210>
 800fdce:	e7eb      	b.n	800fda8 <_printf_i+0x204>
 800fdd0:	2500      	movs	r5, #0
 800fdd2:	f104 0619 	add.w	r6, r4, #25
 800fdd6:	e7f5      	b.n	800fdc4 <_printf_i+0x220>
 800fdd8:	08012856 	.word	0x08012856
 800fddc:	08012867 	.word	0x08012867

0800fde0 <std>:
 800fde0:	2300      	movs	r3, #0
 800fde2:	b510      	push	{r4, lr}
 800fde4:	4604      	mov	r4, r0
 800fde6:	e9c0 3300 	strd	r3, r3, [r0]
 800fdea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fdee:	6083      	str	r3, [r0, #8]
 800fdf0:	8181      	strh	r1, [r0, #12]
 800fdf2:	6643      	str	r3, [r0, #100]	@ 0x64
 800fdf4:	81c2      	strh	r2, [r0, #14]
 800fdf6:	6183      	str	r3, [r0, #24]
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	2208      	movs	r2, #8
 800fdfc:	305c      	adds	r0, #92	@ 0x5c
 800fdfe:	f000 fa2f 	bl	8010260 <memset>
 800fe02:	4b0d      	ldr	r3, [pc, #52]	@ (800fe38 <std+0x58>)
 800fe04:	6263      	str	r3, [r4, #36]	@ 0x24
 800fe06:	4b0d      	ldr	r3, [pc, #52]	@ (800fe3c <std+0x5c>)
 800fe08:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fe0a:	4b0d      	ldr	r3, [pc, #52]	@ (800fe40 <std+0x60>)
 800fe0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fe0e:	4b0d      	ldr	r3, [pc, #52]	@ (800fe44 <std+0x64>)
 800fe10:	6323      	str	r3, [r4, #48]	@ 0x30
 800fe12:	4b0d      	ldr	r3, [pc, #52]	@ (800fe48 <std+0x68>)
 800fe14:	6224      	str	r4, [r4, #32]
 800fe16:	429c      	cmp	r4, r3
 800fe18:	d006      	beq.n	800fe28 <std+0x48>
 800fe1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fe1e:	4294      	cmp	r4, r2
 800fe20:	d002      	beq.n	800fe28 <std+0x48>
 800fe22:	33d0      	adds	r3, #208	@ 0xd0
 800fe24:	429c      	cmp	r4, r3
 800fe26:	d105      	bne.n	800fe34 <std+0x54>
 800fe28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fe2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe30:	f000 baf0 	b.w	8010414 <__retarget_lock_init_recursive>
 800fe34:	bd10      	pop	{r4, pc}
 800fe36:	bf00      	nop
 800fe38:	080100b1 	.word	0x080100b1
 800fe3c:	080100d3 	.word	0x080100d3
 800fe40:	0801010b 	.word	0x0801010b
 800fe44:	0801012f 	.word	0x0801012f
 800fe48:	20004f2c 	.word	0x20004f2c

0800fe4c <stdio_exit_handler>:
 800fe4c:	4a02      	ldr	r2, [pc, #8]	@ (800fe58 <stdio_exit_handler+0xc>)
 800fe4e:	4903      	ldr	r1, [pc, #12]	@ (800fe5c <stdio_exit_handler+0x10>)
 800fe50:	4803      	ldr	r0, [pc, #12]	@ (800fe60 <stdio_exit_handler+0x14>)
 800fe52:	f000 b869 	b.w	800ff28 <_fwalk_sglue>
 800fe56:	bf00      	nop
 800fe58:	20000010 	.word	0x20000010
 800fe5c:	08012019 	.word	0x08012019
 800fe60:	20000020 	.word	0x20000020

0800fe64 <cleanup_stdio>:
 800fe64:	6841      	ldr	r1, [r0, #4]
 800fe66:	4b0c      	ldr	r3, [pc, #48]	@ (800fe98 <cleanup_stdio+0x34>)
 800fe68:	4299      	cmp	r1, r3
 800fe6a:	b510      	push	{r4, lr}
 800fe6c:	4604      	mov	r4, r0
 800fe6e:	d001      	beq.n	800fe74 <cleanup_stdio+0x10>
 800fe70:	f002 f8d2 	bl	8012018 <_fflush_r>
 800fe74:	68a1      	ldr	r1, [r4, #8]
 800fe76:	4b09      	ldr	r3, [pc, #36]	@ (800fe9c <cleanup_stdio+0x38>)
 800fe78:	4299      	cmp	r1, r3
 800fe7a:	d002      	beq.n	800fe82 <cleanup_stdio+0x1e>
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	f002 f8cb 	bl	8012018 <_fflush_r>
 800fe82:	68e1      	ldr	r1, [r4, #12]
 800fe84:	4b06      	ldr	r3, [pc, #24]	@ (800fea0 <cleanup_stdio+0x3c>)
 800fe86:	4299      	cmp	r1, r3
 800fe88:	d004      	beq.n	800fe94 <cleanup_stdio+0x30>
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe90:	f002 b8c2 	b.w	8012018 <_fflush_r>
 800fe94:	bd10      	pop	{r4, pc}
 800fe96:	bf00      	nop
 800fe98:	20004f2c 	.word	0x20004f2c
 800fe9c:	20004f94 	.word	0x20004f94
 800fea0:	20004ffc 	.word	0x20004ffc

0800fea4 <global_stdio_init.part.0>:
 800fea4:	b510      	push	{r4, lr}
 800fea6:	4b0b      	ldr	r3, [pc, #44]	@ (800fed4 <global_stdio_init.part.0+0x30>)
 800fea8:	4c0b      	ldr	r4, [pc, #44]	@ (800fed8 <global_stdio_init.part.0+0x34>)
 800feaa:	4a0c      	ldr	r2, [pc, #48]	@ (800fedc <global_stdio_init.part.0+0x38>)
 800feac:	601a      	str	r2, [r3, #0]
 800feae:	4620      	mov	r0, r4
 800feb0:	2200      	movs	r2, #0
 800feb2:	2104      	movs	r1, #4
 800feb4:	f7ff ff94 	bl	800fde0 <std>
 800feb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800febc:	2201      	movs	r2, #1
 800febe:	2109      	movs	r1, #9
 800fec0:	f7ff ff8e 	bl	800fde0 <std>
 800fec4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fec8:	2202      	movs	r2, #2
 800feca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fece:	2112      	movs	r1, #18
 800fed0:	f7ff bf86 	b.w	800fde0 <std>
 800fed4:	20005064 	.word	0x20005064
 800fed8:	20004f2c 	.word	0x20004f2c
 800fedc:	0800fe4d 	.word	0x0800fe4d

0800fee0 <__sfp_lock_acquire>:
 800fee0:	4801      	ldr	r0, [pc, #4]	@ (800fee8 <__sfp_lock_acquire+0x8>)
 800fee2:	f000 ba98 	b.w	8010416 <__retarget_lock_acquire_recursive>
 800fee6:	bf00      	nop
 800fee8:	2000506d 	.word	0x2000506d

0800feec <__sfp_lock_release>:
 800feec:	4801      	ldr	r0, [pc, #4]	@ (800fef4 <__sfp_lock_release+0x8>)
 800feee:	f000 ba93 	b.w	8010418 <__retarget_lock_release_recursive>
 800fef2:	bf00      	nop
 800fef4:	2000506d 	.word	0x2000506d

0800fef8 <__sinit>:
 800fef8:	b510      	push	{r4, lr}
 800fefa:	4604      	mov	r4, r0
 800fefc:	f7ff fff0 	bl	800fee0 <__sfp_lock_acquire>
 800ff00:	6a23      	ldr	r3, [r4, #32]
 800ff02:	b11b      	cbz	r3, 800ff0c <__sinit+0x14>
 800ff04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff08:	f7ff bff0 	b.w	800feec <__sfp_lock_release>
 800ff0c:	4b04      	ldr	r3, [pc, #16]	@ (800ff20 <__sinit+0x28>)
 800ff0e:	6223      	str	r3, [r4, #32]
 800ff10:	4b04      	ldr	r3, [pc, #16]	@ (800ff24 <__sinit+0x2c>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d1f5      	bne.n	800ff04 <__sinit+0xc>
 800ff18:	f7ff ffc4 	bl	800fea4 <global_stdio_init.part.0>
 800ff1c:	e7f2      	b.n	800ff04 <__sinit+0xc>
 800ff1e:	bf00      	nop
 800ff20:	0800fe65 	.word	0x0800fe65
 800ff24:	20005064 	.word	0x20005064

0800ff28 <_fwalk_sglue>:
 800ff28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff2c:	4607      	mov	r7, r0
 800ff2e:	4688      	mov	r8, r1
 800ff30:	4614      	mov	r4, r2
 800ff32:	2600      	movs	r6, #0
 800ff34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff38:	f1b9 0901 	subs.w	r9, r9, #1
 800ff3c:	d505      	bpl.n	800ff4a <_fwalk_sglue+0x22>
 800ff3e:	6824      	ldr	r4, [r4, #0]
 800ff40:	2c00      	cmp	r4, #0
 800ff42:	d1f7      	bne.n	800ff34 <_fwalk_sglue+0xc>
 800ff44:	4630      	mov	r0, r6
 800ff46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff4a:	89ab      	ldrh	r3, [r5, #12]
 800ff4c:	2b01      	cmp	r3, #1
 800ff4e:	d907      	bls.n	800ff60 <_fwalk_sglue+0x38>
 800ff50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff54:	3301      	adds	r3, #1
 800ff56:	d003      	beq.n	800ff60 <_fwalk_sglue+0x38>
 800ff58:	4629      	mov	r1, r5
 800ff5a:	4638      	mov	r0, r7
 800ff5c:	47c0      	blx	r8
 800ff5e:	4306      	orrs	r6, r0
 800ff60:	3568      	adds	r5, #104	@ 0x68
 800ff62:	e7e9      	b.n	800ff38 <_fwalk_sglue+0x10>

0800ff64 <iprintf>:
 800ff64:	b40f      	push	{r0, r1, r2, r3}
 800ff66:	b507      	push	{r0, r1, r2, lr}
 800ff68:	4906      	ldr	r1, [pc, #24]	@ (800ff84 <iprintf+0x20>)
 800ff6a:	ab04      	add	r3, sp, #16
 800ff6c:	6808      	ldr	r0, [r1, #0]
 800ff6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff72:	6881      	ldr	r1, [r0, #8]
 800ff74:	9301      	str	r3, [sp, #4]
 800ff76:	f001 feb3 	bl	8011ce0 <_vfiprintf_r>
 800ff7a:	b003      	add	sp, #12
 800ff7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff80:	b004      	add	sp, #16
 800ff82:	4770      	bx	lr
 800ff84:	2000001c 	.word	0x2000001c

0800ff88 <_puts_r>:
 800ff88:	6a03      	ldr	r3, [r0, #32]
 800ff8a:	b570      	push	{r4, r5, r6, lr}
 800ff8c:	6884      	ldr	r4, [r0, #8]
 800ff8e:	4605      	mov	r5, r0
 800ff90:	460e      	mov	r6, r1
 800ff92:	b90b      	cbnz	r3, 800ff98 <_puts_r+0x10>
 800ff94:	f7ff ffb0 	bl	800fef8 <__sinit>
 800ff98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ff9a:	07db      	lsls	r3, r3, #31
 800ff9c:	d405      	bmi.n	800ffaa <_puts_r+0x22>
 800ff9e:	89a3      	ldrh	r3, [r4, #12]
 800ffa0:	0598      	lsls	r0, r3, #22
 800ffa2:	d402      	bmi.n	800ffaa <_puts_r+0x22>
 800ffa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffa6:	f000 fa36 	bl	8010416 <__retarget_lock_acquire_recursive>
 800ffaa:	89a3      	ldrh	r3, [r4, #12]
 800ffac:	0719      	lsls	r1, r3, #28
 800ffae:	d502      	bpl.n	800ffb6 <_puts_r+0x2e>
 800ffb0:	6923      	ldr	r3, [r4, #16]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d135      	bne.n	8010022 <_puts_r+0x9a>
 800ffb6:	4621      	mov	r1, r4
 800ffb8:	4628      	mov	r0, r5
 800ffba:	f000 f8fb 	bl	80101b4 <__swsetup_r>
 800ffbe:	b380      	cbz	r0, 8010022 <_puts_r+0x9a>
 800ffc0:	f04f 35ff 	mov.w	r5, #4294967295
 800ffc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ffc6:	07da      	lsls	r2, r3, #31
 800ffc8:	d405      	bmi.n	800ffd6 <_puts_r+0x4e>
 800ffca:	89a3      	ldrh	r3, [r4, #12]
 800ffcc:	059b      	lsls	r3, r3, #22
 800ffce:	d402      	bmi.n	800ffd6 <_puts_r+0x4e>
 800ffd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffd2:	f000 fa21 	bl	8010418 <__retarget_lock_release_recursive>
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	bd70      	pop	{r4, r5, r6, pc}
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	da04      	bge.n	800ffe8 <_puts_r+0x60>
 800ffde:	69a2      	ldr	r2, [r4, #24]
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	dc17      	bgt.n	8010014 <_puts_r+0x8c>
 800ffe4:	290a      	cmp	r1, #10
 800ffe6:	d015      	beq.n	8010014 <_puts_r+0x8c>
 800ffe8:	6823      	ldr	r3, [r4, #0]
 800ffea:	1c5a      	adds	r2, r3, #1
 800ffec:	6022      	str	r2, [r4, #0]
 800ffee:	7019      	strb	r1, [r3, #0]
 800fff0:	68a3      	ldr	r3, [r4, #8]
 800fff2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fff6:	3b01      	subs	r3, #1
 800fff8:	60a3      	str	r3, [r4, #8]
 800fffa:	2900      	cmp	r1, #0
 800fffc:	d1ed      	bne.n	800ffda <_puts_r+0x52>
 800fffe:	2b00      	cmp	r3, #0
 8010000:	da11      	bge.n	8010026 <_puts_r+0x9e>
 8010002:	4622      	mov	r2, r4
 8010004:	210a      	movs	r1, #10
 8010006:	4628      	mov	r0, r5
 8010008:	f000 f895 	bl	8010136 <__swbuf_r>
 801000c:	3001      	adds	r0, #1
 801000e:	d0d7      	beq.n	800ffc0 <_puts_r+0x38>
 8010010:	250a      	movs	r5, #10
 8010012:	e7d7      	b.n	800ffc4 <_puts_r+0x3c>
 8010014:	4622      	mov	r2, r4
 8010016:	4628      	mov	r0, r5
 8010018:	f000 f88d 	bl	8010136 <__swbuf_r>
 801001c:	3001      	adds	r0, #1
 801001e:	d1e7      	bne.n	800fff0 <_puts_r+0x68>
 8010020:	e7ce      	b.n	800ffc0 <_puts_r+0x38>
 8010022:	3e01      	subs	r6, #1
 8010024:	e7e4      	b.n	800fff0 <_puts_r+0x68>
 8010026:	6823      	ldr	r3, [r4, #0]
 8010028:	1c5a      	adds	r2, r3, #1
 801002a:	6022      	str	r2, [r4, #0]
 801002c:	220a      	movs	r2, #10
 801002e:	701a      	strb	r2, [r3, #0]
 8010030:	e7ee      	b.n	8010010 <_puts_r+0x88>
	...

08010034 <puts>:
 8010034:	4b02      	ldr	r3, [pc, #8]	@ (8010040 <puts+0xc>)
 8010036:	4601      	mov	r1, r0
 8010038:	6818      	ldr	r0, [r3, #0]
 801003a:	f7ff bfa5 	b.w	800ff88 <_puts_r>
 801003e:	bf00      	nop
 8010040:	2000001c 	.word	0x2000001c

08010044 <sniprintf>:
 8010044:	b40c      	push	{r2, r3}
 8010046:	b530      	push	{r4, r5, lr}
 8010048:	4b18      	ldr	r3, [pc, #96]	@ (80100ac <sniprintf+0x68>)
 801004a:	1e0c      	subs	r4, r1, #0
 801004c:	681d      	ldr	r5, [r3, #0]
 801004e:	b09d      	sub	sp, #116	@ 0x74
 8010050:	da08      	bge.n	8010064 <sniprintf+0x20>
 8010052:	238b      	movs	r3, #139	@ 0x8b
 8010054:	602b      	str	r3, [r5, #0]
 8010056:	f04f 30ff 	mov.w	r0, #4294967295
 801005a:	b01d      	add	sp, #116	@ 0x74
 801005c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010060:	b002      	add	sp, #8
 8010062:	4770      	bx	lr
 8010064:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010068:	f8ad 3014 	strh.w	r3, [sp, #20]
 801006c:	f04f 0300 	mov.w	r3, #0
 8010070:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010072:	bf14      	ite	ne
 8010074:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010078:	4623      	moveq	r3, r4
 801007a:	9304      	str	r3, [sp, #16]
 801007c:	9307      	str	r3, [sp, #28]
 801007e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010082:	9002      	str	r0, [sp, #8]
 8010084:	9006      	str	r0, [sp, #24]
 8010086:	f8ad 3016 	strh.w	r3, [sp, #22]
 801008a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801008c:	ab21      	add	r3, sp, #132	@ 0x84
 801008e:	a902      	add	r1, sp, #8
 8010090:	4628      	mov	r0, r5
 8010092:	9301      	str	r3, [sp, #4]
 8010094:	f001 fcfe 	bl	8011a94 <_svfiprintf_r>
 8010098:	1c43      	adds	r3, r0, #1
 801009a:	bfbc      	itt	lt
 801009c:	238b      	movlt	r3, #139	@ 0x8b
 801009e:	602b      	strlt	r3, [r5, #0]
 80100a0:	2c00      	cmp	r4, #0
 80100a2:	d0da      	beq.n	801005a <sniprintf+0x16>
 80100a4:	9b02      	ldr	r3, [sp, #8]
 80100a6:	2200      	movs	r2, #0
 80100a8:	701a      	strb	r2, [r3, #0]
 80100aa:	e7d6      	b.n	801005a <sniprintf+0x16>
 80100ac:	2000001c 	.word	0x2000001c

080100b0 <__sread>:
 80100b0:	b510      	push	{r4, lr}
 80100b2:	460c      	mov	r4, r1
 80100b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100b8:	f000 f95e 	bl	8010378 <_read_r>
 80100bc:	2800      	cmp	r0, #0
 80100be:	bfab      	itete	ge
 80100c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80100c2:	89a3      	ldrhlt	r3, [r4, #12]
 80100c4:	181b      	addge	r3, r3, r0
 80100c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80100ca:	bfac      	ite	ge
 80100cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80100ce:	81a3      	strhlt	r3, [r4, #12]
 80100d0:	bd10      	pop	{r4, pc}

080100d2 <__swrite>:
 80100d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d6:	461f      	mov	r7, r3
 80100d8:	898b      	ldrh	r3, [r1, #12]
 80100da:	05db      	lsls	r3, r3, #23
 80100dc:	4605      	mov	r5, r0
 80100de:	460c      	mov	r4, r1
 80100e0:	4616      	mov	r6, r2
 80100e2:	d505      	bpl.n	80100f0 <__swrite+0x1e>
 80100e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100e8:	2302      	movs	r3, #2
 80100ea:	2200      	movs	r2, #0
 80100ec:	f000 f932 	bl	8010354 <_lseek_r>
 80100f0:	89a3      	ldrh	r3, [r4, #12]
 80100f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80100fa:	81a3      	strh	r3, [r4, #12]
 80100fc:	4632      	mov	r2, r6
 80100fe:	463b      	mov	r3, r7
 8010100:	4628      	mov	r0, r5
 8010102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010106:	f000 b949 	b.w	801039c <_write_r>

0801010a <__sseek>:
 801010a:	b510      	push	{r4, lr}
 801010c:	460c      	mov	r4, r1
 801010e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010112:	f000 f91f 	bl	8010354 <_lseek_r>
 8010116:	1c43      	adds	r3, r0, #1
 8010118:	89a3      	ldrh	r3, [r4, #12]
 801011a:	bf15      	itete	ne
 801011c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801011e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010122:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010126:	81a3      	strheq	r3, [r4, #12]
 8010128:	bf18      	it	ne
 801012a:	81a3      	strhne	r3, [r4, #12]
 801012c:	bd10      	pop	{r4, pc}

0801012e <__sclose>:
 801012e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010132:	f000 b8a1 	b.w	8010278 <_close_r>

08010136 <__swbuf_r>:
 8010136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010138:	460e      	mov	r6, r1
 801013a:	4614      	mov	r4, r2
 801013c:	4605      	mov	r5, r0
 801013e:	b118      	cbz	r0, 8010148 <__swbuf_r+0x12>
 8010140:	6a03      	ldr	r3, [r0, #32]
 8010142:	b90b      	cbnz	r3, 8010148 <__swbuf_r+0x12>
 8010144:	f7ff fed8 	bl	800fef8 <__sinit>
 8010148:	69a3      	ldr	r3, [r4, #24]
 801014a:	60a3      	str	r3, [r4, #8]
 801014c:	89a3      	ldrh	r3, [r4, #12]
 801014e:	071a      	lsls	r2, r3, #28
 8010150:	d501      	bpl.n	8010156 <__swbuf_r+0x20>
 8010152:	6923      	ldr	r3, [r4, #16]
 8010154:	b943      	cbnz	r3, 8010168 <__swbuf_r+0x32>
 8010156:	4621      	mov	r1, r4
 8010158:	4628      	mov	r0, r5
 801015a:	f000 f82b 	bl	80101b4 <__swsetup_r>
 801015e:	b118      	cbz	r0, 8010168 <__swbuf_r+0x32>
 8010160:	f04f 37ff 	mov.w	r7, #4294967295
 8010164:	4638      	mov	r0, r7
 8010166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010168:	6823      	ldr	r3, [r4, #0]
 801016a:	6922      	ldr	r2, [r4, #16]
 801016c:	1a98      	subs	r0, r3, r2
 801016e:	6963      	ldr	r3, [r4, #20]
 8010170:	b2f6      	uxtb	r6, r6
 8010172:	4283      	cmp	r3, r0
 8010174:	4637      	mov	r7, r6
 8010176:	dc05      	bgt.n	8010184 <__swbuf_r+0x4e>
 8010178:	4621      	mov	r1, r4
 801017a:	4628      	mov	r0, r5
 801017c:	f001 ff4c 	bl	8012018 <_fflush_r>
 8010180:	2800      	cmp	r0, #0
 8010182:	d1ed      	bne.n	8010160 <__swbuf_r+0x2a>
 8010184:	68a3      	ldr	r3, [r4, #8]
 8010186:	3b01      	subs	r3, #1
 8010188:	60a3      	str	r3, [r4, #8]
 801018a:	6823      	ldr	r3, [r4, #0]
 801018c:	1c5a      	adds	r2, r3, #1
 801018e:	6022      	str	r2, [r4, #0]
 8010190:	701e      	strb	r6, [r3, #0]
 8010192:	6962      	ldr	r2, [r4, #20]
 8010194:	1c43      	adds	r3, r0, #1
 8010196:	429a      	cmp	r2, r3
 8010198:	d004      	beq.n	80101a4 <__swbuf_r+0x6e>
 801019a:	89a3      	ldrh	r3, [r4, #12]
 801019c:	07db      	lsls	r3, r3, #31
 801019e:	d5e1      	bpl.n	8010164 <__swbuf_r+0x2e>
 80101a0:	2e0a      	cmp	r6, #10
 80101a2:	d1df      	bne.n	8010164 <__swbuf_r+0x2e>
 80101a4:	4621      	mov	r1, r4
 80101a6:	4628      	mov	r0, r5
 80101a8:	f001 ff36 	bl	8012018 <_fflush_r>
 80101ac:	2800      	cmp	r0, #0
 80101ae:	d0d9      	beq.n	8010164 <__swbuf_r+0x2e>
 80101b0:	e7d6      	b.n	8010160 <__swbuf_r+0x2a>
	...

080101b4 <__swsetup_r>:
 80101b4:	b538      	push	{r3, r4, r5, lr}
 80101b6:	4b29      	ldr	r3, [pc, #164]	@ (801025c <__swsetup_r+0xa8>)
 80101b8:	4605      	mov	r5, r0
 80101ba:	6818      	ldr	r0, [r3, #0]
 80101bc:	460c      	mov	r4, r1
 80101be:	b118      	cbz	r0, 80101c8 <__swsetup_r+0x14>
 80101c0:	6a03      	ldr	r3, [r0, #32]
 80101c2:	b90b      	cbnz	r3, 80101c8 <__swsetup_r+0x14>
 80101c4:	f7ff fe98 	bl	800fef8 <__sinit>
 80101c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101cc:	0719      	lsls	r1, r3, #28
 80101ce:	d422      	bmi.n	8010216 <__swsetup_r+0x62>
 80101d0:	06da      	lsls	r2, r3, #27
 80101d2:	d407      	bmi.n	80101e4 <__swsetup_r+0x30>
 80101d4:	2209      	movs	r2, #9
 80101d6:	602a      	str	r2, [r5, #0]
 80101d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101dc:	81a3      	strh	r3, [r4, #12]
 80101de:	f04f 30ff 	mov.w	r0, #4294967295
 80101e2:	e033      	b.n	801024c <__swsetup_r+0x98>
 80101e4:	0758      	lsls	r0, r3, #29
 80101e6:	d512      	bpl.n	801020e <__swsetup_r+0x5a>
 80101e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101ea:	b141      	cbz	r1, 80101fe <__swsetup_r+0x4a>
 80101ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101f0:	4299      	cmp	r1, r3
 80101f2:	d002      	beq.n	80101fa <__swsetup_r+0x46>
 80101f4:	4628      	mov	r0, r5
 80101f6:	f000 ff77 	bl	80110e8 <_free_r>
 80101fa:	2300      	movs	r3, #0
 80101fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80101fe:	89a3      	ldrh	r3, [r4, #12]
 8010200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010204:	81a3      	strh	r3, [r4, #12]
 8010206:	2300      	movs	r3, #0
 8010208:	6063      	str	r3, [r4, #4]
 801020a:	6923      	ldr	r3, [r4, #16]
 801020c:	6023      	str	r3, [r4, #0]
 801020e:	89a3      	ldrh	r3, [r4, #12]
 8010210:	f043 0308 	orr.w	r3, r3, #8
 8010214:	81a3      	strh	r3, [r4, #12]
 8010216:	6923      	ldr	r3, [r4, #16]
 8010218:	b94b      	cbnz	r3, 801022e <__swsetup_r+0x7a>
 801021a:	89a3      	ldrh	r3, [r4, #12]
 801021c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010224:	d003      	beq.n	801022e <__swsetup_r+0x7a>
 8010226:	4621      	mov	r1, r4
 8010228:	4628      	mov	r0, r5
 801022a:	f001 ff43 	bl	80120b4 <__smakebuf_r>
 801022e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010232:	f013 0201 	ands.w	r2, r3, #1
 8010236:	d00a      	beq.n	801024e <__swsetup_r+0x9a>
 8010238:	2200      	movs	r2, #0
 801023a:	60a2      	str	r2, [r4, #8]
 801023c:	6962      	ldr	r2, [r4, #20]
 801023e:	4252      	negs	r2, r2
 8010240:	61a2      	str	r2, [r4, #24]
 8010242:	6922      	ldr	r2, [r4, #16]
 8010244:	b942      	cbnz	r2, 8010258 <__swsetup_r+0xa4>
 8010246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801024a:	d1c5      	bne.n	80101d8 <__swsetup_r+0x24>
 801024c:	bd38      	pop	{r3, r4, r5, pc}
 801024e:	0799      	lsls	r1, r3, #30
 8010250:	bf58      	it	pl
 8010252:	6962      	ldrpl	r2, [r4, #20]
 8010254:	60a2      	str	r2, [r4, #8]
 8010256:	e7f4      	b.n	8010242 <__swsetup_r+0x8e>
 8010258:	2000      	movs	r0, #0
 801025a:	e7f7      	b.n	801024c <__swsetup_r+0x98>
 801025c:	2000001c 	.word	0x2000001c

08010260 <memset>:
 8010260:	4402      	add	r2, r0
 8010262:	4603      	mov	r3, r0
 8010264:	4293      	cmp	r3, r2
 8010266:	d100      	bne.n	801026a <memset+0xa>
 8010268:	4770      	bx	lr
 801026a:	f803 1b01 	strb.w	r1, [r3], #1
 801026e:	e7f9      	b.n	8010264 <memset+0x4>

08010270 <_localeconv_r>:
 8010270:	4800      	ldr	r0, [pc, #0]	@ (8010274 <_localeconv_r+0x4>)
 8010272:	4770      	bx	lr
 8010274:	2000015c 	.word	0x2000015c

08010278 <_close_r>:
 8010278:	b538      	push	{r3, r4, r5, lr}
 801027a:	4d06      	ldr	r5, [pc, #24]	@ (8010294 <_close_r+0x1c>)
 801027c:	2300      	movs	r3, #0
 801027e:	4604      	mov	r4, r0
 8010280:	4608      	mov	r0, r1
 8010282:	602b      	str	r3, [r5, #0]
 8010284:	f7f3 fda0 	bl	8003dc8 <_close>
 8010288:	1c43      	adds	r3, r0, #1
 801028a:	d102      	bne.n	8010292 <_close_r+0x1a>
 801028c:	682b      	ldr	r3, [r5, #0]
 801028e:	b103      	cbz	r3, 8010292 <_close_r+0x1a>
 8010290:	6023      	str	r3, [r4, #0]
 8010292:	bd38      	pop	{r3, r4, r5, pc}
 8010294:	20005068 	.word	0x20005068

08010298 <_reclaim_reent>:
 8010298:	4b2d      	ldr	r3, [pc, #180]	@ (8010350 <_reclaim_reent+0xb8>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	4283      	cmp	r3, r0
 801029e:	b570      	push	{r4, r5, r6, lr}
 80102a0:	4604      	mov	r4, r0
 80102a2:	d053      	beq.n	801034c <_reclaim_reent+0xb4>
 80102a4:	69c3      	ldr	r3, [r0, #28]
 80102a6:	b31b      	cbz	r3, 80102f0 <_reclaim_reent+0x58>
 80102a8:	68db      	ldr	r3, [r3, #12]
 80102aa:	b163      	cbz	r3, 80102c6 <_reclaim_reent+0x2e>
 80102ac:	2500      	movs	r5, #0
 80102ae:	69e3      	ldr	r3, [r4, #28]
 80102b0:	68db      	ldr	r3, [r3, #12]
 80102b2:	5959      	ldr	r1, [r3, r5]
 80102b4:	b9b1      	cbnz	r1, 80102e4 <_reclaim_reent+0x4c>
 80102b6:	3504      	adds	r5, #4
 80102b8:	2d80      	cmp	r5, #128	@ 0x80
 80102ba:	d1f8      	bne.n	80102ae <_reclaim_reent+0x16>
 80102bc:	69e3      	ldr	r3, [r4, #28]
 80102be:	4620      	mov	r0, r4
 80102c0:	68d9      	ldr	r1, [r3, #12]
 80102c2:	f000 ff11 	bl	80110e8 <_free_r>
 80102c6:	69e3      	ldr	r3, [r4, #28]
 80102c8:	6819      	ldr	r1, [r3, #0]
 80102ca:	b111      	cbz	r1, 80102d2 <_reclaim_reent+0x3a>
 80102cc:	4620      	mov	r0, r4
 80102ce:	f000 ff0b 	bl	80110e8 <_free_r>
 80102d2:	69e3      	ldr	r3, [r4, #28]
 80102d4:	689d      	ldr	r5, [r3, #8]
 80102d6:	b15d      	cbz	r5, 80102f0 <_reclaim_reent+0x58>
 80102d8:	4629      	mov	r1, r5
 80102da:	4620      	mov	r0, r4
 80102dc:	682d      	ldr	r5, [r5, #0]
 80102de:	f000 ff03 	bl	80110e8 <_free_r>
 80102e2:	e7f8      	b.n	80102d6 <_reclaim_reent+0x3e>
 80102e4:	680e      	ldr	r6, [r1, #0]
 80102e6:	4620      	mov	r0, r4
 80102e8:	f000 fefe 	bl	80110e8 <_free_r>
 80102ec:	4631      	mov	r1, r6
 80102ee:	e7e1      	b.n	80102b4 <_reclaim_reent+0x1c>
 80102f0:	6961      	ldr	r1, [r4, #20]
 80102f2:	b111      	cbz	r1, 80102fa <_reclaim_reent+0x62>
 80102f4:	4620      	mov	r0, r4
 80102f6:	f000 fef7 	bl	80110e8 <_free_r>
 80102fa:	69e1      	ldr	r1, [r4, #28]
 80102fc:	b111      	cbz	r1, 8010304 <_reclaim_reent+0x6c>
 80102fe:	4620      	mov	r0, r4
 8010300:	f000 fef2 	bl	80110e8 <_free_r>
 8010304:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010306:	b111      	cbz	r1, 801030e <_reclaim_reent+0x76>
 8010308:	4620      	mov	r0, r4
 801030a:	f000 feed 	bl	80110e8 <_free_r>
 801030e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010310:	b111      	cbz	r1, 8010318 <_reclaim_reent+0x80>
 8010312:	4620      	mov	r0, r4
 8010314:	f000 fee8 	bl	80110e8 <_free_r>
 8010318:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801031a:	b111      	cbz	r1, 8010322 <_reclaim_reent+0x8a>
 801031c:	4620      	mov	r0, r4
 801031e:	f000 fee3 	bl	80110e8 <_free_r>
 8010322:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010324:	b111      	cbz	r1, 801032c <_reclaim_reent+0x94>
 8010326:	4620      	mov	r0, r4
 8010328:	f000 fede 	bl	80110e8 <_free_r>
 801032c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801032e:	b111      	cbz	r1, 8010336 <_reclaim_reent+0x9e>
 8010330:	4620      	mov	r0, r4
 8010332:	f000 fed9 	bl	80110e8 <_free_r>
 8010336:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010338:	b111      	cbz	r1, 8010340 <_reclaim_reent+0xa8>
 801033a:	4620      	mov	r0, r4
 801033c:	f000 fed4 	bl	80110e8 <_free_r>
 8010340:	6a23      	ldr	r3, [r4, #32]
 8010342:	b11b      	cbz	r3, 801034c <_reclaim_reent+0xb4>
 8010344:	4620      	mov	r0, r4
 8010346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801034a:	4718      	bx	r3
 801034c:	bd70      	pop	{r4, r5, r6, pc}
 801034e:	bf00      	nop
 8010350:	2000001c 	.word	0x2000001c

08010354 <_lseek_r>:
 8010354:	b538      	push	{r3, r4, r5, lr}
 8010356:	4d07      	ldr	r5, [pc, #28]	@ (8010374 <_lseek_r+0x20>)
 8010358:	4604      	mov	r4, r0
 801035a:	4608      	mov	r0, r1
 801035c:	4611      	mov	r1, r2
 801035e:	2200      	movs	r2, #0
 8010360:	602a      	str	r2, [r5, #0]
 8010362:	461a      	mov	r2, r3
 8010364:	f7f3 fd57 	bl	8003e16 <_lseek>
 8010368:	1c43      	adds	r3, r0, #1
 801036a:	d102      	bne.n	8010372 <_lseek_r+0x1e>
 801036c:	682b      	ldr	r3, [r5, #0]
 801036e:	b103      	cbz	r3, 8010372 <_lseek_r+0x1e>
 8010370:	6023      	str	r3, [r4, #0]
 8010372:	bd38      	pop	{r3, r4, r5, pc}
 8010374:	20005068 	.word	0x20005068

08010378 <_read_r>:
 8010378:	b538      	push	{r3, r4, r5, lr}
 801037a:	4d07      	ldr	r5, [pc, #28]	@ (8010398 <_read_r+0x20>)
 801037c:	4604      	mov	r4, r0
 801037e:	4608      	mov	r0, r1
 8010380:	4611      	mov	r1, r2
 8010382:	2200      	movs	r2, #0
 8010384:	602a      	str	r2, [r5, #0]
 8010386:	461a      	mov	r2, r3
 8010388:	f7f3 fce5 	bl	8003d56 <_read>
 801038c:	1c43      	adds	r3, r0, #1
 801038e:	d102      	bne.n	8010396 <_read_r+0x1e>
 8010390:	682b      	ldr	r3, [r5, #0]
 8010392:	b103      	cbz	r3, 8010396 <_read_r+0x1e>
 8010394:	6023      	str	r3, [r4, #0]
 8010396:	bd38      	pop	{r3, r4, r5, pc}
 8010398:	20005068 	.word	0x20005068

0801039c <_write_r>:
 801039c:	b538      	push	{r3, r4, r5, lr}
 801039e:	4d07      	ldr	r5, [pc, #28]	@ (80103bc <_write_r+0x20>)
 80103a0:	4604      	mov	r4, r0
 80103a2:	4608      	mov	r0, r1
 80103a4:	4611      	mov	r1, r2
 80103a6:	2200      	movs	r2, #0
 80103a8:	602a      	str	r2, [r5, #0]
 80103aa:	461a      	mov	r2, r3
 80103ac:	f7f3 fcf0 	bl	8003d90 <_write>
 80103b0:	1c43      	adds	r3, r0, #1
 80103b2:	d102      	bne.n	80103ba <_write_r+0x1e>
 80103b4:	682b      	ldr	r3, [r5, #0]
 80103b6:	b103      	cbz	r3, 80103ba <_write_r+0x1e>
 80103b8:	6023      	str	r3, [r4, #0]
 80103ba:	bd38      	pop	{r3, r4, r5, pc}
 80103bc:	20005068 	.word	0x20005068

080103c0 <__errno>:
 80103c0:	4b01      	ldr	r3, [pc, #4]	@ (80103c8 <__errno+0x8>)
 80103c2:	6818      	ldr	r0, [r3, #0]
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop
 80103c8:	2000001c 	.word	0x2000001c

080103cc <__libc_init_array>:
 80103cc:	b570      	push	{r4, r5, r6, lr}
 80103ce:	4d0d      	ldr	r5, [pc, #52]	@ (8010404 <__libc_init_array+0x38>)
 80103d0:	4c0d      	ldr	r4, [pc, #52]	@ (8010408 <__libc_init_array+0x3c>)
 80103d2:	1b64      	subs	r4, r4, r5
 80103d4:	10a4      	asrs	r4, r4, #2
 80103d6:	2600      	movs	r6, #0
 80103d8:	42a6      	cmp	r6, r4
 80103da:	d109      	bne.n	80103f0 <__libc_init_array+0x24>
 80103dc:	4d0b      	ldr	r5, [pc, #44]	@ (801040c <__libc_init_array+0x40>)
 80103de:	4c0c      	ldr	r4, [pc, #48]	@ (8010410 <__libc_init_array+0x44>)
 80103e0:	f001 ffd6 	bl	8012390 <_init>
 80103e4:	1b64      	subs	r4, r4, r5
 80103e6:	10a4      	asrs	r4, r4, #2
 80103e8:	2600      	movs	r6, #0
 80103ea:	42a6      	cmp	r6, r4
 80103ec:	d105      	bne.n	80103fa <__libc_init_array+0x2e>
 80103ee:	bd70      	pop	{r4, r5, r6, pc}
 80103f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80103f4:	4798      	blx	r3
 80103f6:	3601      	adds	r6, #1
 80103f8:	e7ee      	b.n	80103d8 <__libc_init_array+0xc>
 80103fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80103fe:	4798      	blx	r3
 8010400:	3601      	adds	r6, #1
 8010402:	e7f2      	b.n	80103ea <__libc_init_array+0x1e>
 8010404:	08012bc4 	.word	0x08012bc4
 8010408:	08012bc4 	.word	0x08012bc4
 801040c:	08012bc4 	.word	0x08012bc4
 8010410:	08012bc8 	.word	0x08012bc8

08010414 <__retarget_lock_init_recursive>:
 8010414:	4770      	bx	lr

08010416 <__retarget_lock_acquire_recursive>:
 8010416:	4770      	bx	lr

08010418 <__retarget_lock_release_recursive>:
 8010418:	4770      	bx	lr

0801041a <memcpy>:
 801041a:	440a      	add	r2, r1
 801041c:	4291      	cmp	r1, r2
 801041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010422:	d100      	bne.n	8010426 <memcpy+0xc>
 8010424:	4770      	bx	lr
 8010426:	b510      	push	{r4, lr}
 8010428:	f811 4b01 	ldrb.w	r4, [r1], #1
 801042c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010430:	4291      	cmp	r1, r2
 8010432:	d1f9      	bne.n	8010428 <memcpy+0xe>
 8010434:	bd10      	pop	{r4, pc}

08010436 <quorem>:
 8010436:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801043a:	6903      	ldr	r3, [r0, #16]
 801043c:	690c      	ldr	r4, [r1, #16]
 801043e:	42a3      	cmp	r3, r4
 8010440:	4607      	mov	r7, r0
 8010442:	db7e      	blt.n	8010542 <quorem+0x10c>
 8010444:	3c01      	subs	r4, #1
 8010446:	f101 0814 	add.w	r8, r1, #20
 801044a:	00a3      	lsls	r3, r4, #2
 801044c:	f100 0514 	add.w	r5, r0, #20
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010456:	9301      	str	r3, [sp, #4]
 8010458:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801045c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010460:	3301      	adds	r3, #1
 8010462:	429a      	cmp	r2, r3
 8010464:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010468:	fbb2 f6f3 	udiv	r6, r2, r3
 801046c:	d32e      	bcc.n	80104cc <quorem+0x96>
 801046e:	f04f 0a00 	mov.w	sl, #0
 8010472:	46c4      	mov	ip, r8
 8010474:	46ae      	mov	lr, r5
 8010476:	46d3      	mov	fp, sl
 8010478:	f85c 3b04 	ldr.w	r3, [ip], #4
 801047c:	b298      	uxth	r0, r3
 801047e:	fb06 a000 	mla	r0, r6, r0, sl
 8010482:	0c02      	lsrs	r2, r0, #16
 8010484:	0c1b      	lsrs	r3, r3, #16
 8010486:	fb06 2303 	mla	r3, r6, r3, r2
 801048a:	f8de 2000 	ldr.w	r2, [lr]
 801048e:	b280      	uxth	r0, r0
 8010490:	b292      	uxth	r2, r2
 8010492:	1a12      	subs	r2, r2, r0
 8010494:	445a      	add	r2, fp
 8010496:	f8de 0000 	ldr.w	r0, [lr]
 801049a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801049e:	b29b      	uxth	r3, r3
 80104a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80104a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80104a8:	b292      	uxth	r2, r2
 80104aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80104ae:	45e1      	cmp	r9, ip
 80104b0:	f84e 2b04 	str.w	r2, [lr], #4
 80104b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80104b8:	d2de      	bcs.n	8010478 <quorem+0x42>
 80104ba:	9b00      	ldr	r3, [sp, #0]
 80104bc:	58eb      	ldr	r3, [r5, r3]
 80104be:	b92b      	cbnz	r3, 80104cc <quorem+0x96>
 80104c0:	9b01      	ldr	r3, [sp, #4]
 80104c2:	3b04      	subs	r3, #4
 80104c4:	429d      	cmp	r5, r3
 80104c6:	461a      	mov	r2, r3
 80104c8:	d32f      	bcc.n	801052a <quorem+0xf4>
 80104ca:	613c      	str	r4, [r7, #16]
 80104cc:	4638      	mov	r0, r7
 80104ce:	f001 f97d 	bl	80117cc <__mcmp>
 80104d2:	2800      	cmp	r0, #0
 80104d4:	db25      	blt.n	8010522 <quorem+0xec>
 80104d6:	4629      	mov	r1, r5
 80104d8:	2000      	movs	r0, #0
 80104da:	f858 2b04 	ldr.w	r2, [r8], #4
 80104de:	f8d1 c000 	ldr.w	ip, [r1]
 80104e2:	fa1f fe82 	uxth.w	lr, r2
 80104e6:	fa1f f38c 	uxth.w	r3, ip
 80104ea:	eba3 030e 	sub.w	r3, r3, lr
 80104ee:	4403      	add	r3, r0
 80104f0:	0c12      	lsrs	r2, r2, #16
 80104f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80104f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010500:	45c1      	cmp	r9, r8
 8010502:	f841 3b04 	str.w	r3, [r1], #4
 8010506:	ea4f 4022 	mov.w	r0, r2, asr #16
 801050a:	d2e6      	bcs.n	80104da <quorem+0xa4>
 801050c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010510:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010514:	b922      	cbnz	r2, 8010520 <quorem+0xea>
 8010516:	3b04      	subs	r3, #4
 8010518:	429d      	cmp	r5, r3
 801051a:	461a      	mov	r2, r3
 801051c:	d30b      	bcc.n	8010536 <quorem+0x100>
 801051e:	613c      	str	r4, [r7, #16]
 8010520:	3601      	adds	r6, #1
 8010522:	4630      	mov	r0, r6
 8010524:	b003      	add	sp, #12
 8010526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801052a:	6812      	ldr	r2, [r2, #0]
 801052c:	3b04      	subs	r3, #4
 801052e:	2a00      	cmp	r2, #0
 8010530:	d1cb      	bne.n	80104ca <quorem+0x94>
 8010532:	3c01      	subs	r4, #1
 8010534:	e7c6      	b.n	80104c4 <quorem+0x8e>
 8010536:	6812      	ldr	r2, [r2, #0]
 8010538:	3b04      	subs	r3, #4
 801053a:	2a00      	cmp	r2, #0
 801053c:	d1ef      	bne.n	801051e <quorem+0xe8>
 801053e:	3c01      	subs	r4, #1
 8010540:	e7ea      	b.n	8010518 <quorem+0xe2>
 8010542:	2000      	movs	r0, #0
 8010544:	e7ee      	b.n	8010524 <quorem+0xee>
	...

08010548 <_dtoa_r>:
 8010548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801054c:	69c7      	ldr	r7, [r0, #28]
 801054e:	b097      	sub	sp, #92	@ 0x5c
 8010550:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010554:	ec55 4b10 	vmov	r4, r5, d0
 8010558:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801055a:	9107      	str	r1, [sp, #28]
 801055c:	4681      	mov	r9, r0
 801055e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010560:	9311      	str	r3, [sp, #68]	@ 0x44
 8010562:	b97f      	cbnz	r7, 8010584 <_dtoa_r+0x3c>
 8010564:	2010      	movs	r0, #16
 8010566:	f000 fe09 	bl	801117c <malloc>
 801056a:	4602      	mov	r2, r0
 801056c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010570:	b920      	cbnz	r0, 801057c <_dtoa_r+0x34>
 8010572:	4ba9      	ldr	r3, [pc, #676]	@ (8010818 <_dtoa_r+0x2d0>)
 8010574:	21ef      	movs	r1, #239	@ 0xef
 8010576:	48a9      	ldr	r0, [pc, #676]	@ (801081c <_dtoa_r+0x2d4>)
 8010578:	f001 fe24 	bl	80121c4 <__assert_func>
 801057c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010580:	6007      	str	r7, [r0, #0]
 8010582:	60c7      	str	r7, [r0, #12]
 8010584:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010588:	6819      	ldr	r1, [r3, #0]
 801058a:	b159      	cbz	r1, 80105a4 <_dtoa_r+0x5c>
 801058c:	685a      	ldr	r2, [r3, #4]
 801058e:	604a      	str	r2, [r1, #4]
 8010590:	2301      	movs	r3, #1
 8010592:	4093      	lsls	r3, r2
 8010594:	608b      	str	r3, [r1, #8]
 8010596:	4648      	mov	r0, r9
 8010598:	f000 fee6 	bl	8011368 <_Bfree>
 801059c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80105a0:	2200      	movs	r2, #0
 80105a2:	601a      	str	r2, [r3, #0]
 80105a4:	1e2b      	subs	r3, r5, #0
 80105a6:	bfb9      	ittee	lt
 80105a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80105ac:	9305      	strlt	r3, [sp, #20]
 80105ae:	2300      	movge	r3, #0
 80105b0:	6033      	strge	r3, [r6, #0]
 80105b2:	9f05      	ldr	r7, [sp, #20]
 80105b4:	4b9a      	ldr	r3, [pc, #616]	@ (8010820 <_dtoa_r+0x2d8>)
 80105b6:	bfbc      	itt	lt
 80105b8:	2201      	movlt	r2, #1
 80105ba:	6032      	strlt	r2, [r6, #0]
 80105bc:	43bb      	bics	r3, r7
 80105be:	d112      	bne.n	80105e6 <_dtoa_r+0x9e>
 80105c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80105c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80105c6:	6013      	str	r3, [r2, #0]
 80105c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80105cc:	4323      	orrs	r3, r4
 80105ce:	f000 855a 	beq.w	8011086 <_dtoa_r+0xb3e>
 80105d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80105d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010834 <_dtoa_r+0x2ec>
 80105d8:	2b00      	cmp	r3, #0
 80105da:	f000 855c 	beq.w	8011096 <_dtoa_r+0xb4e>
 80105de:	f10a 0303 	add.w	r3, sl, #3
 80105e2:	f000 bd56 	b.w	8011092 <_dtoa_r+0xb4a>
 80105e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80105ea:	2200      	movs	r2, #0
 80105ec:	ec51 0b17 	vmov	r0, r1, d7
 80105f0:	2300      	movs	r3, #0
 80105f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80105f6:	f7f0 fa87 	bl	8000b08 <__aeabi_dcmpeq>
 80105fa:	4680      	mov	r8, r0
 80105fc:	b158      	cbz	r0, 8010616 <_dtoa_r+0xce>
 80105fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010600:	2301      	movs	r3, #1
 8010602:	6013      	str	r3, [r2, #0]
 8010604:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010606:	b113      	cbz	r3, 801060e <_dtoa_r+0xc6>
 8010608:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801060a:	4b86      	ldr	r3, [pc, #536]	@ (8010824 <_dtoa_r+0x2dc>)
 801060c:	6013      	str	r3, [r2, #0]
 801060e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010838 <_dtoa_r+0x2f0>
 8010612:	f000 bd40 	b.w	8011096 <_dtoa_r+0xb4e>
 8010616:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801061a:	aa14      	add	r2, sp, #80	@ 0x50
 801061c:	a915      	add	r1, sp, #84	@ 0x54
 801061e:	4648      	mov	r0, r9
 8010620:	f001 f984 	bl	801192c <__d2b>
 8010624:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010628:	9002      	str	r0, [sp, #8]
 801062a:	2e00      	cmp	r6, #0
 801062c:	d078      	beq.n	8010720 <_dtoa_r+0x1d8>
 801062e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010630:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010638:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801063c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010640:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010644:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010648:	4619      	mov	r1, r3
 801064a:	2200      	movs	r2, #0
 801064c:	4b76      	ldr	r3, [pc, #472]	@ (8010828 <_dtoa_r+0x2e0>)
 801064e:	f7ef fe3b 	bl	80002c8 <__aeabi_dsub>
 8010652:	a36b      	add	r3, pc, #428	@ (adr r3, 8010800 <_dtoa_r+0x2b8>)
 8010654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010658:	f7ef ffee 	bl	8000638 <__aeabi_dmul>
 801065c:	a36a      	add	r3, pc, #424	@ (adr r3, 8010808 <_dtoa_r+0x2c0>)
 801065e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010662:	f7ef fe33 	bl	80002cc <__adddf3>
 8010666:	4604      	mov	r4, r0
 8010668:	4630      	mov	r0, r6
 801066a:	460d      	mov	r5, r1
 801066c:	f7ef ff7a 	bl	8000564 <__aeabi_i2d>
 8010670:	a367      	add	r3, pc, #412	@ (adr r3, 8010810 <_dtoa_r+0x2c8>)
 8010672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010676:	f7ef ffdf 	bl	8000638 <__aeabi_dmul>
 801067a:	4602      	mov	r2, r0
 801067c:	460b      	mov	r3, r1
 801067e:	4620      	mov	r0, r4
 8010680:	4629      	mov	r1, r5
 8010682:	f7ef fe23 	bl	80002cc <__adddf3>
 8010686:	4604      	mov	r4, r0
 8010688:	460d      	mov	r5, r1
 801068a:	f7f0 fa85 	bl	8000b98 <__aeabi_d2iz>
 801068e:	2200      	movs	r2, #0
 8010690:	4607      	mov	r7, r0
 8010692:	2300      	movs	r3, #0
 8010694:	4620      	mov	r0, r4
 8010696:	4629      	mov	r1, r5
 8010698:	f7f0 fa40 	bl	8000b1c <__aeabi_dcmplt>
 801069c:	b140      	cbz	r0, 80106b0 <_dtoa_r+0x168>
 801069e:	4638      	mov	r0, r7
 80106a0:	f7ef ff60 	bl	8000564 <__aeabi_i2d>
 80106a4:	4622      	mov	r2, r4
 80106a6:	462b      	mov	r3, r5
 80106a8:	f7f0 fa2e 	bl	8000b08 <__aeabi_dcmpeq>
 80106ac:	b900      	cbnz	r0, 80106b0 <_dtoa_r+0x168>
 80106ae:	3f01      	subs	r7, #1
 80106b0:	2f16      	cmp	r7, #22
 80106b2:	d852      	bhi.n	801075a <_dtoa_r+0x212>
 80106b4:	4b5d      	ldr	r3, [pc, #372]	@ (801082c <_dtoa_r+0x2e4>)
 80106b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80106ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80106c2:	f7f0 fa2b 	bl	8000b1c <__aeabi_dcmplt>
 80106c6:	2800      	cmp	r0, #0
 80106c8:	d049      	beq.n	801075e <_dtoa_r+0x216>
 80106ca:	3f01      	subs	r7, #1
 80106cc:	2300      	movs	r3, #0
 80106ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80106d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80106d2:	1b9b      	subs	r3, r3, r6
 80106d4:	1e5a      	subs	r2, r3, #1
 80106d6:	bf45      	ittet	mi
 80106d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80106dc:	9300      	strmi	r3, [sp, #0]
 80106de:	2300      	movpl	r3, #0
 80106e0:	2300      	movmi	r3, #0
 80106e2:	9206      	str	r2, [sp, #24]
 80106e4:	bf54      	ite	pl
 80106e6:	9300      	strpl	r3, [sp, #0]
 80106e8:	9306      	strmi	r3, [sp, #24]
 80106ea:	2f00      	cmp	r7, #0
 80106ec:	db39      	blt.n	8010762 <_dtoa_r+0x21a>
 80106ee:	9b06      	ldr	r3, [sp, #24]
 80106f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80106f2:	443b      	add	r3, r7
 80106f4:	9306      	str	r3, [sp, #24]
 80106f6:	2300      	movs	r3, #0
 80106f8:	9308      	str	r3, [sp, #32]
 80106fa:	9b07      	ldr	r3, [sp, #28]
 80106fc:	2b09      	cmp	r3, #9
 80106fe:	d863      	bhi.n	80107c8 <_dtoa_r+0x280>
 8010700:	2b05      	cmp	r3, #5
 8010702:	bfc4      	itt	gt
 8010704:	3b04      	subgt	r3, #4
 8010706:	9307      	strgt	r3, [sp, #28]
 8010708:	9b07      	ldr	r3, [sp, #28]
 801070a:	f1a3 0302 	sub.w	r3, r3, #2
 801070e:	bfcc      	ite	gt
 8010710:	2400      	movgt	r4, #0
 8010712:	2401      	movle	r4, #1
 8010714:	2b03      	cmp	r3, #3
 8010716:	d863      	bhi.n	80107e0 <_dtoa_r+0x298>
 8010718:	e8df f003 	tbb	[pc, r3]
 801071c:	2b375452 	.word	0x2b375452
 8010720:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010724:	441e      	add	r6, r3
 8010726:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801072a:	2b20      	cmp	r3, #32
 801072c:	bfc1      	itttt	gt
 801072e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010732:	409f      	lslgt	r7, r3
 8010734:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010738:	fa24 f303 	lsrgt.w	r3, r4, r3
 801073c:	bfd6      	itet	le
 801073e:	f1c3 0320 	rsble	r3, r3, #32
 8010742:	ea47 0003 	orrgt.w	r0, r7, r3
 8010746:	fa04 f003 	lslle.w	r0, r4, r3
 801074a:	f7ef fefb 	bl	8000544 <__aeabi_ui2d>
 801074e:	2201      	movs	r2, #1
 8010750:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010754:	3e01      	subs	r6, #1
 8010756:	9212      	str	r2, [sp, #72]	@ 0x48
 8010758:	e776      	b.n	8010648 <_dtoa_r+0x100>
 801075a:	2301      	movs	r3, #1
 801075c:	e7b7      	b.n	80106ce <_dtoa_r+0x186>
 801075e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010760:	e7b6      	b.n	80106d0 <_dtoa_r+0x188>
 8010762:	9b00      	ldr	r3, [sp, #0]
 8010764:	1bdb      	subs	r3, r3, r7
 8010766:	9300      	str	r3, [sp, #0]
 8010768:	427b      	negs	r3, r7
 801076a:	9308      	str	r3, [sp, #32]
 801076c:	2300      	movs	r3, #0
 801076e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010770:	e7c3      	b.n	80106fa <_dtoa_r+0x1b2>
 8010772:	2301      	movs	r3, #1
 8010774:	9309      	str	r3, [sp, #36]	@ 0x24
 8010776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010778:	eb07 0b03 	add.w	fp, r7, r3
 801077c:	f10b 0301 	add.w	r3, fp, #1
 8010780:	2b01      	cmp	r3, #1
 8010782:	9303      	str	r3, [sp, #12]
 8010784:	bfb8      	it	lt
 8010786:	2301      	movlt	r3, #1
 8010788:	e006      	b.n	8010798 <_dtoa_r+0x250>
 801078a:	2301      	movs	r3, #1
 801078c:	9309      	str	r3, [sp, #36]	@ 0x24
 801078e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010790:	2b00      	cmp	r3, #0
 8010792:	dd28      	ble.n	80107e6 <_dtoa_r+0x29e>
 8010794:	469b      	mov	fp, r3
 8010796:	9303      	str	r3, [sp, #12]
 8010798:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801079c:	2100      	movs	r1, #0
 801079e:	2204      	movs	r2, #4
 80107a0:	f102 0514 	add.w	r5, r2, #20
 80107a4:	429d      	cmp	r5, r3
 80107a6:	d926      	bls.n	80107f6 <_dtoa_r+0x2ae>
 80107a8:	6041      	str	r1, [r0, #4]
 80107aa:	4648      	mov	r0, r9
 80107ac:	f000 fd9c 	bl	80112e8 <_Balloc>
 80107b0:	4682      	mov	sl, r0
 80107b2:	2800      	cmp	r0, #0
 80107b4:	d142      	bne.n	801083c <_dtoa_r+0x2f4>
 80107b6:	4b1e      	ldr	r3, [pc, #120]	@ (8010830 <_dtoa_r+0x2e8>)
 80107b8:	4602      	mov	r2, r0
 80107ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80107be:	e6da      	b.n	8010576 <_dtoa_r+0x2e>
 80107c0:	2300      	movs	r3, #0
 80107c2:	e7e3      	b.n	801078c <_dtoa_r+0x244>
 80107c4:	2300      	movs	r3, #0
 80107c6:	e7d5      	b.n	8010774 <_dtoa_r+0x22c>
 80107c8:	2401      	movs	r4, #1
 80107ca:	2300      	movs	r3, #0
 80107cc:	9307      	str	r3, [sp, #28]
 80107ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80107d0:	f04f 3bff 	mov.w	fp, #4294967295
 80107d4:	2200      	movs	r2, #0
 80107d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80107da:	2312      	movs	r3, #18
 80107dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80107de:	e7db      	b.n	8010798 <_dtoa_r+0x250>
 80107e0:	2301      	movs	r3, #1
 80107e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80107e4:	e7f4      	b.n	80107d0 <_dtoa_r+0x288>
 80107e6:	f04f 0b01 	mov.w	fp, #1
 80107ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80107ee:	465b      	mov	r3, fp
 80107f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80107f4:	e7d0      	b.n	8010798 <_dtoa_r+0x250>
 80107f6:	3101      	adds	r1, #1
 80107f8:	0052      	lsls	r2, r2, #1
 80107fa:	e7d1      	b.n	80107a0 <_dtoa_r+0x258>
 80107fc:	f3af 8000 	nop.w
 8010800:	636f4361 	.word	0x636f4361
 8010804:	3fd287a7 	.word	0x3fd287a7
 8010808:	8b60c8b3 	.word	0x8b60c8b3
 801080c:	3fc68a28 	.word	0x3fc68a28
 8010810:	509f79fb 	.word	0x509f79fb
 8010814:	3fd34413 	.word	0x3fd34413
 8010818:	08012885 	.word	0x08012885
 801081c:	0801289c 	.word	0x0801289c
 8010820:	7ff00000 	.word	0x7ff00000
 8010824:	08012855 	.word	0x08012855
 8010828:	3ff80000 	.word	0x3ff80000
 801082c:	080129f0 	.word	0x080129f0
 8010830:	080128f4 	.word	0x080128f4
 8010834:	08012881 	.word	0x08012881
 8010838:	08012854 	.word	0x08012854
 801083c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010840:	6018      	str	r0, [r3, #0]
 8010842:	9b03      	ldr	r3, [sp, #12]
 8010844:	2b0e      	cmp	r3, #14
 8010846:	f200 80a1 	bhi.w	801098c <_dtoa_r+0x444>
 801084a:	2c00      	cmp	r4, #0
 801084c:	f000 809e 	beq.w	801098c <_dtoa_r+0x444>
 8010850:	2f00      	cmp	r7, #0
 8010852:	dd33      	ble.n	80108bc <_dtoa_r+0x374>
 8010854:	4b9c      	ldr	r3, [pc, #624]	@ (8010ac8 <_dtoa_r+0x580>)
 8010856:	f007 020f 	and.w	r2, r7, #15
 801085a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801085e:	ed93 7b00 	vldr	d7, [r3]
 8010862:	05f8      	lsls	r0, r7, #23
 8010864:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010868:	ea4f 1427 	mov.w	r4, r7, asr #4
 801086c:	d516      	bpl.n	801089c <_dtoa_r+0x354>
 801086e:	4b97      	ldr	r3, [pc, #604]	@ (8010acc <_dtoa_r+0x584>)
 8010870:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010874:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010878:	f7f0 f808 	bl	800088c <__aeabi_ddiv>
 801087c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010880:	f004 040f 	and.w	r4, r4, #15
 8010884:	2603      	movs	r6, #3
 8010886:	4d91      	ldr	r5, [pc, #580]	@ (8010acc <_dtoa_r+0x584>)
 8010888:	b954      	cbnz	r4, 80108a0 <_dtoa_r+0x358>
 801088a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801088e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010892:	f7ef fffb 	bl	800088c <__aeabi_ddiv>
 8010896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801089a:	e028      	b.n	80108ee <_dtoa_r+0x3a6>
 801089c:	2602      	movs	r6, #2
 801089e:	e7f2      	b.n	8010886 <_dtoa_r+0x33e>
 80108a0:	07e1      	lsls	r1, r4, #31
 80108a2:	d508      	bpl.n	80108b6 <_dtoa_r+0x36e>
 80108a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80108a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80108ac:	f7ef fec4 	bl	8000638 <__aeabi_dmul>
 80108b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80108b4:	3601      	adds	r6, #1
 80108b6:	1064      	asrs	r4, r4, #1
 80108b8:	3508      	adds	r5, #8
 80108ba:	e7e5      	b.n	8010888 <_dtoa_r+0x340>
 80108bc:	f000 80af 	beq.w	8010a1e <_dtoa_r+0x4d6>
 80108c0:	427c      	negs	r4, r7
 80108c2:	4b81      	ldr	r3, [pc, #516]	@ (8010ac8 <_dtoa_r+0x580>)
 80108c4:	4d81      	ldr	r5, [pc, #516]	@ (8010acc <_dtoa_r+0x584>)
 80108c6:	f004 020f 	and.w	r2, r4, #15
 80108ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80108d6:	f7ef feaf 	bl	8000638 <__aeabi_dmul>
 80108da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80108de:	1124      	asrs	r4, r4, #4
 80108e0:	2300      	movs	r3, #0
 80108e2:	2602      	movs	r6, #2
 80108e4:	2c00      	cmp	r4, #0
 80108e6:	f040 808f 	bne.w	8010a08 <_dtoa_r+0x4c0>
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d1d3      	bne.n	8010896 <_dtoa_r+0x34e>
 80108ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80108f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	f000 8094 	beq.w	8010a22 <_dtoa_r+0x4da>
 80108fa:	4b75      	ldr	r3, [pc, #468]	@ (8010ad0 <_dtoa_r+0x588>)
 80108fc:	2200      	movs	r2, #0
 80108fe:	4620      	mov	r0, r4
 8010900:	4629      	mov	r1, r5
 8010902:	f7f0 f90b 	bl	8000b1c <__aeabi_dcmplt>
 8010906:	2800      	cmp	r0, #0
 8010908:	f000 808b 	beq.w	8010a22 <_dtoa_r+0x4da>
 801090c:	9b03      	ldr	r3, [sp, #12]
 801090e:	2b00      	cmp	r3, #0
 8010910:	f000 8087 	beq.w	8010a22 <_dtoa_r+0x4da>
 8010914:	f1bb 0f00 	cmp.w	fp, #0
 8010918:	dd34      	ble.n	8010984 <_dtoa_r+0x43c>
 801091a:	4620      	mov	r0, r4
 801091c:	4b6d      	ldr	r3, [pc, #436]	@ (8010ad4 <_dtoa_r+0x58c>)
 801091e:	2200      	movs	r2, #0
 8010920:	4629      	mov	r1, r5
 8010922:	f7ef fe89 	bl	8000638 <__aeabi_dmul>
 8010926:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801092a:	f107 38ff 	add.w	r8, r7, #4294967295
 801092e:	3601      	adds	r6, #1
 8010930:	465c      	mov	r4, fp
 8010932:	4630      	mov	r0, r6
 8010934:	f7ef fe16 	bl	8000564 <__aeabi_i2d>
 8010938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801093c:	f7ef fe7c 	bl	8000638 <__aeabi_dmul>
 8010940:	4b65      	ldr	r3, [pc, #404]	@ (8010ad8 <_dtoa_r+0x590>)
 8010942:	2200      	movs	r2, #0
 8010944:	f7ef fcc2 	bl	80002cc <__adddf3>
 8010948:	4605      	mov	r5, r0
 801094a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801094e:	2c00      	cmp	r4, #0
 8010950:	d16a      	bne.n	8010a28 <_dtoa_r+0x4e0>
 8010952:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010956:	4b61      	ldr	r3, [pc, #388]	@ (8010adc <_dtoa_r+0x594>)
 8010958:	2200      	movs	r2, #0
 801095a:	f7ef fcb5 	bl	80002c8 <__aeabi_dsub>
 801095e:	4602      	mov	r2, r0
 8010960:	460b      	mov	r3, r1
 8010962:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010966:	462a      	mov	r2, r5
 8010968:	4633      	mov	r3, r6
 801096a:	f7f0 f8f5 	bl	8000b58 <__aeabi_dcmpgt>
 801096e:	2800      	cmp	r0, #0
 8010970:	f040 8298 	bne.w	8010ea4 <_dtoa_r+0x95c>
 8010974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010978:	462a      	mov	r2, r5
 801097a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801097e:	f7f0 f8cd 	bl	8000b1c <__aeabi_dcmplt>
 8010982:	bb38      	cbnz	r0, 80109d4 <_dtoa_r+0x48c>
 8010984:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010988:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801098c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801098e:	2b00      	cmp	r3, #0
 8010990:	f2c0 8157 	blt.w	8010c42 <_dtoa_r+0x6fa>
 8010994:	2f0e      	cmp	r7, #14
 8010996:	f300 8154 	bgt.w	8010c42 <_dtoa_r+0x6fa>
 801099a:	4b4b      	ldr	r3, [pc, #300]	@ (8010ac8 <_dtoa_r+0x580>)
 801099c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80109a0:	ed93 7b00 	vldr	d7, [r3]
 80109a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	ed8d 7b00 	vstr	d7, [sp]
 80109ac:	f280 80e5 	bge.w	8010b7a <_dtoa_r+0x632>
 80109b0:	9b03      	ldr	r3, [sp, #12]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f300 80e1 	bgt.w	8010b7a <_dtoa_r+0x632>
 80109b8:	d10c      	bne.n	80109d4 <_dtoa_r+0x48c>
 80109ba:	4b48      	ldr	r3, [pc, #288]	@ (8010adc <_dtoa_r+0x594>)
 80109bc:	2200      	movs	r2, #0
 80109be:	ec51 0b17 	vmov	r0, r1, d7
 80109c2:	f7ef fe39 	bl	8000638 <__aeabi_dmul>
 80109c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109ca:	f7f0 f8bb 	bl	8000b44 <__aeabi_dcmpge>
 80109ce:	2800      	cmp	r0, #0
 80109d0:	f000 8266 	beq.w	8010ea0 <_dtoa_r+0x958>
 80109d4:	2400      	movs	r4, #0
 80109d6:	4625      	mov	r5, r4
 80109d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80109da:	4656      	mov	r6, sl
 80109dc:	ea6f 0803 	mvn.w	r8, r3
 80109e0:	2700      	movs	r7, #0
 80109e2:	4621      	mov	r1, r4
 80109e4:	4648      	mov	r0, r9
 80109e6:	f000 fcbf 	bl	8011368 <_Bfree>
 80109ea:	2d00      	cmp	r5, #0
 80109ec:	f000 80bd 	beq.w	8010b6a <_dtoa_r+0x622>
 80109f0:	b12f      	cbz	r7, 80109fe <_dtoa_r+0x4b6>
 80109f2:	42af      	cmp	r7, r5
 80109f4:	d003      	beq.n	80109fe <_dtoa_r+0x4b6>
 80109f6:	4639      	mov	r1, r7
 80109f8:	4648      	mov	r0, r9
 80109fa:	f000 fcb5 	bl	8011368 <_Bfree>
 80109fe:	4629      	mov	r1, r5
 8010a00:	4648      	mov	r0, r9
 8010a02:	f000 fcb1 	bl	8011368 <_Bfree>
 8010a06:	e0b0      	b.n	8010b6a <_dtoa_r+0x622>
 8010a08:	07e2      	lsls	r2, r4, #31
 8010a0a:	d505      	bpl.n	8010a18 <_dtoa_r+0x4d0>
 8010a0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a10:	f7ef fe12 	bl	8000638 <__aeabi_dmul>
 8010a14:	3601      	adds	r6, #1
 8010a16:	2301      	movs	r3, #1
 8010a18:	1064      	asrs	r4, r4, #1
 8010a1a:	3508      	adds	r5, #8
 8010a1c:	e762      	b.n	80108e4 <_dtoa_r+0x39c>
 8010a1e:	2602      	movs	r6, #2
 8010a20:	e765      	b.n	80108ee <_dtoa_r+0x3a6>
 8010a22:	9c03      	ldr	r4, [sp, #12]
 8010a24:	46b8      	mov	r8, r7
 8010a26:	e784      	b.n	8010932 <_dtoa_r+0x3ea>
 8010a28:	4b27      	ldr	r3, [pc, #156]	@ (8010ac8 <_dtoa_r+0x580>)
 8010a2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010a2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010a34:	4454      	add	r4, sl
 8010a36:	2900      	cmp	r1, #0
 8010a38:	d054      	beq.n	8010ae4 <_dtoa_r+0x59c>
 8010a3a:	4929      	ldr	r1, [pc, #164]	@ (8010ae0 <_dtoa_r+0x598>)
 8010a3c:	2000      	movs	r0, #0
 8010a3e:	f7ef ff25 	bl	800088c <__aeabi_ddiv>
 8010a42:	4633      	mov	r3, r6
 8010a44:	462a      	mov	r2, r5
 8010a46:	f7ef fc3f 	bl	80002c8 <__aeabi_dsub>
 8010a4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010a4e:	4656      	mov	r6, sl
 8010a50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a54:	f7f0 f8a0 	bl	8000b98 <__aeabi_d2iz>
 8010a58:	4605      	mov	r5, r0
 8010a5a:	f7ef fd83 	bl	8000564 <__aeabi_i2d>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	460b      	mov	r3, r1
 8010a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a66:	f7ef fc2f 	bl	80002c8 <__aeabi_dsub>
 8010a6a:	3530      	adds	r5, #48	@ 0x30
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	460b      	mov	r3, r1
 8010a70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010a74:	f806 5b01 	strb.w	r5, [r6], #1
 8010a78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010a7c:	f7f0 f84e 	bl	8000b1c <__aeabi_dcmplt>
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d172      	bne.n	8010b6a <_dtoa_r+0x622>
 8010a84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a88:	4911      	ldr	r1, [pc, #68]	@ (8010ad0 <_dtoa_r+0x588>)
 8010a8a:	2000      	movs	r0, #0
 8010a8c:	f7ef fc1c 	bl	80002c8 <__aeabi_dsub>
 8010a90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010a94:	f7f0 f842 	bl	8000b1c <__aeabi_dcmplt>
 8010a98:	2800      	cmp	r0, #0
 8010a9a:	f040 80b4 	bne.w	8010c06 <_dtoa_r+0x6be>
 8010a9e:	42a6      	cmp	r6, r4
 8010aa0:	f43f af70 	beq.w	8010984 <_dtoa_r+0x43c>
 8010aa4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8010ad4 <_dtoa_r+0x58c>)
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f7ef fdc4 	bl	8000638 <__aeabi_dmul>
 8010ab0:	4b08      	ldr	r3, [pc, #32]	@ (8010ad4 <_dtoa_r+0x58c>)
 8010ab2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010abc:	f7ef fdbc 	bl	8000638 <__aeabi_dmul>
 8010ac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ac4:	e7c4      	b.n	8010a50 <_dtoa_r+0x508>
 8010ac6:	bf00      	nop
 8010ac8:	080129f0 	.word	0x080129f0
 8010acc:	080129c8 	.word	0x080129c8
 8010ad0:	3ff00000 	.word	0x3ff00000
 8010ad4:	40240000 	.word	0x40240000
 8010ad8:	401c0000 	.word	0x401c0000
 8010adc:	40140000 	.word	0x40140000
 8010ae0:	3fe00000 	.word	0x3fe00000
 8010ae4:	4631      	mov	r1, r6
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	f7ef fda6 	bl	8000638 <__aeabi_dmul>
 8010aec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010af0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010af2:	4656      	mov	r6, sl
 8010af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010af8:	f7f0 f84e 	bl	8000b98 <__aeabi_d2iz>
 8010afc:	4605      	mov	r5, r0
 8010afe:	f7ef fd31 	bl	8000564 <__aeabi_i2d>
 8010b02:	4602      	mov	r2, r0
 8010b04:	460b      	mov	r3, r1
 8010b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b0a:	f7ef fbdd 	bl	80002c8 <__aeabi_dsub>
 8010b0e:	3530      	adds	r5, #48	@ 0x30
 8010b10:	f806 5b01 	strb.w	r5, [r6], #1
 8010b14:	4602      	mov	r2, r0
 8010b16:	460b      	mov	r3, r1
 8010b18:	42a6      	cmp	r6, r4
 8010b1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b1e:	f04f 0200 	mov.w	r2, #0
 8010b22:	d124      	bne.n	8010b6e <_dtoa_r+0x626>
 8010b24:	4baf      	ldr	r3, [pc, #700]	@ (8010de4 <_dtoa_r+0x89c>)
 8010b26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010b2a:	f7ef fbcf 	bl	80002cc <__adddf3>
 8010b2e:	4602      	mov	r2, r0
 8010b30:	460b      	mov	r3, r1
 8010b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b36:	f7f0 f80f 	bl	8000b58 <__aeabi_dcmpgt>
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	d163      	bne.n	8010c06 <_dtoa_r+0x6be>
 8010b3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010b42:	49a8      	ldr	r1, [pc, #672]	@ (8010de4 <_dtoa_r+0x89c>)
 8010b44:	2000      	movs	r0, #0
 8010b46:	f7ef fbbf 	bl	80002c8 <__aeabi_dsub>
 8010b4a:	4602      	mov	r2, r0
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b52:	f7ef ffe3 	bl	8000b1c <__aeabi_dcmplt>
 8010b56:	2800      	cmp	r0, #0
 8010b58:	f43f af14 	beq.w	8010984 <_dtoa_r+0x43c>
 8010b5c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010b5e:	1e73      	subs	r3, r6, #1
 8010b60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010b62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010b66:	2b30      	cmp	r3, #48	@ 0x30
 8010b68:	d0f8      	beq.n	8010b5c <_dtoa_r+0x614>
 8010b6a:	4647      	mov	r7, r8
 8010b6c:	e03b      	b.n	8010be6 <_dtoa_r+0x69e>
 8010b6e:	4b9e      	ldr	r3, [pc, #632]	@ (8010de8 <_dtoa_r+0x8a0>)
 8010b70:	f7ef fd62 	bl	8000638 <__aeabi_dmul>
 8010b74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b78:	e7bc      	b.n	8010af4 <_dtoa_r+0x5ac>
 8010b7a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010b7e:	4656      	mov	r6, sl
 8010b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b84:	4620      	mov	r0, r4
 8010b86:	4629      	mov	r1, r5
 8010b88:	f7ef fe80 	bl	800088c <__aeabi_ddiv>
 8010b8c:	f7f0 f804 	bl	8000b98 <__aeabi_d2iz>
 8010b90:	4680      	mov	r8, r0
 8010b92:	f7ef fce7 	bl	8000564 <__aeabi_i2d>
 8010b96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b9a:	f7ef fd4d 	bl	8000638 <__aeabi_dmul>
 8010b9e:	4602      	mov	r2, r0
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	4629      	mov	r1, r5
 8010ba6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010baa:	f7ef fb8d 	bl	80002c8 <__aeabi_dsub>
 8010bae:	f806 4b01 	strb.w	r4, [r6], #1
 8010bb2:	9d03      	ldr	r5, [sp, #12]
 8010bb4:	eba6 040a 	sub.w	r4, r6, sl
 8010bb8:	42a5      	cmp	r5, r4
 8010bba:	4602      	mov	r2, r0
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	d133      	bne.n	8010c28 <_dtoa_r+0x6e0>
 8010bc0:	f7ef fb84 	bl	80002cc <__adddf3>
 8010bc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bc8:	4604      	mov	r4, r0
 8010bca:	460d      	mov	r5, r1
 8010bcc:	f7ef ffc4 	bl	8000b58 <__aeabi_dcmpgt>
 8010bd0:	b9c0      	cbnz	r0, 8010c04 <_dtoa_r+0x6bc>
 8010bd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	4629      	mov	r1, r5
 8010bda:	f7ef ff95 	bl	8000b08 <__aeabi_dcmpeq>
 8010bde:	b110      	cbz	r0, 8010be6 <_dtoa_r+0x69e>
 8010be0:	f018 0f01 	tst.w	r8, #1
 8010be4:	d10e      	bne.n	8010c04 <_dtoa_r+0x6bc>
 8010be6:	9902      	ldr	r1, [sp, #8]
 8010be8:	4648      	mov	r0, r9
 8010bea:	f000 fbbd 	bl	8011368 <_Bfree>
 8010bee:	2300      	movs	r3, #0
 8010bf0:	7033      	strb	r3, [r6, #0]
 8010bf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010bf4:	3701      	adds	r7, #1
 8010bf6:	601f      	str	r7, [r3, #0]
 8010bf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	f000 824b 	beq.w	8011096 <_dtoa_r+0xb4e>
 8010c00:	601e      	str	r6, [r3, #0]
 8010c02:	e248      	b.n	8011096 <_dtoa_r+0xb4e>
 8010c04:	46b8      	mov	r8, r7
 8010c06:	4633      	mov	r3, r6
 8010c08:	461e      	mov	r6, r3
 8010c0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c0e:	2a39      	cmp	r2, #57	@ 0x39
 8010c10:	d106      	bne.n	8010c20 <_dtoa_r+0x6d8>
 8010c12:	459a      	cmp	sl, r3
 8010c14:	d1f8      	bne.n	8010c08 <_dtoa_r+0x6c0>
 8010c16:	2230      	movs	r2, #48	@ 0x30
 8010c18:	f108 0801 	add.w	r8, r8, #1
 8010c1c:	f88a 2000 	strb.w	r2, [sl]
 8010c20:	781a      	ldrb	r2, [r3, #0]
 8010c22:	3201      	adds	r2, #1
 8010c24:	701a      	strb	r2, [r3, #0]
 8010c26:	e7a0      	b.n	8010b6a <_dtoa_r+0x622>
 8010c28:	4b6f      	ldr	r3, [pc, #444]	@ (8010de8 <_dtoa_r+0x8a0>)
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f7ef fd04 	bl	8000638 <__aeabi_dmul>
 8010c30:	2200      	movs	r2, #0
 8010c32:	2300      	movs	r3, #0
 8010c34:	4604      	mov	r4, r0
 8010c36:	460d      	mov	r5, r1
 8010c38:	f7ef ff66 	bl	8000b08 <__aeabi_dcmpeq>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	d09f      	beq.n	8010b80 <_dtoa_r+0x638>
 8010c40:	e7d1      	b.n	8010be6 <_dtoa_r+0x69e>
 8010c42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c44:	2a00      	cmp	r2, #0
 8010c46:	f000 80ea 	beq.w	8010e1e <_dtoa_r+0x8d6>
 8010c4a:	9a07      	ldr	r2, [sp, #28]
 8010c4c:	2a01      	cmp	r2, #1
 8010c4e:	f300 80cd 	bgt.w	8010dec <_dtoa_r+0x8a4>
 8010c52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010c54:	2a00      	cmp	r2, #0
 8010c56:	f000 80c1 	beq.w	8010ddc <_dtoa_r+0x894>
 8010c5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010c5e:	9c08      	ldr	r4, [sp, #32]
 8010c60:	9e00      	ldr	r6, [sp, #0]
 8010c62:	9a00      	ldr	r2, [sp, #0]
 8010c64:	441a      	add	r2, r3
 8010c66:	9200      	str	r2, [sp, #0]
 8010c68:	9a06      	ldr	r2, [sp, #24]
 8010c6a:	2101      	movs	r1, #1
 8010c6c:	441a      	add	r2, r3
 8010c6e:	4648      	mov	r0, r9
 8010c70:	9206      	str	r2, [sp, #24]
 8010c72:	f000 fc2d 	bl	80114d0 <__i2b>
 8010c76:	4605      	mov	r5, r0
 8010c78:	b166      	cbz	r6, 8010c94 <_dtoa_r+0x74c>
 8010c7a:	9b06      	ldr	r3, [sp, #24]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	dd09      	ble.n	8010c94 <_dtoa_r+0x74c>
 8010c80:	42b3      	cmp	r3, r6
 8010c82:	9a00      	ldr	r2, [sp, #0]
 8010c84:	bfa8      	it	ge
 8010c86:	4633      	movge	r3, r6
 8010c88:	1ad2      	subs	r2, r2, r3
 8010c8a:	9200      	str	r2, [sp, #0]
 8010c8c:	9a06      	ldr	r2, [sp, #24]
 8010c8e:	1af6      	subs	r6, r6, r3
 8010c90:	1ad3      	subs	r3, r2, r3
 8010c92:	9306      	str	r3, [sp, #24]
 8010c94:	9b08      	ldr	r3, [sp, #32]
 8010c96:	b30b      	cbz	r3, 8010cdc <_dtoa_r+0x794>
 8010c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	f000 80c6 	beq.w	8010e2c <_dtoa_r+0x8e4>
 8010ca0:	2c00      	cmp	r4, #0
 8010ca2:	f000 80c0 	beq.w	8010e26 <_dtoa_r+0x8de>
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	4622      	mov	r2, r4
 8010caa:	4648      	mov	r0, r9
 8010cac:	f000 fcc8 	bl	8011640 <__pow5mult>
 8010cb0:	9a02      	ldr	r2, [sp, #8]
 8010cb2:	4601      	mov	r1, r0
 8010cb4:	4605      	mov	r5, r0
 8010cb6:	4648      	mov	r0, r9
 8010cb8:	f000 fc20 	bl	80114fc <__multiply>
 8010cbc:	9902      	ldr	r1, [sp, #8]
 8010cbe:	4680      	mov	r8, r0
 8010cc0:	4648      	mov	r0, r9
 8010cc2:	f000 fb51 	bl	8011368 <_Bfree>
 8010cc6:	9b08      	ldr	r3, [sp, #32]
 8010cc8:	1b1b      	subs	r3, r3, r4
 8010cca:	9308      	str	r3, [sp, #32]
 8010ccc:	f000 80b1 	beq.w	8010e32 <_dtoa_r+0x8ea>
 8010cd0:	9a08      	ldr	r2, [sp, #32]
 8010cd2:	4641      	mov	r1, r8
 8010cd4:	4648      	mov	r0, r9
 8010cd6:	f000 fcb3 	bl	8011640 <__pow5mult>
 8010cda:	9002      	str	r0, [sp, #8]
 8010cdc:	2101      	movs	r1, #1
 8010cde:	4648      	mov	r0, r9
 8010ce0:	f000 fbf6 	bl	80114d0 <__i2b>
 8010ce4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f000 81d8 	beq.w	801109e <_dtoa_r+0xb56>
 8010cee:	461a      	mov	r2, r3
 8010cf0:	4601      	mov	r1, r0
 8010cf2:	4648      	mov	r0, r9
 8010cf4:	f000 fca4 	bl	8011640 <__pow5mult>
 8010cf8:	9b07      	ldr	r3, [sp, #28]
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	f300 809f 	bgt.w	8010e40 <_dtoa_r+0x8f8>
 8010d02:	9b04      	ldr	r3, [sp, #16]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	f040 8097 	bne.w	8010e38 <_dtoa_r+0x8f0>
 8010d0a:	9b05      	ldr	r3, [sp, #20]
 8010d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	f040 8093 	bne.w	8010e3c <_dtoa_r+0x8f4>
 8010d16:	9b05      	ldr	r3, [sp, #20]
 8010d18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010d1c:	0d1b      	lsrs	r3, r3, #20
 8010d1e:	051b      	lsls	r3, r3, #20
 8010d20:	b133      	cbz	r3, 8010d30 <_dtoa_r+0x7e8>
 8010d22:	9b00      	ldr	r3, [sp, #0]
 8010d24:	3301      	adds	r3, #1
 8010d26:	9300      	str	r3, [sp, #0]
 8010d28:	9b06      	ldr	r3, [sp, #24]
 8010d2a:	3301      	adds	r3, #1
 8010d2c:	9306      	str	r3, [sp, #24]
 8010d2e:	2301      	movs	r3, #1
 8010d30:	9308      	str	r3, [sp, #32]
 8010d32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f000 81b8 	beq.w	80110aa <_dtoa_r+0xb62>
 8010d3a:	6923      	ldr	r3, [r4, #16]
 8010d3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d40:	6918      	ldr	r0, [r3, #16]
 8010d42:	f000 fb79 	bl	8011438 <__hi0bits>
 8010d46:	f1c0 0020 	rsb	r0, r0, #32
 8010d4a:	9b06      	ldr	r3, [sp, #24]
 8010d4c:	4418      	add	r0, r3
 8010d4e:	f010 001f 	ands.w	r0, r0, #31
 8010d52:	f000 8082 	beq.w	8010e5a <_dtoa_r+0x912>
 8010d56:	f1c0 0320 	rsb	r3, r0, #32
 8010d5a:	2b04      	cmp	r3, #4
 8010d5c:	dd73      	ble.n	8010e46 <_dtoa_r+0x8fe>
 8010d5e:	9b00      	ldr	r3, [sp, #0]
 8010d60:	f1c0 001c 	rsb	r0, r0, #28
 8010d64:	4403      	add	r3, r0
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	9b06      	ldr	r3, [sp, #24]
 8010d6a:	4403      	add	r3, r0
 8010d6c:	4406      	add	r6, r0
 8010d6e:	9306      	str	r3, [sp, #24]
 8010d70:	9b00      	ldr	r3, [sp, #0]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	dd05      	ble.n	8010d82 <_dtoa_r+0x83a>
 8010d76:	9902      	ldr	r1, [sp, #8]
 8010d78:	461a      	mov	r2, r3
 8010d7a:	4648      	mov	r0, r9
 8010d7c:	f000 fcba 	bl	80116f4 <__lshift>
 8010d80:	9002      	str	r0, [sp, #8]
 8010d82:	9b06      	ldr	r3, [sp, #24]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dd05      	ble.n	8010d94 <_dtoa_r+0x84c>
 8010d88:	4621      	mov	r1, r4
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	4648      	mov	r0, r9
 8010d8e:	f000 fcb1 	bl	80116f4 <__lshift>
 8010d92:	4604      	mov	r4, r0
 8010d94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d061      	beq.n	8010e5e <_dtoa_r+0x916>
 8010d9a:	9802      	ldr	r0, [sp, #8]
 8010d9c:	4621      	mov	r1, r4
 8010d9e:	f000 fd15 	bl	80117cc <__mcmp>
 8010da2:	2800      	cmp	r0, #0
 8010da4:	da5b      	bge.n	8010e5e <_dtoa_r+0x916>
 8010da6:	2300      	movs	r3, #0
 8010da8:	9902      	ldr	r1, [sp, #8]
 8010daa:	220a      	movs	r2, #10
 8010dac:	4648      	mov	r0, r9
 8010dae:	f000 fafd 	bl	80113ac <__multadd>
 8010db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010db4:	9002      	str	r0, [sp, #8]
 8010db6:	f107 38ff 	add.w	r8, r7, #4294967295
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f000 8177 	beq.w	80110ae <_dtoa_r+0xb66>
 8010dc0:	4629      	mov	r1, r5
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	220a      	movs	r2, #10
 8010dc6:	4648      	mov	r0, r9
 8010dc8:	f000 faf0 	bl	80113ac <__multadd>
 8010dcc:	f1bb 0f00 	cmp.w	fp, #0
 8010dd0:	4605      	mov	r5, r0
 8010dd2:	dc6f      	bgt.n	8010eb4 <_dtoa_r+0x96c>
 8010dd4:	9b07      	ldr	r3, [sp, #28]
 8010dd6:	2b02      	cmp	r3, #2
 8010dd8:	dc49      	bgt.n	8010e6e <_dtoa_r+0x926>
 8010dda:	e06b      	b.n	8010eb4 <_dtoa_r+0x96c>
 8010ddc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010dde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010de2:	e73c      	b.n	8010c5e <_dtoa_r+0x716>
 8010de4:	3fe00000 	.word	0x3fe00000
 8010de8:	40240000 	.word	0x40240000
 8010dec:	9b03      	ldr	r3, [sp, #12]
 8010dee:	1e5c      	subs	r4, r3, #1
 8010df0:	9b08      	ldr	r3, [sp, #32]
 8010df2:	42a3      	cmp	r3, r4
 8010df4:	db09      	blt.n	8010e0a <_dtoa_r+0x8c2>
 8010df6:	1b1c      	subs	r4, r3, r4
 8010df8:	9b03      	ldr	r3, [sp, #12]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f6bf af30 	bge.w	8010c60 <_dtoa_r+0x718>
 8010e00:	9b00      	ldr	r3, [sp, #0]
 8010e02:	9a03      	ldr	r2, [sp, #12]
 8010e04:	1a9e      	subs	r6, r3, r2
 8010e06:	2300      	movs	r3, #0
 8010e08:	e72b      	b.n	8010c62 <_dtoa_r+0x71a>
 8010e0a:	9b08      	ldr	r3, [sp, #32]
 8010e0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e0e:	9408      	str	r4, [sp, #32]
 8010e10:	1ae3      	subs	r3, r4, r3
 8010e12:	441a      	add	r2, r3
 8010e14:	9e00      	ldr	r6, [sp, #0]
 8010e16:	9b03      	ldr	r3, [sp, #12]
 8010e18:	920d      	str	r2, [sp, #52]	@ 0x34
 8010e1a:	2400      	movs	r4, #0
 8010e1c:	e721      	b.n	8010c62 <_dtoa_r+0x71a>
 8010e1e:	9c08      	ldr	r4, [sp, #32]
 8010e20:	9e00      	ldr	r6, [sp, #0]
 8010e22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010e24:	e728      	b.n	8010c78 <_dtoa_r+0x730>
 8010e26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010e2a:	e751      	b.n	8010cd0 <_dtoa_r+0x788>
 8010e2c:	9a08      	ldr	r2, [sp, #32]
 8010e2e:	9902      	ldr	r1, [sp, #8]
 8010e30:	e750      	b.n	8010cd4 <_dtoa_r+0x78c>
 8010e32:	f8cd 8008 	str.w	r8, [sp, #8]
 8010e36:	e751      	b.n	8010cdc <_dtoa_r+0x794>
 8010e38:	2300      	movs	r3, #0
 8010e3a:	e779      	b.n	8010d30 <_dtoa_r+0x7e8>
 8010e3c:	9b04      	ldr	r3, [sp, #16]
 8010e3e:	e777      	b.n	8010d30 <_dtoa_r+0x7e8>
 8010e40:	2300      	movs	r3, #0
 8010e42:	9308      	str	r3, [sp, #32]
 8010e44:	e779      	b.n	8010d3a <_dtoa_r+0x7f2>
 8010e46:	d093      	beq.n	8010d70 <_dtoa_r+0x828>
 8010e48:	9a00      	ldr	r2, [sp, #0]
 8010e4a:	331c      	adds	r3, #28
 8010e4c:	441a      	add	r2, r3
 8010e4e:	9200      	str	r2, [sp, #0]
 8010e50:	9a06      	ldr	r2, [sp, #24]
 8010e52:	441a      	add	r2, r3
 8010e54:	441e      	add	r6, r3
 8010e56:	9206      	str	r2, [sp, #24]
 8010e58:	e78a      	b.n	8010d70 <_dtoa_r+0x828>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	e7f4      	b.n	8010e48 <_dtoa_r+0x900>
 8010e5e:	9b03      	ldr	r3, [sp, #12]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	46b8      	mov	r8, r7
 8010e64:	dc20      	bgt.n	8010ea8 <_dtoa_r+0x960>
 8010e66:	469b      	mov	fp, r3
 8010e68:	9b07      	ldr	r3, [sp, #28]
 8010e6a:	2b02      	cmp	r3, #2
 8010e6c:	dd1e      	ble.n	8010eac <_dtoa_r+0x964>
 8010e6e:	f1bb 0f00 	cmp.w	fp, #0
 8010e72:	f47f adb1 	bne.w	80109d8 <_dtoa_r+0x490>
 8010e76:	4621      	mov	r1, r4
 8010e78:	465b      	mov	r3, fp
 8010e7a:	2205      	movs	r2, #5
 8010e7c:	4648      	mov	r0, r9
 8010e7e:	f000 fa95 	bl	80113ac <__multadd>
 8010e82:	4601      	mov	r1, r0
 8010e84:	4604      	mov	r4, r0
 8010e86:	9802      	ldr	r0, [sp, #8]
 8010e88:	f000 fca0 	bl	80117cc <__mcmp>
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	f77f ada3 	ble.w	80109d8 <_dtoa_r+0x490>
 8010e92:	4656      	mov	r6, sl
 8010e94:	2331      	movs	r3, #49	@ 0x31
 8010e96:	f806 3b01 	strb.w	r3, [r6], #1
 8010e9a:	f108 0801 	add.w	r8, r8, #1
 8010e9e:	e59f      	b.n	80109e0 <_dtoa_r+0x498>
 8010ea0:	9c03      	ldr	r4, [sp, #12]
 8010ea2:	46b8      	mov	r8, r7
 8010ea4:	4625      	mov	r5, r4
 8010ea6:	e7f4      	b.n	8010e92 <_dtoa_r+0x94a>
 8010ea8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	f000 8101 	beq.w	80110b6 <_dtoa_r+0xb6e>
 8010eb4:	2e00      	cmp	r6, #0
 8010eb6:	dd05      	ble.n	8010ec4 <_dtoa_r+0x97c>
 8010eb8:	4629      	mov	r1, r5
 8010eba:	4632      	mov	r2, r6
 8010ebc:	4648      	mov	r0, r9
 8010ebe:	f000 fc19 	bl	80116f4 <__lshift>
 8010ec2:	4605      	mov	r5, r0
 8010ec4:	9b08      	ldr	r3, [sp, #32]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d05c      	beq.n	8010f84 <_dtoa_r+0xa3c>
 8010eca:	6869      	ldr	r1, [r5, #4]
 8010ecc:	4648      	mov	r0, r9
 8010ece:	f000 fa0b 	bl	80112e8 <_Balloc>
 8010ed2:	4606      	mov	r6, r0
 8010ed4:	b928      	cbnz	r0, 8010ee2 <_dtoa_r+0x99a>
 8010ed6:	4b82      	ldr	r3, [pc, #520]	@ (80110e0 <_dtoa_r+0xb98>)
 8010ed8:	4602      	mov	r2, r0
 8010eda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010ede:	f7ff bb4a 	b.w	8010576 <_dtoa_r+0x2e>
 8010ee2:	692a      	ldr	r2, [r5, #16]
 8010ee4:	3202      	adds	r2, #2
 8010ee6:	0092      	lsls	r2, r2, #2
 8010ee8:	f105 010c 	add.w	r1, r5, #12
 8010eec:	300c      	adds	r0, #12
 8010eee:	f7ff fa94 	bl	801041a <memcpy>
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	4631      	mov	r1, r6
 8010ef6:	4648      	mov	r0, r9
 8010ef8:	f000 fbfc 	bl	80116f4 <__lshift>
 8010efc:	f10a 0301 	add.w	r3, sl, #1
 8010f00:	9300      	str	r3, [sp, #0]
 8010f02:	eb0a 030b 	add.w	r3, sl, fp
 8010f06:	9308      	str	r3, [sp, #32]
 8010f08:	9b04      	ldr	r3, [sp, #16]
 8010f0a:	f003 0301 	and.w	r3, r3, #1
 8010f0e:	462f      	mov	r7, r5
 8010f10:	9306      	str	r3, [sp, #24]
 8010f12:	4605      	mov	r5, r0
 8010f14:	9b00      	ldr	r3, [sp, #0]
 8010f16:	9802      	ldr	r0, [sp, #8]
 8010f18:	4621      	mov	r1, r4
 8010f1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8010f1e:	f7ff fa8a 	bl	8010436 <quorem>
 8010f22:	4603      	mov	r3, r0
 8010f24:	3330      	adds	r3, #48	@ 0x30
 8010f26:	9003      	str	r0, [sp, #12]
 8010f28:	4639      	mov	r1, r7
 8010f2a:	9802      	ldr	r0, [sp, #8]
 8010f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f2e:	f000 fc4d 	bl	80117cc <__mcmp>
 8010f32:	462a      	mov	r2, r5
 8010f34:	9004      	str	r0, [sp, #16]
 8010f36:	4621      	mov	r1, r4
 8010f38:	4648      	mov	r0, r9
 8010f3a:	f000 fc63 	bl	8011804 <__mdiff>
 8010f3e:	68c2      	ldr	r2, [r0, #12]
 8010f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f42:	4606      	mov	r6, r0
 8010f44:	bb02      	cbnz	r2, 8010f88 <_dtoa_r+0xa40>
 8010f46:	4601      	mov	r1, r0
 8010f48:	9802      	ldr	r0, [sp, #8]
 8010f4a:	f000 fc3f 	bl	80117cc <__mcmp>
 8010f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f50:	4602      	mov	r2, r0
 8010f52:	4631      	mov	r1, r6
 8010f54:	4648      	mov	r0, r9
 8010f56:	920c      	str	r2, [sp, #48]	@ 0x30
 8010f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f5a:	f000 fa05 	bl	8011368 <_Bfree>
 8010f5e:	9b07      	ldr	r3, [sp, #28]
 8010f60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010f62:	9e00      	ldr	r6, [sp, #0]
 8010f64:	ea42 0103 	orr.w	r1, r2, r3
 8010f68:	9b06      	ldr	r3, [sp, #24]
 8010f6a:	4319      	orrs	r1, r3
 8010f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f6e:	d10d      	bne.n	8010f8c <_dtoa_r+0xa44>
 8010f70:	2b39      	cmp	r3, #57	@ 0x39
 8010f72:	d027      	beq.n	8010fc4 <_dtoa_r+0xa7c>
 8010f74:	9a04      	ldr	r2, [sp, #16]
 8010f76:	2a00      	cmp	r2, #0
 8010f78:	dd01      	ble.n	8010f7e <_dtoa_r+0xa36>
 8010f7a:	9b03      	ldr	r3, [sp, #12]
 8010f7c:	3331      	adds	r3, #49	@ 0x31
 8010f7e:	f88b 3000 	strb.w	r3, [fp]
 8010f82:	e52e      	b.n	80109e2 <_dtoa_r+0x49a>
 8010f84:	4628      	mov	r0, r5
 8010f86:	e7b9      	b.n	8010efc <_dtoa_r+0x9b4>
 8010f88:	2201      	movs	r2, #1
 8010f8a:	e7e2      	b.n	8010f52 <_dtoa_r+0xa0a>
 8010f8c:	9904      	ldr	r1, [sp, #16]
 8010f8e:	2900      	cmp	r1, #0
 8010f90:	db04      	blt.n	8010f9c <_dtoa_r+0xa54>
 8010f92:	9807      	ldr	r0, [sp, #28]
 8010f94:	4301      	orrs	r1, r0
 8010f96:	9806      	ldr	r0, [sp, #24]
 8010f98:	4301      	orrs	r1, r0
 8010f9a:	d120      	bne.n	8010fde <_dtoa_r+0xa96>
 8010f9c:	2a00      	cmp	r2, #0
 8010f9e:	ddee      	ble.n	8010f7e <_dtoa_r+0xa36>
 8010fa0:	9902      	ldr	r1, [sp, #8]
 8010fa2:	9300      	str	r3, [sp, #0]
 8010fa4:	2201      	movs	r2, #1
 8010fa6:	4648      	mov	r0, r9
 8010fa8:	f000 fba4 	bl	80116f4 <__lshift>
 8010fac:	4621      	mov	r1, r4
 8010fae:	9002      	str	r0, [sp, #8]
 8010fb0:	f000 fc0c 	bl	80117cc <__mcmp>
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	9b00      	ldr	r3, [sp, #0]
 8010fb8:	dc02      	bgt.n	8010fc0 <_dtoa_r+0xa78>
 8010fba:	d1e0      	bne.n	8010f7e <_dtoa_r+0xa36>
 8010fbc:	07da      	lsls	r2, r3, #31
 8010fbe:	d5de      	bpl.n	8010f7e <_dtoa_r+0xa36>
 8010fc0:	2b39      	cmp	r3, #57	@ 0x39
 8010fc2:	d1da      	bne.n	8010f7a <_dtoa_r+0xa32>
 8010fc4:	2339      	movs	r3, #57	@ 0x39
 8010fc6:	f88b 3000 	strb.w	r3, [fp]
 8010fca:	4633      	mov	r3, r6
 8010fcc:	461e      	mov	r6, r3
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010fd4:	2a39      	cmp	r2, #57	@ 0x39
 8010fd6:	d04e      	beq.n	8011076 <_dtoa_r+0xb2e>
 8010fd8:	3201      	adds	r2, #1
 8010fda:	701a      	strb	r2, [r3, #0]
 8010fdc:	e501      	b.n	80109e2 <_dtoa_r+0x49a>
 8010fde:	2a00      	cmp	r2, #0
 8010fe0:	dd03      	ble.n	8010fea <_dtoa_r+0xaa2>
 8010fe2:	2b39      	cmp	r3, #57	@ 0x39
 8010fe4:	d0ee      	beq.n	8010fc4 <_dtoa_r+0xa7c>
 8010fe6:	3301      	adds	r3, #1
 8010fe8:	e7c9      	b.n	8010f7e <_dtoa_r+0xa36>
 8010fea:	9a00      	ldr	r2, [sp, #0]
 8010fec:	9908      	ldr	r1, [sp, #32]
 8010fee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010ff2:	428a      	cmp	r2, r1
 8010ff4:	d028      	beq.n	8011048 <_dtoa_r+0xb00>
 8010ff6:	9902      	ldr	r1, [sp, #8]
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	220a      	movs	r2, #10
 8010ffc:	4648      	mov	r0, r9
 8010ffe:	f000 f9d5 	bl	80113ac <__multadd>
 8011002:	42af      	cmp	r7, r5
 8011004:	9002      	str	r0, [sp, #8]
 8011006:	f04f 0300 	mov.w	r3, #0
 801100a:	f04f 020a 	mov.w	r2, #10
 801100e:	4639      	mov	r1, r7
 8011010:	4648      	mov	r0, r9
 8011012:	d107      	bne.n	8011024 <_dtoa_r+0xadc>
 8011014:	f000 f9ca 	bl	80113ac <__multadd>
 8011018:	4607      	mov	r7, r0
 801101a:	4605      	mov	r5, r0
 801101c:	9b00      	ldr	r3, [sp, #0]
 801101e:	3301      	adds	r3, #1
 8011020:	9300      	str	r3, [sp, #0]
 8011022:	e777      	b.n	8010f14 <_dtoa_r+0x9cc>
 8011024:	f000 f9c2 	bl	80113ac <__multadd>
 8011028:	4629      	mov	r1, r5
 801102a:	4607      	mov	r7, r0
 801102c:	2300      	movs	r3, #0
 801102e:	220a      	movs	r2, #10
 8011030:	4648      	mov	r0, r9
 8011032:	f000 f9bb 	bl	80113ac <__multadd>
 8011036:	4605      	mov	r5, r0
 8011038:	e7f0      	b.n	801101c <_dtoa_r+0xad4>
 801103a:	f1bb 0f00 	cmp.w	fp, #0
 801103e:	bfcc      	ite	gt
 8011040:	465e      	movgt	r6, fp
 8011042:	2601      	movle	r6, #1
 8011044:	4456      	add	r6, sl
 8011046:	2700      	movs	r7, #0
 8011048:	9902      	ldr	r1, [sp, #8]
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	2201      	movs	r2, #1
 801104e:	4648      	mov	r0, r9
 8011050:	f000 fb50 	bl	80116f4 <__lshift>
 8011054:	4621      	mov	r1, r4
 8011056:	9002      	str	r0, [sp, #8]
 8011058:	f000 fbb8 	bl	80117cc <__mcmp>
 801105c:	2800      	cmp	r0, #0
 801105e:	dcb4      	bgt.n	8010fca <_dtoa_r+0xa82>
 8011060:	d102      	bne.n	8011068 <_dtoa_r+0xb20>
 8011062:	9b00      	ldr	r3, [sp, #0]
 8011064:	07db      	lsls	r3, r3, #31
 8011066:	d4b0      	bmi.n	8010fca <_dtoa_r+0xa82>
 8011068:	4633      	mov	r3, r6
 801106a:	461e      	mov	r6, r3
 801106c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011070:	2a30      	cmp	r2, #48	@ 0x30
 8011072:	d0fa      	beq.n	801106a <_dtoa_r+0xb22>
 8011074:	e4b5      	b.n	80109e2 <_dtoa_r+0x49a>
 8011076:	459a      	cmp	sl, r3
 8011078:	d1a8      	bne.n	8010fcc <_dtoa_r+0xa84>
 801107a:	2331      	movs	r3, #49	@ 0x31
 801107c:	f108 0801 	add.w	r8, r8, #1
 8011080:	f88a 3000 	strb.w	r3, [sl]
 8011084:	e4ad      	b.n	80109e2 <_dtoa_r+0x49a>
 8011086:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011088:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80110e4 <_dtoa_r+0xb9c>
 801108c:	b11b      	cbz	r3, 8011096 <_dtoa_r+0xb4e>
 801108e:	f10a 0308 	add.w	r3, sl, #8
 8011092:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011094:	6013      	str	r3, [r2, #0]
 8011096:	4650      	mov	r0, sl
 8011098:	b017      	add	sp, #92	@ 0x5c
 801109a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801109e:	9b07      	ldr	r3, [sp, #28]
 80110a0:	2b01      	cmp	r3, #1
 80110a2:	f77f ae2e 	ble.w	8010d02 <_dtoa_r+0x7ba>
 80110a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80110a8:	9308      	str	r3, [sp, #32]
 80110aa:	2001      	movs	r0, #1
 80110ac:	e64d      	b.n	8010d4a <_dtoa_r+0x802>
 80110ae:	f1bb 0f00 	cmp.w	fp, #0
 80110b2:	f77f aed9 	ble.w	8010e68 <_dtoa_r+0x920>
 80110b6:	4656      	mov	r6, sl
 80110b8:	9802      	ldr	r0, [sp, #8]
 80110ba:	4621      	mov	r1, r4
 80110bc:	f7ff f9bb 	bl	8010436 <quorem>
 80110c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80110c4:	f806 3b01 	strb.w	r3, [r6], #1
 80110c8:	eba6 020a 	sub.w	r2, r6, sl
 80110cc:	4593      	cmp	fp, r2
 80110ce:	ddb4      	ble.n	801103a <_dtoa_r+0xaf2>
 80110d0:	9902      	ldr	r1, [sp, #8]
 80110d2:	2300      	movs	r3, #0
 80110d4:	220a      	movs	r2, #10
 80110d6:	4648      	mov	r0, r9
 80110d8:	f000 f968 	bl	80113ac <__multadd>
 80110dc:	9002      	str	r0, [sp, #8]
 80110de:	e7eb      	b.n	80110b8 <_dtoa_r+0xb70>
 80110e0:	080128f4 	.word	0x080128f4
 80110e4:	08012878 	.word	0x08012878

080110e8 <_free_r>:
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	4605      	mov	r5, r0
 80110ec:	2900      	cmp	r1, #0
 80110ee:	d041      	beq.n	8011174 <_free_r+0x8c>
 80110f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110f4:	1f0c      	subs	r4, r1, #4
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	bfb8      	it	lt
 80110fa:	18e4      	addlt	r4, r4, r3
 80110fc:	f000 f8e8 	bl	80112d0 <__malloc_lock>
 8011100:	4a1d      	ldr	r2, [pc, #116]	@ (8011178 <_free_r+0x90>)
 8011102:	6813      	ldr	r3, [r2, #0]
 8011104:	b933      	cbnz	r3, 8011114 <_free_r+0x2c>
 8011106:	6063      	str	r3, [r4, #4]
 8011108:	6014      	str	r4, [r2, #0]
 801110a:	4628      	mov	r0, r5
 801110c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011110:	f000 b8e4 	b.w	80112dc <__malloc_unlock>
 8011114:	42a3      	cmp	r3, r4
 8011116:	d908      	bls.n	801112a <_free_r+0x42>
 8011118:	6820      	ldr	r0, [r4, #0]
 801111a:	1821      	adds	r1, r4, r0
 801111c:	428b      	cmp	r3, r1
 801111e:	bf01      	itttt	eq
 8011120:	6819      	ldreq	r1, [r3, #0]
 8011122:	685b      	ldreq	r3, [r3, #4]
 8011124:	1809      	addeq	r1, r1, r0
 8011126:	6021      	streq	r1, [r4, #0]
 8011128:	e7ed      	b.n	8011106 <_free_r+0x1e>
 801112a:	461a      	mov	r2, r3
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	b10b      	cbz	r3, 8011134 <_free_r+0x4c>
 8011130:	42a3      	cmp	r3, r4
 8011132:	d9fa      	bls.n	801112a <_free_r+0x42>
 8011134:	6811      	ldr	r1, [r2, #0]
 8011136:	1850      	adds	r0, r2, r1
 8011138:	42a0      	cmp	r0, r4
 801113a:	d10b      	bne.n	8011154 <_free_r+0x6c>
 801113c:	6820      	ldr	r0, [r4, #0]
 801113e:	4401      	add	r1, r0
 8011140:	1850      	adds	r0, r2, r1
 8011142:	4283      	cmp	r3, r0
 8011144:	6011      	str	r1, [r2, #0]
 8011146:	d1e0      	bne.n	801110a <_free_r+0x22>
 8011148:	6818      	ldr	r0, [r3, #0]
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	6053      	str	r3, [r2, #4]
 801114e:	4408      	add	r0, r1
 8011150:	6010      	str	r0, [r2, #0]
 8011152:	e7da      	b.n	801110a <_free_r+0x22>
 8011154:	d902      	bls.n	801115c <_free_r+0x74>
 8011156:	230c      	movs	r3, #12
 8011158:	602b      	str	r3, [r5, #0]
 801115a:	e7d6      	b.n	801110a <_free_r+0x22>
 801115c:	6820      	ldr	r0, [r4, #0]
 801115e:	1821      	adds	r1, r4, r0
 8011160:	428b      	cmp	r3, r1
 8011162:	bf04      	itt	eq
 8011164:	6819      	ldreq	r1, [r3, #0]
 8011166:	685b      	ldreq	r3, [r3, #4]
 8011168:	6063      	str	r3, [r4, #4]
 801116a:	bf04      	itt	eq
 801116c:	1809      	addeq	r1, r1, r0
 801116e:	6021      	streq	r1, [r4, #0]
 8011170:	6054      	str	r4, [r2, #4]
 8011172:	e7ca      	b.n	801110a <_free_r+0x22>
 8011174:	bd38      	pop	{r3, r4, r5, pc}
 8011176:	bf00      	nop
 8011178:	20005074 	.word	0x20005074

0801117c <malloc>:
 801117c:	4b02      	ldr	r3, [pc, #8]	@ (8011188 <malloc+0xc>)
 801117e:	4601      	mov	r1, r0
 8011180:	6818      	ldr	r0, [r3, #0]
 8011182:	f000 b825 	b.w	80111d0 <_malloc_r>
 8011186:	bf00      	nop
 8011188:	2000001c 	.word	0x2000001c

0801118c <sbrk_aligned>:
 801118c:	b570      	push	{r4, r5, r6, lr}
 801118e:	4e0f      	ldr	r6, [pc, #60]	@ (80111cc <sbrk_aligned+0x40>)
 8011190:	460c      	mov	r4, r1
 8011192:	6831      	ldr	r1, [r6, #0]
 8011194:	4605      	mov	r5, r0
 8011196:	b911      	cbnz	r1, 801119e <sbrk_aligned+0x12>
 8011198:	f001 f804 	bl	80121a4 <_sbrk_r>
 801119c:	6030      	str	r0, [r6, #0]
 801119e:	4621      	mov	r1, r4
 80111a0:	4628      	mov	r0, r5
 80111a2:	f000 ffff 	bl	80121a4 <_sbrk_r>
 80111a6:	1c43      	adds	r3, r0, #1
 80111a8:	d103      	bne.n	80111b2 <sbrk_aligned+0x26>
 80111aa:	f04f 34ff 	mov.w	r4, #4294967295
 80111ae:	4620      	mov	r0, r4
 80111b0:	bd70      	pop	{r4, r5, r6, pc}
 80111b2:	1cc4      	adds	r4, r0, #3
 80111b4:	f024 0403 	bic.w	r4, r4, #3
 80111b8:	42a0      	cmp	r0, r4
 80111ba:	d0f8      	beq.n	80111ae <sbrk_aligned+0x22>
 80111bc:	1a21      	subs	r1, r4, r0
 80111be:	4628      	mov	r0, r5
 80111c0:	f000 fff0 	bl	80121a4 <_sbrk_r>
 80111c4:	3001      	adds	r0, #1
 80111c6:	d1f2      	bne.n	80111ae <sbrk_aligned+0x22>
 80111c8:	e7ef      	b.n	80111aa <sbrk_aligned+0x1e>
 80111ca:	bf00      	nop
 80111cc:	20005070 	.word	0x20005070

080111d0 <_malloc_r>:
 80111d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111d4:	1ccd      	adds	r5, r1, #3
 80111d6:	f025 0503 	bic.w	r5, r5, #3
 80111da:	3508      	adds	r5, #8
 80111dc:	2d0c      	cmp	r5, #12
 80111de:	bf38      	it	cc
 80111e0:	250c      	movcc	r5, #12
 80111e2:	2d00      	cmp	r5, #0
 80111e4:	4606      	mov	r6, r0
 80111e6:	db01      	blt.n	80111ec <_malloc_r+0x1c>
 80111e8:	42a9      	cmp	r1, r5
 80111ea:	d904      	bls.n	80111f6 <_malloc_r+0x26>
 80111ec:	230c      	movs	r3, #12
 80111ee:	6033      	str	r3, [r6, #0]
 80111f0:	2000      	movs	r0, #0
 80111f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80112cc <_malloc_r+0xfc>
 80111fa:	f000 f869 	bl	80112d0 <__malloc_lock>
 80111fe:	f8d8 3000 	ldr.w	r3, [r8]
 8011202:	461c      	mov	r4, r3
 8011204:	bb44      	cbnz	r4, 8011258 <_malloc_r+0x88>
 8011206:	4629      	mov	r1, r5
 8011208:	4630      	mov	r0, r6
 801120a:	f7ff ffbf 	bl	801118c <sbrk_aligned>
 801120e:	1c43      	adds	r3, r0, #1
 8011210:	4604      	mov	r4, r0
 8011212:	d158      	bne.n	80112c6 <_malloc_r+0xf6>
 8011214:	f8d8 4000 	ldr.w	r4, [r8]
 8011218:	4627      	mov	r7, r4
 801121a:	2f00      	cmp	r7, #0
 801121c:	d143      	bne.n	80112a6 <_malloc_r+0xd6>
 801121e:	2c00      	cmp	r4, #0
 8011220:	d04b      	beq.n	80112ba <_malloc_r+0xea>
 8011222:	6823      	ldr	r3, [r4, #0]
 8011224:	4639      	mov	r1, r7
 8011226:	4630      	mov	r0, r6
 8011228:	eb04 0903 	add.w	r9, r4, r3
 801122c:	f000 ffba 	bl	80121a4 <_sbrk_r>
 8011230:	4581      	cmp	r9, r0
 8011232:	d142      	bne.n	80112ba <_malloc_r+0xea>
 8011234:	6821      	ldr	r1, [r4, #0]
 8011236:	1a6d      	subs	r5, r5, r1
 8011238:	4629      	mov	r1, r5
 801123a:	4630      	mov	r0, r6
 801123c:	f7ff ffa6 	bl	801118c <sbrk_aligned>
 8011240:	3001      	adds	r0, #1
 8011242:	d03a      	beq.n	80112ba <_malloc_r+0xea>
 8011244:	6823      	ldr	r3, [r4, #0]
 8011246:	442b      	add	r3, r5
 8011248:	6023      	str	r3, [r4, #0]
 801124a:	f8d8 3000 	ldr.w	r3, [r8]
 801124e:	685a      	ldr	r2, [r3, #4]
 8011250:	bb62      	cbnz	r2, 80112ac <_malloc_r+0xdc>
 8011252:	f8c8 7000 	str.w	r7, [r8]
 8011256:	e00f      	b.n	8011278 <_malloc_r+0xa8>
 8011258:	6822      	ldr	r2, [r4, #0]
 801125a:	1b52      	subs	r2, r2, r5
 801125c:	d420      	bmi.n	80112a0 <_malloc_r+0xd0>
 801125e:	2a0b      	cmp	r2, #11
 8011260:	d917      	bls.n	8011292 <_malloc_r+0xc2>
 8011262:	1961      	adds	r1, r4, r5
 8011264:	42a3      	cmp	r3, r4
 8011266:	6025      	str	r5, [r4, #0]
 8011268:	bf18      	it	ne
 801126a:	6059      	strne	r1, [r3, #4]
 801126c:	6863      	ldr	r3, [r4, #4]
 801126e:	bf08      	it	eq
 8011270:	f8c8 1000 	streq.w	r1, [r8]
 8011274:	5162      	str	r2, [r4, r5]
 8011276:	604b      	str	r3, [r1, #4]
 8011278:	4630      	mov	r0, r6
 801127a:	f000 f82f 	bl	80112dc <__malloc_unlock>
 801127e:	f104 000b 	add.w	r0, r4, #11
 8011282:	1d23      	adds	r3, r4, #4
 8011284:	f020 0007 	bic.w	r0, r0, #7
 8011288:	1ac2      	subs	r2, r0, r3
 801128a:	bf1c      	itt	ne
 801128c:	1a1b      	subne	r3, r3, r0
 801128e:	50a3      	strne	r3, [r4, r2]
 8011290:	e7af      	b.n	80111f2 <_malloc_r+0x22>
 8011292:	6862      	ldr	r2, [r4, #4]
 8011294:	42a3      	cmp	r3, r4
 8011296:	bf0c      	ite	eq
 8011298:	f8c8 2000 	streq.w	r2, [r8]
 801129c:	605a      	strne	r2, [r3, #4]
 801129e:	e7eb      	b.n	8011278 <_malloc_r+0xa8>
 80112a0:	4623      	mov	r3, r4
 80112a2:	6864      	ldr	r4, [r4, #4]
 80112a4:	e7ae      	b.n	8011204 <_malloc_r+0x34>
 80112a6:	463c      	mov	r4, r7
 80112a8:	687f      	ldr	r7, [r7, #4]
 80112aa:	e7b6      	b.n	801121a <_malloc_r+0x4a>
 80112ac:	461a      	mov	r2, r3
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	42a3      	cmp	r3, r4
 80112b2:	d1fb      	bne.n	80112ac <_malloc_r+0xdc>
 80112b4:	2300      	movs	r3, #0
 80112b6:	6053      	str	r3, [r2, #4]
 80112b8:	e7de      	b.n	8011278 <_malloc_r+0xa8>
 80112ba:	230c      	movs	r3, #12
 80112bc:	6033      	str	r3, [r6, #0]
 80112be:	4630      	mov	r0, r6
 80112c0:	f000 f80c 	bl	80112dc <__malloc_unlock>
 80112c4:	e794      	b.n	80111f0 <_malloc_r+0x20>
 80112c6:	6005      	str	r5, [r0, #0]
 80112c8:	e7d6      	b.n	8011278 <_malloc_r+0xa8>
 80112ca:	bf00      	nop
 80112cc:	20005074 	.word	0x20005074

080112d0 <__malloc_lock>:
 80112d0:	4801      	ldr	r0, [pc, #4]	@ (80112d8 <__malloc_lock+0x8>)
 80112d2:	f7ff b8a0 	b.w	8010416 <__retarget_lock_acquire_recursive>
 80112d6:	bf00      	nop
 80112d8:	2000506c 	.word	0x2000506c

080112dc <__malloc_unlock>:
 80112dc:	4801      	ldr	r0, [pc, #4]	@ (80112e4 <__malloc_unlock+0x8>)
 80112de:	f7ff b89b 	b.w	8010418 <__retarget_lock_release_recursive>
 80112e2:	bf00      	nop
 80112e4:	2000506c 	.word	0x2000506c

080112e8 <_Balloc>:
 80112e8:	b570      	push	{r4, r5, r6, lr}
 80112ea:	69c6      	ldr	r6, [r0, #28]
 80112ec:	4604      	mov	r4, r0
 80112ee:	460d      	mov	r5, r1
 80112f0:	b976      	cbnz	r6, 8011310 <_Balloc+0x28>
 80112f2:	2010      	movs	r0, #16
 80112f4:	f7ff ff42 	bl	801117c <malloc>
 80112f8:	4602      	mov	r2, r0
 80112fa:	61e0      	str	r0, [r4, #28]
 80112fc:	b920      	cbnz	r0, 8011308 <_Balloc+0x20>
 80112fe:	4b18      	ldr	r3, [pc, #96]	@ (8011360 <_Balloc+0x78>)
 8011300:	4818      	ldr	r0, [pc, #96]	@ (8011364 <_Balloc+0x7c>)
 8011302:	216b      	movs	r1, #107	@ 0x6b
 8011304:	f000 ff5e 	bl	80121c4 <__assert_func>
 8011308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801130c:	6006      	str	r6, [r0, #0]
 801130e:	60c6      	str	r6, [r0, #12]
 8011310:	69e6      	ldr	r6, [r4, #28]
 8011312:	68f3      	ldr	r3, [r6, #12]
 8011314:	b183      	cbz	r3, 8011338 <_Balloc+0x50>
 8011316:	69e3      	ldr	r3, [r4, #28]
 8011318:	68db      	ldr	r3, [r3, #12]
 801131a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801131e:	b9b8      	cbnz	r0, 8011350 <_Balloc+0x68>
 8011320:	2101      	movs	r1, #1
 8011322:	fa01 f605 	lsl.w	r6, r1, r5
 8011326:	1d72      	adds	r2, r6, #5
 8011328:	0092      	lsls	r2, r2, #2
 801132a:	4620      	mov	r0, r4
 801132c:	f000 ff68 	bl	8012200 <_calloc_r>
 8011330:	b160      	cbz	r0, 801134c <_Balloc+0x64>
 8011332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011336:	e00e      	b.n	8011356 <_Balloc+0x6e>
 8011338:	2221      	movs	r2, #33	@ 0x21
 801133a:	2104      	movs	r1, #4
 801133c:	4620      	mov	r0, r4
 801133e:	f000 ff5f 	bl	8012200 <_calloc_r>
 8011342:	69e3      	ldr	r3, [r4, #28]
 8011344:	60f0      	str	r0, [r6, #12]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d1e4      	bne.n	8011316 <_Balloc+0x2e>
 801134c:	2000      	movs	r0, #0
 801134e:	bd70      	pop	{r4, r5, r6, pc}
 8011350:	6802      	ldr	r2, [r0, #0]
 8011352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011356:	2300      	movs	r3, #0
 8011358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801135c:	e7f7      	b.n	801134e <_Balloc+0x66>
 801135e:	bf00      	nop
 8011360:	08012885 	.word	0x08012885
 8011364:	08012905 	.word	0x08012905

08011368 <_Bfree>:
 8011368:	b570      	push	{r4, r5, r6, lr}
 801136a:	69c6      	ldr	r6, [r0, #28]
 801136c:	4605      	mov	r5, r0
 801136e:	460c      	mov	r4, r1
 8011370:	b976      	cbnz	r6, 8011390 <_Bfree+0x28>
 8011372:	2010      	movs	r0, #16
 8011374:	f7ff ff02 	bl	801117c <malloc>
 8011378:	4602      	mov	r2, r0
 801137a:	61e8      	str	r0, [r5, #28]
 801137c:	b920      	cbnz	r0, 8011388 <_Bfree+0x20>
 801137e:	4b09      	ldr	r3, [pc, #36]	@ (80113a4 <_Bfree+0x3c>)
 8011380:	4809      	ldr	r0, [pc, #36]	@ (80113a8 <_Bfree+0x40>)
 8011382:	218f      	movs	r1, #143	@ 0x8f
 8011384:	f000 ff1e 	bl	80121c4 <__assert_func>
 8011388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801138c:	6006      	str	r6, [r0, #0]
 801138e:	60c6      	str	r6, [r0, #12]
 8011390:	b13c      	cbz	r4, 80113a2 <_Bfree+0x3a>
 8011392:	69eb      	ldr	r3, [r5, #28]
 8011394:	6862      	ldr	r2, [r4, #4]
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801139c:	6021      	str	r1, [r4, #0]
 801139e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80113a2:	bd70      	pop	{r4, r5, r6, pc}
 80113a4:	08012885 	.word	0x08012885
 80113a8:	08012905 	.word	0x08012905

080113ac <__multadd>:
 80113ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113b0:	690d      	ldr	r5, [r1, #16]
 80113b2:	4607      	mov	r7, r0
 80113b4:	460c      	mov	r4, r1
 80113b6:	461e      	mov	r6, r3
 80113b8:	f101 0c14 	add.w	ip, r1, #20
 80113bc:	2000      	movs	r0, #0
 80113be:	f8dc 3000 	ldr.w	r3, [ip]
 80113c2:	b299      	uxth	r1, r3
 80113c4:	fb02 6101 	mla	r1, r2, r1, r6
 80113c8:	0c1e      	lsrs	r6, r3, #16
 80113ca:	0c0b      	lsrs	r3, r1, #16
 80113cc:	fb02 3306 	mla	r3, r2, r6, r3
 80113d0:	b289      	uxth	r1, r1
 80113d2:	3001      	adds	r0, #1
 80113d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80113d8:	4285      	cmp	r5, r0
 80113da:	f84c 1b04 	str.w	r1, [ip], #4
 80113de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80113e2:	dcec      	bgt.n	80113be <__multadd+0x12>
 80113e4:	b30e      	cbz	r6, 801142a <__multadd+0x7e>
 80113e6:	68a3      	ldr	r3, [r4, #8]
 80113e8:	42ab      	cmp	r3, r5
 80113ea:	dc19      	bgt.n	8011420 <__multadd+0x74>
 80113ec:	6861      	ldr	r1, [r4, #4]
 80113ee:	4638      	mov	r0, r7
 80113f0:	3101      	adds	r1, #1
 80113f2:	f7ff ff79 	bl	80112e8 <_Balloc>
 80113f6:	4680      	mov	r8, r0
 80113f8:	b928      	cbnz	r0, 8011406 <__multadd+0x5a>
 80113fa:	4602      	mov	r2, r0
 80113fc:	4b0c      	ldr	r3, [pc, #48]	@ (8011430 <__multadd+0x84>)
 80113fe:	480d      	ldr	r0, [pc, #52]	@ (8011434 <__multadd+0x88>)
 8011400:	21ba      	movs	r1, #186	@ 0xba
 8011402:	f000 fedf 	bl	80121c4 <__assert_func>
 8011406:	6922      	ldr	r2, [r4, #16]
 8011408:	3202      	adds	r2, #2
 801140a:	f104 010c 	add.w	r1, r4, #12
 801140e:	0092      	lsls	r2, r2, #2
 8011410:	300c      	adds	r0, #12
 8011412:	f7ff f802 	bl	801041a <memcpy>
 8011416:	4621      	mov	r1, r4
 8011418:	4638      	mov	r0, r7
 801141a:	f7ff ffa5 	bl	8011368 <_Bfree>
 801141e:	4644      	mov	r4, r8
 8011420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011424:	3501      	adds	r5, #1
 8011426:	615e      	str	r6, [r3, #20]
 8011428:	6125      	str	r5, [r4, #16]
 801142a:	4620      	mov	r0, r4
 801142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011430:	080128f4 	.word	0x080128f4
 8011434:	08012905 	.word	0x08012905

08011438 <__hi0bits>:
 8011438:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801143c:	4603      	mov	r3, r0
 801143e:	bf36      	itet	cc
 8011440:	0403      	lslcc	r3, r0, #16
 8011442:	2000      	movcs	r0, #0
 8011444:	2010      	movcc	r0, #16
 8011446:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801144a:	bf3c      	itt	cc
 801144c:	021b      	lslcc	r3, r3, #8
 801144e:	3008      	addcc	r0, #8
 8011450:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011454:	bf3c      	itt	cc
 8011456:	011b      	lslcc	r3, r3, #4
 8011458:	3004      	addcc	r0, #4
 801145a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801145e:	bf3c      	itt	cc
 8011460:	009b      	lslcc	r3, r3, #2
 8011462:	3002      	addcc	r0, #2
 8011464:	2b00      	cmp	r3, #0
 8011466:	db05      	blt.n	8011474 <__hi0bits+0x3c>
 8011468:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801146c:	f100 0001 	add.w	r0, r0, #1
 8011470:	bf08      	it	eq
 8011472:	2020      	moveq	r0, #32
 8011474:	4770      	bx	lr

08011476 <__lo0bits>:
 8011476:	6803      	ldr	r3, [r0, #0]
 8011478:	4602      	mov	r2, r0
 801147a:	f013 0007 	ands.w	r0, r3, #7
 801147e:	d00b      	beq.n	8011498 <__lo0bits+0x22>
 8011480:	07d9      	lsls	r1, r3, #31
 8011482:	d421      	bmi.n	80114c8 <__lo0bits+0x52>
 8011484:	0798      	lsls	r0, r3, #30
 8011486:	bf49      	itett	mi
 8011488:	085b      	lsrmi	r3, r3, #1
 801148a:	089b      	lsrpl	r3, r3, #2
 801148c:	2001      	movmi	r0, #1
 801148e:	6013      	strmi	r3, [r2, #0]
 8011490:	bf5c      	itt	pl
 8011492:	6013      	strpl	r3, [r2, #0]
 8011494:	2002      	movpl	r0, #2
 8011496:	4770      	bx	lr
 8011498:	b299      	uxth	r1, r3
 801149a:	b909      	cbnz	r1, 80114a0 <__lo0bits+0x2a>
 801149c:	0c1b      	lsrs	r3, r3, #16
 801149e:	2010      	movs	r0, #16
 80114a0:	b2d9      	uxtb	r1, r3
 80114a2:	b909      	cbnz	r1, 80114a8 <__lo0bits+0x32>
 80114a4:	3008      	adds	r0, #8
 80114a6:	0a1b      	lsrs	r3, r3, #8
 80114a8:	0719      	lsls	r1, r3, #28
 80114aa:	bf04      	itt	eq
 80114ac:	091b      	lsreq	r3, r3, #4
 80114ae:	3004      	addeq	r0, #4
 80114b0:	0799      	lsls	r1, r3, #30
 80114b2:	bf04      	itt	eq
 80114b4:	089b      	lsreq	r3, r3, #2
 80114b6:	3002      	addeq	r0, #2
 80114b8:	07d9      	lsls	r1, r3, #31
 80114ba:	d403      	bmi.n	80114c4 <__lo0bits+0x4e>
 80114bc:	085b      	lsrs	r3, r3, #1
 80114be:	f100 0001 	add.w	r0, r0, #1
 80114c2:	d003      	beq.n	80114cc <__lo0bits+0x56>
 80114c4:	6013      	str	r3, [r2, #0]
 80114c6:	4770      	bx	lr
 80114c8:	2000      	movs	r0, #0
 80114ca:	4770      	bx	lr
 80114cc:	2020      	movs	r0, #32
 80114ce:	4770      	bx	lr

080114d0 <__i2b>:
 80114d0:	b510      	push	{r4, lr}
 80114d2:	460c      	mov	r4, r1
 80114d4:	2101      	movs	r1, #1
 80114d6:	f7ff ff07 	bl	80112e8 <_Balloc>
 80114da:	4602      	mov	r2, r0
 80114dc:	b928      	cbnz	r0, 80114ea <__i2b+0x1a>
 80114de:	4b05      	ldr	r3, [pc, #20]	@ (80114f4 <__i2b+0x24>)
 80114e0:	4805      	ldr	r0, [pc, #20]	@ (80114f8 <__i2b+0x28>)
 80114e2:	f240 1145 	movw	r1, #325	@ 0x145
 80114e6:	f000 fe6d 	bl	80121c4 <__assert_func>
 80114ea:	2301      	movs	r3, #1
 80114ec:	6144      	str	r4, [r0, #20]
 80114ee:	6103      	str	r3, [r0, #16]
 80114f0:	bd10      	pop	{r4, pc}
 80114f2:	bf00      	nop
 80114f4:	080128f4 	.word	0x080128f4
 80114f8:	08012905 	.word	0x08012905

080114fc <__multiply>:
 80114fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011500:	4617      	mov	r7, r2
 8011502:	690a      	ldr	r2, [r1, #16]
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	429a      	cmp	r2, r3
 8011508:	bfa8      	it	ge
 801150a:	463b      	movge	r3, r7
 801150c:	4689      	mov	r9, r1
 801150e:	bfa4      	itt	ge
 8011510:	460f      	movge	r7, r1
 8011512:	4699      	movge	r9, r3
 8011514:	693d      	ldr	r5, [r7, #16]
 8011516:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	6879      	ldr	r1, [r7, #4]
 801151e:	eb05 060a 	add.w	r6, r5, sl
 8011522:	42b3      	cmp	r3, r6
 8011524:	b085      	sub	sp, #20
 8011526:	bfb8      	it	lt
 8011528:	3101      	addlt	r1, #1
 801152a:	f7ff fedd 	bl	80112e8 <_Balloc>
 801152e:	b930      	cbnz	r0, 801153e <__multiply+0x42>
 8011530:	4602      	mov	r2, r0
 8011532:	4b41      	ldr	r3, [pc, #260]	@ (8011638 <__multiply+0x13c>)
 8011534:	4841      	ldr	r0, [pc, #260]	@ (801163c <__multiply+0x140>)
 8011536:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801153a:	f000 fe43 	bl	80121c4 <__assert_func>
 801153e:	f100 0414 	add.w	r4, r0, #20
 8011542:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011546:	4623      	mov	r3, r4
 8011548:	2200      	movs	r2, #0
 801154a:	4573      	cmp	r3, lr
 801154c:	d320      	bcc.n	8011590 <__multiply+0x94>
 801154e:	f107 0814 	add.w	r8, r7, #20
 8011552:	f109 0114 	add.w	r1, r9, #20
 8011556:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801155a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801155e:	9302      	str	r3, [sp, #8]
 8011560:	1beb      	subs	r3, r5, r7
 8011562:	3b15      	subs	r3, #21
 8011564:	f023 0303 	bic.w	r3, r3, #3
 8011568:	3304      	adds	r3, #4
 801156a:	3715      	adds	r7, #21
 801156c:	42bd      	cmp	r5, r7
 801156e:	bf38      	it	cc
 8011570:	2304      	movcc	r3, #4
 8011572:	9301      	str	r3, [sp, #4]
 8011574:	9b02      	ldr	r3, [sp, #8]
 8011576:	9103      	str	r1, [sp, #12]
 8011578:	428b      	cmp	r3, r1
 801157a:	d80c      	bhi.n	8011596 <__multiply+0x9a>
 801157c:	2e00      	cmp	r6, #0
 801157e:	dd03      	ble.n	8011588 <__multiply+0x8c>
 8011580:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011584:	2b00      	cmp	r3, #0
 8011586:	d055      	beq.n	8011634 <__multiply+0x138>
 8011588:	6106      	str	r6, [r0, #16]
 801158a:	b005      	add	sp, #20
 801158c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011590:	f843 2b04 	str.w	r2, [r3], #4
 8011594:	e7d9      	b.n	801154a <__multiply+0x4e>
 8011596:	f8b1 a000 	ldrh.w	sl, [r1]
 801159a:	f1ba 0f00 	cmp.w	sl, #0
 801159e:	d01f      	beq.n	80115e0 <__multiply+0xe4>
 80115a0:	46c4      	mov	ip, r8
 80115a2:	46a1      	mov	r9, r4
 80115a4:	2700      	movs	r7, #0
 80115a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80115aa:	f8d9 3000 	ldr.w	r3, [r9]
 80115ae:	fa1f fb82 	uxth.w	fp, r2
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80115b8:	443b      	add	r3, r7
 80115ba:	f8d9 7000 	ldr.w	r7, [r9]
 80115be:	0c12      	lsrs	r2, r2, #16
 80115c0:	0c3f      	lsrs	r7, r7, #16
 80115c2:	fb0a 7202 	mla	r2, sl, r2, r7
 80115c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115d0:	4565      	cmp	r5, ip
 80115d2:	f849 3b04 	str.w	r3, [r9], #4
 80115d6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80115da:	d8e4      	bhi.n	80115a6 <__multiply+0xaa>
 80115dc:	9b01      	ldr	r3, [sp, #4]
 80115de:	50e7      	str	r7, [r4, r3]
 80115e0:	9b03      	ldr	r3, [sp, #12]
 80115e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80115e6:	3104      	adds	r1, #4
 80115e8:	f1b9 0f00 	cmp.w	r9, #0
 80115ec:	d020      	beq.n	8011630 <__multiply+0x134>
 80115ee:	6823      	ldr	r3, [r4, #0]
 80115f0:	4647      	mov	r7, r8
 80115f2:	46a4      	mov	ip, r4
 80115f4:	f04f 0a00 	mov.w	sl, #0
 80115f8:	f8b7 b000 	ldrh.w	fp, [r7]
 80115fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011600:	fb09 220b 	mla	r2, r9, fp, r2
 8011604:	4452      	add	r2, sl
 8011606:	b29b      	uxth	r3, r3
 8011608:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801160c:	f84c 3b04 	str.w	r3, [ip], #4
 8011610:	f857 3b04 	ldr.w	r3, [r7], #4
 8011614:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011618:	f8bc 3000 	ldrh.w	r3, [ip]
 801161c:	fb09 330a 	mla	r3, r9, sl, r3
 8011620:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011624:	42bd      	cmp	r5, r7
 8011626:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801162a:	d8e5      	bhi.n	80115f8 <__multiply+0xfc>
 801162c:	9a01      	ldr	r2, [sp, #4]
 801162e:	50a3      	str	r3, [r4, r2]
 8011630:	3404      	adds	r4, #4
 8011632:	e79f      	b.n	8011574 <__multiply+0x78>
 8011634:	3e01      	subs	r6, #1
 8011636:	e7a1      	b.n	801157c <__multiply+0x80>
 8011638:	080128f4 	.word	0x080128f4
 801163c:	08012905 	.word	0x08012905

08011640 <__pow5mult>:
 8011640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011644:	4615      	mov	r5, r2
 8011646:	f012 0203 	ands.w	r2, r2, #3
 801164a:	4607      	mov	r7, r0
 801164c:	460e      	mov	r6, r1
 801164e:	d007      	beq.n	8011660 <__pow5mult+0x20>
 8011650:	4c25      	ldr	r4, [pc, #148]	@ (80116e8 <__pow5mult+0xa8>)
 8011652:	3a01      	subs	r2, #1
 8011654:	2300      	movs	r3, #0
 8011656:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801165a:	f7ff fea7 	bl	80113ac <__multadd>
 801165e:	4606      	mov	r6, r0
 8011660:	10ad      	asrs	r5, r5, #2
 8011662:	d03d      	beq.n	80116e0 <__pow5mult+0xa0>
 8011664:	69fc      	ldr	r4, [r7, #28]
 8011666:	b97c      	cbnz	r4, 8011688 <__pow5mult+0x48>
 8011668:	2010      	movs	r0, #16
 801166a:	f7ff fd87 	bl	801117c <malloc>
 801166e:	4602      	mov	r2, r0
 8011670:	61f8      	str	r0, [r7, #28]
 8011672:	b928      	cbnz	r0, 8011680 <__pow5mult+0x40>
 8011674:	4b1d      	ldr	r3, [pc, #116]	@ (80116ec <__pow5mult+0xac>)
 8011676:	481e      	ldr	r0, [pc, #120]	@ (80116f0 <__pow5mult+0xb0>)
 8011678:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801167c:	f000 fda2 	bl	80121c4 <__assert_func>
 8011680:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011684:	6004      	str	r4, [r0, #0]
 8011686:	60c4      	str	r4, [r0, #12]
 8011688:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801168c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011690:	b94c      	cbnz	r4, 80116a6 <__pow5mult+0x66>
 8011692:	f240 2171 	movw	r1, #625	@ 0x271
 8011696:	4638      	mov	r0, r7
 8011698:	f7ff ff1a 	bl	80114d0 <__i2b>
 801169c:	2300      	movs	r3, #0
 801169e:	f8c8 0008 	str.w	r0, [r8, #8]
 80116a2:	4604      	mov	r4, r0
 80116a4:	6003      	str	r3, [r0, #0]
 80116a6:	f04f 0900 	mov.w	r9, #0
 80116aa:	07eb      	lsls	r3, r5, #31
 80116ac:	d50a      	bpl.n	80116c4 <__pow5mult+0x84>
 80116ae:	4631      	mov	r1, r6
 80116b0:	4622      	mov	r2, r4
 80116b2:	4638      	mov	r0, r7
 80116b4:	f7ff ff22 	bl	80114fc <__multiply>
 80116b8:	4631      	mov	r1, r6
 80116ba:	4680      	mov	r8, r0
 80116bc:	4638      	mov	r0, r7
 80116be:	f7ff fe53 	bl	8011368 <_Bfree>
 80116c2:	4646      	mov	r6, r8
 80116c4:	106d      	asrs	r5, r5, #1
 80116c6:	d00b      	beq.n	80116e0 <__pow5mult+0xa0>
 80116c8:	6820      	ldr	r0, [r4, #0]
 80116ca:	b938      	cbnz	r0, 80116dc <__pow5mult+0x9c>
 80116cc:	4622      	mov	r2, r4
 80116ce:	4621      	mov	r1, r4
 80116d0:	4638      	mov	r0, r7
 80116d2:	f7ff ff13 	bl	80114fc <__multiply>
 80116d6:	6020      	str	r0, [r4, #0]
 80116d8:	f8c0 9000 	str.w	r9, [r0]
 80116dc:	4604      	mov	r4, r0
 80116de:	e7e4      	b.n	80116aa <__pow5mult+0x6a>
 80116e0:	4630      	mov	r0, r6
 80116e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116e6:	bf00      	nop
 80116e8:	080129b8 	.word	0x080129b8
 80116ec:	08012885 	.word	0x08012885
 80116f0:	08012905 	.word	0x08012905

080116f4 <__lshift>:
 80116f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116f8:	460c      	mov	r4, r1
 80116fa:	6849      	ldr	r1, [r1, #4]
 80116fc:	6923      	ldr	r3, [r4, #16]
 80116fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011702:	68a3      	ldr	r3, [r4, #8]
 8011704:	4607      	mov	r7, r0
 8011706:	4691      	mov	r9, r2
 8011708:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801170c:	f108 0601 	add.w	r6, r8, #1
 8011710:	42b3      	cmp	r3, r6
 8011712:	db0b      	blt.n	801172c <__lshift+0x38>
 8011714:	4638      	mov	r0, r7
 8011716:	f7ff fde7 	bl	80112e8 <_Balloc>
 801171a:	4605      	mov	r5, r0
 801171c:	b948      	cbnz	r0, 8011732 <__lshift+0x3e>
 801171e:	4602      	mov	r2, r0
 8011720:	4b28      	ldr	r3, [pc, #160]	@ (80117c4 <__lshift+0xd0>)
 8011722:	4829      	ldr	r0, [pc, #164]	@ (80117c8 <__lshift+0xd4>)
 8011724:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011728:	f000 fd4c 	bl	80121c4 <__assert_func>
 801172c:	3101      	adds	r1, #1
 801172e:	005b      	lsls	r3, r3, #1
 8011730:	e7ee      	b.n	8011710 <__lshift+0x1c>
 8011732:	2300      	movs	r3, #0
 8011734:	f100 0114 	add.w	r1, r0, #20
 8011738:	f100 0210 	add.w	r2, r0, #16
 801173c:	4618      	mov	r0, r3
 801173e:	4553      	cmp	r3, sl
 8011740:	db33      	blt.n	80117aa <__lshift+0xb6>
 8011742:	6920      	ldr	r0, [r4, #16]
 8011744:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011748:	f104 0314 	add.w	r3, r4, #20
 801174c:	f019 091f 	ands.w	r9, r9, #31
 8011750:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011754:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011758:	d02b      	beq.n	80117b2 <__lshift+0xbe>
 801175a:	f1c9 0e20 	rsb	lr, r9, #32
 801175e:	468a      	mov	sl, r1
 8011760:	2200      	movs	r2, #0
 8011762:	6818      	ldr	r0, [r3, #0]
 8011764:	fa00 f009 	lsl.w	r0, r0, r9
 8011768:	4310      	orrs	r0, r2
 801176a:	f84a 0b04 	str.w	r0, [sl], #4
 801176e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011772:	459c      	cmp	ip, r3
 8011774:	fa22 f20e 	lsr.w	r2, r2, lr
 8011778:	d8f3      	bhi.n	8011762 <__lshift+0x6e>
 801177a:	ebac 0304 	sub.w	r3, ip, r4
 801177e:	3b15      	subs	r3, #21
 8011780:	f023 0303 	bic.w	r3, r3, #3
 8011784:	3304      	adds	r3, #4
 8011786:	f104 0015 	add.w	r0, r4, #21
 801178a:	4560      	cmp	r0, ip
 801178c:	bf88      	it	hi
 801178e:	2304      	movhi	r3, #4
 8011790:	50ca      	str	r2, [r1, r3]
 8011792:	b10a      	cbz	r2, 8011798 <__lshift+0xa4>
 8011794:	f108 0602 	add.w	r6, r8, #2
 8011798:	3e01      	subs	r6, #1
 801179a:	4638      	mov	r0, r7
 801179c:	612e      	str	r6, [r5, #16]
 801179e:	4621      	mov	r1, r4
 80117a0:	f7ff fde2 	bl	8011368 <_Bfree>
 80117a4:	4628      	mov	r0, r5
 80117a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80117ae:	3301      	adds	r3, #1
 80117b0:	e7c5      	b.n	801173e <__lshift+0x4a>
 80117b2:	3904      	subs	r1, #4
 80117b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80117b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80117bc:	459c      	cmp	ip, r3
 80117be:	d8f9      	bhi.n	80117b4 <__lshift+0xc0>
 80117c0:	e7ea      	b.n	8011798 <__lshift+0xa4>
 80117c2:	bf00      	nop
 80117c4:	080128f4 	.word	0x080128f4
 80117c8:	08012905 	.word	0x08012905

080117cc <__mcmp>:
 80117cc:	690a      	ldr	r2, [r1, #16]
 80117ce:	4603      	mov	r3, r0
 80117d0:	6900      	ldr	r0, [r0, #16]
 80117d2:	1a80      	subs	r0, r0, r2
 80117d4:	b530      	push	{r4, r5, lr}
 80117d6:	d10e      	bne.n	80117f6 <__mcmp+0x2a>
 80117d8:	3314      	adds	r3, #20
 80117da:	3114      	adds	r1, #20
 80117dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80117e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80117e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80117e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80117ec:	4295      	cmp	r5, r2
 80117ee:	d003      	beq.n	80117f8 <__mcmp+0x2c>
 80117f0:	d205      	bcs.n	80117fe <__mcmp+0x32>
 80117f2:	f04f 30ff 	mov.w	r0, #4294967295
 80117f6:	bd30      	pop	{r4, r5, pc}
 80117f8:	42a3      	cmp	r3, r4
 80117fa:	d3f3      	bcc.n	80117e4 <__mcmp+0x18>
 80117fc:	e7fb      	b.n	80117f6 <__mcmp+0x2a>
 80117fe:	2001      	movs	r0, #1
 8011800:	e7f9      	b.n	80117f6 <__mcmp+0x2a>
	...

08011804 <__mdiff>:
 8011804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011808:	4689      	mov	r9, r1
 801180a:	4606      	mov	r6, r0
 801180c:	4611      	mov	r1, r2
 801180e:	4648      	mov	r0, r9
 8011810:	4614      	mov	r4, r2
 8011812:	f7ff ffdb 	bl	80117cc <__mcmp>
 8011816:	1e05      	subs	r5, r0, #0
 8011818:	d112      	bne.n	8011840 <__mdiff+0x3c>
 801181a:	4629      	mov	r1, r5
 801181c:	4630      	mov	r0, r6
 801181e:	f7ff fd63 	bl	80112e8 <_Balloc>
 8011822:	4602      	mov	r2, r0
 8011824:	b928      	cbnz	r0, 8011832 <__mdiff+0x2e>
 8011826:	4b3f      	ldr	r3, [pc, #252]	@ (8011924 <__mdiff+0x120>)
 8011828:	f240 2137 	movw	r1, #567	@ 0x237
 801182c:	483e      	ldr	r0, [pc, #248]	@ (8011928 <__mdiff+0x124>)
 801182e:	f000 fcc9 	bl	80121c4 <__assert_func>
 8011832:	2301      	movs	r3, #1
 8011834:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011838:	4610      	mov	r0, r2
 801183a:	b003      	add	sp, #12
 801183c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011840:	bfbc      	itt	lt
 8011842:	464b      	movlt	r3, r9
 8011844:	46a1      	movlt	r9, r4
 8011846:	4630      	mov	r0, r6
 8011848:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801184c:	bfba      	itte	lt
 801184e:	461c      	movlt	r4, r3
 8011850:	2501      	movlt	r5, #1
 8011852:	2500      	movge	r5, #0
 8011854:	f7ff fd48 	bl	80112e8 <_Balloc>
 8011858:	4602      	mov	r2, r0
 801185a:	b918      	cbnz	r0, 8011864 <__mdiff+0x60>
 801185c:	4b31      	ldr	r3, [pc, #196]	@ (8011924 <__mdiff+0x120>)
 801185e:	f240 2145 	movw	r1, #581	@ 0x245
 8011862:	e7e3      	b.n	801182c <__mdiff+0x28>
 8011864:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011868:	6926      	ldr	r6, [r4, #16]
 801186a:	60c5      	str	r5, [r0, #12]
 801186c:	f109 0310 	add.w	r3, r9, #16
 8011870:	f109 0514 	add.w	r5, r9, #20
 8011874:	f104 0e14 	add.w	lr, r4, #20
 8011878:	f100 0b14 	add.w	fp, r0, #20
 801187c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011880:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011884:	9301      	str	r3, [sp, #4]
 8011886:	46d9      	mov	r9, fp
 8011888:	f04f 0c00 	mov.w	ip, #0
 801188c:	9b01      	ldr	r3, [sp, #4]
 801188e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011892:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011896:	9301      	str	r3, [sp, #4]
 8011898:	fa1f f38a 	uxth.w	r3, sl
 801189c:	4619      	mov	r1, r3
 801189e:	b283      	uxth	r3, r0
 80118a0:	1acb      	subs	r3, r1, r3
 80118a2:	0c00      	lsrs	r0, r0, #16
 80118a4:	4463      	add	r3, ip
 80118a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80118aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80118b4:	4576      	cmp	r6, lr
 80118b6:	f849 3b04 	str.w	r3, [r9], #4
 80118ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80118be:	d8e5      	bhi.n	801188c <__mdiff+0x88>
 80118c0:	1b33      	subs	r3, r6, r4
 80118c2:	3b15      	subs	r3, #21
 80118c4:	f023 0303 	bic.w	r3, r3, #3
 80118c8:	3415      	adds	r4, #21
 80118ca:	3304      	adds	r3, #4
 80118cc:	42a6      	cmp	r6, r4
 80118ce:	bf38      	it	cc
 80118d0:	2304      	movcc	r3, #4
 80118d2:	441d      	add	r5, r3
 80118d4:	445b      	add	r3, fp
 80118d6:	461e      	mov	r6, r3
 80118d8:	462c      	mov	r4, r5
 80118da:	4544      	cmp	r4, r8
 80118dc:	d30e      	bcc.n	80118fc <__mdiff+0xf8>
 80118de:	f108 0103 	add.w	r1, r8, #3
 80118e2:	1b49      	subs	r1, r1, r5
 80118e4:	f021 0103 	bic.w	r1, r1, #3
 80118e8:	3d03      	subs	r5, #3
 80118ea:	45a8      	cmp	r8, r5
 80118ec:	bf38      	it	cc
 80118ee:	2100      	movcc	r1, #0
 80118f0:	440b      	add	r3, r1
 80118f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80118f6:	b191      	cbz	r1, 801191e <__mdiff+0x11a>
 80118f8:	6117      	str	r7, [r2, #16]
 80118fa:	e79d      	b.n	8011838 <__mdiff+0x34>
 80118fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8011900:	46e6      	mov	lr, ip
 8011902:	0c08      	lsrs	r0, r1, #16
 8011904:	fa1c fc81 	uxtah	ip, ip, r1
 8011908:	4471      	add	r1, lr
 801190a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801190e:	b289      	uxth	r1, r1
 8011910:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011914:	f846 1b04 	str.w	r1, [r6], #4
 8011918:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801191c:	e7dd      	b.n	80118da <__mdiff+0xd6>
 801191e:	3f01      	subs	r7, #1
 8011920:	e7e7      	b.n	80118f2 <__mdiff+0xee>
 8011922:	bf00      	nop
 8011924:	080128f4 	.word	0x080128f4
 8011928:	08012905 	.word	0x08012905

0801192c <__d2b>:
 801192c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011930:	460f      	mov	r7, r1
 8011932:	2101      	movs	r1, #1
 8011934:	ec59 8b10 	vmov	r8, r9, d0
 8011938:	4616      	mov	r6, r2
 801193a:	f7ff fcd5 	bl	80112e8 <_Balloc>
 801193e:	4604      	mov	r4, r0
 8011940:	b930      	cbnz	r0, 8011950 <__d2b+0x24>
 8011942:	4602      	mov	r2, r0
 8011944:	4b23      	ldr	r3, [pc, #140]	@ (80119d4 <__d2b+0xa8>)
 8011946:	4824      	ldr	r0, [pc, #144]	@ (80119d8 <__d2b+0xac>)
 8011948:	f240 310f 	movw	r1, #783	@ 0x30f
 801194c:	f000 fc3a 	bl	80121c4 <__assert_func>
 8011950:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011954:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011958:	b10d      	cbz	r5, 801195e <__d2b+0x32>
 801195a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801195e:	9301      	str	r3, [sp, #4]
 8011960:	f1b8 0300 	subs.w	r3, r8, #0
 8011964:	d023      	beq.n	80119ae <__d2b+0x82>
 8011966:	4668      	mov	r0, sp
 8011968:	9300      	str	r3, [sp, #0]
 801196a:	f7ff fd84 	bl	8011476 <__lo0bits>
 801196e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011972:	b1d0      	cbz	r0, 80119aa <__d2b+0x7e>
 8011974:	f1c0 0320 	rsb	r3, r0, #32
 8011978:	fa02 f303 	lsl.w	r3, r2, r3
 801197c:	430b      	orrs	r3, r1
 801197e:	40c2      	lsrs	r2, r0
 8011980:	6163      	str	r3, [r4, #20]
 8011982:	9201      	str	r2, [sp, #4]
 8011984:	9b01      	ldr	r3, [sp, #4]
 8011986:	61a3      	str	r3, [r4, #24]
 8011988:	2b00      	cmp	r3, #0
 801198a:	bf0c      	ite	eq
 801198c:	2201      	moveq	r2, #1
 801198e:	2202      	movne	r2, #2
 8011990:	6122      	str	r2, [r4, #16]
 8011992:	b1a5      	cbz	r5, 80119be <__d2b+0x92>
 8011994:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011998:	4405      	add	r5, r0
 801199a:	603d      	str	r5, [r7, #0]
 801199c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80119a0:	6030      	str	r0, [r6, #0]
 80119a2:	4620      	mov	r0, r4
 80119a4:	b003      	add	sp, #12
 80119a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119aa:	6161      	str	r1, [r4, #20]
 80119ac:	e7ea      	b.n	8011984 <__d2b+0x58>
 80119ae:	a801      	add	r0, sp, #4
 80119b0:	f7ff fd61 	bl	8011476 <__lo0bits>
 80119b4:	9b01      	ldr	r3, [sp, #4]
 80119b6:	6163      	str	r3, [r4, #20]
 80119b8:	3020      	adds	r0, #32
 80119ba:	2201      	movs	r2, #1
 80119bc:	e7e8      	b.n	8011990 <__d2b+0x64>
 80119be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80119c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80119c6:	6038      	str	r0, [r7, #0]
 80119c8:	6918      	ldr	r0, [r3, #16]
 80119ca:	f7ff fd35 	bl	8011438 <__hi0bits>
 80119ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80119d2:	e7e5      	b.n	80119a0 <__d2b+0x74>
 80119d4:	080128f4 	.word	0x080128f4
 80119d8:	08012905 	.word	0x08012905

080119dc <__ssputs_r>:
 80119dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119e0:	688e      	ldr	r6, [r1, #8]
 80119e2:	461f      	mov	r7, r3
 80119e4:	42be      	cmp	r6, r7
 80119e6:	680b      	ldr	r3, [r1, #0]
 80119e8:	4682      	mov	sl, r0
 80119ea:	460c      	mov	r4, r1
 80119ec:	4690      	mov	r8, r2
 80119ee:	d82d      	bhi.n	8011a4c <__ssputs_r+0x70>
 80119f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80119f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80119f8:	d026      	beq.n	8011a48 <__ssputs_r+0x6c>
 80119fa:	6965      	ldr	r5, [r4, #20]
 80119fc:	6909      	ldr	r1, [r1, #16]
 80119fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a02:	eba3 0901 	sub.w	r9, r3, r1
 8011a06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a0a:	1c7b      	adds	r3, r7, #1
 8011a0c:	444b      	add	r3, r9
 8011a0e:	106d      	asrs	r5, r5, #1
 8011a10:	429d      	cmp	r5, r3
 8011a12:	bf38      	it	cc
 8011a14:	461d      	movcc	r5, r3
 8011a16:	0553      	lsls	r3, r2, #21
 8011a18:	d527      	bpl.n	8011a6a <__ssputs_r+0x8e>
 8011a1a:	4629      	mov	r1, r5
 8011a1c:	f7ff fbd8 	bl	80111d0 <_malloc_r>
 8011a20:	4606      	mov	r6, r0
 8011a22:	b360      	cbz	r0, 8011a7e <__ssputs_r+0xa2>
 8011a24:	6921      	ldr	r1, [r4, #16]
 8011a26:	464a      	mov	r2, r9
 8011a28:	f7fe fcf7 	bl	801041a <memcpy>
 8011a2c:	89a3      	ldrh	r3, [r4, #12]
 8011a2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a36:	81a3      	strh	r3, [r4, #12]
 8011a38:	6126      	str	r6, [r4, #16]
 8011a3a:	6165      	str	r5, [r4, #20]
 8011a3c:	444e      	add	r6, r9
 8011a3e:	eba5 0509 	sub.w	r5, r5, r9
 8011a42:	6026      	str	r6, [r4, #0]
 8011a44:	60a5      	str	r5, [r4, #8]
 8011a46:	463e      	mov	r6, r7
 8011a48:	42be      	cmp	r6, r7
 8011a4a:	d900      	bls.n	8011a4e <__ssputs_r+0x72>
 8011a4c:	463e      	mov	r6, r7
 8011a4e:	6820      	ldr	r0, [r4, #0]
 8011a50:	4632      	mov	r2, r6
 8011a52:	4641      	mov	r1, r8
 8011a54:	f000 fb6a 	bl	801212c <memmove>
 8011a58:	68a3      	ldr	r3, [r4, #8]
 8011a5a:	1b9b      	subs	r3, r3, r6
 8011a5c:	60a3      	str	r3, [r4, #8]
 8011a5e:	6823      	ldr	r3, [r4, #0]
 8011a60:	4433      	add	r3, r6
 8011a62:	6023      	str	r3, [r4, #0]
 8011a64:	2000      	movs	r0, #0
 8011a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a6a:	462a      	mov	r2, r5
 8011a6c:	f000 fbee 	bl	801224c <_realloc_r>
 8011a70:	4606      	mov	r6, r0
 8011a72:	2800      	cmp	r0, #0
 8011a74:	d1e0      	bne.n	8011a38 <__ssputs_r+0x5c>
 8011a76:	6921      	ldr	r1, [r4, #16]
 8011a78:	4650      	mov	r0, sl
 8011a7a:	f7ff fb35 	bl	80110e8 <_free_r>
 8011a7e:	230c      	movs	r3, #12
 8011a80:	f8ca 3000 	str.w	r3, [sl]
 8011a84:	89a3      	ldrh	r3, [r4, #12]
 8011a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a8a:	81a3      	strh	r3, [r4, #12]
 8011a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a90:	e7e9      	b.n	8011a66 <__ssputs_r+0x8a>
	...

08011a94 <_svfiprintf_r>:
 8011a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a98:	4698      	mov	r8, r3
 8011a9a:	898b      	ldrh	r3, [r1, #12]
 8011a9c:	061b      	lsls	r3, r3, #24
 8011a9e:	b09d      	sub	sp, #116	@ 0x74
 8011aa0:	4607      	mov	r7, r0
 8011aa2:	460d      	mov	r5, r1
 8011aa4:	4614      	mov	r4, r2
 8011aa6:	d510      	bpl.n	8011aca <_svfiprintf_r+0x36>
 8011aa8:	690b      	ldr	r3, [r1, #16]
 8011aaa:	b973      	cbnz	r3, 8011aca <_svfiprintf_r+0x36>
 8011aac:	2140      	movs	r1, #64	@ 0x40
 8011aae:	f7ff fb8f 	bl	80111d0 <_malloc_r>
 8011ab2:	6028      	str	r0, [r5, #0]
 8011ab4:	6128      	str	r0, [r5, #16]
 8011ab6:	b930      	cbnz	r0, 8011ac6 <_svfiprintf_r+0x32>
 8011ab8:	230c      	movs	r3, #12
 8011aba:	603b      	str	r3, [r7, #0]
 8011abc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ac0:	b01d      	add	sp, #116	@ 0x74
 8011ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac6:	2340      	movs	r3, #64	@ 0x40
 8011ac8:	616b      	str	r3, [r5, #20]
 8011aca:	2300      	movs	r3, #0
 8011acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ace:	2320      	movs	r3, #32
 8011ad0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ad8:	2330      	movs	r3, #48	@ 0x30
 8011ada:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011c78 <_svfiprintf_r+0x1e4>
 8011ade:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ae2:	f04f 0901 	mov.w	r9, #1
 8011ae6:	4623      	mov	r3, r4
 8011ae8:	469a      	mov	sl, r3
 8011aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011aee:	b10a      	cbz	r2, 8011af4 <_svfiprintf_r+0x60>
 8011af0:	2a25      	cmp	r2, #37	@ 0x25
 8011af2:	d1f9      	bne.n	8011ae8 <_svfiprintf_r+0x54>
 8011af4:	ebba 0b04 	subs.w	fp, sl, r4
 8011af8:	d00b      	beq.n	8011b12 <_svfiprintf_r+0x7e>
 8011afa:	465b      	mov	r3, fp
 8011afc:	4622      	mov	r2, r4
 8011afe:	4629      	mov	r1, r5
 8011b00:	4638      	mov	r0, r7
 8011b02:	f7ff ff6b 	bl	80119dc <__ssputs_r>
 8011b06:	3001      	adds	r0, #1
 8011b08:	f000 80a7 	beq.w	8011c5a <_svfiprintf_r+0x1c6>
 8011b0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b0e:	445a      	add	r2, fp
 8011b10:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b12:	f89a 3000 	ldrb.w	r3, [sl]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	f000 809f 	beq.w	8011c5a <_svfiprintf_r+0x1c6>
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8011b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b26:	f10a 0a01 	add.w	sl, sl, #1
 8011b2a:	9304      	str	r3, [sp, #16]
 8011b2c:	9307      	str	r3, [sp, #28]
 8011b2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b32:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b34:	4654      	mov	r4, sl
 8011b36:	2205      	movs	r2, #5
 8011b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b3c:	484e      	ldr	r0, [pc, #312]	@ (8011c78 <_svfiprintf_r+0x1e4>)
 8011b3e:	f7ee fb67 	bl	8000210 <memchr>
 8011b42:	9a04      	ldr	r2, [sp, #16]
 8011b44:	b9d8      	cbnz	r0, 8011b7e <_svfiprintf_r+0xea>
 8011b46:	06d0      	lsls	r0, r2, #27
 8011b48:	bf44      	itt	mi
 8011b4a:	2320      	movmi	r3, #32
 8011b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b50:	0711      	lsls	r1, r2, #28
 8011b52:	bf44      	itt	mi
 8011b54:	232b      	movmi	r3, #43	@ 0x2b
 8011b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8011b5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b60:	d015      	beq.n	8011b8e <_svfiprintf_r+0xfa>
 8011b62:	9a07      	ldr	r2, [sp, #28]
 8011b64:	4654      	mov	r4, sl
 8011b66:	2000      	movs	r0, #0
 8011b68:	f04f 0c0a 	mov.w	ip, #10
 8011b6c:	4621      	mov	r1, r4
 8011b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b72:	3b30      	subs	r3, #48	@ 0x30
 8011b74:	2b09      	cmp	r3, #9
 8011b76:	d94b      	bls.n	8011c10 <_svfiprintf_r+0x17c>
 8011b78:	b1b0      	cbz	r0, 8011ba8 <_svfiprintf_r+0x114>
 8011b7a:	9207      	str	r2, [sp, #28]
 8011b7c:	e014      	b.n	8011ba8 <_svfiprintf_r+0x114>
 8011b7e:	eba0 0308 	sub.w	r3, r0, r8
 8011b82:	fa09 f303 	lsl.w	r3, r9, r3
 8011b86:	4313      	orrs	r3, r2
 8011b88:	9304      	str	r3, [sp, #16]
 8011b8a:	46a2      	mov	sl, r4
 8011b8c:	e7d2      	b.n	8011b34 <_svfiprintf_r+0xa0>
 8011b8e:	9b03      	ldr	r3, [sp, #12]
 8011b90:	1d19      	adds	r1, r3, #4
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	9103      	str	r1, [sp, #12]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	bfbb      	ittet	lt
 8011b9a:	425b      	neglt	r3, r3
 8011b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8011ba0:	9307      	strge	r3, [sp, #28]
 8011ba2:	9307      	strlt	r3, [sp, #28]
 8011ba4:	bfb8      	it	lt
 8011ba6:	9204      	strlt	r2, [sp, #16]
 8011ba8:	7823      	ldrb	r3, [r4, #0]
 8011baa:	2b2e      	cmp	r3, #46	@ 0x2e
 8011bac:	d10a      	bne.n	8011bc4 <_svfiprintf_r+0x130>
 8011bae:	7863      	ldrb	r3, [r4, #1]
 8011bb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bb2:	d132      	bne.n	8011c1a <_svfiprintf_r+0x186>
 8011bb4:	9b03      	ldr	r3, [sp, #12]
 8011bb6:	1d1a      	adds	r2, r3, #4
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	9203      	str	r2, [sp, #12]
 8011bbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011bc0:	3402      	adds	r4, #2
 8011bc2:	9305      	str	r3, [sp, #20]
 8011bc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011c88 <_svfiprintf_r+0x1f4>
 8011bc8:	7821      	ldrb	r1, [r4, #0]
 8011bca:	2203      	movs	r2, #3
 8011bcc:	4650      	mov	r0, sl
 8011bce:	f7ee fb1f 	bl	8000210 <memchr>
 8011bd2:	b138      	cbz	r0, 8011be4 <_svfiprintf_r+0x150>
 8011bd4:	9b04      	ldr	r3, [sp, #16]
 8011bd6:	eba0 000a 	sub.w	r0, r0, sl
 8011bda:	2240      	movs	r2, #64	@ 0x40
 8011bdc:	4082      	lsls	r2, r0
 8011bde:	4313      	orrs	r3, r2
 8011be0:	3401      	adds	r4, #1
 8011be2:	9304      	str	r3, [sp, #16]
 8011be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011be8:	4824      	ldr	r0, [pc, #144]	@ (8011c7c <_svfiprintf_r+0x1e8>)
 8011bea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011bee:	2206      	movs	r2, #6
 8011bf0:	f7ee fb0e 	bl	8000210 <memchr>
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	d036      	beq.n	8011c66 <_svfiprintf_r+0x1d2>
 8011bf8:	4b21      	ldr	r3, [pc, #132]	@ (8011c80 <_svfiprintf_r+0x1ec>)
 8011bfa:	bb1b      	cbnz	r3, 8011c44 <_svfiprintf_r+0x1b0>
 8011bfc:	9b03      	ldr	r3, [sp, #12]
 8011bfe:	3307      	adds	r3, #7
 8011c00:	f023 0307 	bic.w	r3, r3, #7
 8011c04:	3308      	adds	r3, #8
 8011c06:	9303      	str	r3, [sp, #12]
 8011c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c0a:	4433      	add	r3, r6
 8011c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c0e:	e76a      	b.n	8011ae6 <_svfiprintf_r+0x52>
 8011c10:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c14:	460c      	mov	r4, r1
 8011c16:	2001      	movs	r0, #1
 8011c18:	e7a8      	b.n	8011b6c <_svfiprintf_r+0xd8>
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	3401      	adds	r4, #1
 8011c1e:	9305      	str	r3, [sp, #20]
 8011c20:	4619      	mov	r1, r3
 8011c22:	f04f 0c0a 	mov.w	ip, #10
 8011c26:	4620      	mov	r0, r4
 8011c28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c2c:	3a30      	subs	r2, #48	@ 0x30
 8011c2e:	2a09      	cmp	r2, #9
 8011c30:	d903      	bls.n	8011c3a <_svfiprintf_r+0x1a6>
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d0c6      	beq.n	8011bc4 <_svfiprintf_r+0x130>
 8011c36:	9105      	str	r1, [sp, #20]
 8011c38:	e7c4      	b.n	8011bc4 <_svfiprintf_r+0x130>
 8011c3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c3e:	4604      	mov	r4, r0
 8011c40:	2301      	movs	r3, #1
 8011c42:	e7f0      	b.n	8011c26 <_svfiprintf_r+0x192>
 8011c44:	ab03      	add	r3, sp, #12
 8011c46:	9300      	str	r3, [sp, #0]
 8011c48:	462a      	mov	r2, r5
 8011c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8011c84 <_svfiprintf_r+0x1f0>)
 8011c4c:	a904      	add	r1, sp, #16
 8011c4e:	4638      	mov	r0, r7
 8011c50:	f7fd fd10 	bl	800f674 <_printf_float>
 8011c54:	1c42      	adds	r2, r0, #1
 8011c56:	4606      	mov	r6, r0
 8011c58:	d1d6      	bne.n	8011c08 <_svfiprintf_r+0x174>
 8011c5a:	89ab      	ldrh	r3, [r5, #12]
 8011c5c:	065b      	lsls	r3, r3, #25
 8011c5e:	f53f af2d 	bmi.w	8011abc <_svfiprintf_r+0x28>
 8011c62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c64:	e72c      	b.n	8011ac0 <_svfiprintf_r+0x2c>
 8011c66:	ab03      	add	r3, sp, #12
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	462a      	mov	r2, r5
 8011c6c:	4b05      	ldr	r3, [pc, #20]	@ (8011c84 <_svfiprintf_r+0x1f0>)
 8011c6e:	a904      	add	r1, sp, #16
 8011c70:	4638      	mov	r0, r7
 8011c72:	f7fd ff97 	bl	800fba4 <_printf_i>
 8011c76:	e7ed      	b.n	8011c54 <_svfiprintf_r+0x1c0>
 8011c78:	0801295e 	.word	0x0801295e
 8011c7c:	08012968 	.word	0x08012968
 8011c80:	0800f675 	.word	0x0800f675
 8011c84:	080119dd 	.word	0x080119dd
 8011c88:	08012964 	.word	0x08012964

08011c8c <__sfputc_r>:
 8011c8c:	6893      	ldr	r3, [r2, #8]
 8011c8e:	3b01      	subs	r3, #1
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	b410      	push	{r4}
 8011c94:	6093      	str	r3, [r2, #8]
 8011c96:	da08      	bge.n	8011caa <__sfputc_r+0x1e>
 8011c98:	6994      	ldr	r4, [r2, #24]
 8011c9a:	42a3      	cmp	r3, r4
 8011c9c:	db01      	blt.n	8011ca2 <__sfputc_r+0x16>
 8011c9e:	290a      	cmp	r1, #10
 8011ca0:	d103      	bne.n	8011caa <__sfputc_r+0x1e>
 8011ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ca6:	f7fe ba46 	b.w	8010136 <__swbuf_r>
 8011caa:	6813      	ldr	r3, [r2, #0]
 8011cac:	1c58      	adds	r0, r3, #1
 8011cae:	6010      	str	r0, [r2, #0]
 8011cb0:	7019      	strb	r1, [r3, #0]
 8011cb2:	4608      	mov	r0, r1
 8011cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cb8:	4770      	bx	lr

08011cba <__sfputs_r>:
 8011cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cbc:	4606      	mov	r6, r0
 8011cbe:	460f      	mov	r7, r1
 8011cc0:	4614      	mov	r4, r2
 8011cc2:	18d5      	adds	r5, r2, r3
 8011cc4:	42ac      	cmp	r4, r5
 8011cc6:	d101      	bne.n	8011ccc <__sfputs_r+0x12>
 8011cc8:	2000      	movs	r0, #0
 8011cca:	e007      	b.n	8011cdc <__sfputs_r+0x22>
 8011ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cd0:	463a      	mov	r2, r7
 8011cd2:	4630      	mov	r0, r6
 8011cd4:	f7ff ffda 	bl	8011c8c <__sfputc_r>
 8011cd8:	1c43      	adds	r3, r0, #1
 8011cda:	d1f3      	bne.n	8011cc4 <__sfputs_r+0xa>
 8011cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ce0 <_vfiprintf_r>:
 8011ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce4:	460d      	mov	r5, r1
 8011ce6:	b09d      	sub	sp, #116	@ 0x74
 8011ce8:	4614      	mov	r4, r2
 8011cea:	4698      	mov	r8, r3
 8011cec:	4606      	mov	r6, r0
 8011cee:	b118      	cbz	r0, 8011cf8 <_vfiprintf_r+0x18>
 8011cf0:	6a03      	ldr	r3, [r0, #32]
 8011cf2:	b90b      	cbnz	r3, 8011cf8 <_vfiprintf_r+0x18>
 8011cf4:	f7fe f900 	bl	800fef8 <__sinit>
 8011cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011cfa:	07d9      	lsls	r1, r3, #31
 8011cfc:	d405      	bmi.n	8011d0a <_vfiprintf_r+0x2a>
 8011cfe:	89ab      	ldrh	r3, [r5, #12]
 8011d00:	059a      	lsls	r2, r3, #22
 8011d02:	d402      	bmi.n	8011d0a <_vfiprintf_r+0x2a>
 8011d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d06:	f7fe fb86 	bl	8010416 <__retarget_lock_acquire_recursive>
 8011d0a:	89ab      	ldrh	r3, [r5, #12]
 8011d0c:	071b      	lsls	r3, r3, #28
 8011d0e:	d501      	bpl.n	8011d14 <_vfiprintf_r+0x34>
 8011d10:	692b      	ldr	r3, [r5, #16]
 8011d12:	b99b      	cbnz	r3, 8011d3c <_vfiprintf_r+0x5c>
 8011d14:	4629      	mov	r1, r5
 8011d16:	4630      	mov	r0, r6
 8011d18:	f7fe fa4c 	bl	80101b4 <__swsetup_r>
 8011d1c:	b170      	cbz	r0, 8011d3c <_vfiprintf_r+0x5c>
 8011d1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d20:	07dc      	lsls	r4, r3, #31
 8011d22:	d504      	bpl.n	8011d2e <_vfiprintf_r+0x4e>
 8011d24:	f04f 30ff 	mov.w	r0, #4294967295
 8011d28:	b01d      	add	sp, #116	@ 0x74
 8011d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d2e:	89ab      	ldrh	r3, [r5, #12]
 8011d30:	0598      	lsls	r0, r3, #22
 8011d32:	d4f7      	bmi.n	8011d24 <_vfiprintf_r+0x44>
 8011d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d36:	f7fe fb6f 	bl	8010418 <__retarget_lock_release_recursive>
 8011d3a:	e7f3      	b.n	8011d24 <_vfiprintf_r+0x44>
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d40:	2320      	movs	r3, #32
 8011d42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d4a:	2330      	movs	r3, #48	@ 0x30
 8011d4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011efc <_vfiprintf_r+0x21c>
 8011d50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d54:	f04f 0901 	mov.w	r9, #1
 8011d58:	4623      	mov	r3, r4
 8011d5a:	469a      	mov	sl, r3
 8011d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d60:	b10a      	cbz	r2, 8011d66 <_vfiprintf_r+0x86>
 8011d62:	2a25      	cmp	r2, #37	@ 0x25
 8011d64:	d1f9      	bne.n	8011d5a <_vfiprintf_r+0x7a>
 8011d66:	ebba 0b04 	subs.w	fp, sl, r4
 8011d6a:	d00b      	beq.n	8011d84 <_vfiprintf_r+0xa4>
 8011d6c:	465b      	mov	r3, fp
 8011d6e:	4622      	mov	r2, r4
 8011d70:	4629      	mov	r1, r5
 8011d72:	4630      	mov	r0, r6
 8011d74:	f7ff ffa1 	bl	8011cba <__sfputs_r>
 8011d78:	3001      	adds	r0, #1
 8011d7a:	f000 80a7 	beq.w	8011ecc <_vfiprintf_r+0x1ec>
 8011d7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d80:	445a      	add	r2, fp
 8011d82:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d84:	f89a 3000 	ldrb.w	r3, [sl]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	f000 809f 	beq.w	8011ecc <_vfiprintf_r+0x1ec>
 8011d8e:	2300      	movs	r3, #0
 8011d90:	f04f 32ff 	mov.w	r2, #4294967295
 8011d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d98:	f10a 0a01 	add.w	sl, sl, #1
 8011d9c:	9304      	str	r3, [sp, #16]
 8011d9e:	9307      	str	r3, [sp, #28]
 8011da0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011da4:	931a      	str	r3, [sp, #104]	@ 0x68
 8011da6:	4654      	mov	r4, sl
 8011da8:	2205      	movs	r2, #5
 8011daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dae:	4853      	ldr	r0, [pc, #332]	@ (8011efc <_vfiprintf_r+0x21c>)
 8011db0:	f7ee fa2e 	bl	8000210 <memchr>
 8011db4:	9a04      	ldr	r2, [sp, #16]
 8011db6:	b9d8      	cbnz	r0, 8011df0 <_vfiprintf_r+0x110>
 8011db8:	06d1      	lsls	r1, r2, #27
 8011dba:	bf44      	itt	mi
 8011dbc:	2320      	movmi	r3, #32
 8011dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dc2:	0713      	lsls	r3, r2, #28
 8011dc4:	bf44      	itt	mi
 8011dc6:	232b      	movmi	r3, #43	@ 0x2b
 8011dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8011dd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dd2:	d015      	beq.n	8011e00 <_vfiprintf_r+0x120>
 8011dd4:	9a07      	ldr	r2, [sp, #28]
 8011dd6:	4654      	mov	r4, sl
 8011dd8:	2000      	movs	r0, #0
 8011dda:	f04f 0c0a 	mov.w	ip, #10
 8011dde:	4621      	mov	r1, r4
 8011de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011de4:	3b30      	subs	r3, #48	@ 0x30
 8011de6:	2b09      	cmp	r3, #9
 8011de8:	d94b      	bls.n	8011e82 <_vfiprintf_r+0x1a2>
 8011dea:	b1b0      	cbz	r0, 8011e1a <_vfiprintf_r+0x13a>
 8011dec:	9207      	str	r2, [sp, #28]
 8011dee:	e014      	b.n	8011e1a <_vfiprintf_r+0x13a>
 8011df0:	eba0 0308 	sub.w	r3, r0, r8
 8011df4:	fa09 f303 	lsl.w	r3, r9, r3
 8011df8:	4313      	orrs	r3, r2
 8011dfa:	9304      	str	r3, [sp, #16]
 8011dfc:	46a2      	mov	sl, r4
 8011dfe:	e7d2      	b.n	8011da6 <_vfiprintf_r+0xc6>
 8011e00:	9b03      	ldr	r3, [sp, #12]
 8011e02:	1d19      	adds	r1, r3, #4
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	9103      	str	r1, [sp, #12]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	bfbb      	ittet	lt
 8011e0c:	425b      	neglt	r3, r3
 8011e0e:	f042 0202 	orrlt.w	r2, r2, #2
 8011e12:	9307      	strge	r3, [sp, #28]
 8011e14:	9307      	strlt	r3, [sp, #28]
 8011e16:	bfb8      	it	lt
 8011e18:	9204      	strlt	r2, [sp, #16]
 8011e1a:	7823      	ldrb	r3, [r4, #0]
 8011e1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e1e:	d10a      	bne.n	8011e36 <_vfiprintf_r+0x156>
 8011e20:	7863      	ldrb	r3, [r4, #1]
 8011e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e24:	d132      	bne.n	8011e8c <_vfiprintf_r+0x1ac>
 8011e26:	9b03      	ldr	r3, [sp, #12]
 8011e28:	1d1a      	adds	r2, r3, #4
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	9203      	str	r2, [sp, #12]
 8011e2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e32:	3402      	adds	r4, #2
 8011e34:	9305      	str	r3, [sp, #20]
 8011e36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011f0c <_vfiprintf_r+0x22c>
 8011e3a:	7821      	ldrb	r1, [r4, #0]
 8011e3c:	2203      	movs	r2, #3
 8011e3e:	4650      	mov	r0, sl
 8011e40:	f7ee f9e6 	bl	8000210 <memchr>
 8011e44:	b138      	cbz	r0, 8011e56 <_vfiprintf_r+0x176>
 8011e46:	9b04      	ldr	r3, [sp, #16]
 8011e48:	eba0 000a 	sub.w	r0, r0, sl
 8011e4c:	2240      	movs	r2, #64	@ 0x40
 8011e4e:	4082      	lsls	r2, r0
 8011e50:	4313      	orrs	r3, r2
 8011e52:	3401      	adds	r4, #1
 8011e54:	9304      	str	r3, [sp, #16]
 8011e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e5a:	4829      	ldr	r0, [pc, #164]	@ (8011f00 <_vfiprintf_r+0x220>)
 8011e5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e60:	2206      	movs	r2, #6
 8011e62:	f7ee f9d5 	bl	8000210 <memchr>
 8011e66:	2800      	cmp	r0, #0
 8011e68:	d03f      	beq.n	8011eea <_vfiprintf_r+0x20a>
 8011e6a:	4b26      	ldr	r3, [pc, #152]	@ (8011f04 <_vfiprintf_r+0x224>)
 8011e6c:	bb1b      	cbnz	r3, 8011eb6 <_vfiprintf_r+0x1d6>
 8011e6e:	9b03      	ldr	r3, [sp, #12]
 8011e70:	3307      	adds	r3, #7
 8011e72:	f023 0307 	bic.w	r3, r3, #7
 8011e76:	3308      	adds	r3, #8
 8011e78:	9303      	str	r3, [sp, #12]
 8011e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e7c:	443b      	add	r3, r7
 8011e7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e80:	e76a      	b.n	8011d58 <_vfiprintf_r+0x78>
 8011e82:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e86:	460c      	mov	r4, r1
 8011e88:	2001      	movs	r0, #1
 8011e8a:	e7a8      	b.n	8011dde <_vfiprintf_r+0xfe>
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	3401      	adds	r4, #1
 8011e90:	9305      	str	r3, [sp, #20]
 8011e92:	4619      	mov	r1, r3
 8011e94:	f04f 0c0a 	mov.w	ip, #10
 8011e98:	4620      	mov	r0, r4
 8011e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e9e:	3a30      	subs	r2, #48	@ 0x30
 8011ea0:	2a09      	cmp	r2, #9
 8011ea2:	d903      	bls.n	8011eac <_vfiprintf_r+0x1cc>
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d0c6      	beq.n	8011e36 <_vfiprintf_r+0x156>
 8011ea8:	9105      	str	r1, [sp, #20]
 8011eaa:	e7c4      	b.n	8011e36 <_vfiprintf_r+0x156>
 8011eac:	fb0c 2101 	mla	r1, ip, r1, r2
 8011eb0:	4604      	mov	r4, r0
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	e7f0      	b.n	8011e98 <_vfiprintf_r+0x1b8>
 8011eb6:	ab03      	add	r3, sp, #12
 8011eb8:	9300      	str	r3, [sp, #0]
 8011eba:	462a      	mov	r2, r5
 8011ebc:	4b12      	ldr	r3, [pc, #72]	@ (8011f08 <_vfiprintf_r+0x228>)
 8011ebe:	a904      	add	r1, sp, #16
 8011ec0:	4630      	mov	r0, r6
 8011ec2:	f7fd fbd7 	bl	800f674 <_printf_float>
 8011ec6:	4607      	mov	r7, r0
 8011ec8:	1c78      	adds	r0, r7, #1
 8011eca:	d1d6      	bne.n	8011e7a <_vfiprintf_r+0x19a>
 8011ecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ece:	07d9      	lsls	r1, r3, #31
 8011ed0:	d405      	bmi.n	8011ede <_vfiprintf_r+0x1fe>
 8011ed2:	89ab      	ldrh	r3, [r5, #12]
 8011ed4:	059a      	lsls	r2, r3, #22
 8011ed6:	d402      	bmi.n	8011ede <_vfiprintf_r+0x1fe>
 8011ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011eda:	f7fe fa9d 	bl	8010418 <__retarget_lock_release_recursive>
 8011ede:	89ab      	ldrh	r3, [r5, #12]
 8011ee0:	065b      	lsls	r3, r3, #25
 8011ee2:	f53f af1f 	bmi.w	8011d24 <_vfiprintf_r+0x44>
 8011ee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ee8:	e71e      	b.n	8011d28 <_vfiprintf_r+0x48>
 8011eea:	ab03      	add	r3, sp, #12
 8011eec:	9300      	str	r3, [sp, #0]
 8011eee:	462a      	mov	r2, r5
 8011ef0:	4b05      	ldr	r3, [pc, #20]	@ (8011f08 <_vfiprintf_r+0x228>)
 8011ef2:	a904      	add	r1, sp, #16
 8011ef4:	4630      	mov	r0, r6
 8011ef6:	f7fd fe55 	bl	800fba4 <_printf_i>
 8011efa:	e7e4      	b.n	8011ec6 <_vfiprintf_r+0x1e6>
 8011efc:	0801295e 	.word	0x0801295e
 8011f00:	08012968 	.word	0x08012968
 8011f04:	0800f675 	.word	0x0800f675
 8011f08:	08011cbb 	.word	0x08011cbb
 8011f0c:	08012964 	.word	0x08012964

08011f10 <__sflush_r>:
 8011f10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f18:	0716      	lsls	r6, r2, #28
 8011f1a:	4605      	mov	r5, r0
 8011f1c:	460c      	mov	r4, r1
 8011f1e:	d454      	bmi.n	8011fca <__sflush_r+0xba>
 8011f20:	684b      	ldr	r3, [r1, #4]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	dc02      	bgt.n	8011f2c <__sflush_r+0x1c>
 8011f26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	dd48      	ble.n	8011fbe <__sflush_r+0xae>
 8011f2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011f2e:	2e00      	cmp	r6, #0
 8011f30:	d045      	beq.n	8011fbe <__sflush_r+0xae>
 8011f32:	2300      	movs	r3, #0
 8011f34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011f38:	682f      	ldr	r7, [r5, #0]
 8011f3a:	6a21      	ldr	r1, [r4, #32]
 8011f3c:	602b      	str	r3, [r5, #0]
 8011f3e:	d030      	beq.n	8011fa2 <__sflush_r+0x92>
 8011f40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011f42:	89a3      	ldrh	r3, [r4, #12]
 8011f44:	0759      	lsls	r1, r3, #29
 8011f46:	d505      	bpl.n	8011f54 <__sflush_r+0x44>
 8011f48:	6863      	ldr	r3, [r4, #4]
 8011f4a:	1ad2      	subs	r2, r2, r3
 8011f4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011f4e:	b10b      	cbz	r3, 8011f54 <__sflush_r+0x44>
 8011f50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011f52:	1ad2      	subs	r2, r2, r3
 8011f54:	2300      	movs	r3, #0
 8011f56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011f58:	6a21      	ldr	r1, [r4, #32]
 8011f5a:	4628      	mov	r0, r5
 8011f5c:	47b0      	blx	r6
 8011f5e:	1c43      	adds	r3, r0, #1
 8011f60:	89a3      	ldrh	r3, [r4, #12]
 8011f62:	d106      	bne.n	8011f72 <__sflush_r+0x62>
 8011f64:	6829      	ldr	r1, [r5, #0]
 8011f66:	291d      	cmp	r1, #29
 8011f68:	d82b      	bhi.n	8011fc2 <__sflush_r+0xb2>
 8011f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8012014 <__sflush_r+0x104>)
 8011f6c:	40ca      	lsrs	r2, r1
 8011f6e:	07d6      	lsls	r6, r2, #31
 8011f70:	d527      	bpl.n	8011fc2 <__sflush_r+0xb2>
 8011f72:	2200      	movs	r2, #0
 8011f74:	6062      	str	r2, [r4, #4]
 8011f76:	04d9      	lsls	r1, r3, #19
 8011f78:	6922      	ldr	r2, [r4, #16]
 8011f7a:	6022      	str	r2, [r4, #0]
 8011f7c:	d504      	bpl.n	8011f88 <__sflush_r+0x78>
 8011f7e:	1c42      	adds	r2, r0, #1
 8011f80:	d101      	bne.n	8011f86 <__sflush_r+0x76>
 8011f82:	682b      	ldr	r3, [r5, #0]
 8011f84:	b903      	cbnz	r3, 8011f88 <__sflush_r+0x78>
 8011f86:	6560      	str	r0, [r4, #84]	@ 0x54
 8011f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f8a:	602f      	str	r7, [r5, #0]
 8011f8c:	b1b9      	cbz	r1, 8011fbe <__sflush_r+0xae>
 8011f8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f92:	4299      	cmp	r1, r3
 8011f94:	d002      	beq.n	8011f9c <__sflush_r+0x8c>
 8011f96:	4628      	mov	r0, r5
 8011f98:	f7ff f8a6 	bl	80110e8 <_free_r>
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011fa0:	e00d      	b.n	8011fbe <__sflush_r+0xae>
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	4628      	mov	r0, r5
 8011fa6:	47b0      	blx	r6
 8011fa8:	4602      	mov	r2, r0
 8011faa:	1c50      	adds	r0, r2, #1
 8011fac:	d1c9      	bne.n	8011f42 <__sflush_r+0x32>
 8011fae:	682b      	ldr	r3, [r5, #0]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d0c6      	beq.n	8011f42 <__sflush_r+0x32>
 8011fb4:	2b1d      	cmp	r3, #29
 8011fb6:	d001      	beq.n	8011fbc <__sflush_r+0xac>
 8011fb8:	2b16      	cmp	r3, #22
 8011fba:	d11e      	bne.n	8011ffa <__sflush_r+0xea>
 8011fbc:	602f      	str	r7, [r5, #0]
 8011fbe:	2000      	movs	r0, #0
 8011fc0:	e022      	b.n	8012008 <__sflush_r+0xf8>
 8011fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fc6:	b21b      	sxth	r3, r3
 8011fc8:	e01b      	b.n	8012002 <__sflush_r+0xf2>
 8011fca:	690f      	ldr	r7, [r1, #16]
 8011fcc:	2f00      	cmp	r7, #0
 8011fce:	d0f6      	beq.n	8011fbe <__sflush_r+0xae>
 8011fd0:	0793      	lsls	r3, r2, #30
 8011fd2:	680e      	ldr	r6, [r1, #0]
 8011fd4:	bf08      	it	eq
 8011fd6:	694b      	ldreq	r3, [r1, #20]
 8011fd8:	600f      	str	r7, [r1, #0]
 8011fda:	bf18      	it	ne
 8011fdc:	2300      	movne	r3, #0
 8011fde:	eba6 0807 	sub.w	r8, r6, r7
 8011fe2:	608b      	str	r3, [r1, #8]
 8011fe4:	f1b8 0f00 	cmp.w	r8, #0
 8011fe8:	dde9      	ble.n	8011fbe <__sflush_r+0xae>
 8011fea:	6a21      	ldr	r1, [r4, #32]
 8011fec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011fee:	4643      	mov	r3, r8
 8011ff0:	463a      	mov	r2, r7
 8011ff2:	4628      	mov	r0, r5
 8011ff4:	47b0      	blx	r6
 8011ff6:	2800      	cmp	r0, #0
 8011ff8:	dc08      	bgt.n	801200c <__sflush_r+0xfc>
 8011ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012002:	81a3      	strh	r3, [r4, #12]
 8012004:	f04f 30ff 	mov.w	r0, #4294967295
 8012008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801200c:	4407      	add	r7, r0
 801200e:	eba8 0800 	sub.w	r8, r8, r0
 8012012:	e7e7      	b.n	8011fe4 <__sflush_r+0xd4>
 8012014:	20400001 	.word	0x20400001

08012018 <_fflush_r>:
 8012018:	b538      	push	{r3, r4, r5, lr}
 801201a:	690b      	ldr	r3, [r1, #16]
 801201c:	4605      	mov	r5, r0
 801201e:	460c      	mov	r4, r1
 8012020:	b913      	cbnz	r3, 8012028 <_fflush_r+0x10>
 8012022:	2500      	movs	r5, #0
 8012024:	4628      	mov	r0, r5
 8012026:	bd38      	pop	{r3, r4, r5, pc}
 8012028:	b118      	cbz	r0, 8012032 <_fflush_r+0x1a>
 801202a:	6a03      	ldr	r3, [r0, #32]
 801202c:	b90b      	cbnz	r3, 8012032 <_fflush_r+0x1a>
 801202e:	f7fd ff63 	bl	800fef8 <__sinit>
 8012032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d0f3      	beq.n	8012022 <_fflush_r+0xa>
 801203a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801203c:	07d0      	lsls	r0, r2, #31
 801203e:	d404      	bmi.n	801204a <_fflush_r+0x32>
 8012040:	0599      	lsls	r1, r3, #22
 8012042:	d402      	bmi.n	801204a <_fflush_r+0x32>
 8012044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012046:	f7fe f9e6 	bl	8010416 <__retarget_lock_acquire_recursive>
 801204a:	4628      	mov	r0, r5
 801204c:	4621      	mov	r1, r4
 801204e:	f7ff ff5f 	bl	8011f10 <__sflush_r>
 8012052:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012054:	07da      	lsls	r2, r3, #31
 8012056:	4605      	mov	r5, r0
 8012058:	d4e4      	bmi.n	8012024 <_fflush_r+0xc>
 801205a:	89a3      	ldrh	r3, [r4, #12]
 801205c:	059b      	lsls	r3, r3, #22
 801205e:	d4e1      	bmi.n	8012024 <_fflush_r+0xc>
 8012060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012062:	f7fe f9d9 	bl	8010418 <__retarget_lock_release_recursive>
 8012066:	e7dd      	b.n	8012024 <_fflush_r+0xc>

08012068 <__swhatbuf_r>:
 8012068:	b570      	push	{r4, r5, r6, lr}
 801206a:	460c      	mov	r4, r1
 801206c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012070:	2900      	cmp	r1, #0
 8012072:	b096      	sub	sp, #88	@ 0x58
 8012074:	4615      	mov	r5, r2
 8012076:	461e      	mov	r6, r3
 8012078:	da0d      	bge.n	8012096 <__swhatbuf_r+0x2e>
 801207a:	89a3      	ldrh	r3, [r4, #12]
 801207c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012080:	f04f 0100 	mov.w	r1, #0
 8012084:	bf14      	ite	ne
 8012086:	2340      	movne	r3, #64	@ 0x40
 8012088:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801208c:	2000      	movs	r0, #0
 801208e:	6031      	str	r1, [r6, #0]
 8012090:	602b      	str	r3, [r5, #0]
 8012092:	b016      	add	sp, #88	@ 0x58
 8012094:	bd70      	pop	{r4, r5, r6, pc}
 8012096:	466a      	mov	r2, sp
 8012098:	f000 f862 	bl	8012160 <_fstat_r>
 801209c:	2800      	cmp	r0, #0
 801209e:	dbec      	blt.n	801207a <__swhatbuf_r+0x12>
 80120a0:	9901      	ldr	r1, [sp, #4]
 80120a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80120a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80120aa:	4259      	negs	r1, r3
 80120ac:	4159      	adcs	r1, r3
 80120ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80120b2:	e7eb      	b.n	801208c <__swhatbuf_r+0x24>

080120b4 <__smakebuf_r>:
 80120b4:	898b      	ldrh	r3, [r1, #12]
 80120b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120b8:	079d      	lsls	r5, r3, #30
 80120ba:	4606      	mov	r6, r0
 80120bc:	460c      	mov	r4, r1
 80120be:	d507      	bpl.n	80120d0 <__smakebuf_r+0x1c>
 80120c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80120c4:	6023      	str	r3, [r4, #0]
 80120c6:	6123      	str	r3, [r4, #16]
 80120c8:	2301      	movs	r3, #1
 80120ca:	6163      	str	r3, [r4, #20]
 80120cc:	b003      	add	sp, #12
 80120ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120d0:	ab01      	add	r3, sp, #4
 80120d2:	466a      	mov	r2, sp
 80120d4:	f7ff ffc8 	bl	8012068 <__swhatbuf_r>
 80120d8:	9f00      	ldr	r7, [sp, #0]
 80120da:	4605      	mov	r5, r0
 80120dc:	4639      	mov	r1, r7
 80120de:	4630      	mov	r0, r6
 80120e0:	f7ff f876 	bl	80111d0 <_malloc_r>
 80120e4:	b948      	cbnz	r0, 80120fa <__smakebuf_r+0x46>
 80120e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120ea:	059a      	lsls	r2, r3, #22
 80120ec:	d4ee      	bmi.n	80120cc <__smakebuf_r+0x18>
 80120ee:	f023 0303 	bic.w	r3, r3, #3
 80120f2:	f043 0302 	orr.w	r3, r3, #2
 80120f6:	81a3      	strh	r3, [r4, #12]
 80120f8:	e7e2      	b.n	80120c0 <__smakebuf_r+0xc>
 80120fa:	89a3      	ldrh	r3, [r4, #12]
 80120fc:	6020      	str	r0, [r4, #0]
 80120fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012102:	81a3      	strh	r3, [r4, #12]
 8012104:	9b01      	ldr	r3, [sp, #4]
 8012106:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801210a:	b15b      	cbz	r3, 8012124 <__smakebuf_r+0x70>
 801210c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012110:	4630      	mov	r0, r6
 8012112:	f000 f837 	bl	8012184 <_isatty_r>
 8012116:	b128      	cbz	r0, 8012124 <__smakebuf_r+0x70>
 8012118:	89a3      	ldrh	r3, [r4, #12]
 801211a:	f023 0303 	bic.w	r3, r3, #3
 801211e:	f043 0301 	orr.w	r3, r3, #1
 8012122:	81a3      	strh	r3, [r4, #12]
 8012124:	89a3      	ldrh	r3, [r4, #12]
 8012126:	431d      	orrs	r5, r3
 8012128:	81a5      	strh	r5, [r4, #12]
 801212a:	e7cf      	b.n	80120cc <__smakebuf_r+0x18>

0801212c <memmove>:
 801212c:	4288      	cmp	r0, r1
 801212e:	b510      	push	{r4, lr}
 8012130:	eb01 0402 	add.w	r4, r1, r2
 8012134:	d902      	bls.n	801213c <memmove+0x10>
 8012136:	4284      	cmp	r4, r0
 8012138:	4623      	mov	r3, r4
 801213a:	d807      	bhi.n	801214c <memmove+0x20>
 801213c:	1e43      	subs	r3, r0, #1
 801213e:	42a1      	cmp	r1, r4
 8012140:	d008      	beq.n	8012154 <memmove+0x28>
 8012142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012146:	f803 2f01 	strb.w	r2, [r3, #1]!
 801214a:	e7f8      	b.n	801213e <memmove+0x12>
 801214c:	4402      	add	r2, r0
 801214e:	4601      	mov	r1, r0
 8012150:	428a      	cmp	r2, r1
 8012152:	d100      	bne.n	8012156 <memmove+0x2a>
 8012154:	bd10      	pop	{r4, pc}
 8012156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801215a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801215e:	e7f7      	b.n	8012150 <memmove+0x24>

08012160 <_fstat_r>:
 8012160:	b538      	push	{r3, r4, r5, lr}
 8012162:	4d07      	ldr	r5, [pc, #28]	@ (8012180 <_fstat_r+0x20>)
 8012164:	2300      	movs	r3, #0
 8012166:	4604      	mov	r4, r0
 8012168:	4608      	mov	r0, r1
 801216a:	4611      	mov	r1, r2
 801216c:	602b      	str	r3, [r5, #0]
 801216e:	f7f1 fe37 	bl	8003de0 <_fstat>
 8012172:	1c43      	adds	r3, r0, #1
 8012174:	d102      	bne.n	801217c <_fstat_r+0x1c>
 8012176:	682b      	ldr	r3, [r5, #0]
 8012178:	b103      	cbz	r3, 801217c <_fstat_r+0x1c>
 801217a:	6023      	str	r3, [r4, #0]
 801217c:	bd38      	pop	{r3, r4, r5, pc}
 801217e:	bf00      	nop
 8012180:	20005068 	.word	0x20005068

08012184 <_isatty_r>:
 8012184:	b538      	push	{r3, r4, r5, lr}
 8012186:	4d06      	ldr	r5, [pc, #24]	@ (80121a0 <_isatty_r+0x1c>)
 8012188:	2300      	movs	r3, #0
 801218a:	4604      	mov	r4, r0
 801218c:	4608      	mov	r0, r1
 801218e:	602b      	str	r3, [r5, #0]
 8012190:	f7f1 fe36 	bl	8003e00 <_isatty>
 8012194:	1c43      	adds	r3, r0, #1
 8012196:	d102      	bne.n	801219e <_isatty_r+0x1a>
 8012198:	682b      	ldr	r3, [r5, #0]
 801219a:	b103      	cbz	r3, 801219e <_isatty_r+0x1a>
 801219c:	6023      	str	r3, [r4, #0]
 801219e:	bd38      	pop	{r3, r4, r5, pc}
 80121a0:	20005068 	.word	0x20005068

080121a4 <_sbrk_r>:
 80121a4:	b538      	push	{r3, r4, r5, lr}
 80121a6:	4d06      	ldr	r5, [pc, #24]	@ (80121c0 <_sbrk_r+0x1c>)
 80121a8:	2300      	movs	r3, #0
 80121aa:	4604      	mov	r4, r0
 80121ac:	4608      	mov	r0, r1
 80121ae:	602b      	str	r3, [r5, #0]
 80121b0:	f7f1 fe3e 	bl	8003e30 <_sbrk>
 80121b4:	1c43      	adds	r3, r0, #1
 80121b6:	d102      	bne.n	80121be <_sbrk_r+0x1a>
 80121b8:	682b      	ldr	r3, [r5, #0]
 80121ba:	b103      	cbz	r3, 80121be <_sbrk_r+0x1a>
 80121bc:	6023      	str	r3, [r4, #0]
 80121be:	bd38      	pop	{r3, r4, r5, pc}
 80121c0:	20005068 	.word	0x20005068

080121c4 <__assert_func>:
 80121c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121c6:	4614      	mov	r4, r2
 80121c8:	461a      	mov	r2, r3
 80121ca:	4b09      	ldr	r3, [pc, #36]	@ (80121f0 <__assert_func+0x2c>)
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	4605      	mov	r5, r0
 80121d0:	68d8      	ldr	r0, [r3, #12]
 80121d2:	b14c      	cbz	r4, 80121e8 <__assert_func+0x24>
 80121d4:	4b07      	ldr	r3, [pc, #28]	@ (80121f4 <__assert_func+0x30>)
 80121d6:	9100      	str	r1, [sp, #0]
 80121d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80121dc:	4906      	ldr	r1, [pc, #24]	@ (80121f8 <__assert_func+0x34>)
 80121de:	462b      	mov	r3, r5
 80121e0:	f000 f870 	bl	80122c4 <fiprintf>
 80121e4:	f000 f880 	bl	80122e8 <abort>
 80121e8:	4b04      	ldr	r3, [pc, #16]	@ (80121fc <__assert_func+0x38>)
 80121ea:	461c      	mov	r4, r3
 80121ec:	e7f3      	b.n	80121d6 <__assert_func+0x12>
 80121ee:	bf00      	nop
 80121f0:	2000001c 	.word	0x2000001c
 80121f4:	08012979 	.word	0x08012979
 80121f8:	08012986 	.word	0x08012986
 80121fc:	080129b4 	.word	0x080129b4

08012200 <_calloc_r>:
 8012200:	b570      	push	{r4, r5, r6, lr}
 8012202:	fba1 5402 	umull	r5, r4, r1, r2
 8012206:	b934      	cbnz	r4, 8012216 <_calloc_r+0x16>
 8012208:	4629      	mov	r1, r5
 801220a:	f7fe ffe1 	bl	80111d0 <_malloc_r>
 801220e:	4606      	mov	r6, r0
 8012210:	b928      	cbnz	r0, 801221e <_calloc_r+0x1e>
 8012212:	4630      	mov	r0, r6
 8012214:	bd70      	pop	{r4, r5, r6, pc}
 8012216:	220c      	movs	r2, #12
 8012218:	6002      	str	r2, [r0, #0]
 801221a:	2600      	movs	r6, #0
 801221c:	e7f9      	b.n	8012212 <_calloc_r+0x12>
 801221e:	462a      	mov	r2, r5
 8012220:	4621      	mov	r1, r4
 8012222:	f7fe f81d 	bl	8010260 <memset>
 8012226:	e7f4      	b.n	8012212 <_calloc_r+0x12>

08012228 <__ascii_mbtowc>:
 8012228:	b082      	sub	sp, #8
 801222a:	b901      	cbnz	r1, 801222e <__ascii_mbtowc+0x6>
 801222c:	a901      	add	r1, sp, #4
 801222e:	b142      	cbz	r2, 8012242 <__ascii_mbtowc+0x1a>
 8012230:	b14b      	cbz	r3, 8012246 <__ascii_mbtowc+0x1e>
 8012232:	7813      	ldrb	r3, [r2, #0]
 8012234:	600b      	str	r3, [r1, #0]
 8012236:	7812      	ldrb	r2, [r2, #0]
 8012238:	1e10      	subs	r0, r2, #0
 801223a:	bf18      	it	ne
 801223c:	2001      	movne	r0, #1
 801223e:	b002      	add	sp, #8
 8012240:	4770      	bx	lr
 8012242:	4610      	mov	r0, r2
 8012244:	e7fb      	b.n	801223e <__ascii_mbtowc+0x16>
 8012246:	f06f 0001 	mvn.w	r0, #1
 801224a:	e7f8      	b.n	801223e <__ascii_mbtowc+0x16>

0801224c <_realloc_r>:
 801224c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012250:	4607      	mov	r7, r0
 8012252:	4614      	mov	r4, r2
 8012254:	460d      	mov	r5, r1
 8012256:	b921      	cbnz	r1, 8012262 <_realloc_r+0x16>
 8012258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801225c:	4611      	mov	r1, r2
 801225e:	f7fe bfb7 	b.w	80111d0 <_malloc_r>
 8012262:	b92a      	cbnz	r2, 8012270 <_realloc_r+0x24>
 8012264:	f7fe ff40 	bl	80110e8 <_free_r>
 8012268:	4625      	mov	r5, r4
 801226a:	4628      	mov	r0, r5
 801226c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012270:	f000 f841 	bl	80122f6 <_malloc_usable_size_r>
 8012274:	4284      	cmp	r4, r0
 8012276:	4606      	mov	r6, r0
 8012278:	d802      	bhi.n	8012280 <_realloc_r+0x34>
 801227a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801227e:	d8f4      	bhi.n	801226a <_realloc_r+0x1e>
 8012280:	4621      	mov	r1, r4
 8012282:	4638      	mov	r0, r7
 8012284:	f7fe ffa4 	bl	80111d0 <_malloc_r>
 8012288:	4680      	mov	r8, r0
 801228a:	b908      	cbnz	r0, 8012290 <_realloc_r+0x44>
 801228c:	4645      	mov	r5, r8
 801228e:	e7ec      	b.n	801226a <_realloc_r+0x1e>
 8012290:	42b4      	cmp	r4, r6
 8012292:	4622      	mov	r2, r4
 8012294:	4629      	mov	r1, r5
 8012296:	bf28      	it	cs
 8012298:	4632      	movcs	r2, r6
 801229a:	f7fe f8be 	bl	801041a <memcpy>
 801229e:	4629      	mov	r1, r5
 80122a0:	4638      	mov	r0, r7
 80122a2:	f7fe ff21 	bl	80110e8 <_free_r>
 80122a6:	e7f1      	b.n	801228c <_realloc_r+0x40>

080122a8 <__ascii_wctomb>:
 80122a8:	4603      	mov	r3, r0
 80122aa:	4608      	mov	r0, r1
 80122ac:	b141      	cbz	r1, 80122c0 <__ascii_wctomb+0x18>
 80122ae:	2aff      	cmp	r2, #255	@ 0xff
 80122b0:	d904      	bls.n	80122bc <__ascii_wctomb+0x14>
 80122b2:	228a      	movs	r2, #138	@ 0x8a
 80122b4:	601a      	str	r2, [r3, #0]
 80122b6:	f04f 30ff 	mov.w	r0, #4294967295
 80122ba:	4770      	bx	lr
 80122bc:	700a      	strb	r2, [r1, #0]
 80122be:	2001      	movs	r0, #1
 80122c0:	4770      	bx	lr
	...

080122c4 <fiprintf>:
 80122c4:	b40e      	push	{r1, r2, r3}
 80122c6:	b503      	push	{r0, r1, lr}
 80122c8:	4601      	mov	r1, r0
 80122ca:	ab03      	add	r3, sp, #12
 80122cc:	4805      	ldr	r0, [pc, #20]	@ (80122e4 <fiprintf+0x20>)
 80122ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80122d2:	6800      	ldr	r0, [r0, #0]
 80122d4:	9301      	str	r3, [sp, #4]
 80122d6:	f7ff fd03 	bl	8011ce0 <_vfiprintf_r>
 80122da:	b002      	add	sp, #8
 80122dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80122e0:	b003      	add	sp, #12
 80122e2:	4770      	bx	lr
 80122e4:	2000001c 	.word	0x2000001c

080122e8 <abort>:
 80122e8:	b508      	push	{r3, lr}
 80122ea:	2006      	movs	r0, #6
 80122ec:	f000 f834 	bl	8012358 <raise>
 80122f0:	2001      	movs	r0, #1
 80122f2:	f7f1 fd25 	bl	8003d40 <_exit>

080122f6 <_malloc_usable_size_r>:
 80122f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122fa:	1f18      	subs	r0, r3, #4
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	bfbc      	itt	lt
 8012300:	580b      	ldrlt	r3, [r1, r0]
 8012302:	18c0      	addlt	r0, r0, r3
 8012304:	4770      	bx	lr

08012306 <_raise_r>:
 8012306:	291f      	cmp	r1, #31
 8012308:	b538      	push	{r3, r4, r5, lr}
 801230a:	4605      	mov	r5, r0
 801230c:	460c      	mov	r4, r1
 801230e:	d904      	bls.n	801231a <_raise_r+0x14>
 8012310:	2316      	movs	r3, #22
 8012312:	6003      	str	r3, [r0, #0]
 8012314:	f04f 30ff 	mov.w	r0, #4294967295
 8012318:	bd38      	pop	{r3, r4, r5, pc}
 801231a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801231c:	b112      	cbz	r2, 8012324 <_raise_r+0x1e>
 801231e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012322:	b94b      	cbnz	r3, 8012338 <_raise_r+0x32>
 8012324:	4628      	mov	r0, r5
 8012326:	f000 f831 	bl	801238c <_getpid_r>
 801232a:	4622      	mov	r2, r4
 801232c:	4601      	mov	r1, r0
 801232e:	4628      	mov	r0, r5
 8012330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012334:	f000 b818 	b.w	8012368 <_kill_r>
 8012338:	2b01      	cmp	r3, #1
 801233a:	d00a      	beq.n	8012352 <_raise_r+0x4c>
 801233c:	1c59      	adds	r1, r3, #1
 801233e:	d103      	bne.n	8012348 <_raise_r+0x42>
 8012340:	2316      	movs	r3, #22
 8012342:	6003      	str	r3, [r0, #0]
 8012344:	2001      	movs	r0, #1
 8012346:	e7e7      	b.n	8012318 <_raise_r+0x12>
 8012348:	2100      	movs	r1, #0
 801234a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801234e:	4620      	mov	r0, r4
 8012350:	4798      	blx	r3
 8012352:	2000      	movs	r0, #0
 8012354:	e7e0      	b.n	8012318 <_raise_r+0x12>
	...

08012358 <raise>:
 8012358:	4b02      	ldr	r3, [pc, #8]	@ (8012364 <raise+0xc>)
 801235a:	4601      	mov	r1, r0
 801235c:	6818      	ldr	r0, [r3, #0]
 801235e:	f7ff bfd2 	b.w	8012306 <_raise_r>
 8012362:	bf00      	nop
 8012364:	2000001c 	.word	0x2000001c

08012368 <_kill_r>:
 8012368:	b538      	push	{r3, r4, r5, lr}
 801236a:	4d07      	ldr	r5, [pc, #28]	@ (8012388 <_kill_r+0x20>)
 801236c:	2300      	movs	r3, #0
 801236e:	4604      	mov	r4, r0
 8012370:	4608      	mov	r0, r1
 8012372:	4611      	mov	r1, r2
 8012374:	602b      	str	r3, [r5, #0]
 8012376:	f7f1 fcd3 	bl	8003d20 <_kill>
 801237a:	1c43      	adds	r3, r0, #1
 801237c:	d102      	bne.n	8012384 <_kill_r+0x1c>
 801237e:	682b      	ldr	r3, [r5, #0]
 8012380:	b103      	cbz	r3, 8012384 <_kill_r+0x1c>
 8012382:	6023      	str	r3, [r4, #0]
 8012384:	bd38      	pop	{r3, r4, r5, pc}
 8012386:	bf00      	nop
 8012388:	20005068 	.word	0x20005068

0801238c <_getpid_r>:
 801238c:	f7f1 bcc0 	b.w	8003d10 <_getpid>

08012390 <_init>:
 8012390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012392:	bf00      	nop
 8012394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012396:	bc08      	pop	{r3}
 8012398:	469e      	mov	lr, r3
 801239a:	4770      	bx	lr

0801239c <_fini>:
 801239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801239e:	bf00      	nop
 80123a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123a2:	bc08      	pop	{r3}
 80123a4:	469e      	mov	lr, r3
 80123a6:	4770      	bx	lr
