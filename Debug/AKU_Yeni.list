
AKU_Yeni.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ef0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cec  080160c0  080160c0  000170c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016dac  08016dac  000181d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016dac  08016dac  00017dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016db4  08016db4  000181d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016db4  08016db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016db8  08016db8  00017db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08016dbc  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e60  200001d8  08016f94  000181d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005038  08016f94  00019038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002754c  00000000  00000000  00018208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060df  00000000  00000000  0003f754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002198  00000000  00000000  00045838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a03  00000000  00000000  000479d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af18  00000000  00000000  000493d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e8f0  00000000  00000000  000742eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8d40  00000000  00000000  000a2bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b91b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a01c  00000000  00000000  0018b960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0019597c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080160a8 	.word	0x080160a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080160a8 	.word	0x080160a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <BMI088_Init_I2C>:
 *
 */

uint8_t BMI088_Init_I2C(BMI088 *imu,
                        I2C_HandleTypeDef *i2cHandle,
                        uint8_t accAddress, uint8_t gyrAddress) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	460b      	mov	r3, r1
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	4613      	mov	r3, r2
 8001008:	71bb      	strb	r3, [r7, #6]

    imu->i2cHandle = i2cHandle;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	601a      	str	r2, [r3, #0]
    imu->accAddress = 0x18 << 1;  // = 0x30
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2230      	movs	r2, #48	@ 0x30
 8001014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    imu->gyrAddress = 0x68 << 1;  // = 0xD0
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	22d0      	movs	r2, #208	@ 0xd0
 800101c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    imu->readingAcc = 0;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    imu->readingGyr = 0;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    uint8_t status = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	75fb      	strb	r3, [r7, #23]
    uint8_t data = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	75bb      	strb	r3, [r7, #22]

    if (HAL_I2C_IsDeviceReady(i2cHandle, 0x68 << 1, 3, 100) == HAL_OK) {
 8001038:	2364      	movs	r3, #100	@ 0x64
 800103a:	2203      	movs	r2, #3
 800103c:	21d0      	movs	r1, #208	@ 0xd0
 800103e:	68b8      	ldr	r0, [r7, #8]
 8001040:	f004 fe6e 	bl	8005d20 <HAL_I2C_IsDeviceReady>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <BMI088_Init_I2C+0x5c>
        // BMI bulundu
    	printf("ok");
 800104a:	4891      	ldr	r0, [pc, #580]	@ (8001290 <BMI088_Init_I2C+0x29c>)
 800104c:	f012 f8ba 	bl	80131c4 <iprintf>
    } else {
        // BMI bağlı değil / bus kitli
    }

    if (HAL_I2C_IsDeviceReady(i2cHandle, imu->accAddress, 3, 100) == HAL_OK)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001056:	4619      	mov	r1, r3
 8001058:	2364      	movs	r3, #100	@ 0x64
 800105a:	2203      	movs	r2, #3
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f004 fe5f 	bl	8005d20 <HAL_I2C_IsDeviceReady>
     * ACCELEROMETER
     *
     */

    // Soft reset accelerometer
    data = 0xB6;
 8001062:	23b6      	movs	r3, #182	@ 0xb6
 8001064:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_SOFTRESET, 1, &data, 1, HAL_MAX_DELAY);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2301      	movs	r3, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	f107 0316 	add.w	r3, r7, #22
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	227e      	movs	r2, #126	@ 0x7e
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f004 fb20 	bl	80056c8 <HAL_I2C_Mem_Write>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	4413      	add	r3, r2
 8001090:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(50);
 8001092:	2032      	movs	r0, #50	@ 0x32
 8001094:	f003 f9b6 	bl	8004404 <HAL_Delay>

    // Read and check chip ID
    status += HAL_I2C_Mem_Read(i2cHandle, imu->accAddress, BMI_ACC_CHIP_ID, 1, &data, 1, HAL_MAX_DELAY);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	2301      	movs	r3, #1
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	f107 0316 	add.w	r3, r7, #22
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	2200      	movs	r2, #0
 80010b4:	68b8      	ldr	r0, [r7, #8]
 80010b6:	f004 fc01 	bl	80058bc <HAL_I2C_Mem_Read>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	4413      	add	r3, r2
 80010c2:	75fb      	strb	r3, [r7, #23]
    if (data != 0x1E) {
 80010c4:	7dbb      	ldrb	r3, [r7, #22]
 80010c6:	2b1e      	cmp	r3, #30
 80010c8:	d001      	beq.n	80010ce <BMI088_Init_I2C+0xda>
        return 1; // ACC chip ID mismatch
 80010ca:	2301      	movs	r3, #1
 80010cc:	e175      	b.n	80013ba <BMI088_Init_I2C+0x3c6>
    }

    HAL_Delay(10);
 80010ce:	200a      	movs	r0, #10
 80010d0:	f003 f998 	bl	8004404 <HAL_Delay>

    // Configure accelerometer
    data = 0xA8;
 80010d4:	23a8      	movs	r3, #168	@ 0xa8
 80010d6:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_CONF, 1, &data, 1, HAL_MAX_DELAY);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	9302      	str	r3, [sp, #8]
 80010e6:	2301      	movs	r3, #1
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	f107 0316 	add.w	r3, r7, #22
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	2240      	movs	r2, #64	@ 0x40
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f004 fae7 	bl	80056c8 <HAL_I2C_Mem_Write>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	4413      	add	r3, r2
 8001102:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f003 f97d 	bl	8004404 <HAL_Delay>

    data = 0x00; // ±3g
 800110a:	2300      	movs	r3, #0
 800110c:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_RANGE, 1, &data, 1, HAL_MAX_DELAY);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	2301      	movs	r3, #1
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	f107 0316 	add.w	r3, r7, #22
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	2241      	movs	r2, #65	@ 0x41
 800112a:	68b8      	ldr	r0, [r7, #8]
 800112c:	f004 facc 	bl	80056c8 <HAL_I2C_Mem_Write>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	4413      	add	r3, r2
 8001138:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 800113a:	200a      	movs	r0, #10
 800113c:	f003 f962 	bl	8004404 <HAL_Delay>

    // Enable accelerometer interrupts (optional)
    data = 0x0A;
 8001140:	230a      	movs	r3, #10
 8001142:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_INT1_IO_CONF, 1, &data, 1, HAL_MAX_DELAY);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	f107 0316 	add.w	r3, r7, #22
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	2253      	movs	r2, #83	@ 0x53
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f004 fab1 	bl	80056c8 <HAL_I2C_Mem_Write>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	4413      	add	r3, r2
 800116e:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001170:	200a      	movs	r0, #10
 8001172:	f003 f947 	bl	8004404 <HAL_Delay>

    data = 0x04;
 8001176:	2304      	movs	r3, #4
 8001178:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_INT1_INT2_MAP_DATA, 1, &data, 1, HAL_MAX_DELAY);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001180:	4619      	mov	r1, r3
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	2301      	movs	r3, #1
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	f107 0316 	add.w	r3, r7, #22
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	2258      	movs	r2, #88	@ 0x58
 8001196:	68b8      	ldr	r0, [r7, #8]
 8001198:	f004 fa96 	bl	80056c8 <HAL_I2C_Mem_Write>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	4413      	add	r3, r2
 80011a4:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 80011a6:	200a      	movs	r0, #10
 80011a8:	f003 f92c 	bl	8004404 <HAL_Delay>

    // Power ON
    data = 0x00;
 80011ac:	2300      	movs	r3, #0
 80011ae:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_PWR_CONF, 1, &data, 1, HAL_MAX_DELAY);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2301      	movs	r3, #1
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	f107 0316 	add.w	r3, r7, #22
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	227c      	movs	r2, #124	@ 0x7c
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	f004 fa7b 	bl	80056c8 <HAL_I2C_Mem_Write>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	4413      	add	r3, r2
 80011da:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f003 f911 	bl	8004404 <HAL_Delay>

    data = 0x04;
 80011e2:	2304      	movs	r3, #4
 80011e4:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->accAddress, BMI_ACC_PWR_CTRL, 1, &data, 1, HAL_MAX_DELAY);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f107 0316 	add.w	r3, r7, #22
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	227d      	movs	r2, #125	@ 0x7d
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	f004 fa60 	bl	80056c8 <HAL_I2C_Mem_Write>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	4413      	add	r3, r2
 8001210:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001212:	200a      	movs	r0, #10
 8001214:	f003 f8f6 	bl	8004404 <HAL_Delay>

    imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a1e      	ldr	r2, [pc, #120]	@ (8001294 <BMI088_Init_I2C+0x2a0>)
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->accTxBuf[0] = BMI_ACC_DATA;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2212      	movs	r2, #18
 8001222:	711a      	strb	r2, [r3, #4]
     * GYROSCOPE
     *
     */

    // Soft reset gyro
    data = 0xB6;
 8001224:	23b6      	movs	r3, #182	@ 0xb6
 8001226:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_GYR_SOFTRESET, 1, &data, 1, HAL_MAX_DELAY);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	2301      	movs	r3, #1
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	f107 0316 	add.w	r3, r7, #22
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	2214      	movs	r2, #20
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f004 fa3f 	bl	80056c8 <HAL_I2C_Mem_Write>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	4413      	add	r3, r2
 8001252:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(250);
 8001254:	20fa      	movs	r0, #250	@ 0xfa
 8001256:	f003 f8d5 	bl	8004404 <HAL_Delay>

    // Read and check chip ID
    status += HAL_I2C_Mem_Read(i2cHandle, imu->gyrAddress, BMI_GYR_CHIP_ID, 1, &data, 1, HAL_MAX_DELAY);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	2301      	movs	r3, #1
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	f107 0316 	add.w	r3, r7, #22
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2301      	movs	r3, #1
 8001274:	2200      	movs	r2, #0
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f004 fb20 	bl	80058bc <HAL_I2C_Mem_Read>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	4413      	add	r3, r2
 8001284:	75fb      	strb	r3, [r7, #23]
    if (data != 0x0F) {
 8001286:	7dbb      	ldrb	r3, [r7, #22]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d005      	beq.n	8001298 <BMI088_Init_I2C+0x2a4>
        return 2; // GYR chip ID mismatch
 800128c:	2302      	movs	r3, #2
 800128e:	e094      	b.n	80013ba <BMI088_Init_I2C+0x3c6>
 8001290:	080160c0 	.word	0x080160c0
 8001294:	3a6b70a4 	.word	0x3a6b70a4
    }

    HAL_Delay(10);
 8001298:	200a      	movs	r0, #10
 800129a:	f003 f8b3 	bl	8004404 <HAL_Delay>

    // Configure gyroscope
    data = 0x01; // ±1000 dps
 800129e:	2301      	movs	r3, #1
 80012a0:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_GYR_RANGE, 1, &data, 1, HAL_MAX_DELAY);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	2301      	movs	r3, #1
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	f107 0316 	add.w	r3, r7, #22
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	220f      	movs	r2, #15
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f004 fa02 	bl	80056c8 <HAL_I2C_Mem_Write>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	4413      	add	r3, r2
 80012cc:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f003 f898 	bl	8004404 <HAL_Delay>

    data = 0x07;
 80012d4:	2307      	movs	r3, #7
 80012d6:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_GYR_BANDWIDTH, 1, &data, 1, HAL_MAX_DELAY);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 0316 	add.w	r3, r7, #22
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	2210      	movs	r2, #16
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f004 f9e7 	bl	80056c8 <HAL_I2C_Mem_Write>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	4413      	add	r3, r2
 8001302:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001304:	200a      	movs	r0, #10
 8001306:	f003 f87d 	bl	8004404 <HAL_Delay>

    // Gyro interrupts (optional)
    data = 0x80;
 800130a:	2380      	movs	r3, #128	@ 0x80
 800130c:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_GYR_INT_CTRL, 1, &data, 1, HAL_MAX_DELAY);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	2301      	movs	r3, #1
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	f107 0316 	add.w	r3, r7, #22
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	2215      	movs	r2, #21
 800132a:	68b8      	ldr	r0, [r7, #8]
 800132c:	f004 f9cc 	bl	80056c8 <HAL_I2C_Mem_Write>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	4413      	add	r3, r2
 8001338:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 800133a:	200a      	movs	r0, #10
 800133c:	f003 f862 	bl	8004404 <HAL_Delay>

    data = 0x01;
 8001340:	2301      	movs	r3, #1
 8001342:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_INT3_INT4_IO_CONF, 1, &data, 1, HAL_MAX_DELAY);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2301      	movs	r3, #1
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	f107 0316 	add.w	r3, r7, #22
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	2216      	movs	r2, #22
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	f004 f9b1 	bl	80056c8 <HAL_I2C_Mem_Write>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	4413      	add	r3, r2
 800136e:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 8001370:	200a      	movs	r0, #10
 8001372:	f003 f847 	bl	8004404 <HAL_Delay>

    data = 0x01;
 8001376:	2301      	movs	r3, #1
 8001378:	75bb      	strb	r3, [r7, #22]
    status += HAL_I2C_Mem_Write(i2cHandle, imu->gyrAddress, BMI_INT3_INT4_IO_MAP, 1, &data, 1, HAL_MAX_DELAY);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2301      	movs	r3, #1
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	f107 0316 	add.w	r3, r7, #22
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2301      	movs	r3, #1
 8001394:	2218      	movs	r2, #24
 8001396:	68b8      	ldr	r0, [r7, #8]
 8001398:	f004 f996 	bl	80056c8 <HAL_I2C_Mem_Write>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	4413      	add	r3, r2
 80013a4:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f003 f82c 	bl	8004404 <HAL_Delay>

    imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <BMI088_Init_I2C+0x3d0>)
 80013b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->gyrTxBuf[0] = BMI_GYR_DATA;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2202      	movs	r2, #2
 80013b6:	72da      	strb	r2, [r3, #11]

    return status;
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	3a0ba058 	.word	0x3a0ba058

080013c8 <rollpitchyaw>:

uint8_t rollpitchyaw(BMI088 *imu){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	ed2d 8b02 	vpush	{d8}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
           // Derece cinsinden yön açısı



	    uint32_t now = HAL_GetTick();  // ms
 80013d4:	f003 f80a 	bl	80043ec <HAL_GetTick>
 80013d8:	61f8      	str	r0, [r7, #28]
	    float dt = (now - lastTime) / 1000.0f;
 80013da:	4b51      	ldr	r3, [pc, #324]	@ (8001520 <rollpitchyaw+0x158>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ea:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8001524 <rollpitchyaw+0x15c>
 80013ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f2:	edc7 7a06 	vstr	s15, [r7, #24]
	    lastTime = now;
 80013f6:	4a4a      	ldr	r2, [pc, #296]	@ (8001520 <rollpitchyaw+0x158>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	6013      	str	r3, [r2, #0]

	    // İvme verilerini oku
	    float acc_x = imu->acc_mps2[0];
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	617b      	str	r3, [r7, #20]
	    float acc_y = imu->acc_mps2[1];
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	613b      	str	r3, [r7, #16]
	    float acc_z = imu->acc_mps2[2];
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	60fb      	str	r3, [r7, #12]

	    // Roll ve pitch hesapla (ivme verisi ile)
	    roll  = atan2f(acc_y, acc_z) * 180.0f / 3.14159f;
 800140e:	edd7 0a03 	vldr	s1, [r7, #12]
 8001412:	ed97 0a04 	vldr	s0, [r7, #16]
 8001416:	f014 f8eb 	bl	80155f0 <atan2f>
 800141a:	eef0 7a40 	vmov.f32	s15, s0
 800141e:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001528 <rollpitchyaw+0x160>
 8001422:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001426:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800152c <rollpitchyaw+0x164>
 800142a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142e:	4b40      	ldr	r3, [pc, #256]	@ (8001530 <rollpitchyaw+0x168>)
 8001430:	edc3 7a00 	vstr	s15, [r3]
	  	pitch = atan2f(-acc_x, sqrtf(acc_y * acc_y + acc_z * acc_z)) * 180.0f / 3.14159f;
 8001434:	edd7 7a05 	vldr	s15, [r7, #20]
 8001438:	eeb1 8a67 	vneg.f32	s16, s15
 800143c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001440:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001444:	edd7 7a03 	vldr	s15, [r7, #12]
 8001448:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800144c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001450:	eeb0 0a67 	vmov.f32	s0, s15
 8001454:	f014 f926 	bl	80156a4 <sqrtf>
 8001458:	eef0 7a40 	vmov.f32	s15, s0
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	eeb0 0a48 	vmov.f32	s0, s16
 8001464:	f014 f8c4 	bl	80155f0 <atan2f>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001528 <rollpitchyaw+0x160>
 8001470:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001474:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 800152c <rollpitchyaw+0x164>
 8001478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147c:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <rollpitchyaw+0x16c>)
 800147e:	edc3 7a00 	vstr	s15, [r3]

	    // Yaw hesapla (gyro verisi ile)
	    float gyro_z_deg = (imu->gyr_rps[2] - gyro_z_offset) * 180.0f / 3.14159f;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001488:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <rollpitchyaw+0x170>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001492:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001528 <rollpitchyaw+0x160>
 8001496:	ee27 7a87 	vmul.f32	s14, s15, s14
 800149a:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800152c <rollpitchyaw+0x164>
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	edc7 7a02 	vstr	s15, [r7, #8]
	    yaw += gyro_z_deg * dt;
 80014a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80014aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b2:	4b22      	ldr	r3, [pc, #136]	@ (800153c <rollpitchyaw+0x174>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <rollpitchyaw+0x174>)
 80014be:	edc3 7a00 	vstr	s15, [r3]

	    // Yaw açısını -180 ~ +180 arasında tut
	    if (yaw > 180.0f) yaw -= 360.0f;
 80014c2:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <rollpitchyaw+0x174>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001528 <rollpitchyaw+0x160>
 80014cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	dd09      	ble.n	80014ea <rollpitchyaw+0x122>
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <rollpitchyaw+0x174>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001540 <rollpitchyaw+0x178>
 80014e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014e4:	4b15      	ldr	r3, [pc, #84]	@ (800153c <rollpitchyaw+0x174>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]
	    if (yaw < -180.0f) yaw += 360.0f;
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <rollpitchyaw+0x174>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001544 <rollpitchyaw+0x17c>
 80014f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	d509      	bpl.n	8001512 <rollpitchyaw+0x14a>
 80014fe:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <rollpitchyaw+0x174>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001540 <rollpitchyaw+0x178>
 8001508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <rollpitchyaw+0x174>)
 800150e:	edc3 7a00 	vstr	s15, [r3]

	    return 1;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	ecbd 8b02 	vpop	{d8}
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200001f4 	.word	0x200001f4
 8001524:	447a0000 	.word	0x447a0000
 8001528:	43340000 	.word	0x43340000
 800152c:	40490fd0 	.word	0x40490fd0
 8001530:	20000280 	.word	0x20000280
 8001534:	20000284 	.word	0x20000284
 8001538:	200001f8 	.word	0x200001f8
 800153c:	20000288 	.word	0x20000288
 8001540:	43b40000 	.word	0x43b40000
 8001544:	c3340000 	.word	0xc3340000

08001548 <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b08c      	sub	sp, #48	@ 0x30
 800154c:	af04      	add	r7, sp, #16
 800154e:	6078      	str	r0, [r7, #4]
	uint8_t acc_raw[6];
		  int16_t acc_x_raw, acc_y_raw, acc_z_raw;
		  float accel_range_factor; // ACC_RANGE register'ına göre hesaplanacak

		  // 0x12'den 6 byte oku (X_LSB, X_MSB, Y_LSB, Y_MSB, Z_LSB, Z_MSB)
		  HAL_I2C_Mem_Read(imu->i2cHandle, imu->accAddress, 0x12, 1, acc_raw, 6, 100);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800155a:	4619      	mov	r1, r3
 800155c:	2364      	movs	r3, #100	@ 0x64
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	2306      	movs	r3, #6
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2301      	movs	r3, #1
 800156c:	2212      	movs	r2, #18
 800156e:	f004 f9a5 	bl	80058bc <HAL_I2C_Mem_Read>

		  // RAW verileri 16-bit signed sayıya dönüştür
		  acc_x_raw = (int16_t)((acc_raw[1] << 8) | acc_raw[0]);
 8001572:	7b7b      	ldrb	r3, [r7, #13]
 8001574:	b21b      	sxth	r3, r3
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7b3b      	ldrb	r3, [r7, #12]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	83fb      	strh	r3, [r7, #30]
		  acc_y_raw = (int16_t)((acc_raw[3] << 8) | acc_raw[2]);
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	b21b      	sxth	r3, r3
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21a      	sxth	r2, r3
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	83bb      	strh	r3, [r7, #28]
		  acc_z_raw = (int16_t)((acc_raw[5] << 8) | acc_raw[4]);
 8001592:	7c7b      	ldrb	r3, [r7, #17]
 8001594:	b21b      	sxth	r3, r3
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	7c3b      	ldrb	r3, [r7, #16]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	837b      	strh	r3, [r7, #26]

		  // ACC_RANGE register (0x41) oku
		  uint8_t acc_range_raw;
		  HAL_I2C_Mem_Read(imu->i2cHandle, imu->accAddress, 0x41, 1, &acc_range_raw, 1, 100);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015ac:	4619      	mov	r1, r3
 80015ae:	2364      	movs	r3, #100	@ 0x64
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	2301      	movs	r3, #1
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	f107 030b 	add.w	r3, r7, #11
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	2241      	movs	r2, #65	@ 0x41
 80015c0:	f004 f97c 	bl	80058bc <HAL_I2C_Mem_Read>

		  // range: 0 → ±3g, 1 → ±6g, 2 → ±12g, 3 → ±24g gibi olabilir (datasheet'e göre)
		  accel_range_factor = powf(2, (acc_range_raw + 1)) * 1.5f;  // g cinsinden
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	3301      	adds	r3, #1
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d0:	eef0 0a67 	vmov.f32	s1, s15
 80015d4:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80015d8:	f014 f80c 	bl	80155f4 <powf>
 80015dc:	eef0 7a40 	vmov.f32	s15, s0
 80015e0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80015e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e8:	edc7 7a05 	vstr	s15, [r7, #20]

		  // mg → m/s² dönüşüm (1g = 9.80665 m/s²)
		  imu->acc_mps2[0] = ((float)acc_x_raw / 32768.0f) * accel_range_factor * 9.80665f;
 80015ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001674 <BMI088_ReadAccelerometer+0x12c>
 80015fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001600:	edd7 7a05 	vldr	s15, [r7, #20]
 8001604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001608:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001678 <BMI088_ReadAccelerometer+0x130>
 800160c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	edc3 7a05 	vstr	s15, [r3, #20]
		  imu->acc_mps2[1] = ((float)acc_y_raw / 32768.0f) * accel_range_factor * 9.80665f;
 8001616:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001622:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001674 <BMI088_ReadAccelerometer+0x12c>
 8001626:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800162a:	edd7 7a05 	vldr	s15, [r7, #20]
 800162e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001632:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001678 <BMI088_ReadAccelerometer+0x130>
 8001636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	edc3 7a06 	vstr	s15, [r3, #24]
		  imu->acc_mps2[2] = ((float)acc_z_raw / 32768.0f) * accel_range_factor * 9.80665f;
 8001640:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001674 <BMI088_ReadAccelerometer+0x12c>
 8001650:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001654:	edd7 7a05 	vldr	s15, [r7, #20]
 8001658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001678 <BMI088_ReadAccelerometer+0x130>
 8001660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800166a:	bf00      	nop
 800166c:	4618      	mov	r0, r3
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	47000000 	.word	0x47000000
 8001678:	411ce80a 	.word	0x411ce80a

0800167c <BMI088_ReadGyroscope>:



uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	@ 0x30
 8001680:	af04      	add	r7, sp, #16
 8001682:	6078      	str	r0, [r7, #4]
	 uint8_t gyro_raw[6];
	    int16_t gyro_x_raw, gyro_y_raw, gyro_z_raw;
	    float gyro_sensitivity = 2000.0f / 32768.0f; // default range: ±2000 dps
 8001684:	4b3d      	ldr	r3, [pc, #244]	@ (800177c <BMI088_ReadGyroscope+0x100>)
 8001686:	61fb      	str	r3, [r7, #28]

	    // 0x02'den başlayarak 6 byte oku (X_LSB, X_MSB, Y_LSB, Y_MSB, Z_LSB, Z_MSB)
	    if (HAL_I2C_Mem_Read(imu->i2cHandle, imu->gyrAddress, 0x02, 1, gyro_raw, 6, 100) != HAL_OK) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001692:	4619      	mov	r1, r3
 8001694:	2364      	movs	r3, #100	@ 0x64
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2306      	movs	r3, #6
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2202      	movs	r2, #2
 80016a6:	f004 f909 	bl	80058bc <HAL_I2C_Mem_Read>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <BMI088_ReadGyroscope+0x38>
	        return 1; // Hata
 80016b0:	2301      	movs	r3, #1
 80016b2:	e05f      	b.n	8001774 <BMI088_ReadGyroscope+0xf8>
	    }

	    // 16-bit signed dönüşüm (MSB önce shiftlenir)
	    gyro_x_raw = (int16_t)((gyro_raw[1] << 8) | gyro_raw[0]);
 80016b4:	7a7b      	ldrb	r3, [r7, #9]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	7a3b      	ldrb	r3, [r7, #8]
 80016be:	b21b      	sxth	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	837b      	strh	r3, [r7, #26]
	    gyro_y_raw = (int16_t)((gyro_raw[3] << 8) | gyro_raw[2]);
 80016c4:	7afb      	ldrb	r3, [r7, #11]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	7abb      	ldrb	r3, [r7, #10]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	833b      	strh	r3, [r7, #24]
	    gyro_z_raw = (int16_t)((gyro_raw[5] << 8) | gyro_raw[4]);
 80016d4:	7b7b      	ldrb	r3, [r7, #13]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	7b3b      	ldrb	r3, [r7, #12]
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	82fb      	strh	r3, [r7, #22]
	    // Açısal hızları hesapla (dps cinsinden)
	        imu->gyr_dps[0] = (float)gyro_x_raw * gyro_sensitivity;
 80016e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	        imu->gyr_dps[1] = (float)gyro_y_raw * gyro_sensitivity;
 80016fe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170a:	edd7 7a07 	vldr	s15, [r7, #28]
 800170e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	        imu->gyr_dps[2] = (float)gyro_z_raw * gyro_sensitivity;
 8001718:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001724:	edd7 7a07 	vldr	s15, [r7, #28]
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	        // Eğer rad/s istiyorsan ayrıca şunu da hesaplayabilirsin:
	        float deg2rad = 3.14159f / 180.0f;
 8001732:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <BMI088_ReadGyroscope+0x104>)
 8001734:	613b      	str	r3, [r7, #16]
	        imu->gyr_rps[0] = imu->gyr_dps[0] * deg2rad;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800173c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edc3 7a08 	vstr	s15, [r3, #32]
	        imu->gyr_rps[1] = imu->gyr_dps[1] * deg2rad;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001750:	edd7 7a04 	vldr	s15, [r7, #16]
 8001754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	        imu->gyr_rps[2] = imu->gyr_dps[2] * deg2rad;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001764:	edd7 7a04 	vldr	s15, [r7, #16]
 8001768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	        return 0;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	3d7a0000 	.word	0x3d7a0000
 8001780:	3c8efa2e 	.word	0x3c8efa2e

08001784 <configureLoRa>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
LoRa configureLoRa(){
 8001784:	b4b0      	push	{r4, r5, r7}
 8001786:	b08f      	sub	sp, #60	@ 0x3c
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
	void main(void) {
	    myLoRa = configureLoRa();  // ✅ Geçerli — stack’e kopyalanır
	    LoRa_init(&myLoRa);        // ✅ Pointer olarak gönderilir
	}

	myLoRa.CS_port         = NSS_GPIO_Port;
 8001792:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <configureLoRa+0x74>)
 8001794:	60bb      	str	r3, [r7, #8]
		myLoRa.CS_pin          = NSS_Pin;
 8001796:	2310      	movs	r3, #16
 8001798:	81bb      	strh	r3, [r7, #12]
		myLoRa.reset_port      = RST_GPIO_Port;
 800179a:	4b17      	ldr	r3, [pc, #92]	@ (80017f8 <configureLoRa+0x74>)
 800179c:	613b      	str	r3, [r7, #16]
		myLoRa.reset_pin       = RST_Pin;
 800179e:	2308      	movs	r3, #8
 80017a0:	82bb      	strh	r3, [r7, #20]
		myLoRa.DIO0_port       = DIO0_GPIO_Port;
 80017a2:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <configureLoRa+0x78>)
 80017a4:	61bb      	str	r3, [r7, #24]
		myLoRa.DIO0_pin        = DIO0_Pin;
 80017a6:	2310      	movs	r3, #16
 80017a8:	83bb      	strh	r3, [r7, #28]
		myLoRa.hSPIx           = &hspi1;
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <configureLoRa+0x7c>)
 80017ac:	623b      	str	r3, [r7, #32]

		myLoRa.frequency             = 433.663   ;
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <configureLoRa+0x80>)
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		myLoRa.spredingFactor        = SF_7      ;
 80017b2:	2307      	movs	r3, #7
 80017b4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		myLoRa.bandWidth			 = BW_500KHz ;
 80017b8:	2309      	movs	r3, #9
 80017ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		myLoRa.crcRate               = CR_4_5    ;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		myLoRa.power				 = POWER_20db;
 80017c4:	23ff      	movs	r3, #255	@ 0xff
 80017c6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		myLoRa.overCurrentProtection = 250       ;
 80017ca:	23fa      	movs	r3, #250	@ 0xfa
 80017cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		myLoRa.preamble			     = 8         ;
 80017d0:	2308      	movs	r3, #8
 80017d2:	863b      	strh	r3, [r7, #48]	@ 0x30

	return myLoRa;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	461d      	mov	r5, r3
 80017d8:	f107 0408 	add.w	r4, r7, #8
 80017dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	373c      	adds	r7, #60	@ 0x3c
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bcb0      	pop	{r4, r5, r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020800 	.word	0x40020800
 8001800:	20000e34 	.word	0x20000e34
 8001804:	43d8d4dd 	.word	0x43d8d4dd

08001808 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001812:	2101      	movs	r1, #1
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fa1e 	bl	8001c56 <LoRa_read>
 800181a:	4603      	mov	r3, r0
 800181c:	73bb      	strb	r3, [r7, #14]
	data = read;
 800181e:	7bbb      	ldrb	r3, [r7, #14]
 8001820:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001828:	7bbb      	ldrb	r3, [r7, #14]
 800182a:	f023 0307 	bic.w	r3, r3, #7
 800182e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
 8001836:	e03e      	b.n	80018b6 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d10c      	bne.n	8001858 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800183e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001842:	f023 0307 	bic.w	r3, r3, #7
 8001846:	b25b      	sxtb	r3, r3
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	b25b      	sxtb	r3, r3
 800184e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	61da      	str	r2, [r3, #28]
 8001856:	e02e      	b.n	80018b6 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d10c      	bne.n	8001878 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800185e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001862:	f023 0307 	bic.w	r3, r3, #7
 8001866:	b25b      	sxtb	r3, r3
 8001868:	f043 0303 	orr.w	r3, r3, #3
 800186c:	b25b      	sxtb	r3, r3
 800186e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2203      	movs	r2, #3
 8001874:	61da      	str	r2, [r3, #28]
 8001876:	e01e      	b.n	80018b6 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2b05      	cmp	r3, #5
 800187c:	d10c      	bne.n	8001898 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 800187e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001882:	f023 0307 	bic.w	r3, r3, #7
 8001886:	b25b      	sxtb	r3, r3
 8001888:	f043 0305 	orr.w	r3, r3, #5
 800188c:	b25b      	sxtb	r3, r3
 800188e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2205      	movs	r2, #5
 8001894:	61da      	str	r2, [r3, #28]
 8001896:	e00e      	b.n	80018b6 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	2b06      	cmp	r3, #6
 800189c:	d10b      	bne.n	80018b6 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 800189e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018a2:	f023 0307 	bic.w	r3, r3, #7
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	f043 0306 	orr.w	r3, r3, #6
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2206      	movs	r2, #6
 80018b4:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	461a      	mov	r2, r3
 80018ba:	2101      	movs	r1, #1
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f9e4 	bl	8001c8a <LoRa_write>
	//HAL_Delay(10);
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	4613      	mov	r3, r2
 80018d8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	889b      	ldrh	r3, [r3, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	f003 fd61 	bl	80053ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6998      	ldr	r0, [r3, #24]
 80018ee:	88fa      	ldrh	r2, [r7, #6]
 80018f0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	f007 fa01 	bl	8008cfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80018fa:	bf00      	nop
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4618      	mov	r0, r3
 8001902:	f007 ff0b 	bl	800971c <HAL_SPI_GetState>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d1f7      	bne.n	80018fc <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6998      	ldr	r0, [r3, #24]
 8001910:	8b3a      	ldrh	r2, [r7, #24]
 8001912:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	f007 fb34 	bl	8008f84 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800191c:	bf00      	nop
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	4618      	mov	r0, r3
 8001924:	f007 fefa 	bl	800971c <HAL_SPI_GetState>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	d1f7      	bne.n	800191e <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	889b      	ldrh	r3, [r3, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	4619      	mov	r1, r3
 800193a:	f003 fd37 	bl	80053ac <HAL_GPIO_WritePin>
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4613      	mov	r3, r2
 8001954:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	f003 fd23 	bl	80053ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6998      	ldr	r0, [r3, #24]
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	f007 f9c3 	bl	8008cfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001976:	bf00      	nop
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4618      	mov	r0, r3
 800197e:	f007 fecd 	bl	800971c <HAL_SPI_GetState>
 8001982:	4603      	mov	r3, r0
 8001984:	2b01      	cmp	r3, #1
 8001986:	d1f7      	bne.n	8001978 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6998      	ldr	r0, [r3, #24]
 800198c:	8b3a      	ldrh	r2, [r7, #24]
 800198e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	f007 f9b2 	bl	8008cfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001998:	bf00      	nop
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 febc 	bl	800971c <HAL_SPI_GetState>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d1f7      	bne.n	800199a <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	889b      	ldrh	r3, [r3, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	4619      	mov	r1, r3
 80019b6:	f003 fcf9 	bl	80053ac <HAL_GPIO_WritePin>
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 80019ce:	2126      	movs	r1, #38	@ 0x26
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f940 	bl	8001c56 <LoRa_read>
 80019d6:	4603      	mov	r3, r0
 80019d8:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d004      	beq.n	80019ea <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 80019e0:	7bbb      	ldrb	r3, [r7, #14]
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	e003      	b.n	80019f2 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 80019ea:	7bbb      	ldrb	r3, [r7, #14]
 80019ec:	f023 0308 	bic.w	r3, r3, #8
 80019f0:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	461a      	mov	r2, r3
 80019f6:	2126      	movs	r1, #38	@ 0x26
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f946 	bl	8001c8a <LoRa_write>
	HAL_Delay(10);
 80019fe:	200a      	movs	r0, #10
 8001a00:	f002 fd00 	bl	8004404 <HAL_Delay>
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b096      	sub	sp, #88	@ 0x58
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001a14:	4a17      	ldr	r2, [pc, #92]	@ (8001a74 <LoRa_setAutoLDO+0x68>)
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	2250      	movs	r2, #80	@ 0x50
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f011 fe2b 	bl	801367a <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	4093      	lsls	r3, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd97 	bl	8000564 <__aeabi_i2d>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	3358      	adds	r3, #88	@ 0x58
 8001a40:	443b      	add	r3, r7
 8001a42:	3b50      	subs	r3, #80	@ 0x50
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	f7fe ff20 	bl	800088c <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f7ff f8a0 	bl	8000b98 <__aeabi_d2iz>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	bfcc      	ite	gt
 8001a5e:	2301      	movgt	r3, #1
 8001a60:	2300      	movle	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffab 	bl	80019c2 <LoRa_setLowDaraRateOptimization>
}
 8001a6c:	bf00      	nop
 8001a6e:	3758      	adds	r7, #88	@ 0x58
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	080160c8 	.word	0x080160c8

08001a78 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, float freq){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	ed87 0a00 	vstr	s0, [r7]
	uint8_t  data;
	uint32_t F;
	F = (uint32_t)((freq * 1000000.0) / 61.03515625);
 8001a84:	6838      	ldr	r0, [r7, #0]
 8001a86:	f7fe fd7f 	bl	8000588 <__aeabi_f2d>
 8001a8a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001b08 <LoRa_setFrequency+0x90>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fdd2 	bl	8000638 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	a31c      	add	r3, pc, #112	@ (adr r3, 8001b10 <LoRa_setFrequency+0x98>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fef3 	bl	800088c <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f89b 	bl	8000be8 <__aeabi_d2uiz>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2106      	movs	r1, #6
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f8e1 	bl	8001c8a <LoRa_write>
	HAL_Delay(5);
 8001ac8:	2005      	movs	r0, #5
 8001aca:	f002 fc9b 	bl	8004404 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2107      	movs	r1, #7
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f8d5 	bl	8001c8a <LoRa_write>
	HAL_Delay(5);
 8001ae0:	2005      	movs	r0, #5
 8001ae2:	f002 fc8f 	bl	8004404 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001aea:	7afb      	ldrb	r3, [r7, #11]
 8001aec:	461a      	mov	r2, r3
 8001aee:	2108      	movs	r1, #8
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f8ca 	bl	8001c8a <LoRa_write>
	HAL_Delay(5);
 8001af6:	2005      	movs	r0, #5
 8001af8:	f002 fc84 	bl	8004404 <HAL_Delay>
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	f3af 8000 	nop.w
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	412e8480 	.word	0x412e8480
 8001b10:	00000000 	.word	0x00000000
 8001b14:	404e8480 	.word	0x404e8480

08001b18 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	dd01      	ble.n	8001b2c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	dc01      	bgt.n	8001b36 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001b32:	2307      	movs	r3, #7
 8001b34:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001b36:	211e      	movs	r1, #30
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f88c 	bl	8001c56 <LoRa_read>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001b42:	200a      	movs	r0, #10
 8001b44:	f002 fc5e 	bl	8004404 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	211e      	movs	r1, #30
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f891 	bl	8001c8a <LoRa_write>
	HAL_Delay(10);
 8001b68:	200a      	movs	r0, #10
 8001b6a:	f002 fc4b 	bl	8004404 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ff4c 	bl	8001a0c <LoRa_setAutoLDO>
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2109      	movs	r1, #9
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f87b 	bl	8001c8a <LoRa_write>
	HAL_Delay(10);
 8001b94:	200a      	movs	r0, #10
 8001b96:	f002 fc35 	bl	8004404 <HAL_Delay>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	2b2c      	cmp	r3, #44	@ 0x2c
 8001bb8:	d801      	bhi.n	8001bbe <LoRa_setOCP+0x1a>
		current = 45;
 8001bba:	232d      	movs	r3, #45	@ 0x2d
 8001bbc:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	2bf0      	cmp	r3, #240	@ 0xf0
 8001bc2:	d901      	bls.n	8001bc8 <LoRa_setOCP+0x24>
		current = 240;
 8001bc4:	23f0      	movs	r3, #240	@ 0xf0
 8001bc6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	2b78      	cmp	r3, #120	@ 0x78
 8001bcc:	d809      	bhi.n	8001be2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	3b2d      	subs	r3, #45	@ 0x2d
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <LoRa_setOCP+0x78>)
 8001bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8001bd8:	1052      	asrs	r2, r2, #1
 8001bda:	17db      	asrs	r3, r3, #31
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e00b      	b.n	8001bfa <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	2bf0      	cmp	r3, #240	@ 0xf0
 8001be6:	d808      	bhi.n	8001bfa <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	331e      	adds	r3, #30
 8001bec:	4a0b      	ldr	r2, [pc, #44]	@ (8001c1c <LoRa_setOCP+0x78>)
 8001bee:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf2:	1092      	asrs	r2, r2, #2
 8001bf4:	17db      	asrs	r3, r3, #31
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	3320      	adds	r3, #32
 8001bfe:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	461a      	mov	r2, r3
 8001c04:	210b      	movs	r1, #11
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f83f 	bl	8001c8a <LoRa_write>
	HAL_Delay(10);
 8001c0c:	200a      	movs	r0, #10
 8001c0e:	f002 fbf9 	bl	8004404 <HAL_Delay>
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	66666667 	.word	0x66666667

08001c20 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001c28:	211e      	movs	r1, #30
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f813 	bl	8001c56 <LoRa_read>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	f043 0307 	orr.w	r3, r3, #7
 8001c3a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	211e      	movs	r1, #30
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f821 	bl	8001c8a <LoRa_write>
	HAL_Delay(10);
 8001c48:	200a      	movs	r0, #10
 8001c4a:	f002 fbdb 	bl	8004404 <HAL_Delay>
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af02      	add	r7, sp, #8
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001c6c:	f107 030f 	add.w	r3, r7, #15
 8001c70:	f107 010e 	add.w	r1, r7, #14
 8001c74:	2201      	movs	r2, #1
 8001c76:	9200      	str	r2, [sp, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fe25 	bl	80018ca <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af02      	add	r7, sp, #8
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	70fb      	strb	r3, [r7, #3]
 8001c96:	4613      	mov	r3, r2
 8001c98:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001ca4:	78bb      	ldrb	r3, [r7, #2]
 8001ca6:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001ca8:	f107 030f 	add.w	r3, r7, #15
 8001cac:	f107 010e 	add.w	r1, r7, #14
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	9200      	str	r2, [sp, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fe45 	bl	8001946 <LoRa_writeReg>
	HAL_Delay(5);
 8001cbc:	2005      	movs	r0, #5
 8001cbe:	f002 fba1 	bl	8004404 <HAL_Delay>
}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	72fb      	strb	r3, [r7, #11]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	889b      	ldrh	r3, [r3, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f003 fb5a 	bl	80053ac <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6998      	ldr	r0, [r3, #24]
 8001cfc:	f107 0117 	add.w	r1, r7, #23
 8001d00:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d04:	2201      	movs	r2, #1
 8001d06:	f006 fff9 	bl	8008cfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001d0a:	bf00      	nop
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f007 fd03 	bl	800971c <HAL_SPI_GetState>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d1f7      	bne.n	8001d0c <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6998      	ldr	r0, [r3, #24]
 8001d20:	7abb      	ldrb	r3, [r7, #10]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	f006 ffe7 	bl	8008cfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001d2e:	bf00      	nop
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f007 fcf1 	bl	800971c <HAL_SPI_GetState>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d1f7      	bne.n	8001d30 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	889b      	ldrh	r3, [r3, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f003 fb2e 	bl	80053ac <HAL_GPIO_WritePin>
}
 8001d50:	bf00      	nop
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

	return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	4611      	mov	r1, r2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	4613      	mov	r3, r2
 8001d82:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff fd3b 	bl	8001808 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001d92:	210e      	movs	r1, #14
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7ff ff5e 	bl	8001c56 <LoRa_read>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001d9e:	7cfb      	ldrb	r3, [r7, #19]
 8001da0:	461a      	mov	r2, r3
 8001da2:	210d      	movs	r1, #13
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7ff ff70 	bl	8001c8a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	461a      	mov	r2, r3
 8001dae:	2122      	movs	r1, #34	@ 0x22
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f7ff ff6a 	bl	8001c8a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	2100      	movs	r1, #0
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff ff84 	bl	8001cca <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f7ff fd1f 	bl	8001808 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001dca:	2112      	movs	r1, #18
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff ff42 	bl	8001c56 <LoRa_read>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001dd6:	7cfb      	ldrb	r3, [r7, #19]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00a      	beq.n	8001df6 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001de0:	22ff      	movs	r2, #255	@ 0xff
 8001de2:	2112      	movs	r1, #18
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7ff ff50 	bl	8001c8a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001dea:	6979      	ldr	r1, [r7, #20]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f7ff fd0b 	bl	8001808 <LoRa_gotoMode>
			return 1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001df6:	88bb      	ldrh	r3, [r7, #4]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	80bb      	strh	r3, [r7, #4]
 8001dfc:	88bb      	ldrh	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001e02:	6979      	ldr	r1, [r7, #20]
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fcff 	bl	8001808 <LoRa_gotoMode>
				return 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e003      	b.n	8001e16 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f002 faf8 	bl	8004404 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001e14:	e7d9      	b.n	8001dca <LoRa_transmit+0x5c>
	}
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001e26:	2105      	movs	r1, #5
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff fced 	bl	8001808 <LoRa_gotoMode>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff8a 	bl	8001d58 <LoRa_isvalid>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8098 	beq.w	8001f7c <LoRa_init+0x146>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fcda 	bl	8001808 <LoRa_gotoMode>
			HAL_Delay(10);
 8001e54:	200a      	movs	r0, #10
 8001e56:	f002 fad5 	bl	8004404 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fefa 	bl	8001c56 <LoRa_read>
 8001e62:	4603      	mov	r3, r0
 8001e64:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001e66:	200a      	movs	r0, #10
 8001e68:	f002 facc 	bl	8004404 <HAL_Delay>
			data = read | 0x80;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e72:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	461a      	mov	r2, r3
 8001e78:	2101      	movs	r1, #1
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ff05 	bl	8001c8a <LoRa_write>
			HAL_Delay(100);
 8001e80:	2064      	movs	r0, #100	@ 0x64
 8001e82:	f002 fabf 	bl	8004404 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff fdf1 	bl	8001a78 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fe6c 	bl	8001b7c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff fe79 	bl	8001ba4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001eb2:	2223      	movs	r2, #35	@ 0x23
 8001eb4:	210c      	movs	r1, #12
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fee7 	bl	8001c8a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff feaf 	bl	8001c20 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fe24 	bl	8001b18 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001ed0:	22ff      	movs	r2, #255	@ 0xff
 8001ed2:	211f      	movs	r1, #31
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fed8 	bl	8001c8a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001ef6:	7bbb      	ldrb	r3, [r7, #14]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	211d      	movs	r1, #29
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff fec4 	bl	8001c8a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fd82 	bl	8001a0c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	2120      	movs	r1, #32
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff feb7 	bl	8001c8a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	2121      	movs	r1, #33	@ 0x21
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff feaf 	bl	8001c8a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001f2c:	2140      	movs	r1, #64	@ 0x40
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fe91 	bl	8001c56 <LoRa_read>
 8001f34:	4603      	mov	r3, r0
 8001f36:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001f3e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001f40:	7bbb      	ldrb	r3, [r7, #14]
 8001f42:	461a      	mov	r2, r3
 8001f44:	2140      	movs	r1, #64	@ 0x40
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fe9f 	bl	8001c8a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fc5a 	bl	8001808 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001f5a:	200a      	movs	r0, #10
 8001f5c:	f002 fa52 	bl	8004404 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001f60:	2142      	movs	r1, #66	@ 0x42
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fe77 	bl	8001c56 <LoRa_read>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b12      	cmp	r3, #18
 8001f70:	d101      	bne.n	8001f76 <LoRa_init+0x140>
				return LORA_OK;
 8001f72:	23c8      	movs	r3, #200	@ 0xc8
 8001f74:	e004      	b.n	8001f80 <LoRa_init+0x14a>
			else
				return LORA_NOT_FOUND;
 8001f76:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001f7a:	e001      	b.n	8001f80 <LoRa_init+0x14a>
	}
	else {
		return LORA_UNAVAILABLE;
 8001f7c:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <bmp5_init>:
*  @brief This API is the entry point.
*  It performs the selection of I2C/I3C/SPI read mechanism according to the
*  selected interface and reads the chip-id of the sensor.
*/
int8_t bmp5_init(struct bmp5_dev *dev)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t chip_id;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fc71 	bl	8002878 <null_ptr_check>
 8001f96:	4603      	mov	r3, r0
 8001f98:	73fb      	strb	r3, [r7, #15]
     chip_id = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	737b      	strb	r3, [r7, #13]
     rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &chip_id, 1, dev);//chip_id neden okundu?sensörün gerçekten bağlı 
 8001f9e:	f107 010d 	add.w	r1, r7, #13
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f000 f843 	bl	8002032 <bmp5_get_regs>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]
     //ve doğru model olduğunu kontrol etmek için

     if (rslt == BMP5_OK)
 8001fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d136      	bne.n	8002026 <bmp5_init+0x9e>
         {
             dev->chip_id = 0;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]

             if (dev->intf == BMP5_SPI_INTF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7d5b      	ldrb	r3, [r3, #21]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d108      	bne.n	8001fd8 <bmp5_init+0x50>
             {
                 /* Performing a single read via SPI of registers,
                  * e.g. registers CHIP_ID, before the actual
                  * SPI communication with the device.
                  */
                 rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &reg_data, 1, dev);
 8001fc6:	f107 010e 	add.w	r1, r7, #14
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f000 f82f 	bl	8002032 <bmp5_get_regs>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	73fb      	strb	r3, [r7, #15]
             }

             if (rslt == BMP5_OK)
 8001fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d122      	bne.n	8002026 <bmp5_init+0x9e>
             {
                 /* Read chip_id */
                 rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &chip_id, 1, dev);
 8001fe0:	f107 010d 	add.w	r1, r7, #13
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f000 f822 	bl	8002032 <bmp5_get_regs>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	73fb      	strb	r3, [r7, #15]

                 if (rslt == BMP5_OK)
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <bmp5_init+0x9e>
                 {
                     if (chip_id != 0)
 8001ffa:	7b7b      	ldrb	r3, [r7, #13]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <bmp5_init+0x84>
                     {
                         /* Validate post power-up procedure */
                         rslt = power_up_check(dev);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 fc75 	bl	80028f0 <power_up_check>
 8002006:	4603      	mov	r3, r0
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	e001      	b.n	8002010 <bmp5_init+0x88>
                     }
                     else
                     {
                         rslt = BMP5_E_INVALID_CHIP_ID;
 800200c:	23fc      	movs	r3, #252	@ 0xfc
 800200e:	73fb      	strb	r3, [r7, #15]
                     }

                     if (rslt == BMP5_OK)
 8002010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d106      	bne.n	8002026 <bmp5_init+0x9e>
                     {
                         rslt = validate_chip_id(chip_id, dev);
 8002018:	7b7b      	ldrb	r3, [r7, #13]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fc4b 	bl	80028b8 <validate_chip_id>
 8002022:	4603      	mov	r3, r0
 8002024:	73fb      	strb	r3, [r7, #15]
                     }
                 }
             }
         }

         return rslt;
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
     }
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <bmp5_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp5_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp5_dev *dev)
{
 8002032:	b590      	push	{r4, r7, lr}
 8002034:	b087      	sub	sp, #28
 8002036:	af00      	add	r7, sp, #0
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4603      	mov	r3, r0
 8002040:	73fb      	strb	r3, [r7, #15]
    //mikrodenetleyici (veya yazılım), sensörün içindeki verileri öğrenmek istiyor. Bu veriler sensörün register denilen hafıza alanlarında tutulur.
    //Bu fonksiyon da gidip o verileri okur ve RAM'deki bir tampon değişkene (reg_data) yazar
    int8_t rslt;
    rslt = null_ptr_check(dev);
 8002042:	6838      	ldr	r0, [r7, #0]
 8002044:	f000 fc18 	bl	8002878 <null_ptr_check>
 8002048:	4603      	mov	r3, r0
 800204a:	75fb      	strb	r3, [r7, #23]


    /* Proceed if null check is fine */
    if ((rslt == BMP5_OK) && (reg_data != NULL))
 800204c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d116      	bne.n	8002082 <bmp5_get_regs+0x50>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d013      	beq.n	8002082 <bmp5_get_regs+0x50>
    {
        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	689c      	ldr	r4, [r3, #8]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	7bf8      	ldrb	r0, [r7, #15]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	47a0      	blx	r4
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	751a      	strb	r2, [r3, #20]

        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <bmp5_get_regs+0x54>
        {
            /* Failure case */
            rslt = BMP5_E_COM_FAIL; //read işlemi başarısız
 800207c:	23fe      	movs	r3, #254	@ 0xfe
 800207e:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 8002080:	e001      	b.n	8002086 <bmp5_get_regs+0x54>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR; //en başta bir şey null ise
 8002082:	23ff      	movs	r3, #255	@ 0xff
 8002084:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800208a:	4618      	mov	r0, r3
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}

08002092 <bmp5_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp5_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp5_dev *dev)
{
 8002092:	b590      	push	{r4, r7, lr}
 8002094:	b087      	sub	sp, #28
 8002096:	af00      	add	r7, sp, #0
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4603      	mov	r3, r0
 80020a0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75bb      	strb	r3, [r7, #22]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80020a6:	6838      	ldr	r0, [r7, #0]
 80020a8:	f000 fbe6 	bl	8002878 <null_ptr_check>
 80020ac:	4603      	mov	r3, r0
 80020ae:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMP5_OK) && (reg_data != NULL))
 80020b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d140      	bne.n	800213a <bmp5_set_regs+0xa8>
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d03d      	beq.n	800213a <bmp5_set_regs+0xa8>
    {
        if (dev->intf == BMP5_SPI_INTF)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	7d5b      	ldrb	r3, [r3, #21]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d11d      	bne.n	8002102 <bmp5_set_regs+0x70>
        {
            /* Write the data to the reg_addr */
            do
            {
                dev->intf_rslt = dev->write((reg_addr + idx), &reg_data[idx], 1, dev->intf_ptr);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68dc      	ldr	r4, [r3, #12]
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	7dbb      	ldrb	r3, [r7, #22]
 80020ce:	4413      	add	r3, r2
 80020d0:	b2d8      	uxtb	r0, r3
 80020d2:	7dbb      	ldrb	r3, [r7, #22]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	18d1      	adds	r1, r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	47a0      	blx	r4
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	751a      	strb	r2, [r3, #20]
                idx++;
 80020e8:	7dbb      	ldrb	r3, [r7, #22]
 80020ea:	3301      	adds	r3, #1
 80020ec:	75bb      	strb	r3, [r7, #22]
            } while ((idx < len) && (dev->intf_rslt == BMP5_INTF_RET_SUCCESS));
 80020ee:	7dbb      	ldrb	r3, [r7, #22]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d919      	bls.n	800212a <bmp5_set_regs+0x98>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0e2      	beq.n	80020c6 <bmp5_set_regs+0x34>
 8002100:	e013      	b.n	800212a <bmp5_set_regs+0x98>
        }
        else if ((dev->intf == BMP5_I2C_INTF) || (dev->intf == BMP5_I3C_INTF))
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	7d5b      	ldrb	r3, [r3, #21]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d003      	beq.n	8002112 <bmp5_set_regs+0x80>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	7d5b      	ldrb	r3, [r3, #21]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d10b      	bne.n	800212a <bmp5_set_regs+0x98>
        {
            /* Write the data to the reg_addr */
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68dc      	ldr	r4, [r3, #12]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	7bf8      	ldrb	r0, [r7, #15]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	47a0      	blx	r4
 8002122:	4603      	mov	r3, r0
 8002124:	461a      	mov	r2, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	751a      	strb	r2, [r3, #20]
        }

        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <bmp5_set_regs+0xac>
        {
            /* Failure case */
            rslt = BMP5_E_COM_FAIL;
 8002134:	23fe      	movs	r3, #254	@ 0xfe
 8002136:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 8002138:	e001      	b.n	800213e <bmp5_set_regs+0xac>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800213a:	23ff      	movs	r3, #255	@ 0xff
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800213e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002142:	4618      	mov	r0, r3
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd90      	pop	{r4, r7, pc}

0800214a <bmp5_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp5_soft_reset(struct bmp5_dev *dev)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t por_status;
    uint8_t data = BMP5_SOFT_RESET_CMD;
 8002152:	23b6      	movs	r3, #182	@ 0xb6
 8002154:	733b      	strb	r3, [r7, #12]

    /* Reset the device */
    rslt = bmp5_set_regs(BMP5_REG_CMD, &data, 1, dev);
 8002156:	f107 010c 	add.w	r1, r7, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	207e      	movs	r0, #126	@ 0x7e
 8002160:	f7ff ff97 	bl	8002092 <bmp5_set_regs>
 8002164:	4603      	mov	r3, r0
 8002166:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d129      	bne.n	80021c4 <bmp5_soft_reset+0x7a>
    {
        /* Soft-reset execution takes 2 ms */
        //dev->delay_us(BMP5_DELAY_US_SOFT_RESET, dev->intf_ptr);
        HAL_Delay(10);
 8002170:	200a      	movs	r0, #10
 8002172:	f002 f947 	bl	8004404 <HAL_Delay>
        if (dev->intf == BMP5_SPI_INTF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7d5b      	ldrb	r3, [r3, #21]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d108      	bne.n	8002190 <bmp5_soft_reset+0x46>
        {
            /* Performing a single read via SPI of registers,
            * e.g. registers CHIP_ID, before the actual
            * SPI communication with the device.
            */
            rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &reg_data, 1, dev);
 800217e:	f107 010e 	add.w	r1, r7, #14
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	2001      	movs	r0, #1
 8002188:	f7ff ff53 	bl	8002032 <bmp5_get_regs>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMP5_OK)
 8002190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d115      	bne.n	80021c4 <bmp5_soft_reset+0x7a>
        {
            rslt = bmp5_get_interrupt_status(&por_status, dev);
 8002198:	f107 030d 	add.w	r3, r7, #13
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f816 	bl	80021d0 <bmp5_get_interrupt_status>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 80021a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <bmp5_soft_reset+0x7a>
            {
                if (por_status & BMP5_INT_ASSERTED_POR_SOFTRESET_COMPLETE)
 80021b0:	7b7b      	ldrb	r3, [r7, #13]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <bmp5_soft_reset+0x76>
                {
                    rslt = BMP5_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	e001      	b.n	80021c4 <bmp5_soft_reset+0x7a>
                }
                else
                {
                    rslt = BMP5_E_POR_SOFTRESET;
 80021c0:	23fa      	movs	r3, #250	@ 0xfa
 80021c2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80021c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <bmp5_get_interrupt_status>:

/*!
 *  @brief This API is used to get interrupt status.
 */
int8_t bmp5_get_interrupt_status(uint8_t *int_status, struct bmp5_dev *dev)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (int_status != NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <bmp5_get_interrupt_status+0x22>
    {
        rslt = bmp5_get_regs(BMP5_REG_INT_STATUS, int_status, 1, dev);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2201      	movs	r2, #1
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	201d      	movs	r0, #29
 80021e8:	f7ff ff23 	bl	8002032 <bmp5_get_regs>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e001      	b.n	80021f6 <bmp5_get_interrupt_status+0x26>
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 80021f2:	23ff      	movs	r3, #255	@ 0xff
 80021f4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80021f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <bmp5_get_power_mode>:

/*!
 *  @brief This API is used to get powermode of the sensor.
 */
int8_t bmp5_get_power_mode(enum bmp5_powermode *powermode, struct bmp5_dev *dev)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t deep_dis;
    uint8_t reg_data;
    uint8_t pwrmode;

    if (powermode != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d03f      	beq.n	8002294 <bmp5_get_power_mode+0x90>
    {
        /* Read the power mode register */
        rslt = bmp5_get_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 8002214:	f107 010c 	add.w	r1, r7, #12
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2201      	movs	r2, #1
 800221c:	2037      	movs	r0, #55	@ 0x37
 800221e:	f7ff ff08 	bl	8002032 <bmp5_get_regs>
 8002222:	4603      	mov	r3, r0
 8002224:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 8002226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d134      	bne.n	8002298 <bmp5_get_power_mode+0x94>
        {
            pwrmode = BMP5_GET_BITS_POS_0(reg_data, BMP5_POWERMODE);
 800222e:	7b3b      	ldrb	r3, [r7, #12]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	73bb      	strb	r3, [r7, #14]

            switch (pwrmode)
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d828      	bhi.n	800228e <bmp5_get_power_mode+0x8a>
 800223c:	a201      	add	r2, pc, #4	@ (adr r2, 8002244 <bmp5_get_power_mode+0x40>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002255 	.word	0x08002255
 8002248:	08002277 	.word	0x08002277
 800224c:	0800227f 	.word	0x0800227f
 8002250:	08002287 	.word	0x08002287
            {
                case BMP5_POWERMODE_STANDBY:

                    /* Getting deep disable status */
                    deep_dis = BMP5_GET_BITSLICE(reg_data, BMP5_DEEP_DISABLE);
 8002254:	7b3b      	ldrb	r3, [r7, #12]
 8002256:	09db      	lsrs	r3, r3, #7
 8002258:	737b      	strb	r3, [r7, #13]
                    /* Checking deepstandby status only when powermode is in standby mode */

                    /* If deep_dis = 0(BMP5_DEEP_ENABLED) then deepstandby mode is enabled.
                     * If deep_dis = 1(BMP5_DEEP_DISABLED) then deepstandby mode is disabled
                     */
                    if (deep_dis == BMP5_DEEP_ENABLED)
 800225a:	7b7b      	ldrb	r3, [r7, #13]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <bmp5_get_power_mode+0x6a>
                    {
                        rslt = check_deepstandby_mode(powermode, dev);
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fb83 	bl	800296e <check_deepstandby_mode>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        *powermode = BMP5_POWERMODE_STANDBY;
                    }

                    break;
 800226c:	e014      	b.n	8002298 <bmp5_get_power_mode+0x94>
                        *powermode = BMP5_POWERMODE_STANDBY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
                    break;
 8002274:	e010      	b.n	8002298 <bmp5_get_power_mode+0x94>
                case BMP5_POWERMODE_NORMAL:
                    *powermode = BMP5_POWERMODE_NORMAL;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
                    break;
 800227c:	e00c      	b.n	8002298 <bmp5_get_power_mode+0x94>
                case BMP5_POWERMODE_FORCED:
                    *powermode = BMP5_POWERMODE_FORCED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	701a      	strb	r2, [r3, #0]
                    break;
 8002284:	e008      	b.n	8002298 <bmp5_get_power_mode+0x94>
                case BMP5_POWERMODE_CONTINOUS:
                    *powermode = BMP5_POWERMODE_CONTINOUS;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	701a      	strb	r2, [r3, #0]
                    break;
 800228c:	e004      	b.n	8002298 <bmp5_get_power_mode+0x94>
                default:
                    rslt = BMP5_E_INVALID_POWERMODE;
 800228e:	23f9      	movs	r3, #249	@ 0xf9
 8002290:	73fb      	strb	r3, [r7, #15]
                    break;
 8002292:	e001      	b.n	8002298 <bmp5_get_power_mode+0x94>
            }
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8002294:	23ff      	movs	r3, #255	@ 0xff
 8002296:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002298:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <bmp5_set_power_mode>:

/*!
 *  @brief This API is used to set powermode of the sensor.
 */
int8_t bmp5_set_power_mode(enum bmp5_powermode powermode, struct bmp5_dev *dev)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    enum bmp5_powermode lst_pwrmode;

    /* Existing power mode of the device is received in lst_pwrmode */
    rslt = bmp5_get_power_mode(&lst_pwrmode, dev);//Sensör şu anda hangi güç modunda?
 80022b0:	f107 030e 	add.w	r3, r7, #14
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ffa4 	bl	8002204 <bmp5_get_power_mode>
 80022bc:	4603      	mov	r3, r0
 80022be:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 80022c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d132      	bne.n	800232e <bmp5_set_power_mode+0x8a>
    {
        /* If the sensor is not in standby mode set the device to
         *  standby mode.
         */
        if (lst_pwrmode != BMP5_POWERMODE_STANDBY)
 80022c8:	7bbb      	ldrb	r3, [r7, #14]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00c      	beq.n	80022e8 <bmp5_set_power_mode+0x44>
        {
            /* Device should be set to standby before transiting to
             * forced mode or normal mode or continous mode.
             */
            rslt = set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 80022ce:	6839      	ldr	r1, [r7, #0]
 80022d0:	2000      	movs	r0, #0
 80022d2:	f000 fc00 	bl	8002ad6 <set_power_mode>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]
            //STANDBY moduna al.Sensörün modunu değiştirmeden önce STANDBY modunda olması gerekir.

            if (rslt == BMP5_OK)
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <bmp5_set_power_mode+0x44>
            {
                /* Give t_standby(as per data sheet) time for device to go into standby mode */
                //dev->delay_us(BMP5_DELAY_US_STANDBY, dev->intf_ptr);
            	HAL_Delay(10);
 80022e2:	200a      	movs	r0, #10
 80022e4:	f002 f88e 	bl	8004404 <HAL_Delay>
            }
        }

        /* Set the desired power mode */
        if (rslt == BMP5_OK)
 80022e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d11e      	bne.n	800232e <bmp5_set_power_mode+0x8a>
        {
            switch (powermode)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d009      	beq.n	800230a <bmp5_set_power_mode+0x66>
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	dc15      	bgt.n	8002326 <bmp5_set_power_mode+0x82>
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <bmp5_set_power_mode+0x88>
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db11      	blt.n	8002326 <bmp5_set_power_mode+0x82>
 8002302:	3b01      	subs	r3, #1
 8002304:	2b02      	cmp	r3, #2
 8002306:	d80e      	bhi.n	8002326 <bmp5_set_power_mode+0x82>
 8002308:	e005      	b.n	8002316 <bmp5_set_power_mode+0x72>
            {
                case BMP5_POWERMODE_DEEP_STANDBY:
                    rslt = set_deep_standby_mode(dev);
 800230a:	6838      	ldr	r0, [r7, #0]
 800230c:	f000 fb76 	bl	80029fc <set_deep_standby_mode>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]
                    break;
 8002314:	e00b      	b.n	800232e <bmp5_set_power_mode+0x8a>
                     */
                    break;
                case BMP5_POWERMODE_NORMAL:
                case BMP5_POWERMODE_FORCED:
                case BMP5_POWERMODE_CONTINOUS:
                    rslt = set_power_mode(powermode, dev);//İstenen moda geç
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	6839      	ldr	r1, [r7, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fbdb 	bl	8002ad6 <set_power_mode>
 8002320:	4603      	mov	r3, r0
 8002322:	73fb      	strb	r3, [r7, #15]
                    break;
 8002324:	e003      	b.n	800232e <bmp5_set_power_mode+0x8a>
                default:
                    rslt = BMP5_E_INVALID_POWERMODE;
 8002326:	23f9      	movs	r3, #249	@ 0xf9
 8002328:	73fb      	strb	r3, [r7, #15]
                    break;
 800232a:	e000      	b.n	800232e <bmp5_set_power_mode+0x8a>
                    break;
 800232c:	bf00      	nop
            }
        }
    }

    return rslt;
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <bmp5_get_sensor_data>:
 * sensor and store it in the bmp5_sensor_data structure instance passed by the user.
 */
int8_t bmp5_get_sensor_data(struct bmp5_sensor_data *sensor_data,
                            const struct bmp5_osr_odr_press_config *osr_odr_press_cfg,
                            struct bmp5_dev *dev)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	@ 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[6] = { 0 };
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	809a      	strh	r2, [r3, #4]
    int32_t raw_data_t;
    uint32_t raw_data_p;

    rslt = bmp5_get_regs(BMP5_REG_TEMP_DATA_XLSB, reg_data, 6, dev);
 8002352:	f107 0114 	add.w	r1, r7, #20
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2206      	movs	r2, #6
 800235a:	201d      	movs	r0, #29
 800235c:	f7ff fe69 	bl	8002032 <bmp5_get_regs>
 8002360:	4603      	mov	r3, r0
 8002362:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP5_OK)
 8002366:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800236a:	2b00      	cmp	r3, #0
 800236c:	d13d      	bne.n	80023ea <bmp5_get_sensor_data+0xae>
    {
        raw_data_t = (int32_t) ((int32_t) ((uint32_t)(((uint32_t)reg_data[2] << 16) | ((uint16_t)reg_data[1] << 8) | reg_data[0]) << 8) >> 8);
 800236e:	7dbb      	ldrb	r3, [r7, #22]
 8002370:	041a      	lsls	r2, r3, #16
 8002372:	7d7b      	ldrb	r3, [r7, #21]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	4313      	orrs	r3, r2
 8002378:	7d3a      	ldrb	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	121b      	asrs	r3, r3, #8
 8002380:	623b      	str	r3, [r7, #32]
        sensor_data->temperature =
            (int64_t)((raw_data_t / (float)65536.0) * (power(10, BMP5_FIXED_POINT_DIGIT_PRECISION)));
#else

        /* Division by 2^16(whose equivalent value is 65536) is performed to get temperature data in deg C */
        sensor_data->temperature = (float)(raw_data_t / 65536.0);
 8002382:	6a38      	ldr	r0, [r7, #32]
 8002384:	f7fe f8ee 	bl	8000564 <__aeabi_i2d>
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <bmp5_get_sensor_data+0xbc>)
 800238e:	f7fe fa7d 	bl	800088c <__aeabi_ddiv>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	f7fe fc45 	bl	8000c28 <__aeabi_d2f>
 800239e:	4602      	mov	r2, r0
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	605a      	str	r2, [r3, #4]
#endif

        if (osr_odr_press_cfg->press_en == BMP5_ENABLE)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	789b      	ldrb	r3, [r3, #2]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d11a      	bne.n	80023e2 <bmp5_get_sensor_data+0xa6>
        {
            raw_data_p = (uint32_t)((uint32_t)(reg_data[5] << 16) | (uint16_t)(reg_data[4] << 8) | reg_data[3]);
 80023ac:	7e7b      	ldrb	r3, [r7, #25]
 80023ae:	041b      	lsls	r3, r3, #16
 80023b0:	7e3a      	ldrb	r2, [r7, #24]
 80023b2:	0212      	lsls	r2, r2, #8
 80023b4:	b292      	uxth	r2, r2
 80023b6:	4313      	orrs	r3, r2
 80023b8:	7dfa      	ldrb	r2, [r7, #23]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61fb      	str	r3, [r7, #28]
            sensor_data->pressure =
                (uint64_t)((raw_data_p / (float)64.0) * (power(10, BMP5_FIXED_POINT_DIGIT_PRECISION)));
#else

            /* Division by 2^6(whose equivalent value is 64) is performed to get pressure data in Pa */
            sensor_data->pressure = (float)(raw_data_p / 64.0);
 80023be:	69f8      	ldr	r0, [r7, #28]
 80023c0:	f7fe f8c0 	bl	8000544 <__aeabi_ui2d>
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <bmp5_get_sensor_data+0xc0>)
 80023ca:	f7fe fa5f 	bl	800088c <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe fc27 	bl	8000c28 <__aeabi_d2f>
 80023da:	4602      	mov	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e003      	b.n	80023ea <bmp5_get_sensor_data+0xae>
#endif
        }
        else
        {
            sensor_data->pressure = 0.0;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
        }
    }

    return rslt;
 80023ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3728      	adds	r7, #40	@ 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40f00000 	.word	0x40f00000
 80023fc:	40500000 	.word	0x40500000

08002400 <bmp5_int_source_select>:
/*!
 *  @brief This API is used to enable the interrupts(drdy interrupt, fifo full interrupt,
 *   fifo threshold enable and pressure data out of range interrupt).
 */
int8_t bmp5_int_source_select(const struct bmp5_int_source_select *int_source_select, struct bmp5_dev *dev)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    if (int_source_select != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d058      	beq.n	80024c2 <bmp5_int_source_select+0xc2>
    {
        rslt = bmp5_get_regs(BMP5_REG_INT_SOURCE, &reg_data, 1, dev);
 8002410:	f107 010e 	add.w	r1, r7, #14
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2201      	movs	r2, #1
 8002418:	2015      	movs	r0, #21
 800241a:	f7ff fe0a 	bl	8002032 <bmp5_get_regs>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d14d      	bne.n	80024c6 <bmp5_int_source_select+0xc6>
        {
            reg_data = BMP5_SET_BITS_POS_0(reg_data, BMP5_INT_DRDY_EN, int_source_select->drdy_en);
 800242a:	7bbb      	ldrb	r3, [r7, #14]
 800242c:	b25b      	sxtb	r3, r3
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	b25a      	sxtb	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	b25b      	sxtb	r3, r3
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	b25b      	sxtb	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b25b      	sxtb	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	73bb      	strb	r3, [r7, #14]

            reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_FIFO_FULL_EN, int_source_select->fifo_full_en);
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	b25b      	sxtb	r3, r3
 800244c:	f023 0302 	bic.w	r3, r3, #2
 8002450:	b25a      	sxtb	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	b25b      	sxtb	r3, r3
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	b25b      	sxtb	r3, r3
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	b25b      	sxtb	r3, r3
 8002462:	4313      	orrs	r3, r2
 8002464:	b25b      	sxtb	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	73bb      	strb	r3, [r7, #14]

            reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_FIFO_THRES_EN, int_source_select->fifo_thres_en);
 800246a:	7bbb      	ldrb	r3, [r7, #14]
 800246c:	b25b      	sxtb	r3, r3
 800246e:	f023 0304 	bic.w	r3, r3, #4
 8002472:	b25a      	sxtb	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	789b      	ldrb	r3, [r3, #2]
 8002478:	b25b      	sxtb	r3, r3
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	b25b      	sxtb	r3, r3
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	b25b      	sxtb	r3, r3
 8002484:	4313      	orrs	r3, r2
 8002486:	b25b      	sxtb	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	73bb      	strb	r3, [r7, #14]

            reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_OOR_PRESS_EN, int_source_select->oor_press_en);
 800248c:	7bbb      	ldrb	r3, [r7, #14]
 800248e:	b25b      	sxtb	r3, r3
 8002490:	f023 0308 	bic.w	r3, r3, #8
 8002494:	b25a      	sxtb	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	78db      	ldrb	r3, [r3, #3]
 800249a:	b25b      	sxtb	r3, r3
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	b25b      	sxtb	r3, r3
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	b25b      	sxtb	r3, r3
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	73bb      	strb	r3, [r7, #14]

            rslt = bmp5_set_regs(BMP5_REG_INT_SOURCE, &reg_data, 1, dev);
 80024ae:	f107 010e 	add.w	r1, r7, #14
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	2015      	movs	r0, #21
 80024b8:	f7ff fdeb 	bl	8002092 <bmp5_set_regs>
 80024bc:	4603      	mov	r3, r0
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e001      	b.n	80024c6 <bmp5_int_source_select+0xc6>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 80024c2:	23ff      	movs	r3, #255	@ 0xff
 80024c4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <bmp5_configure_interrupt>:
int8_t bmp5_configure_interrupt(enum bmp5_intr_mode int_mode,
                                enum bmp5_intr_polarity int_pol,
                                enum bmp5_intr_drive int_od,
                                enum bmp5_intr_en_dis int_en,
                                struct bmp5_dev *dev)
{
 80024d2:	b590      	push	{r4, r7, lr}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4604      	mov	r4, r0
 80024da:	4608      	mov	r0, r1
 80024dc:	4611      	mov	r1, r2
 80024de:	461a      	mov	r2, r3
 80024e0:	4623      	mov	r3, r4
 80024e2:	71fb      	strb	r3, [r7, #7]
 80024e4:	4603      	mov	r3, r0
 80024e6:	71bb      	strb	r3, [r7, #6]
 80024e8:	460b      	mov	r3, r1
 80024ea:	717b      	strb	r3, [r7, #5]
 80024ec:	4613      	mov	r3, r2
 80024ee:	713b      	strb	r3, [r7, #4]
    /* Variable to store the function result */
    int8_t rslt;

    /* Variable to get interrupt configuration */
    uint8_t reg_data = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73bb      	strb	r3, [r7, #14]

    /* Variable to set interrupt source */
    uint8_t int_source = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	737b      	strb	r3, [r7, #13]

    /* Variable to get interrupt status */
    uint8_t int_status = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	733b      	strb	r3, [r7, #12]

    /* Get interrupt configuration */
    rslt = bmp5_get_regs(BMP5_REG_INT_CONFIG, &reg_data, 1, dev);
 80024fc:	f107 010e 	add.w	r1, r7, #14
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	2201      	movs	r2, #1
 8002504:	2014      	movs	r0, #20
 8002506:	f7ff fd94 	bl	8002032 <bmp5_get_regs>
 800250a:	4603      	mov	r3, r0
 800250c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 800250e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d160      	bne.n	80025d8 <bmp5_configure_interrupt+0x106>
    {
        /* Any change between latched/pulsed mode has to be applied while interrupt is disabled */
        /* Step 1 : Turn off all INT sources (INT_SOURCE -> 0x00) */
        rslt = bmp5_set_regs(BMP5_REG_INT_SOURCE, &int_source, 1, dev);
 8002516:	f107 010d 	add.w	r1, r7, #13
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	2201      	movs	r2, #1
 800251e:	2015      	movs	r0, #21
 8002520:	f7ff fdb7 	bl	8002092 <bmp5_set_regs>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 8002528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d153      	bne.n	80025d8 <bmp5_configure_interrupt+0x106>
        {
            /* Step 2 : Read the INT_STATUS register to clear the status */
            rslt = bmp5_get_regs(BMP5_REG_INT_STATUS, &int_status, 1, dev);
 8002530:	f107 010c 	add.w	r1, r7, #12
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	2201      	movs	r2, #1
 8002538:	201d      	movs	r0, #29
 800253a:	f7ff fd7a 	bl	8002032 <bmp5_get_regs>
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 8002542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d146      	bne.n	80025d8 <bmp5_configure_interrupt+0x106>
            {
                /* Step 3 : Set the desired mode in INT_CONFIG.int_mode */
                reg_data = BMP5_SET_BITS_POS_0(reg_data, BMP5_INT_MODE, int_mode);
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	b25b      	sxtb	r3, r3
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	b25a      	sxtb	r2, r3
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	b25b      	sxtb	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	b25b      	sxtb	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	73bb      	strb	r3, [r7, #14]
                reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_POL, int_pol);
 8002566:	7bbb      	ldrb	r3, [r7, #14]
 8002568:	b25b      	sxtb	r3, r3
 800256a:	f023 0302 	bic.w	r3, r3, #2
 800256e:	b25a      	sxtb	r2, r3
 8002570:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	b25b      	sxtb	r3, r3
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	b25b      	sxtb	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b25b      	sxtb	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	73bb      	strb	r3, [r7, #14]
                reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_OD, int_od);
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	b25b      	sxtb	r3, r3
 800258a:	f023 0304 	bic.w	r3, r3, #4
 800258e:	b25a      	sxtb	r2, r3
 8002590:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	b25b      	sxtb	r3, r3
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	b25b      	sxtb	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	73bb      	strb	r3, [r7, #14]
                reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_INT_EN, int_en);
 80025a6:	7bbb      	ldrb	r3, [r7, #14]
 80025a8:	b25b      	sxtb	r3, r3
 80025aa:	f023 0308 	bic.w	r3, r3, #8
 80025ae:	b25a      	sxtb	r2, r3
 80025b0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	4313      	orrs	r3, r2
 80025c0:	b25b      	sxtb	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	73bb      	strb	r3, [r7, #14]

                /* Finally transfer the interrupt configurations */
                rslt = bmp5_set_regs(BMP5_REG_INT_CONFIG, &reg_data, 1, dev);
 80025c6:	f107 010e 	add.w	r1, r7, #14
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	2201      	movs	r2, #1
 80025ce:	2014      	movs	r0, #20
 80025d0:	f7ff fd5f 	bl	8002092 <bmp5_set_regs>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80025d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd90      	pop	{r4, r7, pc}

080025e4 <bmp5_get_osr_odr_press_config>:
/*!
 *  @brief This API gets the configuration for oversampling of temperature, oversampling of
 *  pressure and ODR configuration along with pressure enable.
 */
int8_t bmp5_get_osr_odr_press_config(struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store OSR and ODR config */
    uint8_t reg_data[2];

    if (osr_odr_press_cfg != NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d02b      	beq.n	800264c <bmp5_get_osr_odr_press_config+0x68>
    {
        /* Get OSR and ODR configuration in burst read */
        rslt = bmp5_get_regs(BMP5_REG_OSR_CONFIG, reg_data, 2, dev);
 80025f4:	f107 010c 	add.w	r1, r7, #12
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2202      	movs	r2, #2
 80025fc:	2036      	movs	r0, #54	@ 0x36
 80025fe:	f7ff fd18 	bl	8002032 <bmp5_get_regs>
 8002602:	4603      	mov	r3, r0
 8002604:	73fb      	strb	r3, [r7, #15]
        //BMP5_REG_OSR_CONFIG adresinden başla ve 2 bayt oku.
        //Bu iki bayt içinde hem OSR hem ODR ayarları bulunur.

        if (rslt == BMP5_OK)
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d120      	bne.n	8002650 <bmp5_get_osr_odr_press_config+0x6c>
        {
            //Bitleri parçala ve yapı içine doldur:
            osr_odr_press_cfg->osr_t = BMP5_GET_BITS_POS_0(reg_data[0], BMP5_TEMP_OS);
 800260e:	7b3b      	ldrb	r3, [r7, #12]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	b2da      	uxtb	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	701a      	strb	r2, [r3, #0]
            osr_odr_press_cfg->osr_p = BMP5_GET_BITSLICE(reg_data[0], BMP5_PRESS_OS);
 800261a:	7b3b      	ldrb	r3, [r7, #12]
 800261c:	10db      	asrs	r3, r3, #3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	b2da      	uxtb	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	705a      	strb	r2, [r3, #1]
            osr_odr_press_cfg->press_en = BMP5_GET_BITSLICE(reg_data[0], BMP5_PRESS_EN);
 800262a:	7b3b      	ldrb	r3, [r7, #12]
 800262c:	119b      	asrs	r3, r3, #6
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	b2da      	uxtb	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	709a      	strb	r2, [r3, #2]
            osr_odr_press_cfg->odr = BMP5_GET_BITSLICE(reg_data[1], BMP5_ODR);
 800263a:	7b7b      	ldrb	r3, [r7, #13]
 800263c:	109b      	asrs	r3, r3, #2
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	b2da      	uxtb	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	70da      	strb	r2, [r3, #3]
 800264a:	e001      	b.n	8002650 <bmp5_get_osr_odr_press_config+0x6c>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800264c:	23ff      	movs	r3, #255	@ 0xff
 800264e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <bmp5_set_osr_odr_press_config>:
 *
 *  @note If ODR is set to a value higher than 5Hz then powermode is set as standby mode, as ODR value greater than 5HZ
 *  without disabling deep-standby mode makes powermode invalid.
 */
int8_t bmp5_set_osr_odr_press_config(const struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
    /* Variable to store the function result */
    int8_t rslt = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]

    /* Variable to set ODR and OSR config */
    uint8_t reg_data[2] = { 0 };
 800266a:	2300      	movs	r3, #0
 800266c:	81bb      	strh	r3, [r7, #12]

    if (osr_odr_press_cfg != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d065      	beq.n	8002740 <bmp5_set_osr_odr_press_config+0xe4>
        /* If ODR is set to a value higher than 5Hz then powermode is set as standby mode, as ODR value greater than 5HZ
         * without disabling deep-standby mode makes powermode invalid.
         * NOTE: Register value for 5Hz is greater compared to ODRs higher than it. Thus in this below condition odr
         * is checked whether less than 5Hz macro.
         */
        if (osr_odr_press_cfg->odr < BMP5_ODR_05_HZ)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	78db      	ldrb	r3, [r3, #3]
 8002678:	2b17      	cmp	r3, #23
 800267a:	d804      	bhi.n	8002686 <bmp5_set_osr_odr_press_config+0x2a>
        {
            rslt = set_standby_mode(dev);
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	f000 fa5f 	bl	8002b40 <set_standby_mode>
 8002682:	4603      	mov	r3, r0
 8002684:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMP5_OK)
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d15a      	bne.n	8002744 <bmp5_set_osr_odr_press_config+0xe8>
        {
            rslt = bmp5_get_regs(BMP5_REG_OSR_CONFIG, reg_data, 2, dev);
 800268e:	f107 010c 	add.w	r1, r7, #12
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2202      	movs	r2, #2
 8002696:	2036      	movs	r0, #54	@ 0x36
 8002698:	f7ff fccb 	bl	8002032 <bmp5_get_regs>
 800269c:	4603      	mov	r3, r0
 800269e:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 80026a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d14d      	bne.n	8002744 <bmp5_set_osr_odr_press_config+0xe8>
            {
                reg_data[0] = BMP5_SET_BITS_POS_0(reg_data[0], BMP5_TEMP_OS, osr_odr_press_cfg->osr_t);
 80026a8:	7b3b      	ldrb	r3, [r7, #12]
 80026aa:	b25b      	sxtb	r3, r3
 80026ac:	f023 0307 	bic.w	r3, r3, #7
 80026b0:	b25a      	sxtb	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b25b      	sxtb	r3, r3
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	4313      	orrs	r3, r2
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	733b      	strb	r3, [r7, #12]
                reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_PRESS_OS, osr_odr_press_cfg->osr_p);
 80026c6:	7b3b      	ldrb	r3, [r7, #12]
 80026c8:	b25b      	sxtb	r3, r3
 80026ca:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80026ce:	b25a      	sxtb	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	b25b      	sxtb	r3, r3
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	b25b      	sxtb	r3, r3
 80026da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026de:	b25b      	sxtb	r3, r3
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	733b      	strb	r3, [r7, #12]
                reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_PRESS_EN, osr_odr_press_cfg->press_en);
 80026e8:	7b3b      	ldrb	r3, [r7, #12]
 80026ea:	b25b      	sxtb	r3, r3
 80026ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026f0:	b25a      	sxtb	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	789b      	ldrb	r3, [r3, #2]
 80026f6:	b25b      	sxtb	r3, r3
 80026f8:	019b      	lsls	r3, r3, #6
 80026fa:	b25b      	sxtb	r3, r3
 80026fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002700:	b25b      	sxtb	r3, r3
 8002702:	4313      	orrs	r3, r2
 8002704:	b25b      	sxtb	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	733b      	strb	r3, [r7, #12]
                reg_data[1] = BMP5_SET_BITSLICE(reg_data[1], BMP5_ODR, osr_odr_press_cfg->odr);
 800270a:	7b7b      	ldrb	r3, [r7, #13]
 800270c:	b25b      	sxtb	r3, r3
 800270e:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8002712:	b25a      	sxtb	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	78db      	ldrb	r3, [r3, #3]
 8002718:	b25b      	sxtb	r3, r3
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	b25b      	sxtb	r3, r3
 800271e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8002722:	b25b      	sxtb	r3, r3
 8002724:	4313      	orrs	r3, r2
 8002726:	b25b      	sxtb	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	737b      	strb	r3, [r7, #13]

                /* Set ODR and OSR configuration */
                rslt = bmp5_set_regs(BMP5_REG_OSR_CONFIG, reg_data, 2, dev);
 800272c:	f107 010c 	add.w	r1, r7, #12
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2202      	movs	r2, #2
 8002734:	2036      	movs	r0, #54	@ 0x36
 8002736:	f7ff fcac 	bl	8002092 <bmp5_set_regs>
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]
 800273e:	e001      	b.n	8002744 <bmp5_set_osr_odr_press_config+0xe8>
            }
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8002740:	23ff      	movs	r3, #255	@ 0xff
 8002742:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <bmp5_get_iir_config>:

/*!
 *  @brief This API gets the configuration for IIR of temperature and pressure.
 */
int8_t bmp5_get_iir_config(struct bmp5_iir_config *iir_cfg, struct bmp5_dev *dev)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to get IIR config */
    uint8_t reg_data[2];

    if (iir_cfg != NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d02f      	beq.n	80027c0 <bmp5_get_iir_config+0x70>
    {
        /* Get IIR configuration */
        rslt = bmp5_get_regs(BMP5_REG_DSP_CONFIG, reg_data, 2, dev);
 8002760:	f107 010c 	add.w	r1, r7, #12
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2202      	movs	r2, #2
 8002768:	2030      	movs	r0, #48	@ 0x30
 800276a:	f7ff fc62 	bl	8002032 <bmp5_get_regs>
 800276e:	4603      	mov	r3, r0
 8002770:	73fb      	strb	r3, [r7, #15]

        iir_cfg->shdw_set_iir_t = BMP5_GET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_TEMP);
 8002772:	7b3b      	ldrb	r3, [r7, #12]
 8002774:	10db      	asrs	r3, r3, #3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	b2da      	uxtb	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	709a      	strb	r2, [r3, #2]
        iir_cfg->shdw_set_iir_p = BMP5_GET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_PRESS);
 8002782:	7b3b      	ldrb	r3, [r7, #12]
 8002784:	115b      	asrs	r3, r3, #5
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	b2da      	uxtb	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	70da      	strb	r2, [r3, #3]
        iir_cfg->iir_flush_forced_en = BMP5_GET_BITSLICE(reg_data[0], BMP5_IIR_FLUSH_FORCED_EN);
 8002792:	7b3b      	ldrb	r3, [r7, #12]
 8002794:	109b      	asrs	r3, r3, #2
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	b2da      	uxtb	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	711a      	strb	r2, [r3, #4]

        iir_cfg->set_iir_t = BMP5_GET_BITS_POS_0(reg_data[1], BMP5_SET_IIR_TEMP);
 80027a2:	7b7b      	ldrb	r3, [r7, #13]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	701a      	strb	r2, [r3, #0]
        iir_cfg->set_iir_p = BMP5_GET_BITSLICE(reg_data[1], BMP5_SET_IIR_PRESS);
 80027ae:	7b7b      	ldrb	r3, [r7, #13]
 80027b0:	10db      	asrs	r3, r3, #3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	705a      	strb	r2, [r3, #1]
 80027be:	e001      	b.n	80027c4 <bmp5_get_iir_config+0x74>
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 80027c0:	23ff      	movs	r3, #255	@ 0xff
 80027c2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80027c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <bmp5_set_iir_config>:
 *
 *  @note If IIR value for both temperature and pressure is set a value other than bypass then powermode is set
 *  as standby mode, as IIR with value other than bypass without disabling deep-standby mode makes powermode invalid.
 */
int8_t bmp5_set_iir_config(const struct bmp5_iir_config *iir_cfg, struct bmp5_dev *dev)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
    /* Variable to store the function result */
    int8_t rslt = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]

    /* Variable to store existing powermode */
    enum bmp5_powermode curr_pwrmode;

    if (iir_cfg != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d041      	beq.n	8002868 <bmp5_set_iir_config+0x98>
    {
        /* If IIR value for both temperature and pressure is set a value other than bypass then powermode is set
         * as standby mode, as IIR with value other than bypass without disabling deep-standby mode makes powermode
         * invalid.
         */
        if ((iir_cfg->set_iir_t != BMP5_IIR_FILTER_BYPASS) || (iir_cfg->set_iir_p != BMP5_IIR_FILTER_BYPASS))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d103      	bne.n	80027f4 <bmp5_set_iir_config+0x24>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <bmp5_set_iir_config+0x2e>
        {
            rslt = set_standby_mode(dev);
 80027f4:	6838      	ldr	r0, [r7, #0]
 80027f6:	f000 f9a3 	bl	8002b40 <set_standby_mode>
 80027fa:	4603      	mov	r3, r0
 80027fc:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMP5_OK)
 80027fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d132      	bne.n	800286c <bmp5_set_iir_config+0x9c>
        {
            rslt = bmp5_get_power_mode(&curr_pwrmode, dev);
 8002806:	f107 030e 	add.w	r3, r7, #14
 800280a:	6839      	ldr	r1, [r7, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fcf9 	bl	8002204 <bmp5_get_power_mode>
 8002812:	4603      	mov	r3, r0
 8002814:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d126      	bne.n	800286c <bmp5_set_iir_config+0x9c>
            {
                /* IIR configuration is writable only during STANDBY mode(as per datasheet) */
                if (curr_pwrmode != BMP5_POWERMODE_STANDBY)
 800281e:	7bbb      	ldrb	r3, [r7, #14]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <bmp5_set_iir_config+0x60>
                {
                    /* If sensor is not in standby mode, set sensor in standby mode */
                    rslt = bmp5_set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 8002824:	6839      	ldr	r1, [r7, #0]
 8002826:	2000      	movs	r0, #0
 8002828:	f7ff fd3c 	bl	80022a4 <bmp5_set_power_mode>
 800282c:	4603      	mov	r3, r0
 800282e:	73fb      	strb	r3, [r7, #15]
                }

                if (rslt == BMP5_OK)
 8002830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d105      	bne.n	8002844 <bmp5_set_iir_config+0x74>
                {
                    rslt = set_iir_config(iir_cfg, dev);
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f99f 	bl	8002b7e <set_iir_config>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
                }

                /* If previous mode is not standbymode return sensor to that previous mode
                * after setting iir configuration
                */
                if (rslt == BMP5_OK)
 8002844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10f      	bne.n	800286c <bmp5_set_iir_config+0x9c>
                {
                    /* Since IIR works only in standby mode we are not re-writing to deepstandby mode
                    * as deep standby mode resets the IIR settings to default
                    */
                    if ((curr_pwrmode != BMP5_POWERMODE_STANDBY) && (curr_pwrmode != BMP5_POWERMODE_DEEP_STANDBY))
 800284c:	7bbb      	ldrb	r3, [r7, #14]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00c      	beq.n	800286c <bmp5_set_iir_config+0x9c>
 8002852:	7bbb      	ldrb	r3, [r7, #14]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d009      	beq.n	800286c <bmp5_set_iir_config+0x9c>
                    {
                        rslt = bmp5_set_power_mode(curr_pwrmode, dev);
 8002858:	7bbb      	ldrb	r3, [r7, #14]
 800285a:	6839      	ldr	r1, [r7, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fd21 	bl	80022a4 <bmp5_set_power_mode>
 8002862:	4603      	mov	r3, r0
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	e001      	b.n	800286c <bmp5_set_iir_config+0x9c>
            }
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8002868:	23ff      	movs	r3, #255	@ 0xff
 800286a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800286c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp5_dev *dev)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
    //dev yapısı ve içindeki fonksiyonların atanmış (null olmayan) olup olmadığını kontrol eder
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <null_ptr_check+0x26>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <null_ptr_check+0x26>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <null_ptr_check+0x26>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BMP5_E_NULL_PTR;
 800289e:	23ff      	movs	r3, #255	@ 0xff
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	e001      	b.n	80028a8 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP5_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <validate_chip_id>:

/*!
 * @brief This internal API is used to validate the chip id of the sensor.
 */
static int8_t validate_chip_id(uint8_t chip_id, struct bmp5_dev *dev)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    if ((chip_id == BMP5_CHIP_ID_PRIM) || (chip_id == BMP5_CHIP_ID_SEC))
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	2b50      	cmp	r3, #80	@ 0x50
 80028c8:	d002      	beq.n	80028d0 <validate_chip_id+0x18>
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	2b51      	cmp	r3, #81	@ 0x51
 80028ce:	d105      	bne.n	80028dc <validate_chip_id+0x24>
    {
        /* Updating chip_id in device structure */
        dev->chip_id = chip_id;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	79fa      	ldrb	r2, [r7, #7]
 80028d4:	701a      	strb	r2, [r3, #0]
        rslt = BMP5_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	e001      	b.n	80028e0 <validate_chip_id+0x28>
    }
    else
    {
        rslt = BMP5_E_DEV_NOT_FOUND;
 80028dc:	23fd      	movs	r3, #253	@ 0xfd
 80028de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <power_up_check>:
/*!
 * @brief This internal API is used to validate the post power-up procedure.
 */

static int8_t power_up_check(struct bmp5_dev *dev)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t nvm_status;
    uint8_t por_status;

    bmp5_soft_reset(dev); //Sensör yazılımsal olarak resetleniyor.
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fc26 	bl	800214a <bmp5_soft_reset>
    HAL_Delay(10);
 80028fe:	200a      	movs	r0, #10
 8002900:	f001 fd80 	bl	8004404 <HAL_Delay>

    rslt = get_nvm_status(&nvm_status, dev); //Sensör içindeki NVM (kalıcı bellek) hazır mı?
 8002904:	f107 030e 	add.w	r3, r7, #14
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f99f 	bl	8002c4e <get_nvm_status>
 8002910:	4603      	mov	r3, r0
 8002912:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d122      	bne.n	8002962 <power_up_check+0x72>
    {
        /* Check if nvm_rdy status = 1 and nvm_err status = 0 to proceed */
        if ((nvm_status & BMP5_INT_NVM_RDY) && (!(nvm_status & BMP5_INT_NVM_ERR)))
 800291c:	7bbb      	ldrb	r3, [r7, #14]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d01b      	beq.n	800295e <power_up_check+0x6e>
 8002926:	7bbb      	ldrb	r3, [r7, #14]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d116      	bne.n	800295e <power_up_check+0x6e>
        {
            rslt = bmp5_get_interrupt_status(&por_status, dev); //Bu, sensörün "açılış/reset işlemi tamamlandı mı?" bilgisini alır.
 8002930:	f107 030d 	add.w	r3, r7, #13
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fc4a 	bl	80021d0 <bmp5_get_interrupt_status>
 800293c:	4603      	mov	r3, r0
 800293e:	73fb      	strb	r3, [r7, #15]
            //POR (Power-On Reset) durumu kontrol edilir
            if (rslt == BMP5_OK)
 8002940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10c      	bne.n	8002962 <power_up_check+0x72>
            {
                /* Check if por/soft-reset complete status = 1 to proceed */
                //POR( bir cihazın ilk defa enerji verildiğinde kendini resetlemesi anlamına gelir.) tamamlanmış mı?
                if (por_status & BMP5_INT_ASSERTED_POR_SOFTRESET_COMPLETE)
 8002948:	7b7b      	ldrb	r3, [r7, #13]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <power_up_check+0x68>
                {
                    rslt = BMP5_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP5_OK)
 8002956:	e004      	b.n	8002962 <power_up_check+0x72>
                }
                else
                {
                    rslt = BMP5_E_POWER_UP;
 8002958:	23fb      	movs	r3, #251	@ 0xfb
 800295a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP5_OK)
 800295c:	e001      	b.n	8002962 <power_up_check+0x72>
                }
            }
        }
        else
        {
            rslt = BMP5_E_POWER_UP;
 800295e:	23fb      	movs	r3, #251	@ 0xfb
 8002960:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002962:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <check_deepstandby_mode>:

/*!
 * @brief This internal API is used to check if sensor is in deepstandby mode.
 */
static int8_t check_deepstandby_mode(enum bmp5_powermode *powermode, struct bmp5_dev *dev)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t fifo_frame_sel;
    struct bmp5_iir_config iir_cfg = { 0 };
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	711a      	strb	r2, [r3, #4]
    struct bmp5_osr_odr_press_config osr_odr_press_cfg = { 0 };
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]

    rslt = bmp5_get_regs(BMP5_REG_FIFO_SEL, &fifo_frame_sel, 1, dev);
 8002986:	f107 0116 	add.w	r1, r7, #22
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2201      	movs	r2, #1
 800298e:	2018      	movs	r0, #24
 8002990:	f7ff fb4f 	bl	8002032 <bmp5_get_regs>
 8002994:	4603      	mov	r3, r0
 8002996:	75fb      	strb	r3, [r7, #23]
    fifo_frame_sel = BMP5_GET_BITS_POS_0(fifo_frame_sel, BMP5_FIFO_FRAME_SEL);
 8002998:	7dbb      	ldrb	r3, [r7, #22]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	75bb      	strb	r3, [r7, #22]

    if (rslt == BMP5_OK)
 80029a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d113      	bne.n	80029d2 <check_deepstandby_mode+0x64>
    {
        rslt = bmp5_get_osr_odr_press_config(&osr_odr_press_cfg, dev);
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	6839      	ldr	r1, [r7, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fe17 	bl	80025e4 <bmp5_get_osr_odr_press_config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP5_OK)
 80029ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d107      	bne.n	80029d2 <check_deepstandby_mode+0x64>
        {
            rslt = bmp5_get_iir_config(&iir_cfg, dev);
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	6839      	ldr	r1, [r7, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fec1 	bl	8002750 <bmp5_get_iir_config>
 80029ce:	4603      	mov	r3, r0
 80029d0:	75fb      	strb	r3, [r7, #23]
    }

    /* As per datasheet odr should be less than 5Hz. But register value for 5Hz is less than 4Hz and so,
     * thus in this below condition odr is checked whether greater than 5Hz macro.
     */
    if ((osr_odr_press_cfg.odr > BMP5_ODR_05_HZ) && (fifo_frame_sel == BMP5_DISABLE) &&
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	2b18      	cmp	r3, #24
 80029d6:	d90b      	bls.n	80029f0 <check_deepstandby_mode+0x82>
 80029d8:	7dbb      	ldrb	r3, [r7, #22]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <check_deepstandby_mode+0x82>
        (iir_cfg.set_iir_t == BMP5_IIR_FILTER_BYPASS) && (iir_cfg.set_iir_p == BMP5_IIR_FILTER_BYPASS))
 80029de:	7c3b      	ldrb	r3, [r7, #16]
    if ((osr_odr_press_cfg.odr > BMP5_ODR_05_HZ) && (fifo_frame_sel == BMP5_DISABLE) &&
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <check_deepstandby_mode+0x82>
        (iir_cfg.set_iir_t == BMP5_IIR_FILTER_BYPASS) && (iir_cfg.set_iir_p == BMP5_IIR_FILTER_BYPASS))
 80029e4:	7c7b      	ldrb	r3, [r7, #17]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <check_deepstandby_mode+0x82>
    {
        *powermode = BMP5_POWERMODE_DEEP_STANDBY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2204      	movs	r2, #4
 80029ee:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80029f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <set_deep_standby_mode>:

/*!
 * @brief This internal API is used to set sensor in deep standby mode.
 */
static int8_t set_deep_standby_mode(struct bmp5_dev *dev)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp5_get_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 8002a04:	f107 010e 	add.w	r1, r7, #14
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2037      	movs	r0, #55	@ 0x37
 8002a0e:	f7ff fb10 	bl	8002032 <bmp5_get_regs>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d155      	bne.n	8002aca <set_deep_standby_mode+0xce>
    {
        /* Setting deep_dis = 0(BMP5_DEEP_ENABLED) enables the deep standby mode */
        reg_data = BMP5_SET_BIT_VAL_0(reg_data, BMP5_DEEP_DISABLE);
 8002a1e:	7bbb      	ldrb	r3, [r7, #14]
 8002a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	73bb      	strb	r3, [r7, #14]

        /* Set ODR less then 5Hz - ODR used is 1Hz */
        reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_ODR, BMP5_ODR_01_HZ);
 8002a28:	7bbb      	ldrb	r3, [r7, #14]
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002a36:	b25b      	sxtb	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	73bb      	strb	r3, [r7, #14]

        /* Write the value to the odr config register(0x37) */
        rslt = bmp5_set_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 8002a3c:	f107 010e 	add.w	r1, r7, #14
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	2037      	movs	r0, #55	@ 0x37
 8002a46:	f7ff fb24 	bl	8002092 <bmp5_set_regs>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 8002a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d11a      	bne.n	8002a8c <set_deep_standby_mode+0x90>
        {
            rslt = bmp5_get_regs(BMP5_REG_DSP_IIR, &reg_data, 1, dev);
 8002a56:	f107 010e 	add.w	r1, r7, #14
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	2031      	movs	r0, #49	@ 0x31
 8002a60:	f7ff fae7 	bl	8002032 <bmp5_get_regs>
 8002a64:	4603      	mov	r3, r0
 8002a66:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 8002a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10d      	bne.n	8002a8c <set_deep_standby_mode+0x90>
                /* Set iir_t and iir_p as Bypass(0x00) */

                /* The register holds only iir_t and iir_p and the last 2 bits are reserved.
                 * Thus using the macro BMP5_IIR_BYPASS(0xC0) the register value is set as zero.
                 */
                reg_data = reg_data & BMP5_IIR_BYPASS;
 8002a70:	7bbb      	ldrb	r3, [r7, #14]
 8002a72:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	73bb      	strb	r3, [r7, #14]

                /* Write the value to the IIR register(0x31) */
                rslt = bmp5_set_regs(BMP5_REG_DSP_IIR, &reg_data, 1, dev);
 8002a7a:	f107 010e 	add.w	r1, r7, #14
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	2031      	movs	r0, #49	@ 0x31
 8002a84:	f7ff fb05 	bl	8002092 <bmp5_set_regs>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	73fb      	strb	r3, [r7, #15]
            }
        }

        if (rslt == BMP5_OK)
 8002a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11a      	bne.n	8002aca <set_deep_standby_mode+0xce>
        {
            rslt = bmp5_get_regs(BMP5_REG_FIFO_SEL, &reg_data, 1, dev);
 8002a94:	f107 010e 	add.w	r1, r7, #14
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	2018      	movs	r0, #24
 8002a9e:	f7ff fac8 	bl	8002032 <bmp5_get_regs>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 8002aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <set_deep_standby_mode+0xce>
            {
                /* Disable fifo frame selct */
                reg_data = BMP5_SET_BIT_VAL_0(reg_data, BMP5_FIFO_FRAME_SEL);
 8002aae:	7bbb      	ldrb	r3, [r7, #14]
 8002ab0:	f023 0303 	bic.w	r3, r3, #3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	73bb      	strb	r3, [r7, #14]

                /* Write the value to the fifo select register(0x18) */
                rslt = bmp5_set_regs(BMP5_REG_FIFO_SEL, &reg_data, 1, dev);
 8002ab8:	f107 010e 	add.w	r1, r7, #14
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2018      	movs	r0, #24
 8002ac2:	f7ff fae6 	bl	8002092 <bmp5_set_regs>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <set_power_mode>:

/*!
 * @brief This internal API is used to set sensor in standby or normal or forced or continous powermode.
 */
static int8_t set_power_mode(enum bmp5_powermode powermode, struct bmp5_dev *dev)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	4603      	mov	r3, r0
 8002ade:	6039      	str	r1, [r7, #0]
 8002ae0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp5_get_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 8002ae2:	f107 010e 	add.w	r1, r7, #14
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2037      	movs	r0, #55	@ 0x37
 8002aec:	f7ff faa1 	bl	8002032 <bmp5_get_regs>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d11b      	bne.n	8002b34 <set_power_mode+0x5e>
    {
        /* Setting deep_dis = 1(BMP5_DEEP_DISABLED) disables the deep standby mode */
        reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_DEEP_DISABLE, BMP5_DEEP_DISABLED);
 8002afc:	7bbb      	ldrb	r3, [r7, #14]
 8002afe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	73bb      	strb	r3, [r7, #14]

        reg_data = BMP5_SET_BITS_POS_0(reg_data, BMP5_POWERMODE, powermode);
 8002b06:	7bbb      	ldrb	r3, [r7, #14]
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	b25a      	sxtb	r2, r3
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	b25b      	sxtb	r3, r3
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b25b      	sxtb	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	73bb      	strb	r3, [r7, #14]

        rslt = bmp5_set_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 8002b22:	f107 010e 	add.w	r1, r7, #14
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	2037      	movs	r0, #55	@ 0x37
 8002b2c:	f7ff fab1 	bl	8002092 <bmp5_set_regs>
 8002b30:	4603      	mov	r3, r0
 8002b32:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <set_standby_mode>:

/*!
 * @brief This internal API is used to set sensor in standby powermode when powermode is deepstandby mode.
 */
static int8_t set_standby_mode(struct bmp5_dev *dev)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    enum bmp5_powermode pwrmode;

    rslt = bmp5_get_power_mode(&pwrmode, dev);
 8002b48:	f107 030e 	add.w	r3, r7, #14
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fb58 	bl	8002204 <bmp5_get_power_mode>
 8002b54:	4603      	mov	r3, r0
 8002b56:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d108      	bne.n	8002b72 <set_standby_mode+0x32>
    {
        if (pwrmode == BMP5_POWERMODE_DEEP_STANDBY)
 8002b60:	7bbb      	ldrb	r3, [r7, #14]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d105      	bne.n	8002b72 <set_standby_mode+0x32>
        {
            rslt = bmp5_set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7ff fb9b 	bl	80022a4 <bmp5_set_power_mode>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <set_iir_config>:

/*!
 * @brief This internal API is used to set the IIR for temperature and pressure.
 */
static int8_t set_iir_config(const struct bmp5_iir_config *iir_cfg, struct bmp5_dev *dev)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to set IIR config */
    uint8_t reg_data[2];

    rslt = bmp5_get_regs(BMP5_REG_DSP_CONFIG, reg_data, 2, dev);
 8002b88:	f107 010c 	add.w	r1, r7, #12
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	2030      	movs	r0, #48	@ 0x30
 8002b92:	f7ff fa4e 	bl	8002032 <bmp5_get_regs>
 8002b96:	4603      	mov	r3, r0
 8002b98:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 8002b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d14f      	bne.n	8002c42 <set_iir_config+0xc4>
    {
        reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_TEMP, iir_cfg->shdw_set_iir_t);
 8002ba2:	7b3b      	ldrb	r3, [r7, #12]
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	f023 0308 	bic.w	r3, r3, #8
 8002baa:	b25a      	sxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	789b      	ldrb	r3, [r3, #2]
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	b25b      	sxtb	r3, r3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	b25b      	sxtb	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	733b      	strb	r3, [r7, #12]
        reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_PRESS, iir_cfg->shdw_set_iir_p);
 8002bc4:	7b3b      	ldrb	r3, [r7, #12]
 8002bc6:	b25b      	sxtb	r3, r3
 8002bc8:	f023 0320 	bic.w	r3, r3, #32
 8002bcc:	b25a      	sxtb	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	78db      	ldrb	r3, [r3, #3]
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	015b      	lsls	r3, r3, #5
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	4313      	orrs	r3, r2
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	733b      	strb	r3, [r7, #12]
        reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_IIR_FLUSH_FORCED_EN, iir_cfg->iir_flush_forced_en);
 8002be6:	7b3b      	ldrb	r3, [r7, #12]
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	f023 0304 	bic.w	r3, r3, #4
 8002bee:	b25a      	sxtb	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	791b      	ldrb	r3, [r3, #4]
 8002bf4:	b25b      	sxtb	r3, r3
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	b25b      	sxtb	r3, r3
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	b25b      	sxtb	r3, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	733b      	strb	r3, [r7, #12]

        reg_data[1] = iir_cfg->set_iir_t;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	737b      	strb	r3, [r7, #13]
        reg_data[1] = BMP5_SET_BITSLICE(reg_data[1], BMP5_SET_IIR_PRESS, iir_cfg->set_iir_p);
 8002c0e:	7b7b      	ldrb	r3, [r7, #13]
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002c16:	b25a      	sxtb	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	785b      	ldrb	r3, [r3, #1]
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	b25b      	sxtb	r3, r3
 8002c22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c26:	b25b      	sxtb	r3, r3
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b25b      	sxtb	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	737b      	strb	r3, [r7, #13]

        /* Set IIR configuration */
        rslt = bmp5_set_regs(BMP5_REG_DSP_CONFIG, reg_data, 2, dev);
 8002c30:	f107 010c 	add.w	r1, r7, #12
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2202      	movs	r2, #2
 8002c38:	2030      	movs	r0, #48	@ 0x30
 8002c3a:	f7ff fa2a 	bl	8002092 <bmp5_set_regs>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <get_nvm_status>:

/*!
 *  @brief This API is used to get nvm status.
 */
static int8_t get_nvm_status(uint8_t *nvm_status, struct bmp5_dev *dev)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (nvm_status != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <get_nvm_status+0x22>
    {
        rslt = bmp5_get_regs(BMP5_REG_STATUS, nvm_status, 1, dev);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2201      	movs	r2, #1
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	2028      	movs	r0, #40	@ 0x28
 8002c66:	f7ff f9e4 	bl	8002032 <bmp5_get_regs>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	e001      	b.n	8002c74 <get_nvm_status+0x26>
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 8002c70:	23ff      	movs	r3, #255	@ 0xff
 8002c72:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <bmp5_i2c_read>:
 */
BMP5_INTF_RET_TYPE bmp5_i2c_read(uint8_t reg_addr,
                                  uint8_t *reg_data,
                                  uint32_t length,
                                  void *intf_ptr)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08c      	sub	sp, #48	@ 0x30
 8002c84:	af04      	add	r7, sp, #16
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	73fb      	strb	r3, [r7, #15]
	uint8_t device_addr = BMP581_I2C_ADDR<<1;
 8002c90:	238c      	movs	r3, #140	@ 0x8c
 8002c92:	77fb      	strb	r3, [r7, #31]

	    (void)intf_ptr;
    HAL_StatusTypeDef status;
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	61bb      	str	r3, [r7, #24]

    // Hattın meşgul olup olmadığını kontrol et

        HAL_I2C_DeInit(hi2c);
 8002c98:	69b8      	ldr	r0, [r7, #24]
 8002c9a:	f002 fce5 	bl	8005668 <HAL_I2C_DeInit>
        HAL_Delay(10);
 8002c9e:	200a      	movs	r0, #10
 8002ca0:	f001 fbb0 	bl	8004404 <HAL_Delay>
        HAL_I2C_Init(hi2c);
 8002ca4:	69b8      	ldr	r0, [r7, #24]
 8002ca6:	f002 fb9b 	bl	80053e0 <HAL_I2C_Init>



    // Cihaz hazır mı?
    if (HAL_I2C_IsDeviceReady(hi2c, device_addr, 3, 10) != HAL_OK)
 8002caa:	7ffb      	ldrb	r3, [r7, #31]
 8002cac:	b299      	uxth	r1, r3
 8002cae:	230a      	movs	r3, #10
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	69b8      	ldr	r0, [r7, #24]
 8002cb4:	f003 f834 	bl	8005d20 <HAL_I2C_IsDeviceReady>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <bmp5_i2c_read+0x4e>
    {
        printf("I2C Cihaz hazır değil! Adres: 0x%02X\n", device_addr);
 8002cbe:	7ffb      	ldrb	r3, [r7, #31]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4826      	ldr	r0, [pc, #152]	@ (8002d5c <bmp5_i2c_read+0xdc>)
 8002cc4:	f010 fa7e 	bl	80131c4 <iprintf>
        return BMP5_E_COM_FAIL;
 8002cc8:	f06f 0301 	mvn.w	r3, #1
 8002ccc:	e041      	b.n	8002d52 <bmp5_i2c_read+0xd2>
    }
    status = HAL_I2C_IsDeviceReady(hi2c, 0x8C, 3, 10);
 8002cce:	230a      	movs	r3, #10
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	218c      	movs	r1, #140	@ 0x8c
 8002cd4:	69b8      	ldr	r0, [r7, #24]
 8002cd6:	f003 f823 	bl	8005d20 <HAL_I2C_IsDeviceReady>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	75fb      	strb	r3, [r7, #23]
    printf("IsDeviceReady: %s\n", (status == HAL_OK) ? "OK" : "FAIL");
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <bmp5_i2c_read+0x68>
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d60 <bmp5_i2c_read+0xe0>)
 8002ce6:	e000      	b.n	8002cea <bmp5_i2c_read+0x6a>
 8002ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d64 <bmp5_i2c_read+0xe4>)
 8002cea:	4619      	mov	r1, r3
 8002cec:	481e      	ldr	r0, [pc, #120]	@ (8002d68 <bmp5_i2c_read+0xe8>)
 8002cee:	f010 fa69 	bl	80131c4 <iprintf>


    // Okuma işlemi
    status = HAL_I2C_Mem_Read(hi2c,
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	210a      	movs	r1, #10
 8002cfc:	9102      	str	r1, [sp, #8]
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2301      	movs	r3, #1
 8002d06:	218c      	movs	r1, #140	@ 0x8c
 8002d08:	69b8      	ldr	r0, [r7, #24]
 8002d0a:	f002 fdd7 	bl	80058bc <HAL_I2C_Mem_Read>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	75fb      	strb	r3, [r7, #23]
                               reg_addr,
                               I2C_MEMADD_SIZE_8BIT,
                               reg_data,
                               length,
                               10);
    printf("READ: addr=0x%02X reg=0x%02X len=%lu\n", dev_addr, reg_addr, length);
 8002d12:	4b16      	ldr	r3, [pc, #88]	@ (8002d6c <bmp5_i2c_read+0xec>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4814      	ldr	r0, [pc, #80]	@ (8002d70 <bmp5_i2c_read+0xf0>)
 8002d1e:	f010 fa51 	bl	80131c4 <iprintf>

    if (status != HAL_OK)
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <bmp5_i2c_read+0xb8>
    {
        printf("HAL_I2C_Mem_Read FAILED! Status=%d\n", status);
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4811      	ldr	r0, [pc, #68]	@ (8002d74 <bmp5_i2c_read+0xf4>)
 8002d2e:	f010 fa49 	bl	80131c4 <iprintf>
        return BMP5_E_COM_FAIL;
 8002d32:	f06f 0301 	mvn.w	r3, #1
 8002d36:	e00c      	b.n	8002d52 <bmp5_i2c_read+0xd2>
    }




    if (status != HAL_OK)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <bmp5_i2c_read+0xd0>
    {
        printf("I2C READ ERROR: Reg=0x%02X Len=%lu Status=%d\n", reg_addr, length, status);
 8002d3e:	7bf9      	ldrb	r1, [r7, #15]
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	480c      	ldr	r0, [pc, #48]	@ (8002d78 <bmp5_i2c_read+0xf8>)
 8002d46:	f010 fa3d 	bl	80131c4 <iprintf>
        return BMP5_E_COM_FAIL;
 8002d4a:	f06f 0301 	mvn.w	r3, #1
 8002d4e:	e000      	b.n	8002d52 <bmp5_i2c_read+0xd2>
    }

    return BMP5_INTF_RET_SUCCESS;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3720      	adds	r7, #32
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	08016118 	.word	0x08016118
 8002d60:	08016140 	.word	0x08016140
 8002d64:	08016144 	.word	0x08016144
 8002d68:	0801614c 	.word	0x0801614c
 8002d6c:	200001fc 	.word	0x200001fc
 8002d70:	08016160 	.word	0x08016160
 8002d74:	08016188 	.word	0x08016188
 8002d78:	080161ac 	.word	0x080161ac

08002d7c <bmp5_i2c_write>:
 */
BMP5_INTF_RET_TYPE bmp5_i2c_write(uint8_t reg_addr,
                                   const uint8_t *reg_data,
                                   uint32_t length,
                                   void *intf_ptr)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af04      	add	r7, sp, #16
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4603      	mov	r3, r0
 8002d8a:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;

    // I2C handle'ı interface pointer'dan al
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	617b      	str	r3, [r7, #20]

    // I2C 8-bit adres (0x46 << 1 = 0x8C, veya 0x47 << 1 = 0x8E)
    uint8_t dev_addr = BMP581_I2C_ADDR;  // Örn: #define BMP581_I2C_ADDR (0x46 << 1)
 8002d90:	2346      	movs	r3, #70	@ 0x46
 8002d92:	74fb      	strb	r3, [r7, #19]

    // Yazma işlemini gerçekleştir
    status = HAL_I2C_Mem_Write(hi2c,
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	210a      	movs	r1, #10
 8002d9e:	9102      	str	r1, [sp, #8]
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2301      	movs	r3, #1
 8002da8:	218c      	movs	r1, #140	@ 0x8c
 8002daa:	6978      	ldr	r0, [r7, #20]
 8002dac:	f002 fc8c 	bl	80056c8 <HAL_I2C_Mem_Write>
 8002db0:	4603      	mov	r3, r0
 8002db2:	74bb      	strb	r3, [r7, #18]
                               (uint8_t *)reg_data,
                               length,
                               10);  // timeout: 100 ms

    // Başarı kontrolü
    if (status != HAL_OK)
 8002db4:	7cbb      	ldrb	r3, [r7, #18]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <bmp5_i2c_write+0x50>
    {
        printf("I2C WRITE FAIL: Reg=0x%02X Len=%lu Status=%d\n", reg_addr, length, status);
 8002dba:	7bf9      	ldrb	r1, [r7, #15]
 8002dbc:	7cbb      	ldrb	r3, [r7, #18]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4805      	ldr	r0, [pc, #20]	@ (8002dd8 <bmp5_i2c_write+0x5c>)
 8002dc2:	f010 f9ff 	bl	80131c4 <iprintf>
        return BMP5_E_COM_FAIL;
 8002dc6:	f06f 0301 	mvn.w	r3, #1
 8002dca:	e000      	b.n	8002dce <bmp5_i2c_write+0x52>
    }

    return BMP5_INTF_RET_SUCCESS;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	080161dc 	.word	0x080161dc

08002ddc <bmp5_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmp5_error_codes_print_result(const char api_name[], int8_t rslt)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMP5_OK)
 8002de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d05d      	beq.n	8002eac <bmp5_error_codes_print_result+0xd0>
    {
        printf("%s\t", api_name);
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4830      	ldr	r0, [pc, #192]	@ (8002eb4 <bmp5_error_codes_print_result+0xd8>)
 8002df4:	f010 f9e6 	bl	80131c4 <iprintf>
        if (rslt == BMP5_E_NULL_PTR)
 8002df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d106      	bne.n	8002e10 <bmp5_error_codes_print_result+0x34>
        {
            printf("Error [%d] : Null pointer\r\n", rslt);
 8002e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e06:	4619      	mov	r1, r3
 8002e08:	482b      	ldr	r0, [pc, #172]	@ (8002eb8 <bmp5_error_codes_print_result+0xdc>)
 8002e0a:	f010 f9db 	bl	80131c4 <iprintf>
        {
            /* For more error codes refer "*_defs.h" */
            printf("Error [%d] : Unknown error code\r\n", rslt);
        }
    }
}
 8002e0e:	e04d      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_COM_FAIL)
 8002e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e14:	f113 0f02 	cmn.w	r3, #2
 8002e18:	d106      	bne.n	8002e28 <bmp5_error_codes_print_result+0x4c>
            printf("Error [%d] : Communication failure\r\n", rslt);
 8002e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4826      	ldr	r0, [pc, #152]	@ (8002ebc <bmp5_error_codes_print_result+0xe0>)
 8002e22:	f010 f9cf 	bl	80131c4 <iprintf>
}
 8002e26:	e041      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_DEV_NOT_FOUND)
 8002e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e2c:	f113 0f03 	cmn.w	r3, #3
 8002e30:	d106      	bne.n	8002e40 <bmp5_error_codes_print_result+0x64>
            printf("Error [%d] : Device not found\r\n", rslt);
 8002e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e36:	4619      	mov	r1, r3
 8002e38:	4821      	ldr	r0, [pc, #132]	@ (8002ec0 <bmp5_error_codes_print_result+0xe4>)
 8002e3a:	f010 f9c3 	bl	80131c4 <iprintf>
}
 8002e3e:	e035      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_INVALID_CHIP_ID)
 8002e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e44:	f113 0f04 	cmn.w	r3, #4
 8002e48:	d106      	bne.n	8002e58 <bmp5_error_codes_print_result+0x7c>
            printf("Error [%d] : Invalid chip id\r\n", rslt);
 8002e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	481c      	ldr	r0, [pc, #112]	@ (8002ec4 <bmp5_error_codes_print_result+0xe8>)
 8002e52:	f010 f9b7 	bl	80131c4 <iprintf>
}
 8002e56:	e029      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_POWER_UP)
 8002e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5c:	f113 0f05 	cmn.w	r3, #5
 8002e60:	d106      	bne.n	8002e70 <bmp5_error_codes_print_result+0x94>
            printf("Error [%d] : Power up error\r\n", rslt);
 8002e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e66:	4619      	mov	r1, r3
 8002e68:	4817      	ldr	r0, [pc, #92]	@ (8002ec8 <bmp5_error_codes_print_result+0xec>)
 8002e6a:	f010 f9ab 	bl	80131c4 <iprintf>
}
 8002e6e:	e01d      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_POR_SOFTRESET)
 8002e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e74:	f113 0f06 	cmn.w	r3, #6
 8002e78:	d106      	bne.n	8002e88 <bmp5_error_codes_print_result+0xac>
            printf("Error [%d] : Power-on reset/softreset failure\r\n", rslt);
 8002e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4812      	ldr	r0, [pc, #72]	@ (8002ecc <bmp5_error_codes_print_result+0xf0>)
 8002e82:	f010 f99f 	bl	80131c4 <iprintf>
}
 8002e86:	e011      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
        else if (rslt == BMP5_E_INVALID_POWERMODE)
 8002e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8c:	f113 0f07 	cmn.w	r3, #7
 8002e90:	d106      	bne.n	8002ea0 <bmp5_error_codes_print_result+0xc4>
            printf("Error [%d] : Invalid powermode\r\n", rslt);
 8002e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e96:	4619      	mov	r1, r3
 8002e98:	480d      	ldr	r0, [pc, #52]	@ (8002ed0 <bmp5_error_codes_print_result+0xf4>)
 8002e9a:	f010 f993 	bl	80131c4 <iprintf>
}
 8002e9e:	e005      	b.n	8002eac <bmp5_error_codes_print_result+0xd0>
            printf("Error [%d] : Unknown error code\r\n", rslt);
 8002ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	480b      	ldr	r0, [pc, #44]	@ (8002ed4 <bmp5_error_codes_print_result+0xf8>)
 8002ea8:	f010 f98c 	bl	80131c4 <iprintf>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	0801620c 	.word	0x0801620c
 8002eb8:	08016210 	.word	0x08016210
 8002ebc:	0801622c 	.word	0x0801622c
 8002ec0:	08016254 	.word	0x08016254
 8002ec4:	08016274 	.word	0x08016274
 8002ec8:	08016294 	.word	0x08016294
 8002ecc:	080162b4 	.word	0x080162b4
 8002ed0:	080162e4 	.word	0x080162e4
 8002ed4:	08016308 	.word	0x08016308

08002ed8 <init_bmp5_interface>:

/*!
 *  @brief Function to select the interface between SPI and I2C.
 */
int8_t init_bmp5_interface(struct bmp5_dev *bmp5_dev, uint8_t intf)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	@ 0x28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
    int8_t rslt = BMP5_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (bmp5_dev == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <init_bmp5_interface+0x1e>
    {
        return BMP5_E_NULL_PTR;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	e039      	b.n	8002f6a <init_bmp5_interface+0x92>
    }

    // I2C arayüzü kullanılacaksa
    if (intf == BMP5_I2C_INTF)
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d134      	bne.n	8002f66 <init_bmp5_interface+0x8e>
    {
        printf("I2C Interface\n");
 8002efc:	481d      	ldr	r0, [pc, #116]	@ (8002f74 <init_bmp5_interface+0x9c>)
 8002efe:	f010 f9c9 	bl	8013294 <puts>

        bmp5_dev->intf_ptr = &hi2c1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1c      	ldr	r2, [pc, #112]	@ (8002f78 <init_bmp5_interface+0xa0>)
 8002f06:	605a      	str	r2, [r3, #4]
        bmp5_dev->read = bmp5_i2c_read;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f7c <init_bmp5_interface+0xa4>)
 8002f0c:	609a      	str	r2, [r3, #8]
        bmp5_dev->write = bmp5_i2c_write;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1b      	ldr	r2, [pc, #108]	@ (8002f80 <init_bmp5_interface+0xa8>)
 8002f12:	60da      	str	r2, [r3, #12]
        bmp5_dev->intf = BMP5_I2C_INTF;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	755a      	strb	r2, [r3, #21]
        //bmp5_dev->delay_us = bmp5_delay;

        // INT pini ayarla (PB6)
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1a:	f107 0310 	add.w	r3, r7, #16
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	611a      	str	r2, [r3, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <init_bmp5_interface+0xac>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	4a14      	ldr	r2, [pc, #80]	@ (8002f84 <init_bmp5_interface+0xac>)
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3a:	4b12      	ldr	r3, [pc, #72]	@ (8002f84 <init_bmp5_interface+0xac>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f46:	2340      	movs	r3, #64	@ 0x40
 8002f48:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f4e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f54:	f107 0310 	add.w	r3, r7, #16
 8002f58:	4619      	mov	r1, r3
 8002f5a:	480b      	ldr	r0, [pc, #44]	@ (8002f88 <init_bmp5_interface+0xb0>)
 8002f5c:	f001 ff86 	bl	8004e6c <HAL_GPIO_Init>
    else
    {
        return BMP5_E_COM_FAIL;  // Geçersiz arayüz tipi
    }

    return rslt;  // Başarıyla tamamlandıysa BMP5_OK döner
 8002f60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002f64:	e001      	b.n	8002f6a <init_bmp5_interface+0x92>
        return BMP5_E_COM_FAIL;  // Geçersiz arayüz tipi
 8002f66:	f06f 0301 	mvn.w	r3, #1
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3728      	adds	r7, #40	@ 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	0801632c 	.word	0x0801632c
 8002f78:	20000c48 	.word	0x20000c48
 8002f7c:	08002c81 	.word	0x08002c81
 8002f80:	08002d7d 	.word	0x08002d7d
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40020400 	.word	0x40020400

08002f8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	4b10      	ldr	r3, [pc, #64]	@ (8002fd8 <MX_DMA_Init+0x4c>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8002fd8 <MX_DMA_Init+0x4c>)
 8002f9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <MX_DMA_Init+0x4c>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2105      	movs	r1, #5
 8002fb2:	203b      	movs	r0, #59	@ 0x3b
 8002fb4:	f001 fb26 	bl	8004604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002fb8:	203b      	movs	r0, #59	@ 0x3b
 8002fba:	f001 fb3f 	bl	800463c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2105      	movs	r1, #5
 8002fc2:	2045      	movs	r0, #69	@ 0x45
 8002fc4:	f001 fb1e 	bl	8004604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002fc8:	2045      	movs	r0, #69	@ 0x45
 8002fca:	f001 fb37 	bl	800463c <HAL_NVIC_EnableIRQ>

}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800

08002fdc <vApplicationIdleHook>:
void vApplicationTickHook(void);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <vApplicationMallocFailedHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a07      	ldr	r2, [pc, #28]	@ (8003034 <vApplicationGetIdleTaskMemory+0x2c>)
 8003018:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4a06      	ldr	r2, [pc, #24]	@ (8003038 <vApplicationGetIdleTaskMemory+0x30>)
 800301e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003026:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	200003a8 	.word	0x200003a8
 8003038:	20000448 	.word	0x20000448

0800303c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800303c:	b5b0      	push	{r4, r5, r7, lr}
 800303e:	b0a4      	sub	sp, #144	@ 0x90
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

	spiMutex = xSemaphoreCreateMutex();
 8003042:	2001      	movs	r0, #1
 8003044:	f00d f82d 	bl	80100a2 <xQueueCreateMutex>
 8003048:	4603      	mov	r3, r0
 800304a:	4a34      	ldr	r2, [pc, #208]	@ (800311c <MX_FREERTOS_Init+0xe0>)
 800304c:	6013      	str	r3, [r2, #0]
	sdMutex = xSemaphoreCreateMutex();
 800304e:	2001      	movs	r0, #1
 8003050:	f00d f827 	bl	80100a2 <xQueueCreateMutex>
 8003054:	4603      	mov	r3, r0
 8003056:	4a32      	ldr	r2, [pc, #200]	@ (8003120 <MX_FREERTOS_Init+0xe4>)
 8003058:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800305a:	4b32      	ldr	r3, [pc, #200]	@ (8003124 <MX_FREERTOS_Init+0xe8>)
 800305c:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8003060:	461d      	mov	r5, r3
 8003062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003066:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800306a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800306e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f00c fc19 	bl	800f8ac <osThreadCreate>
 800307a:	4603      	mov	r3, r0
 800307c:	4a2a      	ldr	r2, [pc, #168]	@ (8003128 <MX_FREERTOS_Init+0xec>)
 800307e:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_BMI088 */
  osThreadDef(YRT_BMI088, BMI088_fonk, osPriorityBelowNormal, 0, 512);
 8003080:	4b2a      	ldr	r3, [pc, #168]	@ (800312c <MX_FREERTOS_Init+0xf0>)
 8003082:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8003086:	461d      	mov	r5, r3
 8003088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800308a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800308c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003090:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_BMI088Handle = osThreadCreate(osThread(YRT_BMI088), NULL);
 8003094:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f00c fc06 	bl	800f8ac <osThreadCreate>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4a23      	ldr	r2, [pc, #140]	@ (8003130 <MX_FREERTOS_Init+0xf4>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_BMP581 */
  osThreadDef(YRT_BMP581, BMP581_fonk, osPriorityNormal, 0, 512);
 80030a6:	4b23      	ldr	r3, [pc, #140]	@ (8003134 <MX_FREERTOS_Init+0xf8>)
 80030a8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80030ac:	461d      	mov	r5, r3
 80030ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_BMP581Handle = osThreadCreate(osThread(YRT_BMP581), NULL);
 80030ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f00c fbf3 	bl	800f8ac <osThreadCreate>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <MX_FREERTOS_Init+0xfc>)
 80030ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_TRANSMIT */
  osThreadDef(YRT_TRANSMIT, Transmit_veri, osPriorityAboveNormal, 0, 512);
 80030cc:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <MX_FREERTOS_Init+0x100>)
 80030ce:	f107 0420 	add.w	r4, r7, #32
 80030d2:	461d      	mov	r5, r3
 80030d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_TRANSMITHandle = osThreadCreate(osThread(YRT_TRANSMIT), NULL);
 80030e0:	f107 0320 	add.w	r3, r7, #32
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f00c fbe0 	bl	800f8ac <osThreadCreate>
 80030ec:	4603      	mov	r3, r0
 80030ee:	4a14      	ldr	r2, [pc, #80]	@ (8003140 <MX_FREERTOS_Init+0x104>)
 80030f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of YRT_SDCARD */
  osThreadDef(YRT_SDCARD, SDfonk, osPriorityNormal, 0, 512);
 80030f2:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <MX_FREERTOS_Init+0x108>)
 80030f4:	1d3c      	adds	r4, r7, #4
 80030f6:	461d      	mov	r5, r3
 80030f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003100:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  YRT_SDCARDHandle = osThreadCreate(osThread(YRT_SDCARD), NULL);
 8003104:	1d3b      	adds	r3, r7, #4
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f00c fbcf 	bl	800f8ac <osThreadCreate>
 800310e:	4603      	mov	r3, r0
 8003110:	4a0d      	ldr	r2, [pc, #52]	@ (8003148 <MX_FREERTOS_Init+0x10c>)
 8003112:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003114:	bf00      	nop
 8003116:	3790      	adds	r7, #144	@ 0x90
 8003118:	46bd      	mov	sp, r7
 800311a:	bdb0      	pop	{r4, r5, r7, pc}
 800311c:	20000200 	.word	0x20000200
 8003120:	20000204 	.word	0x20000204
 8003124:	08016348 	.word	0x08016348
 8003128:	20000394 	.word	0x20000394
 800312c:	08016370 	.word	0x08016370
 8003130:	20000398 	.word	0x20000398
 8003134:	08016398 	.word	0x08016398
 8003138:	2000039c 	.word	0x2000039c
 800313c:	080163c4 	.word	0x080163c4
 8003140:	200003a0 	.word	0x200003a0
 8003144:	080163ec 	.word	0x080163ec
 8003148:	200003a4 	.word	0x200003a4

0800314c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003154:	2001      	movs	r0, #1
 8003156:	f00c fbf5 	bl	800f944 <osDelay>
 800315a:	e7fb      	b.n	8003154 <StartDefaultTask+0x8>

0800315c <BMI088_fonk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BMI088_fonk */
void BMI088_fonk(void const * argument)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BMI088_fonk */
	 BMI088_Init_I2C(&imu, &hi2c3, 0x18 << 1, 0x69 << 1);
 8003164:	23d2      	movs	r3, #210	@ 0xd2
 8003166:	2230      	movs	r2, #48	@ 0x30
 8003168:	4908      	ldr	r1, [pc, #32]	@ (800318c <BMI088_fonk+0x30>)
 800316a:	4809      	ldr	r0, [pc, #36]	@ (8003190 <BMI088_fonk+0x34>)
 800316c:	f7fd ff42 	bl	8000ff4 <BMI088_Init_I2C>
  /* Infinite loop */
  for(;;)
  {
	  BMI088_ReadAccelerometer(&imu);
 8003170:	4807      	ldr	r0, [pc, #28]	@ (8003190 <BMI088_fonk+0x34>)
 8003172:	f7fe f9e9 	bl	8001548 <BMI088_ReadAccelerometer>
	 	 	  BMI088_ReadGyroscope(&imu);
 8003176:	4806      	ldr	r0, [pc, #24]	@ (8003190 <BMI088_fonk+0x34>)
 8003178:	f7fe fa80 	bl	800167c <BMI088_ReadGyroscope>
	 	 	  rollpitchyaw(&imu);
 800317c:	4804      	ldr	r0, [pc, #16]	@ (8003190 <BMI088_fonk+0x34>)
 800317e:	f7fe f923 	bl	80013c8 <rollpitchyaw>
	 vTaskDelay(pdMS_TO_TICKS(50));
 8003182:	2032      	movs	r0, #50	@ 0x32
 8003184:	f00e f81a 	bl	80111bc <vTaskDelay>
  {
 8003188:	bf00      	nop
 800318a:	e7f1      	b.n	8003170 <BMI088_fonk+0x14>
 800318c:	20000c9c 	.word	0x20000c9c
 8003190:	20000208 	.word	0x20000208

08003194 <BMP581_fonk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BMP581_fonk */
void BMP581_fonk(void const * argument)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BMP581_fonk */
  /* Infinite loop */
  for(;;)
  {
	  BMP581();
 800319c:	f000 fcbe 	bl	8003b1c <BMP581>
	  vTaskDelay(pdMS_TO_TICKS(100));
 80031a0:	2064      	movs	r0, #100	@ 0x64
 80031a2:	f00e f80b 	bl	80111bc <vTaskDelay>
  {
 80031a6:	bf00      	nop
 80031a8:	e7f8      	b.n	800319c <BMP581_fonk+0x8>
	...

080031ac <Transmit_veri>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Transmit_veri */
void Transmit_veri(void const * argument)
{
 80031ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b0:	b09e      	sub	sp, #120	@ 0x78
 80031b2:	af0c      	add	r7, sp, #48	@ 0x30
 80031b4:	6478      	str	r0, [r7, #68]	@ 0x44
  /* USER CODE BEGIN Transmit_veri */

	    // SPI ile Lora işlem
	 myLoRa = configureLoRa();
 80031b6:	4c64      	ldr	r4, [pc, #400]	@ (8003348 <Transmit_veri+0x19c>)
 80031b8:	f107 0310 	add.w	r3, r7, #16
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe fae1 	bl	8001784 <configureLoRa>
 80031c2:	4625      	mov	r5, r4
 80031c4:	f107 0410 	add.w	r4, r7, #16
 80031c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	 if(LoRa_init(&myLoRa)== LORA_OK){
 80031d8:	485b      	ldr	r0, [pc, #364]	@ (8003348 <Transmit_veri+0x19c>)
 80031da:	f7fe fe2c 	bl	8001e36 <LoRa_init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80031e2:	d102      	bne.n	80031ea <Transmit_veri+0x3e>
	    LoRa_stat = 1;
 80031e4:	4b59      	ldr	r3, [pc, #356]	@ (800334c <Transmit_veri+0x1a0>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
	    }
	   LoRa_startReceiving(&myLoRa);
 80031ea:	4857      	ldr	r0, [pc, #348]	@ (8003348 <Transmit_veri+0x19c>)
 80031ec:	f7fe fe17 	bl	8001e1e <LoRa_startReceiving>

	   snprintf(logBuf,sizeof(logBuf), "ivme_x: %.3f,\nivme_y: %.3f,\nivme_z: %.3f,\nroll: %.3f,\npitch: %.3f,\nyaw: %.3f\n\r", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 80031f0:	4b57      	ldr	r3, [pc, #348]	@ (8003350 <Transmit_veri+0x1a4>)
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f9c7 	bl	8000588 <__aeabi_f2d>
 80031fa:	4604      	mov	r4, r0
 80031fc:	460d      	mov	r5, r1
 80031fe:	4b54      	ldr	r3, [pc, #336]	@ (8003350 <Transmit_veri+0x1a4>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd f9c0 	bl	8000588 <__aeabi_f2d>
 8003208:	4680      	mov	r8, r0
 800320a:	4689      	mov	r9, r1
 800320c:	4b50      	ldr	r3, [pc, #320]	@ (8003350 <Transmit_veri+0x1a4>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd f9b9 	bl	8000588 <__aeabi_f2d>
 8003216:	4682      	mov	sl, r0
 8003218:	468b      	mov	fp, r1
 800321a:	4b4e      	ldr	r3, [pc, #312]	@ (8003354 <Transmit_veri+0x1a8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd f9b2 	bl	8000588 <__aeabi_f2d>
 8003224:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003228:	4b4b      	ldr	r3, [pc, #300]	@ (8003358 <Transmit_veri+0x1ac>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd f9ab 	bl	8000588 <__aeabi_f2d>
 8003232:	e9c7 0100 	strd	r0, r1, [r7]
 8003236:	4b49      	ldr	r3, [pc, #292]	@ (800335c <Transmit_veri+0x1b0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f9a4 	bl	8000588 <__aeabi_f2d>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8003248:	ed97 7b00 	vldr	d7, [r7]
 800324c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003250:	ed97 7b02 	vldr	d7, [r7, #8]
 8003254:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003258:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800325c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003260:	e9cd 4500 	strd	r4, r5, [sp]
 8003264:	4a3e      	ldr	r2, [pc, #248]	@ (8003360 <Transmit_veri+0x1b4>)
 8003266:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800326a:	483e      	ldr	r0, [pc, #248]	@ (8003364 <Transmit_veri+0x1b8>)
 800326c:	f010 f81a 	bl	80132a4 <sniprintf>
	   	 		  roll, pitch, yaw);

	   LoRa_transmit(&myLoRa, (uint8_t*)logBuf, strlen(logBuf), 10);
 8003270:	483c      	ldr	r0, [pc, #240]	@ (8003364 <Transmit_veri+0x1b8>)
 8003272:	f7fd f81d 	bl	80002b0 <strlen>
 8003276:	4603      	mov	r3, r0
 8003278:	b2da      	uxtb	r2, r3
 800327a:	230a      	movs	r3, #10
 800327c:	4939      	ldr	r1, [pc, #228]	@ (8003364 <Transmit_veri+0x1b8>)
 800327e:	4832      	ldr	r0, [pc, #200]	@ (8003348 <Transmit_veri+0x19c>)
 8003280:	f7fe fd75 	bl	8001d6e <LoRa_transmit>
  /* Infinite loop */
  for(;;)
  {
	  snprintf(logBuf,sizeof(logBuf), "ivme_x: %.3f,\nivme_y: %.3f,\nivme_z: %.3f,\nroll: %.3f,\npitch: %.3f,\nyaw: %.3f\n\r", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 8003284:	4b32      	ldr	r3, [pc, #200]	@ (8003350 <Transmit_veri+0x1a4>)
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd f97d 	bl	8000588 <__aeabi_f2d>
 800328e:	4604      	mov	r4, r0
 8003290:	460d      	mov	r5, r1
 8003292:	4b2f      	ldr	r3, [pc, #188]	@ (8003350 <Transmit_veri+0x1a4>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd f976 	bl	8000588 <__aeabi_f2d>
 800329c:	4680      	mov	r8, r0
 800329e:	4689      	mov	r9, r1
 80032a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003350 <Transmit_veri+0x1a4>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd f96f 	bl	8000588 <__aeabi_f2d>
 80032aa:	4682      	mov	sl, r0
 80032ac:	468b      	mov	fp, r1
 80032ae:	4b29      	ldr	r3, [pc, #164]	@ (8003354 <Transmit_veri+0x1a8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd f968 	bl	8000588 <__aeabi_f2d>
 80032b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80032bc:	4b26      	ldr	r3, [pc, #152]	@ (8003358 <Transmit_veri+0x1ac>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f961 	bl	8000588 <__aeabi_f2d>
 80032c6:	e9c7 0100 	strd	r0, r1, [r7]
 80032ca:	4b24      	ldr	r3, [pc, #144]	@ (800335c <Transmit_veri+0x1b0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd f95a 	bl	8000588 <__aeabi_f2d>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80032dc:	ed97 7b00 	vldr	d7, [r7]
 80032e0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80032e4:	ed97 7b02 	vldr	d7, [r7, #8]
 80032e8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80032ec:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80032f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80032f4:	e9cd 4500 	strd	r4, r5, [sp]
 80032f8:	4a19      	ldr	r2, [pc, #100]	@ (8003360 <Transmit_veri+0x1b4>)
 80032fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032fe:	4819      	ldr	r0, [pc, #100]	@ (8003364 <Transmit_veri+0x1b8>)
 8003300:	f00f ffd0 	bl	80132a4 <sniprintf>
	 	   	 		  roll, pitch, yaw);
	  if (xSemaphoreTake(spiMutex, portMAX_DELAY) == pdTRUE) {
 8003304:	4b18      	ldr	r3, [pc, #96]	@ (8003368 <Transmit_veri+0x1bc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	4618      	mov	r0, r3
 800330e:	f00d fa0d 	bl	801072c <xQueueSemaphoreTake>
 8003312:	4603      	mov	r3, r0
 8003314:	2b01      	cmp	r3, #1
 8003316:	d1b5      	bne.n	8003284 <Transmit_veri+0xd8>

	 	   LoRa_transmit(&myLoRa, (uint8_t*)logBuf, strlen(logBuf), 10);
 8003318:	4812      	ldr	r0, [pc, #72]	@ (8003364 <Transmit_veri+0x1b8>)
 800331a:	f7fc ffc9 	bl	80002b0 <strlen>
 800331e:	4603      	mov	r3, r0
 8003320:	b2da      	uxtb	r2, r3
 8003322:	230a      	movs	r3, #10
 8003324:	490f      	ldr	r1, [pc, #60]	@ (8003364 <Transmit_veri+0x1b8>)
 8003326:	4808      	ldr	r0, [pc, #32]	@ (8003348 <Transmit_veri+0x19c>)
 8003328:	f7fe fd21 	bl	8001d6e <LoRa_transmit>
    osDelay(1);
 800332c:	2001      	movs	r0, #1
 800332e:	f00c fb09 	bl	800f944 <osDelay>
    xSemaphoreGive(spiMutex); // işi bitince bırak
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <Transmit_veri+0x1bc>)
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	2200      	movs	r2, #0
 800333a:	2100      	movs	r1, #0
 800333c:	f00c fee4 	bl	8010108 <xQueueGenericSend>
    vTaskDelay(pdMS_TO_TICKS(200));
 8003340:	20c8      	movs	r0, #200	@ 0xc8
 8003342:	f00d ff3b 	bl	80111bc <vTaskDelay>
	  snprintf(logBuf,sizeof(logBuf), "ivme_x: %.3f,\nivme_y: %.3f,\nivme_z: %.3f,\nroll: %.3f,\npitch: %.3f,\nyaw: %.3f\n\r", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 8003346:	e79d      	b.n	8003284 <Transmit_veri+0xd8>
 8003348:	2000024c 	.word	0x2000024c
 800334c:	20000278 	.word	0x20000278
 8003350:	20000208 	.word	0x20000208
 8003354:	20000280 	.word	0x20000280
 8003358:	20000284 	.word	0x20000284
 800335c:	20000288 	.word	0x20000288
 8003360:	08016408 	.word	0x08016408
 8003364:	2000028c 	.word	0x2000028c
 8003368:	20000200 	.word	0x20000200

0800336c <SDfonk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SDfonk */
void SDfonk(void const * argument)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 8003372:	af00      	add	r7, sp, #0
 8003374:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8003378:	f2a3 43a4 	subw	r3, r3, #1188	@ 0x4a4
 800337c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN SDfonk */

	bool isCardInserted = true;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
	extern SD_HandleTypeDef hsd;
	  if (xSemaphoreTake(sdMutex, portMAX_DELAY) == pdTRUE) {
 8003384:	4b38      	ldr	r3, [pc, #224]	@ (8003468 <SDfonk+0xfc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	4618      	mov	r0, r3
 800338e:	f00d f9cd 	bl	801072c <xQueueSemaphoreTake>
 8003392:	4603      	mov	r3, r0
 8003394:	2b01      	cmp	r3, #1
 8003396:	d161      	bne.n	800345c <SDfonk+0xf0>
	FATFS fs;
	FIL file;
	UINT bw;
	FRESULT res;
	 HAL_Delay(100);  // Kartı taktıktan sonra SDIO stabil hale gelsin
 8003398:	2064      	movs	r0, #100	@ 0x64
 800339a:	f001 f833 	bl	8004404 <HAL_Delay>

	    if (HAL_SD_Init(&hsd) != HAL_OK) {
 800339e:	4833      	ldr	r0, [pc, #204]	@ (800346c <SDfonk+0x100>)
 80033a0:	f004 fae4 	bl	800796c <HAL_SD_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <SDfonk+0x4a>
	        printf("SD Init ERROR!\r\n");
 80033aa:	4831      	ldr	r0, [pc, #196]	@ (8003470 <SDfonk+0x104>)
 80033ac:	f00f ff72 	bl	8013294 <puts>
	        vTaskDelete(NULL);
 80033b0:	2000      	movs	r0, #0
 80033b2:	f00d fe73 	bl	801109c <vTaskDelete>
	    }

	    if (f_mount(&fs, "0:", 1) != FR_OK) {
 80033b6:	f107 030c 	add.w	r3, r7, #12
 80033ba:	2201      	movs	r2, #1
 80033bc:	492d      	ldr	r1, [pc, #180]	@ (8003474 <SDfonk+0x108>)
 80033be:	4618      	mov	r0, r3
 80033c0:	f00b f886 	bl	800e4d0 <f_mount>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <SDfonk+0x6a>
	        printf("f_mount failed\r\n");
 80033ca:	482b      	ldr	r0, [pc, #172]	@ (8003478 <SDfonk+0x10c>)
 80033cc:	f00f ff62 	bl	8013294 <puts>
	        vTaskDelete(NULL);
 80033d0:	2000      	movs	r0, #0
 80033d2:	f00d fe63 	bl	801109c <vTaskDelete>
	    }

	    if (f_open(&file, "test.txt", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 80033d6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80033da:	220a      	movs	r2, #10
 80033dc:	4927      	ldr	r1, [pc, #156]	@ (800347c <SDfonk+0x110>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f00b f8da 	bl	800e598 <f_open>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d110      	bne.n	800340c <SDfonk+0xa0>
	        f_write(&file, "Hello SD Card!\r\n", 17, &bw);
 80033ea:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80033ee:	f507 7012 	add.w	r0, r7, #584	@ 0x248
 80033f2:	2211      	movs	r2, #17
 80033f4:	4922      	ldr	r1, [pc, #136]	@ (8003480 <SDfonk+0x114>)
 80033f6:	f00b fcd6 	bl	800eda6 <f_write>
	        f_close(&file);
 80033fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80033fe:	4618      	mov	r0, r3
 8003400:	f00c f86a 	bl	800f4d8 <f_close>
	        printf("SD Write Success\r\n");
 8003404:	481f      	ldr	r0, [pc, #124]	@ (8003484 <SDfonk+0x118>)
 8003406:	f00f ff45 	bl	8013294 <puts>
 800340a:	e002      	b.n	8003412 <SDfonk+0xa6>
	    } else {
	        printf("f_open failed\r\n");
 800340c:	481e      	ldr	r0, [pc, #120]	@ (8003488 <SDfonk+0x11c>)
 800340e:	f00f ff41 	bl	8013294 <puts>
  for(;;)
  {


	  	             // Dosyayı aç (yoksa oluştur)
	  	             res = f_open(&file, "zeynep.txt", FA_OPEN_APPEND | FA_WRITE);
 8003412:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8003416:	2232      	movs	r2, #50	@ 0x32
 8003418:	491c      	ldr	r1, [pc, #112]	@ (800348c <SDfonk+0x120>)
 800341a:	4618      	mov	r0, r3
 800341c:	f00b f8bc 	bl	800e598 <f_open>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 34a6 	strb.w	r3, [r7, #1190]	@ 0x4a6
	  	             if(res==FR_OK)
 8003426:	f897 34a6 	ldrb.w	r3, [r7, #1190]	@ 0x4a6
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f1      	bne.n	8003412 <SDfonk+0xa6>
	  	             {
	  	            	f_write(&file, logBuf, strlen(logBuf), &bytesWritten);
 800342e:	4818      	ldr	r0, [pc, #96]	@ (8003490 <SDfonk+0x124>)
 8003430:	f7fc ff3e 	bl	80002b0 <strlen>
 8003434:	4602      	mov	r2, r0
 8003436:	f507 7012 	add.w	r0, r7, #584	@ 0x248
 800343a:	4b16      	ldr	r3, [pc, #88]	@ (8003494 <SDfonk+0x128>)
 800343c:	4914      	ldr	r1, [pc, #80]	@ (8003490 <SDfonk+0x124>)
 800343e:	f00b fcb2 	bl	800eda6 <f_write>
	  	            	 f_close(&file);
 8003442:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8003446:	4618      	mov	r0, r3
 8003448:	f00c f846 	bl	800f4d8 <f_close>
	  	  	           xSemaphoreGive(sdMutex);
 800344c:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <SDfonk+0xfc>)
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	2300      	movs	r3, #0
 8003452:	2200      	movs	r2, #0
 8003454:	2100      	movs	r1, #0
 8003456:	f00c fe57 	bl	8010108 <xQueueGenericSend>
	  	             res = f_open(&file, "zeynep.txt", FA_OPEN_APPEND | FA_WRITE);
 800345a:	e7da      	b.n	8003412 <SDfonk+0xa6>
	  	             }
	  	         }
    osDelay(1);
  }
  /* USER CODE END SDfonk */
}
 800345c:	bf00      	nop
 800345e:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000204 	.word	0x20000204
 800346c:	20000cf0 	.word	0x20000cf0
 8003470:	08016458 	.word	0x08016458
 8003474:	08016468 	.word	0x08016468
 8003478:	0801646c 	.word	0x0801646c
 800347c:	0801647c 	.word	0x0801647c
 8003480:	08016488 	.word	0x08016488
 8003484:	0801649c 	.word	0x0801649c
 8003488:	080164b0 	.word	0x080164b0
 800348c:	080164c0 	.word	0x080164c0
 8003490:	2000028c 	.word	0x2000028c
 8003494:	2000027c 	.word	0x2000027c

08003498 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	@ 0x28
 800349c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349e:	f107 0314 	add.w	r3, r7, #20
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	4b48      	ldr	r3, [pc, #288]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	4a47      	ldr	r2, [pc, #284]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034be:	4b45      	ldr	r3, [pc, #276]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	4b41      	ldr	r3, [pc, #260]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	4a40      	ldr	r2, [pc, #256]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034da:	4b3e      	ldr	r3, [pc, #248]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	4b3a      	ldr	r3, [pc, #232]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4a39      	ldr	r2, [pc, #228]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4b37      	ldr	r3, [pc, #220]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	4b33      	ldr	r3, [pc, #204]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	4a32      	ldr	r2, [pc, #200]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	6313      	str	r3, [r2, #48]	@ 0x30
 8003512:	4b30      	ldr	r3, [pc, #192]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	607b      	str	r3, [r7, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	4b2c      	ldr	r3, [pc, #176]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	4a2b      	ldr	r2, [pc, #172]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	6313      	str	r3, [r2, #48]	@ 0x30
 800352e:	4b29      	ldr	r3, [pc, #164]	@ (80035d4 <MX_GPIO_Init+0x13c>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_SET);
 800353a:	2201      	movs	r2, #1
 800353c:	2118      	movs	r1, #24
 800353e:	4826      	ldr	r0, [pc, #152]	@ (80035d8 <MX_GPIO_Init+0x140>)
 8003540:	f001 ff34 	bl	80053ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 8003544:	2318      	movs	r3, #24
 8003546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003548:	2301      	movs	r3, #1
 800354a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2300      	movs	r3, #0
 8003552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4619      	mov	r1, r3
 800355a:	481f      	ldr	r0, [pc, #124]	@ (80035d8 <MX_GPIO_Init+0x140>)
 800355c:	f001 fc86 	bl	8004e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8003560:	2310      	movs	r3, #16
 8003562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003564:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4619      	mov	r1, r3
 8003574:	4819      	ldr	r0, [pc, #100]	@ (80035dc <MX_GPIO_Init+0x144>)
 8003576:	f001 fc79 	bl	8004e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800357a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800357e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003580:	2300      	movs	r3, #0
 8003582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003584:	2302      	movs	r3, #2
 8003586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4619      	mov	r1, r3
 800358e:	4814      	ldr	r0, [pc, #80]	@ (80035e0 <MX_GPIO_Init+0x148>)
 8003590:	f001 fc6c 	bl	8004e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8003594:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800359a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800359e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	4619      	mov	r1, r3
 80035aa:	480b      	ldr	r0, [pc, #44]	@ (80035d8 <MX_GPIO_Init+0x140>)
 80035ac:	f001 fc5e 	bl	8004e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BMP_INT_Pin */
  GPIO_InitStruct.Pin = BMP_INT_Pin;
 80035b0:	2320      	movs	r3, #32
 80035b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80035b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMP_INT_GPIO_Port, &GPIO_InitStruct);
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	4619      	mov	r1, r3
 80035c4:	4806      	ldr	r0, [pc, #24]	@ (80035e0 <MX_GPIO_Init+0x148>)
 80035c6:	f001 fc51 	bl	8004e6c <HAL_GPIO_Init>

}
 80035ca:	bf00      	nop
 80035cc:	3728      	adds	r7, #40	@ 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40020000 	.word	0x40020000
 80035dc:	40020800 	.word	0x40020800
 80035e0:	40020400 	.word	0x40020400

080035e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035e8:	4b12      	ldr	r3, [pc, #72]	@ (8003634 <MX_I2C1_Init+0x50>)
 80035ea:	4a13      	ldr	r2, [pc, #76]	@ (8003638 <MX_I2C1_Init+0x54>)
 80035ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80035ee:	4b11      	ldr	r3, [pc, #68]	@ (8003634 <MX_I2C1_Init+0x50>)
 80035f0:	4a12      	ldr	r2, [pc, #72]	@ (800363c <MX_I2C1_Init+0x58>)
 80035f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003634 <MX_I2C1_Init+0x50>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80035fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003634 <MX_I2C1_Init+0x50>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <MX_I2C1_Init+0x50>)
 8003602:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003608:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <MX_I2C1_Init+0x50>)
 800360a:	2200      	movs	r2, #0
 800360c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800360e:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <MX_I2C1_Init+0x50>)
 8003610:	2200      	movs	r2, #0
 8003612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003614:	4b07      	ldr	r3, [pc, #28]	@ (8003634 <MX_I2C1_Init+0x50>)
 8003616:	2200      	movs	r2, #0
 8003618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800361a:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <MX_I2C1_Init+0x50>)
 800361c:	2200      	movs	r2, #0
 800361e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003620:	4804      	ldr	r0, [pc, #16]	@ (8003634 <MX_I2C1_Init+0x50>)
 8003622:	f001 fedd 	bl	80053e0 <HAL_I2C_Init>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800362c:	f000 f9ca 	bl	80039c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000c48 	.word	0x20000c48
 8003638:	40005400 	.word	0x40005400
 800363c:	000186a0 	.word	0x000186a0

08003640 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003644:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <MX_I2C3_Init+0x50>)
 8003646:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <MX_I2C3_Init+0x54>)
 8003648:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800364a:	4b11      	ldr	r3, [pc, #68]	@ (8003690 <MX_I2C3_Init+0x50>)
 800364c:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <MX_I2C3_Init+0x58>)
 800364e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003650:	4b0f      	ldr	r3, [pc, #60]	@ (8003690 <MX_I2C3_Init+0x50>)
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003656:	4b0e      	ldr	r3, [pc, #56]	@ (8003690 <MX_I2C3_Init+0x50>)
 8003658:	2200      	movs	r2, #0
 800365a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800365c:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <MX_I2C3_Init+0x50>)
 800365e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003662:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003664:	4b0a      	ldr	r3, [pc, #40]	@ (8003690 <MX_I2C3_Init+0x50>)
 8003666:	2200      	movs	r2, #0
 8003668:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800366a:	4b09      	ldr	r3, [pc, #36]	@ (8003690 <MX_I2C3_Init+0x50>)
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003670:	4b07      	ldr	r3, [pc, #28]	@ (8003690 <MX_I2C3_Init+0x50>)
 8003672:	2200      	movs	r2, #0
 8003674:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003676:	4b06      	ldr	r3, [pc, #24]	@ (8003690 <MX_I2C3_Init+0x50>)
 8003678:	2200      	movs	r2, #0
 800367a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800367c:	4804      	ldr	r0, [pc, #16]	@ (8003690 <MX_I2C3_Init+0x50>)
 800367e:	f001 feaf 	bl	80053e0 <HAL_I2C_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003688:	f000 f99c 	bl	80039c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800368c:	bf00      	nop
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000c9c 	.word	0x20000c9c
 8003694:	40005c00 	.word	0x40005c00
 8003698:	000186a0 	.word	0x000186a0

0800369c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	@ 0x30
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 031c 	add.w	r3, r7, #28
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a42      	ldr	r2, [pc, #264]	@ (80037c4 <HAL_I2C_MspInit+0x128>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d12c      	bne.n	8003718 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	4b41      	ldr	r3, [pc, #260]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	4a40      	ldr	r2, [pc, #256]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ce:	4b3e      	ldr	r3, [pc, #248]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036da:	23c0      	movs	r3, #192	@ 0xc0
 80036dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036de:	2312      	movs	r3, #18
 80036e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036e2:	2301      	movs	r3, #1
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e6:	2303      	movs	r3, #3
 80036e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036ea:	2304      	movs	r3, #4
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ee:	f107 031c 	add.w	r3, r7, #28
 80036f2:	4619      	mov	r1, r3
 80036f4:	4835      	ldr	r0, [pc, #212]	@ (80037cc <HAL_I2C_MspInit+0x130>)
 80036f6:	f001 fbb9 	bl	8004e6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	4b32      	ldr	r3, [pc, #200]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	4a31      	ldr	r2, [pc, #196]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003708:	6413      	str	r3, [r2, #64]	@ 0x40
 800370a:	4b2f      	ldr	r3, [pc, #188]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003716:	e050      	b.n	80037ba <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a2c      	ldr	r2, [pc, #176]	@ (80037d0 <HAL_I2C_MspInit+0x134>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d14b      	bne.n	80037ba <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	4b28      	ldr	r3, [pc, #160]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	4a27      	ldr	r2, [pc, #156]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	6313      	str	r3, [r2, #48]	@ 0x30
 8003732:	4b25      	ldr	r3, [pc, #148]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	4b21      	ldr	r3, [pc, #132]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003746:	4a20      	ldr	r2, [pc, #128]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6313      	str	r3, [r2, #48]	@ 0x30
 800374e:	4b1e      	ldr	r3, [pc, #120]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800375a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800375e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003760:	2312      	movs	r3, #18
 8003762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003764:	2301      	movs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800376c:	2304      	movs	r3, #4
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003770:	f107 031c 	add.w	r3, r7, #28
 8003774:	4619      	mov	r1, r3
 8003776:	4817      	ldr	r0, [pc, #92]	@ (80037d4 <HAL_I2C_MspInit+0x138>)
 8003778:	f001 fb78 	bl	8004e6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800377c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003782:	2312      	movs	r3, #18
 8003784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003786:	2301      	movs	r3, #1
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378a:	2303      	movs	r3, #3
 800378c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800378e:	2304      	movs	r3, #4
 8003790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003792:	f107 031c 	add.w	r3, r7, #28
 8003796:	4619      	mov	r1, r3
 8003798:	480f      	ldr	r0, [pc, #60]	@ (80037d8 <HAL_I2C_MspInit+0x13c>)
 800379a:	f001 fb67 	bl	8004e6c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	4a08      	ldr	r2, [pc, #32]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 80037a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ae:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <HAL_I2C_MspInit+0x12c>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]
}
 80037ba:	bf00      	nop
 80037bc:	3730      	adds	r7, #48	@ 0x30
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40005400 	.word	0x40005400
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40020400 	.word	0x40020400
 80037d0:	40005c00 	.word	0x40005c00
 80037d4:	40020800 	.word	0x40020800
 80037d8:	40020000 	.word	0x40020000

080037dc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a15      	ldr	r2, [pc, #84]	@ (8003840 <HAL_I2C_MspDeInit+0x64>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10e      	bne.n	800380c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80037ee:	4b15      	ldr	r3, [pc, #84]	@ (8003844 <HAL_I2C_MspDeInit+0x68>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	4a14      	ldr	r2, [pc, #80]	@ (8003844 <HAL_I2C_MspDeInit+0x68>)
 80037f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037f8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80037fa:	2140      	movs	r1, #64	@ 0x40
 80037fc:	4812      	ldr	r0, [pc, #72]	@ (8003848 <HAL_I2C_MspDeInit+0x6c>)
 80037fe:	f001 fcc9 	bl	8005194 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003802:	2180      	movs	r1, #128	@ 0x80
 8003804:	4810      	ldr	r0, [pc, #64]	@ (8003848 <HAL_I2C_MspDeInit+0x6c>)
 8003806:	f001 fcc5 	bl	8005194 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800380a:	e014      	b.n	8003836 <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C3)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0e      	ldr	r2, [pc, #56]	@ (800384c <HAL_I2C_MspDeInit+0x70>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d10f      	bne.n	8003836 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003816:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <HAL_I2C_MspDeInit+0x68>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	4a0a      	ldr	r2, [pc, #40]	@ (8003844 <HAL_I2C_MspDeInit+0x68>)
 800381c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003820:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8003822:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003826:	480a      	ldr	r0, [pc, #40]	@ (8003850 <HAL_I2C_MspDeInit+0x74>)
 8003828:	f001 fcb4 	bl	8005194 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800382c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003830:	4808      	ldr	r0, [pc, #32]	@ (8003854 <HAL_I2C_MspDeInit+0x78>)
 8003832:	f001 fcaf 	bl	8005194 <HAL_GPIO_DeInit>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40005400 	.word	0x40005400
 8003844:	40023800 	.word	0x40023800
 8003848:	40020400 	.word	0x40020400
 800384c:	40005c00 	.word	0x40005c00
 8003850:	40020800 	.word	0x40020800
 8003854:	40020000 	.word	0x40020000

08003858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800385c:	f000 fd90 	bl	8004380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003860:	f000 f832 	bl	80038c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003864:	f7ff fe18 	bl	8003498 <MX_GPIO_Init>
  MX_DMA_Init();
 8003868:	f7ff fb90 	bl	8002f8c <MX_DMA_Init>
  MX_I2C1_Init();
 800386c:	f7ff feba 	bl	80035e4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003870:	f7ff fee6 	bl	8003640 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003874:	f000 fb0e 	bl	8003e94 <MX_SPI1_Init>
  MX_SDIO_SD_Init();
 8003878:	f000 f984 	bl	8003b84 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800387c:	f007 f88e 	bl	800a99c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_SD_DeInit(&hsd);
 8003880:	480e      	ldr	r0, [pc, #56]	@ (80038bc <main+0x64>)
 8003882:	f004 f91b 	bl	8007abc <HAL_SD_DeInit>
  HAL_Delay(10);
 8003886:	200a      	movs	r0, #10
 8003888:	f000 fdbc 	bl	8004404 <HAL_Delay>
  if (HAL_SD_Init(&hsd) == HAL_OK) {
 800388c:	480b      	ldr	r0, [pc, #44]	@ (80038bc <main+0x64>)
 800388e:	f004 f86d 	bl	800796c <HAL_SD_Init>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <main+0x56>
      if (HAL_SD_InitCard(&hsd) == HAL_OK) {
 8003898:	4808      	ldr	r0, [pc, #32]	@ (80038bc <main+0x64>)
 800389a:	f004 f897 	bl	80079cc <HAL_SD_InitCard>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d104      	bne.n	80038ae <main+0x56>
          f_mount(&SDFatFS, SDPath, 1);
 80038a4:	2201      	movs	r2, #1
 80038a6:	4906      	ldr	r1, [pc, #24]	@ (80038c0 <main+0x68>)
 80038a8:	4806      	ldr	r0, [pc, #24]	@ (80038c4 <main+0x6c>)
 80038aa:	f00a fe11 	bl	800e4d0 <f_mount>
  }

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80038ae:	f7ff fbc5 	bl	800303c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80038b2:	f00b ffd8 	bl	800f866 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80038b6:	bf00      	nop
 80038b8:	e7fd      	b.n	80038b6 <main+0x5e>
 80038ba:	bf00      	nop
 80038bc:	20000cf0 	.word	0x20000cf0
 80038c0:	20000ee0 	.word	0x20000ee0
 80038c4:	20000ee4 	.word	0x20000ee4

080038c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b094      	sub	sp, #80	@ 0x50
 80038cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038ce:	f107 031c 	add.w	r3, r7, #28
 80038d2:	2234      	movs	r2, #52	@ 0x34
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f00f fdf2 	bl	80134c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038dc:	f107 0308 	add.w	r3, r7, #8
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	2300      	movs	r3, #0
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	4b29      	ldr	r3, [pc, #164]	@ (8003998 <SystemClock_Config+0xd0>)
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	4a28      	ldr	r2, [pc, #160]	@ (8003998 <SystemClock_Config+0xd0>)
 80038f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80038fc:	4b26      	ldr	r3, [pc, #152]	@ (8003998 <SystemClock_Config+0xd0>)
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003908:	2300      	movs	r3, #0
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4b23      	ldr	r3, [pc, #140]	@ (800399c <SystemClock_Config+0xd4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a22      	ldr	r2, [pc, #136]	@ (800399c <SystemClock_Config+0xd4>)
 8003912:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b20      	ldr	r3, [pc, #128]	@ (800399c <SystemClock_Config+0xd4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003924:	2301      	movs	r3, #1
 8003926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003928:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800392c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800392e:	2302      	movs	r3, #2
 8003930:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003932:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003936:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003938:	2308      	movs	r3, #8
 800393a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800393c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003940:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003942:	2302      	movs	r3, #2
 8003944:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003946:	2307      	movs	r3, #7
 8003948:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800394a:	2302      	movs	r3, #2
 800394c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800394e:	f107 031c 	add.w	r3, r7, #28
 8003952:	4618      	mov	r0, r3
 8003954:	f003 fd6c 	bl	8007430 <HAL_RCC_OscConfig>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800395e:	f000 f831 	bl	80039c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003962:	230f      	movs	r3, #15
 8003964:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003966:	2302      	movs	r3, #2
 8003968:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800396e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003978:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800397a:	f107 0308 	add.w	r3, r7, #8
 800397e:	2105      	movs	r1, #5
 8003980:	4618      	mov	r0, r3
 8003982:	f002 feaf 	bl	80066e4 <HAL_RCC_ClockConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800398c:	f000 f81a 	bl	80039c4 <Error_Handler>
  }
}
 8003990:	bf00      	nop
 8003992:	3750      	adds	r7, #80	@ 0x50
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	40007000 	.word	0x40007000

080039a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a04      	ldr	r2, [pc, #16]	@ (80039c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80039b2:	f000 fd07 	bl	80043c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40010000 	.word	0x40010000

080039c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039c8:	b672      	cpsid	i
}
 80039ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039cc:	bf00      	nop
 80039ce:	e7fd      	b.n	80039cc <Error_Handler+0x8>

080039d0 <set_config>:

/******************************************************************************/
/*!            Functions                                        */

static int8_t set_config(struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
    //BMP5 sensörünü ölçüm yapmaya hazır hale getirecek şekilde konfigüre etmek
    int8_t rslt;
    struct bmp5_iir_config set_iir_cfg;
    struct bmp5_int_source_select int_source_select;

    rslt = bmp5_set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 80039da:	6839      	ldr	r1, [r7, #0]
 80039dc:	2000      	movs	r0, #0
 80039de:	f7fe fc61 	bl	80022a4 <bmp5_set_power_mode>
 80039e2:	4603      	mov	r3, r0
 80039e4:	75fb      	strb	r3, [r7, #23]
    //bmp5_error_codes_print_result("bmp5_set_power_mode1", rslt);

    if (rslt == BMP5_OK)
 80039e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d148      	bne.n	8003a80 <set_config+0xb0>
    {
        /* Get default odr */
        rslt = bmp5_get_osr_odr_press_config(osr_odr_press_cfg, dev);
 80039ee:	6839      	ldr	r1, [r7, #0]
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fe fdf7 	bl	80025e4 <bmp5_get_osr_odr_press_config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	75fb      	strb	r3, [r7, #23]
        //şu anki sıcaklık/basınç oversampling ve data rate bilgileri okunur.
        //bmp5_error_codes_print_result("bmp5_get_osr_odr_press_config", rslt);

        if (rslt == BMP5_OK)
 80039fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d108      	bne.n	8003a14 <set_config+0x44>
        {
            /* Enable pressure */
            osr_odr_press_cfg->press_en = BMP5_ENABLE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	709a      	strb	r2, [r3, #2]
            rslt = bmp5_set_osr_odr_press_config(osr_odr_press_cfg, dev);
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fe fe26 	bl	800265c <bmp5_set_osr_odr_press_config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	75fb      	strb	r3, [r7, #23]
            //Basınç ölçümünü etkinleştir ve yeni ayarı yaz
            //bmp5_error_codes_print_result("bmp5_set_osr_odr_press_config", rslt);
        }

        if (rslt == BMP5_OK)
 8003a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10f      	bne.n	8003a3c <set_config+0x6c>
        {
            //IIR (Filtre) ayarlarını yap:
            set_iir_cfg.set_iir_t = BMP5_IIR_FILTER_COEFF_1;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	743b      	strb	r3, [r7, #16]
            set_iir_cfg.set_iir_p = BMP5_IIR_FILTER_COEFF_1; //COEFF_1 = en hafif filtreleme (hızlı tepki, daha az yumuşatma).
 8003a20:	2301      	movs	r3, #1
 8003a22:	747b      	strb	r3, [r7, #17]
            set_iir_cfg.shdw_set_iir_t = BMP5_ENABLE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	74bb      	strb	r3, [r7, #18]
            set_iir_cfg.shdw_set_iir_p = BMP5_ENABLE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	74fb      	strb	r3, [r7, #19]

            rslt = bmp5_set_iir_config(&set_iir_cfg, dev);
 8003a2c:	f107 0310 	add.w	r3, r7, #16
 8003a30:	6839      	ldr	r1, [r7, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fecc 	bl	80027d0 <bmp5_set_iir_config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	75fb      	strb	r3, [r7, #23]
            //bmp5_error_codes_print_result("bmp5_set_iir_config", rslt);
        }

        if (rslt == BMP5_OK)
 8003a3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d117      	bne.n	8003a74 <set_config+0xa4>
        {
            rslt = bmp5_configure_interrupt(BMP5_PULSED, BMP5_ACTIVE_HIGH, BMP5_INTR_PUSH_PULL, BMP5_INTR_ENABLE, dev);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f7fe fd3f 	bl	80024d2 <bmp5_configure_interrupt>
 8003a54:	4603      	mov	r3, r0
 8003a56:	75fb      	strb	r3, [r7, #23]
            //bmp5_error_codes_print_result("bmp5_configure_interrupt", rslt);

            if (rslt == BMP5_OK)
 8003a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <set_config+0xa4>
            {
                /* Note : Select INT_SOURCE after configuring interrupt */
                int_source_select.drdy_en = BMP5_ENABLE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	733b      	strb	r3, [r7, #12]
                rslt = bmp5_int_source_select(&int_source_select, dev);
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	6839      	ldr	r1, [r7, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fcc8 	bl	8002400 <bmp5_int_source_select>
 8003a70:	4603      	mov	r3, r0
 8003a72:	75fb      	strb	r3, [r7, #23]
            }
        }

        /* Set powermode as continous */
        //Sensörü sürekli ölçüm moduna al (continuous):
        rslt = bmp5_set_power_mode(BMP5_POWERMODE_CONTINOUS, dev);
 8003a74:	6839      	ldr	r1, [r7, #0]
 8003a76:	2003      	movs	r0, #3
 8003a78:	f7fe fc14 	bl	80022a4 <bmp5_set_power_mode>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	75fb      	strb	r3, [r7, #23]
        //bmp5_error_codes_print_result("bmp5_set_power_mode", rslt);
    }

    return rslt;
 8003a80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <get_sensor_data>:

static int8_t get_sensor_data(const struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 8003a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
	int8_t rslt = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
	    uint8_t idx = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73bb      	strb	r3, [r7, #14]
	    extern struct bmp5_sensor_data sensor_data;

	    while (idx < 3)
 8003a9e:	e02d      	b.n	8003afc <get_sensor_data+0x70>
	    {
            //BMP5 sensöründen 3 defa ölçüm alarak sıcaklık ve basınç verilerini okumak
	        rslt = bmp5_get_sensor_data(&sensor_data, osr_odr_press_cfg, dev);
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	481a      	ldr	r0, [pc, #104]	@ (8003b10 <get_sensor_data+0x84>)
 8003aa6:	f7fe fc49 	bl	800233c <bmp5_get_sensor_data>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	73fb      	strb	r3, [r7, #15]
	        bmp5_error_codes_print_result("bmp5_get_sensor_data", rslt);
 8003aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4817      	ldr	r0, [pc, #92]	@ (8003b14 <get_sensor_data+0x88>)
 8003ab6:	f7ff f991 	bl	8002ddc <bmp5_error_codes_print_result>

	        if (rslt == BMP5_OK)
 8003aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d119      	bne.n	8003af6 <get_sensor_data+0x6a>
	        {
	#ifdef BMP5_USE_FIXED_POINT
	            //printf("%d, %lu, %ld\n", idx, pressure, temperature);
	#else
	            printf("%d, %f, %f\n", idx, sensor_data.pressure, sensor_data.temperature);
 8003ac2:	7bbe      	ldrb	r6, [r7, #14]
 8003ac4:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <get_sensor_data+0x84>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fc fd5d 	bl	8000588 <__aeabi_f2d>
 8003ace:	4604      	mov	r4, r0
 8003ad0:	460d      	mov	r5, r1
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b10 <get_sensor_data+0x84>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fc fd56 	bl	8000588 <__aeabi_f2d>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	e9cd 2300 	strd	r2, r3, [sp]
 8003ae4:	4622      	mov	r2, r4
 8003ae6:	462b      	mov	r3, r5
 8003ae8:	4631      	mov	r1, r6
 8003aea:	480b      	ldr	r0, [pc, #44]	@ (8003b18 <get_sensor_data+0x8c>)
 8003aec:	f00f fb6a 	bl	80131c4 <iprintf>
	#endif
	            idx++;
 8003af0:	7bbb      	ldrb	r3, [r7, #14]
 8003af2:	3301      	adds	r3, #1
 8003af4:	73bb      	strb	r3, [r7, #14]
	        }

	        HAL_Delay(10);  // 20ms bekle, sensör ODR'sine göre ayarla
 8003af6:	200a      	movs	r0, #10
 8003af8:	f000 fc84 	bl	8004404 <HAL_Delay>
	    while (idx < 3)
 8003afc:	7bbb      	ldrb	r3, [r7, #14]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d9ce      	bls.n	8003aa0 <get_sensor_data+0x14>
	    }

	    return rslt;
 8003b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
	}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	2000038c 	.word	0x2000038c
 8003b14:	080164cc 	.word	0x080164cc
 8003b18:	080164e4 	.word	0x080164e4

08003b1c <BMP581>:

void BMP581(void){
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
int8_t rslt;
	      struct bmp5_dev dev;
	      struct bmp5_osr_odr_press_config osr_odr_press_cfg = { 0 };
 8003b22:	2300      	movs	r3, #0
 8003b24:	603b      	str	r3, [r7, #0]

	      /* Interface reference is given as a parameter
	       * For I2C : BMP5_I2C_INTF
	       * For SPI : BMP5_SPI_INTF
	       */
	      rslt = init_bmp5_interface(&dev, BMP5_I2C_INTF);
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff f9d4 	bl	8002ed8 <init_bmp5_interface>
 8003b30:	4603      	mov	r3, r0
 8003b32:	77fb      	strb	r3, [r7, #31]
	      bmp5_error_codes_print_result("bmp5_interface_init", rslt);
 8003b34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4811      	ldr	r0, [pc, #68]	@ (8003b80 <BMP581+0x64>)
 8003b3c:	f7ff f94e 	bl	8002ddc <bmp5_error_codes_print_result>

	      if (rslt == BMP5_OK)
 8003b40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d116      	bne.n	8003b76 <BMP581+0x5a>
	      {
	          rslt = bmp5_init(&dev);
 8003b48:	1d3b      	adds	r3, r7, #4
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe fa1c 	bl	8001f88 <bmp5_init>
 8003b50:	4603      	mov	r3, r0
 8003b52:	77fb      	strb	r3, [r7, #31]
	          //bmp5_error_codes_print_result("bmp5_init", rslt);
	          rslt = set_config(&osr_odr_press_cfg, &dev);
 8003b54:	1d3a      	adds	r2, r7, #4
 8003b56:	463b      	mov	r3, r7
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff ff38 	bl	80039d0 <set_config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	77fb      	strb	r3, [r7, #31]
	          //bmp5_error_codes_print_result("set_config", rslt);
	          rslt = get_sensor_data(&osr_odr_press_cfg, &dev);
 8003b64:	1d3a      	adds	r2, r7, #4
 8003b66:	463b      	mov	r3, r7
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff ff8e 	bl	8003a8c <get_sensor_data>
 8003b70:	4603      	mov	r3, r0
 8003b72:	77fb      	strb	r3, [r7, #31]
	          //bmp5_error_codes_print_result("get_sensor_data", rslt);
	          
	      }
	      return rslt;
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
        }
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	080164f0 	.word	0x080164f0

08003b84 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003b88:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <MX_SDIO_SD_Init+0x38>)
 8003b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc0 <MX_SDIO_SD_Init+0x3c>)
 8003b8c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <MX_SDIO_SD_Init+0x38>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003b94:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <MX_SDIO_SD_Init+0x38>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003b9a:	4b08      	ldr	r3, [pc, #32]	@ (8003bbc <MX_SDIO_SD_Init+0x38>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003ba0:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <MX_SDIO_SD_Init+0x38>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003ba6:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <MX_SDIO_SD_Init+0x38>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 118;
 8003bac:	4b03      	ldr	r3, [pc, #12]	@ (8003bbc <MX_SDIO_SD_Init+0x38>)
 8003bae:	2276      	movs	r2, #118	@ 0x76
 8003bb0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	20000cf0 	.word	0x20000cf0
 8003bc0:	40012c00 	.word	0x40012c00

08003bc4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b0a2      	sub	sp, #136	@ 0x88
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bcc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bdc:	f107 0318 	add.w	r3, r7, #24
 8003be0:	225c      	movs	r2, #92	@ 0x5c
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f00f fc6b 	bl	80134c0 <memset>
  if(sdHandle->Instance==SDIO)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a84      	ldr	r2, [pc, #528]	@ (8003e00 <HAL_SD_MspInit+0x23c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	f040 8100 	bne.w	8003df6 <HAL_SD_MspInit+0x232>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003bf6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003bfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003c00:	2300      	movs	r3, #0
 8003c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c04:	f107 0318 	add.w	r3, r7, #24
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f002 feb7 	bl	800697c <HAL_RCCEx_PeriphCLKConfig>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8003c14:	f7ff fed6 	bl	80039c4 <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	4b79      	ldr	r3, [pc, #484]	@ (8003e04 <HAL_SD_MspInit+0x240>)
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c20:	4a78      	ldr	r2, [pc, #480]	@ (8003e04 <HAL_SD_MspInit+0x240>)
 8003c22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c26:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c28:	4b76      	ldr	r3, [pc, #472]	@ (8003e04 <HAL_SD_MspInit+0x240>)
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	4b72      	ldr	r3, [pc, #456]	@ (8003e04 <HAL_SD_MspInit+0x240>)
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3c:	4a71      	ldr	r2, [pc, #452]	@ (8003e04 <HAL_SD_MspInit+0x240>)
 8003c3e:	f043 0302 	orr.w	r3, r3, #2
 8003c42:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c44:	4b6f      	ldr	r3, [pc, #444]	@ (8003e04 <HAL_SD_MspInit+0x240>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	4b6b      	ldr	r3, [pc, #428]	@ (8003e04 <HAL_SD_MspInit+0x240>)
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	4a6a      	ldr	r2, [pc, #424]	@ (8003e04 <HAL_SD_MspInit+0x240>)
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c60:	4b68      	ldr	r3, [pc, #416]	@ (8003e04 <HAL_SD_MspInit+0x240>)
 8003c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	4b64      	ldr	r3, [pc, #400]	@ (8003e04 <HAL_SD_MspInit+0x240>)
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	4a63      	ldr	r2, [pc, #396]	@ (8003e04 <HAL_SD_MspInit+0x240>)
 8003c76:	f043 0308 	orr.w	r3, r3, #8
 8003c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c7c:	4b61      	ldr	r3, [pc, #388]	@ (8003e04 <HAL_SD_MspInit+0x240>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c88:	2304      	movs	r3, #4
 8003c8a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c90:	2301      	movs	r3, #1
 8003c92:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c94:	2303      	movs	r3, #3
 8003c96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c9a:	230c      	movs	r3, #12
 8003c9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4858      	ldr	r0, [pc, #352]	@ (8003e08 <HAL_SD_MspInit+0x244>)
 8003ca8:	f001 f8e0 	bl	8004e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cb0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003cc0:	230c      	movs	r3, #12
 8003cc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cc6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003cca:	4619      	mov	r1, r3
 8003ccc:	484f      	ldr	r0, [pc, #316]	@ (8003e0c <HAL_SD_MspInit+0x248>)
 8003cce:	f001 f8cd 	bl	8004e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003cd2:	2304      	movs	r3, #4
 8003cd4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4847      	ldr	r0, [pc, #284]	@ (8003e10 <HAL_SD_MspInit+0x24c>)
 8003cf2:	f001 f8bb 	bl	8004e6c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003cf6:	4b47      	ldr	r3, [pc, #284]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003cf8:	4a47      	ldr	r2, [pc, #284]	@ (8003e18 <HAL_SD_MspInit+0x254>)
 8003cfa:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003cfc:	4b45      	ldr	r3, [pc, #276]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003cfe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003d02:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d04:	4b43      	ldr	r3, [pc, #268]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d0a:	4b42      	ldr	r3, [pc, #264]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d10:	4b40      	ldr	r3, [pc, #256]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d16:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d18:	4b3e      	ldr	r3, [pc, #248]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d1a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d1e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d20:	4b3c      	ldr	r3, [pc, #240]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d26:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003d28:	4b3a      	ldr	r3, [pc, #232]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003d2e:	4b39      	ldr	r3, [pc, #228]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d34:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d36:	4b37      	ldr	r3, [pc, #220]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d38:	2204      	movs	r2, #4
 8003d3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d3c:	4b35      	ldr	r3, [pc, #212]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d3e:	2203      	movs	r2, #3
 8003d40:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003d42:	4b34      	ldr	r3, [pc, #208]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d48:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d4a:	4b32      	ldr	r3, [pc, #200]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d4c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003d50:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003d52:	4830      	ldr	r0, [pc, #192]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d54:	f000 fc8e 	bl	8004674 <HAL_DMA_Init>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8003d5e:	f7ff fe31 	bl	80039c4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2b      	ldr	r2, [pc, #172]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d68:	4a2a      	ldr	r2, [pc, #168]	@ (8003e14 <HAL_SD_MspInit+0x250>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003d70:	4a2b      	ldr	r2, [pc, #172]	@ (8003e20 <HAL_SD_MspInit+0x25c>)
 8003d72:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003d74:	4b29      	ldr	r3, [pc, #164]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003d76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003d7a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d7c:	4b27      	ldr	r3, [pc, #156]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003d7e:	2240      	movs	r2, #64	@ 0x40
 8003d80:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d82:	4b26      	ldr	r3, [pc, #152]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d88:	4b24      	ldr	r3, [pc, #144]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003d8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d8e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d90:	4b22      	ldr	r3, [pc, #136]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003d92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d96:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d98:	4b20      	ldr	r3, [pc, #128]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003d9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d9e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003da0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003da2:	2220      	movs	r2, #32
 8003da4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003da6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003da8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003dac:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003dae:	4b1b      	ldr	r3, [pc, #108]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003db0:	2204      	movs	r2, #4
 8003db2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003db4:	4b19      	ldr	r3, [pc, #100]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003db6:	2203      	movs	r2, #3
 8003db8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003dba:	4b18      	ldr	r3, [pc, #96]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003dbc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003dc2:	4b16      	ldr	r3, [pc, #88]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003dc4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003dc8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003dca:	4814      	ldr	r0, [pc, #80]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003dcc:	f000 fc52 	bl	8004674 <HAL_DMA_Init>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_SD_MspInit+0x216>
    {
      Error_Handler();
 8003dd6:	f7ff fdf5 	bl	80039c4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003dde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003de0:	4a0e      	ldr	r2, [pc, #56]	@ (8003e1c <HAL_SD_MspInit+0x258>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8003de6:	2200      	movs	r2, #0
 8003de8:	2105      	movs	r1, #5
 8003dea:	2031      	movs	r0, #49	@ 0x31
 8003dec:	f000 fc0a 	bl	8004604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003df0:	2031      	movs	r0, #49	@ 0x31
 8003df2:	f000 fc23 	bl	800463c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8003df6:	bf00      	nop
 8003df8:	3788      	adds	r7, #136	@ 0x88
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40020400 	.word	0x40020400
 8003e0c:	40020800 	.word	0x40020800
 8003e10:	40020c00 	.word	0x40020c00
 8003e14:	20000d74 	.word	0x20000d74
 8003e18:	40026458 	.word	0x40026458
 8003e1c:	20000dd4 	.word	0x20000dd4
 8003e20:	400264a0 	.word	0x400264a0

08003e24 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]

  if(sdHandle->Instance==SDIO)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a13      	ldr	r2, [pc, #76]	@ (8003e80 <HAL_SD_MspDeInit+0x5c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d11f      	bne.n	8003e76 <HAL_SD_MspDeInit+0x52>
  {
  /* USER CODE BEGIN SDIO_MspDeInit 0 */

  /* USER CODE END SDIO_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDIO_CLK_DISABLE();
 8003e36:	4b13      	ldr	r3, [pc, #76]	@ (8003e84 <HAL_SD_MspDeInit+0x60>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	4a12      	ldr	r2, [pc, #72]	@ (8003e84 <HAL_SD_MspDeInit+0x60>)
 8003e3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e40:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8003e42:	2104      	movs	r1, #4
 8003e44:	4810      	ldr	r0, [pc, #64]	@ (8003e88 <HAL_SD_MspDeInit+0x64>)
 8003e46:	f001 f9a5 	bl	8005194 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 8003e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e4e:	480f      	ldr	r0, [pc, #60]	@ (8003e8c <HAL_SD_MspDeInit+0x68>)
 8003e50:	f001 f9a0 	bl	8005194 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8003e54:	2104      	movs	r1, #4
 8003e56:	480e      	ldr	r0, [pc, #56]	@ (8003e90 <HAL_SD_MspDeInit+0x6c>)
 8003e58:	f001 f99c 	bl	8005194 <HAL_GPIO_DeInit>

    /* SDIO DMA DeInit */
    HAL_DMA_DeInit(sdHandle->hdmarx);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fcb5 	bl	80047d0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(sdHandle->hdmatx);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fcb0 	bl	80047d0 <HAL_DMA_DeInit>

    /* SDIO interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDIO_IRQn);
 8003e70:	2031      	movs	r0, #49	@ 0x31
 8003e72:	f000 fbf1 	bl	8004658 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDIO_MspDeInit 1 */

  /* USER CODE END SDIO_MspDeInit 1 */
  }
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40020400 	.word	0x40020400
 8003e8c:	40020800 	.word	0x40020800
 8003e90:	40020c00 	.word	0x40020c00

08003e94 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003e98:	4b17      	ldr	r3, [pc, #92]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003e9a:	4a18      	ldr	r2, [pc, #96]	@ (8003efc <MX_SPI1_Init+0x68>)
 8003e9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e9e:	4b16      	ldr	r3, [pc, #88]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003ea0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ea4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ea6:	4b14      	ldr	r3, [pc, #80]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003eac:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb2:	4b11      	ldr	r3, [pc, #68]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ec4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003ec8:	2210      	movs	r2, #16
 8003eca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ed2:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ed8:	4b07      	ldr	r3, [pc, #28]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003ede:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003ee0:	220a      	movs	r2, #10
 8003ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ee4:	4804      	ldr	r0, [pc, #16]	@ (8003ef8 <MX_SPI1_Init+0x64>)
 8003ee6:	f004 fe80 	bl	8008bea <HAL_SPI_Init>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ef0:	f7ff fd68 	bl	80039c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000e34 	.word	0x20000e34
 8003efc:	40013000 	.word	0x40013000

08003f00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	@ 0x28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f08:	f107 0314 	add.w	r3, r7, #20
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f94 <HAL_SPI_MspInit+0x94>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d133      	bne.n	8003f8a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	4b1c      	ldr	r3, [pc, #112]	@ (8003f98 <HAL_SPI_MspInit+0x98>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f98 <HAL_SPI_MspInit+0x98>)
 8003f2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f32:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <HAL_SPI_MspInit+0x98>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <HAL_SPI_MspInit+0x98>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	4a14      	ldr	r2, [pc, #80]	@ (8003f98 <HAL_SPI_MspInit+0x98>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f4e:	4b12      	ldr	r3, [pc, #72]	@ (8003f98 <HAL_SPI_MspInit+0x98>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f5a:	23e0      	movs	r3, #224	@ 0xe0
 8003f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f66:	2303      	movs	r3, #3
 8003f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f6a:	2305      	movs	r3, #5
 8003f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6e:	f107 0314 	add.w	r3, r7, #20
 8003f72:	4619      	mov	r1, r3
 8003f74:	4809      	ldr	r0, [pc, #36]	@ (8003f9c <HAL_SPI_MspInit+0x9c>)
 8003f76:	f000 ff79 	bl	8004e6c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2105      	movs	r1, #5
 8003f7e:	2023      	movs	r0, #35	@ 0x23
 8003f80:	f000 fb40 	bl	8004604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003f84:	2023      	movs	r0, #35	@ 0x23
 8003f86:	f000 fb59 	bl	800463c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3728      	adds	r7, #40	@ 0x28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40013000 	.word	0x40013000
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40020000 	.word	0x40020000

08003fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]
 8003faa:	4b12      	ldr	r3, [pc, #72]	@ (8003ff4 <HAL_MspInit+0x54>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	4a11      	ldr	r2, [pc, #68]	@ (8003ff4 <HAL_MspInit+0x54>)
 8003fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff4 <HAL_MspInit+0x54>)
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_MspInit+0x54>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff4 <HAL_MspInit+0x54>)
 8003fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fd2:	4b08      	ldr	r3, [pc, #32]	@ (8003ff4 <HAL_MspInit+0x54>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003fde:	2200      	movs	r2, #0
 8003fe0:	210f      	movs	r1, #15
 8003fe2:	f06f 0001 	mvn.w	r0, #1
 8003fe6:	f000 fb0d 	bl	8004604 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800

08003ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08c      	sub	sp, #48	@ 0x30
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004008:	2300      	movs	r3, #0
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	4b2f      	ldr	r3, [pc, #188]	@ (80040cc <HAL_InitTick+0xd4>)
 800400e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004010:	4a2e      	ldr	r2, [pc, #184]	@ (80040cc <HAL_InitTick+0xd4>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6453      	str	r3, [r2, #68]	@ 0x44
 8004018:	4b2c      	ldr	r3, [pc, #176]	@ (80040cc <HAL_InitTick+0xd4>)
 800401a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004024:	f107 020c 	add.w	r2, r7, #12
 8004028:	f107 0310 	add.w	r3, r7, #16
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f002 fc72 	bl	8006918 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004034:	f002 fc5c 	bl	80068f0 <HAL_RCC_GetPCLK2Freq>
 8004038:	4603      	mov	r3, r0
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800403e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004040:	4a23      	ldr	r2, [pc, #140]	@ (80040d0 <HAL_InitTick+0xd8>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	0c9b      	lsrs	r3, r3, #18
 8004048:	3b01      	subs	r3, #1
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800404c:	4b21      	ldr	r3, [pc, #132]	@ (80040d4 <HAL_InitTick+0xdc>)
 800404e:	4a22      	ldr	r2, [pc, #136]	@ (80040d8 <HAL_InitTick+0xe0>)
 8004050:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004052:	4b20      	ldr	r3, [pc, #128]	@ (80040d4 <HAL_InitTick+0xdc>)
 8004054:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004058:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800405a:	4a1e      	ldr	r2, [pc, #120]	@ (80040d4 <HAL_InitTick+0xdc>)
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004060:	4b1c      	ldr	r3, [pc, #112]	@ (80040d4 <HAL_InitTick+0xdc>)
 8004062:	2200      	movs	r2, #0
 8004064:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004066:	4b1b      	ldr	r3, [pc, #108]	@ (80040d4 <HAL_InitTick+0xdc>)
 8004068:	2200      	movs	r2, #0
 800406a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800406c:	4b19      	ldr	r3, [pc, #100]	@ (80040d4 <HAL_InitTick+0xdc>)
 800406e:	2200      	movs	r2, #0
 8004070:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004072:	4818      	ldr	r0, [pc, #96]	@ (80040d4 <HAL_InitTick+0xdc>)
 8004074:	f005 fcb6 	bl	80099e4 <HAL_TIM_Base_Init>
 8004078:	4603      	mov	r3, r0
 800407a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800407e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004082:	2b00      	cmp	r3, #0
 8004084:	d11b      	bne.n	80040be <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004086:	4813      	ldr	r0, [pc, #76]	@ (80040d4 <HAL_InitTick+0xdc>)
 8004088:	f005 fd06 	bl	8009a98 <HAL_TIM_Base_Start_IT>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8004092:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004096:	2b00      	cmp	r3, #0
 8004098:	d111      	bne.n	80040be <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800409a:	2019      	movs	r0, #25
 800409c:	f000 face 	bl	800463c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b0f      	cmp	r3, #15
 80040a4:	d808      	bhi.n	80040b8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80040a6:	2200      	movs	r2, #0
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	2019      	movs	r0, #25
 80040ac:	f000 faaa 	bl	8004604 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040b0:	4a0a      	ldr	r2, [pc, #40]	@ (80040dc <HAL_InitTick+0xe4>)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e002      	b.n	80040be <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80040be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3730      	adds	r7, #48	@ 0x30
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	431bde83 	.word	0x431bde83
 80040d4:	20000e8c 	.word	0x20000e8c
 80040d8:	40010000 	.word	0x40010000
 80040dc:	20000004 	.word	0x20000004

080040e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040e4:	bf00      	nop
 80040e6:	e7fd      	b.n	80040e4 <NMI_Handler+0x4>

080040e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <HardFault_Handler+0x4>

080040f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <MemManage_Handler+0x4>

080040f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <BusFault_Handler+0x4>

08004100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <UsageFault_Handler+0x4>

08004108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800411c:	4802      	ldr	r0, [pc, #8]	@ (8004128 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800411e:	f005 fd2b 	bl	8009b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000e8c 	.word	0x20000e8c

0800412c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004130:	4802      	ldr	r0, [pc, #8]	@ (800413c <SPI1_IRQHandler+0x10>)
 8004132:	f005 f9e9 	bl	8009508 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000e34 	.word	0x20000e34

08004140 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004144:	4802      	ldr	r0, [pc, #8]	@ (8004150 <SDIO_IRQHandler+0x10>)
 8004146:	f003 fe9b 	bl	8007e80 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000cf0 	.word	0x20000cf0

08004154 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004158:	4802      	ldr	r0, [pc, #8]	@ (8004164 <DMA2_Stream3_IRQHandler+0x10>)
 800415a:	f000 fc11 	bl	8004980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000d74 	.word	0x20000d74

08004168 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800416c:	4802      	ldr	r0, [pc, #8]	@ (8004178 <DMA2_Stream6_IRQHandler+0x10>)
 800416e:	f000 fc07 	bl	8004980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000dd4 	.word	0x20000dd4

0800417c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return 1;
 8004180:	2301      	movs	r3, #1
}
 8004182:	4618      	mov	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <_kill>:

int _kill(int pid, int sig)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004196:	f00f fa43 	bl	8013620 <__errno>
 800419a:	4603      	mov	r3, r0
 800419c:	2216      	movs	r2, #22
 800419e:	601a      	str	r2, [r3, #0]
  return -1;
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <_exit>:

void _exit (int status)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041b4:	f04f 31ff 	mov.w	r1, #4294967295
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff ffe7 	bl	800418c <_kill>
  while (1) {}    /* Make sure we hang here */
 80041be:	bf00      	nop
 80041c0:	e7fd      	b.n	80041be <_exit+0x12>

080041c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b086      	sub	sp, #24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	e00a      	b.n	80041ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041d4:	f3af 8000 	nop.w
 80041d8:	4601      	mov	r1, r0
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	60ba      	str	r2, [r7, #8]
 80041e0:	b2ca      	uxtb	r2, r1
 80041e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3301      	adds	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	dbf0      	blt.n	80041d4 <_read+0x12>
  }

  return len;
 80041f2:	687b      	ldr	r3, [r7, #4]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e009      	b.n	8004222 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	60ba      	str	r2, [r7, #8]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	3301      	adds	r3, #1
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	dbf1      	blt.n	800420e <_write+0x12>
  }
  return len;
 800422a:	687b      	ldr	r3, [r7, #4]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <_close>:

int _close(int file)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800425c:	605a      	str	r2, [r3, #4]
  return 0;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <_isatty>:

int _isatty(int file)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004274:	2301      	movs	r3, #1
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042a4:	4a14      	ldr	r2, [pc, #80]	@ (80042f8 <_sbrk+0x5c>)
 80042a6:	4b15      	ldr	r3, [pc, #84]	@ (80042fc <_sbrk+0x60>)
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042b0:	4b13      	ldr	r3, [pc, #76]	@ (8004300 <_sbrk+0x64>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d102      	bne.n	80042be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042b8:	4b11      	ldr	r3, [pc, #68]	@ (8004300 <_sbrk+0x64>)
 80042ba:	4a12      	ldr	r2, [pc, #72]	@ (8004304 <_sbrk+0x68>)
 80042bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042be:	4b10      	ldr	r3, [pc, #64]	@ (8004300 <_sbrk+0x64>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4413      	add	r3, r2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d207      	bcs.n	80042dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042cc:	f00f f9a8 	bl	8013620 <__errno>
 80042d0:	4603      	mov	r3, r0
 80042d2:	220c      	movs	r2, #12
 80042d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295
 80042da:	e009      	b.n	80042f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042dc:	4b08      	ldr	r3, [pc, #32]	@ (8004300 <_sbrk+0x64>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042e2:	4b07      	ldr	r3, [pc, #28]	@ (8004300 <_sbrk+0x64>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4413      	add	r3, r2
 80042ea:	4a05      	ldr	r2, [pc, #20]	@ (8004300 <_sbrk+0x64>)
 80042ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042ee:	68fb      	ldr	r3, [r7, #12]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20020000 	.word	0x20020000
 80042fc:	00000400 	.word	0x00000400
 8004300:	20000ed4 	.word	0x20000ed4
 8004304:	20005038 	.word	0x20005038

08004308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800430c:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <SystemInit+0x20>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004312:	4a05      	ldr	r2, [pc, #20]	@ (8004328 <SystemInit+0x20>)
 8004314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800431c:	bf00      	nop
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800432c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004364 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004330:	f7ff ffea 	bl	8004308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004334:	480c      	ldr	r0, [pc, #48]	@ (8004368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004336:	490d      	ldr	r1, [pc, #52]	@ (800436c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004338:	4a0d      	ldr	r2, [pc, #52]	@ (8004370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800433a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800433c:	e002      	b.n	8004344 <LoopCopyDataInit>

0800433e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800433e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004342:	3304      	adds	r3, #4

08004344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004348:	d3f9      	bcc.n	800433e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800434a:	4a0a      	ldr	r2, [pc, #40]	@ (8004374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800434c:	4c0a      	ldr	r4, [pc, #40]	@ (8004378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800434e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004350:	e001      	b.n	8004356 <LoopFillZerobss>

08004352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004354:	3204      	adds	r2, #4

08004356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004358:	d3fb      	bcc.n	8004352 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800435a:	f00f f967 	bl	801362c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800435e:	f7ff fa7b 	bl	8003858 <main>
  bx  lr    
 8004362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800436c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004370:	08016dbc 	.word	0x08016dbc
  ldr r2, =_sbss
 8004374:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004378:	20005038 	.word	0x20005038

0800437c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800437c:	e7fe      	b.n	800437c <ADC_IRQHandler>
	...

08004380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004384:	4b0e      	ldr	r3, [pc, #56]	@ (80043c0 <HAL_Init+0x40>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a0d      	ldr	r2, [pc, #52]	@ (80043c0 <HAL_Init+0x40>)
 800438a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800438e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004390:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <HAL_Init+0x40>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0a      	ldr	r2, [pc, #40]	@ (80043c0 <HAL_Init+0x40>)
 8004396:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800439a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800439c:	4b08      	ldr	r3, [pc, #32]	@ (80043c0 <HAL_Init+0x40>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a07      	ldr	r2, [pc, #28]	@ (80043c0 <HAL_Init+0x40>)
 80043a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043a8:	2003      	movs	r0, #3
 80043aa:	f000 f920 	bl	80045ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ae:	200f      	movs	r0, #15
 80043b0:	f7ff fe22 	bl	8003ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043b4:	f7ff fdf4 	bl	8003fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023c00 	.word	0x40023c00

080043c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043c8:	4b06      	ldr	r3, [pc, #24]	@ (80043e4 <HAL_IncTick+0x20>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	4b06      	ldr	r3, [pc, #24]	@ (80043e8 <HAL_IncTick+0x24>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4413      	add	r3, r2
 80043d4:	4a04      	ldr	r2, [pc, #16]	@ (80043e8 <HAL_IncTick+0x24>)
 80043d6:	6013      	str	r3, [r2, #0]
}
 80043d8:	bf00      	nop
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000008 	.word	0x20000008
 80043e8:	20000ed8 	.word	0x20000ed8

080043ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return uwTick;
 80043f0:	4b03      	ldr	r3, [pc, #12]	@ (8004400 <HAL_GetTick+0x14>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000ed8 	.word	0x20000ed8

08004404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800440c:	f7ff ffee 	bl	80043ec <HAL_GetTick>
 8004410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d005      	beq.n	800442a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800441e:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <HAL_Delay+0x44>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800442a:	bf00      	nop
 800442c:	f7ff ffde 	bl	80043ec <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	429a      	cmp	r2, r3
 800443a:	d8f7      	bhi.n	800442c <HAL_Delay+0x28>
  {
  }
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000008 	.word	0x20000008

0800444c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800445c:	4b0c      	ldr	r3, [pc, #48]	@ (8004490 <__NVIC_SetPriorityGrouping+0x44>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004468:	4013      	ands	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004474:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800447c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800447e:	4a04      	ldr	r2, [pc, #16]	@ (8004490 <__NVIC_SetPriorityGrouping+0x44>)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	60d3      	str	r3, [r2, #12]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	e000ed00 	.word	0xe000ed00

08004494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004498:	4b04      	ldr	r3, [pc, #16]	@ (80044ac <__NVIC_GetPriorityGrouping+0x18>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	0a1b      	lsrs	r3, r3, #8
 800449e:	f003 0307 	and.w	r3, r3, #7
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	db0b      	blt.n	80044da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	f003 021f 	and.w	r2, r3, #31
 80044c8:	4907      	ldr	r1, [pc, #28]	@ (80044e8 <__NVIC_EnableIRQ+0x38>)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2001      	movs	r0, #1
 80044d2:	fa00 f202 	lsl.w	r2, r0, r2
 80044d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	e000e100 	.word	0xe000e100

080044ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	db12      	blt.n	8004524 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	f003 021f 	and.w	r2, r3, #31
 8004504:	490a      	ldr	r1, [pc, #40]	@ (8004530 <__NVIC_DisableIRQ+0x44>)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2001      	movs	r0, #1
 800450e:	fa00 f202 	lsl.w	r2, r0, r2
 8004512:	3320      	adds	r3, #32
 8004514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004518:	f3bf 8f4f 	dsb	sy
}
 800451c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800451e:	f3bf 8f6f 	isb	sy
}
 8004522:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	e000e100 	.word	0xe000e100

08004534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	6039      	str	r1, [r7, #0]
 800453e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004544:	2b00      	cmp	r3, #0
 8004546:	db0a      	blt.n	800455e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	490c      	ldr	r1, [pc, #48]	@ (8004580 <__NVIC_SetPriority+0x4c>)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	0112      	lsls	r2, r2, #4
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	440b      	add	r3, r1
 8004558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800455c:	e00a      	b.n	8004574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	4908      	ldr	r1, [pc, #32]	@ (8004584 <__NVIC_SetPriority+0x50>)
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	3b04      	subs	r3, #4
 800456c:	0112      	lsls	r2, r2, #4
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	440b      	add	r3, r1
 8004572:	761a      	strb	r2, [r3, #24]
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	e000e100 	.word	0xe000e100
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004588:	b480      	push	{r7}
 800458a:	b089      	sub	sp, #36	@ 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f1c3 0307 	rsb	r3, r3, #7
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	bf28      	it	cs
 80045a6:	2304      	movcs	r3, #4
 80045a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3304      	adds	r3, #4
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d902      	bls.n	80045b8 <NVIC_EncodePriority+0x30>
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3b03      	subs	r3, #3
 80045b6:	e000      	b.n	80045ba <NVIC_EncodePriority+0x32>
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045bc:	f04f 32ff 	mov.w	r2, #4294967295
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43da      	mvns	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	401a      	ands	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d0:	f04f 31ff 	mov.w	r1, #4294967295
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	fa01 f303 	lsl.w	r3, r1, r3
 80045da:	43d9      	mvns	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e0:	4313      	orrs	r3, r2
         );
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3724      	adds	r7, #36	@ 0x24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff ff28 	bl	800444c <__NVIC_SetPriorityGrouping>
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004616:	f7ff ff3d 	bl	8004494 <__NVIC_GetPriorityGrouping>
 800461a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	6978      	ldr	r0, [r7, #20]
 8004622:	f7ff ffb1 	bl	8004588 <NVIC_EncodePriority>
 8004626:	4602      	mov	r2, r0
 8004628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff ff80 	bl	8004534 <__NVIC_SetPriority>
}
 8004634:	bf00      	nop
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ff30 	bl	80044b0 <__NVIC_EnableIRQ>
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff40 	bl	80044ec <__NVIC_DisableIRQ>
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004680:	f7ff feb4 	bl	80043ec <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e099      	b.n	80047c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046b0:	e00f      	b.n	80046d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046b2:	f7ff fe9b 	bl	80043ec <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b05      	cmp	r3, #5
 80046be:	d908      	bls.n	80046d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2203      	movs	r2, #3
 80046ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e078      	b.n	80047c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e8      	bne.n	80046b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4b38      	ldr	r3, [pc, #224]	@ (80047cc <HAL_DMA_Init+0x158>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004716:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	2b04      	cmp	r3, #4
 800472a:	d107      	bne.n	800473c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004734:	4313      	orrs	r3, r2
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 0307 	bic.w	r3, r3, #7
 8004752:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	2b04      	cmp	r3, #4
 8004764:	d117      	bne.n	8004796 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00e      	beq.n	8004796 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fafb 	bl	8004d74 <DMA_CheckFifoParam>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2240      	movs	r2, #64	@ 0x40
 8004788:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004792:	2301      	movs	r3, #1
 8004794:	e016      	b.n	80047c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fab2 	bl	8004d08 <DMA_CalcBaseAndBitshift>
 80047a4:	4603      	mov	r3, r0
 80047a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ac:	223f      	movs	r2, #63	@ 0x3f
 80047ae:	409a      	lsls	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	f010803f 	.word	0xf010803f

080047d0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e050      	b.n	8004884 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d101      	bne.n	80047f2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80047ee:	2302      	movs	r3, #2
 80047f0:	e048      	b.n	8004884 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2200      	movs	r2, #0
 8004820:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2221      	movs	r2, #33	@ 0x21
 8004830:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa68 	bl	8004d08 <DMA_CalcBaseAndBitshift>
 8004838:	4603      	mov	r3, r0
 800483a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004864:	223f      	movs	r2, #63	@ 0x3f
 8004866:	409a      	lsls	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_DMA_Start_IT+0x26>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e040      	b.n	8004934 <HAL_DMA_Start_IT+0xa8>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d12f      	bne.n	8004926 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f9e6 	bl	8004cac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e4:	223f      	movs	r2, #63	@ 0x3f
 80048e6:	409a      	lsls	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0216 	orr.w	r2, r2, #22
 80048fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0208 	orr.w	r2, r2, #8
 8004912:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	e005      	b.n	8004932 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800492e:	2302      	movs	r3, #2
 8004930:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d004      	beq.n	800495a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2280      	movs	r2, #128	@ 0x80
 8004954:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e00c      	b.n	8004974 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2205      	movs	r2, #5
 800495e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800498c:	4b8e      	ldr	r3, [pc, #568]	@ (8004bc8 <HAL_DMA_IRQHandler+0x248>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a8e      	ldr	r2, [pc, #568]	@ (8004bcc <HAL_DMA_IRQHandler+0x24c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	0a9b      	lsrs	r3, r3, #10
 8004998:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049aa:	2208      	movs	r2, #8
 80049ac:	409a      	lsls	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01a      	beq.n	80049ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d8:	2208      	movs	r2, #8
 80049da:	409a      	lsls	r2, r3
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e4:	f043 0201 	orr.w	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f0:	2201      	movs	r2, #1
 80049f2:	409a      	lsls	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d012      	beq.n	8004a22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0e:	2201      	movs	r2, #1
 8004a10:	409a      	lsls	r2, r3
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	f043 0202 	orr.w	r2, r3, #2
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a26:	2204      	movs	r2, #4
 8004a28:	409a      	lsls	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d012      	beq.n	8004a58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00b      	beq.n	8004a58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a44:	2204      	movs	r2, #4
 8004a46:	409a      	lsls	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a50:	f043 0204 	orr.w	r2, r3, #4
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5c:	2210      	movs	r2, #16
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d043      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d03c      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	2210      	movs	r2, #16
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d018      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d108      	bne.n	8004ab0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d024      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	4798      	blx	r3
 8004aae:	e01f      	b.n	8004af0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4798      	blx	r3
 8004ac0:	e016      	b.n	8004af0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d107      	bne.n	8004ae0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0208 	bic.w	r2, r2, #8
 8004ade:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af4:	2220      	movs	r2, #32
 8004af6:	409a      	lsls	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 808f 	beq.w	8004c20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8087 	beq.w	8004c20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b16:	2220      	movs	r2, #32
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b05      	cmp	r3, #5
 8004b28:	d136      	bne.n	8004b98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0216 	bic.w	r2, r2, #22
 8004b38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d103      	bne.n	8004b5a <HAL_DMA_IRQHandler+0x1da>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0208 	bic.w	r2, r2, #8
 8004b68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6e:	223f      	movs	r2, #63	@ 0x3f
 8004b70:	409a      	lsls	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d07e      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
        }
        return;
 8004b96:	e079      	b.n	8004c8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d01d      	beq.n	8004be2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10d      	bne.n	8004bd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d031      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
 8004bc4:	e02c      	b.n	8004c20 <HAL_DMA_IRQHandler+0x2a0>
 8004bc6:	bf00      	nop
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d023      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
 8004be0:	e01e      	b.n	8004c20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10f      	bne.n	8004c10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0210 	bic.w	r2, r2, #16
 8004bfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d032      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d022      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2205      	movs	r2, #5
 8004c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0201 	bic.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60bb      	str	r3, [r7, #8]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d307      	bcc.n	8004c68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f2      	bne.n	8004c4c <HAL_DMA_IRQHandler+0x2cc>
 8004c66:	e000      	b.n	8004c6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	4798      	blx	r3
 8004c8a:	e000      	b.n	8004c8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c8c:	bf00      	nop
    }
  }
}
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b40      	cmp	r3, #64	@ 0x40
 8004cd8:	d108      	bne.n	8004cec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cea:	e007      	b.n	8004cfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	60da      	str	r2, [r3, #12]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	3b10      	subs	r3, #16
 8004d18:	4a14      	ldr	r2, [pc, #80]	@ (8004d6c <DMA_CalcBaseAndBitshift+0x64>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	091b      	lsrs	r3, r3, #4
 8004d20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d22:	4a13      	ldr	r2, [pc, #76]	@ (8004d70 <DMA_CalcBaseAndBitshift+0x68>)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d909      	bls.n	8004d4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d3e:	f023 0303 	bic.w	r3, r3, #3
 8004d42:	1d1a      	adds	r2, r3, #4
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d48:	e007      	b.n	8004d5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d52:	f023 0303 	bic.w	r3, r3, #3
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	aaaaaaab 	.word	0xaaaaaaab
 8004d70:	08016588 	.word	0x08016588

08004d74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d11f      	bne.n	8004dce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d856      	bhi.n	8004e42 <DMA_CheckFifoParam+0xce>
 8004d94:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <DMA_CheckFifoParam+0x28>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004dbf 	.word	0x08004dbf
 8004da4:	08004dad 	.word	0x08004dad
 8004da8:	08004e43 	.word	0x08004e43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d046      	beq.n	8004e46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dbc:	e043      	b.n	8004e46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004dc6:	d140      	bne.n	8004e4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dcc:	e03d      	b.n	8004e4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dd6:	d121      	bne.n	8004e1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d837      	bhi.n	8004e4e <DMA_CheckFifoParam+0xda>
 8004dde:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <DMA_CheckFifoParam+0x70>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004df5 	.word	0x08004df5
 8004de8:	08004dfb 	.word	0x08004dfb
 8004dec:	08004df5 	.word	0x08004df5
 8004df0:	08004e0d 	.word	0x08004e0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
      break;
 8004df8:	e030      	b.n	8004e5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d025      	beq.n	8004e52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e0a:	e022      	b.n	8004e52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e14:	d11f      	bne.n	8004e56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e1a:	e01c      	b.n	8004e56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d903      	bls.n	8004e2a <DMA_CheckFifoParam+0xb6>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d003      	beq.n	8004e30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e28:	e018      	b.n	8004e5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e2e:	e015      	b.n	8004e5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00e      	beq.n	8004e5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e40:	e00b      	b.n	8004e5a <DMA_CheckFifoParam+0xe6>
      break;
 8004e42:	bf00      	nop
 8004e44:	e00a      	b.n	8004e5c <DMA_CheckFifoParam+0xe8>
      break;
 8004e46:	bf00      	nop
 8004e48:	e008      	b.n	8004e5c <DMA_CheckFifoParam+0xe8>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e006      	b.n	8004e5c <DMA_CheckFifoParam+0xe8>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e004      	b.n	8004e5c <DMA_CheckFifoParam+0xe8>
      break;
 8004e52:	bf00      	nop
 8004e54:	e002      	b.n	8004e5c <DMA_CheckFifoParam+0xe8>
      break;   
 8004e56:	bf00      	nop
 8004e58:	e000      	b.n	8004e5c <DMA_CheckFifoParam+0xe8>
      break;
 8004e5a:	bf00      	nop
    }
  } 
  
  return status; 
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop

08004e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b089      	sub	sp, #36	@ 0x24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	e165      	b.n	8005154 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e88:	2201      	movs	r2, #1
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	f040 8154 	bne.w	800514e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d005      	beq.n	8004ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d130      	bne.n	8004f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	2203      	movs	r2, #3
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 0201 	and.w	r2, r3, #1
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d017      	beq.n	8004f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	2203      	movs	r2, #3
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d123      	bne.n	8004fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	08da      	lsrs	r2, r3, #3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3208      	adds	r2, #8
 8004f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	220f      	movs	r2, #15
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	08da      	lsrs	r2, r3, #3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3208      	adds	r2, #8
 8004faa:	69b9      	ldr	r1, [r7, #24]
 8004fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	2203      	movs	r2, #3
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 0203 	and.w	r2, r3, #3
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80ae 	beq.w	800514e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800516c <HAL_GPIO_Init+0x300>)
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffa:	4a5c      	ldr	r2, [pc, #368]	@ (800516c <HAL_GPIO_Init+0x300>)
 8004ffc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005000:	6453      	str	r3, [r2, #68]	@ 0x44
 8005002:	4b5a      	ldr	r3, [pc, #360]	@ (800516c <HAL_GPIO_Init+0x300>)
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800500e:	4a58      	ldr	r2, [pc, #352]	@ (8005170 <HAL_GPIO_Init+0x304>)
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	089b      	lsrs	r3, r3, #2
 8005014:	3302      	adds	r3, #2
 8005016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800501a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	220f      	movs	r2, #15
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	43db      	mvns	r3, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4013      	ands	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a4f      	ldr	r2, [pc, #316]	@ (8005174 <HAL_GPIO_Init+0x308>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d025      	beq.n	8005086 <HAL_GPIO_Init+0x21a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a4e      	ldr	r2, [pc, #312]	@ (8005178 <HAL_GPIO_Init+0x30c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01f      	beq.n	8005082 <HAL_GPIO_Init+0x216>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a4d      	ldr	r2, [pc, #308]	@ (800517c <HAL_GPIO_Init+0x310>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d019      	beq.n	800507e <HAL_GPIO_Init+0x212>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a4c      	ldr	r2, [pc, #304]	@ (8005180 <HAL_GPIO_Init+0x314>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <HAL_GPIO_Init+0x20e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a4b      	ldr	r2, [pc, #300]	@ (8005184 <HAL_GPIO_Init+0x318>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00d      	beq.n	8005076 <HAL_GPIO_Init+0x20a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a4a      	ldr	r2, [pc, #296]	@ (8005188 <HAL_GPIO_Init+0x31c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d007      	beq.n	8005072 <HAL_GPIO_Init+0x206>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a49      	ldr	r2, [pc, #292]	@ (800518c <HAL_GPIO_Init+0x320>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d101      	bne.n	800506e <HAL_GPIO_Init+0x202>
 800506a:	2306      	movs	r3, #6
 800506c:	e00c      	b.n	8005088 <HAL_GPIO_Init+0x21c>
 800506e:	2307      	movs	r3, #7
 8005070:	e00a      	b.n	8005088 <HAL_GPIO_Init+0x21c>
 8005072:	2305      	movs	r3, #5
 8005074:	e008      	b.n	8005088 <HAL_GPIO_Init+0x21c>
 8005076:	2304      	movs	r3, #4
 8005078:	e006      	b.n	8005088 <HAL_GPIO_Init+0x21c>
 800507a:	2303      	movs	r3, #3
 800507c:	e004      	b.n	8005088 <HAL_GPIO_Init+0x21c>
 800507e:	2302      	movs	r3, #2
 8005080:	e002      	b.n	8005088 <HAL_GPIO_Init+0x21c>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <HAL_GPIO_Init+0x21c>
 8005086:	2300      	movs	r3, #0
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	f002 0203 	and.w	r2, r2, #3
 800508e:	0092      	lsls	r2, r2, #2
 8005090:	4093      	lsls	r3, r2
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005098:	4935      	ldr	r1, [pc, #212]	@ (8005170 <HAL_GPIO_Init+0x304>)
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	089b      	lsrs	r3, r3, #2
 800509e:	3302      	adds	r3, #2
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005190 <HAL_GPIO_Init+0x324>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	43db      	mvns	r3, r3
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4013      	ands	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050ca:	4a31      	ldr	r2, [pc, #196]	@ (8005190 <HAL_GPIO_Init+0x324>)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050d0:	4b2f      	ldr	r3, [pc, #188]	@ (8005190 <HAL_GPIO_Init+0x324>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	43db      	mvns	r3, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050f4:	4a26      	ldr	r2, [pc, #152]	@ (8005190 <HAL_GPIO_Init+0x324>)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050fa:	4b25      	ldr	r3, [pc, #148]	@ (8005190 <HAL_GPIO_Init+0x324>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	43db      	mvns	r3, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4013      	ands	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800511e:	4a1c      	ldr	r2, [pc, #112]	@ (8005190 <HAL_GPIO_Init+0x324>)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005124:	4b1a      	ldr	r3, [pc, #104]	@ (8005190 <HAL_GPIO_Init+0x324>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005148:	4a11      	ldr	r2, [pc, #68]	@ (8005190 <HAL_GPIO_Init+0x324>)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	3301      	adds	r3, #1
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	2b0f      	cmp	r3, #15
 8005158:	f67f ae96 	bls.w	8004e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800515c:	bf00      	nop
 800515e:	bf00      	nop
 8005160:	3724      	adds	r7, #36	@ 0x24
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800
 8005170:	40013800 	.word	0x40013800
 8005174:	40020000 	.word	0x40020000
 8005178:	40020400 	.word	0x40020400
 800517c:	40020800 	.word	0x40020800
 8005180:	40020c00 	.word	0x40020c00
 8005184:	40021000 	.word	0x40021000
 8005188:	40021400 	.word	0x40021400
 800518c:	40021800 	.word	0x40021800
 8005190:	40013c00 	.word	0x40013c00

08005194 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	e0c7      	b.n	8005340 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051b0:	2201      	movs	r2, #1
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4013      	ands	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	f040 80b7 	bne.w	800533a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80051cc:	4a62      	ldr	r2, [pc, #392]	@ (8005358 <HAL_GPIO_DeInit+0x1c4>)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	089b      	lsrs	r3, r3, #2
 80051d2:	3302      	adds	r3, #2
 80051d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	220f      	movs	r2, #15
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	4013      	ands	r3, r2
 80051ec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a5a      	ldr	r2, [pc, #360]	@ (800535c <HAL_GPIO_DeInit+0x1c8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d025      	beq.n	8005242 <HAL_GPIO_DeInit+0xae>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a59      	ldr	r2, [pc, #356]	@ (8005360 <HAL_GPIO_DeInit+0x1cc>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01f      	beq.n	800523e <HAL_GPIO_DeInit+0xaa>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a58      	ldr	r2, [pc, #352]	@ (8005364 <HAL_GPIO_DeInit+0x1d0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d019      	beq.n	800523a <HAL_GPIO_DeInit+0xa6>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a57      	ldr	r2, [pc, #348]	@ (8005368 <HAL_GPIO_DeInit+0x1d4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <HAL_GPIO_DeInit+0xa2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a56      	ldr	r2, [pc, #344]	@ (800536c <HAL_GPIO_DeInit+0x1d8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00d      	beq.n	8005232 <HAL_GPIO_DeInit+0x9e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a55      	ldr	r2, [pc, #340]	@ (8005370 <HAL_GPIO_DeInit+0x1dc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d007      	beq.n	800522e <HAL_GPIO_DeInit+0x9a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a54      	ldr	r2, [pc, #336]	@ (8005374 <HAL_GPIO_DeInit+0x1e0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d101      	bne.n	800522a <HAL_GPIO_DeInit+0x96>
 8005226:	2306      	movs	r3, #6
 8005228:	e00c      	b.n	8005244 <HAL_GPIO_DeInit+0xb0>
 800522a:	2307      	movs	r3, #7
 800522c:	e00a      	b.n	8005244 <HAL_GPIO_DeInit+0xb0>
 800522e:	2305      	movs	r3, #5
 8005230:	e008      	b.n	8005244 <HAL_GPIO_DeInit+0xb0>
 8005232:	2304      	movs	r3, #4
 8005234:	e006      	b.n	8005244 <HAL_GPIO_DeInit+0xb0>
 8005236:	2303      	movs	r3, #3
 8005238:	e004      	b.n	8005244 <HAL_GPIO_DeInit+0xb0>
 800523a:	2302      	movs	r3, #2
 800523c:	e002      	b.n	8005244 <HAL_GPIO_DeInit+0xb0>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_GPIO_DeInit+0xb0>
 8005242:	2300      	movs	r3, #0
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	f002 0203 	and.w	r2, r2, #3
 800524a:	0092      	lsls	r2, r2, #2
 800524c:	4093      	lsls	r3, r2
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	429a      	cmp	r2, r3
 8005252:	d132      	bne.n	80052ba <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005254:	4b48      	ldr	r3, [pc, #288]	@ (8005378 <HAL_GPIO_DeInit+0x1e4>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	43db      	mvns	r3, r3
 800525c:	4946      	ldr	r1, [pc, #280]	@ (8005378 <HAL_GPIO_DeInit+0x1e4>)
 800525e:	4013      	ands	r3, r2
 8005260:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005262:	4b45      	ldr	r3, [pc, #276]	@ (8005378 <HAL_GPIO_DeInit+0x1e4>)
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	43db      	mvns	r3, r3
 800526a:	4943      	ldr	r1, [pc, #268]	@ (8005378 <HAL_GPIO_DeInit+0x1e4>)
 800526c:	4013      	ands	r3, r2
 800526e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005270:	4b41      	ldr	r3, [pc, #260]	@ (8005378 <HAL_GPIO_DeInit+0x1e4>)
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	43db      	mvns	r3, r3
 8005278:	493f      	ldr	r1, [pc, #252]	@ (8005378 <HAL_GPIO_DeInit+0x1e4>)
 800527a:	4013      	ands	r3, r2
 800527c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800527e:	4b3e      	ldr	r3, [pc, #248]	@ (8005378 <HAL_GPIO_DeInit+0x1e4>)
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	43db      	mvns	r3, r3
 8005286:	493c      	ldr	r1, [pc, #240]	@ (8005378 <HAL_GPIO_DeInit+0x1e4>)
 8005288:	4013      	ands	r3, r2
 800528a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	220f      	movs	r2, #15
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
 800529a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800529c:	4a2e      	ldr	r2, [pc, #184]	@ (8005358 <HAL_GPIO_DeInit+0x1c4>)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	089b      	lsrs	r3, r3, #2
 80052a2:	3302      	adds	r3, #2
 80052a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	43da      	mvns	r2, r3
 80052ac:	482a      	ldr	r0, [pc, #168]	@ (8005358 <HAL_GPIO_DeInit+0x1c4>)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	089b      	lsrs	r3, r3, #2
 80052b2:	400a      	ands	r2, r1
 80052b4:	3302      	adds	r3, #2
 80052b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	2103      	movs	r1, #3
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	43db      	mvns	r3, r3
 80052ca:	401a      	ands	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	08da      	lsrs	r2, r3, #3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3208      	adds	r2, #8
 80052d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	220f      	movs	r2, #15
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43db      	mvns	r3, r3
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	08d2      	lsrs	r2, r2, #3
 80052f0:	4019      	ands	r1, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3208      	adds	r2, #8
 80052f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	2103      	movs	r1, #3
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	401a      	ands	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	2101      	movs	r1, #1
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	fa01 f303 	lsl.w	r3, r1, r3
 800531c:	43db      	mvns	r3, r3
 800531e:	401a      	ands	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	2103      	movs	r1, #3
 800532e:	fa01 f303 	lsl.w	r3, r1, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	401a      	ands	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	3301      	adds	r3, #1
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2b0f      	cmp	r3, #15
 8005344:	f67f af34 	bls.w	80051b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40013800 	.word	0x40013800
 800535c:	40020000 	.word	0x40020000
 8005360:	40020400 	.word	0x40020400
 8005364:	40020800 	.word	0x40020800
 8005368:	40020c00 	.word	0x40020c00
 800536c:	40021000 	.word	0x40021000
 8005370:	40021400 	.word	0x40021400
 8005374:	40021800 	.word	0x40021800
 8005378:	40013c00 	.word	0x40013c00

0800537c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	887b      	ldrh	r3, [r7, #2]
 800538e:	4013      	ands	r3, r2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
 8005398:	e001      	b.n	800539e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800539e:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	807b      	strh	r3, [r7, #2]
 80053b8:	4613      	mov	r3, r2
 80053ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053bc:	787b      	ldrb	r3, [r7, #1]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053c2:	887a      	ldrh	r2, [r7, #2]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053c8:	e003      	b.n	80053d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053ca:	887b      	ldrh	r3, [r7, #2]
 80053cc:	041a      	lsls	r2, r3, #16
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	619a      	str	r2, [r3, #24]
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e12b      	b.n	800564a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fe f948 	bl	800369c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2224      	movs	r2, #36	@ 0x24
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0201 	bic.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005432:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005442:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005444:	f001 fa40 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 8005448:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4a81      	ldr	r2, [pc, #516]	@ (8005654 <HAL_I2C_Init+0x274>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d807      	bhi.n	8005464 <HAL_I2C_Init+0x84>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4a80      	ldr	r2, [pc, #512]	@ (8005658 <HAL_I2C_Init+0x278>)
 8005458:	4293      	cmp	r3, r2
 800545a:	bf94      	ite	ls
 800545c:	2301      	movls	r3, #1
 800545e:	2300      	movhi	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	e006      	b.n	8005472 <HAL_I2C_Init+0x92>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4a7d      	ldr	r2, [pc, #500]	@ (800565c <HAL_I2C_Init+0x27c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	bf94      	ite	ls
 800546c:	2301      	movls	r3, #1
 800546e:	2300      	movhi	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e0e7      	b.n	800564a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a78      	ldr	r2, [pc, #480]	@ (8005660 <HAL_I2C_Init+0x280>)
 800547e:	fba2 2303 	umull	r2, r3, r2, r3
 8005482:	0c9b      	lsrs	r3, r3, #18
 8005484:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4a6a      	ldr	r2, [pc, #424]	@ (8005654 <HAL_I2C_Init+0x274>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d802      	bhi.n	80054b4 <HAL_I2C_Init+0xd4>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	3301      	adds	r3, #1
 80054b2:	e009      	b.n	80054c8 <HAL_I2C_Init+0xe8>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
 80054be:	4a69      	ldr	r2, [pc, #420]	@ (8005664 <HAL_I2C_Init+0x284>)
 80054c0:	fba2 2303 	umull	r2, r3, r2, r3
 80054c4:	099b      	lsrs	r3, r3, #6
 80054c6:	3301      	adds	r3, #1
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	430b      	orrs	r3, r1
 80054ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80054da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	495c      	ldr	r1, [pc, #368]	@ (8005654 <HAL_I2C_Init+0x274>)
 80054e4:	428b      	cmp	r3, r1
 80054e6:	d819      	bhi.n	800551c <HAL_I2C_Init+0x13c>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	1e59      	subs	r1, r3, #1
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80054f6:	1c59      	adds	r1, r3, #1
 80054f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80054fc:	400b      	ands	r3, r1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <HAL_I2C_Init+0x138>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1e59      	subs	r1, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005510:	3301      	adds	r3, #1
 8005512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005516:	e051      	b.n	80055bc <HAL_I2C_Init+0x1dc>
 8005518:	2304      	movs	r3, #4
 800551a:	e04f      	b.n	80055bc <HAL_I2C_Init+0x1dc>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d111      	bne.n	8005548 <HAL_I2C_Init+0x168>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	1e58      	subs	r0, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6859      	ldr	r1, [r3, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	440b      	add	r3, r1
 8005532:	fbb0 f3f3 	udiv	r3, r0, r3
 8005536:	3301      	adds	r3, #1
 8005538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553c:	2b00      	cmp	r3, #0
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	e012      	b.n	800556e <HAL_I2C_Init+0x18e>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1e58      	subs	r0, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6859      	ldr	r1, [r3, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	0099      	lsls	r1, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	fbb0 f3f3 	udiv	r3, r0, r3
 800555e:	3301      	adds	r3, #1
 8005560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005564:	2b00      	cmp	r3, #0
 8005566:	bf0c      	ite	eq
 8005568:	2301      	moveq	r3, #1
 800556a:	2300      	movne	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_I2C_Init+0x196>
 8005572:	2301      	movs	r3, #1
 8005574:	e022      	b.n	80055bc <HAL_I2C_Init+0x1dc>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10e      	bne.n	800559c <HAL_I2C_Init+0x1bc>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1e58      	subs	r0, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6859      	ldr	r1, [r3, #4]
 8005586:	460b      	mov	r3, r1
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	440b      	add	r3, r1
 800558c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005590:	3301      	adds	r3, #1
 8005592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800559a:	e00f      	b.n	80055bc <HAL_I2C_Init+0x1dc>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	1e58      	subs	r0, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6859      	ldr	r1, [r3, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	0099      	lsls	r1, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80055b2:	3301      	adds	r3, #1
 80055b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	6809      	ldr	r1, [r1, #0]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80055ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6911      	ldr	r1, [r2, #16]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68d2      	ldr	r2, [r2, #12]
 80055f6:	4311      	orrs	r1, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	430b      	orrs	r3, r1
 80055fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695a      	ldr	r2, [r3, #20]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	000186a0 	.word	0x000186a0
 8005658:	001e847f 	.word	0x001e847f
 800565c:	003d08ff 	.word	0x003d08ff
 8005660:	431bde83 	.word	0x431bde83
 8005664:	10624dd3 	.word	0x10624dd3

08005668 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e021      	b.n	80056be <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2224      	movs	r2, #36	@ 0x24
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fe f8a2 	bl	80037dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	4608      	mov	r0, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	461a      	mov	r2, r3
 80056d6:	4603      	mov	r3, r0
 80056d8:	817b      	strh	r3, [r7, #10]
 80056da:	460b      	mov	r3, r1
 80056dc:	813b      	strh	r3, [r7, #8]
 80056de:	4613      	mov	r3, r2
 80056e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056e2:	f7fe fe83 	bl	80043ec <HAL_GetTick>
 80056e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	f040 80d9 	bne.w	80058a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	2319      	movs	r3, #25
 80056fc:	2201      	movs	r2, #1
 80056fe:	496d      	ldr	r1, [pc, #436]	@ (80058b4 <HAL_I2C_Mem_Write+0x1ec>)
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fdb9 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800570c:	2302      	movs	r3, #2
 800570e:	e0cc      	b.n	80058aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_I2C_Mem_Write+0x56>
 800571a:	2302      	movs	r3, #2
 800571c:	e0c5      	b.n	80058aa <HAL_I2C_Mem_Write+0x1e2>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b01      	cmp	r3, #1
 8005732:	d007      	beq.n	8005744 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2221      	movs	r2, #33	@ 0x21
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2240      	movs	r2, #64	@ 0x40
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a3a      	ldr	r2, [r7, #32]
 800576e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005774:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4a4d      	ldr	r2, [pc, #308]	@ (80058b8 <HAL_I2C_Mem_Write+0x1f0>)
 8005784:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005786:	88f8      	ldrh	r0, [r7, #6]
 8005788:	893a      	ldrh	r2, [r7, #8]
 800578a:	8979      	ldrh	r1, [r7, #10]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	4603      	mov	r3, r0
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fbf0 	bl	8005f7c <I2C_RequestMemoryWrite>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d052      	beq.n	8005848 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e081      	b.n	80058aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fe7e 	bl	80064ac <I2C_WaitOnTXEFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00d      	beq.n	80057d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d107      	bne.n	80057ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e06b      	b.n	80058aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	781a      	ldrb	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b04      	cmp	r3, #4
 800580e:	d11b      	bne.n	8005848 <HAL_I2C_Mem_Write+0x180>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005814:	2b00      	cmp	r3, #0
 8005816:	d017      	beq.n	8005848 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	781a      	ldrb	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1aa      	bne.n	80057a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fe71 	bl	800653c <I2C_WaitOnBTFFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00d      	beq.n	800587c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005864:	2b04      	cmp	r3, #4
 8005866:	d107      	bne.n	8005878 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005876:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e016      	b.n	80058aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800588a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e000      	b.n	80058aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	00100002 	.word	0x00100002
 80058b8:	ffff0000 	.word	0xffff0000

080058bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08c      	sub	sp, #48	@ 0x30
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	4608      	mov	r0, r1
 80058c6:	4611      	mov	r1, r2
 80058c8:	461a      	mov	r2, r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	817b      	strh	r3, [r7, #10]
 80058ce:	460b      	mov	r3, r1
 80058d0:	813b      	strh	r3, [r7, #8]
 80058d2:	4613      	mov	r3, r2
 80058d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058d6:	f7fe fd89 	bl	80043ec <HAL_GetTick>
 80058da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	f040 8214 	bne.w	8005d12 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	2319      	movs	r3, #25
 80058f0:	2201      	movs	r2, #1
 80058f2:	497b      	ldr	r1, [pc, #492]	@ (8005ae0 <HAL_I2C_Mem_Read+0x224>)
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fcbf 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005900:	2302      	movs	r3, #2
 8005902:	e207      	b.n	8005d14 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_I2C_Mem_Read+0x56>
 800590e:	2302      	movs	r3, #2
 8005910:	e200      	b.n	8005d14 <HAL_I2C_Mem_Read+0x458>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b01      	cmp	r3, #1
 8005926:	d007      	beq.n	8005938 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2222      	movs	r2, #34	@ 0x22
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2240      	movs	r2, #64	@ 0x40
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a5b      	ldr	r2, [pc, #364]	@ (8005ae4 <HAL_I2C_Mem_Read+0x228>)
 8005978:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800597a:	88f8      	ldrh	r0, [r7, #6]
 800597c:	893a      	ldrh	r2, [r7, #8]
 800597e:	8979      	ldrh	r1, [r7, #10]
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	4603      	mov	r3, r0
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 fb8c 	bl	80060a8 <I2C_RequestMemoryRead>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e1bc      	b.n	8005d14 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d113      	bne.n	80059ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059a2:	2300      	movs	r3, #0
 80059a4:	623b      	str	r3, [r7, #32]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	623b      	str	r3, [r7, #32]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	623b      	str	r3, [r7, #32]
 80059b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	e190      	b.n	8005cec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d11b      	bne.n	8005a0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	e170      	b.n	8005cec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d11b      	bne.n	8005a4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a32:	2300      	movs	r3, #0
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	e150      	b.n	8005cec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a60:	e144      	b.n	8005cec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	f200 80f1 	bhi.w	8005c4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d123      	bne.n	8005abc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 fda7 	bl	80065cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e145      	b.n	8005d14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005aba:	e117      	b.n	8005cec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d14e      	bne.n	8005b62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aca:	2200      	movs	r2, #0
 8005acc:	4906      	ldr	r1, [pc, #24]	@ (8005ae8 <HAL_I2C_Mem_Read+0x22c>)
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fbd2 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e11a      	b.n	8005d14 <HAL_I2C_Mem_Read+0x458>
 8005ade:	bf00      	nop
 8005ae0:	00100002 	.word	0x00100002
 8005ae4:	ffff0000 	.word	0xffff0000
 8005ae8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b60:	e0c4      	b.n	8005cec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b68:	2200      	movs	r2, #0
 8005b6a:	496c      	ldr	r1, [pc, #432]	@ (8005d1c <HAL_I2C_Mem_Read+0x460>)
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 fb83 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0cb      	b.n	8005d14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4955      	ldr	r1, [pc, #340]	@ (8005d1c <HAL_I2C_Mem_Read+0x460>)
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 fb55 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e09d      	b.n	8005d14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c4c:	e04e      	b.n	8005cec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fcba 	bl	80065cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e058      	b.n	8005d14 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d124      	bne.n	8005cec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d107      	bne.n	8005cba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cb8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f47f aeb6 	bne.w	8005a62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e000      	b.n	8005d14 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005d12:	2302      	movs	r3, #2
  }
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3728      	adds	r7, #40	@ 0x28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	00010004 	.word	0x00010004

08005d20 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	@ 0x28
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005d30:	f7fe fb5c 	bl	80043ec <HAL_GetTick>
 8005d34:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	f040 8111 	bne.w	8005f6a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	2319      	movs	r3, #25
 8005d4e:	2201      	movs	r2, #1
 8005d50:	4988      	ldr	r1, [pc, #544]	@ (8005f74 <HAL_I2C_IsDeviceReady+0x254>)
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fa90 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e104      	b.n	8005f6c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_I2C_IsDeviceReady+0x50>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e0fd      	b.n	8005f6c <HAL_I2C_IsDeviceReady+0x24c>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d007      	beq.n	8005d96 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0201 	orr.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005da4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2224      	movs	r2, #36	@ 0x24
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a70      	ldr	r2, [pc, #448]	@ (8005f78 <HAL_I2C_IsDeviceReady+0x258>)
 8005db8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dc8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fa4e 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00d      	beq.n	8005dfe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005df0:	d103      	bne.n	8005dfa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005df8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e0b6      	b.n	8005f6c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dfe:	897b      	ldrh	r3, [r7, #10]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e0c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005e0e:	f7fe faed 	bl	80043ec <HAL_GetTick>
 8005e12:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e38:	bf0c      	ite	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	2300      	movne	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e42:	e025      	b.n	8005e90 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e44:	f7fe fad2 	bl	80043ec <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d302      	bcc.n	8005e5a <HAL_I2C_IsDeviceReady+0x13a>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d103      	bne.n	8005e62 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	22a0      	movs	r2, #160	@ 0xa0
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	bf0c      	ite	eq
 8005e70:	2301      	moveq	r3, #1
 8005e72:	2300      	movne	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e86:	bf0c      	ite	eq
 8005e88:	2301      	moveq	r3, #1
 8005e8a:	2300      	movne	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2ba0      	cmp	r3, #160	@ 0xa0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_I2C_IsDeviceReady+0x188>
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d102      	bne.n	8005ea8 <HAL_I2C_IsDeviceReady+0x188>
 8005ea2:	7dbb      	ldrb	r3, [r7, #22]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0cd      	beq.n	8005e44 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d129      	bne.n	8005f12 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ecc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ece:	2300      	movs	r3, #0
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	613b      	str	r3, [r7, #16]
 8005ee2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	2319      	movs	r3, #25
 8005eea:	2201      	movs	r2, #1
 8005eec:	4921      	ldr	r1, [pc, #132]	@ (8005f74 <HAL_I2C_IsDeviceReady+0x254>)
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 f9c2 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e036      	b.n	8005f6c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e02c      	b.n	8005f6c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f20:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f2a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	2319      	movs	r3, #25
 8005f32:	2201      	movs	r2, #1
 8005f34:	490f      	ldr	r1, [pc, #60]	@ (8005f74 <HAL_I2C_IsDeviceReady+0x254>)
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f99e 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e012      	b.n	8005f6c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	f4ff af32 	bcc.w	8005dba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005f6a:	2302      	movs	r3, #2
  }
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	00100002 	.word	0x00100002
 8005f78:	ffff0000 	.word	0xffff0000

08005f7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	4608      	mov	r0, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	817b      	strh	r3, [r7, #10]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	813b      	strh	r3, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 f960 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00d      	beq.n	8005fda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fcc:	d103      	bne.n	8005fd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e05f      	b.n	800609a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fda:	897b      	ldrh	r3, [r7, #10]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005fe8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	6a3a      	ldr	r2, [r7, #32]
 8005fee:	492d      	ldr	r1, [pc, #180]	@ (80060a4 <I2C_RequestMemoryWrite+0x128>)
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f9bb 	bl	800636c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e04c      	b.n	800609a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006018:	6a39      	ldr	r1, [r7, #32]
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 fa46 	bl	80064ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00d      	beq.n	8006042 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602a:	2b04      	cmp	r3, #4
 800602c:	d107      	bne.n	800603e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800603c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e02b      	b.n	800609a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d105      	bne.n	8006054 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006048:	893b      	ldrh	r3, [r7, #8]
 800604a:	b2da      	uxtb	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	611a      	str	r2, [r3, #16]
 8006052:	e021      	b.n	8006098 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006054:	893b      	ldrh	r3, [r7, #8]
 8006056:	0a1b      	lsrs	r3, r3, #8
 8006058:	b29b      	uxth	r3, r3
 800605a:	b2da      	uxtb	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006064:	6a39      	ldr	r1, [r7, #32]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fa20 	bl	80064ac <I2C_WaitOnTXEFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00d      	beq.n	800608e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006076:	2b04      	cmp	r3, #4
 8006078:	d107      	bne.n	800608a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006088:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e005      	b.n	800609a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800608e:	893b      	ldrh	r3, [r7, #8]
 8006090:	b2da      	uxtb	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	00010002 	.word	0x00010002

080060a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	4608      	mov	r0, r1
 80060b2:	4611      	mov	r1, r2
 80060b4:	461a      	mov	r2, r3
 80060b6:	4603      	mov	r3, r0
 80060b8:	817b      	strh	r3, [r7, #10]
 80060ba:	460b      	mov	r3, r1
 80060bc:	813b      	strh	r3, [r7, #8]
 80060be:	4613      	mov	r3, r2
 80060c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 f8c2 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00d      	beq.n	8006116 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006108:	d103      	bne.n	8006112 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006110:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e0aa      	b.n	800626c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006116:	897b      	ldrh	r3, [r7, #10]
 8006118:	b2db      	uxtb	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006124:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	6a3a      	ldr	r2, [r7, #32]
 800612a:	4952      	ldr	r1, [pc, #328]	@ (8006274 <I2C_RequestMemoryRead+0x1cc>)
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f91d 	bl	800636c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e097      	b.n	800626c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800613c:	2300      	movs	r3, #0
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006154:	6a39      	ldr	r1, [r7, #32]
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 f9a8 	bl	80064ac <I2C_WaitOnTXEFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00d      	beq.n	800617e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006166:	2b04      	cmp	r3, #4
 8006168:	d107      	bne.n	800617a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006178:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e076      	b.n	800626c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800617e:	88fb      	ldrh	r3, [r7, #6]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d105      	bne.n	8006190 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006184:	893b      	ldrh	r3, [r7, #8]
 8006186:	b2da      	uxtb	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	611a      	str	r2, [r3, #16]
 800618e:	e021      	b.n	80061d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006190:	893b      	ldrh	r3, [r7, #8]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	b29b      	uxth	r3, r3
 8006196:	b2da      	uxtb	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800619e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a0:	6a39      	ldr	r1, [r7, #32]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 f982 	bl	80064ac <I2C_WaitOnTXEFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00d      	beq.n	80061ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d107      	bne.n	80061c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e050      	b.n	800626c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061ca:	893b      	ldrh	r3, [r7, #8]
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d6:	6a39      	ldr	r1, [r7, #32]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f967 	bl	80064ac <I2C_WaitOnTXEFlagUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00d      	beq.n	8006200 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d107      	bne.n	80061fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e035      	b.n	800626c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800620e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	2200      	movs	r2, #0
 8006218:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f82b 	bl	8006278 <I2C_WaitOnFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00d      	beq.n	8006244 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006236:	d103      	bne.n	8006240 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800623e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e013      	b.n	800626c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006244:	897b      	ldrh	r3, [r7, #10]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	f043 0301 	orr.w	r3, r3, #1
 800624c:	b2da      	uxtb	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	6a3a      	ldr	r2, [r7, #32]
 8006258:	4906      	ldr	r1, [pc, #24]	@ (8006274 <I2C_RequestMemoryRead+0x1cc>)
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 f886 	bl	800636c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	00010002 	.word	0x00010002

08006278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006288:	e048      	b.n	800631c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d044      	beq.n	800631c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006292:	f7fe f8ab 	bl	80043ec <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d302      	bcc.n	80062a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d139      	bne.n	800631c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d10d      	bne.n	80062ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	43da      	mvns	r2, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4013      	ands	r3, r2
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bf0c      	ite	eq
 80062c4:	2301      	moveq	r3, #1
 80062c6:	2300      	movne	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	e00c      	b.n	80062e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	43da      	mvns	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4013      	ands	r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bf0c      	ite	eq
 80062e0:	2301      	moveq	r3, #1
 80062e2:	2300      	movne	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d116      	bne.n	800631c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e023      	b.n	8006364 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	0c1b      	lsrs	r3, r3, #16
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b01      	cmp	r3, #1
 8006324:	d10d      	bne.n	8006342 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	43da      	mvns	r2, r3
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	4013      	ands	r3, r2
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	bf0c      	ite	eq
 8006338:	2301      	moveq	r3, #1
 800633a:	2300      	movne	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	461a      	mov	r2, r3
 8006340:	e00c      	b.n	800635c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	43da      	mvns	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4013      	ands	r3, r2
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	bf0c      	ite	eq
 8006354:	2301      	moveq	r3, #1
 8006356:	2300      	movne	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	429a      	cmp	r2, r3
 8006360:	d093      	beq.n	800628a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800637a:	e071      	b.n	8006460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800638a:	d123      	bne.n	80063d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800639a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c0:	f043 0204 	orr.w	r2, r3, #4
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e067      	b.n	80064a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d041      	beq.n	8006460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063dc:	f7fe f806 	bl	80043ec <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d302      	bcc.n	80063f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d136      	bne.n	8006460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	0c1b      	lsrs	r3, r3, #16
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d10c      	bne.n	8006416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	43da      	mvns	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4013      	ands	r3, r2
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	bf14      	ite	ne
 800640e:	2301      	movne	r3, #1
 8006410:	2300      	moveq	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	e00b      	b.n	800642e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	43da      	mvns	r2, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	4013      	ands	r3, r2
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	bf14      	ite	ne
 8006428:	2301      	movne	r3, #1
 800642a:	2300      	moveq	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d016      	beq.n	8006460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644c:	f043 0220 	orr.w	r2, r3, #32
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e021      	b.n	80064a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	0c1b      	lsrs	r3, r3, #16
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	d10c      	bne.n	8006484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	43da      	mvns	r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4013      	ands	r3, r2
 8006476:	b29b      	uxth	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	bf14      	ite	ne
 800647c:	2301      	movne	r3, #1
 800647e:	2300      	moveq	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	e00b      	b.n	800649c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	43da      	mvns	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4013      	ands	r3, r2
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf14      	ite	ne
 8006496:	2301      	movne	r3, #1
 8006498:	2300      	moveq	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	f47f af6d 	bne.w	800637c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064b8:	e034      	b.n	8006524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 f8e3 	bl	8006686 <I2C_IsAcknowledgeFailed>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e034      	b.n	8006534 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	d028      	beq.n	8006524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d2:	f7fd ff8b 	bl	80043ec <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d302      	bcc.n	80064e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d11d      	bne.n	8006524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f2:	2b80      	cmp	r3, #128	@ 0x80
 80064f4:	d016      	beq.n	8006524 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006510:	f043 0220 	orr.w	r2, r3, #32
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e007      	b.n	8006534 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800652e:	2b80      	cmp	r3, #128	@ 0x80
 8006530:	d1c3      	bne.n	80064ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006548:	e034      	b.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 f89b 	bl	8006686 <I2C_IsAcknowledgeFailed>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e034      	b.n	80065c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d028      	beq.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006562:	f7fd ff43 	bl	80043ec <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	429a      	cmp	r2, r3
 8006570:	d302      	bcc.n	8006578 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d11d      	bne.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f003 0304 	and.w	r3, r3, #4
 8006582:	2b04      	cmp	r3, #4
 8006584:	d016      	beq.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a0:	f043 0220 	orr.w	r2, r3, #32
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e007      	b.n	80065c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d1c3      	bne.n	800654a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065d8:	e049      	b.n	800666e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d119      	bne.n	800661c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0210 	mvn.w	r2, #16
 80065f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e030      	b.n	800667e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661c:	f7fd fee6 	bl	80043ec <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	429a      	cmp	r2, r3
 800662a:	d302      	bcc.n	8006632 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d11d      	bne.n	800666e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800663c:	2b40      	cmp	r3, #64	@ 0x40
 800663e:	d016      	beq.n	800666e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2220      	movs	r2, #32
 800664a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	f043 0220 	orr.w	r2, r3, #32
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e007      	b.n	800667e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006678:	2b40      	cmp	r3, #64	@ 0x40
 800667a:	d1ae      	bne.n	80065da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800669c:	d11b      	bne.n	80066d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	f043 0204 	orr.w	r2, r3, #4
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e000      	b.n	80066d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0cc      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066f8:	4b68      	ldr	r3, [pc, #416]	@ (800689c <HAL_RCC_ClockConfig+0x1b8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d90c      	bls.n	8006720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006706:	4b65      	ldr	r3, [pc, #404]	@ (800689c <HAL_RCC_ClockConfig+0x1b8>)
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800670e:	4b63      	ldr	r3, [pc, #396]	@ (800689c <HAL_RCC_ClockConfig+0x1b8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	429a      	cmp	r2, r3
 800671a:	d001      	beq.n	8006720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0b8      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d020      	beq.n	800676e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006738:	4b59      	ldr	r3, [pc, #356]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4a58      	ldr	r2, [pc, #352]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 800673e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006742:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006750:	4b53      	ldr	r3, [pc, #332]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	4a52      	ldr	r2, [pc, #328]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006756:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800675a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800675c:	4b50      	ldr	r3, [pc, #320]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	494d      	ldr	r1, [pc, #308]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 800676a:	4313      	orrs	r3, r2
 800676c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d044      	beq.n	8006804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d107      	bne.n	8006792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006782:	4b47      	ldr	r3, [pc, #284]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d119      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e07f      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d003      	beq.n	80067a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d107      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067a2:	4b3f      	ldr	r3, [pc, #252]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d109      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e06f      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067b2:	4b3b      	ldr	r3, [pc, #236]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e067      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067c2:	4b37      	ldr	r3, [pc, #220]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f023 0203 	bic.w	r2, r3, #3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	4934      	ldr	r1, [pc, #208]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067d4:	f7fd fe0a 	bl	80043ec <HAL_GetTick>
 80067d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067da:	e00a      	b.n	80067f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067dc:	f7fd fe06 	bl	80043ec <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e04f      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f2:	4b2b      	ldr	r3, [pc, #172]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 020c 	and.w	r2, r3, #12
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	429a      	cmp	r2, r3
 8006802:	d1eb      	bne.n	80067dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006804:	4b25      	ldr	r3, [pc, #148]	@ (800689c <HAL_RCC_ClockConfig+0x1b8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d20c      	bcs.n	800682c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006812:	4b22      	ldr	r3, [pc, #136]	@ (800689c <HAL_RCC_ClockConfig+0x1b8>)
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800681a:	4b20      	ldr	r3, [pc, #128]	@ (800689c <HAL_RCC_ClockConfig+0x1b8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	429a      	cmp	r2, r3
 8006826:	d001      	beq.n	800682c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e032      	b.n	8006892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006838:	4b19      	ldr	r3, [pc, #100]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	4916      	ldr	r1, [pc, #88]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	4313      	orrs	r3, r2
 8006848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d009      	beq.n	800686a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006856:	4b12      	ldr	r3, [pc, #72]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	490e      	ldr	r1, [pc, #56]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006866:	4313      	orrs	r3, r2
 8006868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800686a:	f000 fbb1 	bl	8006fd0 <HAL_RCC_GetSysClockFreq>
 800686e:	4602      	mov	r2, r0
 8006870:	4b0b      	ldr	r3, [pc, #44]	@ (80068a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	091b      	lsrs	r3, r3, #4
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	490a      	ldr	r1, [pc, #40]	@ (80068a4 <HAL_RCC_ClockConfig+0x1c0>)
 800687c:	5ccb      	ldrb	r3, [r1, r3]
 800687e:	fa22 f303 	lsr.w	r3, r2, r3
 8006882:	4a09      	ldr	r2, [pc, #36]	@ (80068a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006886:	4b09      	ldr	r3, [pc, #36]	@ (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f7fd fbb4 	bl	8003ff8 <HAL_InitTick>

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40023c00 	.word	0x40023c00
 80068a0:	40023800 	.word	0x40023800
 80068a4:	08016570 	.word	0x08016570
 80068a8:	20000000 	.word	0x20000000
 80068ac:	20000004 	.word	0x20000004

080068b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068b4:	4b03      	ldr	r3, [pc, #12]	@ (80068c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80068b6:	681b      	ldr	r3, [r3, #0]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000000 	.word	0x20000000

080068c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068cc:	f7ff fff0 	bl	80068b0 <HAL_RCC_GetHCLKFreq>
 80068d0:	4602      	mov	r2, r0
 80068d2:	4b05      	ldr	r3, [pc, #20]	@ (80068e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	0a9b      	lsrs	r3, r3, #10
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	4903      	ldr	r1, [pc, #12]	@ (80068ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80068de:	5ccb      	ldrb	r3, [r1, r3]
 80068e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40023800 	.word	0x40023800
 80068ec:	08016580 	.word	0x08016580

080068f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068f4:	f7ff ffdc 	bl	80068b0 <HAL_RCC_GetHCLKFreq>
 80068f8:	4602      	mov	r2, r0
 80068fa:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	0b5b      	lsrs	r3, r3, #13
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	4903      	ldr	r1, [pc, #12]	@ (8006914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006906:	5ccb      	ldrb	r3, [r1, r3]
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800690c:	4618      	mov	r0, r3
 800690e:	bd80      	pop	{r7, pc}
 8006910:	40023800 	.word	0x40023800
 8006914:	08016580 	.word	0x08016580

08006918 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	220f      	movs	r2, #15
 8006926:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006928:	4b12      	ldr	r3, [pc, #72]	@ (8006974 <HAL_RCC_GetClockConfig+0x5c>)
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 0203 	and.w	r2, r3, #3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006934:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <HAL_RCC_GetClockConfig+0x5c>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006940:	4b0c      	ldr	r3, [pc, #48]	@ (8006974 <HAL_RCC_GetClockConfig+0x5c>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800694c:	4b09      	ldr	r3, [pc, #36]	@ (8006974 <HAL_RCC_GetClockConfig+0x5c>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	08db      	lsrs	r3, r3, #3
 8006952:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800695a:	4b07      	ldr	r3, [pc, #28]	@ (8006978 <HAL_RCC_GetClockConfig+0x60>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 020f 	and.w	r2, r3, #15
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	601a      	str	r2, [r3, #0]
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40023800 	.word	0x40023800
 8006978:	40023c00 	.word	0x40023c00

0800697c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08c      	sub	sp, #48	@ 0x30
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d010      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80069b4:	4b6f      	ldr	r3, [pc, #444]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069ba:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c2:	496c      	ldr	r1, [pc, #432]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80069d2:	2301      	movs	r3, #1
 80069d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d010      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80069e2:	4b64      	ldr	r3, [pc, #400]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069e8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f0:	4960      	ldr	r1, [pc, #384]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006a00:	2301      	movs	r3, #1
 8006a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d017      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a10:	4b58      	ldr	r3, [pc, #352]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1e:	4955      	ldr	r1, [pc, #340]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a2e:	d101      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006a30:	2301      	movs	r3, #1
 8006a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d017      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a4c:	4b49      	ldr	r3, [pc, #292]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5a:	4946      	ldr	r1, [pc, #280]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a6a:	d101      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 808a 	beq.w	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	4b39      	ldr	r3, [pc, #228]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a92:	4a38      	ldr	r2, [pc, #224]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a9a:	4b36      	ldr	r3, [pc, #216]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aa2:	60bb      	str	r3, [r7, #8]
 8006aa4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006aa6:	4b34      	ldr	r3, [pc, #208]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a33      	ldr	r2, [pc, #204]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ab0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ab2:	f7fd fc9b 	bl	80043ec <HAL_GetTick>
 8006ab6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006ab8:	e008      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aba:	f7fd fc97 	bl	80043ec <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e278      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006acc:	4b2a      	ldr	r3, [pc, #168]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0f0      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ad8:	4b26      	ldr	r3, [pc, #152]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006adc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ae0:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02f      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006af0:	6a3a      	ldr	r2, [r7, #32]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d028      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006af6:	4b1f      	ldr	r3, [pc, #124]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006afe:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b00:	4b1e      	ldr	r3, [pc, #120]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b06:	4b1d      	ldr	r3, [pc, #116]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b0c:	4a19      	ldr	r2, [pc, #100]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b12:	4b18      	ldr	r3, [pc, #96]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d114      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b1e:	f7fd fc65 	bl	80043ec <HAL_GetTick>
 8006b22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b24:	e00a      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b26:	f7fd fc61 	bl	80043ec <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e240      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0ee      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b54:	d114      	bne.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006b56:	4b07      	ldr	r3, [pc, #28]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b62:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b6a:	4902      	ldr	r1, [pc, #8]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	608b      	str	r3, [r1, #8]
 8006b70:	e00c      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006b72:	bf00      	nop
 8006b74:	40023800 	.word	0x40023800
 8006b78:	40007000 	.word	0x40007000
 8006b7c:	42470e40 	.word	0x42470e40
 8006b80:	4b4a      	ldr	r3, [pc, #296]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	4a49      	ldr	r2, [pc, #292]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006b86:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006b8a:	6093      	str	r3, [r2, #8]
 8006b8c:	4b47      	ldr	r3, [pc, #284]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006b8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b98:	4944      	ldr	r1, [pc, #272]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0310 	and.w	r3, r3, #16
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d004      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8006bb0:	4b3f      	ldr	r3, [pc, #252]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006bb2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00a      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bce:	4937      	ldr	r1, [pc, #220]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006be2:	4b32      	ldr	r3, [pc, #200]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006be8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bf0:	492e      	ldr	r1, [pc, #184]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d011      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c04:	4b29      	ldr	r3, [pc, #164]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c0a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c12:	4926      	ldr	r1, [pc, #152]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c22:	d101      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006c24:	2301      	movs	r3, #1
 8006c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006c34:	4b1d      	ldr	r3, [pc, #116]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c3a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c42:	491a      	ldr	r1, [pc, #104]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d011      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006c56:	4b15      	ldr	r3, [pc, #84]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c5c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c64:	4911      	ldr	r1, [pc, #68]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c74:	d101      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006c76:	2301      	movs	r3, #1
 8006c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d005      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c88:	f040 80ff 	bne.w	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c8c:	4b09      	ldr	r3, [pc, #36]	@ (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c92:	f7fd fbab 	bl	80043ec <HAL_GetTick>
 8006c96:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c98:	e00e      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c9a:	f7fd fba7 	bl	80043ec <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d907      	bls.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e188      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006cac:	40023800 	.word	0x40023800
 8006cb0:	424711e0 	.word	0x424711e0
 8006cb4:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cb8:	4b7e      	ldr	r3, [pc, #504]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1ea      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d003      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d009      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d028      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d124      	bne.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006cec:	4b71      	ldr	r3, [pc, #452]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cf2:	0c1b      	lsrs	r3, r3, #16
 8006cf4:	f003 0303 	and.w	r3, r3, #3
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d04:	0e1b      	lsrs	r3, r3, #24
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	019b      	lsls	r3, r3, #6
 8006d16:	431a      	orrs	r2, r3
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	041b      	lsls	r3, r3, #16
 8006d20:	431a      	orrs	r2, r3
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	061b      	lsls	r3, r3, #24
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	071b      	lsls	r3, r3, #28
 8006d2e:	4961      	ldr	r1, [pc, #388]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d4a:	d00a      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d035      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d60:	d130      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006d62:	4b54      	ldr	r3, [pc, #336]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d68:	0c1b      	lsrs	r3, r3, #16
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	3301      	adds	r3, #1
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d74:	4b4f      	ldr	r3, [pc, #316]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d7a:	0f1b      	lsrs	r3, r3, #28
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	019b      	lsls	r3, r3, #6
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	085b      	lsrs	r3, r3, #1
 8006d92:	3b01      	subs	r3, #1
 8006d94:	041b      	lsls	r3, r3, #16
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	061b      	lsls	r3, r3, #24
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	071b      	lsls	r3, r3, #28
 8006da4:	4943      	ldr	r1, [pc, #268]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006dac:	4b41      	ldr	r3, [pc, #260]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006db2:	f023 021f 	bic.w	r2, r3, #31
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	493d      	ldr	r1, [pc, #244]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d029      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dd8:	d124      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006dda:	4b36      	ldr	r3, [pc, #216]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	3301      	adds	r3, #1
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006dec:	4b31      	ldr	r3, [pc, #196]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006df2:	0f1b      	lsrs	r3, r3, #28
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	019b      	lsls	r3, r3, #6
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	085b      	lsrs	r3, r3, #1
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	041b      	lsls	r3, r3, #16
 8006e10:	431a      	orrs	r2, r3
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	061b      	lsls	r3, r3, #24
 8006e16:	431a      	orrs	r2, r3
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	071b      	lsls	r3, r3, #28
 8006e1c:	4925      	ldr	r1, [pc, #148]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d016      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	019b      	lsls	r3, r3, #6
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	3b01      	subs	r3, #1
 8006e44:	041b      	lsls	r3, r3, #16
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	061b      	lsls	r3, r3, #24
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	071b      	lsls	r3, r3, #28
 8006e56:	4917      	ldr	r1, [pc, #92]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e5e:	4b16      	ldr	r3, [pc, #88]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e64:	f7fd fac2 	bl	80043ec <HAL_GetTick>
 8006e68:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e6c:	f7fd fabe 	bl	80043ec <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e09f      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f0      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8006e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	f040 8095 	bne.w	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006e92:	4b0a      	ldr	r3, [pc, #40]	@ (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e98:	f7fd faa8 	bl	80043ec <HAL_GetTick>
 8006e9c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e9e:	e00f      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ea0:	f7fd faa4 	bl	80043ec <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d908      	bls.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e085      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006eb2:	bf00      	nop
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	42470068 	.word	0x42470068
 8006ebc:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ec0:	4b41      	ldr	r3, [pc, #260]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ecc:	d0e8      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0304 	and.w	r3, r3, #4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d009      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d02b      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d127      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006ef6:	4b34      	ldr	r3, [pc, #208]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006efc:	0c1b      	lsrs	r3, r3, #16
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	3301      	adds	r3, #1
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699a      	ldr	r2, [r3, #24]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	019b      	lsls	r3, r3, #6
 8006f12:	431a      	orrs	r2, r3
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	041b      	lsls	r3, r3, #16
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f22:	061b      	lsls	r3, r3, #24
 8006f24:	4928      	ldr	r1, [pc, #160]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f2c:	4b26      	ldr	r3, [pc, #152]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f32:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	4922      	ldr	r1, [pc, #136]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01d      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f5a:	d118      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f62:	0e1b      	lsrs	r3, r3, #24
 8006f64:	f003 030f 	and.w	r3, r3, #15
 8006f68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	019b      	lsls	r3, r3, #6
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	041b      	lsls	r3, r3, #16
 8006f80:	431a      	orrs	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	061b      	lsls	r3, r3, #24
 8006f86:	4910      	ldr	r1, [pc, #64]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006f90:	2201      	movs	r2, #1
 8006f92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f94:	f7fd fa2a 	bl	80043ec <HAL_GetTick>
 8006f98:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f9a:	e008      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f9c:	f7fd fa26 	bl	80043ec <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e007      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006fae:	4b06      	ldr	r3, [pc, #24]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fba:	d1ef      	bne.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3730      	adds	r7, #48	@ 0x30
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40023800 	.word	0x40023800
 8006fcc:	42470070 	.word	0x42470070

08006fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fd4:	b0ae      	sub	sp, #184	@ 0xb8
 8006fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ff6:	4bcb      	ldr	r3, [pc, #812]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x354>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 030c 	and.w	r3, r3, #12
 8006ffe:	2b0c      	cmp	r3, #12
 8007000:	f200 8206 	bhi.w	8007410 <HAL_RCC_GetSysClockFreq+0x440>
 8007004:	a201      	add	r2, pc, #4	@ (adr r2, 800700c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	08007041 	.word	0x08007041
 8007010:	08007411 	.word	0x08007411
 8007014:	08007411 	.word	0x08007411
 8007018:	08007411 	.word	0x08007411
 800701c:	08007049 	.word	0x08007049
 8007020:	08007411 	.word	0x08007411
 8007024:	08007411 	.word	0x08007411
 8007028:	08007411 	.word	0x08007411
 800702c:	08007051 	.word	0x08007051
 8007030:	08007411 	.word	0x08007411
 8007034:	08007411 	.word	0x08007411
 8007038:	08007411 	.word	0x08007411
 800703c:	08007241 	.word	0x08007241
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007040:	4bb9      	ldr	r3, [pc, #740]	@ (8007328 <HAL_RCC_GetSysClockFreq+0x358>)
 8007042:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007046:	e1e7      	b.n	8007418 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007048:	4bb8      	ldr	r3, [pc, #736]	@ (800732c <HAL_RCC_GetSysClockFreq+0x35c>)
 800704a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800704e:	e1e3      	b.n	8007418 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007050:	4bb4      	ldr	r3, [pc, #720]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x354>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800705c:	4bb1      	ldr	r3, [pc, #708]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x354>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d071      	beq.n	800714c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007068:	4bae      	ldr	r3, [pc, #696]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x354>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	099b      	lsrs	r3, r3, #6
 800706e:	2200      	movs	r2, #0
 8007070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007074:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007078:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800707c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007080:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007084:	2300      	movs	r3, #0
 8007086:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800708a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800708e:	4622      	mov	r2, r4
 8007090:	462b      	mov	r3, r5
 8007092:	f04f 0000 	mov.w	r0, #0
 8007096:	f04f 0100 	mov.w	r1, #0
 800709a:	0159      	lsls	r1, r3, #5
 800709c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070a0:	0150      	lsls	r0, r2, #5
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4621      	mov	r1, r4
 80070a8:	1a51      	subs	r1, r2, r1
 80070aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80070ac:	4629      	mov	r1, r5
 80070ae:	eb63 0301 	sbc.w	r3, r3, r1
 80070b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80070c0:	4649      	mov	r1, r9
 80070c2:	018b      	lsls	r3, r1, #6
 80070c4:	4641      	mov	r1, r8
 80070c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070ca:	4641      	mov	r1, r8
 80070cc:	018a      	lsls	r2, r1, #6
 80070ce:	4641      	mov	r1, r8
 80070d0:	1a51      	subs	r1, r2, r1
 80070d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070d4:	4649      	mov	r1, r9
 80070d6:	eb63 0301 	sbc.w	r3, r3, r1
 80070da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80070e8:	4649      	mov	r1, r9
 80070ea:	00cb      	lsls	r3, r1, #3
 80070ec:	4641      	mov	r1, r8
 80070ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f2:	4641      	mov	r1, r8
 80070f4:	00ca      	lsls	r2, r1, #3
 80070f6:	4610      	mov	r0, r2
 80070f8:	4619      	mov	r1, r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	4622      	mov	r2, r4
 80070fe:	189b      	adds	r3, r3, r2
 8007100:	633b      	str	r3, [r7, #48]	@ 0x30
 8007102:	462b      	mov	r3, r5
 8007104:	460a      	mov	r2, r1
 8007106:	eb42 0303 	adc.w	r3, r2, r3
 800710a:	637b      	str	r3, [r7, #52]	@ 0x34
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	f04f 0300 	mov.w	r3, #0
 8007114:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007118:	4629      	mov	r1, r5
 800711a:	024b      	lsls	r3, r1, #9
 800711c:	4621      	mov	r1, r4
 800711e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007122:	4621      	mov	r1, r4
 8007124:	024a      	lsls	r2, r1, #9
 8007126:	4610      	mov	r0, r2
 8007128:	4619      	mov	r1, r3
 800712a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800712e:	2200      	movs	r2, #0
 8007130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007134:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007138:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800713c:	f7f9 fdc4 	bl	8000cc8 <__aeabi_uldivmod>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4613      	mov	r3, r2
 8007146:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800714a:	e067      	b.n	800721c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800714c:	4b75      	ldr	r3, [pc, #468]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x354>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	099b      	lsrs	r3, r3, #6
 8007152:	2200      	movs	r2, #0
 8007154:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007158:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800715c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007164:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007166:	2300      	movs	r3, #0
 8007168:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800716a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800716e:	4622      	mov	r2, r4
 8007170:	462b      	mov	r3, r5
 8007172:	f04f 0000 	mov.w	r0, #0
 8007176:	f04f 0100 	mov.w	r1, #0
 800717a:	0159      	lsls	r1, r3, #5
 800717c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007180:	0150      	lsls	r0, r2, #5
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4621      	mov	r1, r4
 8007188:	1a51      	subs	r1, r2, r1
 800718a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800718c:	4629      	mov	r1, r5
 800718e:	eb63 0301 	sbc.w	r3, r3, r1
 8007192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007194:	f04f 0200 	mov.w	r2, #0
 8007198:	f04f 0300 	mov.w	r3, #0
 800719c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80071a0:	4649      	mov	r1, r9
 80071a2:	018b      	lsls	r3, r1, #6
 80071a4:	4641      	mov	r1, r8
 80071a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071aa:	4641      	mov	r1, r8
 80071ac:	018a      	lsls	r2, r1, #6
 80071ae:	4641      	mov	r1, r8
 80071b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80071b4:	4649      	mov	r1, r9
 80071b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80071ba:	f04f 0200 	mov.w	r2, #0
 80071be:	f04f 0300 	mov.w	r3, #0
 80071c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071ce:	4692      	mov	sl, r2
 80071d0:	469b      	mov	fp, r3
 80071d2:	4623      	mov	r3, r4
 80071d4:	eb1a 0303 	adds.w	r3, sl, r3
 80071d8:	623b      	str	r3, [r7, #32]
 80071da:	462b      	mov	r3, r5
 80071dc:	eb4b 0303 	adc.w	r3, fp, r3
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	f04f 0300 	mov.w	r3, #0
 80071ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80071ee:	4629      	mov	r1, r5
 80071f0:	028b      	lsls	r3, r1, #10
 80071f2:	4621      	mov	r1, r4
 80071f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071f8:	4621      	mov	r1, r4
 80071fa:	028a      	lsls	r2, r1, #10
 80071fc:	4610      	mov	r0, r2
 80071fe:	4619      	mov	r1, r3
 8007200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007204:	2200      	movs	r2, #0
 8007206:	673b      	str	r3, [r7, #112]	@ 0x70
 8007208:	677a      	str	r2, [r7, #116]	@ 0x74
 800720a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800720e:	f7f9 fd5b 	bl	8000cc8 <__aeabi_uldivmod>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4613      	mov	r3, r2
 8007218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800721c:	4b41      	ldr	r3, [pc, #260]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x354>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	0c1b      	lsrs	r3, r3, #16
 8007222:	f003 0303 	and.w	r3, r3, #3
 8007226:	3301      	adds	r3, #1
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800722e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007232:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800723e:	e0eb      	b.n	8007418 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007240:	4b38      	ldr	r3, [pc, #224]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x354>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007248:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800724c:	4b35      	ldr	r3, [pc, #212]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x354>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d06b      	beq.n	8007330 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007258:	4b32      	ldr	r3, [pc, #200]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x354>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	099b      	lsrs	r3, r3, #6
 800725e:	2200      	movs	r2, #0
 8007260:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007262:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007264:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726a:	663b      	str	r3, [r7, #96]	@ 0x60
 800726c:	2300      	movs	r3, #0
 800726e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007270:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007274:	4622      	mov	r2, r4
 8007276:	462b      	mov	r3, r5
 8007278:	f04f 0000 	mov.w	r0, #0
 800727c:	f04f 0100 	mov.w	r1, #0
 8007280:	0159      	lsls	r1, r3, #5
 8007282:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007286:	0150      	lsls	r0, r2, #5
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4621      	mov	r1, r4
 800728e:	1a51      	subs	r1, r2, r1
 8007290:	61b9      	str	r1, [r7, #24]
 8007292:	4629      	mov	r1, r5
 8007294:	eb63 0301 	sbc.w	r3, r3, r1
 8007298:	61fb      	str	r3, [r7, #28]
 800729a:	f04f 0200 	mov.w	r2, #0
 800729e:	f04f 0300 	mov.w	r3, #0
 80072a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80072a6:	4659      	mov	r1, fp
 80072a8:	018b      	lsls	r3, r1, #6
 80072aa:	4651      	mov	r1, sl
 80072ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072b0:	4651      	mov	r1, sl
 80072b2:	018a      	lsls	r2, r1, #6
 80072b4:	4651      	mov	r1, sl
 80072b6:	ebb2 0801 	subs.w	r8, r2, r1
 80072ba:	4659      	mov	r1, fp
 80072bc:	eb63 0901 	sbc.w	r9, r3, r1
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072d4:	4690      	mov	r8, r2
 80072d6:	4699      	mov	r9, r3
 80072d8:	4623      	mov	r3, r4
 80072da:	eb18 0303 	adds.w	r3, r8, r3
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	462b      	mov	r3, r5
 80072e2:	eb49 0303 	adc.w	r3, r9, r3
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80072f4:	4629      	mov	r1, r5
 80072f6:	024b      	lsls	r3, r1, #9
 80072f8:	4621      	mov	r1, r4
 80072fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80072fe:	4621      	mov	r1, r4
 8007300:	024a      	lsls	r2, r1, #9
 8007302:	4610      	mov	r0, r2
 8007304:	4619      	mov	r1, r3
 8007306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800730a:	2200      	movs	r2, #0
 800730c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800730e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007310:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007314:	f7f9 fcd8 	bl	8000cc8 <__aeabi_uldivmod>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4613      	mov	r3, r2
 800731e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007322:	e065      	b.n	80073f0 <HAL_RCC_GetSysClockFreq+0x420>
 8007324:	40023800 	.word	0x40023800
 8007328:	00f42400 	.word	0x00f42400
 800732c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007330:	4b3d      	ldr	r3, [pc, #244]	@ (8007428 <HAL_RCC_GetSysClockFreq+0x458>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	099b      	lsrs	r3, r3, #6
 8007336:	2200      	movs	r2, #0
 8007338:	4618      	mov	r0, r3
 800733a:	4611      	mov	r1, r2
 800733c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007340:	653b      	str	r3, [r7, #80]	@ 0x50
 8007342:	2300      	movs	r3, #0
 8007344:	657b      	str	r3, [r7, #84]	@ 0x54
 8007346:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800734a:	4642      	mov	r2, r8
 800734c:	464b      	mov	r3, r9
 800734e:	f04f 0000 	mov.w	r0, #0
 8007352:	f04f 0100 	mov.w	r1, #0
 8007356:	0159      	lsls	r1, r3, #5
 8007358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800735c:	0150      	lsls	r0, r2, #5
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	4641      	mov	r1, r8
 8007364:	1a51      	subs	r1, r2, r1
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	4649      	mov	r1, r9
 800736a:	eb63 0301 	sbc.w	r3, r3, r1
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	f04f 0200 	mov.w	r2, #0
 8007374:	f04f 0300 	mov.w	r3, #0
 8007378:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800737c:	4659      	mov	r1, fp
 800737e:	018b      	lsls	r3, r1, #6
 8007380:	4651      	mov	r1, sl
 8007382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007386:	4651      	mov	r1, sl
 8007388:	018a      	lsls	r2, r1, #6
 800738a:	4651      	mov	r1, sl
 800738c:	1a54      	subs	r4, r2, r1
 800738e:	4659      	mov	r1, fp
 8007390:	eb63 0501 	sbc.w	r5, r3, r1
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	f04f 0300 	mov.w	r3, #0
 800739c:	00eb      	lsls	r3, r5, #3
 800739e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073a2:	00e2      	lsls	r2, r4, #3
 80073a4:	4614      	mov	r4, r2
 80073a6:	461d      	mov	r5, r3
 80073a8:	4643      	mov	r3, r8
 80073aa:	18e3      	adds	r3, r4, r3
 80073ac:	603b      	str	r3, [r7, #0]
 80073ae:	464b      	mov	r3, r9
 80073b0:	eb45 0303 	adc.w	r3, r5, r3
 80073b4:	607b      	str	r3, [r7, #4]
 80073b6:	f04f 0200 	mov.w	r2, #0
 80073ba:	f04f 0300 	mov.w	r3, #0
 80073be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073c2:	4629      	mov	r1, r5
 80073c4:	028b      	lsls	r3, r1, #10
 80073c6:	4621      	mov	r1, r4
 80073c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073cc:	4621      	mov	r1, r4
 80073ce:	028a      	lsls	r2, r1, #10
 80073d0:	4610      	mov	r0, r2
 80073d2:	4619      	mov	r1, r3
 80073d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073d8:	2200      	movs	r2, #0
 80073da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80073de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073e2:	f7f9 fc71 	bl	8000cc8 <__aeabi_uldivmod>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4613      	mov	r3, r2
 80073ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80073f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007428 <HAL_RCC_GetSysClockFreq+0x458>)
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	0f1b      	lsrs	r3, r3, #28
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80073fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007406:	fbb2 f3f3 	udiv	r3, r2, r3
 800740a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800740e:	e003      	b.n	8007418 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007410:	4b06      	ldr	r3, [pc, #24]	@ (800742c <HAL_RCC_GetSysClockFreq+0x45c>)
 8007412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007416:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007418:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800741c:	4618      	mov	r0, r3
 800741e:	37b8      	adds	r7, #184	@ 0xb8
 8007420:	46bd      	mov	sp, r7
 8007422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007426:	bf00      	nop
 8007428:	40023800 	.word	0x40023800
 800742c:	00f42400 	.word	0x00f42400

08007430 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e28d      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 8083 	beq.w	8007556 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007450:	4b94      	ldr	r3, [pc, #592]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 030c 	and.w	r3, r3, #12
 8007458:	2b04      	cmp	r3, #4
 800745a:	d019      	beq.n	8007490 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800745c:	4b91      	ldr	r3, [pc, #580]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 030c 	and.w	r3, r3, #12
        || \
 8007464:	2b08      	cmp	r3, #8
 8007466:	d106      	bne.n	8007476 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007468:	4b8e      	ldr	r3, [pc, #568]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007474:	d00c      	beq.n	8007490 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007476:	4b8b      	ldr	r3, [pc, #556]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800747e:	2b0c      	cmp	r3, #12
 8007480:	d112      	bne.n	80074a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007482:	4b88      	ldr	r3, [pc, #544]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800748a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800748e:	d10b      	bne.n	80074a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007490:	4b84      	ldr	r3, [pc, #528]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d05b      	beq.n	8007554 <HAL_RCC_OscConfig+0x124>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d157      	bne.n	8007554 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e25a      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074b0:	d106      	bne.n	80074c0 <HAL_RCC_OscConfig+0x90>
 80074b2:	4b7c      	ldr	r3, [pc, #496]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a7b      	ldr	r2, [pc, #492]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80074b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	e01d      	b.n	80074fc <HAL_RCC_OscConfig+0xcc>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074c8:	d10c      	bne.n	80074e4 <HAL_RCC_OscConfig+0xb4>
 80074ca:	4b76      	ldr	r3, [pc, #472]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a75      	ldr	r2, [pc, #468]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80074d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	4b73      	ldr	r3, [pc, #460]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a72      	ldr	r2, [pc, #456]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80074dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	e00b      	b.n	80074fc <HAL_RCC_OscConfig+0xcc>
 80074e4:	4b6f      	ldr	r3, [pc, #444]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a6e      	ldr	r2, [pc, #440]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80074ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	4b6c      	ldr	r3, [pc, #432]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a6b      	ldr	r2, [pc, #428]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80074f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d013      	beq.n	800752c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007504:	f7fc ff72 	bl	80043ec <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800750c:	f7fc ff6e 	bl	80043ec <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b64      	cmp	r3, #100	@ 0x64
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e21f      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800751e:	4b61      	ldr	r3, [pc, #388]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0f0      	beq.n	800750c <HAL_RCC_OscConfig+0xdc>
 800752a:	e014      	b.n	8007556 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800752c:	f7fc ff5e 	bl	80043ec <HAL_GetTick>
 8007530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007532:	e008      	b.n	8007546 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007534:	f7fc ff5a 	bl	80043ec <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	2b64      	cmp	r3, #100	@ 0x64
 8007540:	d901      	bls.n	8007546 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e20b      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007546:	4b57      	ldr	r3, [pc, #348]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1f0      	bne.n	8007534 <HAL_RCC_OscConfig+0x104>
 8007552:	e000      	b.n	8007556 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d06f      	beq.n	8007642 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007562:	4b50      	ldr	r3, [pc, #320]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 030c 	and.w	r3, r3, #12
 800756a:	2b00      	cmp	r3, #0
 800756c:	d017      	beq.n	800759e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800756e:	4b4d      	ldr	r3, [pc, #308]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 030c 	and.w	r3, r3, #12
        || \
 8007576:	2b08      	cmp	r3, #8
 8007578:	d105      	bne.n	8007586 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800757a:	4b4a      	ldr	r3, [pc, #296]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00b      	beq.n	800759e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007586:	4b47      	ldr	r3, [pc, #284]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800758e:	2b0c      	cmp	r3, #12
 8007590:	d11c      	bne.n	80075cc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007592:	4b44      	ldr	r3, [pc, #272]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d116      	bne.n	80075cc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800759e:	4b41      	ldr	r3, [pc, #260]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d005      	beq.n	80075b6 <HAL_RCC_OscConfig+0x186>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d001      	beq.n	80075b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e1d3      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075b6:	4b3b      	ldr	r3, [pc, #236]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	4937      	ldr	r1, [pc, #220]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ca:	e03a      	b.n	8007642 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d020      	beq.n	8007616 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075d4:	4b34      	ldr	r3, [pc, #208]	@ (80076a8 <HAL_RCC_OscConfig+0x278>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075da:	f7fc ff07 	bl	80043ec <HAL_GetTick>
 80075de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075e2:	f7fc ff03 	bl	80043ec <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e1b4      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075f4:	4b2b      	ldr	r3, [pc, #172]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0f0      	beq.n	80075e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007600:	4b28      	ldr	r3, [pc, #160]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	4925      	ldr	r1, [pc, #148]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007610:	4313      	orrs	r3, r2
 8007612:	600b      	str	r3, [r1, #0]
 8007614:	e015      	b.n	8007642 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007616:	4b24      	ldr	r3, [pc, #144]	@ (80076a8 <HAL_RCC_OscConfig+0x278>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800761c:	f7fc fee6 	bl	80043ec <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007624:	f7fc fee2 	bl	80043ec <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e193      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007636:	4b1b      	ldr	r3, [pc, #108]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1f0      	bne.n	8007624 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d036      	beq.n	80076bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d016      	beq.n	8007684 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007656:	4b15      	ldr	r3, [pc, #84]	@ (80076ac <HAL_RCC_OscConfig+0x27c>)
 8007658:	2201      	movs	r2, #1
 800765a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800765c:	f7fc fec6 	bl	80043ec <HAL_GetTick>
 8007660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007662:	e008      	b.n	8007676 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007664:	f7fc fec2 	bl	80043ec <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b02      	cmp	r3, #2
 8007670:	d901      	bls.n	8007676 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e173      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007676:	4b0b      	ldr	r3, [pc, #44]	@ (80076a4 <HAL_RCC_OscConfig+0x274>)
 8007678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0f0      	beq.n	8007664 <HAL_RCC_OscConfig+0x234>
 8007682:	e01b      	b.n	80076bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007684:	4b09      	ldr	r3, [pc, #36]	@ (80076ac <HAL_RCC_OscConfig+0x27c>)
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800768a:	f7fc feaf 	bl	80043ec <HAL_GetTick>
 800768e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007690:	e00e      	b.n	80076b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007692:	f7fc feab 	bl	80043ec <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d907      	bls.n	80076b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e15c      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
 80076a4:	40023800 	.word	0x40023800
 80076a8:	42470000 	.word	0x42470000
 80076ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076b0:	4b8a      	ldr	r3, [pc, #552]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 80076b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1ea      	bne.n	8007692 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 8097 	beq.w	80077f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076ca:	2300      	movs	r3, #0
 80076cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076ce:	4b83      	ldr	r3, [pc, #524]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 80076d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10f      	bne.n	80076fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076da:	2300      	movs	r3, #0
 80076dc:	60bb      	str	r3, [r7, #8]
 80076de:	4b7f      	ldr	r3, [pc, #508]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 80076e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e2:	4a7e      	ldr	r2, [pc, #504]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 80076e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80076ea:	4b7c      	ldr	r3, [pc, #496]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 80076ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076f2:	60bb      	str	r3, [r7, #8]
 80076f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076f6:	2301      	movs	r3, #1
 80076f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076fa:	4b79      	ldr	r3, [pc, #484]	@ (80078e0 <HAL_RCC_OscConfig+0x4b0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007702:	2b00      	cmp	r3, #0
 8007704:	d118      	bne.n	8007738 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007706:	4b76      	ldr	r3, [pc, #472]	@ (80078e0 <HAL_RCC_OscConfig+0x4b0>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a75      	ldr	r2, [pc, #468]	@ (80078e0 <HAL_RCC_OscConfig+0x4b0>)
 800770c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007712:	f7fc fe6b 	bl	80043ec <HAL_GetTick>
 8007716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007718:	e008      	b.n	800772c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800771a:	f7fc fe67 	bl	80043ec <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d901      	bls.n	800772c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e118      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800772c:	4b6c      	ldr	r3, [pc, #432]	@ (80078e0 <HAL_RCC_OscConfig+0x4b0>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0f0      	beq.n	800771a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d106      	bne.n	800774e <HAL_RCC_OscConfig+0x31e>
 8007740:	4b66      	ldr	r3, [pc, #408]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 8007742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007744:	4a65      	ldr	r2, [pc, #404]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 8007746:	f043 0301 	orr.w	r3, r3, #1
 800774a:	6713      	str	r3, [r2, #112]	@ 0x70
 800774c:	e01c      	b.n	8007788 <HAL_RCC_OscConfig+0x358>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	2b05      	cmp	r3, #5
 8007754:	d10c      	bne.n	8007770 <HAL_RCC_OscConfig+0x340>
 8007756:	4b61      	ldr	r3, [pc, #388]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 8007758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775a:	4a60      	ldr	r2, [pc, #384]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 800775c:	f043 0304 	orr.w	r3, r3, #4
 8007760:	6713      	str	r3, [r2, #112]	@ 0x70
 8007762:	4b5e      	ldr	r3, [pc, #376]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 8007764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007766:	4a5d      	ldr	r2, [pc, #372]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 8007768:	f043 0301 	orr.w	r3, r3, #1
 800776c:	6713      	str	r3, [r2, #112]	@ 0x70
 800776e:	e00b      	b.n	8007788 <HAL_RCC_OscConfig+0x358>
 8007770:	4b5a      	ldr	r3, [pc, #360]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 8007772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007774:	4a59      	ldr	r2, [pc, #356]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 8007776:	f023 0301 	bic.w	r3, r3, #1
 800777a:	6713      	str	r3, [r2, #112]	@ 0x70
 800777c:	4b57      	ldr	r3, [pc, #348]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 800777e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007780:	4a56      	ldr	r2, [pc, #344]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 8007782:	f023 0304 	bic.w	r3, r3, #4
 8007786:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d015      	beq.n	80077bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007790:	f7fc fe2c 	bl	80043ec <HAL_GetTick>
 8007794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007796:	e00a      	b.n	80077ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007798:	f7fc fe28 	bl	80043ec <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e0d7      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077ae:	4b4b      	ldr	r3, [pc, #300]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 80077b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0ee      	beq.n	8007798 <HAL_RCC_OscConfig+0x368>
 80077ba:	e014      	b.n	80077e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077bc:	f7fc fe16 	bl	80043ec <HAL_GetTick>
 80077c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077c2:	e00a      	b.n	80077da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077c4:	f7fc fe12 	bl	80043ec <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d901      	bls.n	80077da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e0c1      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077da:	4b40      	ldr	r3, [pc, #256]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 80077dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1ee      	bne.n	80077c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d105      	bne.n	80077f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077ec:	4b3b      	ldr	r3, [pc, #236]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 80077ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f0:	4a3a      	ldr	r2, [pc, #232]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 80077f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80ad 	beq.w	800795c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007802:	4b36      	ldr	r3, [pc, #216]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 030c 	and.w	r3, r3, #12
 800780a:	2b08      	cmp	r3, #8
 800780c:	d060      	beq.n	80078d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d145      	bne.n	80078a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007816:	4b33      	ldr	r3, [pc, #204]	@ (80078e4 <HAL_RCC_OscConfig+0x4b4>)
 8007818:	2200      	movs	r2, #0
 800781a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800781c:	f7fc fde6 	bl	80043ec <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007822:	e008      	b.n	8007836 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007824:	f7fc fde2 	bl	80043ec <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b02      	cmp	r3, #2
 8007830:	d901      	bls.n	8007836 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e093      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007836:	4b29      	ldr	r3, [pc, #164]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1f0      	bne.n	8007824 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	69da      	ldr	r2, [r3, #28]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	431a      	orrs	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007850:	019b      	lsls	r3, r3, #6
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007858:	085b      	lsrs	r3, r3, #1
 800785a:	3b01      	subs	r3, #1
 800785c:	041b      	lsls	r3, r3, #16
 800785e:	431a      	orrs	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007864:	061b      	lsls	r3, r3, #24
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786c:	071b      	lsls	r3, r3, #28
 800786e:	491b      	ldr	r1, [pc, #108]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 8007870:	4313      	orrs	r3, r2
 8007872:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007874:	4b1b      	ldr	r3, [pc, #108]	@ (80078e4 <HAL_RCC_OscConfig+0x4b4>)
 8007876:	2201      	movs	r2, #1
 8007878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800787a:	f7fc fdb7 	bl	80043ec <HAL_GetTick>
 800787e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007882:	f7fc fdb3 	bl	80043ec <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e064      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007894:	4b11      	ldr	r3, [pc, #68]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0f0      	beq.n	8007882 <HAL_RCC_OscConfig+0x452>
 80078a0:	e05c      	b.n	800795c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078a2:	4b10      	ldr	r3, [pc, #64]	@ (80078e4 <HAL_RCC_OscConfig+0x4b4>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a8:	f7fc fda0 	bl	80043ec <HAL_GetTick>
 80078ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078b0:	f7fc fd9c 	bl	80043ec <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e04d      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078c2:	4b06      	ldr	r3, [pc, #24]	@ (80078dc <HAL_RCC_OscConfig+0x4ac>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f0      	bne.n	80078b0 <HAL_RCC_OscConfig+0x480>
 80078ce:	e045      	b.n	800795c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d107      	bne.n	80078e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e040      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
 80078dc:	40023800 	.word	0x40023800
 80078e0:	40007000 	.word	0x40007000
 80078e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007968 <HAL_RCC_OscConfig+0x538>)
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d030      	beq.n	8007958 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007900:	429a      	cmp	r2, r3
 8007902:	d129      	bne.n	8007958 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790e:	429a      	cmp	r2, r3
 8007910:	d122      	bne.n	8007958 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007918:	4013      	ands	r3, r2
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800791e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007920:	4293      	cmp	r3, r2
 8007922:	d119      	bne.n	8007958 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792e:	085b      	lsrs	r3, r3, #1
 8007930:	3b01      	subs	r3, #1
 8007932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007934:	429a      	cmp	r2, r3
 8007936:	d10f      	bne.n	8007958 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007944:	429a      	cmp	r2, r3
 8007946:	d107      	bne.n	8007958 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007952:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007954:	429a      	cmp	r2, r3
 8007956:	d001      	beq.n	800795c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e000      	b.n	800795e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	40023800 	.word	0x40023800

0800796c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e022      	b.n	80079c4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7fc f917 	bl	8003bc4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2203      	movs	r2, #3
 800799a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f814 	bl	80079cc <HAL_SD_InitCard>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e00a      	b.n	80079c4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80079cc:	b5b0      	push	{r4, r5, r7, lr}
 80079ce:	b08e      	sub	sp, #56	@ 0x38
 80079d0:	af04      	add	r7, sp, #16
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80079d4:	2300      	movs	r3, #0
 80079d6:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80079d8:	2300      	movs	r3, #0
 80079da:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80079e4:	2300      	movs	r3, #0
 80079e6:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80079e8:	2376      	movs	r3, #118	@ 0x76
 80079ea:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681d      	ldr	r5, [r3, #0]
 80079f0:	466c      	mov	r4, sp
 80079f2:	f107 0318 	add.w	r3, r7, #24
 80079f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079fe:	f107 030c 	add.w	r3, r7, #12
 8007a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a04:	4628      	mov	r0, r5
 8007a06:	f002 fa89 	bl	8009f1c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ab4 <HAL_SD_InitCard+0xe8>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f002 faca 	bl	8009fae <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007a1a:	4b26      	ldr	r3, [pc, #152]	@ (8007ab4 <HAL_SD_InitCard+0xe8>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007a20:	2002      	movs	r0, #2
 8007a22:	f7fc fcef 	bl	8004404 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 ff76 	bl	8008918 <SD_PowerON>
 8007a2c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a42:	431a      	orrs	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e02e      	b.n	8007aaa <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fe95 	bl	800877c <SD_InitCard>
 8007a52:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e01b      	b.n	8007aaa <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f002 fb37 	bl	800a0ee <SDMMC_CmdBlockLength>
 8007a80:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00f      	beq.n	8007aa8 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ab8 <HAL_SD_InitCard+0xec>)
 8007a8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e000      	b.n	8007aaa <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3728      	adds	r7, #40	@ 0x28
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	422580a0 	.word	0x422580a0
 8007ab8:	004005ff 	.word	0x004005ff

08007abc <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e011      	b.n	8007af2 <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 ffac 	bl	8008a34 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7fc f9a1 	bl	8003e24 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08c      	sub	sp, #48	@ 0x30
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d107      	bne.n	8007b24 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b18:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e0be      	b.n	8007ca2 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	f040 80b7 	bne.w	8007ca0 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	441a      	add	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d907      	bls.n	8007b56 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e0a5      	b.n	8007ca2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2203      	movs	r2, #3
 8007b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007b74:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7a:	4a4c      	ldr	r2, [pc, #304]	@ (8007cac <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8007b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b82:	4a4b      	ldr	r2, [pc, #300]	@ (8007cb0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007b84:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b92:	2200      	movs	r2, #0
 8007b94:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3380      	adds	r3, #128	@ 0x80
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	025b      	lsls	r3, r3, #9
 8007bc4:	089b      	lsrs	r3, r3, #2
 8007bc6:	f7fc fe61 	bl	800488c <HAL_DMA_Start_IT>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d017      	beq.n	8007c00 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8007bde:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a33      	ldr	r2, [pc, #204]	@ (8007cb4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007be6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e050      	b.n	8007ca2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007c00:	4b2d      	ldr	r3, [pc, #180]	@ (8007cb8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007c02:	2201      	movs	r2, #1
 8007c04:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d002      	beq.n	8007c14 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8007c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c10:	025b      	lsls	r3, r3, #9
 8007c12:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c14:	f04f 33ff 	mov.w	r3, #4294967295
 8007c18:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	025b      	lsls	r3, r3, #9
 8007c1e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007c20:	2390      	movs	r3, #144	@ 0x90
 8007c22:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007c24:	2302      	movs	r3, #2
 8007c26:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f107 0210 	add.w	r2, r7, #16
 8007c38:	4611      	mov	r1, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f002 fa2b 	bl	800a096 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d90a      	bls.n	8007c5c <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2282      	movs	r2, #130	@ 0x82
 8007c4a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c52:	4618      	mov	r0, r3
 8007c54:	f002 fa8f 	bl	800a176 <SDMMC_CmdReadMultiBlock>
 8007c58:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007c5a:	e009      	b.n	8007c70 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2281      	movs	r2, #129	@ 0x81
 8007c60:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f002 fa62 	bl	800a132 <SDMMC_CmdReadSingleBlock>
 8007c6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d012      	beq.n	8007c9c <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8007cb4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007c7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c84:	431a      	orrs	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e002      	b.n	8007ca2 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	e000      	b.n	8007ca2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007ca0:	2302      	movs	r3, #2
  }
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3730      	adds	r7, #48	@ 0x30
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	0800858b 	.word	0x0800858b
 8007cb0:	080085fd 	.word	0x080085fd
 8007cb4:	004005ff 	.word	0x004005ff
 8007cb8:	4225858c 	.word	0x4225858c

08007cbc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08c      	sub	sp, #48	@ 0x30
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d107      	bne.n	8007ce4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e0c1      	b.n	8007e68 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	f040 80ba 	bne.w	8007e66 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	441a      	add	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d907      	bls.n	8007d16 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e0a8      	b.n	8007e68 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2203      	movs	r2, #3
 8007d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2200      	movs	r2, #0
 8007d24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f042 021a 	orr.w	r2, r2, #26
 8007d34:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d3a:	4a4d      	ldr	r2, [pc, #308]	@ (8007e70 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8007d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d42:	4a4c      	ldr	r2, [pc, #304]	@ (8007e74 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8007d44:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d002      	beq.n	8007d5c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d58:	025b      	lsls	r3, r3, #9
 8007d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d90a      	bls.n	8007d78 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	22a0      	movs	r2, #160	@ 0xa0
 8007d66:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f002 fa45 	bl	800a1fe <SDMMC_CmdWriteMultiBlock>
 8007d74:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007d76:	e009      	b.n	8007d8c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2290      	movs	r2, #144	@ 0x90
 8007d7c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d84:	4618      	mov	r0, r3
 8007d86:	f002 fa18 	bl	800a1ba <SDMMC_CmdWriteSingleBlock>
 8007d8a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d012      	beq.n	8007db8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a38      	ldr	r2, [pc, #224]	@ (8007e78 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007d98:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da0:	431a      	orrs	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e057      	b.n	8007e68 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007db8:	4b30      	ldr	r3, [pc, #192]	@ (8007e7c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007dba:	2201      	movs	r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc2:	2240      	movs	r2, #64	@ 0x40
 8007dc4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3380      	adds	r3, #128	@ 0x80
 8007dee:	461a      	mov	r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	025b      	lsls	r3, r3, #9
 8007df4:	089b      	lsrs	r3, r3, #2
 8007df6:	f7fc fd49 	bl	800488c <HAL_DMA_Start_IT>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01a      	beq.n	8007e36 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 021a 	bic.w	r2, r2, #26
 8007e0e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a18      	ldr	r2, [pc, #96]	@ (8007e78 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007e16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e018      	b.n	8007e68 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e36:	f04f 33ff 	mov.w	r3, #4294967295
 8007e3a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	025b      	lsls	r3, r3, #9
 8007e40:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007e42:	2390      	movs	r3, #144	@ 0x90
 8007e44:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007e46:	2300      	movs	r3, #0
 8007e48:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f107 0210 	add.w	r2, r7, #16
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f002 f91a 	bl	800a096 <SDIO_ConfigData>

      return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e000      	b.n	8007e68 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8007e66:	2302      	movs	r3, #2
  }
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3730      	adds	r7, #48	@ 0x30
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	08008561 	.word	0x08008561
 8007e74:	080085fd 	.word	0x080085fd
 8007e78:	004005ff 	.word	0x004005ff
 8007e7c:	4225858c 	.word	0x4225858c

08007e80 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d008      	beq.n	8007eae <HAL_SD_IRQHandler+0x2e>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fdf9 	bl	8008a9e <SD_Read_IT>
 8007eac:	e155      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 808f 	beq.w	8007fdc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ec6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8007ed6:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8007eda:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0201 	bic.w	r2, r2, #1
 8007eea:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f003 0308 	and.w	r3, r3, #8
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d039      	beq.n	8007f6a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <HAL_SD_IRQHandler+0x8a>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d011      	beq.n	8007f2e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f002 f998 	bl	800a244 <SDMMC_CmdStopTransfer>
 8007f14:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d008      	beq.n	8007f2e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f91f 	bl	800816c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007f36:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d104      	bne.n	8007f5a <HAL_SD_IRQHandler+0xda>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f002 fdb6 	bl	800aacc <HAL_SD_RxCpltCallback>
 8007f60:	e0fb      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f002 fda8 	bl	800aab8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f68:	e0f7      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 80f2 	beq.w	800815a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d011      	beq.n	8007fa4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f002 f95d 	bl	800a244 <SDMMC_CmdStopTransfer>
 8007f8a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d008      	beq.n	8007fa4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f8e4 	bl	800816c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 80d5 	bne.w	800815a <HAL_SD_IRQHandler+0x2da>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f040 80cf 	bne.w	800815a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0208 	bic.w	r2, r2, #8
 8007fca:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f002 fd6f 	bl	800aab8 <HAL_SD_TxCpltCallback>
}
 8007fda:	e0be      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d008      	beq.n	8007ffc <HAL_SD_IRQHandler+0x17c>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f003 0308 	and.w	r3, r3, #8
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fda3 	bl	8008b40 <SD_Write_IT>
 8007ffa:	e0ae      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008002:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 80a7 	beq.w	800815a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801e:	f043 0202 	orr.w	r2, r3, #2
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008038:	f043 0208 	orr.w	r2, r3, #8
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b00      	cmp	r3, #0
 800804c:	d005      	beq.n	800805a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008052:	f043 0220 	orr.w	r2, r3, #32
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	2b00      	cmp	r3, #0
 8008066:	d005      	beq.n	8008074 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806c:	f043 0210 	orr.w	r2, r3, #16
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f240 523a 	movw	r2, #1338	@ 0x53a
 800807c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800808c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4618      	mov	r0, r3
 8008094:	f002 f8d6 	bl	800a244 <SDMMC_CmdStopTransfer>
 8008098:	4602      	mov	r2, r0
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f003 0308 	and.w	r3, r3, #8
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f855 	bl	800816c <HAL_SD_ErrorCallback>
}
 80080c2:	e04a      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d045      	beq.n	800815a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f003 0310 	and.w	r3, r3, #16
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <HAL_SD_IRQHandler+0x262>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d011      	beq.n	8008106 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e6:	4a1f      	ldr	r2, [pc, #124]	@ (8008164 <HAL_SD_IRQHandler+0x2e4>)
 80080e8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fc fc24 	bl	800493c <HAL_DMA_Abort_IT>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d02f      	beq.n	800815a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 face 	bl	80086a0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008104:	e029      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d104      	bne.n	800811a <HAL_SD_IRQHandler+0x29a>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d011      	beq.n	800813e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811e:	4a12      	ldr	r2, [pc, #72]	@ (8008168 <HAL_SD_IRQHandler+0x2e8>)
 8008120:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008126:	4618      	mov	r0, r3
 8008128:	f7fc fc08 	bl	800493c <HAL_DMA_Abort_IT>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d013      	beq.n	800815a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fae9 	bl	800870e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800813c:	e00d      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f002 fca6 	bl	800aaa4 <HAL_SD_AbortCallback>
}
 8008158:	e7ff      	b.n	800815a <HAL_SD_IRQHandler+0x2da>
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	080086a1 	.word	0x080086a1
 8008168:	0800870f 	.word	0x0800870f

0800816c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800818e:	0f9b      	lsrs	r3, r3, #30
 8008190:	b2da      	uxtb	r2, r3
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800819a:	0e9b      	lsrs	r3, r3, #26
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081ac:	0e1b      	lsrs	r3, r3, #24
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	f003 0303 	and.w	r3, r3, #3
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081be:	0c1b      	lsrs	r3, r3, #16
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081ca:	0a1b      	lsrs	r3, r3, #8
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081e0:	0d1b      	lsrs	r3, r3, #20
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081ec:	0c1b      	lsrs	r3, r3, #16
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081fe:	0bdb      	lsrs	r3, r3, #15
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	b2da      	uxtb	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008210:	0b9b      	lsrs	r3, r3, #14
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	b2da      	uxtb	r2, r3
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008222:	0b5b      	lsrs	r3, r3, #13
 8008224:	b2db      	uxtb	r3, r3
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	b2da      	uxtb	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008234:	0b1b      	lsrs	r3, r3, #12
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	b2da      	uxtb	r2, r3
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2200      	movs	r2, #0
 8008246:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824c:	2b00      	cmp	r3, #0
 800824e:	d163      	bne.n	8008318 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008254:	009a      	lsls	r2, r3, #2
 8008256:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800825a:	4013      	ands	r3, r2
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008260:	0f92      	lsrs	r2, r2, #30
 8008262:	431a      	orrs	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800826c:	0edb      	lsrs	r3, r3, #27
 800826e:	b2db      	uxtb	r3, r3
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	b2da      	uxtb	r2, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800827e:	0e1b      	lsrs	r3, r3, #24
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	b2da      	uxtb	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008290:	0d5b      	lsrs	r3, r3, #21
 8008292:	b2db      	uxtb	r3, r3
 8008294:	f003 0307 	and.w	r3, r3, #7
 8008298:	b2da      	uxtb	r2, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082a2:	0c9b      	lsrs	r3, r3, #18
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082b4:	0bdb      	lsrs	r3, r3, #15
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	f003 0307 	and.w	r3, r3, #7
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	7e1b      	ldrb	r3, [r3, #24]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	3302      	adds	r3, #2
 80082d8:	2201      	movs	r2, #1
 80082da:	fa02 f303 	lsl.w	r3, r2, r3
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80082e2:	fb03 f202 	mul.w	r2, r3, r2
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	7a1b      	ldrb	r3, [r3, #8]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	f003 030f 	and.w	r3, r3, #15
 80082f4:	2201      	movs	r2, #1
 80082f6:	409a      	lsls	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008304:	0a52      	lsrs	r2, r2, #9
 8008306:	fb03 f202 	mul.w	r2, r3, r2
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008314:	661a      	str	r2, [r3, #96]	@ 0x60
 8008316:	e031      	b.n	800837c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800831c:	2b01      	cmp	r3, #1
 800831e:	d11d      	bne.n	800835c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008324:	041b      	lsls	r3, r3, #16
 8008326:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800832e:	0c1b      	lsrs	r3, r3, #16
 8008330:	431a      	orrs	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	3301      	adds	r3, #1
 800833c:	029a      	lsls	r2, r3, #10
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008350:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	661a      	str	r2, [r3, #96]	@ 0x60
 800835a:	e00f      	b.n	800837c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a58      	ldr	r2, [pc, #352]	@ (80084c4 <HAL_SD_GetCardCSD+0x344>)
 8008362:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008368:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e09d      	b.n	80084b8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008380:	0b9b      	lsrs	r3, r3, #14
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	b2da      	uxtb	r2, r3
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008392:	09db      	lsrs	r3, r3, #7
 8008394:	b2db      	uxtb	r3, r3
 8008396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800839a:	b2da      	uxtb	r2, r3
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b4:	0fdb      	lsrs	r3, r3, #31
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c0:	0f5b      	lsrs	r3, r3, #29
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d2:	0e9b      	lsrs	r3, r3, #26
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e4:	0d9b      	lsrs	r3, r3, #22
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	f003 030f 	and.w	r3, r3, #15
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083f6:	0d5b      	lsrs	r3, r3, #21
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008412:	0c1b      	lsrs	r3, r3, #16
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	b2da      	uxtb	r2, r3
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008426:	0bdb      	lsrs	r3, r3, #15
 8008428:	b2db      	uxtb	r3, r3
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	b2da      	uxtb	r2, r3
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800843a:	0b9b      	lsrs	r3, r3, #14
 800843c:	b2db      	uxtb	r3, r3
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	b2da      	uxtb	r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800844e:	0b5b      	lsrs	r3, r3, #13
 8008450:	b2db      	uxtb	r3, r3
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	b2da      	uxtb	r2, r3
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008462:	0b1b      	lsrs	r3, r3, #12
 8008464:	b2db      	uxtb	r3, r3
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	b2da      	uxtb	r2, r3
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008476:	0a9b      	lsrs	r3, r3, #10
 8008478:	b2db      	uxtb	r3, r3
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	b2da      	uxtb	r2, r3
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800848a:	0a1b      	lsrs	r3, r3, #8
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	b2da      	uxtb	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	004005ff 	.word	0x004005ff

080084c8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800852c:	f107 030c 	add.w	r3, r7, #12
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fa8b 	bl	8008a4e <SD_SendStatus>
 8008538:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	431a      	orrs	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	0a5b      	lsrs	r3, r3, #9
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008556:	693b      	ldr	r3, [r7, #16]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3718      	adds	r7, #24
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800856c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800857c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800857e:	bf00      	nop
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008596:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800859c:	2b82      	cmp	r3, #130	@ 0x82
 800859e:	d111      	bne.n	80085c4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 fe4d 	bl	800a244 <SDMMC_CmdStopTransfer>
 80085aa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d008      	beq.n	80085c4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	431a      	orrs	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff fdd4 	bl	800816c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0208 	bic.w	r2, r2, #8
 80085d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80085dc:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f002 fa6d 	bl	800aacc <HAL_SD_RxCpltCallback>
#endif
}
 80085f2:	bf00      	nop
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008608:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7fc fb42 	bl	8004c94 <HAL_DMA_GetError>
 8008610:	4603      	mov	r3, r0
 8008612:	2b02      	cmp	r3, #2
 8008614:	d03e      	beq.n	8008694 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800861c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008624:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d002      	beq.n	8008632 <SD_DMAError+0x36>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d12d      	bne.n	800868e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a19      	ldr	r2, [pc, #100]	@ (800869c <SD_DMAError+0xa0>)
 8008638:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008648:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008656:	6978      	ldr	r0, [r7, #20]
 8008658:	f7ff ff62 	bl	8008520 <HAL_SD_GetCardState>
 800865c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b06      	cmp	r3, #6
 8008662:	d002      	beq.n	800866a <SD_DMAError+0x6e>
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2b05      	cmp	r3, #5
 8008668:	d10a      	bne.n	8008680 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4618      	mov	r0, r3
 8008670:	f001 fde8 	bl	800a244 <SDMMC_CmdStopTransfer>
 8008674:	4602      	mov	r2, r0
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867a:	431a      	orrs	r2, r3
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2200      	movs	r2, #0
 800868c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800868e:	6978      	ldr	r0, [r7, #20]
 8008690:	f7ff fd6c 	bl	800816c <HAL_SD_ErrorCallback>
#endif
  }
}
 8008694:	bf00      	nop
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	004005ff 	.word	0x004005ff

080086a0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ac:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80086b6:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f7ff ff31 	bl	8008520 <HAL_SD_GetCardState>
 80086be:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b06      	cmp	r3, #6
 80086d2:	d002      	beq.n	80086da <SD_DMATxAbort+0x3a>
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d10a      	bne.n	80086f0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 fdb0 	bl	800a244 <SDMMC_CmdStopTransfer>
 80086e4:	4602      	mov	r2, r0
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ea:	431a      	orrs	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d103      	bne.n	8008700 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f002 f9d3 	bl	800aaa4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80086fe:	e002      	b.n	8008706 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7ff fd33 	bl	800816c <HAL_SD_ErrorCallback>
}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008724:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff fefa 	bl	8008520 <HAL_SD_GetCardState>
 800872c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b06      	cmp	r3, #6
 8008740:	d002      	beq.n	8008748 <SD_DMARxAbort+0x3a>
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2b05      	cmp	r3, #5
 8008746:	d10a      	bne.n	800875e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4618      	mov	r0, r3
 800874e:	f001 fd79 	bl	800a244 <SDMMC_CmdStopTransfer>
 8008752:	4602      	mov	r2, r0
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008758:	431a      	orrs	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008762:	2b00      	cmp	r3, #0
 8008764:	d103      	bne.n	800876e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f002 f99c 	bl	800aaa4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800876c:	e002      	b.n	8008774 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff fcfc 	bl	800816c <HAL_SD_ErrorCallback>
}
 8008774:	bf00      	nop
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800877c:	b5b0      	push	{r4, r5, r7, lr}
 800877e:	b094      	sub	sp, #80	@ 0x50
 8008780:	af04      	add	r7, sp, #16
 8008782:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008784:	2301      	movs	r3, #1
 8008786:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4618      	mov	r0, r3
 800878e:	f001 fc2a 	bl	8009fe6 <SDIO_GetPowerState>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d102      	bne.n	800879e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008798:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800879c:	e0b8      	b.n	8008910 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d02f      	beq.n	8008806 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 fe11 	bl	800a3d2 <SDMMC_CmdSendCID>
 80087b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80087b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <SD_InitCard+0x40>
    {
      return errorstate;
 80087b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ba:	e0a9      	b.n	8008910 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f001 fc54 	bl	800a070 <SDIO_GetResponse>
 80087c8:	4602      	mov	r2, r0
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2104      	movs	r1, #4
 80087d4:	4618      	mov	r0, r3
 80087d6:	f001 fc4b 	bl	800a070 <SDIO_GetResponse>
 80087da:	4602      	mov	r2, r0
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2108      	movs	r1, #8
 80087e6:	4618      	mov	r0, r3
 80087e8:	f001 fc42 	bl	800a070 <SDIO_GetResponse>
 80087ec:	4602      	mov	r2, r0
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	210c      	movs	r1, #12
 80087f8:	4618      	mov	r0, r3
 80087fa:	f001 fc39 	bl	800a070 <SDIO_GetResponse>
 80087fe:	4602      	mov	r2, r0
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800880a:	2b03      	cmp	r3, #3
 800880c:	d00d      	beq.n	800882a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f107 020e 	add.w	r2, r7, #14
 8008816:	4611      	mov	r1, r2
 8008818:	4618      	mov	r0, r3
 800881a:	f001 fe17 	bl	800a44c <SDMMC_CmdSetRelAdd>
 800881e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <SD_InitCard+0xae>
    {
      return errorstate;
 8008826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008828:	e072      	b.n	8008910 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882e:	2b03      	cmp	r3, #3
 8008830:	d036      	beq.n	80088a0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008832:	89fb      	ldrh	r3, [r7, #14]
 8008834:	461a      	mov	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008842:	041b      	lsls	r3, r3, #16
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f001 fde1 	bl	800a40e <SDMMC_CmdSendCSD>
 800884c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800884e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008856:	e05b      	b.n	8008910 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2100      	movs	r1, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f001 fc06 	bl	800a070 <SDIO_GetResponse>
 8008864:	4602      	mov	r2, r0
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2104      	movs	r1, #4
 8008870:	4618      	mov	r0, r3
 8008872:	f001 fbfd 	bl	800a070 <SDIO_GetResponse>
 8008876:	4602      	mov	r2, r0
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2108      	movs	r1, #8
 8008882:	4618      	mov	r0, r3
 8008884:	f001 fbf4 	bl	800a070 <SDIO_GetResponse>
 8008888:	4602      	mov	r2, r0
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	210c      	movs	r1, #12
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fbeb 	bl	800a070 <SDIO_GetResponse>
 800889a:	4602      	mov	r2, r0
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2104      	movs	r1, #4
 80088a6:	4618      	mov	r0, r3
 80088a8:	f001 fbe2 	bl	800a070 <SDIO_GetResponse>
 80088ac:	4603      	mov	r3, r0
 80088ae:	0d1a      	lsrs	r2, r3, #20
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80088b4:	f107 0310 	add.w	r3, r7, #16
 80088b8:	4619      	mov	r1, r3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff fc60 	bl	8008180 <HAL_SD_GetCardCSD>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80088ca:	e021      	b.n	8008910 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6819      	ldr	r1, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088d4:	041b      	lsls	r3, r3, #16
 80088d6:	2200      	movs	r2, #0
 80088d8:	461c      	mov	r4, r3
 80088da:	4615      	mov	r5, r2
 80088dc:	4622      	mov	r2, r4
 80088de:	462b      	mov	r3, r5
 80088e0:	4608      	mov	r0, r1
 80088e2:	f001 fcd1 	bl	800a288 <SDMMC_CmdSelDesel>
 80088e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80088e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <SD_InitCard+0x176>
  {
    return errorstate;
 80088ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f0:	e00e      	b.n	8008910 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681d      	ldr	r5, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	466c      	mov	r4, sp
 80088fa:	f103 0210 	add.w	r2, r3, #16
 80088fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8008900:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008904:	3304      	adds	r3, #4
 8008906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008908:	4628      	mov	r0, r5
 800890a:	f001 fb07 	bl	8009f1c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3740      	adds	r7, #64	@ 0x40
 8008914:	46bd      	mov	sp, r7
 8008916:	bdb0      	pop	{r4, r5, r7, pc}

08008918 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	617b      	str	r3, [r7, #20]
 8008928:	2300      	movs	r3, #0
 800892a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4618      	mov	r0, r3
 8008932:	f001 fccc 	bl	800a2ce <SDMMC_CmdGoIdleState>
 8008936:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <SD_PowerON+0x2a>
  {
    return errorstate;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	e072      	b.n	8008a28 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4618      	mov	r0, r3
 8008948:	f001 fcdf 	bl	800a30a <SDMMC_CmdOperCond>
 800894c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00d      	beq.n	8008970 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4618      	mov	r0, r3
 8008960:	f001 fcb5 	bl	800a2ce <SDMMC_CmdGoIdleState>
 8008964:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d004      	beq.n	8008976 <SD_PowerON+0x5e>
    {
      return errorstate;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	e05b      	b.n	8008a28 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800897a:	2b01      	cmp	r3, #1
 800897c:	d137      	bne.n	80089ee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2100      	movs	r1, #0
 8008984:	4618      	mov	r0, r3
 8008986:	f001 fcdf 	bl	800a348 <SDMMC_CmdAppCommand>
 800898a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d02d      	beq.n	80089ee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008992:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008996:	e047      	b.n	8008a28 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2100      	movs	r1, #0
 800899e:	4618      	mov	r0, r3
 80089a0:	f001 fcd2 	bl	800a348 <SDMMC_CmdAppCommand>
 80089a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <SD_PowerON+0x98>
    {
      return errorstate;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	e03b      	b.n	8008a28 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	491e      	ldr	r1, [pc, #120]	@ (8008a30 <SD_PowerON+0x118>)
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 fce8 	bl	800a38c <SDMMC_CmdAppOperCommand>
 80089bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089c4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80089c8:	e02e      	b.n	8008a28 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2100      	movs	r1, #0
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 fb4d 	bl	800a070 <SDIO_GetResponse>
 80089d6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	0fdb      	lsrs	r3, r3, #31
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d101      	bne.n	80089e4 <SD_PowerON+0xcc>
 80089e0:	2301      	movs	r3, #1
 80089e2:	e000      	b.n	80089e6 <SD_PowerON+0xce>
 80089e4:	2300      	movs	r3, #0
 80089e6:	613b      	str	r3, [r7, #16]

    count++;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	3301      	adds	r3, #1
 80089ec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d802      	bhi.n	80089fe <SD_PowerON+0xe6>
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0cc      	beq.n	8008998 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d902      	bls.n	8008a0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a0c:	e00c      	b.n	8008a28 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	645a      	str	r2, [r3, #68]	@ 0x44
 8008a1e:	e002      	b.n	8008a26 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	c1100000 	.word	0xc1100000

08008a34 <SD_PowerOFF>:
  * @brief  Turns the SDIO output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDIO_PowerState_OFF(hsd->Instance);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f001 fac2 	bl	8009fca <SDIO_PowerState_OFF>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d102      	bne.n	8008a64 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a5e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008a62:	e018      	b.n	8008a96 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a6c:	041b      	lsls	r3, r3, #16
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4610      	mov	r0, r2
 8008a72:	f001 fd0c 	bl	800a48e <SDMMC_CmdSendStatus>
 8008a76:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	e009      	b.n	8008a96 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2100      	movs	r1, #0
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f001 faf1 	bl	800a070 <SDIO_GetResponse>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b086      	sub	sp, #24
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aaa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d03f      	beq.n	8008b38 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	e033      	b.n	8008b26 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 fa55 	bl	8009f72 <SDIO_ReadFIFO>
 8008ac8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	0a1b      	lsrs	r3, r3, #8
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3301      	adds	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	0c1b      	lsrs	r3, r3, #16
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3301      	adds	r3, #1
 8008b02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	0e1b      	lsrs	r3, r3, #24
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3301      	adds	r3, #1
 8008b18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	3301      	adds	r3, #1
 8008b24:	617b      	str	r3, [r7, #20]
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2b07      	cmp	r3, #7
 8008b2a:	d9c8      	bls.n	8008abe <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008b38:	bf00      	nop
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b52:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d043      	beq.n	8008be2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	617b      	str	r3, [r7, #20]
 8008b5e:	e037      	b.n	8008bd0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	021a      	lsls	r2, r3, #8
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3301      	adds	r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	041a      	lsls	r2, r3, #16
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	061a      	lsls	r2, r3, #24
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f107 0208 	add.w	r2, r7, #8
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f001 f9e1 	bl	8009f8c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	617b      	str	r3, [r7, #20]
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b07      	cmp	r3, #7
 8008bd4:	d9c4      	bls.n	8008b60 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008be2:	bf00      	nop
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e07b      	b.n	8008cf4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d108      	bne.n	8008c16 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c0c:	d009      	beq.n	8008c22 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	61da      	str	r2, [r3, #28]
 8008c14:	e005      	b.n	8008c22 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d106      	bne.n	8008c42 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7fb f95f 	bl	8003f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c58:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c74:	431a      	orrs	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	69db      	ldr	r3, [r3, #28]
 8008c98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c9c:	431a      	orrs	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ca6:	ea42 0103 	orr.w	r1, r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	0c1b      	lsrs	r3, r3, #16
 8008cc0:	f003 0104 	and.w	r1, r3, #4
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc8:	f003 0210 	and.w	r2, r3, #16
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	69da      	ldr	r2, [r3, #28]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ce2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b088      	sub	sp, #32
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d0c:	f7fb fb6e 	bl	80043ec <HAL_GetTick>
 8008d10:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008d12:	88fb      	ldrh	r3, [r7, #6]
 8008d14:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d001      	beq.n	8008d26 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008d22:	2302      	movs	r3, #2
 8008d24:	e12a      	b.n	8008f7c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <HAL_SPI_Transmit+0x36>
 8008d2c:	88fb      	ldrh	r3, [r7, #6]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e122      	b.n	8008f7c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d101      	bne.n	8008d44 <HAL_SPI_Transmit+0x48>
 8008d40:	2302      	movs	r3, #2
 8008d42:	e11b      	b.n	8008f7c <HAL_SPI_Transmit+0x280>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2203      	movs	r2, #3
 8008d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	88fa      	ldrh	r2, [r7, #6]
 8008d64:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	88fa      	ldrh	r2, [r7, #6]
 8008d6a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d92:	d10f      	bne.n	8008db4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008da2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008db2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dbe:	2b40      	cmp	r3, #64	@ 0x40
 8008dc0:	d007      	beq.n	8008dd2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008dd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dda:	d152      	bne.n	8008e82 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <HAL_SPI_Transmit+0xee>
 8008de4:	8b7b      	ldrh	r3, [r7, #26]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d145      	bne.n	8008e76 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dee:	881a      	ldrh	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfa:	1c9a      	adds	r2, r3, #2
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008e0e:	e032      	b.n	8008e76 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d112      	bne.n	8008e44 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e22:	881a      	ldrh	r2, [r3, #0]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e2e:	1c9a      	adds	r2, r3, #2
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008e42:	e018      	b.n	8008e76 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e44:	f7fb fad2 	bl	80043ec <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d803      	bhi.n	8008e5c <HAL_SPI_Transmit+0x160>
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5a:	d102      	bne.n	8008e62 <HAL_SPI_Transmit+0x166>
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d109      	bne.n	8008e76 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e082      	b.n	8008f7c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1c7      	bne.n	8008e10 <HAL_SPI_Transmit+0x114>
 8008e80:	e053      	b.n	8008f2a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d002      	beq.n	8008e90 <HAL_SPI_Transmit+0x194>
 8008e8a:	8b7b      	ldrh	r3, [r7, #26]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d147      	bne.n	8008f20 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	330c      	adds	r3, #12
 8008e9a:	7812      	ldrb	r2, [r2, #0]
 8008e9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea2:	1c5a      	adds	r2, r3, #1
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008eb6:	e033      	b.n	8008f20 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f003 0302 	and.w	r3, r3, #2
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d113      	bne.n	8008eee <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	330c      	adds	r3, #12
 8008ed0:	7812      	ldrb	r2, [r2, #0]
 8008ed2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008eec:	e018      	b.n	8008f20 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eee:	f7fb fa7d 	bl	80043ec <HAL_GetTick>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d803      	bhi.n	8008f06 <HAL_SPI_Transmit+0x20a>
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f04:	d102      	bne.n	8008f0c <HAL_SPI_Transmit+0x210>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d109      	bne.n	8008f20 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e02d      	b.n	8008f7c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1c6      	bne.n	8008eb8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 fd04 	bl	800993c <SPI_EndRxTxTransaction>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d002      	beq.n	8008f40 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10a      	bne.n	8008f5e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f48:	2300      	movs	r3, #0
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	617b      	str	r3, [r7, #20]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e000      	b.n	8008f7c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
  }
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3720      	adds	r7, #32
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b088      	sub	sp, #32
 8008f88:	af02      	add	r7, sp, #8
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	603b      	str	r3, [r7, #0]
 8008f90:	4613      	mov	r3, r2
 8008f92:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d001      	beq.n	8008fa4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e104      	b.n	80091ae <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <HAL_SPI_Receive+0x2c>
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e0fc      	b.n	80091ae <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fbc:	d112      	bne.n	8008fe4 <HAL_SPI_Receive+0x60>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10e      	bne.n	8008fe4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2204      	movs	r2, #4
 8008fca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008fce:	88fa      	ldrh	r2, [r7, #6]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	68b9      	ldr	r1, [r7, #8]
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 f8eb 	bl	80091b6 <HAL_SPI_TransmitReceive>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	e0e4      	b.n	80091ae <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fe4:	f7fb fa02 	bl	80043ec <HAL_GetTick>
 8008fe8:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_SPI_Receive+0x74>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e0da      	b.n	80091ae <HAL_SPI_Receive+0x22a>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2204      	movs	r2, #4
 8009004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	88fa      	ldrh	r2, [r7, #6]
 8009018:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	88fa      	ldrh	r2, [r7, #6]
 800901e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009046:	d10f      	bne.n	8009068 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009056:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009066:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009072:	2b40      	cmp	r3, #64	@ 0x40
 8009074:	d007      	beq.n	8009086 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009084:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d170      	bne.n	8009170 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800908e:	e035      	b.n	80090fc <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b01      	cmp	r3, #1
 800909c:	d115      	bne.n	80090ca <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f103 020c 	add.w	r2, r3, #12
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	b2d2      	uxtb	r2, r2
 80090ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b4:	1c5a      	adds	r2, r3, #1
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090be:	b29b      	uxth	r3, r3
 80090c0:	3b01      	subs	r3, #1
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80090c8:	e018      	b.n	80090fc <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090ca:	f7fb f98f 	bl	80043ec <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d803      	bhi.n	80090e2 <HAL_SPI_Receive+0x15e>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e0:	d102      	bne.n	80090e8 <HAL_SPI_Receive+0x164>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d109      	bne.n	80090fc <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e058      	b.n	80091ae <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1c4      	bne.n	8009090 <HAL_SPI_Receive+0x10c>
 8009106:	e038      	b.n	800917a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b01      	cmp	r3, #1
 8009114:	d113      	bne.n	800913e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68da      	ldr	r2, [r3, #12]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009120:	b292      	uxth	r2, r2
 8009122:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009128:	1c9a      	adds	r2, r3, #2
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009132:	b29b      	uxth	r3, r3
 8009134:	3b01      	subs	r3, #1
 8009136:	b29a      	uxth	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800913c:	e018      	b.n	8009170 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800913e:	f7fb f955 	bl	80043ec <HAL_GetTick>
 8009142:	4602      	mov	r2, r0
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	429a      	cmp	r2, r3
 800914c:	d803      	bhi.n	8009156 <HAL_SPI_Receive+0x1d2>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009154:	d102      	bne.n	800915c <HAL_SPI_Receive+0x1d8>
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d109      	bne.n	8009170 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e01e      	b.n	80091ae <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009174:	b29b      	uxth	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1c6      	bne.n	8009108 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 fb76 	bl	8009870 <SPI_EndRxTransaction>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d002      	beq.n	8009190 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2220      	movs	r2, #32
 800918e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e000      	b.n	80091ae <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80091ac:	2300      	movs	r3, #0
  }
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b08a      	sub	sp, #40	@ 0x28
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	607a      	str	r2, [r7, #4]
 80091c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80091c4:	2301      	movs	r3, #1
 80091c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091c8:	f7fb f910 	bl	80043ec <HAL_GetTick>
 80091cc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80091d4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80091dc:	887b      	ldrh	r3, [r7, #2]
 80091de:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80091e0:	7ffb      	ldrb	r3, [r7, #31]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d00c      	beq.n	8009200 <HAL_SPI_TransmitReceive+0x4a>
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091ec:	d106      	bne.n	80091fc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d102      	bne.n	80091fc <HAL_SPI_TransmitReceive+0x46>
 80091f6:	7ffb      	ldrb	r3, [r7, #31]
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d001      	beq.n	8009200 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80091fc:	2302      	movs	r3, #2
 80091fe:	e17f      	b.n	8009500 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d005      	beq.n	8009212 <HAL_SPI_TransmitReceive+0x5c>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <HAL_SPI_TransmitReceive+0x5c>
 800920c:	887b      	ldrh	r3, [r7, #2]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e174      	b.n	8009500 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800921c:	2b01      	cmp	r3, #1
 800921e:	d101      	bne.n	8009224 <HAL_SPI_TransmitReceive+0x6e>
 8009220:	2302      	movs	r3, #2
 8009222:	e16d      	b.n	8009500 <HAL_SPI_TransmitReceive+0x34a>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b04      	cmp	r3, #4
 8009236:	d003      	beq.n	8009240 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2205      	movs	r2, #5
 800923c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	887a      	ldrh	r2, [r7, #2]
 8009250:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	887a      	ldrh	r2, [r7, #2]
 8009256:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	887a      	ldrh	r2, [r7, #2]
 8009262:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	887a      	ldrh	r2, [r7, #2]
 8009268:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009280:	2b40      	cmp	r3, #64	@ 0x40
 8009282:	d007      	beq.n	8009294 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800929c:	d17e      	bne.n	800939c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d002      	beq.n	80092ac <HAL_SPI_TransmitReceive+0xf6>
 80092a6:	8afb      	ldrh	r3, [r7, #22]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d16c      	bne.n	8009386 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b0:	881a      	ldrh	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092bc:	1c9a      	adds	r2, r3, #2
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092d0:	e059      	b.n	8009386 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d11b      	bne.n	8009318 <HAL_SPI_TransmitReceive+0x162>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d016      	beq.n	8009318 <HAL_SPI_TransmitReceive+0x162>
 80092ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d113      	bne.n	8009318 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f4:	881a      	ldrh	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009300:	1c9a      	adds	r2, r3, #2
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800930a:	b29b      	uxth	r3, r3
 800930c:	3b01      	subs	r3, #1
 800930e:	b29a      	uxth	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009314:	2300      	movs	r3, #0
 8009316:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b01      	cmp	r3, #1
 8009324:	d119      	bne.n	800935a <HAL_SPI_TransmitReceive+0x1a4>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800932a:	b29b      	uxth	r3, r3
 800932c:	2b00      	cmp	r3, #0
 800932e:	d014      	beq.n	800935a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933a:	b292      	uxth	r2, r2
 800933c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009342:	1c9a      	adds	r2, r3, #2
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800934c:	b29b      	uxth	r3, r3
 800934e:	3b01      	subs	r3, #1
 8009350:	b29a      	uxth	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009356:	2301      	movs	r3, #1
 8009358:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800935a:	f7fb f847 	bl	80043ec <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009366:	429a      	cmp	r2, r3
 8009368:	d80d      	bhi.n	8009386 <HAL_SPI_TransmitReceive+0x1d0>
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009370:	d009      	beq.n	8009386 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e0bc      	b.n	8009500 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800938a:	b29b      	uxth	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1a0      	bne.n	80092d2 <HAL_SPI_TransmitReceive+0x11c>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009394:	b29b      	uxth	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d19b      	bne.n	80092d2 <HAL_SPI_TransmitReceive+0x11c>
 800939a:	e082      	b.n	80094a2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <HAL_SPI_TransmitReceive+0x1f4>
 80093a4:	8afb      	ldrh	r3, [r7, #22]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d171      	bne.n	800948e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	330c      	adds	r3, #12
 80093b4:	7812      	ldrb	r2, [r2, #0]
 80093b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093bc:	1c5a      	adds	r2, r3, #1
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	3b01      	subs	r3, #1
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093d0:	e05d      	b.n	800948e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d11c      	bne.n	800941a <HAL_SPI_TransmitReceive+0x264>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d017      	beq.n	800941a <HAL_SPI_TransmitReceive+0x264>
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d114      	bne.n	800941a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	330c      	adds	r3, #12
 80093fa:	7812      	ldrb	r2, [r2, #0]
 80093fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009402:	1c5a      	adds	r2, r3, #1
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800940c:	b29b      	uxth	r3, r3
 800940e:	3b01      	subs	r3, #1
 8009410:	b29a      	uxth	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009416:	2300      	movs	r3, #0
 8009418:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b01      	cmp	r3, #1
 8009426:	d119      	bne.n	800945c <HAL_SPI_TransmitReceive+0x2a6>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800942c:	b29b      	uxth	r3, r3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d014      	beq.n	800945c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68da      	ldr	r2, [r3, #12]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943c:	b2d2      	uxtb	r2, r2
 800943e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800944e:	b29b      	uxth	r3, r3
 8009450:	3b01      	subs	r3, #1
 8009452:	b29a      	uxth	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009458:	2301      	movs	r3, #1
 800945a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800945c:	f7fa ffc6 	bl	80043ec <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	6a3b      	ldr	r3, [r7, #32]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009468:	429a      	cmp	r2, r3
 800946a:	d803      	bhi.n	8009474 <HAL_SPI_TransmitReceive+0x2be>
 800946c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009472:	d102      	bne.n	800947a <HAL_SPI_TransmitReceive+0x2c4>
 8009474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009476:	2b00      	cmp	r3, #0
 8009478:	d109      	bne.n	800948e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e038      	b.n	8009500 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009492:	b29b      	uxth	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d19c      	bne.n	80093d2 <HAL_SPI_TransmitReceive+0x21c>
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800949c:	b29b      	uxth	r3, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d197      	bne.n	80093d2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094a2:	6a3a      	ldr	r2, [r7, #32]
 80094a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 fa48 	bl	800993c <SPI_EndRxTxTransaction>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d008      	beq.n	80094c4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2220      	movs	r2, #32
 80094b6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e01d      	b.n	8009500 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10a      	bne.n	80094e2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094cc:	2300      	movs	r3, #0
 80094ce:	613b      	str	r3, [r7, #16]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	613b      	str	r3, [r7, #16]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	613b      	str	r3, [r7, #16]
 80094e0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e000      	b.n	8009500 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80094fe:	2300      	movs	r3, #0
  }
}
 8009500:	4618      	mov	r0, r3
 8009502:	3728      	adds	r7, #40	@ 0x28
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b088      	sub	sp, #32
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	099b      	lsrs	r3, r3, #6
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10f      	bne.n	800954c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	099b      	lsrs	r3, r3, #6
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	2b00      	cmp	r3, #0
 8009540:	d004      	beq.n	800954c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	4798      	blx	r3
    return;
 800954a:	e0d7      	b.n	80096fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	085b      	lsrs	r3, r3, #1
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00a      	beq.n	800956e <HAL_SPI_IRQHandler+0x66>
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	09db      	lsrs	r3, r3, #7
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	4798      	blx	r3
    return;
 800956c:	e0c6      	b.n	80096fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	095b      	lsrs	r3, r3, #5
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10c      	bne.n	8009594 <HAL_SPI_IRQHandler+0x8c>
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	099b      	lsrs	r3, r3, #6
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d106      	bne.n	8009594 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	0a1b      	lsrs	r3, r3, #8
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 80b4 	beq.w	80096fc <HAL_SPI_IRQHandler+0x1f4>
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	095b      	lsrs	r3, r3, #5
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 80ad 	beq.w	80096fc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	099b      	lsrs	r3, r3, #6
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d023      	beq.n	80095f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d011      	beq.n	80095de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095be:	f043 0204 	orr.w	r2, r3, #4
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	617b      	str	r3, [r7, #20]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	617b      	str	r3, [r7, #20]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	e00b      	b.n	80095f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095de:	2300      	movs	r3, #0
 80095e0:	613b      	str	r3, [r7, #16]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	613b      	str	r3, [r7, #16]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	613b      	str	r3, [r7, #16]
 80095f2:	693b      	ldr	r3, [r7, #16]
        return;
 80095f4:	e082      	b.n	80096fc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	095b      	lsrs	r3, r3, #5
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d014      	beq.n	800962c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009606:	f043 0201 	orr.w	r2, r3, #1
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	60fb      	str	r3, [r7, #12]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	0a1b      	lsrs	r3, r3, #8
 8009630:	f003 0301 	and.w	r3, r3, #1
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00c      	beq.n	8009652 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800963c:	f043 0208 	orr.w	r2, r3, #8
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009644:	2300      	movs	r3, #0
 8009646:	60bb      	str	r3, [r7, #8]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	60bb      	str	r3, [r7, #8]
 8009650:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009656:	2b00      	cmp	r3, #0
 8009658:	d04f      	beq.n	80096fa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009668:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b00      	cmp	r3, #0
 800967a:	d104      	bne.n	8009686 <HAL_SPI_IRQHandler+0x17e>
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d034      	beq.n	80096f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f022 0203 	bic.w	r2, r2, #3
 8009694:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d011      	beq.n	80096c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096a2:	4a18      	ldr	r2, [pc, #96]	@ (8009704 <HAL_SPI_IRQHandler+0x1fc>)
 80096a4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fb f946 	bl	800493c <HAL_DMA_Abort_IT>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d016      	beq.n	80096f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096ce:	4a0d      	ldr	r2, [pc, #52]	@ (8009704 <HAL_SPI_IRQHandler+0x1fc>)
 80096d0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fb f930 	bl	800493c <HAL_DMA_Abort_IT>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00a      	beq.n	80096f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80096ee:	e003      	b.n	80096f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f809 	bl	8009708 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80096f6:	e000      	b.n	80096fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80096f8:	bf00      	nop
    return;
 80096fa:	bf00      	nop
  }
}
 80096fc:	3720      	adds	r7, #32
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	08009739 	.word	0x08009739

08009708 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800972a:	b2db      	uxtb	r3, r3
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009744:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f7ff ffd8 	bl	8009708 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009758:	bf00      	nop
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	603b      	str	r3, [r7, #0]
 800976c:	4613      	mov	r3, r2
 800976e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009770:	f7fa fe3c 	bl	80043ec <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009778:	1a9b      	subs	r3, r3, r2
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	4413      	add	r3, r2
 800977e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009780:	f7fa fe34 	bl	80043ec <HAL_GetTick>
 8009784:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009786:	4b39      	ldr	r3, [pc, #228]	@ (800986c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	015b      	lsls	r3, r3, #5
 800978c:	0d1b      	lsrs	r3, r3, #20
 800978e:	69fa      	ldr	r2, [r7, #28]
 8009790:	fb02 f303 	mul.w	r3, r2, r3
 8009794:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009796:	e055      	b.n	8009844 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979e:	d051      	beq.n	8009844 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097a0:	f7fa fe24 	bl	80043ec <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d902      	bls.n	80097b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d13d      	bne.n	8009832 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80097c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80097ce:	d111      	bne.n	80097f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097d8:	d004      	beq.n	80097e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097e2:	d107      	bne.n	80097f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097fc:	d10f      	bne.n	800981e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800981c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e018      	b.n	8009864 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d102      	bne.n	800983e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	61fb      	str	r3, [r7, #28]
 800983c:	e002      	b.n	8009844 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	3b01      	subs	r3, #1
 8009842:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689a      	ldr	r2, [r3, #8]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	4013      	ands	r3, r2
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	429a      	cmp	r2, r3
 8009852:	bf0c      	ite	eq
 8009854:	2301      	moveq	r3, #1
 8009856:	2300      	movne	r3, #0
 8009858:	b2db      	uxtb	r3, r3
 800985a:	461a      	mov	r2, r3
 800985c:	79fb      	ldrb	r3, [r7, #7]
 800985e:	429a      	cmp	r2, r3
 8009860:	d19a      	bne.n	8009798 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20000000 	.word	0x20000000

08009870 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af02      	add	r7, sp, #8
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009884:	d111      	bne.n	80098aa <SPI_EndRxTransaction+0x3a>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800988e:	d004      	beq.n	800989a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009898:	d107      	bne.n	80098aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098b2:	d12a      	bne.n	800990a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098bc:	d012      	beq.n	80098e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2200      	movs	r2, #0
 80098c6:	2180      	movs	r1, #128	@ 0x80
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7ff ff49 	bl	8009760 <SPI_WaitFlagStateUntilTimeout>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d02d      	beq.n	8009930 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098d8:	f043 0220 	orr.w	r2, r3, #32
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e026      	b.n	8009932 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2200      	movs	r2, #0
 80098ec:	2101      	movs	r1, #1
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7ff ff36 	bl	8009760 <SPI_WaitFlagStateUntilTimeout>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d01a      	beq.n	8009930 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098fe:	f043 0220 	orr.w	r2, r3, #32
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e013      	b.n	8009932 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2200      	movs	r2, #0
 8009912:	2101      	movs	r1, #1
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f7ff ff23 	bl	8009760 <SPI_WaitFlagStateUntilTimeout>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d007      	beq.n	8009930 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009924:	f043 0220 	orr.w	r2, r3, #32
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e000      	b.n	8009932 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
	...

0800993c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af02      	add	r7, sp, #8
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2201      	movs	r2, #1
 8009950:	2102      	movs	r1, #2
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f7ff ff04 	bl	8009760 <SPI_WaitFlagStateUntilTimeout>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d007      	beq.n	800996e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009962:	f043 0220 	orr.w	r2, r3, #32
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e032      	b.n	80099d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800996e:	4b1b      	ldr	r3, [pc, #108]	@ (80099dc <SPI_EndRxTxTransaction+0xa0>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a1b      	ldr	r2, [pc, #108]	@ (80099e0 <SPI_EndRxTxTransaction+0xa4>)
 8009974:	fba2 2303 	umull	r2, r3, r2, r3
 8009978:	0d5b      	lsrs	r3, r3, #21
 800997a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800997e:	fb02 f303 	mul.w	r3, r2, r3
 8009982:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800998c:	d112      	bne.n	80099b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2200      	movs	r2, #0
 8009996:	2180      	movs	r1, #128	@ 0x80
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f7ff fee1 	bl	8009760 <SPI_WaitFlagStateUntilTimeout>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d016      	beq.n	80099d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099a8:	f043 0220 	orr.w	r2, r3, #32
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e00f      	b.n	80099d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00a      	beq.n	80099d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	3b01      	subs	r3, #1
 80099be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ca:	2b80      	cmp	r3, #128	@ 0x80
 80099cc:	d0f2      	beq.n	80099b4 <SPI_EndRxTxTransaction+0x78>
 80099ce:	e000      	b.n	80099d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80099d0:	bf00      	nop
  }

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000000 	.word	0x20000000
 80099e0:	165e9f81 	.word	0x165e9f81

080099e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d101      	bne.n	80099f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e041      	b.n	8009a7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d106      	bne.n	8009a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f839 	bl	8009a82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	4619      	mov	r1, r3
 8009a22:	4610      	mov	r0, r2
 8009a24:	f000 f9c0 	bl	8009da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009a8a:	bf00      	nop
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
	...

08009a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d001      	beq.n	8009ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e04e      	b.n	8009b4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68da      	ldr	r2, [r3, #12]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a23      	ldr	r2, [pc, #140]	@ (8009b5c <HAL_TIM_Base_Start_IT+0xc4>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d022      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ada:	d01d      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8009b60 <HAL_TIM_Base_Start_IT+0xc8>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d018      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a1e      	ldr	r2, [pc, #120]	@ (8009b64 <HAL_TIM_Base_Start_IT+0xcc>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d013      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a1c      	ldr	r2, [pc, #112]	@ (8009b68 <HAL_TIM_Base_Start_IT+0xd0>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d00e      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a1b      	ldr	r2, [pc, #108]	@ (8009b6c <HAL_TIM_Base_Start_IT+0xd4>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d009      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a19      	ldr	r2, [pc, #100]	@ (8009b70 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d004      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x80>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a18      	ldr	r2, [pc, #96]	@ (8009b74 <HAL_TIM_Base_Start_IT+0xdc>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d111      	bne.n	8009b3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	f003 0307 	and.w	r3, r3, #7
 8009b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b06      	cmp	r3, #6
 8009b28:	d010      	beq.n	8009b4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f042 0201 	orr.w	r2, r2, #1
 8009b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b3a:	e007      	b.n	8009b4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f042 0201 	orr.w	r2, r2, #1
 8009b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	40010000 	.word	0x40010000
 8009b60:	40000400 	.word	0x40000400
 8009b64:	40000800 	.word	0x40000800
 8009b68:	40000c00 	.word	0x40000c00
 8009b6c:	40010400 	.word	0x40010400
 8009b70:	40014000 	.word	0x40014000
 8009b74:	40001800 	.word	0x40001800

08009b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f003 0302 	and.w	r3, r3, #2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d020      	beq.n	8009bdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f003 0302 	and.w	r3, r3, #2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d01b      	beq.n	8009bdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f06f 0202 	mvn.w	r2, #2
 8009bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	f003 0303 	and.w	r3, r3, #3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f8d2 	bl	8009d6c <HAL_TIM_IC_CaptureCallback>
 8009bc8:	e005      	b.n	8009bd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f8c4 	bl	8009d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f8d5 	bl	8009d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f003 0304 	and.w	r3, r3, #4
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d020      	beq.n	8009c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01b      	beq.n	8009c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f06f 0204 	mvn.w	r2, #4
 8009bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f8ac 	bl	8009d6c <HAL_TIM_IC_CaptureCallback>
 8009c14:	e005      	b.n	8009c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f89e 	bl	8009d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f8af 	bl	8009d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f003 0308 	and.w	r3, r3, #8
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d020      	beq.n	8009c74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f003 0308 	and.w	r3, r3, #8
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d01b      	beq.n	8009c74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f06f 0208 	mvn.w	r2, #8
 8009c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2204      	movs	r2, #4
 8009c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	f003 0303 	and.w	r3, r3, #3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f886 	bl	8009d6c <HAL_TIM_IC_CaptureCallback>
 8009c60:	e005      	b.n	8009c6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f878 	bl	8009d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f889 	bl	8009d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f003 0310 	and.w	r3, r3, #16
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d020      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f003 0310 	and.w	r3, r3, #16
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01b      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f06f 0210 	mvn.w	r2, #16
 8009c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2208      	movs	r2, #8
 8009c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f860 	bl	8009d6c <HAL_TIM_IC_CaptureCallback>
 8009cac:	e005      	b.n	8009cba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f852 	bl	8009d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f863 	bl	8009d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00c      	beq.n	8009ce4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d007      	beq.n	8009ce4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f06f 0201 	mvn.w	r2, #1
 8009cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7f9 fe5e 	bl	80039a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00c      	beq.n	8009d08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d007      	beq.n	8009d08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f900 	bl	8009f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00c      	beq.n	8009d2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d007      	beq.n	8009d2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f834 	bl	8009d94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	f003 0320 	and.w	r3, r3, #32
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00c      	beq.n	8009d50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f003 0320 	and.w	r3, r3, #32
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d007      	beq.n	8009d50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f06f 0220 	mvn.w	r2, #32
 8009d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f8d2 	bl	8009ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d50:	bf00      	nop
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a43      	ldr	r2, [pc, #268]	@ (8009ec8 <TIM_Base_SetConfig+0x120>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d013      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dc6:	d00f      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a40      	ldr	r2, [pc, #256]	@ (8009ecc <TIM_Base_SetConfig+0x124>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d00b      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8009ed0 <TIM_Base_SetConfig+0x128>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d007      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a3e      	ldr	r2, [pc, #248]	@ (8009ed4 <TIM_Base_SetConfig+0x12c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d003      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a3d      	ldr	r2, [pc, #244]	@ (8009ed8 <TIM_Base_SetConfig+0x130>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d108      	bne.n	8009dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a32      	ldr	r2, [pc, #200]	@ (8009ec8 <TIM_Base_SetConfig+0x120>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d02b      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e08:	d027      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8009ecc <TIM_Base_SetConfig+0x124>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d023      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a2e      	ldr	r2, [pc, #184]	@ (8009ed0 <TIM_Base_SetConfig+0x128>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d01f      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8009ed4 <TIM_Base_SetConfig+0x12c>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d01b      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a2c      	ldr	r2, [pc, #176]	@ (8009ed8 <TIM_Base_SetConfig+0x130>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d017      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8009edc <TIM_Base_SetConfig+0x134>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d013      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a2a      	ldr	r2, [pc, #168]	@ (8009ee0 <TIM_Base_SetConfig+0x138>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d00f      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a29      	ldr	r2, [pc, #164]	@ (8009ee4 <TIM_Base_SetConfig+0x13c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d00b      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a28      	ldr	r2, [pc, #160]	@ (8009ee8 <TIM_Base_SetConfig+0x140>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d007      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a27      	ldr	r2, [pc, #156]	@ (8009eec <TIM_Base_SetConfig+0x144>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d003      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a26      	ldr	r2, [pc, #152]	@ (8009ef0 <TIM_Base_SetConfig+0x148>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d108      	bne.n	8009e6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	689a      	ldr	r2, [r3, #8]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8009ec8 <TIM_Base_SetConfig+0x120>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d003      	beq.n	8009e9a <TIM_Base_SetConfig+0xf2>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a10      	ldr	r2, [pc, #64]	@ (8009ed8 <TIM_Base_SetConfig+0x130>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d103      	bne.n	8009ea2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	691a      	ldr	r2, [r3, #16]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f043 0204 	orr.w	r2, r3, #4
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	601a      	str	r2, [r3, #0]
}
 8009eba:	bf00      	nop
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	40010000 	.word	0x40010000
 8009ecc:	40000400 	.word	0x40000400
 8009ed0:	40000800 	.word	0x40000800
 8009ed4:	40000c00 	.word	0x40000c00
 8009ed8:	40010400 	.word	0x40010400
 8009edc:	40014000 	.word	0x40014000
 8009ee0:	40014400 	.word	0x40014400
 8009ee4:	40014800 	.word	0x40014800
 8009ee8:	40001800 	.word	0x40001800
 8009eec:	40001c00 	.word	0x40001c00
 8009ef0:	40002000 	.word	0x40002000

08009ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	b480      	push	{r7}
 8009f20:	b085      	sub	sp, #20
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	f107 001c 	add.w	r0, r7, #28
 8009f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009f32:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009f34:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009f36:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009f3a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009f3e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009f42:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009f46:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8009f56:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	431a      	orrs	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	b004      	add	sp, #16
 8009f70:	4770      	bx	lr

08009f72 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b083      	sub	sp, #12
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	370c      	adds	r7, #12
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009fae:	b480      	push	{r7}
 8009fb0:	b083      	sub	sp, #12
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2203      	movs	r2, #3
 8009fba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <SDIO_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_OFF(SDIO_TypeDef *SDIOx)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDIOx->POWER = (uint32_t)0x00000000;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	370c      	adds	r7, #12
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b083      	sub	sp, #12
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0303 	and.w	r3, r3, #3
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	370c      	adds	r7, #12
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a00c:	2300      	movs	r3, #0
 800a00e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a020:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a026:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a02c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	4313      	orrs	r3, r2
 800a032:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a03c:	f023 030f 	bic.w	r3, r3, #15
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	431a      	orrs	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	b2db      	uxtb	r3, r3
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	3314      	adds	r3, #20
 800a07e:	461a      	mov	r2, r3
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	4413      	add	r3, r2
 800a084:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
}  
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a096:	b480      	push	{r7}
 800a098:	b085      	sub	sp, #20
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0bc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a0c2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a0c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	431a      	orrs	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0

}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b088      	sub	sp, #32
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a0fc:	2310      	movs	r3, #16
 800a0fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a100:	2340      	movs	r3, #64	@ 0x40
 800a102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a104:	2300      	movs	r3, #0
 800a106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a10c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a10e:	f107 0308 	add.w	r3, r7, #8
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff ff74 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a11a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a11e:	2110      	movs	r1, #16
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f9d7 	bl	800a4d4 <SDMMC_GetCmdResp1>
 800a126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a128:	69fb      	ldr	r3, [r7, #28]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3720      	adds	r7, #32
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b088      	sub	sp, #32
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a140:	2311      	movs	r3, #17
 800a142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a144:	2340      	movs	r3, #64	@ 0x40
 800a146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a148:	2300      	movs	r3, #0
 800a14a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a14c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a150:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a152:	f107 0308 	add.w	r3, r7, #8
 800a156:	4619      	mov	r1, r3
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff ff52 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a15e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a162:	2111      	movs	r1, #17
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f9b5 	bl	800a4d4 <SDMMC_GetCmdResp1>
 800a16a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a16c:	69fb      	ldr	r3, [r7, #28]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3720      	adds	r7, #32
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b088      	sub	sp, #32
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a184:	2312      	movs	r3, #18
 800a186:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a188:	2340      	movs	r3, #64	@ 0x40
 800a18a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a190:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a194:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a196:	f107 0308 	add.w	r3, r7, #8
 800a19a:	4619      	mov	r1, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7ff ff30 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a1a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1a6:	2112      	movs	r1, #18
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f993 	bl	800a4d4 <SDMMC_GetCmdResp1>
 800a1ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1b0:	69fb      	ldr	r3, [r7, #28]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3720      	adds	r7, #32
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b088      	sub	sp, #32
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a1c8:	2318      	movs	r3, #24
 800a1ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1cc:	2340      	movs	r3, #64	@ 0x40
 800a1ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1da:	f107 0308 	add.w	r3, r7, #8
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff ff0e 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a1e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1ea:	2118      	movs	r1, #24
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f971 	bl	800a4d4 <SDMMC_GetCmdResp1>
 800a1f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1f4:	69fb      	ldr	r3, [r7, #28]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3720      	adds	r7, #32
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b088      	sub	sp, #32
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a20c:	2319      	movs	r3, #25
 800a20e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a210:	2340      	movs	r3, #64	@ 0x40
 800a212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a214:	2300      	movs	r3, #0
 800a216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a21c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a21e:	f107 0308 	add.w	r3, r7, #8
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7ff feec 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a22a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a22e:	2119      	movs	r1, #25
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f94f 	bl	800a4d4 <SDMMC_GetCmdResp1>
 800a236:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a238:	69fb      	ldr	r3, [r7, #28]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3720      	adds	r7, #32
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
	...

0800a244 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a250:	230c      	movs	r3, #12
 800a252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a254:	2340      	movs	r3, #64	@ 0x40
 800a256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a258:	2300      	movs	r3, #0
 800a25a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a25c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a260:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a262:	f107 0308 	add.w	r3, r7, #8
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f7ff feca 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a26e:	4a05      	ldr	r2, [pc, #20]	@ (800a284 <SDMMC_CmdStopTransfer+0x40>)
 800a270:	210c      	movs	r1, #12
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f92e 	bl	800a4d4 <SDMMC_GetCmdResp1>
 800a278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a27a:	69fb      	ldr	r3, [r7, #28]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3720      	adds	r7, #32
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	05f5e100 	.word	0x05f5e100

0800a288 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b08a      	sub	sp, #40	@ 0x28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a298:	2307      	movs	r3, #7
 800a29a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a29c:	2340      	movs	r3, #64	@ 0x40
 800a29e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2aa:	f107 0310 	add.w	r3, r7, #16
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f7ff fea6 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a2b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2ba:	2107      	movs	r1, #7
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 f909 	bl	800a4d4 <SDMMC_GetCmdResp1>
 800a2c2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3728      	adds	r7, #40	@ 0x28
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b088      	sub	sp, #32
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2ec:	f107 0308 	add.w	r3, r7, #8
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7ff fe85 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fb23 	bl	800a944 <SDMMC_GetCmdError>
 800a2fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a300:	69fb      	ldr	r3, [r7, #28]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3720      	adds	r7, #32
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b088      	sub	sp, #32
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a312:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a316:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a318:	2308      	movs	r3, #8
 800a31a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a31c:	2340      	movs	r3, #64	@ 0x40
 800a31e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a320:	2300      	movs	r3, #0
 800a322:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a328:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a32a:	f107 0308 	add.w	r3, r7, #8
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7ff fe66 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fab6 	bl	800a8a8 <SDMMC_GetCmdResp7>
 800a33c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a33e:	69fb      	ldr	r3, [r7, #28]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3720      	adds	r7, #32
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a356:	2337      	movs	r3, #55	@ 0x37
 800a358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a35a:	2340      	movs	r3, #64	@ 0x40
 800a35c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a35e:	2300      	movs	r3, #0
 800a360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a366:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a368:	f107 0308 	add.w	r3, r7, #8
 800a36c:	4619      	mov	r1, r3
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7ff fe47 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a374:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a378:	2137      	movs	r1, #55	@ 0x37
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f8aa 	bl	800a4d4 <SDMMC_GetCmdResp1>
 800a380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a382:	69fb      	ldr	r3, [r7, #28]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3720      	adds	r7, #32
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b088      	sub	sp, #32
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a39c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a3a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a3a2:	2329      	movs	r3, #41	@ 0x29
 800a3a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3a6:	2340      	movs	r3, #64	@ 0x40
 800a3a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3b4:	f107 0308 	add.w	r3, r7, #8
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff fe21 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f9bd 	bl	800a740 <SDMMC_GetCmdResp3>
 800a3c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3c8:	69fb      	ldr	r3, [r7, #28]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3720      	adds	r7, #32
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b088      	sub	sp, #32
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a3de:	2302      	movs	r3, #2
 800a3e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a3e2:	23c0      	movs	r3, #192	@ 0xc0
 800a3e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3f0:	f107 0308 	add.w	r3, r7, #8
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff fe03 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f957 	bl	800a6b0 <SDMMC_GetCmdResp2>
 800a402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a404:	69fb      	ldr	r3, [r7, #28]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3720      	adds	r7, #32
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b088      	sub	sp, #32
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a41c:	2309      	movs	r3, #9
 800a41e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a420:	23c0      	movs	r3, #192	@ 0xc0
 800a422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a424:	2300      	movs	r3, #0
 800a426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a42c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a42e:	f107 0308 	add.w	r3, r7, #8
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7ff fde4 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f938 	bl	800a6b0 <SDMMC_GetCmdResp2>
 800a440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a442:	69fb      	ldr	r3, [r7, #28]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3720      	adds	r7, #32
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b088      	sub	sp, #32
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a456:	2300      	movs	r3, #0
 800a458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a45a:	2303      	movs	r3, #3
 800a45c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a45e:	2340      	movs	r3, #64	@ 0x40
 800a460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a462:	2300      	movs	r3, #0
 800a464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a46a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a46c:	f107 0308 	add.w	r3, r7, #8
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7ff fdc5 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	2103      	movs	r1, #3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f99d 	bl	800a7bc <SDMMC_GetCmdResp6>
 800a482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a484:	69fb      	ldr	r3, [r7, #28]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3720      	adds	r7, #32
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b088      	sub	sp, #32
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a49c:	230d      	movs	r3, #13
 800a49e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4a0:	2340      	movs	r3, #64	@ 0x40
 800a4a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4ae:	f107 0308 	add.w	r3, r7, #8
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff fda4 	bl	800a002 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a4ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4be:	210d      	movs	r1, #13
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f807 	bl	800a4d4 <SDMMC_GetCmdResp1>
 800a4c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4c8:	69fb      	ldr	r3, [r7, #28]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3720      	adds	r7, #32
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
	...

0800a4d4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b088      	sub	sp, #32
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a4e2:	4b70      	ldr	r3, [pc, #448]	@ (800a6a4 <SDMMC_GetCmdResp1+0x1d0>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a70      	ldr	r2, [pc, #448]	@ (800a6a8 <SDMMC_GetCmdResp1+0x1d4>)
 800a4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ec:	0a5a      	lsrs	r2, r3, #9
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	fb02 f303 	mul.w	r3, r2, r3
 800a4f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	1e5a      	subs	r2, r3, #1
 800a4fa:	61fa      	str	r2, [r7, #28]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d102      	bne.n	800a506 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a500:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a504:	e0c9      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a50a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0ef      	beq.n	800a4f6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1ea      	bne.n	800a4f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a524:	f003 0304 	and.w	r3, r3, #4
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d004      	beq.n	800a536 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2204      	movs	r2, #4
 800a530:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a532:	2304      	movs	r3, #4
 800a534:	e0b1      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d004      	beq.n	800a54c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2201      	movs	r2, #1
 800a546:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a548:	2301      	movs	r3, #1
 800a54a:	e0a6      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	22c5      	movs	r2, #197	@ 0xc5
 800a550:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f7ff fd7f 	bl	800a056 <SDIO_GetCommandResponse>
 800a558:	4603      	mov	r3, r0
 800a55a:	461a      	mov	r2, r3
 800a55c:	7afb      	ldrb	r3, [r7, #11]
 800a55e:	4293      	cmp	r3, r2
 800a560:	d001      	beq.n	800a566 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a562:	2301      	movs	r3, #1
 800a564:	e099      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a566:	2100      	movs	r1, #0
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f7ff fd81 	bl	800a070 <SDIO_GetResponse>
 800a56e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	4b4e      	ldr	r3, [pc, #312]	@ (800a6ac <SDMMC_GetCmdResp1+0x1d8>)
 800a574:	4013      	ands	r3, r2
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a57a:	2300      	movs	r3, #0
 800a57c:	e08d      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2b00      	cmp	r3, #0
 800a582:	da02      	bge.n	800a58a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a584:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a588:	e087      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a594:	2340      	movs	r3, #64	@ 0x40
 800a596:	e080      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a5a2:	2380      	movs	r3, #128	@ 0x80
 800a5a4:	e079      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a5b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a5b4:	e071      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d002      	beq.n	800a5c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a5c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5c4:	e069      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d002      	beq.n	800a5d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a5d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5d4:	e061      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a5e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a5e4:	e059      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a5f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5f4:	e051      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a600:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a604:	e049      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d002      	beq.n	800a616 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a610:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a614:	e041      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a620:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a624:	e039      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d002      	beq.n	800a636 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a630:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a634:	e031      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a640:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a644:	e029      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a650:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a654:	e021      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a660:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a664:	e019      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a670:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a674:	e011      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a680:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a684:	e009      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f003 0308 	and.w	r3, r3, #8
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a690:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a694:	e001      	b.n	800a69a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a696:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3720      	adds	r7, #32
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20000000 	.word	0x20000000
 800a6a8:	10624dd3 	.word	0x10624dd3
 800a6ac:	fdffe008 	.word	0xfdffe008

0800a6b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6b8:	4b1f      	ldr	r3, [pc, #124]	@ (800a738 <SDMMC_GetCmdResp2+0x88>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a1f      	ldr	r2, [pc, #124]	@ (800a73c <SDMMC_GetCmdResp2+0x8c>)
 800a6be:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c2:	0a5b      	lsrs	r3, r3, #9
 800a6c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6c8:	fb02 f303 	mul.w	r3, r2, r3
 800a6cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	1e5a      	subs	r2, r3, #1
 800a6d2:	60fa      	str	r2, [r7, #12]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d102      	bne.n	800a6de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a6dc:	e026      	b.n	800a72c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0ef      	beq.n	800a6ce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1ea      	bne.n	800a6ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6fc:	f003 0304 	and.w	r3, r3, #4
 800a700:	2b00      	cmp	r3, #0
 800a702:	d004      	beq.n	800a70e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2204      	movs	r2, #4
 800a708:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a70a:	2304      	movs	r3, #4
 800a70c:	e00e      	b.n	800a72c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	d004      	beq.n	800a724 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a720:	2301      	movs	r3, #1
 800a722:	e003      	b.n	800a72c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	22c5      	movs	r2, #197	@ 0xc5
 800a728:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr
 800a738:	20000000 	.word	0x20000000
 800a73c:	10624dd3 	.word	0x10624dd3

0800a740 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a748:	4b1a      	ldr	r3, [pc, #104]	@ (800a7b4 <SDMMC_GetCmdResp3+0x74>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a1a      	ldr	r2, [pc, #104]	@ (800a7b8 <SDMMC_GetCmdResp3+0x78>)
 800a74e:	fba2 2303 	umull	r2, r3, r2, r3
 800a752:	0a5b      	lsrs	r3, r3, #9
 800a754:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a758:	fb02 f303 	mul.w	r3, r2, r3
 800a75c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	1e5a      	subs	r2, r3, #1
 800a762:	60fa      	str	r2, [r7, #12]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d102      	bne.n	800a76e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a768:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a76c:	e01b      	b.n	800a7a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a772:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0ef      	beq.n	800a75e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1ea      	bne.n	800a75e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a78c:	f003 0304 	and.w	r3, r3, #4
 800a790:	2b00      	cmp	r3, #0
 800a792:	d004      	beq.n	800a79e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2204      	movs	r2, #4
 800a798:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a79a:	2304      	movs	r3, #4
 800a79c:	e003      	b.n	800a7a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	22c5      	movs	r2, #197	@ 0xc5
 800a7a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	20000000 	.word	0x20000000
 800a7b8:	10624dd3 	.word	0x10624dd3

0800a7bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	607a      	str	r2, [r7, #4]
 800a7c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7ca:	4b35      	ldr	r3, [pc, #212]	@ (800a8a0 <SDMMC_GetCmdResp6+0xe4>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a35      	ldr	r2, [pc, #212]	@ (800a8a4 <SDMMC_GetCmdResp6+0xe8>)
 800a7d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d4:	0a5b      	lsrs	r3, r3, #9
 800a7d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7da:	fb02 f303 	mul.w	r3, r2, r3
 800a7de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	1e5a      	subs	r2, r3, #1
 800a7e4:	61fa      	str	r2, [r7, #28]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d102      	bne.n	800a7f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7ee:	e052      	b.n	800a896 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0ef      	beq.n	800a7e0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1ea      	bne.n	800a7e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a80e:	f003 0304 	and.w	r3, r3, #4
 800a812:	2b00      	cmp	r3, #0
 800a814:	d004      	beq.n	800a820 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2204      	movs	r2, #4
 800a81a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a81c:	2304      	movs	r3, #4
 800a81e:	e03a      	b.n	800a896 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d004      	beq.n	800a836 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2201      	movs	r2, #1
 800a830:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a832:	2301      	movs	r3, #1
 800a834:	e02f      	b.n	800a896 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7ff fc0d 	bl	800a056 <SDIO_GetCommandResponse>
 800a83c:	4603      	mov	r3, r0
 800a83e:	461a      	mov	r2, r3
 800a840:	7afb      	ldrb	r3, [r7, #11]
 800a842:	4293      	cmp	r3, r2
 800a844:	d001      	beq.n	800a84a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a846:	2301      	movs	r3, #1
 800a848:	e025      	b.n	800a896 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	22c5      	movs	r2, #197	@ 0xc5
 800a84e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a850:	2100      	movs	r1, #0
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f7ff fc0c 	bl	800a070 <SDIO_GetResponse>
 800a858:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d106      	bne.n	800a872 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	0c1b      	lsrs	r3, r3, #16
 800a868:	b29a      	uxth	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a86e:	2300      	movs	r3, #0
 800a870:	e011      	b.n	800a896 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a87c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a880:	e009      	b.n	800a896 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d002      	beq.n	800a892 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a88c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a890:	e001      	b.n	800a896 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a892:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a896:	4618      	mov	r0, r3
 800a898:	3720      	adds	r7, #32
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	20000000 	.word	0x20000000
 800a8a4:	10624dd3 	.word	0x10624dd3

0800a8a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a8b0:	4b22      	ldr	r3, [pc, #136]	@ (800a93c <SDMMC_GetCmdResp7+0x94>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a22      	ldr	r2, [pc, #136]	@ (800a940 <SDMMC_GetCmdResp7+0x98>)
 800a8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ba:	0a5b      	lsrs	r3, r3, #9
 800a8bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8c0:	fb02 f303 	mul.w	r3, r2, r3
 800a8c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	1e5a      	subs	r2, r3, #1
 800a8ca:	60fa      	str	r2, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a8d4:	e02c      	b.n	800a930 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0ef      	beq.n	800a8c6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1ea      	bne.n	800a8c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8f4:	f003 0304 	and.w	r3, r3, #4
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d004      	beq.n	800a906 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2204      	movs	r2, #4
 800a900:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a902:	2304      	movs	r3, #4
 800a904:	e014      	b.n	800a930 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d004      	beq.n	800a91c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a918:	2301      	movs	r3, #1
 800a91a:	e009      	b.n	800a930 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2240      	movs	r2, #64	@ 0x40
 800a92c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a92e:	2300      	movs	r3, #0
  
}
 800a930:	4618      	mov	r0, r3
 800a932:	3714      	adds	r7, #20
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr
 800a93c:	20000000 	.word	0x20000000
 800a940:	10624dd3 	.word	0x10624dd3

0800a944 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a94c:	4b11      	ldr	r3, [pc, #68]	@ (800a994 <SDMMC_GetCmdError+0x50>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a11      	ldr	r2, [pc, #68]	@ (800a998 <SDMMC_GetCmdError+0x54>)
 800a952:	fba2 2303 	umull	r2, r3, r2, r3
 800a956:	0a5b      	lsrs	r3, r3, #9
 800a958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a95c:	fb02 f303 	mul.w	r3, r2, r3
 800a960:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	1e5a      	subs	r2, r3, #1
 800a966:	60fa      	str	r2, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d102      	bne.n	800a972 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a96c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a970:	e009      	b.n	800a986 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0f1      	beq.n	800a962 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	22c5      	movs	r2, #197	@ 0xc5
 800a982:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	20000000 	.word	0x20000000
 800a998:	10624dd3 	.word	0x10624dd3

0800a99c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a9a0:	4904      	ldr	r1, [pc, #16]	@ (800a9b4 <MX_FATFS_Init+0x18>)
 800a9a2:	4805      	ldr	r0, [pc, #20]	@ (800a9b8 <MX_FATFS_Init+0x1c>)
 800a9a4:	f004 fe14 	bl	800f5d0 <FATFS_LinkDriver>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	4b03      	ldr	r3, [pc, #12]	@ (800a9bc <MX_FATFS_Init+0x20>)
 800a9ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a9b0:	bf00      	nop
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	20000ee0 	.word	0x20000ee0
 800a9b8:	08016590 	.word	0x08016590
 800a9bc:	20000edc 	.word	0x20000edc

0800a9c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a9c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a9da:	f000 f888 	bl	800aaee <BSP_SD_IsDetected>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d001      	beq.n	800a9e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e005      	b.n	800a9f4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a9e8:	4804      	ldr	r0, [pc, #16]	@ (800a9fc <BSP_SD_Init+0x2c>)
 800a9ea:	f7fc ffbf 	bl	800796c <HAL_SD_Init>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a9f2:	79fb      	ldrb	r3, [r7, #7]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3708      	adds	r7, #8
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	20000cf0 	.word	0x20000cf0

0800aa00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	68f9      	ldr	r1, [r7, #12]
 800aa16:	4806      	ldr	r0, [pc, #24]	@ (800aa30 <BSP_SD_ReadBlocks_DMA+0x30>)
 800aa18:	f7fd f870 	bl	8007afc <HAL_SD_ReadBlocks_DMA>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aa26:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3718      	adds	r7, #24
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	20000cf0 	.word	0x20000cf0

0800aa34 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	68f9      	ldr	r1, [r7, #12]
 800aa4a:	4806      	ldr	r0, [pc, #24]	@ (800aa64 <BSP_SD_WriteBlocks_DMA+0x30>)
 800aa4c:	f7fd f936 	bl	8007cbc <HAL_SD_WriteBlocks_DMA>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aa5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3718      	adds	r7, #24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	20000cf0 	.word	0x20000cf0

0800aa68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800aa6c:	4805      	ldr	r0, [pc, #20]	@ (800aa84 <BSP_SD_GetCardState+0x1c>)
 800aa6e:	f7fd fd57 	bl	8008520 <HAL_SD_GetCardState>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b04      	cmp	r3, #4
 800aa76:	bf14      	ite	ne
 800aa78:	2301      	movne	r3, #1
 800aa7a:	2300      	moveq	r3, #0
 800aa7c:	b2db      	uxtb	r3, r3
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20000cf0 	.word	0x20000cf0

0800aa88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800aa90:	6879      	ldr	r1, [r7, #4]
 800aa92:	4803      	ldr	r0, [pc, #12]	@ (800aaa0 <BSP_SD_GetCardInfo+0x18>)
 800aa94:	f7fd fd18 	bl	80084c8 <HAL_SD_GetCardInfo>
}
 800aa98:	bf00      	nop
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	20000cf0 	.word	0x20000cf0

0800aaa4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800aaac:	f000 f818 	bl	800aae0 <BSP_SD_AbortCallback>
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800aac0:	f000 f9c4 	bl	800ae4c <BSP_SD_WriteCpltCallback>
}
 800aac4:	bf00      	nop
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800aad4:	f000 f9c8 	bl	800ae68 <BSP_SD_ReadCpltCallback>
}
 800aad8:	bf00      	nop
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800aae0:	b480      	push	{r7}
 800aae2:	af00      	add	r7, sp, #0

}
 800aae4:	bf00      	nop
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b082      	sub	sp, #8
 800aaf2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800aaf8:	f000 f80c 	bl	800ab14 <BSP_PlatformIsDetected>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ab02:	2300      	movs	r3, #0
 800ab04:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ab06:	79fb      	ldrb	r3, [r7, #7]
 800ab08:	b2db      	uxtb	r3, r3
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ab1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ab22:	4806      	ldr	r0, [pc, #24]	@ (800ab3c <BSP_PlatformIsDetected+0x28>)
 800ab24:	f7fa fc2a 	bl	800537c <HAL_GPIO_ReadPin>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ab32:	79fb      	ldrb	r3, [r7, #7]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	40020400 	.word	0x40020400

0800ab40 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ab48:	f004 fea0 	bl	800f88c <osKernelSysTick>
 800ab4c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ab4e:	e006      	b.n	800ab5e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab50:	f7ff ff8a 	bl	800aa68 <BSP_SD_GetCardState>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d101      	bne.n	800ab5e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e009      	b.n	800ab72 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ab5e:	f004 fe95 	bl	800f88c <osKernelSysTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d8f0      	bhi.n	800ab50 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ab6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
	...

0800ab7c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ab86:	4b0b      	ldr	r3, [pc, #44]	@ (800abb4 <SD_CheckStatus+0x38>)
 800ab88:	2201      	movs	r2, #1
 800ab8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab8c:	f7ff ff6c 	bl	800aa68 <BSP_SD_GetCardState>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d107      	bne.n	800aba6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ab96:	4b07      	ldr	r3, [pc, #28]	@ (800abb4 <SD_CheckStatus+0x38>)
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	f023 0301 	bic.w	r3, r3, #1
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	4b04      	ldr	r3, [pc, #16]	@ (800abb4 <SD_CheckStatus+0x38>)
 800aba4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800aba6:	4b03      	ldr	r3, [pc, #12]	@ (800abb4 <SD_CheckStatus+0x38>)
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	b2db      	uxtb	r3, r3
}
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	20000009 	.word	0x20000009

0800abb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800abb8:	b590      	push	{r4, r7, lr}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	4603      	mov	r3, r0
 800abc0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800abc2:	4b20      	ldr	r3, [pc, #128]	@ (800ac44 <SD_initialize+0x8c>)
 800abc4:	2201      	movs	r2, #1
 800abc6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800abc8:	f004 fe54 	bl	800f874 <osKernelRunning>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d030      	beq.n	800ac34 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800abd2:	f7ff fefd 	bl	800a9d0 <BSP_SD_Init>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d107      	bne.n	800abec <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800abdc:	79fb      	ldrb	r3, [r7, #7]
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff ffcc 	bl	800ab7c <SD_CheckStatus>
 800abe4:	4603      	mov	r3, r0
 800abe6:	461a      	mov	r2, r3
 800abe8:	4b16      	ldr	r3, [pc, #88]	@ (800ac44 <SD_initialize+0x8c>)
 800abea:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800abec:	4b15      	ldr	r3, [pc, #84]	@ (800ac44 <SD_initialize+0x8c>)
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d01e      	beq.n	800ac34 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800abf6:	4b14      	ldr	r3, [pc, #80]	@ (800ac48 <SD_initialize+0x90>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10e      	bne.n	800ac1c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800abfe:	4b13      	ldr	r3, [pc, #76]	@ (800ac4c <SD_initialize+0x94>)
 800ac00:	f107 0408 	add.w	r4, r7, #8
 800ac04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ac06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ac0a:	f107 0308 	add.w	r3, r7, #8
 800ac0e:	2100      	movs	r1, #0
 800ac10:	4618      	mov	r0, r3
 800ac12:	f004 ff5a 	bl	800faca <osMessageCreate>
 800ac16:	4603      	mov	r3, r0
 800ac18:	4a0b      	ldr	r2, [pc, #44]	@ (800ac48 <SD_initialize+0x90>)
 800ac1a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ac1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac48 <SD_initialize+0x90>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d107      	bne.n	800ac34 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ac24:	4b07      	ldr	r3, [pc, #28]	@ (800ac44 <SD_initialize+0x8c>)
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	f043 0301 	orr.w	r3, r3, #1
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	4b04      	ldr	r3, [pc, #16]	@ (800ac44 <SD_initialize+0x8c>)
 800ac32:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ac34:	4b03      	ldr	r3, [pc, #12]	@ (800ac44 <SD_initialize+0x8c>)
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	b2db      	uxtb	r3, r3
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	371c      	adds	r7, #28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd90      	pop	{r4, r7, pc}
 800ac42:	bf00      	nop
 800ac44:	20000009 	.word	0x20000009
 800ac48:	20001120 	.word	0x20001120
 800ac4c:	08016504 	.word	0x08016504

0800ac50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ac5a:	79fb      	ldrb	r3, [r7, #7]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff ff8d 	bl	800ab7c <SD_CheckStatus>
 800ac62:	4603      	mov	r3, r0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08a      	sub	sp, #40	@ 0x28
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60b9      	str	r1, [r7, #8]
 800ac74:	607a      	str	r2, [r7, #4]
 800ac76:	603b      	str	r3, [r7, #0]
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ac82:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ac86:	f7ff ff5b 	bl	800ab40 <SD_CheckStatusWithTimeout>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	da02      	bge.n	800ac96 <SD_read+0x2a>
  {
    return res;
 800ac90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac94:	e032      	b.n	800acfc <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	6879      	ldr	r1, [r7, #4]
 800ac9a:	68b8      	ldr	r0, [r7, #8]
 800ac9c:	f7ff feb0 	bl	800aa00 <BSP_SD_ReadBlocks_DMA>
 800aca0:	4603      	mov	r3, r0
 800aca2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800aca6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d124      	bne.n	800acf8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800acae:	4b15      	ldr	r3, [pc, #84]	@ (800ad04 <SD_read+0x98>)
 800acb0:	6819      	ldr	r1, [r3, #0]
 800acb2:	f107 0314 	add.w	r3, r7, #20
 800acb6:	f247 5230 	movw	r2, #30000	@ 0x7530
 800acba:	4618      	mov	r0, r3
 800acbc:	f004 ff6e 	bl	800fb9c <osMessageGet>

    if (event.status == osEventMessage)
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	2b10      	cmp	r3, #16
 800acc4:	d118      	bne.n	800acf8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d115      	bne.n	800acf8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800accc:	f004 fdde 	bl	800f88c <osKernelSysTick>
 800acd0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800acd2:	e008      	b.n	800ace6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800acd4:	f7ff fec8 	bl	800aa68 <BSP_SD_GetCardState>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d103      	bne.n	800ace6 <SD_read+0x7a>
              {
                res = RES_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ace4:	e008      	b.n	800acf8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ace6:	f004 fdd1 	bl	800f88c <osKernelSysTick>
 800acea:	4602      	mov	r2, r0
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d9ed      	bls.n	800acd4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800acf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3728      	adds	r7, #40	@ 0x28
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	20001120 	.word	0x20001120

0800ad08 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08a      	sub	sp, #40	@ 0x28
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60b9      	str	r1, [r7, #8]
 800ad10:	607a      	str	r2, [r7, #4]
 800ad12:	603b      	str	r3, [r7, #0]
 800ad14:	4603      	mov	r3, r0
 800ad16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ad1e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ad22:	f7ff ff0d 	bl	800ab40 <SD_CheckStatusWithTimeout>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	da02      	bge.n	800ad32 <SD_write+0x2a>
  {
    return res;
 800ad2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad30:	e02e      	b.n	800ad90 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	6879      	ldr	r1, [r7, #4]
 800ad36:	68b8      	ldr	r0, [r7, #8]
 800ad38:	f7ff fe7c 	bl	800aa34 <BSP_SD_WriteBlocks_DMA>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d124      	bne.n	800ad8c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ad42:	4b15      	ldr	r3, [pc, #84]	@ (800ad98 <SD_write+0x90>)
 800ad44:	6819      	ldr	r1, [r3, #0]
 800ad46:	f107 0314 	add.w	r3, r7, #20
 800ad4a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f004 ff24 	bl	800fb9c <osMessageGet>

    if (event.status == osEventMessage)
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	2b10      	cmp	r3, #16
 800ad58:	d118      	bne.n	800ad8c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d115      	bne.n	800ad8c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800ad60:	f004 fd94 	bl	800f88c <osKernelSysTick>
 800ad64:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ad66:	e008      	b.n	800ad7a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ad68:	f7ff fe7e 	bl	800aa68 <BSP_SD_GetCardState>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d103      	bne.n	800ad7a <SD_write+0x72>
          {
            res = RES_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ad78:	e008      	b.n	800ad8c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ad7a:	f004 fd87 	bl	800f88c <osKernelSysTick>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	6a3b      	ldr	r3, [r7, #32]
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d9ed      	bls.n	800ad68 <SD_write+0x60>
        res = RES_OK;
    }

#endif

  return res;
 800ad8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3728      	adds	r7, #40	@ 0x28
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	20001120 	.word	0x20001120

0800ad9c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08c      	sub	sp, #48	@ 0x30
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	4603      	mov	r3, r0
 800ada4:	603a      	str	r2, [r7, #0]
 800ada6:	71fb      	strb	r3, [r7, #7]
 800ada8:	460b      	mov	r3, r1
 800adaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800adb2:	4b25      	ldr	r3, [pc, #148]	@ (800ae48 <SD_ioctl+0xac>)
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	f003 0301 	and.w	r3, r3, #1
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d001      	beq.n	800adc4 <SD_ioctl+0x28>
 800adc0:	2303      	movs	r3, #3
 800adc2:	e03c      	b.n	800ae3e <SD_ioctl+0xa2>

  switch (cmd)
 800adc4:	79bb      	ldrb	r3, [r7, #6]
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d834      	bhi.n	800ae34 <SD_ioctl+0x98>
 800adca:	a201      	add	r2, pc, #4	@ (adr r2, 800add0 <SD_ioctl+0x34>)
 800adcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add0:	0800ade1 	.word	0x0800ade1
 800add4:	0800ade9 	.word	0x0800ade9
 800add8:	0800ae01 	.word	0x0800ae01
 800addc:	0800ae1b 	.word	0x0800ae1b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ade6:	e028      	b.n	800ae3a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ade8:	f107 030c 	add.w	r3, r7, #12
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff fe4b 	bl	800aa88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800adf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800adfe:	e01c      	b.n	800ae3a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ae00:	f107 030c 	add.w	r3, r7, #12
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7ff fe3f 	bl	800aa88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ae0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ae18:	e00f      	b.n	800ae3a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ae1a:	f107 030c 	add.w	r3, r7, #12
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7ff fe32 	bl	800aa88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ae24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae26:	0a5a      	lsrs	r2, r3, #9
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ae32:	e002      	b.n	800ae3a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ae34:	2304      	movs	r3, #4
 800ae36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800ae3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3730      	adds	r7, #48	@ 0x30
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	20000009 	.word	0x20000009

0800ae4c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800ae50:	4b04      	ldr	r3, [pc, #16]	@ (800ae64 <BSP_SD_WriteCpltCallback+0x18>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2200      	movs	r2, #0
 800ae56:	2102      	movs	r1, #2
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f004 fe5f 	bl	800fb1c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800ae5e:	bf00      	nop
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20001120 	.word	0x20001120

0800ae68 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ae6c:	4b04      	ldr	r3, [pc, #16]	@ (800ae80 <BSP_SD_ReadCpltCallback+0x18>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2200      	movs	r2, #0
 800ae72:	2101      	movs	r1, #1
 800ae74:	4618      	mov	r0, r3
 800ae76:	f004 fe51 	bl	800fb1c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800ae7a:	bf00      	nop
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	20001120 	.word	0x20001120

0800ae84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ae8e:	79fb      	ldrb	r3, [r7, #7]
 800ae90:	4a08      	ldr	r2, [pc, #32]	@ (800aeb4 <disk_status+0x30>)
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	79fa      	ldrb	r2, [r7, #7]
 800ae9c:	4905      	ldr	r1, [pc, #20]	@ (800aeb4 <disk_status+0x30>)
 800ae9e:	440a      	add	r2, r1
 800aea0:	7a12      	ldrb	r2, [r2, #8]
 800aea2:	4610      	mov	r0, r2
 800aea4:	4798      	blx	r3
 800aea6:	4603      	mov	r3, r0
 800aea8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	2000114c 	.word	0x2000114c

0800aeb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4603      	mov	r3, r0
 800aec0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800aec6:	79fb      	ldrb	r3, [r7, #7]
 800aec8:	4a0e      	ldr	r2, [pc, #56]	@ (800af04 <disk_initialize+0x4c>)
 800aeca:	5cd3      	ldrb	r3, [r2, r3]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d114      	bne.n	800aefa <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	4a0c      	ldr	r2, [pc, #48]	@ (800af04 <disk_initialize+0x4c>)
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	79fa      	ldrb	r2, [r7, #7]
 800aede:	4909      	ldr	r1, [pc, #36]	@ (800af04 <disk_initialize+0x4c>)
 800aee0:	440a      	add	r2, r1
 800aee2:	7a12      	ldrb	r2, [r2, #8]
 800aee4:	4610      	mov	r0, r2
 800aee6:	4798      	blx	r3
 800aee8:	4603      	mov	r3, r0
 800aeea:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d103      	bne.n	800aefa <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800aef2:	79fb      	ldrb	r3, [r7, #7]
 800aef4:	4a03      	ldr	r2, [pc, #12]	@ (800af04 <disk_initialize+0x4c>)
 800aef6:	2101      	movs	r1, #1
 800aef8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800aefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	2000114c 	.word	0x2000114c

0800af08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800af08:	b590      	push	{r4, r7, lr}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	607a      	str	r2, [r7, #4]
 800af12:	603b      	str	r3, [r7, #0]
 800af14:	4603      	mov	r3, r0
 800af16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800af18:	7bfb      	ldrb	r3, [r7, #15]
 800af1a:	4a0a      	ldr	r2, [pc, #40]	@ (800af44 <disk_read+0x3c>)
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	689c      	ldr	r4, [r3, #8]
 800af24:	7bfb      	ldrb	r3, [r7, #15]
 800af26:	4a07      	ldr	r2, [pc, #28]	@ (800af44 <disk_read+0x3c>)
 800af28:	4413      	add	r3, r2
 800af2a:	7a18      	ldrb	r0, [r3, #8]
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	68b9      	ldr	r1, [r7, #8]
 800af32:	47a0      	blx	r4
 800af34:	4603      	mov	r3, r0
 800af36:	75fb      	strb	r3, [r7, #23]
  return res;
 800af38:	7dfb      	ldrb	r3, [r7, #23]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	371c      	adds	r7, #28
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd90      	pop	{r4, r7, pc}
 800af42:	bf00      	nop
 800af44:	2000114c 	.word	0x2000114c

0800af48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800af48:	b590      	push	{r4, r7, lr}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60b9      	str	r1, [r7, #8]
 800af50:	607a      	str	r2, [r7, #4]
 800af52:	603b      	str	r3, [r7, #0]
 800af54:	4603      	mov	r3, r0
 800af56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	4a0a      	ldr	r2, [pc, #40]	@ (800af84 <disk_write+0x3c>)
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	4413      	add	r3, r2
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	68dc      	ldr	r4, [r3, #12]
 800af64:	7bfb      	ldrb	r3, [r7, #15]
 800af66:	4a07      	ldr	r2, [pc, #28]	@ (800af84 <disk_write+0x3c>)
 800af68:	4413      	add	r3, r2
 800af6a:	7a18      	ldrb	r0, [r3, #8]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	68b9      	ldr	r1, [r7, #8]
 800af72:	47a0      	blx	r4
 800af74:	4603      	mov	r3, r0
 800af76:	75fb      	strb	r3, [r7, #23]
  return res;
 800af78:	7dfb      	ldrb	r3, [r7, #23]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	371c      	adds	r7, #28
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd90      	pop	{r4, r7, pc}
 800af82:	bf00      	nop
 800af84:	2000114c 	.word	0x2000114c

0800af88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	4603      	mov	r3, r0
 800af90:	603a      	str	r2, [r7, #0]
 800af92:	71fb      	strb	r3, [r7, #7]
 800af94:	460b      	mov	r3, r1
 800af96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800af98:	79fb      	ldrb	r3, [r7, #7]
 800af9a:	4a09      	ldr	r2, [pc, #36]	@ (800afc0 <disk_ioctl+0x38>)
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	79fa      	ldrb	r2, [r7, #7]
 800afa6:	4906      	ldr	r1, [pc, #24]	@ (800afc0 <disk_ioctl+0x38>)
 800afa8:	440a      	add	r2, r1
 800afaa:	7a10      	ldrb	r0, [r2, #8]
 800afac:	79b9      	ldrb	r1, [r7, #6]
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	4798      	blx	r3
 800afb2:	4603      	mov	r3, r0
 800afb4:	73fb      	strb	r3, [r7, #15]
  return res;
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	2000114c 	.word	0x2000114c

0800afc4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3301      	adds	r3, #1
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800afd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800afd8:	021b      	lsls	r3, r3, #8
 800afda:	b21a      	sxth	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	b21b      	sxth	r3, r3
 800afe2:	4313      	orrs	r3, r2
 800afe4:	b21b      	sxth	r3, r3
 800afe6:	81fb      	strh	r3, [r7, #14]
	return rv;
 800afe8:	89fb      	ldrh	r3, [r7, #14]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr

0800aff6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aff6:	b480      	push	{r7}
 800aff8:	b085      	sub	sp, #20
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3303      	adds	r3, #3
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	021b      	lsls	r3, r3, #8
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	3202      	adds	r2, #2
 800b00e:	7812      	ldrb	r2, [r2, #0]
 800b010:	4313      	orrs	r3, r2
 800b012:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	021b      	lsls	r3, r3, #8
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	3201      	adds	r2, #1
 800b01c:	7812      	ldrb	r2, [r2, #0]
 800b01e:	4313      	orrs	r3, r2
 800b020:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	021b      	lsls	r3, r3, #8
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	7812      	ldrb	r2, [r2, #0]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	60fb      	str	r3, [r7, #12]
	return rv;
 800b02e:	68fb      	ldr	r3, [r7, #12]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800b03c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b040:	b09d      	sub	sp, #116	@ 0x74
 800b042:	af00      	add	r7, sp, #0
 800b044:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800b046:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b048:	3307      	adds	r3, #7
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2200      	movs	r2, #0
 800b050:	469a      	mov	sl, r3
 800b052:	4693      	mov	fp, r2
 800b054:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800b058:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b05c:	f04f 0000 	mov.w	r0, #0
 800b060:	f04f 0100 	mov.w	r1, #0
 800b064:	0219      	lsls	r1, r3, #8
 800b066:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b06a:	0210      	lsls	r0, r2, #8
 800b06c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b06e:	3306      	adds	r3, #6
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	2200      	movs	r2, #0
 800b076:	461c      	mov	r4, r3
 800b078:	4615      	mov	r5, r2
 800b07a:	ea40 0804 	orr.w	r8, r0, r4
 800b07e:	ea41 0905 	orr.w	r9, r1, r5
 800b082:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800b086:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b08a:	f04f 0000 	mov.w	r0, #0
 800b08e:	f04f 0100 	mov.w	r1, #0
 800b092:	0219      	lsls	r1, r3, #8
 800b094:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b098:	0210      	lsls	r0, r2, #8
 800b09a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b09c:	3305      	adds	r3, #5
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800b0a8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800b0ac:	4623      	mov	r3, r4
 800b0ae:	4303      	orrs	r3, r0
 800b0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b0b2:	462b      	mov	r3, r5
 800b0b4:	430b      	orrs	r3, r1
 800b0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0b8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800b0bc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800b0c0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b0c4:	f04f 0000 	mov.w	r0, #0
 800b0c8:	f04f 0100 	mov.w	r1, #0
 800b0cc:	0219      	lsls	r1, r3, #8
 800b0ce:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b0d2:	0210      	lsls	r0, r2, #8
 800b0d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2200      	movs	r2, #0
 800b0de:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0e0:	657a      	str	r2, [r7, #84]	@ 0x54
 800b0e2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800b0e6:	4623      	mov	r3, r4
 800b0e8:	4303      	orrs	r3, r0
 800b0ea:	623b      	str	r3, [r7, #32]
 800b0ec:	462b      	mov	r3, r5
 800b0ee:	430b      	orrs	r3, r1
 800b0f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0f2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b0f6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800b0fa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b0fe:	f04f 0000 	mov.w	r0, #0
 800b102:	f04f 0100 	mov.w	r1, #0
 800b106:	0219      	lsls	r1, r3, #8
 800b108:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b10c:	0210      	lsls	r0, r2, #8
 800b10e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b110:	3303      	adds	r3, #3
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2200      	movs	r2, #0
 800b118:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b11a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b11c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800b120:	4623      	mov	r3, r4
 800b122:	4303      	orrs	r3, r0
 800b124:	61bb      	str	r3, [r7, #24]
 800b126:	462b      	mov	r3, r5
 800b128:	430b      	orrs	r3, r1
 800b12a:	61fb      	str	r3, [r7, #28]
 800b12c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b130:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800b134:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b138:	f04f 0000 	mov.w	r0, #0
 800b13c:	f04f 0100 	mov.w	r1, #0
 800b140:	0219      	lsls	r1, r3, #8
 800b142:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b146:	0210      	lsls	r0, r2, #8
 800b148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b14a:	3302      	adds	r3, #2
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	2200      	movs	r2, #0
 800b152:	643b      	str	r3, [r7, #64]	@ 0x40
 800b154:	647a      	str	r2, [r7, #68]	@ 0x44
 800b156:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800b15a:	4623      	mov	r3, r4
 800b15c:	4303      	orrs	r3, r0
 800b15e:	613b      	str	r3, [r7, #16]
 800b160:	462b      	mov	r3, r5
 800b162:	430b      	orrs	r3, r1
 800b164:	617b      	str	r3, [r7, #20]
 800b166:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b16a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800b16e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b172:	f04f 0200 	mov.w	r2, #0
 800b176:	f04f 0300 	mov.w	r3, #0
 800b17a:	020b      	lsls	r3, r1, #8
 800b17c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b180:	0202      	lsls	r2, r0, #8
 800b182:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b184:	3101      	adds	r1, #1
 800b186:	7809      	ldrb	r1, [r1, #0]
 800b188:	b2c9      	uxtb	r1, r1
 800b18a:	2000      	movs	r0, #0
 800b18c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b18e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b190:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800b194:	4621      	mov	r1, r4
 800b196:	4311      	orrs	r1, r2
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	4629      	mov	r1, r5
 800b19c:	4319      	orrs	r1, r3
 800b19e:	60f9      	str	r1, [r7, #12]
 800b1a0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b1a4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800b1a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b1ac:	f04f 0200 	mov.w	r2, #0
 800b1b0:	f04f 0300 	mov.w	r3, #0
 800b1b4:	020b      	lsls	r3, r1, #8
 800b1b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1ba:	0202      	lsls	r2, r0, #8
 800b1bc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b1be:	7809      	ldrb	r1, [r1, #0]
 800b1c0:	b2c9      	uxtb	r1, r1
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	6339      	str	r1, [r7, #48]	@ 0x30
 800b1c6:	6378      	str	r0, [r7, #52]	@ 0x34
 800b1c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	4311      	orrs	r1, r2
 800b1d0:	6039      	str	r1, [r7, #0]
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	4319      	orrs	r1, r3
 800b1d6:	6079      	str	r1, [r7, #4]
 800b1d8:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b1dc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800b1e0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800b1e4:	4610      	mov	r0, r2
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	3774      	adds	r7, #116	@ 0x74
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b1f0:	4770      	bx	lr

0800b1f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b083      	sub	sp, #12
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	1c5a      	adds	r2, r3, #1
 800b202:	607a      	str	r2, [r7, #4]
 800b204:	887a      	ldrh	r2, [r7, #2]
 800b206:	b2d2      	uxtb	r2, r2
 800b208:	701a      	strb	r2, [r3, #0]
 800b20a:	887b      	ldrh	r3, [r7, #2]
 800b20c:	0a1b      	lsrs	r3, r3, #8
 800b20e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	1c5a      	adds	r2, r3, #1
 800b214:	607a      	str	r2, [r7, #4]
 800b216:	887a      	ldrh	r2, [r7, #2]
 800b218:	b2d2      	uxtb	r2, r2
 800b21a:	701a      	strb	r2, [r3, #0]
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	607a      	str	r2, [r7, #4]
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	b2d2      	uxtb	r2, r2
 800b23c:	701a      	strb	r2, [r3, #0]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	0a1b      	lsrs	r3, r3, #8
 800b242:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	1c5a      	adds	r2, r3, #1
 800b248:	607a      	str	r2, [r7, #4]
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	b2d2      	uxtb	r2, r2
 800b24e:	701a      	strb	r2, [r3, #0]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	0a1b      	lsrs	r3, r3, #8
 800b254:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	b2d2      	uxtb	r2, r2
 800b260:	701a      	strb	r2, [r3, #0]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	0a1b      	lsrs	r3, r3, #8
 800b266:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	607a      	str	r2, [r7, #4]
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	b2d2      	uxtb	r2, r2
 800b272:	701a      	strb	r2, [r3, #0]
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	60fa      	str	r2, [r7, #12]
 800b292:	783a      	ldrb	r2, [r7, #0]
 800b294:	701a      	strb	r2, [r3, #0]
 800b296:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b29a:	f04f 0200 	mov.w	r2, #0
 800b29e:	f04f 0300 	mov.w	r3, #0
 800b2a2:	0a02      	lsrs	r2, r0, #8
 800b2a4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b2a8:	0a0b      	lsrs	r3, r1, #8
 800b2aa:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	1c5a      	adds	r2, r3, #1
 800b2b2:	60fa      	str	r2, [r7, #12]
 800b2b4:	783a      	ldrb	r2, [r7, #0]
 800b2b6:	701a      	strb	r2, [r3, #0]
 800b2b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2bc:	f04f 0200 	mov.w	r2, #0
 800b2c0:	f04f 0300 	mov.w	r3, #0
 800b2c4:	0a02      	lsrs	r2, r0, #8
 800b2c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b2ca:	0a0b      	lsrs	r3, r1, #8
 800b2cc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	1c5a      	adds	r2, r3, #1
 800b2d4:	60fa      	str	r2, [r7, #12]
 800b2d6:	783a      	ldrb	r2, [r7, #0]
 800b2d8:	701a      	strb	r2, [r3, #0]
 800b2da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2de:	f04f 0200 	mov.w	r2, #0
 800b2e2:	f04f 0300 	mov.w	r3, #0
 800b2e6:	0a02      	lsrs	r2, r0, #8
 800b2e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b2ec:	0a0b      	lsrs	r3, r1, #8
 800b2ee:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	60fa      	str	r2, [r7, #12]
 800b2f8:	783a      	ldrb	r2, [r7, #0]
 800b2fa:	701a      	strb	r2, [r3, #0]
 800b2fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b300:	f04f 0200 	mov.w	r2, #0
 800b304:	f04f 0300 	mov.w	r3, #0
 800b308:	0a02      	lsrs	r2, r0, #8
 800b30a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b30e:	0a0b      	lsrs	r3, r1, #8
 800b310:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	1c5a      	adds	r2, r3, #1
 800b318:	60fa      	str	r2, [r7, #12]
 800b31a:	783a      	ldrb	r2, [r7, #0]
 800b31c:	701a      	strb	r2, [r3, #0]
 800b31e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b322:	f04f 0200 	mov.w	r2, #0
 800b326:	f04f 0300 	mov.w	r3, #0
 800b32a:	0a02      	lsrs	r2, r0, #8
 800b32c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b330:	0a0b      	lsrs	r3, r1, #8
 800b332:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	1c5a      	adds	r2, r3, #1
 800b33a:	60fa      	str	r2, [r7, #12]
 800b33c:	783a      	ldrb	r2, [r7, #0]
 800b33e:	701a      	strb	r2, [r3, #0]
 800b340:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b344:	f04f 0200 	mov.w	r2, #0
 800b348:	f04f 0300 	mov.w	r3, #0
 800b34c:	0a02      	lsrs	r2, r0, #8
 800b34e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b352:	0a0b      	lsrs	r3, r1, #8
 800b354:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	60fa      	str	r2, [r7, #12]
 800b35e:	783a      	ldrb	r2, [r7, #0]
 800b360:	701a      	strb	r2, [r3, #0]
 800b362:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b366:	f04f 0200 	mov.w	r2, #0
 800b36a:	f04f 0300 	mov.w	r3, #0
 800b36e:	0a02      	lsrs	r2, r0, #8
 800b370:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b374:	0a0b      	lsrs	r3, r1, #8
 800b376:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	1c5a      	adds	r2, r3, #1
 800b37e:	60fa      	str	r2, [r7, #12]
 800b380:	783a      	ldrb	r2, [r7, #0]
 800b382:	701a      	strb	r2, [r3, #0]
}
 800b384:	bf00      	nop
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b390:	b480      	push	{r7}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00d      	beq.n	800b3c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	1c53      	adds	r3, r2, #1
 800b3ae:	613b      	str	r3, [r7, #16]
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	1c59      	adds	r1, r3, #1
 800b3b4:	6179      	str	r1, [r7, #20]
 800b3b6:	7812      	ldrb	r2, [r2, #0]
 800b3b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	607b      	str	r3, [r7, #4]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1f1      	bne.n	800b3aa <mem_cpy+0x1a>
	}
}
 800b3c6:	bf00      	nop
 800b3c8:	371c      	adds	r7, #28
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b3d2:	b480      	push	{r7}
 800b3d4:	b087      	sub	sp, #28
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	60f8      	str	r0, [r7, #12]
 800b3da:	60b9      	str	r1, [r7, #8]
 800b3dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	1c5a      	adds	r2, r3, #1
 800b3e6:	617a      	str	r2, [r7, #20]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	b2d2      	uxtb	r2, r2
 800b3ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	607b      	str	r3, [r7, #4]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1f3      	bne.n	800b3e2 <mem_set+0x10>
}
 800b3fa:	bf00      	nop
 800b3fc:	bf00      	nop
 800b3fe:	371c      	adds	r7, #28
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b408:	b480      	push	{r7}
 800b40a:	b089      	sub	sp, #36	@ 0x24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	61fb      	str	r3, [r7, #28]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	1c5a      	adds	r2, r3, #1
 800b424:	61fa      	str	r2, [r7, #28]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	4619      	mov	r1, r3
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	61ba      	str	r2, [r7, #24]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	1acb      	subs	r3, r1, r3
 800b434:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	3b01      	subs	r3, #1
 800b43a:	607b      	str	r3, [r7, #4]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d002      	beq.n	800b448 <mem_cmp+0x40>
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d0eb      	beq.n	800b420 <mem_cmp+0x18>

	return r;
 800b448:	697b      	ldr	r3, [r7, #20]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3724      	adds	r7, #36	@ 0x24
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr

0800b456 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b456:	b480      	push	{r7}
 800b458:	b083      	sub	sp, #12
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b460:	e002      	b.n	800b468 <chk_chr+0x12>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3301      	adds	r3, #1
 800b466:	607b      	str	r3, [r7, #4]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d005      	beq.n	800b47c <chk_chr+0x26>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	461a      	mov	r2, r3
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	4293      	cmp	r3, r2
 800b47a:	d1f2      	bne.n	800b462 <chk_chr+0xc>
	return *str;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	781b      	ldrb	r3, [r3, #0]
}
 800b480:	4618      	mov	r0, r3
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d009      	beq.n	800b4ae <lock_fs+0x22>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	695b      	ldr	r3, [r3, #20]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f004 f997 	bl	800f7d2 <ff_req_grant>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d001      	beq.n	800b4ae <lock_fs+0x22>
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e000      	b.n	800b4b0 <lock_fs+0x24>
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00d      	beq.n	800b4e6 <unlock_fs+0x2e>
 800b4ca:	78fb      	ldrb	r3, [r7, #3]
 800b4cc:	2b0c      	cmp	r3, #12
 800b4ce:	d00a      	beq.n	800b4e6 <unlock_fs+0x2e>
 800b4d0:	78fb      	ldrb	r3, [r7, #3]
 800b4d2:	2b0b      	cmp	r3, #11
 800b4d4:	d007      	beq.n	800b4e6 <unlock_fs+0x2e>
 800b4d6:	78fb      	ldrb	r3, [r7, #3]
 800b4d8:	2b0f      	cmp	r3, #15
 800b4da:	d004      	beq.n	800b4e6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f004 f98b 	bl	800f7fc <ff_rel_grant>
	}
}
 800b4e6:	bf00      	nop
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
	...

0800b4f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	60bb      	str	r3, [r7, #8]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	60fb      	str	r3, [r7, #12]
 800b502:	e029      	b.n	800b558 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b504:	4a27      	ldr	r2, [pc, #156]	@ (800b5a4 <chk_lock+0xb4>)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	011b      	lsls	r3, r3, #4
 800b50a:	4413      	add	r3, r2
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d01d      	beq.n	800b54e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b512:	4a24      	ldr	r2, [pc, #144]	@ (800b5a4 <chk_lock+0xb4>)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	011b      	lsls	r3, r3, #4
 800b518:	4413      	add	r3, r2
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	429a      	cmp	r2, r3
 800b522:	d116      	bne.n	800b552 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b524:	4a1f      	ldr	r2, [pc, #124]	@ (800b5a4 <chk_lock+0xb4>)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	011b      	lsls	r3, r3, #4
 800b52a:	4413      	add	r3, r2
 800b52c:	3304      	adds	r3, #4
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b534:	429a      	cmp	r2, r3
 800b536:	d10c      	bne.n	800b552 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b538:	4a1a      	ldr	r2, [pc, #104]	@ (800b5a4 <chk_lock+0xb4>)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	011b      	lsls	r3, r3, #4
 800b53e:	4413      	add	r3, r2
 800b540:	3308      	adds	r3, #8
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800b548:	429a      	cmp	r2, r3
 800b54a:	d102      	bne.n	800b552 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b54c:	e007      	b.n	800b55e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b54e:	2301      	movs	r3, #1
 800b550:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	3301      	adds	r3, #1
 800b556:	60fb      	str	r3, [r7, #12]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d9d2      	bls.n	800b504 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b02      	cmp	r3, #2
 800b562:	d109      	bne.n	800b578 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d102      	bne.n	800b570 <chk_lock+0x80>
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d101      	bne.n	800b574 <chk_lock+0x84>
 800b570:	2300      	movs	r3, #0
 800b572:	e010      	b.n	800b596 <chk_lock+0xa6>
 800b574:	2312      	movs	r3, #18
 800b576:	e00e      	b.n	800b596 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d108      	bne.n	800b590 <chk_lock+0xa0>
 800b57e:	4a09      	ldr	r2, [pc, #36]	@ (800b5a4 <chk_lock+0xb4>)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	011b      	lsls	r3, r3, #4
 800b584:	4413      	add	r3, r2
 800b586:	330c      	adds	r3, #12
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b58e:	d101      	bne.n	800b594 <chk_lock+0xa4>
 800b590:	2310      	movs	r3, #16
 800b592:	e000      	b.n	800b596 <chk_lock+0xa6>
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	2000112c 	.word	0x2000112c

0800b5a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	607b      	str	r3, [r7, #4]
 800b5b2:	e002      	b.n	800b5ba <enq_lock+0x12>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	607b      	str	r3, [r7, #4]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d806      	bhi.n	800b5ce <enq_lock+0x26>
 800b5c0:	4a09      	ldr	r2, [pc, #36]	@ (800b5e8 <enq_lock+0x40>)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	011b      	lsls	r3, r3, #4
 800b5c6:	4413      	add	r3, r2
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1f2      	bne.n	800b5b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	bf14      	ite	ne
 800b5d4:	2301      	movne	r3, #1
 800b5d6:	2300      	moveq	r3, #0
 800b5d8:	b2db      	uxtb	r3, r3
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	2000112c 	.word	0x2000112c

0800b5ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	e01f      	b.n	800b63c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b5fc:	4a41      	ldr	r2, [pc, #260]	@ (800b704 <inc_lock+0x118>)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	011b      	lsls	r3, r3, #4
 800b602:	4413      	add	r3, r2
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d113      	bne.n	800b636 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b60e:	4a3d      	ldr	r2, [pc, #244]	@ (800b704 <inc_lock+0x118>)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	011b      	lsls	r3, r3, #4
 800b614:	4413      	add	r3, r2
 800b616:	3304      	adds	r3, #4
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b61e:	429a      	cmp	r2, r3
 800b620:	d109      	bne.n	800b636 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b622:	4a38      	ldr	r2, [pc, #224]	@ (800b704 <inc_lock+0x118>)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	011b      	lsls	r3, r3, #4
 800b628:	4413      	add	r3, r2
 800b62a:	3308      	adds	r3, #8
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 800b632:	429a      	cmp	r2, r3
 800b634:	d006      	beq.n	800b644 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	3301      	adds	r3, #1
 800b63a:	60fb      	str	r3, [r7, #12]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d9dc      	bls.n	800b5fc <inc_lock+0x10>
 800b642:	e000      	b.n	800b646 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b644:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b02      	cmp	r3, #2
 800b64a:	d132      	bne.n	800b6b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b64c:	2300      	movs	r3, #0
 800b64e:	60fb      	str	r3, [r7, #12]
 800b650:	e002      	b.n	800b658 <inc_lock+0x6c>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	3301      	adds	r3, #1
 800b656:	60fb      	str	r3, [r7, #12]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d806      	bhi.n	800b66c <inc_lock+0x80>
 800b65e:	4a29      	ldr	r2, [pc, #164]	@ (800b704 <inc_lock+0x118>)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	011b      	lsls	r3, r3, #4
 800b664:	4413      	add	r3, r2
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1f2      	bne.n	800b652 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d101      	bne.n	800b676 <inc_lock+0x8a>
 800b672:	2300      	movs	r3, #0
 800b674:	e040      	b.n	800b6f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	4922      	ldr	r1, [pc, #136]	@ (800b704 <inc_lock+0x118>)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	011b      	lsls	r3, r3, #4
 800b680:	440b      	add	r3, r1
 800b682:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	689a      	ldr	r2, [r3, #8]
 800b688:	491e      	ldr	r1, [pc, #120]	@ (800b704 <inc_lock+0x118>)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	011b      	lsls	r3, r3, #4
 800b68e:	440b      	add	r3, r1
 800b690:	3304      	adds	r3, #4
 800b692:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b698:	491a      	ldr	r1, [pc, #104]	@ (800b704 <inc_lock+0x118>)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	011b      	lsls	r3, r3, #4
 800b69e:	440b      	add	r3, r1
 800b6a0:	3308      	adds	r3, #8
 800b6a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b6a4:	4a17      	ldr	r2, [pc, #92]	@ (800b704 <inc_lock+0x118>)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	011b      	lsls	r3, r3, #4
 800b6aa:	4413      	add	r3, r2
 800b6ac:	330c      	adds	r3, #12
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d009      	beq.n	800b6cc <inc_lock+0xe0>
 800b6b8:	4a12      	ldr	r2, [pc, #72]	@ (800b704 <inc_lock+0x118>)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	011b      	lsls	r3, r3, #4
 800b6be:	4413      	add	r3, r2
 800b6c0:	330c      	adds	r3, #12
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <inc_lock+0xe0>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	e015      	b.n	800b6f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d108      	bne.n	800b6e4 <inc_lock+0xf8>
 800b6d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b704 <inc_lock+0x118>)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	4413      	add	r3, r2
 800b6da:	330c      	adds	r3, #12
 800b6dc:	881b      	ldrh	r3, [r3, #0]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	e001      	b.n	800b6e8 <inc_lock+0xfc>
 800b6e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b6e8:	4906      	ldr	r1, [pc, #24]	@ (800b704 <inc_lock+0x118>)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	011b      	lsls	r3, r3, #4
 800b6ee:	440b      	add	r3, r1
 800b6f0:	330c      	adds	r3, #12
 800b6f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	3301      	adds	r3, #1
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	2000112c 	.word	0x2000112c

0800b708 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	3b01      	subs	r3, #1
 800b714:	607b      	str	r3, [r7, #4]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d825      	bhi.n	800b768 <dec_lock+0x60>
		n = Files[i].ctr;
 800b71c:	4a17      	ldr	r2, [pc, #92]	@ (800b77c <dec_lock+0x74>)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	011b      	lsls	r3, r3, #4
 800b722:	4413      	add	r3, r2
 800b724:	330c      	adds	r3, #12
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b72a:	89fb      	ldrh	r3, [r7, #14]
 800b72c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b730:	d101      	bne.n	800b736 <dec_lock+0x2e>
 800b732:	2300      	movs	r3, #0
 800b734:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b736:	89fb      	ldrh	r3, [r7, #14]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <dec_lock+0x3a>
 800b73c:	89fb      	ldrh	r3, [r7, #14]
 800b73e:	3b01      	subs	r3, #1
 800b740:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b742:	4a0e      	ldr	r2, [pc, #56]	@ (800b77c <dec_lock+0x74>)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	011b      	lsls	r3, r3, #4
 800b748:	4413      	add	r3, r2
 800b74a:	330c      	adds	r3, #12
 800b74c:	89fa      	ldrh	r2, [r7, #14]
 800b74e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b750:	89fb      	ldrh	r3, [r7, #14]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d105      	bne.n	800b762 <dec_lock+0x5a>
 800b756:	4a09      	ldr	r2, [pc, #36]	@ (800b77c <dec_lock+0x74>)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	011b      	lsls	r3, r3, #4
 800b75c:	4413      	add	r3, r2
 800b75e:	2200      	movs	r2, #0
 800b760:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b762:	2300      	movs	r3, #0
 800b764:	737b      	strb	r3, [r7, #13]
 800b766:	e001      	b.n	800b76c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b768:	2302      	movs	r3, #2
 800b76a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b76c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	2000112c 	.word	0x2000112c

0800b780 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b788:	2300      	movs	r3, #0
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	e010      	b.n	800b7b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b78e:	4a0d      	ldr	r2, [pc, #52]	@ (800b7c4 <clear_lock+0x44>)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	011b      	lsls	r3, r3, #4
 800b794:	4413      	add	r3, r2
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d105      	bne.n	800b7aa <clear_lock+0x2a>
 800b79e:	4a09      	ldr	r2, [pc, #36]	@ (800b7c4 <clear_lock+0x44>)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	011b      	lsls	r3, r3, #4
 800b7a4:	4413      	add	r3, r2
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	60fb      	str	r3, [r7, #12]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d9eb      	bls.n	800b78e <clear_lock+0xe>
	}
}
 800b7b6:	bf00      	nop
 800b7b8:	bf00      	nop
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	2000112c 	.word	0x2000112c

0800b7c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	78db      	ldrb	r3, [r3, #3]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d034      	beq.n	800b846 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	7858      	ldrb	r0, [r3, #1]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	f7ff fbaa 	bl	800af48 <disk_write>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d002      	beq.n	800b800 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	73fb      	strb	r3, [r7, #15]
 800b7fe:	e022      	b.n	800b846 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	1ad2      	subs	r2, r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b812:	429a      	cmp	r2, r3
 800b814:	d217      	bcs.n	800b846 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	789b      	ldrb	r3, [r3, #2]
 800b81a:	613b      	str	r3, [r7, #16]
 800b81c:	e010      	b.n	800b840 <sync_window+0x78>
					wsect += fs->fsize;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b822:	697a      	ldr	r2, [r7, #20]
 800b824:	4413      	add	r3, r2
 800b826:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	7858      	ldrb	r0, [r3, #1]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b832:	2301      	movs	r3, #1
 800b834:	697a      	ldr	r2, [r7, #20]
 800b836:	f7ff fb87 	bl	800af48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	613b      	str	r3, [r7, #16]
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d8eb      	bhi.n	800b81e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b846:	7bfb      	ldrb	r3, [r7, #15]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3718      	adds	r7, #24
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	429a      	cmp	r2, r3
 800b866:	d01b      	beq.n	800b8a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7ff ffad 	bl	800b7c8 <sync_window>
 800b86e:	4603      	mov	r3, r0
 800b870:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b872:	7bfb      	ldrb	r3, [r7, #15]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d113      	bne.n	800b8a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	7858      	ldrb	r0, [r3, #1]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b882:	2301      	movs	r3, #1
 800b884:	683a      	ldr	r2, [r7, #0]
 800b886:	f7ff fb3f 	bl	800af08 <disk_read>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d004      	beq.n	800b89a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b890:	f04f 33ff 	mov.w	r3, #4294967295
 800b894:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b896:	2301      	movs	r3, #1
 800b898:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800b8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
	...

0800b8ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7ff ff87 	bl	800b7c8 <sync_window>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d158      	bne.n	800b976 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b03      	cmp	r3, #3
 800b8ca:	d148      	bne.n	800b95e <sync_fs+0xb2>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	791b      	ldrb	r3, [r3, #4]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d144      	bne.n	800b95e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	333c      	adds	r3, #60	@ 0x3c
 800b8d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8dc:	2100      	movs	r1, #0
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7ff fd77 	bl	800b3d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	333c      	adds	r3, #60	@ 0x3c
 800b8e8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b8ec:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff fc7e 	bl	800b1f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	333c      	adds	r3, #60	@ 0x3c
 800b8fa:	4921      	ldr	r1, [pc, #132]	@ (800b980 <sync_fs+0xd4>)
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7ff fc93 	bl	800b228 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	333c      	adds	r3, #60	@ 0x3c
 800b906:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b90a:	491e      	ldr	r1, [pc, #120]	@ (800b984 <sync_fs+0xd8>)
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff fc8b 	bl	800b228 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	333c      	adds	r3, #60	@ 0x3c
 800b916:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	69db      	ldr	r3, [r3, #28]
 800b91e:	4619      	mov	r1, r3
 800b920:	4610      	mov	r0, r2
 800b922:	f7ff fc81 	bl	800b228 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	333c      	adds	r3, #60	@ 0x3c
 800b92a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	699b      	ldr	r3, [r3, #24]
 800b932:	4619      	mov	r1, r3
 800b934:	4610      	mov	r0, r2
 800b936:	f7ff fc77 	bl	800b228 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b93e:	1c5a      	adds	r2, r3, #1
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	7858      	ldrb	r0, [r3, #1]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b952:	2301      	movs	r3, #1
 800b954:	f7ff faf8 	bl	800af48 <disk_write>
			fs->fsi_flag = 0;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	785b      	ldrb	r3, [r3, #1]
 800b962:	2200      	movs	r2, #0
 800b964:	2100      	movs	r1, #0
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff fb0e 	bl	800af88 <disk_ioctl>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <sync_fs+0xca>
 800b972:	2301      	movs	r3, #1
 800b974:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b976:	7bfb      	ldrb	r3, [r7, #15]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	41615252 	.word	0x41615252
 800b984:	61417272 	.word	0x61417272

0800b988 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	3b02      	subs	r3, #2
 800b996:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6a1b      	ldr	r3, [r3, #32]
 800b99c:	3b02      	subs	r3, #2
 800b99e:	683a      	ldr	r2, [r7, #0]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d301      	bcc.n	800b9a8 <clust2sect+0x20>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	e008      	b.n	800b9ba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	895b      	ldrh	r3, [r3, #10]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	fb03 f202 	mul.w	r2, r3, r2
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9b8:	4413      	add	r3, r2
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	370c      	adds	r7, #12
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
	...

0800b9c8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b088      	sub	sp, #32
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b9d2:	6879      	ldr	r1, [r7, #4]
 800b9d4:	6809      	ldr	r1, [r1, #0]
 800b9d6:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b9d8:	6839      	ldr	r1, [r7, #0]
 800b9da:	2901      	cmp	r1, #1
 800b9dc:	d904      	bls.n	800b9e8 <get_fat+0x20>
 800b9de:	69b9      	ldr	r1, [r7, #24]
 800b9e0:	6a09      	ldr	r1, [r1, #32]
 800b9e2:	6838      	ldr	r0, [r7, #0]
 800b9e4:	4288      	cmp	r0, r1
 800b9e6:	d302      	bcc.n	800b9ee <get_fat+0x26>
		val = 1;	/* Internal error */
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	61fb      	str	r3, [r7, #28]
 800b9ec:	e100      	b.n	800bbf0 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b9ee:	f04f 31ff 	mov.w	r1, #4294967295
 800b9f2:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800b9f4:	69b9      	ldr	r1, [r7, #24]
 800b9f6:	7809      	ldrb	r1, [r1, #0]
 800b9f8:	3901      	subs	r1, #1
 800b9fa:	2903      	cmp	r1, #3
 800b9fc:	f200 80ec 	bhi.w	800bbd8 <get_fat+0x210>
 800ba00:	a001      	add	r0, pc, #4	@ (adr r0, 800ba08 <get_fat+0x40>)
 800ba02:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ba06:	bf00      	nop
 800ba08:	0800ba19 	.word	0x0800ba19
 800ba0c:	0800ba9f 	.word	0x0800ba9f
 800ba10:	0800bad5 	.word	0x0800bad5
 800ba14:	0800bb0d 	.word	0x0800bb0d
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	085b      	lsrs	r3, r3, #1
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	4413      	add	r3, r2
 800ba24:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	0a5b      	lsrs	r3, r3, #9
 800ba2e:	4413      	add	r3, r2
 800ba30:	4619      	mov	r1, r3
 800ba32:	69b8      	ldr	r0, [r7, #24]
 800ba34:	f7ff ff0c 	bl	800b850 <move_window>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f040 80cf 	bne.w	800bbde <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	60fa      	str	r2, [r7, #12]
 800ba46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba4a:	69ba      	ldr	r2, [r7, #24]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba52:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	0a5b      	lsrs	r3, r3, #9
 800ba5c:	4413      	add	r3, r2
 800ba5e:	4619      	mov	r1, r3
 800ba60:	69b8      	ldr	r0, [r7, #24]
 800ba62:	f7ff fef5 	bl	800b850 <move_window>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f040 80ba 	bne.w	800bbe2 <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba74:	69ba      	ldr	r2, [r7, #24]
 800ba76:	4413      	add	r3, r2
 800ba78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba7c:	021b      	lsls	r3, r3, #8
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	f003 0301 	and.w	r3, r3, #1
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d002      	beq.n	800ba94 <get_fat+0xcc>
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	091b      	lsrs	r3, r3, #4
 800ba92:	e002      	b.n	800ba9a <get_fat+0xd2>
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba9a:	61fb      	str	r3, [r7, #28]
			break;
 800ba9c:	e0a8      	b.n	800bbf0 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	0a1b      	lsrs	r3, r3, #8
 800baa6:	4413      	add	r3, r2
 800baa8:	4619      	mov	r1, r3
 800baaa:	69b8      	ldr	r0, [r7, #24]
 800baac:	f7ff fed0 	bl	800b850 <move_window>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f040 8097 	bne.w	800bbe6 <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	005b      	lsls	r3, r3, #1
 800bac2:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bac6:	4413      	add	r3, r2
 800bac8:	4618      	mov	r0, r3
 800baca:	f7ff fa7b 	bl	800afc4 <ld_word>
 800bace:	4603      	mov	r3, r0
 800bad0:	61fb      	str	r3, [r7, #28]
			break;
 800bad2:	e08d      	b.n	800bbf0 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	09db      	lsrs	r3, r3, #7
 800badc:	4413      	add	r3, r2
 800bade:	4619      	mov	r1, r3
 800bae0:	69b8      	ldr	r0, [r7, #24]
 800bae2:	f7ff feb5 	bl	800b850 <move_window>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d17e      	bne.n	800bbea <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bafa:	4413      	add	r3, r2
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7ff fa7a 	bl	800aff6 <ld_dword>
 800bb02:	4603      	mov	r3, r0
 800bb04:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bb08:	61fb      	str	r3, [r7, #28]
			break;
 800bb0a:	e071      	b.n	800bbf0 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800bb0c:	6879      	ldr	r1, [r7, #4]
 800bb0e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800bb12:	4301      	orrs	r1, r0
 800bb14:	d060      	beq.n	800bbd8 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800bb16:	6879      	ldr	r1, [r7, #4]
 800bb18:	6889      	ldr	r1, [r1, #8]
 800bb1a:	6838      	ldr	r0, [r7, #0]
 800bb1c:	1a41      	subs	r1, r0, r1
 800bb1e:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800bb20:	6879      	ldr	r1, [r7, #4]
 800bb22:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800bb26:	1e42      	subs	r2, r0, #1
 800bb28:	f141 33ff 	adc.w	r3, r1, #4294967295
 800bb2c:	f04f 0000 	mov.w	r0, #0
 800bb30:	f04f 0100 	mov.w	r1, #0
 800bb34:	0a50      	lsrs	r0, r2, #9
 800bb36:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bb3a:	0a59      	lsrs	r1, r3, #9
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	895b      	ldrh	r3, [r3, #10]
 800bb42:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb46:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	79db      	ldrb	r3, [r3, #7]
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d10e      	bne.n	800bb6e <get_fat+0x1a6>
					if (cofs <= clen) {
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d80a      	bhi.n	800bb6e <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d002      	beq.n	800bb66 <get_fat+0x19e>
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	3301      	adds	r3, #1
 800bb64:	e001      	b.n	800bb6a <get_fat+0x1a2>
 800bb66:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800bb6a:	61fb      	str	r3, [r7, #28]
						break;
 800bb6c:	e040      	b.n	800bbf0 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	79db      	ldrb	r3, [r3, #7]
 800bb72:	2b03      	cmp	r3, #3
 800bb74:	d108      	bne.n	800bb88 <get_fat+0x1c0>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	699b      	ldr	r3, [r3, #24]
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d203      	bcs.n	800bb88 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	3301      	adds	r3, #1
 800bb84:	61fb      	str	r3, [r7, #28]
					break;
 800bb86:	e033      	b.n	800bbf0 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	79db      	ldrb	r3, [r3, #7]
 800bb8c:	2b02      	cmp	r3, #2
 800bb8e:	d023      	beq.n	800bbd8 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	69db      	ldr	r3, [r3, #28]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d003      	beq.n	800bba0 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800bb98:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800bb9c:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800bb9e:	e027      	b.n	800bbf0 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	09db      	lsrs	r3, r3, #7
 800bba8:	4413      	add	r3, r2
 800bbaa:	4619      	mov	r1, r3
 800bbac:	69b8      	ldr	r0, [r7, #24]
 800bbae:	f7ff fe4f 	bl	800b850 <move_window>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d11a      	bne.n	800bbee <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bbc6:	4413      	add	r3, r2
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7ff fa14 	bl	800aff6 <ld_dword>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbd4:	61fb      	str	r3, [r7, #28]
					break;
 800bbd6:	e00b      	b.n	800bbf0 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bbd8:	2301      	movs	r3, #1
 800bbda:	61fb      	str	r3, [r7, #28]
 800bbdc:	e008      	b.n	800bbf0 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbde:	bf00      	nop
 800bbe0:	e006      	b.n	800bbf0 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbe2:	bf00      	nop
 800bbe4:	e004      	b.n	800bbf0 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbe6:	bf00      	nop
 800bbe8:	e002      	b.n	800bbf0 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbea:	bf00      	nop
 800bbec:	e000      	b.n	800bbf0 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbee:	bf00      	nop
		}
	}

	return val;
 800bbf0:	69fb      	ldr	r3, [r7, #28]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3720      	adds	r7, #32
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop

0800bbfc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bbfc:	b590      	push	{r4, r7, lr}
 800bbfe:	b089      	sub	sp, #36	@ 0x24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bc08:	2302      	movs	r3, #2
 800bc0a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	f240 80dd 	bls.w	800bdce <put_fat+0x1d2>
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6a1b      	ldr	r3, [r3, #32]
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	f080 80d7 	bcs.w	800bdce <put_fat+0x1d2>
		switch (fs->fs_type) {
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	2b04      	cmp	r3, #4
 800bc26:	f300 80d2 	bgt.w	800bdce <put_fat+0x1d2>
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	f280 8093 	bge.w	800bd56 <put_fat+0x15a>
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d002      	beq.n	800bc3a <put_fat+0x3e>
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d06e      	beq.n	800bd16 <put_fat+0x11a>
 800bc38:	e0c9      	b.n	800bdce <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	61bb      	str	r3, [r7, #24]
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	085b      	lsrs	r3, r3, #1
 800bc42:	69ba      	ldr	r2, [r7, #24]
 800bc44:	4413      	add	r3, r2
 800bc46:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	0a5b      	lsrs	r3, r3, #9
 800bc50:	4413      	add	r3, r2
 800bc52:	4619      	mov	r1, r3
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f7ff fdfb 	bl	800b850 <move_window>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc5e:	7ffb      	ldrb	r3, [r7, #31]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f040 80ad 	bne.w	800bdc0 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	1c59      	adds	r1, r3, #1
 800bc70:	61b9      	str	r1, [r7, #24]
 800bc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc76:	4413      	add	r3, r2
 800bc78:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	f003 0301 	and.w	r3, r3, #1
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00d      	beq.n	800bca0 <put_fat+0xa4>
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	b25b      	sxtb	r3, r3
 800bc8a:	f003 030f 	and.w	r3, r3, #15
 800bc8e:	b25a      	sxtb	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	b25b      	sxtb	r3, r3
 800bc94:	011b      	lsls	r3, r3, #4
 800bc96:	b25b      	sxtb	r3, r3
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	b25b      	sxtb	r3, r3
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	e001      	b.n	800bca4 <put_fat+0xa8>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	0a5b      	lsrs	r3, r3, #9
 800bcb6:	4413      	add	r3, r2
 800bcb8:	4619      	mov	r1, r3
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f7ff fdc8 	bl	800b850 <move_window>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcc4:	7ffb      	ldrb	r3, [r7, #31]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d17c      	bne.n	800bdc4 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd6:	4413      	add	r3, r2
 800bcd8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	f003 0301 	and.w	r3, r3, #1
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d003      	beq.n	800bcec <put_fat+0xf0>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	091b      	lsrs	r3, r3, #4
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	e00e      	b.n	800bd0a <put_fat+0x10e>
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	b25b      	sxtb	r3, r3
 800bcf2:	f023 030f 	bic.w	r3, r3, #15
 800bcf6:	b25a      	sxtb	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	0a1b      	lsrs	r3, r3, #8
 800bcfc:	b25b      	sxtb	r3, r3
 800bcfe:	f003 030f 	and.w	r3, r3, #15
 800bd02:	b25b      	sxtb	r3, r3
 800bd04:	4313      	orrs	r3, r2
 800bd06:	b25b      	sxtb	r3, r3
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2201      	movs	r2, #1
 800bd12:	70da      	strb	r2, [r3, #3]
			break;
 800bd14:	e05b      	b.n	800bdce <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	0a1b      	lsrs	r3, r3, #8
 800bd1e:	4413      	add	r3, r2
 800bd20:	4619      	mov	r1, r3
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f7ff fd94 	bl	800b850 <move_window>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd2c:	7ffb      	ldrb	r3, [r7, #31]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d14a      	bne.n	800bdc8 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	005b      	lsls	r3, r3, #1
 800bd3c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bd40:	4413      	add	r3, r2
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	b292      	uxth	r2, r2
 800bd46:	4611      	mov	r1, r2
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff fa52 	bl	800b1f2 <st_word>
			fs->wflag = 1;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2201      	movs	r2, #1
 800bd52:	70da      	strb	r2, [r3, #3]
			break;
 800bd54:	e03b      	b.n	800bdce <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	09db      	lsrs	r3, r3, #7
 800bd5e:	4413      	add	r3, r2
 800bd60:	4619      	mov	r1, r3
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f7ff fd74 	bl	800b850 <move_window>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd6c:	7ffb      	ldrb	r3, [r7, #31]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d12c      	bne.n	800bdcc <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	d012      	beq.n	800bda0 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bd8e:	4413      	add	r3, r2
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7ff f930 	bl	800aff6 <ld_dword>
 800bd96:	4603      	mov	r3, r0
 800bd98:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bd9c:	4323      	orrs	r3, r4
 800bd9e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bdae:	4413      	add	r3, r2
 800bdb0:	6879      	ldr	r1, [r7, #4]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff fa38 	bl	800b228 <st_dword>
			fs->wflag = 1;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	70da      	strb	r2, [r3, #3]
			break;
 800bdbe:	e006      	b.n	800bdce <put_fat+0x1d2>
			if (res != FR_OK) break;
 800bdc0:	bf00      	nop
 800bdc2:	e004      	b.n	800bdce <put_fat+0x1d2>
			if (res != FR_OK) break;
 800bdc4:	bf00      	nop
 800bdc6:	e002      	b.n	800bdce <put_fat+0x1d2>
			if (res != FR_OK) break;
 800bdc8:	bf00      	nop
 800bdca:	e000      	b.n	800bdce <put_fat+0x1d2>
			if (res != FR_OK) break;
 800bdcc:	bf00      	nop
		}
	}
	return res;
 800bdce:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3724      	adds	r7, #36	@ 0x24
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd90      	pop	{r4, r7, pc}

0800bdd8 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b08a      	sub	sp, #40	@ 0x28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	3b02      	subs	r3, #2
 800bde8:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	3b02      	subs	r3, #2
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d301      	bcc.n	800bdfa <find_bitmap+0x22>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	61fb      	str	r3, [r7, #28]
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	61bb      	str	r3, [r7, #24]
 800be02:	2300      	movs	r3, #0
 800be04:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	0b1b      	lsrs	r3, r3, #12
 800be0e:	4413      	add	r3, r2
 800be10:	4619      	mov	r1, r3
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f7ff fd1c 	bl	800b850 <move_window>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d002      	beq.n	800be24 <find_bitmap+0x4c>
 800be1e:	f04f 33ff 	mov.w	r3, #4294967295
 800be22:	e051      	b.n	800bec8 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	08db      	lsrs	r3, r3, #3
 800be28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be2c:	623b      	str	r3, [r7, #32]
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	f003 0307 	and.w	r3, r3, #7
 800be34:	2201      	movs	r2, #1
 800be36:	fa02 f303 	lsl.w	r3, r2, r3
 800be3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	6a3b      	ldr	r3, [r7, #32]
 800be42:	4413      	add	r3, r2
 800be44:	333c      	adds	r3, #60	@ 0x3c
 800be46:	781a      	ldrb	r2, [r3, #0]
 800be48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be4c:	4013      	ands	r3, r2
 800be4e:	74fb      	strb	r3, [r7, #19]
 800be50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	3301      	adds	r3, #1
 800be5e:	61fb      	str	r3, [r7, #28]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6a1b      	ldr	r3, [r3, #32]
 800be64:	3b02      	subs	r3, #2
 800be66:	69fa      	ldr	r2, [r7, #28]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d307      	bcc.n	800be7c <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800be6c:	2300      	movs	r3, #0
 800be6e:	61fb      	str	r3, [r7, #28]
 800be70:	2300      	movs	r3, #0
 800be72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be7a:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800be7c:	7cfb      	ldrb	r3, [r7, #19]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d109      	bne.n	800be96 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	3301      	adds	r3, #1
 800be86:	617b      	str	r3, [r7, #20]
 800be88:	697a      	ldr	r2, [r7, #20]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d106      	bne.n	800be9e <find_bitmap+0xc6>
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	3302      	adds	r3, #2
 800be94:	e018      	b.n	800bec8 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	61bb      	str	r3, [r7, #24]
 800be9a:	2300      	movs	r3, #0
 800be9c:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800be9e:	69fa      	ldr	r2, [r7, #28]
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d101      	bne.n	800beaa <find_bitmap+0xd2>
 800bea6:	2300      	movs	r3, #0
 800bea8:	e00e      	b.n	800bec8 <find_bitmap+0xf0>
			} while (bm);
 800beaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1c5      	bne.n	800be3e <find_bitmap+0x66>
			bm = 1;
 800beb2:	2301      	movs	r3, #1
 800beb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800beb8:	6a3b      	ldr	r3, [r7, #32]
 800beba:	3301      	adds	r3, #1
 800bebc:	623b      	str	r3, [r7, #32]
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bec4:	d3bb      	bcc.n	800be3e <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800bec6:	e79e      	b.n	800be06 <find_bitmap+0x2e>
	}
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3728      	adds	r7, #40	@ 0x28
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	3b02      	subs	r3, #2
 800bee2:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	0b1b      	lsrs	r3, r3, #12
 800beec:	4413      	add	r3, r2
 800beee:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	08db      	lsrs	r3, r3, #3
 800bef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bef8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	f003 0307 	and.w	r3, r3, #7
 800bf00:	2201      	movs	r2, #1
 800bf02:	fa02 f303 	lsl.w	r3, r2, r3
 800bf06:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	1c5a      	adds	r2, r3, #1
 800bf0c:	617a      	str	r2, [r7, #20]
 800bf0e:	4619      	mov	r1, r3
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f7ff fc9d 	bl	800b850 <move_window>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <change_bitmap+0x50>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e03d      	b.n	800bf9c <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	4413      	add	r3, r2
 800bf26:	333c      	adds	r3, #60	@ 0x3c
 800bf28:	781a      	ldrb	r2, [r3, #0]
 800bf2a:	7ffb      	ldrb	r3, [r7, #31]
 800bf2c:	4013      	ands	r3, r2
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	bf14      	ite	ne
 800bf34:	2301      	movne	r3, #1
 800bf36:	2300      	moveq	r3, #0
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d101      	bne.n	800bf46 <change_bitmap+0x76>
 800bf42:	2302      	movs	r3, #2
 800bf44:	e02a      	b.n	800bf9c <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	333c      	adds	r3, #60	@ 0x3c
 800bf4e:	781a      	ldrb	r2, [r3, #0]
 800bf50:	7ffb      	ldrb	r3, [r7, #31]
 800bf52:	4053      	eors	r3, r2
 800bf54:	b2d9      	uxtb	r1, r3
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	333c      	adds	r3, #60	@ 0x3c
 800bf5e:	460a      	mov	r2, r1
 800bf60:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2201      	movs	r2, #1
 800bf66:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	607b      	str	r3, [r7, #4]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <change_bitmap+0xa8>
 800bf74:	2300      	movs	r3, #0
 800bf76:	e011      	b.n	800bf9c <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800bf78:	7ffb      	ldrb	r3, [r7, #31]
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	77fb      	strb	r3, [r7, #31]
 800bf7e:	7ffb      	ldrb	r3, [r7, #31]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1cd      	bne.n	800bf20 <change_bitmap+0x50>
			bm = 1;
 800bf84:	2301      	movs	r3, #1
 800bf86:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	61bb      	str	r3, [r7, #24]
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf94:	d3c4      	bcc.n	800bf20 <change_bitmap+0x50>
		i = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800bf9a:	e7b5      	b.n	800bf08 <change_bitmap+0x38>
	}
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3720      	adds	r7, #32
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	79db      	ldrb	r3, [r3, #7]
 800bfb0:	2b03      	cmp	r3, #3
 800bfb2:	d121      	bne.n	800bff8 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	617b      	str	r3, [r7, #20]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	613b      	str	r3, [r7, #16]
 800bfc0:	e014      	b.n	800bfec <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6818      	ldr	r0, [r3, #0]
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	461a      	mov	r2, r3
 800bfcc:	6979      	ldr	r1, [r7, #20]
 800bfce:	f7ff fe15 	bl	800bbfc <put_fat>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800bfd6:	7bfb      	ldrb	r3, [r7, #15]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <fill_first_frag+0x3c>
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	e00c      	b.n	800bffa <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	617b      	str	r3, [r7, #20]
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	613b      	str	r3, [r7, #16]
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1e7      	bne.n	800bfc2 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3718      	adds	r7, #24
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b086      	sub	sp, #24
 800c006:	af00      	add	r7, sp, #0
 800c008:	60f8      	str	r0, [r7, #12]
 800c00a:	60b9      	str	r1, [r7, #8]
 800c00c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800c00e:	e020      	b.n	800c052 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6818      	ldr	r0, [r3, #0]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	69db      	ldr	r3, [r3, #28]
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	1c59      	adds	r1, r3, #1
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	69db      	ldr	r3, [r3, #28]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d905      	bls.n	800c032 <fill_last_frag+0x30>
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	69db      	ldr	r3, [r3, #28]
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	3302      	adds	r3, #2
 800c030:	e000      	b.n	800c034 <fill_last_frag+0x32>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	461a      	mov	r2, r3
 800c036:	f7ff fde1 	bl	800bbfc <put_fat>
 800c03a:	4603      	mov	r3, r0
 800c03c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d001      	beq.n	800c048 <fill_last_frag+0x46>
 800c044:	7dfb      	ldrb	r3, [r7, #23]
 800c046:	e009      	b.n	800c05c <fill_last_frag+0x5a>
		obj->n_frag--;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	69db      	ldr	r3, [r3, #28]
 800c04c:	1e5a      	subs	r2, r3, #1
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	69db      	ldr	r3, [r3, #28]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1da      	bne.n	800c010 <fill_last_frag+0xe>
	}
	return FR_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3718      	adds	r7, #24
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08a      	sub	sp, #40	@ 0x28
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d904      	bls.n	800c092 <remove_chain+0x2e>
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d301      	bcc.n	800c096 <remove_chain+0x32>
 800c092:	2302      	movs	r3, #2
 800c094:	e096      	b.n	800c1c4 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d014      	beq.n	800c0c6 <remove_chain+0x62>
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	2b04      	cmp	r3, #4
 800c0a2:	d103      	bne.n	800c0ac <remove_chain+0x48>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	79db      	ldrb	r3, [r3, #7]
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d00c      	beq.n	800c0c6 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	69b8      	ldr	r0, [r7, #24]
 800c0b4:	f7ff fda2 	bl	800bbfc <put_fat>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c0bc:	7ffb      	ldrb	r3, [r7, #31]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d001      	beq.n	800c0c6 <remove_chain+0x62>
 800c0c2:	7ffb      	ldrb	r3, [r7, #31]
 800c0c4:	e07e      	b.n	800c1c4 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c0c6:	68b9      	ldr	r1, [r7, #8]
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f7ff fc7d 	bl	800b9c8 <get_fat>
 800c0ce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d055      	beq.n	800c182 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d101      	bne.n	800c0e0 <remove_chain+0x7c>
 800c0dc:	2302      	movs	r3, #2
 800c0de:	e071      	b.n	800c1c4 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e6:	d101      	bne.n	800c0ec <remove_chain+0x88>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e06b      	b.n	800c1c4 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	2b04      	cmp	r3, #4
 800c0f2:	d00b      	beq.n	800c10c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	68b9      	ldr	r1, [r7, #8]
 800c0f8:	69b8      	ldr	r0, [r7, #24]
 800c0fa:	f7ff fd7f 	bl	800bbfc <put_fat>
 800c0fe:	4603      	mov	r3, r0
 800c100:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c102:	7ffb      	ldrb	r3, [r7, #31]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <remove_chain+0xa8>
 800c108:	7ffb      	ldrb	r3, [r7, #31]
 800c10a:	e05b      	b.n	800c1c4 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	69da      	ldr	r2, [r3, #28]
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	6a1b      	ldr	r3, [r3, #32]
 800c114:	3b02      	subs	r3, #2
 800c116:	429a      	cmp	r2, r3
 800c118:	d20b      	bcs.n	800c132 <remove_chain+0xce>
			fs->free_clst++;
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	69db      	ldr	r3, [r3, #28]
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	791b      	ldrb	r3, [r3, #4]
 800c128:	f043 0301 	orr.w	r3, r3, #1
 800c12c:	b2da      	uxtb	r2, r3
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800c132:	6a3b      	ldr	r3, [r7, #32]
 800c134:	3301      	adds	r3, #1
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d102      	bne.n	800c142 <remove_chain+0xde>
			ecl = nxt;
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	623b      	str	r3, [r7, #32]
 800c140:	e017      	b.n	800c172 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	2b04      	cmp	r3, #4
 800c148:	d10f      	bne.n	800c16a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800c14a:	6a3a      	ldr	r2, [r7, #32]
 800c14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14e:	1ad3      	subs	r3, r2, r3
 800c150:	1c5a      	adds	r2, r3, #1
 800c152:	2300      	movs	r3, #0
 800c154:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c156:	69b8      	ldr	r0, [r7, #24]
 800c158:	f7ff feba 	bl	800bed0 <change_bitmap>
 800c15c:	4603      	mov	r3, r0
 800c15e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800c160:	7ffb      	ldrb	r3, [r7, #31]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d001      	beq.n	800c16a <remove_chain+0x106>
 800c166:	7ffb      	ldrb	r3, [r7, #31]
 800c168:	e02c      	b.n	800c1c4 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	623b      	str	r3, [r7, #32]
 800c16e:	6a3b      	ldr	r3, [r7, #32]
 800c170:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	6a1b      	ldr	r3, [r3, #32]
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d3a2      	bcc.n	800c0c6 <remove_chain+0x62>
 800c180:	e000      	b.n	800c184 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800c182:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	2b04      	cmp	r3, #4
 800c18a:	d11a      	bne.n	800c1c2 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d103      	bne.n	800c19a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	71da      	strb	r2, [r3, #7]
 800c198:	e013      	b.n	800c1c2 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	79db      	ldrb	r3, [r3, #7]
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d10f      	bne.n	800c1c2 <remove_chain+0x15e>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d30a      	bcc.n	800c1c2 <remove_chain+0x15e>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d802      	bhi.n	800c1c2 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2202      	movs	r2, #2
 800c1c0:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800c1c2:	2300      	movs	r3, #0
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3728      	adds	r7, #40	@ 0x28
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b088      	sub	sp, #32
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d10d      	bne.n	800c1fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	699b      	ldr	r3, [r3, #24]
 800c1e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d004      	beq.n	800c1f8 <create_chain+0x2c>
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	6a1b      	ldr	r3, [r3, #32]
 800c1f2:	69ba      	ldr	r2, [r7, #24]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d31b      	bcc.n	800c230 <create_chain+0x64>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	61bb      	str	r3, [r7, #24]
 800c1fc:	e018      	b.n	800c230 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7ff fbe1 	bl	800b9c8 <get_fat>
 800c206:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d801      	bhi.n	800c212 <create_chain+0x46>
 800c20e:	2301      	movs	r3, #1
 800c210:	e0d9      	b.n	800c3c6 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c218:	d101      	bne.n	800c21e <create_chain+0x52>
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	e0d3      	b.n	800c3c6 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	429a      	cmp	r2, r3
 800c226:	d201      	bcs.n	800c22c <create_chain+0x60>
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	e0cc      	b.n	800c3c6 <create_chain+0x1fa>
		scl = clst;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	2b04      	cmp	r3, #4
 800c236:	d164      	bne.n	800c302 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800c238:	2201      	movs	r2, #1
 800c23a:	69b9      	ldr	r1, [r7, #24]
 800c23c:	6938      	ldr	r0, [r7, #16]
 800c23e:	f7ff fdcb 	bl	800bdd8 <find_bitmap>
 800c242:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d003      	beq.n	800c252 <create_chain+0x86>
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c250:	d101      	bne.n	800c256 <create_chain+0x8a>
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	e0b7      	b.n	800c3c6 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800c256:	2301      	movs	r3, #1
 800c258:	2201      	movs	r2, #1
 800c25a:	69f9      	ldr	r1, [r7, #28]
 800c25c:	6938      	ldr	r0, [r7, #16]
 800c25e:	f7ff fe37 	bl	800bed0 <change_bitmap>
 800c262:	4603      	mov	r3, r0
 800c264:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800c266:	7dfb      	ldrb	r3, [r7, #23]
 800c268:	2b02      	cmp	r3, #2
 800c26a:	d101      	bne.n	800c270 <create_chain+0xa4>
 800c26c:	2301      	movs	r3, #1
 800c26e:	e0aa      	b.n	800c3c6 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800c270:	7dfb      	ldrb	r3, [r7, #23]
 800c272:	2b01      	cmp	r3, #1
 800c274:	d102      	bne.n	800c27c <create_chain+0xb0>
 800c276:	f04f 33ff 	mov.w	r3, #4294967295
 800c27a:	e0a4      	b.n	800c3c6 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d103      	bne.n	800c28a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2202      	movs	r2, #2
 800c286:	71da      	strb	r2, [r3, #7]
 800c288:	e011      	b.n	800c2ae <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	79db      	ldrb	r3, [r3, #7]
 800c28e:	2b02      	cmp	r3, #2
 800c290:	d10d      	bne.n	800c2ae <create_chain+0xe2>
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	3301      	adds	r3, #1
 800c296:	69fa      	ldr	r2, [r7, #28]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d008      	beq.n	800c2ae <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	69ba      	ldr	r2, [r7, #24]
 800c2a2:	1ad2      	subs	r2, r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2203      	movs	r2, #3
 800c2ac:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	79db      	ldrb	r3, [r3, #7]
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d064      	beq.n	800c380 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	69fa      	ldr	r2, [r7, #28]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d10b      	bne.n	800c2d8 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	69db      	ldr	r3, [r3, #28]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d003      	beq.n	800c2d0 <create_chain+0x104>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	69db      	ldr	r3, [r3, #28]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	e000      	b.n	800c2d2 <create_chain+0x106>
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	61d3      	str	r3, [r2, #28]
 800c2d6:	e053      	b.n	800c380 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	69db      	ldr	r3, [r3, #28]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d102      	bne.n	800c2e6 <create_chain+0x11a>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800c2e6:	69fa      	ldr	r2, [r7, #28]
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7ff fe89 	bl	800c002 <fill_last_frag>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800c2f4:	7dfb      	ldrb	r3, [r7, #23]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d142      	bne.n	800c380 <create_chain+0x1b4>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	61da      	str	r2, [r3, #28]
 800c300:	e03e      	b.n	800c380 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	3301      	adds	r3, #1
 800c30a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	6a1b      	ldr	r3, [r3, #32]
 800c310:	69fa      	ldr	r2, [r7, #28]
 800c312:	429a      	cmp	r2, r3
 800c314:	d307      	bcc.n	800c326 <create_chain+0x15a>
				ncl = 2;
 800c316:	2302      	movs	r3, #2
 800c318:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c31a:	69fa      	ldr	r2, [r7, #28]
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d901      	bls.n	800c326 <create_chain+0x15a>
 800c322:	2300      	movs	r3, #0
 800c324:	e04f      	b.n	800c3c6 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c326:	69f9      	ldr	r1, [r7, #28]
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f7ff fb4d 	bl	800b9c8 <get_fat>
 800c32e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00e      	beq.n	800c354 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d003      	beq.n	800c344 <create_chain+0x178>
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c342:	d101      	bne.n	800c348 <create_chain+0x17c>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	e03e      	b.n	800c3c6 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800c348:	69fa      	ldr	r2, [r7, #28]
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d1da      	bne.n	800c306 <create_chain+0x13a>
 800c350:	2300      	movs	r3, #0
 800c352:	e038      	b.n	800c3c6 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800c354:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c356:	f04f 32ff 	mov.w	r2, #4294967295
 800c35a:	69f9      	ldr	r1, [r7, #28]
 800c35c:	6938      	ldr	r0, [r7, #16]
 800c35e:	f7ff fc4d 	bl	800bbfc <put_fat>
 800c362:	4603      	mov	r3, r0
 800c364:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c366:	7dfb      	ldrb	r3, [r7, #23]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d109      	bne.n	800c380 <create_chain+0x1b4>
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d006      	beq.n	800c380 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c372:	69fa      	ldr	r2, [r7, #28]
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6938      	ldr	r0, [r7, #16]
 800c378:	f7ff fc40 	bl	800bbfc <put_fat>
 800c37c:	4603      	mov	r3, r0
 800c37e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c380:	7dfb      	ldrb	r3, [r7, #23]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d116      	bne.n	800c3b4 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	69fa      	ldr	r2, [r7, #28]
 800c38a:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	69da      	ldr	r2, [r3, #28]
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	6a1b      	ldr	r3, [r3, #32]
 800c394:	3b02      	subs	r3, #2
 800c396:	429a      	cmp	r2, r3
 800c398:	d804      	bhi.n	800c3a4 <create_chain+0x1d8>
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	69db      	ldr	r3, [r3, #28]
 800c39e:	1e5a      	subs	r2, r3, #1
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	791b      	ldrb	r3, [r3, #4]
 800c3a8:	f043 0301 	orr.w	r3, r3, #1
 800c3ac:	b2da      	uxtb	r2, r3
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	711a      	strb	r2, [r3, #4]
 800c3b2:	e007      	b.n	800c3c4 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c3b4:	7dfb      	ldrb	r3, [r7, #23]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d102      	bne.n	800c3c0 <create_chain+0x1f4>
 800c3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c3be:	e000      	b.n	800c3c2 <create_chain+0x1f6>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c3c4:	69fb      	ldr	r3, [r7, #28]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3720      	adds	r7, #32
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c3ce:	b5b0      	push	{r4, r5, r7, lr}
 800c3d0:	b088      	sub	sp, #32
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	60f8      	str	r0, [r7, #12]
 800c3d6:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3e4:	3304      	adds	r3, #4
 800c3e6:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3ec:	f04f 0000 	mov.w	r0, #0
 800c3f0:	f04f 0100 	mov.w	r1, #0
 800c3f4:	0a50      	lsrs	r0, r2, #9
 800c3f6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c3fa:	0a59      	lsrs	r1, r3, #9
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	895b      	ldrh	r3, [r3, #10]
 800c400:	b29b      	uxth	r3, r3
 800c402:	2200      	movs	r2, #0
 800c404:	461c      	mov	r4, r3
 800c406:	4615      	mov	r5, r2
 800c408:	4622      	mov	r2, r4
 800c40a:	462b      	mov	r3, r5
 800c40c:	f7f4 fc5c 	bl	8000cc8 <__aeabi_uldivmod>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	4613      	mov	r3, r2
 800c416:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	1d1a      	adds	r2, r3, #4
 800c41c:	61ba      	str	r2, [r7, #24]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d101      	bne.n	800c42c <clmt_clust+0x5e>
 800c428:	2300      	movs	r3, #0
 800c42a:	e010      	b.n	800c44e <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800c42c:	69fa      	ldr	r2, [r7, #28]
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	429a      	cmp	r2, r3
 800c432:	d307      	bcc.n	800c444 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800c434:	69fa      	ldr	r2, [r7, #28]
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	61fb      	str	r3, [r7, #28]
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	3304      	adds	r3, #4
 800c440:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c442:	e7e9      	b.n	800c418 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800c444:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	4413      	add	r3, r2
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3720      	adds	r7, #32
 800c452:	46bd      	mov	sp, r7
 800c454:	bdb0      	pop	{r4, r5, r7, pc}

0800c456 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b086      	sub	sp, #24
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
 800c45e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	2b04      	cmp	r3, #4
 800c46c:	d102      	bne.n	800c474 <dir_sdi+0x1e>
 800c46e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c472:	e001      	b.n	800c478 <dir_sdi+0x22>
 800c474:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d904      	bls.n	800c488 <dir_sdi+0x32>
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	f003 031f 	and.w	r3, r3, #31
 800c484:	2b00      	cmp	r3, #0
 800c486:	d001      	beq.n	800c48c <dir_sdi+0x36>
		return FR_INT_ERR;
 800c488:	2302      	movs	r3, #2
 800c48a:	e066      	b.n	800c55a <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	683a      	ldr	r2, [r7, #0]
 800c490:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d109      	bne.n	800c4b2 <dir_sdi+0x5c>
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d905      	bls.n	800c4b2 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4aa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10c      	bne.n	800c4d2 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	095b      	lsrs	r3, r3, #5
 800c4bc:	693a      	ldr	r2, [r7, #16]
 800c4be:	8912      	ldrh	r2, [r2, #8]
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d301      	bcc.n	800c4c8 <dir_sdi+0x72>
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	e048      	b.n	800c55a <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	639a      	str	r2, [r3, #56]	@ 0x38
 800c4d0:	e029      	b.n	800c526 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	895b      	ldrh	r3, [r3, #10]
 800c4d6:	025b      	lsls	r3, r3, #9
 800c4d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c4da:	e019      	b.n	800c510 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6979      	ldr	r1, [r7, #20]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7ff fa71 	bl	800b9c8 <get_fat>
 800c4e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ee:	d101      	bne.n	800c4f4 <dir_sdi+0x9e>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e032      	b.n	800c55a <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d904      	bls.n	800c504 <dir_sdi+0xae>
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	6a1b      	ldr	r3, [r3, #32]
 800c4fe:	697a      	ldr	r2, [r7, #20]
 800c500:	429a      	cmp	r2, r3
 800c502:	d301      	bcc.n	800c508 <dir_sdi+0xb2>
 800c504:	2302      	movs	r3, #2
 800c506:	e028      	b.n	800c55a <dir_sdi+0x104>
			ofs -= csz;
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	429a      	cmp	r2, r3
 800c516:	d2e1      	bcs.n	800c4dc <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800c518:	6979      	ldr	r1, [r7, #20]
 800c51a:	6938      	ldr	r0, [r7, #16]
 800c51c:	f7ff fa34 	bl	800b988 <clust2sect>
 800c520:	4602      	mov	r2, r0
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	697a      	ldr	r2, [r7, #20]
 800c52a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <dir_sdi+0xe2>
 800c534:	2302      	movs	r3, #2
 800c536:	e010      	b.n	800c55a <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	0a5b      	lsrs	r3, r3, #9
 800c540:	441a      	add	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c552:	441a      	add	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3718      	adds	r7, #24
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b086      	sub	sp, #24
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
 800c56a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c576:	3320      	adds	r3, #32
 800c578:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00b      	beq.n	800c59a <dir_next+0x38>
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	2b04      	cmp	r3, #4
 800c588:	d102      	bne.n	800c590 <dir_next+0x2e>
 800c58a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c58e:	e001      	b.n	800c594 <dir_next+0x32>
 800c590:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	429a      	cmp	r2, r3
 800c598:	d801      	bhi.n	800c59e <dir_next+0x3c>
 800c59a:	2304      	movs	r3, #4
 800c59c:	e0b2      	b.n	800c704 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f040 80a0 	bne.w	800c6ea <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10b      	bne.n	800c5d4 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	095b      	lsrs	r3, r3, #5
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	8912      	ldrh	r2, [r2, #8]
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	f0c0 8090 	bcc.w	800c6ea <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	639a      	str	r2, [r3, #56]	@ 0x38
 800c5d0:	2304      	movs	r3, #4
 800c5d2:	e097      	b.n	800c704 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	0a5b      	lsrs	r3, r3, #9
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	8952      	ldrh	r2, [r2, #10]
 800c5dc:	3a01      	subs	r2, #1
 800c5de:	4013      	ands	r3, r2
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f040 8082 	bne.w	800c6ea <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	4610      	mov	r0, r2
 800c5f0:	f7ff f9ea 	bl	800b9c8 <get_fat>
 800c5f4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d801      	bhi.n	800c600 <dir_next+0x9e>
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	e081      	b.n	800c704 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c606:	d101      	bne.n	800c60c <dir_next+0xaa>
 800c608:	2301      	movs	r3, #1
 800c60a:	e07b      	b.n	800c704 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6a1b      	ldr	r3, [r3, #32]
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	429a      	cmp	r2, r3
 800c614:	d35f      	bcc.n	800c6d6 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d104      	bne.n	800c626 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	639a      	str	r2, [r3, #56]	@ 0x38
 800c622:	2304      	movs	r3, #4
 800c624:	e06e      	b.n	800c704 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c62c:	4619      	mov	r1, r3
 800c62e:	4610      	mov	r0, r2
 800c630:	f7ff fdcc 	bl	800c1cc <create_chain>
 800c634:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d101      	bne.n	800c640 <dir_next+0xde>
 800c63c:	2307      	movs	r3, #7
 800c63e:	e061      	b.n	800c704 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d101      	bne.n	800c64a <dir_next+0xe8>
 800c646:	2302      	movs	r3, #2
 800c648:	e05c      	b.n	800c704 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c650:	d101      	bne.n	800c656 <dir_next+0xf4>
 800c652:	2301      	movs	r3, #1
 800c654:	e056      	b.n	800c704 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	79db      	ldrb	r3, [r3, #7]
 800c65a:	f043 0304 	orr.w	r3, r3, #4
 800c65e:	b2da      	uxtb	r2, r3
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f7ff f8af 	bl	800b7c8 <sync_window>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d001      	beq.n	800c674 <dir_next+0x112>
 800c670:	2301      	movs	r3, #1
 800c672:	e047      	b.n	800c704 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	333c      	adds	r3, #60	@ 0x3c
 800c678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c67c:	2100      	movs	r1, #0
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fe fea7 	bl	800b3d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c684:	2300      	movs	r3, #0
 800c686:	613b      	str	r3, [r7, #16]
 800c688:	6979      	ldr	r1, [r7, #20]
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f7ff f97c 	bl	800b988 <clust2sect>
 800c690:	4602      	mov	r2, r0
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	639a      	str	r2, [r3, #56]	@ 0x38
 800c696:	e012      	b.n	800c6be <dir_next+0x15c>
						fs->wflag = 1;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2201      	movs	r2, #1
 800c69c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f7ff f892 	bl	800b7c8 <sync_window>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d001      	beq.n	800c6ae <dir_next+0x14c>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e02a      	b.n	800c704 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	613b      	str	r3, [r7, #16]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6b8:	1c5a      	adds	r2, r3, #1
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	639a      	str	r2, [r3, #56]	@ 0x38
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	895b      	ldrh	r3, [r3, #10]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d3e6      	bcc.n	800c698 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	1ad2      	subs	r2, r2, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800c6dc:	6979      	ldr	r1, [r7, #20]
 800c6de:	68f8      	ldr	r0, [r7, #12]
 800c6e0:	f7ff f952 	bl	800b988 <clust2sect>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6fc:	441a      	add	r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800c702:	2300      	movs	r3, #0
}
 800c704:	4618      	mov	r0, r3
 800c706:	3718      	adds	r7, #24
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b086      	sub	sp, #24
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c71c:	2100      	movs	r1, #0
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7ff fe99 	bl	800c456 <dir_sdi>
 800c724:	4603      	mov	r3, r0
 800c726:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c728:	7dfb      	ldrb	r3, [r7, #23]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d140      	bne.n	800c7b0 <dir_alloc+0xa4>
		n = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c736:	4619      	mov	r1, r3
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f7ff f889 	bl	800b850 <move_window>
 800c73e:	4603      	mov	r3, r0
 800c740:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d132      	bne.n	800c7ae <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	2b04      	cmp	r3, #4
 800c74e:	d108      	bne.n	800c762 <dir_alloc+0x56>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	b25b      	sxtb	r3, r3
 800c758:	43db      	mvns	r3, r3
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	09db      	lsrs	r3, r3, #7
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	e00f      	b.n	800c782 <dir_alloc+0x76>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	2be5      	cmp	r3, #229	@ 0xe5
 800c76a:	d004      	beq.n	800c776 <dir_alloc+0x6a>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d101      	bne.n	800c77a <dir_alloc+0x6e>
 800c776:	2301      	movs	r3, #1
 800c778:	e000      	b.n	800c77c <dir_alloc+0x70>
 800c77a:	2300      	movs	r3, #0
 800c77c:	f003 0301 	and.w	r3, r3, #1
 800c780:	b2db      	uxtb	r3, r3
 800c782:	2b00      	cmp	r3, #0
 800c784:	d007      	beq.n	800c796 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	3301      	adds	r3, #1
 800c78a:	613b      	str	r3, [r7, #16]
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	429a      	cmp	r2, r3
 800c792:	d102      	bne.n	800c79a <dir_alloc+0x8e>
 800c794:	e00c      	b.n	800c7b0 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c796:	2300      	movs	r3, #0
 800c798:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c79a:	2101      	movs	r1, #1
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7ff fee0 	bl	800c562 <dir_next>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d0c2      	beq.n	800c732 <dir_alloc+0x26>
 800c7ac:	e000      	b.n	800c7b0 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800c7ae:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c7b0:	7dfb      	ldrb	r3, [r7, #23]
 800c7b2:	2b04      	cmp	r3, #4
 800c7b4:	d101      	bne.n	800c7ba <dir_alloc+0xae>
 800c7b6:	2307      	movs	r3, #7
 800c7b8:	75fb      	strb	r3, [r7, #23]
	return res;
 800c7ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3718      	adds	r7, #24
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	331a      	adds	r3, #26
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe fbf6 	bl	800afc4 <ld_word>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b03      	cmp	r3, #3
 800c7e2:	d109      	bne.n	800c7f8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	3314      	adds	r3, #20
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fe fbeb 	bl	800afc4 <ld_word>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	041b      	lsls	r3, r3, #16
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b084      	sub	sp, #16
 800c806:	af00      	add	r7, sp, #0
 800c808:	60f8      	str	r0, [r7, #12]
 800c80a:	60b9      	str	r1, [r7, #8]
 800c80c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	331a      	adds	r3, #26
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	b292      	uxth	r2, r2
 800c816:	4611      	mov	r1, r2
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fe fcea 	bl	800b1f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	2b03      	cmp	r3, #3
 800c824:	d109      	bne.n	800c83a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	f103 0214 	add.w	r2, r3, #20
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	0c1b      	lsrs	r3, r3, #16
 800c830:	b29b      	uxth	r3, r3
 800c832:	4619      	mov	r1, r3
 800c834:	4610      	mov	r0, r2
 800c836:	f7fe fcdc 	bl	800b1f2 <st_word>
	}
}
 800c83a:	bf00      	nop
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
	...

0800c844 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c844:	b590      	push	{r4, r7, lr}
 800c846:	b087      	sub	sp, #28
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	331a      	adds	r3, #26
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe fbb6 	bl	800afc4 <ld_word>
 800c858:	4603      	mov	r3, r0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <cmp_lfn+0x1e>
 800c85e:	2300      	movs	r3, #0
 800c860:	e059      	b.n	800c916 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c86a:	1e5a      	subs	r2, r3, #1
 800c86c:	4613      	mov	r3, r2
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	4413      	add	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	4413      	add	r3, r2
 800c876:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c878:	2301      	movs	r3, #1
 800c87a:	81fb      	strh	r3, [r7, #14]
 800c87c:	2300      	movs	r3, #0
 800c87e:	613b      	str	r3, [r7, #16]
 800c880:	e033      	b.n	800c8ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c882:	4a27      	ldr	r2, [pc, #156]	@ (800c920 <cmp_lfn+0xdc>)
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	4413      	add	r3, r2
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	461a      	mov	r2, r3
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	4413      	add	r3, r2
 800c890:	4618      	mov	r0, r3
 800c892:	f7fe fb97 	bl	800afc4 <ld_word>
 800c896:	4603      	mov	r3, r0
 800c898:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c89a:	89fb      	ldrh	r3, [r7, #14]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d01a      	beq.n	800c8d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	2bfe      	cmp	r3, #254	@ 0xfe
 800c8a4:	d812      	bhi.n	800c8cc <cmp_lfn+0x88>
 800c8a6:	89bb      	ldrh	r3, [r7, #12]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f002 fedd 	bl	800f668 <ff_wtoupper>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	461c      	mov	r4, r3
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	1c5a      	adds	r2, r3, #1
 800c8b6:	617a      	str	r2, [r7, #20]
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	4413      	add	r3, r2
 800c8be:	881b      	ldrh	r3, [r3, #0]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f002 fed1 	bl	800f668 <ff_wtoupper>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	429c      	cmp	r4, r3
 800c8ca:	d001      	beq.n	800c8d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	e022      	b.n	800c916 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c8d0:	89bb      	ldrh	r3, [r7, #12]
 800c8d2:	81fb      	strh	r3, [r7, #14]
 800c8d4:	e006      	b.n	800c8e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c8d6:	89bb      	ldrh	r3, [r7, #12]
 800c8d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d001      	beq.n	800c8e4 <cmp_lfn+0xa0>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	e018      	b.n	800c916 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	613b      	str	r3, [r7, #16]
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	2b0c      	cmp	r3, #12
 800c8ee:	d9c8      	bls.n	800c882 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00b      	beq.n	800c914 <cmp_lfn+0xd0>
 800c8fc:	89fb      	ldrh	r3, [r7, #14]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d008      	beq.n	800c914 <cmp_lfn+0xd0>
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	4413      	add	r3, r2
 800c90a:	881b      	ldrh	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <cmp_lfn+0xd0>
 800c910:	2300      	movs	r3, #0
 800c912:	e000      	b.n	800c916 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c914:	2301      	movs	r3, #1
}
 800c916:	4618      	mov	r0, r3
 800c918:	371c      	adds	r7, #28
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd90      	pop	{r4, r7, pc}
 800c91e:	bf00      	nop
 800c920:	08016624 	.word	0x08016624

0800c924 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	331a      	adds	r3, #26
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe fb46 	bl	800afc4 <ld_word>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d001      	beq.n	800c942 <pick_lfn+0x1e>
 800c93e:	2300      	movs	r3, #0
 800c940:	e04d      	b.n	800c9de <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c94a:	1e5a      	subs	r2, r3, #1
 800c94c:	4613      	mov	r3, r2
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	4413      	add	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c958:	2301      	movs	r3, #1
 800c95a:	81fb      	strh	r3, [r7, #14]
 800c95c:	2300      	movs	r3, #0
 800c95e:	613b      	str	r3, [r7, #16]
 800c960:	e028      	b.n	800c9b4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c962:	4a21      	ldr	r2, [pc, #132]	@ (800c9e8 <pick_lfn+0xc4>)
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	4413      	add	r3, r2
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	461a      	mov	r2, r3
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	4413      	add	r3, r2
 800c970:	4618      	mov	r0, r3
 800c972:	f7fe fb27 	bl	800afc4 <ld_word>
 800c976:	4603      	mov	r3, r0
 800c978:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c97a:	89fb      	ldrh	r3, [r7, #14]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00f      	beq.n	800c9a0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	2bfe      	cmp	r3, #254	@ 0xfe
 800c984:	d901      	bls.n	800c98a <pick_lfn+0x66>
 800c986:	2300      	movs	r3, #0
 800c988:	e029      	b.n	800c9de <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c98a:	89bb      	ldrh	r3, [r7, #12]
 800c98c:	81fb      	strh	r3, [r7, #14]
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	1c5a      	adds	r2, r3, #1
 800c992:	617a      	str	r2, [r7, #20]
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	4413      	add	r3, r2
 800c99a:	89fa      	ldrh	r2, [r7, #14]
 800c99c:	801a      	strh	r2, [r3, #0]
 800c99e:	e006      	b.n	800c9ae <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c9a0:	89bb      	ldrh	r3, [r7, #12]
 800c9a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d001      	beq.n	800c9ae <pick_lfn+0x8a>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	e017      	b.n	800c9de <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	613b      	str	r3, [r7, #16]
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	2b0c      	cmp	r3, #12
 800c9b8:	d9d3      	bls.n	800c962 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00a      	beq.n	800c9dc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2bfe      	cmp	r3, #254	@ 0xfe
 800c9ca:	d901      	bls.n	800c9d0 <pick_lfn+0xac>
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	e006      	b.n	800c9de <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	005b      	lsls	r3, r3, #1
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	2200      	movs	r2, #0
 800c9da:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c9dc:	2301      	movs	r3, #1
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3718      	adds	r7, #24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	08016624 	.word	0x08016624

0800c9ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b088      	sub	sp, #32
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	4611      	mov	r1, r2
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	71fb      	strb	r3, [r7, #7]
 800c9fe:	4613      	mov	r3, r2
 800ca00:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	330d      	adds	r3, #13
 800ca06:	79ba      	ldrb	r2, [r7, #6]
 800ca08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	330b      	adds	r3, #11
 800ca0e:	220f      	movs	r2, #15
 800ca10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	330c      	adds	r3, #12
 800ca16:	2200      	movs	r2, #0
 800ca18:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	331a      	adds	r3, #26
 800ca1e:	2100      	movs	r1, #0
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fe fbe6 	bl	800b1f2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ca26:	79fb      	ldrb	r3, [r7, #7]
 800ca28:	1e5a      	subs	r2, r3, #1
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	005b      	lsls	r3, r3, #1
 800ca2e:	4413      	add	r3, r2
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ca36:	2300      	movs	r3, #0
 800ca38:	82fb      	strh	r3, [r7, #22]
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ca3e:	8afb      	ldrh	r3, [r7, #22]
 800ca40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d007      	beq.n	800ca58 <put_lfn+0x6c>
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	1c5a      	adds	r2, r3, #1
 800ca4c:	61fa      	str	r2, [r7, #28]
 800ca4e:	005b      	lsls	r3, r3, #1
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	4413      	add	r3, r2
 800ca54:	881b      	ldrh	r3, [r3, #0]
 800ca56:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ca58:	4a17      	ldr	r2, [pc, #92]	@ (800cab8 <put_lfn+0xcc>)
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	461a      	mov	r2, r3
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	4413      	add	r3, r2
 800ca66:	8afa      	ldrh	r2, [r7, #22]
 800ca68:	4611      	mov	r1, r2
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fe fbc1 	bl	800b1f2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ca70:	8afb      	ldrh	r3, [r7, #22]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d102      	bne.n	800ca7c <put_lfn+0x90>
 800ca76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca7a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	61bb      	str	r3, [r7, #24]
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	2b0c      	cmp	r3, #12
 800ca86:	d9da      	bls.n	800ca3e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ca88:	8afb      	ldrh	r3, [r7, #22]
 800ca8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d006      	beq.n	800caa0 <put_lfn+0xb4>
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	4413      	add	r3, r2
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d103      	bne.n	800caa8 <put_lfn+0xbc>
 800caa0:	79fb      	ldrb	r3, [r7, #7]
 800caa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caa6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	79fa      	ldrb	r2, [r7, #7]
 800caac:	701a      	strb	r2, [r3, #0]
}
 800caae:	bf00      	nop
 800cab0:	3720      	adds	r7, #32
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	08016624 	.word	0x08016624

0800cabc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08c      	sub	sp, #48	@ 0x30
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800caca:	220b      	movs	r2, #11
 800cacc:	68b9      	ldr	r1, [r7, #8]
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f7fe fc5e 	bl	800b390 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2b05      	cmp	r3, #5
 800cad8:	d92b      	bls.n	800cb32 <gen_numname+0x76>
		sr = seq;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cade:	e022      	b.n	800cb26 <gen_numname+0x6a>
			wc = *lfn++;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	1c9a      	adds	r2, r3, #2
 800cae4:	607a      	str	r2, [r7, #4]
 800cae6:	881b      	ldrh	r3, [r3, #0]
 800cae8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800caea:	2300      	movs	r3, #0
 800caec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800caee:	e017      	b.n	800cb20 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	005a      	lsls	r2, r3, #1
 800caf4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800caf6:	f003 0301 	and.w	r3, r3, #1
 800cafa:	4413      	add	r3, r2
 800cafc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cafe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb00:	085b      	lsrs	r3, r3, #1
 800cb02:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d005      	beq.n	800cb1a <gen_numname+0x5e>
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800cb14:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800cb18:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb22:	2b0f      	cmp	r3, #15
 800cb24:	d9e4      	bls.n	800caf0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1d8      	bne.n	800cae0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cb32:	2307      	movs	r3, #7
 800cb34:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	f003 030f 	and.w	r3, r3, #15
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	3330      	adds	r3, #48	@ 0x30
 800cb42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800cb46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb4a:	2b39      	cmp	r3, #57	@ 0x39
 800cb4c:	d904      	bls.n	800cb58 <gen_numname+0x9c>
 800cb4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb52:	3307      	adds	r3, #7
 800cb54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800cb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5a:	1e5a      	subs	r2, r3, #1
 800cb5c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800cb5e:	3330      	adds	r3, #48	@ 0x30
 800cb60:	443b      	add	r3, r7
 800cb62:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800cb66:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	091b      	lsrs	r3, r3, #4
 800cb6e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1df      	bne.n	800cb36 <gen_numname+0x7a>
	ns[i] = '~';
 800cb76:	f107 0214 	add.w	r2, r7, #20
 800cb7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb7c:	4413      	add	r3, r2
 800cb7e:	227e      	movs	r2, #126	@ 0x7e
 800cb80:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cb82:	2300      	movs	r3, #0
 800cb84:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb86:	e002      	b.n	800cb8e <gen_numname+0xd2>
 800cb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d205      	bcs.n	800cba2 <gen_numname+0xe6>
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9a:	4413      	add	r3, r2
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	2b20      	cmp	r3, #32
 800cba0:	d1f2      	bne.n	800cb88 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba4:	2b07      	cmp	r3, #7
 800cba6:	d807      	bhi.n	800cbb8 <gen_numname+0xfc>
 800cba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbaa:	1c5a      	adds	r2, r3, #1
 800cbac:	62ba      	str	r2, [r7, #40]	@ 0x28
 800cbae:	3330      	adds	r3, #48	@ 0x30
 800cbb0:	443b      	add	r3, r7
 800cbb2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cbb6:	e000      	b.n	800cbba <gen_numname+0xfe>
 800cbb8:	2120      	movs	r1, #32
 800cbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbc:	1c5a      	adds	r2, r3, #1
 800cbbe:	627a      	str	r2, [r7, #36]	@ 0x24
 800cbc0:	68fa      	ldr	r2, [r7, #12]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	460a      	mov	r2, r1
 800cbc6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbca:	2b07      	cmp	r3, #7
 800cbcc:	d9e9      	bls.n	800cba2 <gen_numname+0xe6>
}
 800cbce:	bf00      	nop
 800cbd0:	bf00      	nop
 800cbd2:	3730      	adds	r7, #48	@ 0x30
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cbe4:	230b      	movs	r3, #11
 800cbe6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	0852      	lsrs	r2, r2, #1
 800cbee:	01db      	lsls	r3, r3, #7
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	b2da      	uxtb	r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	1c59      	adds	r1, r3, #1
 800cbf8:	6079      	str	r1, [r7, #4]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	3b01      	subs	r3, #1
 800cc04:	60bb      	str	r3, [r7, #8]
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d1ed      	bne.n	800cbe8 <sum_sfn+0x10>
	return sum;
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3714      	adds	r7, #20
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr

0800cc1a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800cc1a:	b480      	push	{r7}
 800cc1c:	b087      	sub	sp, #28
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	3301      	adds	r3, #1
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	015b      	lsls	r3, r3, #5
 800cc2c:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800cc2e:	2300      	movs	r3, #0
 800cc30:	827b      	strh	r3, [r7, #18]
 800cc32:	2300      	movs	r3, #0
 800cc34:	617b      	str	r3, [r7, #20]
 800cc36:	e015      	b.n	800cc64 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	d103      	bne.n	800cc46 <xdir_sum+0x2c>
			i++;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	3301      	adds	r3, #1
 800cc42:	617b      	str	r3, [r7, #20]
 800cc44:	e00b      	b.n	800cc5e <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800cc46:	8a7b      	ldrh	r3, [r7, #18]
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	0852      	lsrs	r2, r2, #1
 800cc4c:	03db      	lsls	r3, r3, #15
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	6879      	ldr	r1, [r7, #4]
 800cc54:	697a      	ldr	r2, [r7, #20]
 800cc56:	440a      	add	r2, r1
 800cc58:	7812      	ldrb	r2, [r2, #0]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	3301      	adds	r3, #1
 800cc62:	617b      	str	r3, [r7, #20]
 800cc64:	697a      	ldr	r2, [r7, #20]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d3e5      	bcc.n	800cc38 <xdir_sum+0x1e>
		}
	}
	return sum;
 800cc6c:	8a7b      	ldrh	r3, [r7, #18]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	371c      	adds	r7, #28
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr

0800cc7a <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b084      	sub	sp, #16
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800cc86:	e01b      	b.n	800ccc0 <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800cc88:	89bb      	ldrh	r3, [r7, #12]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f002 fcec 	bl	800f668 <ff_wtoupper>
 800cc90:	4603      	mov	r3, r0
 800cc92:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800cc94:	89fb      	ldrh	r3, [r7, #14]
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	0852      	lsrs	r2, r2, #1
 800cc9a:	03db      	lsls	r3, r3, #15
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	b29a      	uxth	r2, r3
 800cca0:	89bb      	ldrh	r3, [r7, #12]
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	4413      	add	r3, r2
 800cca8:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800ccaa:	89fb      	ldrh	r3, [r7, #14]
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	0852      	lsrs	r2, r2, #1
 800ccb0:	03db      	lsls	r3, r3, #15
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	b29a      	uxth	r2, r3
 800ccb6:	89bb      	ldrh	r3, [r7, #12]
 800ccb8:	0a1b      	lsrs	r3, r3, #8
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	4413      	add	r3, r2
 800ccbe:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	1c9a      	adds	r2, r3, #2
 800ccc4:	607a      	str	r2, [r7, #4]
 800ccc6:	881b      	ldrh	r3, [r3, #0]
 800ccc8:	81bb      	strh	r3, [r7, #12]
 800ccca:	89bb      	ldrh	r3, [r7, #12]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1db      	bne.n	800cc88 <xname_sum+0xe>
	}
	return sum;
 800ccd0:	89fb      	ldrh	r3, [r7, #14]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3710      	adds	r7, #16
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
	...

0800ccdc <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800ccdc:	b590      	push	{r4, r7, lr}
 800ccde:	b087      	sub	sp, #28
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	f7fe fdaa 	bl	800b850 <move_window>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800cd00:	7bfb      	ldrb	r3, [r7, #15]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d001      	beq.n	800cd0a <load_xdir+0x2e>
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
 800cd08:	e09f      	b.n	800ce4a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	2b85      	cmp	r3, #133	@ 0x85
 800cd12:	d001      	beq.n	800cd18 <load_xdir+0x3c>
 800cd14:	2302      	movs	r3, #2
 800cd16:	e098      	b.n	800ce4a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd1c:	2220      	movs	r2, #32
 800cd1e:	4619      	mov	r1, r3
 800cd20:	6938      	ldr	r0, [r7, #16]
 800cd22:	f7fe fb35 	bl	800b390 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	015b      	lsls	r3, r3, #5
 800cd30:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	2b5f      	cmp	r3, #95	@ 0x5f
 800cd36:	d903      	bls.n	800cd40 <load_xdir+0x64>
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800cd3e:	d901      	bls.n	800cd44 <load_xdir+0x68>
 800cd40:	2302      	movs	r3, #2
 800cd42:	e082      	b.n	800ce4a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800cd44:	2100      	movs	r1, #0
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7ff fc0b 	bl	800c562 <dir_next>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d001      	beq.n	800cd5a <load_xdir+0x7e>
 800cd56:	7bfb      	ldrb	r3, [r7, #15]
 800cd58:	e077      	b.n	800ce4a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd62:	4619      	mov	r1, r3
 800cd64:	4610      	mov	r0, r2
 800cd66:	f7fe fd73 	bl	800b850 <move_window>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d001      	beq.n	800cd78 <load_xdir+0x9c>
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
 800cd76:	e068      	b.n	800ce4a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	2bc0      	cmp	r3, #192	@ 0xc0
 800cd80:	d001      	beq.n	800cd86 <load_xdir+0xaa>
 800cd82:	2302      	movs	r3, #2
 800cd84:	e061      	b.n	800ce4a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f103 0020 	add.w	r0, r3, #32
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd90:	2220      	movs	r2, #32
 800cd92:	4619      	mov	r1, r3
 800cd94:	f7fe fafc 	bl	800b390 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	3323      	adds	r3, #35	@ 0x23
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	332c      	adds	r3, #44	@ 0x2c
 800cda0:	4a2c      	ldr	r2, [pc, #176]	@ (800ce54 <load_xdir+0x178>)
 800cda2:	fba2 2303 	umull	r2, r3, r2, r3
 800cda6:	08db      	lsrs	r3, r3, #3
 800cda8:	015b      	lsls	r3, r3, #5
 800cdaa:	68ba      	ldr	r2, [r7, #8]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d201      	bcs.n	800cdb4 <load_xdir+0xd8>
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	e04a      	b.n	800ce4a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800cdb4:	2340      	movs	r3, #64	@ 0x40
 800cdb6:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800cdb8:	2100      	movs	r1, #0
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7ff fbd1 	bl	800c562 <dir_next>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d001      	beq.n	800cdce <load_xdir+0xf2>
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
 800cdcc:	e03d      	b.n	800ce4a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	4610      	mov	r0, r2
 800cdda:	f7fe fd39 	bl	800b850 <move_window>
 800cdde:	4603      	mov	r3, r0
 800cde0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800cde2:	7bfb      	ldrb	r3, [r7, #15]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d001      	beq.n	800cdec <load_xdir+0x110>
 800cde8:	7bfb      	ldrb	r3, [r7, #15]
 800cdea:	e02e      	b.n	800ce4a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	2bc1      	cmp	r3, #193	@ 0xc1
 800cdf4:	d001      	beq.n	800cdfa <load_xdir+0x11e>
 800cdf6:	2302      	movs	r3, #2
 800cdf8:	e027      	b.n	800ce4a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800ce00:	d208      	bcs.n	800ce14 <load_xdir+0x138>
 800ce02:	693a      	ldr	r2, [r7, #16]
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	18d0      	adds	r0, r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce0c:	2220      	movs	r2, #32
 800ce0e:	4619      	mov	r1, r3
 800ce10:	f7fe fabe 	bl	800b390 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	3320      	adds	r3, #32
 800ce18:	617b      	str	r3, [r7, #20]
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d3ca      	bcc.n	800cdb8 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800ce28:	d80e      	bhi.n	800ce48 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800ce2a:	6938      	ldr	r0, [r7, #16]
 800ce2c:	f7ff fef5 	bl	800cc1a <xdir_sum>
 800ce30:	4603      	mov	r3, r0
 800ce32:	461c      	mov	r4, r3
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	3302      	adds	r3, #2
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7fe f8c3 	bl	800afc4 <ld_word>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	429c      	cmp	r4, r3
 800ce42:	d001      	beq.n	800ce48 <load_xdir+0x16c>
 800ce44:	2302      	movs	r3, #2
 800ce46:	e000      	b.n	800ce4a <load_xdir+0x16e>
	}
	return FR_OK;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	371c      	adds	r7, #28
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd90      	pop	{r4, r7, pc}
 800ce52:	bf00      	nop
 800ce54:	88888889 	.word	0x88888889

0800ce58 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800ce58:	b5b0      	push	{r4, r5, r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	6808      	ldr	r0, [r1, #0]
 800ce66:	6879      	ldr	r1, [r7, #4]
 800ce68:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800ce6a:	6839      	ldr	r1, [r7, #0]
 800ce6c:	6a08      	ldr	r0, [r1, #32]
 800ce6e:	6879      	ldr	r1, [r7, #4]
 800ce70:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800ce76:	b2c8      	uxtb	r0, r1
 800ce78:	6879      	ldr	r1, [r7, #4]
 800ce7a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800ce80:	2000      	movs	r0, #0
 800ce82:	460c      	mov	r4, r1
 800ce84:	4605      	mov	r5, r0
 800ce86:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	6879      	ldr	r1, [r7, #4]
 800ce8e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce9e:	4619      	mov	r1, r3
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7ff fad8 	bl	800c456 <dir_sdi>
 800cea6:	4603      	mov	r3, r0
 800cea8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d104      	bne.n	800ceba <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f7ff ff13 	bl	800ccdc <load_xdir>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800ceba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bdb0      	pop	{r4, r5, r7, pc}

0800cec4 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800cec4:	b590      	push	{r4, r7, lr}
 800cec6:	b087      	sub	sp, #28
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	691b      	ldr	r3, [r3, #16]
 800ced2:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	1c9c      	adds	r4, r3, #2
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f7ff fe9e 	bl	800cc1a <xdir_sum>
 800cede:	4603      	mov	r3, r0
 800cee0:	4619      	mov	r1, r3
 800cee2:	4620      	mov	r0, r4
 800cee4:	f7fe f985 	bl	800b1f2 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3301      	adds	r3, #1
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	3301      	adds	r3, #1
 800cef0:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cef6:	4619      	mov	r1, r3
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7ff faac 	bl	800c456 <dir_sdi>
 800cefe:	4603      	mov	r3, r0
 800cf00:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800cf02:	e026      	b.n	800cf52 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	4610      	mov	r0, r2
 800cf10:	f7fe fc9e 	bl	800b850 <move_window>
 800cf14:	4603      	mov	r3, r0
 800cf16:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cf18:	7dfb      	ldrb	r3, [r7, #23]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d11d      	bne.n	800cf5a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf22:	2220      	movs	r2, #32
 800cf24:	68f9      	ldr	r1, [r7, #12]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fe fa32 	bl	800b390 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2201      	movs	r2, #1
 800cf32:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	3b01      	subs	r3, #1
 800cf38:	613b      	str	r3, [r7, #16]
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00e      	beq.n	800cf5e <store_xdir+0x9a>
		dirb += SZDIRE;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	3320      	adds	r3, #32
 800cf44:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800cf46:	2100      	movs	r1, #0
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f7ff fb0a 	bl	800c562 <dir_next>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d0d5      	beq.n	800cf04 <store_xdir+0x40>
 800cf58:	e002      	b.n	800cf60 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800cf5a:	bf00      	nop
 800cf5c:	e000      	b.n	800cf60 <store_xdir+0x9c>
		if (--nent == 0) break;
 800cf5e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800cf60:	7dfb      	ldrb	r3, [r7, #23]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d002      	beq.n	800cf6c <store_xdir+0xa8>
 800cf66:	7dfb      	ldrb	r3, [r7, #23]
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d101      	bne.n	800cf70 <store_xdir+0xac>
 800cf6c:	7dfb      	ldrb	r3, [r7, #23]
 800cf6e:	e000      	b.n	800cf72 <store_xdir+0xae>
 800cf70:	2302      	movs	r3, #2
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	371c      	adds	r7, #28
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd90      	pop	{r4, r7, pc}

0800cf7a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800cf7a:	b590      	push	{r4, r7, lr}
 800cf7c:	b085      	sub	sp, #20
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800cf84:	2240      	movs	r2, #64	@ 0x40
 800cf86:	2100      	movs	r1, #0
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f7fe fa22 	bl	800b3d2 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2285      	movs	r2, #133	@ 0x85
 800cf92:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	3320      	adds	r3, #32
 800cf98:	22c0      	movs	r2, #192	@ 0xc0
 800cf9a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	72bb      	strb	r3, [r7, #10]
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	72fb      	strb	r3, [r7, #11]
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	813b      	strh	r3, [r7, #8]
 800cfa8:	2340      	movs	r3, #64	@ 0x40
 800cfaa:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	1c5a      	adds	r2, r3, #1
 800cfb0:	60fa      	str	r2, [r7, #12]
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	22c1      	movs	r2, #193	@ 0xc1
 800cfb8:	701a      	strb	r2, [r3, #0]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	1c5a      	adds	r2, r3, #1
 800cfbe:	60fa      	str	r2, [r7, #12]
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	4413      	add	r3, r2
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800cfc8:	893b      	ldrh	r3, [r7, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00b      	beq.n	800cfe6 <create_xdir+0x6c>
 800cfce:	7abb      	ldrb	r3, [r7, #10]
 800cfd0:	005b      	lsls	r3, r3, #1
 800cfd2:	683a      	ldr	r2, [r7, #0]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	881b      	ldrh	r3, [r3, #0]
 800cfd8:	813b      	strh	r3, [r7, #8]
 800cfda:	893b      	ldrh	r3, [r7, #8]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <create_xdir+0x6c>
 800cfe0:	7abb      	ldrb	r3, [r7, #10]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	4413      	add	r3, r2
 800cfec:	893a      	ldrh	r2, [r7, #8]
 800cfee:	4611      	mov	r1, r2
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7fe f8fe 	bl	800b1f2 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	3302      	adds	r3, #2
 800cffa:	60fb      	str	r3, [r7, #12]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f003 031f 	and.w	r3, r3, #31
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1e0      	bne.n	800cfc8 <create_xdir+0x4e>
		nb++;
 800d006:	7afb      	ldrb	r3, [r7, #11]
 800d008:	3301      	adds	r3, #1
 800d00a:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800d00c:	7abb      	ldrb	r3, [r7, #10]
 800d00e:	005b      	lsls	r3, r3, #1
 800d010:	683a      	ldr	r2, [r7, #0]
 800d012:	4413      	add	r3, r2
 800d014:	881b      	ldrh	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1c8      	bne.n	800cfac <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	3323      	adds	r3, #35	@ 0x23
 800d01e:	7aba      	ldrb	r2, [r7, #10]
 800d020:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	3301      	adds	r3, #1
 800d026:	7afa      	ldrb	r2, [r7, #11]
 800d028:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800d030:	6838      	ldr	r0, [r7, #0]
 800d032:	f7ff fe22 	bl	800cc7a <xname_sum>
 800d036:	4603      	mov	r3, r0
 800d038:	4619      	mov	r1, r3
 800d03a:	4620      	mov	r0, r4
 800d03c:	f7fe f8d9 	bl	800b1f2 <st_word>
}
 800d040:	bf00      	nop
 800d042:	3714      	adds	r7, #20
 800d044:	46bd      	mov	sp, r7
 800d046:	bd90      	pop	{r4, r7, pc}

0800d048 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d052:	2304      	movs	r3, #4
 800d054:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d05c:	23ff      	movs	r3, #255	@ 0xff
 800d05e:	757b      	strb	r3, [r7, #21]
 800d060:	23ff      	movs	r3, #255	@ 0xff
 800d062:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d064:	e09f      	b.n	800d1a6 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d06a:	4619      	mov	r1, r3
 800d06c:	6938      	ldr	r0, [r7, #16]
 800d06e:	f7fe fbef 	bl	800b850 <move_window>
 800d072:	4603      	mov	r3, r0
 800d074:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d076:	7dfb      	ldrb	r3, [r7, #23]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f040 809a 	bne.w	800d1b2 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d086:	7dbb      	ldrb	r3, [r7, #22]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d102      	bne.n	800d092 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d08c:	2304      	movs	r3, #4
 800d08e:	75fb      	strb	r3, [r7, #23]
 800d090:	e096      	b.n	800d1c0 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	2b04      	cmp	r3, #4
 800d098:	d118      	bne.n	800d0cc <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800d09a:	7dbb      	ldrb	r3, [r7, #22]
 800d09c:	2b85      	cmp	r3, #133	@ 0x85
 800d09e:	d179      	bne.n	800d194 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f7ff fe17 	bl	800ccdc <load_xdir>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800d0b2:	7dfb      	ldrb	r3, [r7, #23]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d17e      	bne.n	800d1b6 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	691b      	ldr	r3, [r3, #16]
 800d0bc:	3304      	adds	r3, #4
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d0c4:	b2da      	uxtb	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	719a      	strb	r2, [r3, #6]
					}
					break;
 800d0ca:	e074      	b.n	800d1b6 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0d0:	330b      	adds	r3, #11
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d0d8:	73fb      	strb	r3, [r7, #15]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	7bfa      	ldrb	r2, [r7, #15]
 800d0de:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d0e0:	7dbb      	ldrb	r3, [r7, #22]
 800d0e2:	2be5      	cmp	r3, #229	@ 0xe5
 800d0e4:	d00e      	beq.n	800d104 <dir_read+0xbc>
 800d0e6:	7dbb      	ldrb	r3, [r7, #22]
 800d0e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0ea:	d00b      	beq.n	800d104 <dir_read+0xbc>
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
 800d0ee:	f023 0320 	bic.w	r3, r3, #32
 800d0f2:	2b08      	cmp	r3, #8
 800d0f4:	bf0c      	ite	eq
 800d0f6:	2301      	moveq	r3, #1
 800d0f8:	2300      	movne	r3, #0
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	4293      	cmp	r3, r2
 800d102:	d002      	beq.n	800d10a <dir_read+0xc2>
				ord = 0xFF;
 800d104:	23ff      	movs	r3, #255	@ 0xff
 800d106:	757b      	strb	r3, [r7, #21]
 800d108:	e044      	b.n	800d194 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d10a:	7bfb      	ldrb	r3, [r7, #15]
 800d10c:	2b0f      	cmp	r3, #15
 800d10e:	d12f      	bne.n	800d170 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d110:	7dbb      	ldrb	r3, [r7, #22]
 800d112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00d      	beq.n	800d136 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d11e:	7b5b      	ldrb	r3, [r3, #13]
 800d120:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d122:	7dbb      	ldrb	r3, [r7, #22]
 800d124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d128:	75bb      	strb	r3, [r7, #22]
 800d12a:	7dbb      	ldrb	r3, [r7, #22]
 800d12c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d136:	7dba      	ldrb	r2, [r7, #22]
 800d138:	7d7b      	ldrb	r3, [r7, #21]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d115      	bne.n	800d16a <dir_read+0x122>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d142:	330d      	adds	r3, #13
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	7d3a      	ldrb	r2, [r7, #20]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d10e      	bne.n	800d16a <dir_read+0x122>
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	68da      	ldr	r2, [r3, #12]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d154:	4619      	mov	r1, r3
 800d156:	4610      	mov	r0, r2
 800d158:	f7ff fbe4 	bl	800c924 <pick_lfn>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d003      	beq.n	800d16a <dir_read+0x122>
 800d162:	7d7b      	ldrb	r3, [r7, #21]
 800d164:	3b01      	subs	r3, #1
 800d166:	b2db      	uxtb	r3, r3
 800d168:	e000      	b.n	800d16c <dir_read+0x124>
 800d16a:	23ff      	movs	r3, #255	@ 0xff
 800d16c:	757b      	strb	r3, [r7, #21]
 800d16e:	e011      	b.n	800d194 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d170:	7d7b      	ldrb	r3, [r7, #21]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d109      	bne.n	800d18a <dir_read+0x142>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7ff fd2c 	bl	800cbd8 <sum_sfn>
 800d180:	4603      	mov	r3, r0
 800d182:	461a      	mov	r2, r3
 800d184:	7d3b      	ldrb	r3, [r7, #20]
 800d186:	4293      	cmp	r3, r2
 800d188:	d017      	beq.n	800d1ba <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f04f 32ff 	mov.w	r2, #4294967295
 800d190:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800d192:	e012      	b.n	800d1ba <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d194:	2100      	movs	r1, #0
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f7ff f9e3 	bl	800c562 <dir_next>
 800d19c:	4603      	mov	r3, r0
 800d19e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d1a0:	7dfb      	ldrb	r3, [r7, #23]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10b      	bne.n	800d1be <dir_read+0x176>
	while (dp->sect) {
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	f47f af5b 	bne.w	800d066 <dir_read+0x1e>
 800d1b0:	e006      	b.n	800d1c0 <dir_read+0x178>
		if (res != FR_OK) break;
 800d1b2:	bf00      	nop
 800d1b4:	e004      	b.n	800d1c0 <dir_read+0x178>
					break;
 800d1b6:	bf00      	nop
 800d1b8:	e002      	b.n	800d1c0 <dir_read+0x178>
					break;
 800d1ba:	bf00      	nop
 800d1bc:	e000      	b.n	800d1c0 <dir_read+0x178>
		if (res != FR_OK) break;
 800d1be:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d002      	beq.n	800d1cc <dir_read+0x184>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800d1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d1d6:	b590      	push	{r4, r7, lr}
 800d1d8:	b089      	sub	sp, #36	@ 0x24
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d1e4:	2100      	movs	r1, #0
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7ff f935 	bl	800c456 <dir_sdi>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800d1f0:	7ffb      	ldrb	r3, [r7, #31]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d001      	beq.n	800d1fa <dir_find+0x24>
 800d1f6:	7ffb      	ldrb	r3, [r7, #31]
 800d1f8:	e113      	b.n	800d422 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	2b04      	cmp	r3, #4
 800d200:	d165      	bne.n	800d2ce <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	4618      	mov	r0, r3
 800d208:	f7ff fd37 	bl	800cc7a <xname_sum>
 800d20c:	4603      	mov	r3, r0
 800d20e:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800d210:	e050      	b.n	800d2b4 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	3324      	adds	r3, #36	@ 0x24
 800d218:	4618      	mov	r0, r3
 800d21a:	f7fd fed3 	bl	800afc4 <ld_word>
 800d21e:	4603      	mov	r3, r0
 800d220:	461a      	mov	r2, r3
 800d222:	893b      	ldrh	r3, [r7, #8]
 800d224:	4293      	cmp	r3, r2
 800d226:	d144      	bne.n	800d2b2 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800d230:	76fb      	strb	r3, [r7, #27]
 800d232:	2340      	movs	r3, #64	@ 0x40
 800d234:	617b      	str	r3, [r7, #20]
 800d236:	2300      	movs	r3, #0
 800d238:	613b      	str	r3, [r7, #16]
 800d23a:	e029      	b.n	800d290 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	f003 031f 	and.w	r3, r3, #31
 800d242:	2b00      	cmp	r3, #0
 800d244:	d102      	bne.n	800d24c <dir_find+0x76>
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	3302      	adds	r3, #2
 800d24a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	691a      	ldr	r2, [r3, #16]
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	4413      	add	r3, r2
 800d254:	4618      	mov	r0, r3
 800d256:	f7fd feb5 	bl	800afc4 <ld_word>
 800d25a:	4603      	mov	r3, r0
 800d25c:	4618      	mov	r0, r3
 800d25e:	f002 fa03 	bl	800f668 <ff_wtoupper>
 800d262:	4603      	mov	r3, r0
 800d264:	461c      	mov	r4, r3
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	68da      	ldr	r2, [r3, #12]
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	005b      	lsls	r3, r3, #1
 800d26e:	4413      	add	r3, r2
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	4618      	mov	r0, r3
 800d274:	f002 f9f8 	bl	800f668 <ff_wtoupper>
 800d278:	4603      	mov	r3, r0
 800d27a:	429c      	cmp	r4, r3
 800d27c:	d10c      	bne.n	800d298 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d27e:	7efb      	ldrb	r3, [r7, #27]
 800d280:	3b01      	subs	r3, #1
 800d282:	76fb      	strb	r3, [r7, #27]
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	3302      	adds	r3, #2
 800d288:	617b      	str	r3, [r7, #20]
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	3301      	adds	r3, #1
 800d28e:	613b      	str	r3, [r7, #16]
 800d290:	7efb      	ldrb	r3, [r7, #27]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1d2      	bne.n	800d23c <dir_find+0x66>
 800d296:	e000      	b.n	800d29a <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d298:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d29a:	7efb      	ldrb	r3, [r7, #27]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d109      	bne.n	800d2b4 <dir_find+0xde>
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	68da      	ldr	r2, [r3, #12]
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	005b      	lsls	r3, r3, #1
 800d2a8:	4413      	add	r3, r2
 800d2aa:	881b      	ldrh	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00b      	beq.n	800d2c8 <dir_find+0xf2>
 800d2b0:	e000      	b.n	800d2b4 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800d2b2:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7ff fec6 	bl	800d048 <dir_read>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	77fb      	strb	r3, [r7, #31]
 800d2c0:	7ffb      	ldrb	r3, [r7, #31]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d0a5      	beq.n	800d212 <dir_find+0x3c>
 800d2c6:	e000      	b.n	800d2ca <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d2c8:	bf00      	nop
		}
		return res;
 800d2ca:	7ffb      	ldrb	r3, [r7, #31]
 800d2cc:	e0a9      	b.n	800d422 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d2ce:	23ff      	movs	r3, #255	@ 0xff
 800d2d0:	773b      	strb	r3, [r7, #28]
 800d2d2:	7f3b      	ldrb	r3, [r7, #28]
 800d2d4:	777b      	strb	r3, [r7, #29]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2dc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f7fe fab3 	bl	800b850 <move_window>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800d2ee:	7ffb      	ldrb	r3, [r7, #31]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f040 8090 	bne.w	800d416 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d2fe:	7fbb      	ldrb	r3, [r7, #30]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d102      	bne.n	800d30a <dir_find+0x134>
 800d304:	2304      	movs	r3, #4
 800d306:	77fb      	strb	r3, [r7, #31]
 800d308:	e08a      	b.n	800d420 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d30e:	330b      	adds	r3, #11
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d316:	72fb      	strb	r3, [r7, #11]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7afa      	ldrb	r2, [r7, #11]
 800d31c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d31e:	7fbb      	ldrb	r3, [r7, #30]
 800d320:	2be5      	cmp	r3, #229	@ 0xe5
 800d322:	d007      	beq.n	800d334 <dir_find+0x15e>
 800d324:	7afb      	ldrb	r3, [r7, #11]
 800d326:	f003 0308 	and.w	r3, r3, #8
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d009      	beq.n	800d342 <dir_find+0x16c>
 800d32e:	7afb      	ldrb	r3, [r7, #11]
 800d330:	2b0f      	cmp	r3, #15
 800d332:	d006      	beq.n	800d342 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d334:	23ff      	movs	r3, #255	@ 0xff
 800d336:	777b      	strb	r3, [r7, #29]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f04f 32ff 	mov.w	r2, #4294967295
 800d33e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800d340:	e05e      	b.n	800d400 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d342:	7afb      	ldrb	r3, [r7, #11]
 800d344:	2b0f      	cmp	r3, #15
 800d346:	d136      	bne.n	800d3b6 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d34e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d352:	2b00      	cmp	r3, #0
 800d354:	d154      	bne.n	800d400 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d356:	7fbb      	ldrb	r3, [r7, #30]
 800d358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00d      	beq.n	800d37c <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d364:	7b5b      	ldrb	r3, [r3, #13]
 800d366:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d368:	7fbb      	ldrb	r3, [r7, #30]
 800d36a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d36e:	77bb      	strb	r3, [r7, #30]
 800d370:	7fbb      	ldrb	r3, [r7, #30]
 800d372:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d37c:	7fba      	ldrb	r2, [r7, #30]
 800d37e:	7f7b      	ldrb	r3, [r7, #29]
 800d380:	429a      	cmp	r2, r3
 800d382:	d115      	bne.n	800d3b0 <dir_find+0x1da>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d388:	330d      	adds	r3, #13
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	7f3a      	ldrb	r2, [r7, #28]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d10e      	bne.n	800d3b0 <dir_find+0x1da>
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	68da      	ldr	r2, [r3, #12]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d39a:	4619      	mov	r1, r3
 800d39c:	4610      	mov	r0, r2
 800d39e:	f7ff fa51 	bl	800c844 <cmp_lfn>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d003      	beq.n	800d3b0 <dir_find+0x1da>
 800d3a8:	7f7b      	ldrb	r3, [r7, #29]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	e000      	b.n	800d3b2 <dir_find+0x1dc>
 800d3b0:	23ff      	movs	r3, #255	@ 0xff
 800d3b2:	777b      	strb	r3, [r7, #29]
 800d3b4:	e024      	b.n	800d400 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d3b6:	7f7b      	ldrb	r3, [r7, #29]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d109      	bne.n	800d3d0 <dir_find+0x1fa>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7ff fc09 	bl	800cbd8 <sum_sfn>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	7f3b      	ldrb	r3, [r7, #28]
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d024      	beq.n	800d41a <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d3d6:	f003 0301 	and.w	r3, r3, #1
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10a      	bne.n	800d3f4 <dir_find+0x21e>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	3340      	adds	r3, #64	@ 0x40
 800d3e6:	220b      	movs	r2, #11
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	f7fe f80d 	bl	800b408 <mem_cmp>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d014      	beq.n	800d41e <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d3f4:	23ff      	movs	r3, #255	@ 0xff
 800d3f6:	777b      	strb	r3, [r7, #29]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d3fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d400:	2100      	movs	r1, #0
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f7ff f8ad 	bl	800c562 <dir_next>
 800d408:	4603      	mov	r3, r0
 800d40a:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800d40c:	7ffb      	ldrb	r3, [r7, #31]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f43f af65 	beq.w	800d2de <dir_find+0x108>
 800d414:	e004      	b.n	800d420 <dir_find+0x24a>
		if (res != FR_OK) break;
 800d416:	bf00      	nop
 800d418:	e002      	b.n	800d420 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d41a:	bf00      	nop
 800d41c:	e000      	b.n	800d420 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d41e:	bf00      	nop

	return res;
 800d420:	7ffb      	ldrb	r3, [r7, #31]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3724      	adds	r7, #36	@ 0x24
 800d426:	46bd      	mov	sp, r7
 800d428:	bd90      	pop	{r4, r7, pc}
	...

0800d42c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d42c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d430:	b0a0      	sub	sp, #128	@ 0x80
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d442:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d001      	beq.n	800d44e <dir_register+0x22>
 800d44a:	2306      	movs	r3, #6
 800d44c:	e18e      	b.n	800d76c <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d44e:	2300      	movs	r3, #0
 800d450:	677b      	str	r3, [r7, #116]	@ 0x74
 800d452:	e002      	b.n	800d45a <dir_register+0x2e>
 800d454:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d456:	3301      	adds	r3, #1
 800d458:	677b      	str	r3, [r7, #116]	@ 0x74
 800d45a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d45c:	68da      	ldr	r2, [r3, #12]
 800d45e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d460:	005b      	lsls	r3, r3, #1
 800d462:	4413      	add	r3, r2
 800d464:	881b      	ldrh	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1f4      	bne.n	800d454 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d46a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	2b04      	cmp	r3, #4
 800d470:	f040 809f 	bne.w	800d5b2 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d476:	330e      	adds	r3, #14
 800d478:	4aa2      	ldr	r2, [pc, #648]	@ (800d704 <dir_register+0x2d8>)
 800d47a:	fba2 2303 	umull	r2, r3, r2, r3
 800d47e:	08db      	lsrs	r3, r3, #3
 800d480:	3302      	adds	r3, #2
 800d482:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800d484:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7ff f940 	bl	800c70c <dir_alloc>
 800d48c:	4603      	mov	r3, r0
 800d48e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800d492:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d496:	2b00      	cmp	r3, #0
 800d498:	d002      	beq.n	800d4a0 <dir_register+0x74>
 800d49a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d49e:	e165      	b.n	800d76c <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d4a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4a6:	3b01      	subs	r3, #1
 800d4a8:	015b      	lsls	r3, r3, #5
 800d4aa:	1ad2      	subs	r2, r2, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d072      	beq.n	800d59e <dir_register+0x172>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	79db      	ldrb	r3, [r3, #7]
 800d4bc:	f003 0304 	and.w	r3, r3, #4
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d06c      	beq.n	800d59e <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d4ca:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d4cc:	8949      	ldrh	r1, [r1, #10]
 800d4ce:	0249      	lsls	r1, r1, #9
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	4605      	mov	r5, r0
 800d4d6:	eb12 0804 	adds.w	r8, r2, r4
 800d4da:	eb43 0905 	adc.w	r9, r3, r5
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7fe fd5c 	bl	800bfa4 <fill_first_frag>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d4f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d002      	beq.n	800d500 <dir_register+0xd4>
 800d4fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d4fe:	e135      	b.n	800d76c <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d506:	f04f 32ff 	mov.w	r2, #4294967295
 800d50a:	4619      	mov	r1, r3
 800d50c:	f7fe fd79 	bl	800c002 <fill_last_frag>
 800d510:	4603      	mov	r3, r0
 800d512:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d516:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d002      	beq.n	800d524 <dir_register+0xf8>
 800d51e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d522:	e123      	b.n	800d76c <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	f107 0308 	add.w	r3, r7, #8
 800d52a:	4611      	mov	r1, r2
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff fc93 	bl	800ce58 <load_obj_dir>
 800d532:	4603      	mov	r3, r0
 800d534:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d538:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d002      	beq.n	800d546 <dir_register+0x11a>
 800d540:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d544:	e112      	b.n	800d76c <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800d546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d548:	691b      	ldr	r3, [r3, #16]
 800d54a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d554:	4608      	mov	r0, r1
 800d556:	f7fd fe93 	bl	800b280 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800d55a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d568:	4608      	mov	r0, r1
 800d56a:	f7fd fe89 	bl	800b280 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	79da      	ldrb	r2, [r3, #7]
 800d572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	3321      	adds	r3, #33	@ 0x21
 800d578:	f042 0201 	orr.w	r2, r2, #1
 800d57c:	b2d2      	uxtb	r2, r2
 800d57e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800d580:	f107 0308 	add.w	r3, r7, #8
 800d584:	4618      	mov	r0, r3
 800d586:	f7ff fc9d 	bl	800cec4 <store_xdir>
 800d58a:	4603      	mov	r3, r0
 800d58c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d590:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d594:	2b00      	cmp	r3, #0
 800d596:	d002      	beq.n	800d59e <dir_register+0x172>
 800d598:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d59c:	e0e6      	b.n	800d76c <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800d59e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5a0:	691a      	ldr	r2, [r3, #16]
 800d5a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	4610      	mov	r0, r2
 800d5aa:	f7ff fce6 	bl	800cf7a <create_xdir>
		return FR_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e0dc      	b.n	800d76c <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800d5b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d5bc:	220c      	movs	r2, #12
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fd fee6 	bl	800b390 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d5c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d5c8:	f003 0301 	and.w	r3, r3, #1
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d033      	beq.n	800d638 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2240      	movs	r2, #64	@ 0x40
 800d5d4:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800d5d8:	2301      	movs	r3, #1
 800d5da:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d5dc:	e016      	b.n	800d60c <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800d5e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5e6:	68da      	ldr	r2, [r3, #12]
 800d5e8:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800d5ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5ee:	f7ff fa65 	bl	800cabc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7ff fdef 	bl	800d1d6 <dir_find>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800d5fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d602:	2b00      	cmp	r3, #0
 800d604:	d106      	bne.n	800d614 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800d606:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d608:	3301      	adds	r3, #1
 800d60a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d60c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d60e:	2b63      	cmp	r3, #99	@ 0x63
 800d610:	d9e5      	bls.n	800d5de <dir_register+0x1b2>
 800d612:	e000      	b.n	800d616 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800d614:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d616:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d618:	2b64      	cmp	r3, #100	@ 0x64
 800d61a:	d101      	bne.n	800d620 <dir_register+0x1f4>
 800d61c:	2307      	movs	r3, #7
 800d61e:	e0a5      	b.n	800d76c <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d620:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d624:	2b04      	cmp	r3, #4
 800d626:	d002      	beq.n	800d62e <dir_register+0x202>
 800d628:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d62c:	e09e      	b.n	800d76c <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d62e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d638:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d63c:	f003 0302 	and.w	r3, r3, #2
 800d640:	2b00      	cmp	r3, #0
 800d642:	d007      	beq.n	800d654 <dir_register+0x228>
 800d644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d646:	330c      	adds	r3, #12
 800d648:	4a2f      	ldr	r2, [pc, #188]	@ (800d708 <dir_register+0x2dc>)
 800d64a:	fba2 2303 	umull	r2, r3, r2, r3
 800d64e:	089b      	lsrs	r3, r3, #2
 800d650:	3301      	adds	r3, #1
 800d652:	e000      	b.n	800d656 <dir_register+0x22a>
 800d654:	2301      	movs	r3, #1
 800d656:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d658:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f7ff f856 	bl	800c70c <dir_alloc>
 800d660:	4603      	mov	r3, r0
 800d662:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d666:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d14f      	bne.n	800d70e <dir_register+0x2e2>
 800d66e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d670:	3b01      	subs	r3, #1
 800d672:	673b      	str	r3, [r7, #112]	@ 0x70
 800d674:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d676:	2b00      	cmp	r3, #0
 800d678:	d049      	beq.n	800d70e <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d67e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d680:	015b      	lsls	r3, r3, #5
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	4619      	mov	r1, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7fe fee5 	bl	800c456 <dir_sdi>
 800d68c:	4603      	mov	r3, r0
 800d68e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800d692:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d696:	2b00      	cmp	r3, #0
 800d698:	d139      	bne.n	800d70e <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	3340      	adds	r3, #64	@ 0x40
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7ff fa9a 	bl	800cbd8 <sum_sfn>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d6b2:	f7fe f8cd 	bl	800b850 <move_window>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800d6bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d123      	bne.n	800d70c <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d6c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6c6:	68d8      	ldr	r0, [r3, #12]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d6cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d6d4:	f7ff f98a 	bl	800c9ec <put_lfn>
				fs->wflag = 1;
 800d6d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6da:	2201      	movs	r2, #1
 800d6dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d6de:	2100      	movs	r1, #0
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7fe ff3e 	bl	800c562 <dir_next>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800d6ec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10c      	bne.n	800d70e <dir_register+0x2e2>
 800d6f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d6fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1d4      	bne.n	800d6aa <dir_register+0x27e>
 800d700:	e005      	b.n	800d70e <dir_register+0x2e2>
 800d702:	bf00      	nop
 800d704:	88888889 	.word	0x88888889
 800d708:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800d70c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d70e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d712:	2b00      	cmp	r3, #0
 800d714:	d128      	bne.n	800d768 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d71a:	4619      	mov	r1, r3
 800d71c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d71e:	f7fe f897 	bl	800b850 <move_window>
 800d722:	4603      	mov	r3, r0
 800d724:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800d728:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d11b      	bne.n	800d768 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d734:	2220      	movs	r2, #32
 800d736:	2100      	movs	r1, #0
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fd fe4a 	bl	800b3d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	3340      	adds	r3, #64	@ 0x40
 800d746:	220b      	movs	r2, #11
 800d748:	4619      	mov	r1, r3
 800d74a:	f7fd fe21 	bl	800b390 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d758:	330c      	adds	r3, #12
 800d75a:	f002 0218 	and.w	r2, r2, #24
 800d75e:	b2d2      	uxtb	r2, r2
 800d760:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d762:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d764:	2201      	movs	r2, #1
 800d766:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d768:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3780      	adds	r7, #128	@ 0x80
 800d770:	46bd      	mov	sp, r7
 800d772:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d776:	bf00      	nop

0800d778 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b08a      	sub	sp, #40	@ 0x28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	613b      	str	r3, [r7, #16]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	60fb      	str	r3, [r7, #12]
 800d790:	2300      	movs	r3, #0
 800d792:	617b      	str	r3, [r7, #20]
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	1c5a      	adds	r2, r3, #1
 800d79c:	61ba      	str	r2, [r7, #24]
 800d79e:	693a      	ldr	r2, [r7, #16]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d7a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7a8:	2b1f      	cmp	r3, #31
 800d7aa:	d940      	bls.n	800d82e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d7ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7ae:	2b2f      	cmp	r3, #47	@ 0x2f
 800d7b0:	d006      	beq.n	800d7c0 <create_name+0x48>
 800d7b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800d7b6:	d110      	bne.n	800d7da <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d7b8:	e002      	b.n	800d7c0 <create_name+0x48>
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	61bb      	str	r3, [r7, #24]
 800d7c0:	693a      	ldr	r2, [r7, #16]
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	2b2f      	cmp	r3, #47	@ 0x2f
 800d7ca:	d0f6      	beq.n	800d7ba <create_name+0x42>
 800d7cc:	693a      	ldr	r2, [r7, #16]
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	2b5c      	cmp	r3, #92	@ 0x5c
 800d7d6:	d0f0      	beq.n	800d7ba <create_name+0x42>
			break;
 800d7d8:	e02a      	b.n	800d830 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	2bfe      	cmp	r3, #254	@ 0xfe
 800d7de:	d901      	bls.n	800d7e4 <create_name+0x6c>
 800d7e0:	2306      	movs	r3, #6
 800d7e2:	e17d      	b.n	800dae0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d7e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d7ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7ec:	2101      	movs	r1, #1
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f001 fefe 	bl	800f5f0 <ff_convert>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d7f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d101      	bne.n	800d802 <create_name+0x8a>
 800d7fe:	2306      	movs	r3, #6
 800d800:	e16e      	b.n	800dae0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d802:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d804:	2b7f      	cmp	r3, #127	@ 0x7f
 800d806:	d809      	bhi.n	800d81c <create_name+0xa4>
 800d808:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d80a:	4619      	mov	r1, r3
 800d80c:	488d      	ldr	r0, [pc, #564]	@ (800da44 <create_name+0x2cc>)
 800d80e:	f7fd fe22 	bl	800b456 <chk_chr>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d001      	beq.n	800d81c <create_name+0xa4>
 800d818:	2306      	movs	r3, #6
 800d81a:	e161      	b.n	800dae0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	617a      	str	r2, [r7, #20]
 800d822:	005b      	lsls	r3, r3, #1
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	4413      	add	r3, r2
 800d828:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d82a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d82c:	e7b4      	b.n	800d798 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d82e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d830:	693a      	ldr	r2, [r7, #16]
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	441a      	add	r2, r3
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d83a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d83c:	2b1f      	cmp	r3, #31
 800d83e:	d801      	bhi.n	800d844 <create_name+0xcc>
 800d840:	2304      	movs	r3, #4
 800d842:	e000      	b.n	800d846 <create_name+0xce>
 800d844:	2300      	movs	r3, #0
 800d846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d84a:	e011      	b.n	800d870 <create_name+0xf8>
		w = lfn[di - 1];
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d852:	3b01      	subs	r3, #1
 800d854:	005b      	lsls	r3, r3, #1
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	4413      	add	r3, r2
 800d85a:	881b      	ldrh	r3, [r3, #0]
 800d85c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800d85e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d860:	2b20      	cmp	r3, #32
 800d862:	d002      	beq.n	800d86a <create_name+0xf2>
 800d864:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d866:	2b2e      	cmp	r3, #46	@ 0x2e
 800d868:	d106      	bne.n	800d878 <create_name+0x100>
		di--;
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	3b01      	subs	r3, #1
 800d86e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d1ea      	bne.n	800d84c <create_name+0xd4>
 800d876:	e000      	b.n	800d87a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d878:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	005b      	lsls	r3, r3, #1
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	4413      	add	r3, r2
 800d882:	2200      	movs	r2, #0
 800d884:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <create_name+0x118>
 800d88c:	2306      	movs	r3, #6
 800d88e:	e127      	b.n	800dae0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	3340      	adds	r3, #64	@ 0x40
 800d894:	220b      	movs	r2, #11
 800d896:	2120      	movs	r1, #32
 800d898:	4618      	mov	r0, r3
 800d89a:	f7fd fd9a 	bl	800b3d2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d89e:	2300      	movs	r3, #0
 800d8a0:	61bb      	str	r3, [r7, #24]
 800d8a2:	e002      	b.n	800d8aa <create_name+0x132>
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	61bb      	str	r3, [r7, #24]
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	005b      	lsls	r3, r3, #1
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	2b20      	cmp	r3, #32
 800d8b6:	d0f5      	beq.n	800d8a4 <create_name+0x12c>
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	4413      	add	r3, r2
 800d8c0:	881b      	ldrh	r3, [r3, #0]
 800d8c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8c4:	d0ee      	beq.n	800d8a4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d009      	beq.n	800d8e0 <create_name+0x168>
 800d8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8d0:	f043 0303 	orr.w	r3, r3, #3
 800d8d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d8d8:	e002      	b.n	800d8e0 <create_name+0x168>
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	617b      	str	r3, [r7, #20]
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d009      	beq.n	800d8fa <create_name+0x182>
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	005b      	lsls	r3, r3, #1
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	881b      	ldrh	r3, [r3, #0]
 800d8f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8f8:	d1ef      	bne.n	800d8da <create_name+0x162>

	i = b = 0; ni = 8;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d900:	2300      	movs	r3, #0
 800d902:	623b      	str	r3, [r7, #32]
 800d904:	2308      	movs	r3, #8
 800d906:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	61ba      	str	r2, [r7, #24]
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	68fa      	ldr	r2, [r7, #12]
 800d912:	4413      	add	r3, r2
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d918:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f000 8090 	beq.w	800da40 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d920:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d922:	2b20      	cmp	r3, #32
 800d924:	d006      	beq.n	800d934 <create_name+0x1bc>
 800d926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d928:	2b2e      	cmp	r3, #46	@ 0x2e
 800d92a:	d10a      	bne.n	800d942 <create_name+0x1ca>
 800d92c:	69ba      	ldr	r2, [r7, #24]
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	429a      	cmp	r2, r3
 800d932:	d006      	beq.n	800d942 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d934:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d938:	f043 0303 	orr.w	r3, r3, #3
 800d93c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d940:	e07d      	b.n	800da3e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d942:	6a3a      	ldr	r2, [r7, #32]
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	429a      	cmp	r2, r3
 800d948:	d203      	bcs.n	800d952 <create_name+0x1da>
 800d94a:	69ba      	ldr	r2, [r7, #24]
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d123      	bne.n	800d99a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	2b0b      	cmp	r3, #11
 800d956:	d106      	bne.n	800d966 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d95c:	f043 0303 	orr.w	r3, r3, #3
 800d960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d964:	e075      	b.n	800da52 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d966:	69ba      	ldr	r2, [r7, #24]
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d005      	beq.n	800d97a <create_name+0x202>
 800d96e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d972:	f043 0303 	orr.w	r3, r3, #3
 800d976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800d97a:	69ba      	ldr	r2, [r7, #24]
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d866      	bhi.n	800da50 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	61bb      	str	r3, [r7, #24]
 800d986:	2308      	movs	r3, #8
 800d988:	623b      	str	r3, [r7, #32]
 800d98a:	230b      	movs	r3, #11
 800d98c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d98e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d998:	e051      	b.n	800da3e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d99a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d99c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d99e:	d914      	bls.n	800d9ca <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d9a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f001 fe23 	bl	800f5f0 <ff_convert>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d9ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d004      	beq.n	800d9be <create_name+0x246>
 800d9b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9b6:	3b80      	subs	r3, #128	@ 0x80
 800d9b8:	4a23      	ldr	r2, [pc, #140]	@ (800da48 <create_name+0x2d0>)
 800d9ba:	5cd3      	ldrb	r3, [r2, r3]
 800d9bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d9be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9c2:	f043 0302 	orr.w	r3, r3, #2
 800d9c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d9ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d007      	beq.n	800d9e0 <create_name+0x268>
 800d9d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	481d      	ldr	r0, [pc, #116]	@ (800da4c <create_name+0x2d4>)
 800d9d6:	f7fd fd3e 	bl	800b456 <chk_chr>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d008      	beq.n	800d9f2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d9e0:	235f      	movs	r3, #95	@ 0x5f
 800d9e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9e8:	f043 0303 	orr.w	r3, r3, #3
 800d9ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d9f0:	e01b      	b.n	800da2a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d9f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9f4:	2b40      	cmp	r3, #64	@ 0x40
 800d9f6:	d909      	bls.n	800da0c <create_name+0x294>
 800d9f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9fa:	2b5a      	cmp	r3, #90	@ 0x5a
 800d9fc:	d806      	bhi.n	800da0c <create_name+0x294>
					b |= 2;
 800d9fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da02:	f043 0302 	orr.w	r3, r3, #2
 800da06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800da0a:	e00e      	b.n	800da2a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800da0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da0e:	2b60      	cmp	r3, #96	@ 0x60
 800da10:	d90b      	bls.n	800da2a <create_name+0x2b2>
 800da12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da14:	2b7a      	cmp	r3, #122	@ 0x7a
 800da16:	d808      	bhi.n	800da2a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800da18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da1c:	f043 0301 	orr.w	r3, r3, #1
 800da20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800da24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da26:	3b20      	subs	r3, #32
 800da28:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800da2a:	6a3b      	ldr	r3, [r7, #32]
 800da2c:	1c5a      	adds	r2, r3, #1
 800da2e:	623a      	str	r2, [r7, #32]
 800da30:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800da32:	b2d1      	uxtb	r1, r2
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	4413      	add	r3, r2
 800da38:	460a      	mov	r2, r1
 800da3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800da3e:	e763      	b.n	800d908 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800da40:	bf00      	nop
 800da42:	e006      	b.n	800da52 <create_name+0x2da>
 800da44:	08016514 	.word	0x08016514
 800da48:	080165a4 	.word	0x080165a4
 800da4c:	08016520 	.word	0x08016520
			if (si > di) break;			/* No extension */
 800da50:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800da58:	2be5      	cmp	r3, #229	@ 0xe5
 800da5a:	d103      	bne.n	800da64 <create_name+0x2ec>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2205      	movs	r2, #5
 800da60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	2b08      	cmp	r3, #8
 800da68:	d104      	bne.n	800da74 <create_name+0x2fc>
 800da6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800da74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da78:	f003 030c 	and.w	r3, r3, #12
 800da7c:	2b0c      	cmp	r3, #12
 800da7e:	d005      	beq.n	800da8c <create_name+0x314>
 800da80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da84:	f003 0303 	and.w	r3, r3, #3
 800da88:	2b03      	cmp	r3, #3
 800da8a:	d105      	bne.n	800da98 <create_name+0x320>
 800da8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da90:	f043 0302 	orr.w	r3, r3, #2
 800da94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800da98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da9c:	f003 0302 	and.w	r3, r3, #2
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d117      	bne.n	800dad4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800daa4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800daa8:	f003 0303 	and.w	r3, r3, #3
 800daac:	2b01      	cmp	r3, #1
 800daae:	d105      	bne.n	800dabc <create_name+0x344>
 800dab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dab4:	f043 0310 	orr.w	r3, r3, #16
 800dab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dabc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dac0:	f003 030c 	and.w	r3, r3, #12
 800dac4:	2b04      	cmp	r3, #4
 800dac6:	d105      	bne.n	800dad4 <create_name+0x35c>
 800dac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dacc:	f043 0308 	orr.w	r3, r3, #8
 800dad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800dada:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800dade:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3728      	adds	r7, #40	@ 0x28
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b086      	sub	sp, #24
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dafc:	e002      	b.n	800db04 <follow_path+0x1c>
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	3301      	adds	r3, #1
 800db02:	603b      	str	r3, [r7, #0]
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b2f      	cmp	r3, #47	@ 0x2f
 800db0a:	d0f8      	beq.n	800dafe <follow_path+0x16>
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	2b5c      	cmp	r3, #92	@ 0x5c
 800db12:	d0f4      	beq.n	800dafe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	2200      	movs	r2, #0
 800db18:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	2200      	movs	r2, #0
 800db1e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	2b1f      	cmp	r3, #31
 800db26:	d80a      	bhi.n	800db3e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2280      	movs	r2, #128	@ 0x80
 800db2c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800db30:	2100      	movs	r1, #0
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7fe fc8f 	bl	800c456 <dir_sdi>
 800db38:	4603      	mov	r3, r0
 800db3a:	75fb      	strb	r3, [r7, #23]
 800db3c:	e078      	b.n	800dc30 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800db3e:	463b      	mov	r3, r7
 800db40:	4619      	mov	r1, r3
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7ff fe18 	bl	800d778 <create_name>
 800db48:	4603      	mov	r3, r0
 800db4a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d169      	bne.n	800dc26 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7ff fb3f 	bl	800d1d6 <dir_find>
 800db58:	4603      	mov	r3, r0
 800db5a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800db62:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800db64:	7dfb      	ldrb	r3, [r7, #23]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d00a      	beq.n	800db80 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800db6a:	7dfb      	ldrb	r3, [r7, #23]
 800db6c:	2b04      	cmp	r3, #4
 800db6e:	d15c      	bne.n	800dc2a <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800db70:	7afb      	ldrb	r3, [r7, #11]
 800db72:	f003 0304 	and.w	r3, r3, #4
 800db76:	2b00      	cmp	r3, #0
 800db78:	d157      	bne.n	800dc2a <follow_path+0x142>
 800db7a:	2305      	movs	r3, #5
 800db7c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800db7e:	e054      	b.n	800dc2a <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800db80:	7afb      	ldrb	r3, [r7, #11]
 800db82:	f003 0304 	and.w	r3, r3, #4
 800db86:	2b00      	cmp	r3, #0
 800db88:	d151      	bne.n	800dc2e <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	799b      	ldrb	r3, [r3, #6]
 800db8e:	f003 0310 	and.w	r3, r3, #16
 800db92:	2b00      	cmp	r3, #0
 800db94:	d102      	bne.n	800db9c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800db96:	2305      	movs	r3, #5
 800db98:	75fb      	strb	r3, [r7, #23]
 800db9a:	e049      	b.n	800dc30 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	2b04      	cmp	r3, #4
 800dba2:	d130      	bne.n	800dc06 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	689a      	ldr	r2, [r3, #8]
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dbb8:	693a      	ldr	r2, [r7, #16]
 800dbba:	79d2      	ldrb	r2, [r2, #7]
 800dbbc:	431a      	orrs	r2, r3
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	691b      	ldr	r3, [r3, #16]
 800dbce:	3334      	adds	r3, #52	@ 0x34
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fd fa10 	bl	800aff6 <ld_dword>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	3321      	adds	r3, #33	@ 0x21
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	f003 0302 	and.w	r3, r3, #2
 800dbe8:	b2da      	uxtb	r2, r3
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	691b      	ldr	r3, [r3, #16]
 800dbf2:	3338      	adds	r3, #56	@ 0x38
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fd fa21 	bl	800b03c <ld_qword>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	6939      	ldr	r1, [r7, #16]
 800dc00:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800dc04:	e79b      	b.n	800db3e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc14:	4413      	add	r3, r2
 800dc16:	4619      	mov	r1, r3
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f7fe fdd3 	bl	800c7c4 <ld_clust>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dc24:	e78b      	b.n	800db3e <follow_path+0x56>
			if (res != FR_OK) break;
 800dc26:	bf00      	nop
 800dc28:	e002      	b.n	800dc30 <follow_path+0x148>
				break;
 800dc2a:	bf00      	nop
 800dc2c:	e000      	b.n	800dc30 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dc2e:	bf00      	nop
			}
		}
	}

	return res;
 800dc30:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3718      	adds	r7, #24
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dc3a:	b480      	push	{r7}
 800dc3c:	b087      	sub	sp, #28
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dc42:	f04f 33ff 	mov.w	r3, #4294967295
 800dc46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d031      	beq.n	800dcb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	617b      	str	r3, [r7, #20]
 800dc56:	e002      	b.n	800dc5e <get_ldnumber+0x24>
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	617b      	str	r3, [r7, #20]
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	2b1f      	cmp	r3, #31
 800dc64:	d903      	bls.n	800dc6e <get_ldnumber+0x34>
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	2b3a      	cmp	r3, #58	@ 0x3a
 800dc6c:	d1f4      	bne.n	800dc58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	2b3a      	cmp	r3, #58	@ 0x3a
 800dc74:	d11c      	bne.n	800dcb0 <get_ldnumber+0x76>
			tp = *path;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	1c5a      	adds	r2, r3, #1
 800dc80:	60fa      	str	r2, [r7, #12]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	3b30      	subs	r3, #48	@ 0x30
 800dc86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	2b09      	cmp	r3, #9
 800dc8c:	d80e      	bhi.n	800dcac <get_ldnumber+0x72>
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d10a      	bne.n	800dcac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d107      	bne.n	800dcac <get_ldnumber+0x72>
					vol = (int)i;
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	3301      	adds	r3, #1
 800dca4:	617b      	str	r3, [r7, #20]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	e002      	b.n	800dcb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dcb4:	693b      	ldr	r3, [r7, #16]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	371c      	adds	r7, #28
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr
	...

0800dcc4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	70da      	strb	r2, [r3, #3]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcda:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dcdc:	6839      	ldr	r1, [r7, #0]
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7fd fdb6 	bl	800b850 <move_window>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d001      	beq.n	800dcee <check_fs+0x2a>
 800dcea:	2304      	movs	r3, #4
 800dcec:	e044      	b.n	800dd78 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	333c      	adds	r3, #60	@ 0x3c
 800dcf2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fd f964 	bl	800afc4 <ld_word>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	461a      	mov	r2, r3
 800dd00:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d001      	beq.n	800dd0c <check_fs+0x48>
 800dd08:	2303      	movs	r3, #3
 800dd0a:	e035      	b.n	800dd78 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd12:	2be9      	cmp	r3, #233	@ 0xe9
 800dd14:	d009      	beq.n	800dd2a <check_fs+0x66>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd1c:	2beb      	cmp	r3, #235	@ 0xeb
 800dd1e:	d11e      	bne.n	800dd5e <check_fs+0x9a>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dd26:	2b90      	cmp	r3, #144	@ 0x90
 800dd28:	d119      	bne.n	800dd5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	333c      	adds	r3, #60	@ 0x3c
 800dd2e:	3336      	adds	r3, #54	@ 0x36
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fd f960 	bl	800aff6 <ld_dword>
 800dd36:	4603      	mov	r3, r0
 800dd38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dd3c:	4a10      	ldr	r2, [pc, #64]	@ (800dd80 <check_fs+0xbc>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d101      	bne.n	800dd46 <check_fs+0x82>
 800dd42:	2300      	movs	r3, #0
 800dd44:	e018      	b.n	800dd78 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	333c      	adds	r3, #60	@ 0x3c
 800dd4a:	3352      	adds	r3, #82	@ 0x52
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fd f952 	bl	800aff6 <ld_dword>
 800dd52:	4603      	mov	r3, r0
 800dd54:	4a0b      	ldr	r2, [pc, #44]	@ (800dd84 <check_fs+0xc0>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d101      	bne.n	800dd5e <check_fs+0x9a>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	e00c      	b.n	800dd78 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	333c      	adds	r3, #60	@ 0x3c
 800dd62:	220b      	movs	r2, #11
 800dd64:	4908      	ldr	r1, [pc, #32]	@ (800dd88 <check_fs+0xc4>)
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fd fb4e 	bl	800b408 <mem_cmp>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d101      	bne.n	800dd76 <check_fs+0xb2>
 800dd72:	2301      	movs	r3, #1
 800dd74:	e000      	b.n	800dd78 <check_fs+0xb4>
#endif
	return 2;
 800dd76:	2302      	movs	r3, #2
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	00544146 	.word	0x00544146
 800dd84:	33544146 	.word	0x33544146
 800dd88:	08016528 	.word	0x08016528

0800dd8c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dd8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd90:	b09c      	sub	sp, #112	@ 0x70
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	61f8      	str	r0, [r7, #28]
 800dd96:	61b9      	str	r1, [r7, #24]
 800dd98:	4613      	mov	r3, r2
 800dd9a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dda2:	69f8      	ldr	r0, [r7, #28]
 800dda4:	f7ff ff49 	bl	800dc3a <get_ldnumber>
 800dda8:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	da01      	bge.n	800ddb4 <find_volume+0x28>
 800ddb0:	230b      	movs	r3, #11
 800ddb2:	e339      	b.n	800e428 <find_volume+0x69c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ddb4:	4a9d      	ldr	r2, [pc, #628]	@ (800e02c <find_volume+0x2a0>)
 800ddb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddbc:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ddbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d101      	bne.n	800ddc8 <find_volume+0x3c>
 800ddc4:	230c      	movs	r3, #12
 800ddc6:	e32f      	b.n	800e428 <find_volume+0x69c>

	ENTER_FF(fs);						/* Lock the volume */
 800ddc8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ddca:	f7fd fb5f 	bl	800b48c <lock_fs>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d101      	bne.n	800ddd8 <find_volume+0x4c>
 800ddd4:	230f      	movs	r3, #15
 800ddd6:	e327      	b.n	800e428 <find_volume+0x69c>
	*rfs = fs;							/* Return pointer to the file system object */
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dddc:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
 800dde0:	f023 0301 	bic.w	r3, r3, #1
 800dde4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dde6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d01a      	beq.n	800de24 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800ddee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddf0:	785b      	ldrb	r3, [r3, #1]
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fd f846 	bl	800ae84 <disk_status>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ddfe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800de02:	f003 0301 	and.w	r3, r3, #1
 800de06:	2b00      	cmp	r3, #0
 800de08:	d10c      	bne.n	800de24 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800de0a:	7dfb      	ldrb	r3, [r7, #23]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d007      	beq.n	800de20 <find_volume+0x94>
 800de10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800de14:	f003 0304 	and.w	r3, r3, #4
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d001      	beq.n	800de20 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800de1c:	230a      	movs	r3, #10
 800de1e:	e303      	b.n	800e428 <find_volume+0x69c>
			}
			return FR_OK;				/* The file system object is valid */
 800de20:	2300      	movs	r3, #0
 800de22:	e301      	b.n	800e428 <find_volume+0x69c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800de24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de26:	2200      	movs	r2, #0
 800de28:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800de2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de2c:	b2da      	uxtb	r2, r3
 800de2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de30:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800de32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de34:	785b      	ldrb	r3, [r3, #1]
 800de36:	4618      	mov	r0, r3
 800de38:	f7fd f83e 	bl	800aeb8 <disk_initialize>
 800de3c:	4603      	mov	r3, r0
 800de3e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800de42:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800de46:	f003 0301 	and.w	r3, r3, #1
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d001      	beq.n	800de52 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800de4e:	2303      	movs	r3, #3
 800de50:	e2ea      	b.n	800e428 <find_volume+0x69c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800de52:	7dfb      	ldrb	r3, [r7, #23]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d007      	beq.n	800de68 <find_volume+0xdc>
 800de58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800de5c:	f003 0304 	and.w	r3, r3, #4
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800de64:	230a      	movs	r3, #10
 800de66:	e2df      	b.n	800e428 <find_volume+0x69c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800de68:	2300      	movs	r3, #0
 800de6a:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800de6c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800de6e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800de70:	f7ff ff28 	bl	800dcc4 <check_fs>
 800de74:	4603      	mov	r3, r0
 800de76:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800de7a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d14d      	bne.n	800df1e <find_volume+0x192>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800de82:	2300      	movs	r3, #0
 800de84:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de86:	e020      	b.n	800deca <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800de88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de8a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800de8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de90:	011b      	lsls	r3, r3, #4
 800de92:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800de96:	4413      	add	r3, r2
 800de98:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800de9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de9c:	3304      	adds	r3, #4
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d006      	beq.n	800deb2 <find_volume+0x126>
 800dea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dea6:	3308      	adds	r3, #8
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fd f8a4 	bl	800aff6 <ld_dword>
 800deae:	4602      	mov	r2, r0
 800deb0:	e000      	b.n	800deb4 <find_volume+0x128>
 800deb2:	2200      	movs	r2, #0
 800deb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	3360      	adds	r3, #96	@ 0x60
 800deba:	f107 0110 	add.w	r1, r7, #16
 800debe:	440b      	add	r3, r1
 800dec0:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dec4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dec6:	3301      	adds	r3, #1
 800dec8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800deca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800decc:	2b03      	cmp	r3, #3
 800dece:	d9db      	bls.n	800de88 <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ded0:	2300      	movs	r3, #0
 800ded2:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800ded4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d002      	beq.n	800dee0 <find_volume+0x154>
 800deda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dedc:	3b01      	subs	r3, #1
 800dede:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dee0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	3360      	adds	r3, #96	@ 0x60
 800dee6:	f107 0210 	add.w	r2, r7, #16
 800deea:	4413      	add	r3, r2
 800deec:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800def0:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800def2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800def4:	2b00      	cmp	r3, #0
 800def6:	d005      	beq.n	800df04 <find_volume+0x178>
 800def8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800defa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800defc:	f7ff fee2 	bl	800dcc4 <check_fs>
 800df00:	4603      	mov	r3, r0
 800df02:	e000      	b.n	800df06 <find_volume+0x17a>
 800df04:	2303      	movs	r3, #3
 800df06:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800df0a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d905      	bls.n	800df1e <find_volume+0x192>
 800df12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df14:	3301      	adds	r3, #1
 800df16:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df1a:	2b03      	cmp	r3, #3
 800df1c:	d9e0      	bls.n	800dee0 <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800df1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800df22:	2b04      	cmp	r3, #4
 800df24:	d101      	bne.n	800df2a <find_volume+0x19e>
 800df26:	2301      	movs	r3, #1
 800df28:	e27e      	b.n	800e428 <find_volume+0x69c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800df2a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d901      	bls.n	800df36 <find_volume+0x1aa>
 800df32:	230d      	movs	r3, #13
 800df34:	e278      	b.n	800e428 <find_volume+0x69c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800df36:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	f040 80fa 	bne.w	800e134 <find_volume+0x3a8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800df40:	230b      	movs	r3, #11
 800df42:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df44:	e002      	b.n	800df4c <find_volume+0x1c0>
 800df46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df48:	3301      	adds	r3, #1
 800df4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df4e:	2b3f      	cmp	r3, #63	@ 0x3f
 800df50:	d806      	bhi.n	800df60 <find_volume+0x1d4>
 800df52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800df54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df56:	4413      	add	r3, r2
 800df58:	333c      	adds	r3, #60	@ 0x3c
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d0f2      	beq.n	800df46 <find_volume+0x1ba>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800df60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df62:	2b3f      	cmp	r3, #63	@ 0x3f
 800df64:	d801      	bhi.n	800df6a <find_volume+0x1de>
 800df66:	230d      	movs	r3, #13
 800df68:	e25e      	b.n	800e428 <find_volume+0x69c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800df6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df6c:	333c      	adds	r3, #60	@ 0x3c
 800df6e:	3368      	adds	r3, #104	@ 0x68
 800df70:	4618      	mov	r0, r3
 800df72:	f7fd f827 	bl	800afc4 <ld_word>
 800df76:	4603      	mov	r3, r0
 800df78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df7c:	d001      	beq.n	800df82 <find_volume+0x1f6>
 800df7e:	230d      	movs	r3, #13
 800df80:	e252      	b.n	800e428 <find_volume+0x69c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800df82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df84:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800df88:	2b09      	cmp	r3, #9
 800df8a:	d001      	beq.n	800df90 <find_volume+0x204>
			return FR_NO_FILESYSTEM;
 800df8c:	230d      	movs	r3, #13
 800df8e:	e24b      	b.n	800e428 <find_volume+0x69c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800df90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df92:	333c      	adds	r3, #60	@ 0x3c
 800df94:	3348      	adds	r3, #72	@ 0x48
 800df96:	4618      	mov	r0, r3
 800df98:	f7fd f850 	bl	800b03c <ld_qword>
 800df9c:	4602      	mov	r2, r0
 800df9e:	460b      	mov	r3, r1
 800dfa0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	68b9      	ldr	r1, [r7, #8]
 800dfaa:	1851      	adds	r1, r2, r1
 800dfac:	6039      	str	r1, [r7, #0]
 800dfae:	68f9      	ldr	r1, [r7, #12]
 800dfb0:	eb43 0101 	adc.w	r1, r3, r1
 800dfb4:	6079      	str	r1, [r7, #4]
 800dfb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfba:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800dfbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d301      	bcc.n	800dfca <find_volume+0x23e>
 800dfc6:	230d      	movs	r3, #13
 800dfc8:	e22e      	b.n	800e428 <find_volume+0x69c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800dfca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfcc:	333c      	adds	r3, #60	@ 0x3c
 800dfce:	3354      	adds	r3, #84	@ 0x54
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fd f810 	bl	800aff6 <ld_dword>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfda:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800dfdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfde:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800dfe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfe4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800dfe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfe8:	789b      	ldrb	r3, [r3, #2]
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d001      	beq.n	800dff2 <find_volume+0x266>
 800dfee:	230d      	movs	r3, #13
 800dff0:	e21a      	b.n	800e428 <find_volume+0x69c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800dff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dff4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800dff8:	461a      	mov	r2, r3
 800dffa:	2301      	movs	r3, #1
 800dffc:	4093      	lsls	r3, r2
 800dffe:	b29a      	uxth	r2, r3
 800e000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e002:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800e004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e006:	895b      	ldrh	r3, [r3, #10]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d101      	bne.n	800e010 <find_volume+0x284>
 800e00c:	230d      	movs	r3, #13
 800e00e:	e20b      	b.n	800e428 <find_volume+0x69c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800e010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e012:	333c      	adds	r3, #60	@ 0x3c
 800e014:	335c      	adds	r3, #92	@ 0x5c
 800e016:	4618      	mov	r0, r3
 800e018:	f7fc ffed 	bl	800aff6 <ld_dword>
 800e01c:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800e01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e020:	4a03      	ldr	r2, [pc, #12]	@ (800e030 <find_volume+0x2a4>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d906      	bls.n	800e034 <find_volume+0x2a8>
 800e026:	230d      	movs	r3, #13
 800e028:	e1fe      	b.n	800e428 <find_volume+0x69c>
 800e02a:	bf00      	nop
 800e02c:	20001124 	.word	0x20001124
 800e030:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800e034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e036:	1c9a      	adds	r2, r3, #2
 800e038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e03a:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800e03c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e03e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e040:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800e042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e044:	333c      	adds	r3, #60	@ 0x3c
 800e046:	3358      	adds	r3, #88	@ 0x58
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fc ffd4 	bl	800aff6 <ld_dword>
 800e04e:	4602      	mov	r2, r0
 800e050:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e052:	441a      	add	r2, r3
 800e054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e056:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800e058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e05a:	333c      	adds	r3, #60	@ 0x3c
 800e05c:	3350      	adds	r3, #80	@ 0x50
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fc ffc9 	bl	800aff6 <ld_dword>
 800e064:	4602      	mov	r2, r0
 800e066:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e068:	441a      	add	r2, r3
 800e06a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e06c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800e06e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e072:	2200      	movs	r2, #0
 800e074:	469a      	mov	sl, r3
 800e076:	4693      	mov	fp, r2
 800e078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e07a:	895b      	ldrh	r3, [r3, #10]
 800e07c:	461a      	mov	r2, r3
 800e07e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e080:	fb02 f303 	mul.w	r3, r2, r3
 800e084:	2200      	movs	r2, #0
 800e086:	4698      	mov	r8, r3
 800e088:	4691      	mov	r9, r2
 800e08a:	eb1a 0408 	adds.w	r4, sl, r8
 800e08e:	eb4b 0509 	adc.w	r5, fp, r9
 800e092:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e096:	42a2      	cmp	r2, r4
 800e098:	41ab      	sbcs	r3, r5
 800e09a:	d201      	bcs.n	800e0a0 <find_volume+0x314>
 800e09c:	230d      	movs	r3, #13
 800e09e:	e1c3      	b.n	800e428 <find_volume+0x69c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800e0a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0a2:	333c      	adds	r3, #60	@ 0x3c
 800e0a4:	3360      	adds	r3, #96	@ 0x60
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fc ffa5 	bl	800aff6 <ld_dword>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0b0:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800e0b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e0ba:	f7fd fc65 	bl	800b988 <clust2sect>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e0c4:	f7fd fbc4 	bl	800b850 <move_window>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <find_volume+0x346>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e1aa      	b.n	800e428 <find_volume+0x69c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e0d6:	e015      	b.n	800e104 <find_volume+0x378>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800e0d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e0da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0dc:	4413      	add	r3, r2
 800e0de:	333c      	adds	r3, #60	@ 0x3c
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	2b81      	cmp	r3, #129	@ 0x81
 800e0e4:	d10b      	bne.n	800e0fe <find_volume+0x372>
 800e0e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0e8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800e0ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0ee:	3314      	adds	r3, #20
 800e0f0:	4413      	add	r3, r2
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fc ff7f 	bl	800aff6 <ld_dword>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b02      	cmp	r3, #2
 800e0fc:	d007      	beq.n	800e10e <find_volume+0x382>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800e0fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e100:	3320      	adds	r3, #32
 800e102:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e104:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e10a:	d3e5      	bcc.n	800e0d8 <find_volume+0x34c>
 800e10c:	e000      	b.n	800e110 <find_volume+0x384>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800e10e:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800e110:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e116:	d101      	bne.n	800e11c <find_volume+0x390>
 800e118:	230d      	movs	r3, #13
 800e11a:	e185      	b.n	800e428 <find_volume+0x69c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e11c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e11e:	f04f 32ff 	mov.w	r2, #4294967295
 800e122:	61da      	str	r2, [r3, #28]
 800e124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e126:	69da      	ldr	r2, [r3, #28]
 800e128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e12a:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800e12c:	2304      	movs	r3, #4
 800e12e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800e132:	e167      	b.n	800e404 <find_volume+0x678>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e136:	333c      	adds	r3, #60	@ 0x3c
 800e138:	330b      	adds	r3, #11
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fc ff42 	bl	800afc4 <ld_word>
 800e140:	4603      	mov	r3, r0
 800e142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e146:	d001      	beq.n	800e14c <find_volume+0x3c0>
 800e148:	230d      	movs	r3, #13
 800e14a:	e16d      	b.n	800e428 <find_volume+0x69c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e14c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e14e:	333c      	adds	r3, #60	@ 0x3c
 800e150:	3316      	adds	r3, #22
 800e152:	4618      	mov	r0, r3
 800e154:	f7fc ff36 	bl	800afc4 <ld_word>
 800e158:	4603      	mov	r3, r0
 800e15a:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e15c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d106      	bne.n	800e170 <find_volume+0x3e4>
 800e162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e164:	333c      	adds	r3, #60	@ 0x3c
 800e166:	3324      	adds	r3, #36	@ 0x24
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fc ff44 	bl	800aff6 <ld_dword>
 800e16e:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800e170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e172:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e174:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e178:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800e17c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e17e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e182:	789b      	ldrb	r3, [r3, #2]
 800e184:	2b01      	cmp	r3, #1
 800e186:	d005      	beq.n	800e194 <find_volume+0x408>
 800e188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e18a:	789b      	ldrb	r3, [r3, #2]
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	d001      	beq.n	800e194 <find_volume+0x408>
 800e190:	230d      	movs	r3, #13
 800e192:	e149      	b.n	800e428 <find_volume+0x69c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e196:	789b      	ldrb	r3, [r3, #2]
 800e198:	461a      	mov	r2, r3
 800e19a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e19c:	fb02 f303 	mul.w	r3, r2, r3
 800e1a0:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e1a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1a4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e1ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1b0:	895b      	ldrh	r3, [r3, #10]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d008      	beq.n	800e1c8 <find_volume+0x43c>
 800e1b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1b8:	895b      	ldrh	r3, [r3, #10]
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1be:	895b      	ldrh	r3, [r3, #10]
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	4013      	ands	r3, r2
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d001      	beq.n	800e1cc <find_volume+0x440>
 800e1c8:	230d      	movs	r3, #13
 800e1ca:	e12d      	b.n	800e428 <find_volume+0x69c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e1cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1ce:	333c      	adds	r3, #60	@ 0x3c
 800e1d0:	3311      	adds	r3, #17
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fc fef6 	bl	800afc4 <ld_word>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	461a      	mov	r2, r3
 800e1dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e1e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1e2:	891b      	ldrh	r3, [r3, #8]
 800e1e4:	f003 030f 	and.w	r3, r3, #15
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d001      	beq.n	800e1f2 <find_volume+0x466>
 800e1ee:	230d      	movs	r3, #13
 800e1f0:	e11a      	b.n	800e428 <find_volume+0x69c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e1f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1f4:	333c      	adds	r3, #60	@ 0x3c
 800e1f6:	3313      	adds	r3, #19
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fc fee3 	bl	800afc4 <ld_word>
 800e1fe:	4603      	mov	r3, r0
 800e200:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e202:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e204:	2b00      	cmp	r3, #0
 800e206:	d106      	bne.n	800e216 <find_volume+0x48a>
 800e208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e20a:	333c      	adds	r3, #60	@ 0x3c
 800e20c:	3320      	adds	r3, #32
 800e20e:	4618      	mov	r0, r3
 800e210:	f7fc fef1 	bl	800aff6 <ld_dword>
 800e214:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e216:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e218:	333c      	adds	r3, #60	@ 0x3c
 800e21a:	330e      	adds	r3, #14
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7fc fed1 	bl	800afc4 <ld_word>
 800e222:	4603      	mov	r3, r0
 800e224:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e228:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d101      	bne.n	800e234 <find_volume+0x4a8>
 800e230:	230d      	movs	r3, #13
 800e232:	e0f9      	b.n	800e428 <find_volume+0x69c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e234:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e238:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e23a:	4413      	add	r3, r2
 800e23c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e23e:	8912      	ldrh	r2, [r2, #8]
 800e240:	0912      	lsrs	r2, r2, #4
 800e242:	b292      	uxth	r2, r2
 800e244:	4413      	add	r3, r2
 800e246:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e248:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e24a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d201      	bcs.n	800e254 <find_volume+0x4c8>
 800e250:	230d      	movs	r3, #13
 800e252:	e0e9      	b.n	800e428 <find_volume+0x69c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e254:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e25c:	8952      	ldrh	r2, [r2, #10]
 800e25e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e262:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e266:	2b00      	cmp	r3, #0
 800e268:	d101      	bne.n	800e26e <find_volume+0x4e2>
 800e26a:	230d      	movs	r3, #13
 800e26c:	e0dc      	b.n	800e428 <find_volume+0x69c>
		fmt = FS_FAT32;
 800e26e:	2303      	movs	r3, #3
 800e270:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e276:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d802      	bhi.n	800e284 <find_volume+0x4f8>
 800e27e:	2302      	movs	r3, #2
 800e280:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e286:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d802      	bhi.n	800e294 <find_volume+0x508>
 800e28e:	2301      	movs	r3, #1
 800e290:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e296:	1c9a      	adds	r2, r3, #2
 800e298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e29a:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800e29c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e29e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e2a0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e2a2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800e2a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e2a8:	441a      	add	r2, r3
 800e2aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2ac:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800e2ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e2b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2b2:	441a      	add	r2, r3
 800e2b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2b6:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800e2b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e2bc:	2b03      	cmp	r3, #3
 800e2be:	d11e      	bne.n	800e2fe <find_volume+0x572>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e2c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2c2:	333c      	adds	r3, #60	@ 0x3c
 800e2c4:	332a      	adds	r3, #42	@ 0x2a
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fc fe7c 	bl	800afc4 <ld_word>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d001      	beq.n	800e2d6 <find_volume+0x54a>
 800e2d2:	230d      	movs	r3, #13
 800e2d4:	e0a8      	b.n	800e428 <find_volume+0x69c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e2d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2d8:	891b      	ldrh	r3, [r3, #8]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d001      	beq.n	800e2e2 <find_volume+0x556>
 800e2de:	230d      	movs	r3, #13
 800e2e0:	e0a2      	b.n	800e428 <find_volume+0x69c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e2e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2e4:	333c      	adds	r3, #60	@ 0x3c
 800e2e6:	332c      	adds	r3, #44	@ 0x2c
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fc fe84 	bl	800aff6 <ld_dword>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2f2:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e2f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2f6:	6a1b      	ldr	r3, [r3, #32]
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e2fc:	e01f      	b.n	800e33e <find_volume+0x5b2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e2fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e300:	891b      	ldrh	r3, [r3, #8]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d101      	bne.n	800e30a <find_volume+0x57e>
 800e306:	230d      	movs	r3, #13
 800e308:	e08e      	b.n	800e428 <find_volume+0x69c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e30a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e30e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e310:	441a      	add	r2, r3
 800e312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e314:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e316:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	d103      	bne.n	800e326 <find_volume+0x59a>
 800e31e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e320:	6a1b      	ldr	r3, [r3, #32]
 800e322:	005b      	lsls	r3, r3, #1
 800e324:	e00a      	b.n	800e33c <find_volume+0x5b0>
 800e326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e328:	6a1a      	ldr	r2, [r3, #32]
 800e32a:	4613      	mov	r3, r2
 800e32c:	005b      	lsls	r3, r3, #1
 800e32e:	4413      	add	r3, r2
 800e330:	085a      	lsrs	r2, r3, #1
 800e332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e334:	6a1b      	ldr	r3, [r3, #32]
 800e336:	f003 0301 	and.w	r3, r3, #1
 800e33a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e33c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e33e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e344:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e348:	0a5b      	lsrs	r3, r3, #9
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d201      	bcs.n	800e352 <find_volume+0x5c6>
 800e34e:	230d      	movs	r3, #13
 800e350:	e06a      	b.n	800e428 <find_volume+0x69c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e354:	f04f 32ff 	mov.w	r2, #4294967295
 800e358:	61da      	str	r2, [r3, #28]
 800e35a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e35c:	69da      	ldr	r2, [r3, #28]
 800e35e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e360:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800e362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e364:	2280      	movs	r2, #128	@ 0x80
 800e366:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e368:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e36c:	2b03      	cmp	r3, #3
 800e36e:	d149      	bne.n	800e404 <find_volume+0x678>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e372:	333c      	adds	r3, #60	@ 0x3c
 800e374:	3330      	adds	r3, #48	@ 0x30
 800e376:	4618      	mov	r0, r3
 800e378:	f7fc fe24 	bl	800afc4 <ld_word>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d140      	bne.n	800e404 <find_volume+0x678>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e382:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e384:	3301      	adds	r3, #1
 800e386:	4619      	mov	r1, r3
 800e388:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e38a:	f7fd fa61 	bl	800b850 <move_window>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d137      	bne.n	800e404 <find_volume+0x678>
		{
			fs->fsi_flag = 0;
 800e394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e396:	2200      	movs	r2, #0
 800e398:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e39a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e39c:	333c      	adds	r3, #60	@ 0x3c
 800e39e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fc fe0e 	bl	800afc4 <ld_word>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d127      	bne.n	800e404 <find_volume+0x678>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e3b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3b6:	333c      	adds	r3, #60	@ 0x3c
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fc fe1c 	bl	800aff6 <ld_dword>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	4a1c      	ldr	r2, [pc, #112]	@ (800e434 <find_volume+0x6a8>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d11e      	bne.n	800e404 <find_volume+0x678>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e3c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3c8:	333c      	adds	r3, #60	@ 0x3c
 800e3ca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fc fe11 	bl	800aff6 <ld_dword>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	4a18      	ldr	r2, [pc, #96]	@ (800e438 <find_volume+0x6ac>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d113      	bne.n	800e404 <find_volume+0x678>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e3dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3de:	333c      	adds	r3, #60	@ 0x3c
 800e3e0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fc fe06 	bl	800aff6 <ld_dword>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3ee:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e3f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3f2:	333c      	adds	r3, #60	@ 0x3c
 800e3f4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fc fdfc 	bl	800aff6 <ld_dword>
 800e3fe:	4602      	mov	r2, r0
 800e400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e402:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e406:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800e40a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e40c:	4b0b      	ldr	r3, [pc, #44]	@ (800e43c <find_volume+0x6b0>)
 800e40e:	881b      	ldrh	r3, [r3, #0]
 800e410:	3301      	adds	r3, #1
 800e412:	b29a      	uxth	r2, r3
 800e414:	4b09      	ldr	r3, [pc, #36]	@ (800e43c <find_volume+0x6b0>)
 800e416:	801a      	strh	r2, [r3, #0]
 800e418:	4b08      	ldr	r3, [pc, #32]	@ (800e43c <find_volume+0x6b0>)
 800e41a:	881a      	ldrh	r2, [r3, #0]
 800e41c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e41e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e420:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e422:	f7fd f9ad 	bl	800b780 <clear_lock>
#endif
	return FR_OK;
 800e426:	2300      	movs	r3, #0
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3770      	adds	r7, #112	@ 0x70
 800e42c:	46bd      	mov	sp, r7
 800e42e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e432:	bf00      	nop
 800e434:	41615252 	.word	0x41615252
 800e438:	61417272 	.word	0x61417272
 800e43c:	20001128 	.word	0x20001128

0800e440 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e44a:	2309      	movs	r3, #9
 800e44c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d02e      	beq.n	800e4b2 <validate+0x72>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d02a      	beq.n	800e4b2 <validate+0x72>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d025      	beq.n	800e4b2 <validate+0x72>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	889a      	ldrh	r2, [r3, #4]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	88db      	ldrh	r3, [r3, #6]
 800e470:	429a      	cmp	r2, r3
 800e472:	d11e      	bne.n	800e4b2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fd f807 	bl	800b48c <lock_fs>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d014      	beq.n	800e4ae <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	785b      	ldrb	r3, [r3, #1]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fc fcfa 	bl	800ae84 <disk_status>
 800e490:	4603      	mov	r3, r0
 800e492:	f003 0301 	and.w	r3, r3, #1
 800e496:	2b00      	cmp	r3, #0
 800e498:	d102      	bne.n	800e4a0 <validate+0x60>
				res = FR_OK;
 800e49a:	2300      	movs	r3, #0
 800e49c:	73fb      	strb	r3, [r7, #15]
 800e49e:	e008      	b.n	800e4b2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fd f806 	bl	800b4b8 <unlock_fs>
 800e4ac:	e001      	b.n	800e4b2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e4ae:	230f      	movs	r3, #15
 800e4b0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e4b2:	7bfb      	ldrb	r3, [r7, #15]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d102      	bne.n	800e4be <validate+0x7e>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	e000      	b.n	800e4c0 <validate+0x80>
 800e4be:	2300      	movs	r3, #0
 800e4c0:	683a      	ldr	r2, [r7, #0]
 800e4c2:	6013      	str	r3, [r2, #0]
	return res;
 800e4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3710      	adds	r7, #16
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
	...

0800e4d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b088      	sub	sp, #32
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e4e2:	f107 0310 	add.w	r3, r7, #16
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7ff fba7 	bl	800dc3a <get_ldnumber>
 800e4ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	da01      	bge.n	800e4f8 <f_mount+0x28>
 800e4f4:	230b      	movs	r3, #11
 800e4f6:	e048      	b.n	800e58a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e4f8:	4a26      	ldr	r2, [pc, #152]	@ (800e594 <f_mount+0xc4>)
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e500:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e502:	69bb      	ldr	r3, [r7, #24]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d00f      	beq.n	800e528 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e508:	69b8      	ldr	r0, [r7, #24]
 800e50a:	f7fd f939 	bl	800b780 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	695b      	ldr	r3, [r3, #20]
 800e512:	4618      	mov	r0, r3
 800e514:	f001 f951 	bl	800f7ba <ff_del_syncobj>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d101      	bne.n	800e522 <f_mount+0x52>
 800e51e:	2302      	movs	r3, #2
 800e520:	e033      	b.n	800e58a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e522:	69bb      	ldr	r3, [r7, #24]
 800e524:	2200      	movs	r2, #0
 800e526:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00f      	beq.n	800e54e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2200      	movs	r2, #0
 800e532:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	b2da      	uxtb	r2, r3
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	3314      	adds	r3, #20
 800e53c:	4619      	mov	r1, r3
 800e53e:	4610      	mov	r0, r2
 800e540:	f001 f91c 	bl	800f77c <ff_cre_syncobj>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d101      	bne.n	800e54e <f_mount+0x7e>
 800e54a:	2302      	movs	r3, #2
 800e54c:	e01d      	b.n	800e58a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e54e:	68fa      	ldr	r2, [r7, #12]
 800e550:	4910      	ldr	r1, [pc, #64]	@ (800e594 <f_mount+0xc4>)
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d002      	beq.n	800e564 <f_mount+0x94>
 800e55e:	79fb      	ldrb	r3, [r7, #7]
 800e560:	2b01      	cmp	r3, #1
 800e562:	d001      	beq.n	800e568 <f_mount+0x98>
 800e564:	2300      	movs	r3, #0
 800e566:	e010      	b.n	800e58a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e568:	f107 010c 	add.w	r1, r7, #12
 800e56c:	f107 0308 	add.w	r3, r7, #8
 800e570:	2200      	movs	r2, #0
 800e572:	4618      	mov	r0, r3
 800e574:	f7ff fc0a 	bl	800dd8c <find_volume>
 800e578:	4603      	mov	r3, r0
 800e57a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	7dfa      	ldrb	r2, [r7, #23]
 800e580:	4611      	mov	r1, r2
 800e582:	4618      	mov	r0, r3
 800e584:	f7fc ff98 	bl	800b4b8 <unlock_fs>
 800e588:	7dfb      	ldrb	r3, [r7, #23]
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3720      	adds	r7, #32
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	20001124 	.word	0x20001124

0800e598 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e59c:	f5ad 6d9f 	sub.w	sp, sp, #1272	@ 0x4f8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e5a6:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e5aa:	6018      	str	r0, [r3, #0]
 800e5ac:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e5b0:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 800e5b4:	6019      	str	r1, [r3, #0]
 800e5b6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e5ba:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e5be:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e5c0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e5c4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d101      	bne.n	800e5d2 <f_open+0x3a>
 800e5ce:	2309      	movs	r3, #9
 800e5d0:	e3e3      	b.n	800ed9a <f_open+0x802>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e5d2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e5d6:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e5da:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800e5de:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800e5e2:	7812      	ldrb	r2, [r2, #0]
 800e5e4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e5e8:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800e5ea:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e5ee:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e5f2:	781a      	ldrb	r2, [r3, #0]
 800e5f4:	f207 4184 	addw	r1, r7, #1156	@ 0x484
 800e5f8:	f107 0318 	add.w	r3, r7, #24
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7ff fbc5 	bl	800dd8c <find_volume>
 800e602:	4603      	mov	r3, r0
 800e604:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
	if (res == FR_OK) {
 800e608:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f040 83af 	bne.w	800ed70 <f_open+0x7d8>
		dj.obj.fs = fs;
 800e612:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e616:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
		INIT_NAMBUF(fs);
 800e61a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e61e:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 800e622:	60da      	str	r2, [r3, #12]
 800e624:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e628:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e62c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e62e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e632:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e63c:	4611      	mov	r1, r2
 800e63e:	4618      	mov	r0, r3
 800e640:	f7ff fa52 	bl	800dae8 <follow_path>
 800e644:	4603      	mov	r3, r0
 800e646:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e64a:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d11c      	bne.n	800e68c <f_open+0xf4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e652:	f897 34d3 	ldrb.w	r3, [r7, #1235]	@ 0x4d3
 800e656:	b25b      	sxtb	r3, r3
 800e658:	2b00      	cmp	r3, #0
 800e65a:	da03      	bge.n	800e664 <f_open+0xcc>
				res = FR_INVALID_NAME;
 800e65c:	2306      	movs	r3, #6
 800e65e:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800e662:	e013      	b.n	800e68c <f_open+0xf4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e664:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e668:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	2b01      	cmp	r3, #1
 800e670:	bf8c      	ite	hi
 800e672:	2301      	movhi	r3, #1
 800e674:	2300      	movls	r3, #0
 800e676:	b2db      	uxtb	r3, r3
 800e678:	461a      	mov	r2, r3
 800e67a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e67e:	4611      	mov	r1, r2
 800e680:	4618      	mov	r0, r3
 800e682:	f7fc ff35 	bl	800b4f0 <chk_lock>
 800e686:	4603      	mov	r3, r0
 800e688:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e68c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e690:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	f003 031c 	and.w	r3, r3, #28
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f000 8166 	beq.w	800e96c <f_open+0x3d4>
			if (res != FR_OK) {					/* No file, create new */
 800e6a0:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d01f      	beq.n	800e6e8 <f_open+0x150>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e6a8:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e6ac:	2b04      	cmp	r3, #4
 800e6ae:	d10e      	bne.n	800e6ce <f_open+0x136>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e6b0:	f7fc ff7a 	bl	800b5a8 <enq_lock>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d006      	beq.n	800e6c8 <f_open+0x130>
 800e6ba:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7fe feb4 	bl	800d42c <dir_register>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	e000      	b.n	800e6ca <f_open+0x132>
 800e6c8:	2312      	movs	r3, #18
 800e6ca:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e6ce:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e6d2:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e6d6:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800e6da:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800e6de:	7812      	ldrb	r2, [r2, #0]
 800e6e0:	f042 0208 	orr.w	r2, r2, #8
 800e6e4:	701a      	strb	r2, [r3, #0]
 800e6e6:	e015      	b.n	800e714 <f_open+0x17c>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e6e8:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 800e6ec:	f003 0311 	and.w	r3, r3, #17
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d003      	beq.n	800e6fc <f_open+0x164>
					res = FR_DENIED;
 800e6f4:	2307      	movs	r3, #7
 800e6f6:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800e6fa:	e00b      	b.n	800e714 <f_open+0x17c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e6fc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e700:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	f003 0304 	and.w	r3, r3, #4
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d002      	beq.n	800e714 <f_open+0x17c>
 800e70e:	2308      	movs	r3, #8
 800e710:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e714:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f040 8147 	bne.w	800e9ac <f_open+0x414>
 800e71e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e722:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	f003 0308 	and.w	r3, r3, #8
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	f000 813d 	beq.w	800e9ac <f_open+0x414>
				dw = GET_FATTIME();
 800e732:	f7fc f945 	bl	800a9c0 <get_fattime>
 800e736:	f8c7 04e4 	str.w	r0, [r7, #1252]	@ 0x4e4
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800e73a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	2b04      	cmp	r3, #4
 800e742:	f040 80b8 	bne.w	800e8b6 <f_open+0x31e>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800e746:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800e74a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e74e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800e756:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e75a:	691b      	ldr	r3, [r3, #16]
 800e75c:	3334      	adds	r3, #52	@ 0x34
 800e75e:	4618      	mov	r0, r3
 800e760:	f7fc fc49 	bl	800aff6 <ld_dword>
 800e764:	4602      	mov	r2, r0
 800e766:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e76a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e772:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e776:	691b      	ldr	r3, [r3, #16]
 800e778:	3338      	adds	r3, #56	@ 0x38
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fc fc5e 	bl	800b03c <ld_qword>
 800e780:	4602      	mov	r2, r0
 800e782:	460b      	mov	r3, r1
 800e784:	f507 619f 	add.w	r1, r7, #1272	@ 0x4f8
 800e788:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800e78c:	6809      	ldr	r1, [r1, #0]
 800e78e:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e792:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	3321      	adds	r3, #33	@ 0x21
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	f003 0302 	and.w	r3, r3, #2
 800e7a0:	b2da      	uxtb	r2, r3
 800e7a2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e7a6:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800e7ae:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e7b2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800e7bc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e7c0:	691b      	ldr	r3, [r3, #16]
 800e7c2:	3308      	adds	r3, #8
 800e7c4:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fc fd2d 	bl	800b228 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800e7ce:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	3314      	adds	r3, #20
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800e7da:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e7de:	691b      	ldr	r3, [r3, #16]
 800e7e0:	330c      	adds	r3, #12
 800e7e2:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fc fd1e 	bl	800b228 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800e7ec:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e7f0:	691b      	ldr	r3, [r3, #16]
 800e7f2:	3315      	adds	r3, #21
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800e7f8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	3304      	adds	r3, #4
 800e800:	2220      	movs	r2, #32
 800e802:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800e804:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e808:	691b      	ldr	r3, [r3, #16]
 800e80a:	3334      	adds	r3, #52	@ 0x34
 800e80c:	2100      	movs	r1, #0
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fc fd0a 	bl	800b228 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800e814:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e818:	691b      	ldr	r3, [r3, #16]
 800e81a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e81e:	f04f 0200 	mov.w	r2, #0
 800e822:	f04f 0300 	mov.w	r3, #0
 800e826:	4608      	mov	r0, r1
 800e828:	f7fc fd2a 	bl	800b280 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800e82c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e830:	691b      	ldr	r3, [r3, #16]
 800e832:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800e836:	f04f 0200 	mov.w	r2, #0
 800e83a:	f04f 0300 	mov.w	r3, #0
 800e83e:	4608      	mov	r0, r1
 800e840:	f7fc fd1e 	bl	800b280 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800e844:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e848:	691b      	ldr	r3, [r3, #16]
 800e84a:	3321      	adds	r3, #33	@ 0x21
 800e84c:	2201      	movs	r2, #1
 800e84e:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800e850:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e854:	4618      	mov	r0, r3
 800e856:	f7fe fb35 	bl	800cec4 <store_xdir>
 800e85a:	4603      	mov	r3, r0
 800e85c:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800e860:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e864:	2b00      	cmp	r3, #0
 800e866:	f040 80a1 	bne.w	800e9ac <f_open+0x414>
 800e86a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e86e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	2b00      	cmp	r3, #0
 800e878:	f000 8098 	beq.w	800e9ac <f_open+0x414>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800e87c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e880:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e884:	6818      	ldr	r0, [r3, #0]
 800e886:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e88a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	2200      	movs	r2, #0
 800e894:	4619      	mov	r1, r3
 800e896:	f7fd fbe5 	bl	800c064 <remove_chain>
 800e89a:	4603      	mov	r3, r0
 800e89c:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800e8a0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e8a4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	689a      	ldr	r2, [r3, #8]
 800e8ac:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e8b0:	3a01      	subs	r2, #1
 800e8b2:	619a      	str	r2, [r3, #24]
 800e8b4:	e07a      	b.n	800e9ac <f_open+0x414>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e8b6:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800e8ba:	330e      	adds	r3, #14
 800e8bc:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fc fcb1 	bl	800b228 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e8c6:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800e8ca:	3316      	adds	r3, #22
 800e8cc:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fc fca9 	bl	800b228 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e8d6:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800e8da:	330b      	adds	r3, #11
 800e8dc:	2220      	movs	r2, #32
 800e8de:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e8e0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e8e4:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800e8e8:	4611      	mov	r1, r2
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fd ff6a 	bl	800c7c4 <ld_clust>
 800e8f0:	f8c7 04e0 	str.w	r0, [r7, #1248]	@ 0x4e0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e8f4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e8f8:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fd ff7f 	bl	800c802 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e904:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800e908:	331c      	adds	r3, #28
 800e90a:	2100      	movs	r1, #0
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fc fc8b 	bl	800b228 <st_dword>
					fs->wflag = 1;
 800e912:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e916:	2201      	movs	r2, #1
 800e918:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e91a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d044      	beq.n	800e9ac <f_open+0x414>
						dw = fs->winsect;
 800e922:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e928:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
						res = remove_chain(&dj.obj, cl, 0);
 800e92c:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e930:	2200      	movs	r2, #0
 800e932:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	@ 0x4e0
 800e936:	4618      	mov	r0, r3
 800e938:	f7fd fb94 	bl	800c064 <remove_chain>
 800e93c:	4603      	mov	r3, r0
 800e93e:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
						if (res == FR_OK) {
 800e942:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e946:	2b00      	cmp	r3, #0
 800e948:	d130      	bne.n	800e9ac <f_open+0x414>
							res = move_window(fs, dw);
 800e94a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e94e:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800e952:	4618      	mov	r0, r3
 800e954:	f7fc ff7c 	bl	800b850 <move_window>
 800e958:	4603      	mov	r3, r0
 800e95a:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e95e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e962:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 800e966:	3a01      	subs	r2, #1
 800e968:	619a      	str	r2, [r3, #24]
 800e96a:	e01f      	b.n	800e9ac <f_open+0x414>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e96c:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e970:	2b00      	cmp	r3, #0
 800e972:	d11b      	bne.n	800e9ac <f_open+0x414>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e974:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 800e978:	f003 0310 	and.w	r3, r3, #16
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d003      	beq.n	800e988 <f_open+0x3f0>
					res = FR_NO_FILE;
 800e980:	2304      	movs	r3, #4
 800e982:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800e986:	e011      	b.n	800e9ac <f_open+0x414>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e988:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e98c:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	f003 0302 	and.w	r3, r3, #2
 800e996:	2b00      	cmp	r3, #0
 800e998:	d008      	beq.n	800e9ac <f_open+0x414>
 800e99a:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d002      	beq.n	800e9ac <f_open+0x414>
						res = FR_DENIED;
 800e9a6:	2307      	movs	r3, #7
 800e9a8:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					}
				}
			}
		}
		if (res == FR_OK) {
 800e9ac:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d148      	bne.n	800ea46 <f_open+0x4ae>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e9b4:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e9b8:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	f003 0308 	and.w	r3, r3, #8
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00b      	beq.n	800e9de <f_open+0x446>
				mode |= FA_MODIFIED;
 800e9c6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e9ca:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e9ce:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800e9d2:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800e9d6:	7812      	ldrb	r2, [r2, #0]
 800e9d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e9dc:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e9de:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e9e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e9e4:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e9e8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800e9f0:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800e9f4:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e9f8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ea00:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea04:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	bf8c      	ite	hi
 800ea0e:	2301      	movhi	r3, #1
 800ea10:	2300      	movls	r3, #0
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	461a      	mov	r2, r3
 800ea16:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800ea1a:	4611      	mov	r1, r2
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7fc fde5 	bl	800b5ec <inc_lock>
 800ea22:	4602      	mov	r2, r0
 800ea24:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea28:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ea30:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea34:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d102      	bne.n	800ea46 <f_open+0x4ae>
 800ea40:	2302      	movs	r3, #2
 800ea42:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ea46:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	f040 8190 	bne.w	800ed70 <f_open+0x7d8>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ea50:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	2b04      	cmp	r3, #4
 800ea58:	d14c      	bne.n	800eaf4 <f_open+0x55c>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800ea5a:	f8d7 2490 	ldr.w	r2, [r7, #1168]	@ 0x490
 800ea5e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea62:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800ea6a:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 800ea6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea72:	4613      	mov	r3, r2
 800ea74:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ea78:	f897 248f 	ldrb.w	r2, [r7, #1167]	@ 0x48f
 800ea7c:	431a      	orrs	r2, r3
 800ea7e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea82:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800ea8a:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 800ea8e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea92:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800ea9a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ea9e:	691b      	ldr	r3, [r3, #16]
 800eaa0:	3334      	adds	r3, #52	@ 0x34
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fc faa7 	bl	800aff6 <ld_dword>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eaae:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800eab6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eaba:	691b      	ldr	r3, [r3, #16]
 800eabc:	3338      	adds	r3, #56	@ 0x38
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fc fabc 	bl	800b03c <ld_qword>
 800eac4:	4602      	mov	r2, r0
 800eac6:	460b      	mov	r3, r1
 800eac8:	f507 619f 	add.w	r1, r7, #1272	@ 0x4f8
 800eacc:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800ead0:	6809      	ldr	r1, [r1, #0]
 800ead2:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ead6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eada:	691b      	ldr	r3, [r3, #16]
 800eadc:	3321      	adds	r3, #33	@ 0x21
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	f003 0302 	and.w	r3, r3, #2
 800eae4:	b2da      	uxtb	r2, r3
 800eae6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eaea:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	71da      	strb	r2, [r3, #7]
 800eaf2:	e021      	b.n	800eb38 <f_open+0x5a0>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800eaf4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eaf8:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800eafc:	4611      	mov	r1, r2
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fd fe60 	bl	800c7c4 <ld_clust>
 800eb04:	4602      	mov	r2, r0
 800eb06:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb0a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800eb12:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800eb16:	331c      	adds	r3, #28
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7fc fa6c 	bl	800aff6 <ld_dword>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2200      	movs	r2, #0
 800eb22:	60bb      	str	r3, [r7, #8]
 800eb24:	60fa      	str	r2, [r7, #12]
 800eb26:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb2a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800eb34:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800eb38:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb3c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	2200      	movs	r2, #0
 800eb44:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800eb46:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800eb4a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb4e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800eb56:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eb5a:	88da      	ldrh	r2, [r3, #6]
 800eb5c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb60:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800eb68:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb6c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800eb76:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800eb7a:	7812      	ldrb	r2, [r2, #0]
 800eb7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800eb80:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb84:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800eb90:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb94:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800eb9e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eba2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eba6:	6819      	ldr	r1, [r3, #0]
 800eba8:	f04f 0200 	mov.w	r2, #0
 800ebac:	f04f 0300 	mov.w	r3, #0
 800ebb0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ebb4:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ebb8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	3354      	adds	r3, #84	@ 0x54
 800ebc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fc fc03 	bl	800b3d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ebcc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ebd0:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	f003 0320 	and.w	r3, r3, #32
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f000 80c8 	beq.w	800ed70 <f_open+0x7d8>
 800ebe0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ebe4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	f000 80be 	beq.w	800ed70 <f_open+0x7d8>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ebf4:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ebf8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ec02:	f507 619f 	add.w	r1, r7, #1272	@ 0x4f8
 800ec06:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800ec0a:	6809      	ldr	r1, [r1, #0]
 800ec0c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ec10:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ec14:	895b      	ldrh	r3, [r3, #10]
 800ec16:	025b      	lsls	r3, r3, #9
 800ec18:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ec1c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec20:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	689b      	ldr	r3, [r3, #8]
 800ec28:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ec2c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec30:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ec3a:	f507 619d 	add.w	r1, r7, #1256	@ 0x4e8
 800ec3e:	e9c1 2300 	strd	r2, r3, [r1]
 800ec42:	e02f      	b.n	800eca4 <f_open+0x70c>
					clst = get_fat(&fp->obj, clst);
 800ec44:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec48:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	@ 0x4f0
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7fc feb8 	bl	800b9c8 <get_fat>
 800ec58:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
					if (clst <= 1) res = FR_INT_ERR;
 800ec5c:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d802      	bhi.n	800ec6a <f_open+0x6d2>
 800ec64:	2302      	movs	r3, #2
 800ec66:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ec6a:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800ec6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec72:	d102      	bne.n	800ec7a <f_open+0x6e2>
 800ec74:	2301      	movs	r3, #1
 800ec76:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ec7a:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 800ec7e:	2200      	movs	r2, #0
 800ec80:	469a      	mov	sl, r3
 800ec82:	4693      	mov	fp, r2
 800ec84:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800ec88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8c:	ebb2 010a 	subs.w	r1, r2, sl
 800ec90:	6039      	str	r1, [r7, #0]
 800ec92:	eb63 030b 	sbc.w	r3, r3, fp
 800ec96:	607b      	str	r3, [r7, #4]
 800ec98:	f507 619d 	add.w	r1, r7, #1256	@ 0x4e8
 800ec9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eca0:	e9c1 2300 	strd	r2, r3, [r1]
 800eca4:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d10c      	bne.n	800ecc6 <f_open+0x72e>
 800ecac:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	4698      	mov	r8, r3
 800ecb4:	4691      	mov	r9, r2
 800ecb6:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800ecba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbe:	4590      	cmp	r8, r2
 800ecc0:	eb79 0303 	sbcs.w	r3, r9, r3
 800ecc4:	d3be      	bcc.n	800ec44 <f_open+0x6ac>
				}
				fp->clust = clst;
 800ecc6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ecca:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f8d7 24f0 	ldr.w	r2, [r7, #1264]	@ 0x4f0
 800ecd4:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ecd6:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d148      	bne.n	800ed70 <f_open+0x7d8>
 800ecde:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800ece2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece6:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800ecea:	2500      	movs	r5, #0
 800ecec:	ea54 0305 	orrs.w	r3, r4, r5
 800ecf0:	d03e      	beq.n	800ed70 <f_open+0x7d8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ecf2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ecf6:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	@ 0x4f0
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fc fe44 	bl	800b988 <clust2sect>
 800ed00:	f8c7 04d8 	str.w	r0, [r7, #1240]	@ 0x4d8
 800ed04:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d103      	bne.n	800ed14 <f_open+0x77c>
						res = FR_INT_ERR;
 800ed0c:	2302      	movs	r3, #2
 800ed0e:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800ed12:	e02d      	b.n	800ed70 <f_open+0x7d8>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ed14:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800ed18:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed1c:	f04f 0200 	mov.w	r2, #0
 800ed20:	f04f 0300 	mov.w	r3, #0
 800ed24:	0a42      	lsrs	r2, r0, #9
 800ed26:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800ed2a:	0a4b      	lsrs	r3, r1, #9
 800ed2c:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 800ed30:	441a      	add	r2, r3
 800ed32:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed36:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ed3e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ed42:	7858      	ldrb	r0, [r3, #1]
 800ed44:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed48:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ed52:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed56:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ed5e:	2301      	movs	r3, #1
 800ed60:	f7fc f8d2 	bl	800af08 <disk_read>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d002      	beq.n	800ed70 <f_open+0x7d8>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ed70:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d006      	beq.n	800ed86 <f_open+0x7ee>
 800ed78:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed7c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	2200      	movs	r2, #0
 800ed84:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ed86:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ed8a:	f897 24f7 	ldrb.w	r2, [r7, #1271]	@ 0x4f7
 800ed8e:	4611      	mov	r1, r2
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7fc fb91 	bl	800b4b8 <unlock_fs>
 800ed96:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f507 679f 	add.w	r7, r7, #1272	@ 0x4f8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800eda6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eda6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edaa:	b08d      	sub	sp, #52	@ 0x34
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	2200      	movs	r2, #0
 800edbe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f107 0210 	add.w	r2, r7, #16
 800edc6:	4611      	mov	r1, r2
 800edc8:	4618      	mov	r0, r3
 800edca:	f7ff fb39 	bl	800e440 <validate>
 800edce:	4603      	mov	r3, r0
 800edd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800edd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d108      	bne.n	800edee <f_write+0x48>
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ede2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ede6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800edea:	2b00      	cmp	r3, #0
 800edec:	d009      	beq.n	800ee02 <f_write+0x5c>
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800edf4:	4611      	mov	r1, r2
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7fc fb5e 	bl	800b4b8 <unlock_fs>
 800edfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee00:	e1af      	b.n	800f162 <f_write+0x3bc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ee08:	f003 0302 	and.w	r3, r3, #2
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d106      	bne.n	800ee1e <f_write+0x78>
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	2107      	movs	r1, #7
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fc fb4f 	bl	800b4b8 <unlock_fs>
 800ee1a:	2307      	movs	r3, #7
 800ee1c:	e1a1      	b.n	800f162 <f_write+0x3bc>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	2b04      	cmp	r3, #4
 800ee24:	f000 8188 	beq.w	800f138 <f_write+0x392>
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	18d1      	adds	r1, r2, r3
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ee38:	4613      	mov	r3, r2
 800ee3a:	4299      	cmp	r1, r3
 800ee3c:	f080 817c 	bcs.w	800f138 <f_write+0x392>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ee46:	4613      	mov	r3, r2
 800ee48:	43db      	mvns	r3, r3
 800ee4a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ee4c:	e174      	b.n	800f138 <f_write+0x392>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ee54:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800ee58:	2500      	movs	r5, #0
 800ee5a:	ea54 0305 	orrs.w	r3, r4, r5
 800ee5e:	f040 8119 	bne.w	800f094 <f_write+0x2ee>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ee68:	f04f 0200 	mov.w	r2, #0
 800ee6c:	f04f 0300 	mov.w	r3, #0
 800ee70:	0a42      	lsrs	r2, r0, #9
 800ee72:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800ee76:	0a4b      	lsrs	r3, r1, #9
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	895b      	ldrh	r3, [r3, #10]
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	4013      	ands	r3, r2
 800ee80:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ee82:	69bb      	ldr	r3, [r7, #24]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d150      	bne.n	800ef2a <f_write+0x184>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	d10c      	bne.n	800eeac <f_write+0x106>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ee98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d11a      	bne.n	800eed4 <f_write+0x12e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2100      	movs	r1, #0
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fd f992 	bl	800c1cc <create_chain>
 800eea8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800eeaa:	e013      	b.n	800eed4 <f_write+0x12e>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d007      	beq.n	800eec4 <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f7fd fa87 	bl	800c3ce <clmt_clust>
 800eec0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800eec2:	e007      	b.n	800eed4 <f_write+0x12e>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800eec4:	68fa      	ldr	r2, [r7, #12]
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeca:	4619      	mov	r1, r3
 800eecc:	4610      	mov	r0, r2
 800eece:	f7fd f97d 	bl	800c1cc <create_chain>
 800eed2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	f000 8133 	beq.w	800f142 <f_write+0x39c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d10a      	bne.n	800eef8 <f_write+0x152>
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2202      	movs	r2, #2
 800eee6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	2102      	movs	r1, #2
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fc fae2 	bl	800b4b8 <unlock_fs>
 800eef4:	2302      	movs	r3, #2
 800eef6:	e134      	b.n	800f162 <f_write+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eefe:	d10a      	bne.n	800ef16 <f_write+0x170>
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2201      	movs	r2, #1
 800ef04:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	2101      	movs	r1, #1
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fc fad3 	bl	800b4b8 <unlock_fs>
 800ef12:	2301      	movs	r3, #1
 800ef14:	e125      	b.n	800f162 <f_write+0x3bc>
				fp->clust = clst;			/* Update current cluster */
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef1a:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d102      	bne.n	800ef2a <f_write+0x184>
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef28:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef30:	b25b      	sxtb	r3, r3
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	da20      	bge.n	800ef78 <f_write+0x1d2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	7858      	ldrb	r0, [r3, #1]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ef44:	2301      	movs	r3, #1
 800ef46:	f7fb ffff 	bl	800af48 <disk_write>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d00a      	beq.n	800ef66 <f_write+0x1c0>
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2201      	movs	r2, #1
 800ef54:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	2101      	movs	r1, #1
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7fc faab 	bl	800b4b8 <unlock_fs>
 800ef62:	2301      	movs	r3, #1
 800ef64:	e0fd      	b.n	800f162 <f_write+0x3bc>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef70:	b2da      	uxtb	r2, r3
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ef78:	693a      	ldr	r2, [r7, #16]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef7e:	4619      	mov	r1, r3
 800ef80:	4610      	mov	r0, r2
 800ef82:	f7fc fd01 	bl	800b988 <clust2sect>
 800ef86:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d10a      	bne.n	800efa4 <f_write+0x1fe>
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2202      	movs	r2, #2
 800ef92:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	2102      	movs	r1, #2
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fc fa8c 	bl	800b4b8 <unlock_fs>
 800efa0:	2302      	movs	r3, #2
 800efa2:	e0de      	b.n	800f162 <f_write+0x3bc>
			sect += csect;
 800efa4:	697a      	ldr	r2, [r7, #20]
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	4413      	add	r3, r2
 800efaa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	0a5b      	lsrs	r3, r3, #9
 800efb0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800efb2:	6a3b      	ldr	r3, [r7, #32]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d044      	beq.n	800f042 <f_write+0x29c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800efb8:	69ba      	ldr	r2, [r7, #24]
 800efba:	6a3b      	ldr	r3, [r7, #32]
 800efbc:	4413      	add	r3, r2
 800efbe:	693a      	ldr	r2, [r7, #16]
 800efc0:	8952      	ldrh	r2, [r2, #10]
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d905      	bls.n	800efd2 <f_write+0x22c>
					cc = fs->csize - csect;
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	895b      	ldrh	r3, [r3, #10]
 800efca:	461a      	mov	r2, r3
 800efcc:	69bb      	ldr	r3, [r7, #24]
 800efce:	1ad3      	subs	r3, r2, r3
 800efd0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	7858      	ldrb	r0, [r3, #1]
 800efd6:	6a3b      	ldr	r3, [r7, #32]
 800efd8:	697a      	ldr	r2, [r7, #20]
 800efda:	69f9      	ldr	r1, [r7, #28]
 800efdc:	f7fb ffb4 	bl	800af48 <disk_write>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d00a      	beq.n	800effc <f_write+0x256>
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2201      	movs	r2, #1
 800efea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	2101      	movs	r1, #1
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fc fa60 	bl	800b4b8 <unlock_fs>
 800eff8:	2301      	movs	r3, #1
 800effa:	e0b2      	b.n	800f162 <f_write+0x3bc>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	1ad3      	subs	r3, r2, r3
 800f004:	6a3a      	ldr	r2, [r7, #32]
 800f006:	429a      	cmp	r2, r3
 800f008:	d917      	bls.n	800f03a <f_write+0x294>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	1ad3      	subs	r3, r2, r3
 800f018:	025b      	lsls	r3, r3, #9
 800f01a:	69fa      	ldr	r2, [r7, #28]
 800f01c:	4413      	add	r3, r2
 800f01e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f022:	4619      	mov	r1, r3
 800f024:	f7fc f9b4 	bl	800b390 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f02e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f032:	b2da      	uxtb	r2, r3
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f03a:	6a3b      	ldr	r3, [r7, #32]
 800f03c:	025b      	lsls	r3, r3, #9
 800f03e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800f040:	e04f      	b.n	800f0e2 <f_write+0x33c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f046:	697a      	ldr	r2, [r7, #20]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d020      	beq.n	800f08e <f_write+0x2e8>
				fp->fptr < fp->obj.objsize &&
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f058:	4290      	cmp	r0, r2
 800f05a:	eb71 0303 	sbcs.w	r3, r1, r3
 800f05e:	d216      	bcs.n	800f08e <f_write+0x2e8>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	7858      	ldrb	r0, [r3, #1]
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f06a:	2301      	movs	r3, #1
 800f06c:	697a      	ldr	r2, [r7, #20]
 800f06e:	f7fb ff4b 	bl	800af08 <disk_read>
 800f072:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f074:	2b00      	cmp	r3, #0
 800f076:	d00a      	beq.n	800f08e <f_write+0x2e8>
					ABORT(fs, FR_DISK_ERR);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2201      	movs	r2, #1
 800f07c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	2101      	movs	r1, #1
 800f084:	4618      	mov	r0, r3
 800f086:	f7fc fa17 	bl	800b4b8 <unlock_fs>
 800f08a:	2301      	movs	r3, #1
 800f08c:	e069      	b.n	800f162 <f_write+0x3bc>
			}
#endif
			fp->sect = sect;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	697a      	ldr	r2, [r7, #20]
 800f092:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f09a:	4613      	mov	r3, r2
 800f09c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0a0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f0a4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f0a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d901      	bls.n	800f0b2 <f_write+0x30c>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f0be:	4613      	mov	r3, r2
 800f0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0c4:	440b      	add	r3, r1
 800f0c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0c8:	69f9      	ldr	r1, [r7, #28]
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fc f960 	bl	800b390 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f0d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f0da:	b2da      	uxtb	r2, r3
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f0e2:	69fa      	ldr	r2, [r7, #28]
 800f0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e6:	4413      	add	r3, r2
 800f0e8:	61fb      	str	r3, [r7, #28]
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f0f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f0f2:	2000      	movs	r0, #0
 800f0f4:	4688      	mov	r8, r1
 800f0f6:	4681      	mov	r9, r0
 800f0f8:	eb12 0a08 	adds.w	sl, r2, r8
 800f0fc:	eb43 0b09 	adc.w	fp, r3, r9
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f10c:	68f9      	ldr	r1, [r7, #12]
 800f10e:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800f112:	4282      	cmp	r2, r0
 800f114:	eb73 0601 	sbcs.w	r6, r3, r1
 800f118:	d201      	bcs.n	800f11e <f_write+0x378>
 800f11a:	4602      	mov	r2, r0
 800f11c:	460b      	mov	r3, r1
 800f11e:	68f9      	ldr	r1, [r7, #12]
 800f120:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f12a:	441a      	add	r2, r3
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	601a      	str	r2, [r3, #0]
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f134:	1ad3      	subs	r3, r2, r3
 800f136:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f47f ae87 	bne.w	800ee4e <f_write+0xa8>
 800f140:	e000      	b.n	800f144 <f_write+0x39e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f142:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f14a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f14e:	b2da      	uxtb	r2, r3
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	2100      	movs	r1, #0
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fc f9ac 	bl	800b4b8 <unlock_fs>
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	3734      	adds	r7, #52	@ 0x34
 800f166:	46bd      	mov	sp, r7
 800f168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f16c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 800f172:	af00      	add	r7, sp, #0
 800f174:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f178:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f17c:	6018      	str	r0, [r3, #0]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f17e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f182:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 800f18c:	4611      	mov	r1, r2
 800f18e:	4618      	mov	r0, r3
 800f190:	f7ff f956 	bl	800e440 <validate>
 800f194:	4603      	mov	r3, r0
 800f196:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	if (res == FR_OK) {
 800f19a:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	f040 818b 	bne.w	800f4ba <f_sync+0x34e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f1a4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f1a8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f1b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f000 817f 	beq.w	800f4ba <f_sync+0x34e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f1bc:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f1c0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f1ca:	b25b      	sxtb	r3, r3
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	da2e      	bge.n	800f22e <f_sync+0xc2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f1d0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f1d4:	7858      	ldrb	r0, [r3, #1]
 800f1d6:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f1da:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f1e4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f1e8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	f7fb fea9 	bl	800af48 <disk_write>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d007      	beq.n	800f20c <f_sync+0xa0>
 800f1fc:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f200:	2101      	movs	r1, #1
 800f202:	4618      	mov	r0, r3
 800f204:	f7fc f958 	bl	800b4b8 <unlock_fs>
 800f208:	2301      	movs	r3, #1
 800f20a:	e160      	b.n	800f4ce <f_sync+0x362>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f20c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f210:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f21a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f21e:	b2da      	uxtb	r2, r3
 800f220:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f224:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f22e:	f7fb fbc7 	bl	800a9c0 <get_fattime>
 800f232:	f8c7 04c0 	str.w	r0, [r7, #1216]	@ 0x4c0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f236:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	2b04      	cmp	r3, #4
 800f23e:	f040 80ca 	bne.w	800f3d6 <f_sync+0x26a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800f242:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f246:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fc fea9 	bl	800bfa4 <fill_first_frag>
 800f252:	4603      	mov	r3, r0
 800f254:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 800f258:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d112      	bne.n	800f286 <f_sync+0x11a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f260:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f264:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f268:	6818      	ldr	r0, [r3, #0]
 800f26a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f26e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f276:	f04f 32ff 	mov.w	r2, #4294967295
 800f27a:	4619      	mov	r1, r3
 800f27c:	f7fc fec1 	bl	800c002 <fill_last_frag>
 800f280:	4603      	mov	r3, r0
 800f282:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				}
				if (res == FR_OK) {
 800f286:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f040 8115 	bne.w	800f4ba <f_sync+0x34e>
					INIT_NAMBUF(fs);
 800f290:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f294:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f298:	60da      	str	r2, [r3, #12]
 800f29a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f29e:	f107 0208 	add.w	r2, r7, #8
 800f2a2:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800f2a4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f2a8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800f2b2:	4611      	mov	r1, r2
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7fd fdcf 	bl	800ce58 <load_obj_dir>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					if (res == FR_OK) {
 800f2c0:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	f040 80f8 	bne.w	800f4ba <f_sync+0x34e>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800f2ca:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f2ce:	691b      	ldr	r3, [r3, #16]
 800f2d0:	3304      	adds	r3, #4
 800f2d2:	781a      	ldrb	r2, [r3, #0]
 800f2d4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f2d8:	691b      	ldr	r3, [r3, #16]
 800f2da:	3304      	adds	r3, #4
 800f2dc:	f042 0220 	orr.w	r2, r2, #32
 800f2e0:	b2d2      	uxtb	r2, r2
 800f2e2:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800f2e4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f2e8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	79da      	ldrb	r2, [r3, #7]
 800f2f0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f2f4:	691b      	ldr	r3, [r3, #16]
 800f2f6:	3321      	adds	r3, #33	@ 0x21
 800f2f8:	f042 0201 	orr.w	r2, r2, #1
 800f2fc:	b2d2      	uxtb	r2, r2
 800f2fe:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800f300:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f304:	691b      	ldr	r3, [r3, #16]
 800f306:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f30a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f30e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	689b      	ldr	r3, [r3, #8]
 800f316:	4619      	mov	r1, r3
 800f318:	4610      	mov	r0, r2
 800f31a:	f7fb ff85 	bl	800b228 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800f31e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f322:	691b      	ldr	r3, [r3, #16]
 800f324:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f328:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f32c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f336:	4608      	mov	r0, r1
 800f338:	f7fb ffa2 	bl	800b280 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800f33c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f340:	691b      	ldr	r3, [r3, #16]
 800f342:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800f346:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f34a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f354:	4608      	mov	r0, r1
 800f356:	f7fb ff93 	bl	800b280 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800f35a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f35e:	691b      	ldr	r3, [r3, #16]
 800f360:	330c      	adds	r3, #12
 800f362:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 800f366:	4618      	mov	r0, r3
 800f368:	f7fb ff5e 	bl	800b228 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800f36c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f370:	691b      	ldr	r3, [r3, #16]
 800f372:	3315      	adds	r3, #21
 800f374:	2200      	movs	r2, #0
 800f376:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800f378:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f37c:	691b      	ldr	r3, [r3, #16]
 800f37e:	3310      	adds	r3, #16
 800f380:	2100      	movs	r1, #0
 800f382:	4618      	mov	r0, r3
 800f384:	f7fb ff50 	bl	800b228 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800f388:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fd fd99 	bl	800cec4 <store_xdir>
 800f392:	4603      	mov	r3, r0
 800f394:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
						if (res == FR_OK) {
 800f398:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	f040 808c 	bne.w	800f4ba <f_sync+0x34e>
							res = sync_fs(fs);
 800f3a2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fc fa80 	bl	800b8ac <sync_fs>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
							fp->flag &= (BYTE)~FA_MODIFIED;
 800f3b2:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f3b6:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f3c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f3c4:	b2da      	uxtb	r2, r3
 800f3c6:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f3ca:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800f3d4:	e071      	b.n	800f4ba <f_sync+0x34e>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f3d6:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	@ 0x4b8
 800f3da:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f3de:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	4610      	mov	r0, r2
 800f3ea:	f7fc fa31 	bl	800b850 <move_window>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 800f3f4:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d15e      	bne.n	800f4ba <f_sync+0x34e>
					dir = fp->dir_ptr;
 800f3fc:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f400:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f408:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f40c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f410:	330b      	adds	r3, #11
 800f412:	781a      	ldrb	r2, [r3, #0]
 800f414:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f418:	330b      	adds	r3, #11
 800f41a:	f042 0220 	orr.w	r2, r2, #32
 800f41e:	b2d2      	uxtb	r2, r2
 800f420:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f422:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f426:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	6818      	ldr	r0, [r3, #0]
 800f42e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f432:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	461a      	mov	r2, r3
 800f43c:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 800f440:	f7fd f9df 	bl	800c802 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f444:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f448:	f103 001c 	add.w	r0, r3, #28
 800f44c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f450:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f45a:	4613      	mov	r3, r2
 800f45c:	4619      	mov	r1, r3
 800f45e:	f7fb fee3 	bl	800b228 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f462:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f466:	3316      	adds	r3, #22
 800f468:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7fb fedb 	bl	800b228 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f472:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f476:	3312      	adds	r3, #18
 800f478:	2100      	movs	r1, #0
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fb feb9 	bl	800b1f2 <st_word>
					fs->wflag = 1;
 800f480:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f484:	2201      	movs	r2, #1
 800f486:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f488:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fc fa0d 	bl	800b8ac <sync_fs>
 800f492:	4603      	mov	r3, r0
 800f494:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f498:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f49c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f4a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f4aa:	b2da      	uxtb	r2, r3
 800f4ac:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f4b0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f4ba:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f4be:	f897 24c7 	ldrb.w	r2, [r7, #1223]	@ 0x4c7
 800f4c2:	4611      	mov	r1, r2
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7fb fff7 	bl	800b4b8 <unlock_fs>
 800f4ca:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f507 6799 	add.w	r7, r7, #1224	@ 0x4c8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f7ff fe43 	bl	800f16c <f_sync>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f4ea:	7bfb      	ldrb	r3, [r7, #15]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d11d      	bne.n	800f52c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f107 0208 	add.w	r2, r7, #8
 800f4f6:	4611      	mov	r1, r2
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7fe ffa1 	bl	800e440 <validate>
 800f4fe:	4603      	mov	r3, r0
 800f500:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f502:	7bfb      	ldrb	r3, [r7, #15]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d111      	bne.n	800f52c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7fc f8fb 	bl	800b708 <dec_lock>
 800f512:	4603      	mov	r3, r0
 800f514:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f516:	7bfb      	ldrb	r3, [r7, #15]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d102      	bne.n	800f522 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	2100      	movs	r1, #0
 800f526:	4618      	mov	r0, r3
 800f528:	f7fb ffc6 	bl	800b4b8 <unlock_fs>
#endif
		}
	}
	return res;
 800f52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3710      	adds	r7, #16
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
	...

0800f538 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f538:	b480      	push	{r7}
 800f53a:	b087      	sub	sp, #28
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	4613      	mov	r3, r2
 800f544:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f546:	2301      	movs	r3, #1
 800f548:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f54a:	2300      	movs	r3, #0
 800f54c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f54e:	4b1f      	ldr	r3, [pc, #124]	@ (800f5cc <FATFS_LinkDriverEx+0x94>)
 800f550:	7a5b      	ldrb	r3, [r3, #9]
 800f552:	b2db      	uxtb	r3, r3
 800f554:	2b00      	cmp	r3, #0
 800f556:	d131      	bne.n	800f5bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f558:	4b1c      	ldr	r3, [pc, #112]	@ (800f5cc <FATFS_LinkDriverEx+0x94>)
 800f55a:	7a5b      	ldrb	r3, [r3, #9]
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	461a      	mov	r2, r3
 800f560:	4b1a      	ldr	r3, [pc, #104]	@ (800f5cc <FATFS_LinkDriverEx+0x94>)
 800f562:	2100      	movs	r1, #0
 800f564:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f566:	4b19      	ldr	r3, [pc, #100]	@ (800f5cc <FATFS_LinkDriverEx+0x94>)
 800f568:	7a5b      	ldrb	r3, [r3, #9]
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	4a17      	ldr	r2, [pc, #92]	@ (800f5cc <FATFS_LinkDriverEx+0x94>)
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	4413      	add	r3, r2
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f576:	4b15      	ldr	r3, [pc, #84]	@ (800f5cc <FATFS_LinkDriverEx+0x94>)
 800f578:	7a5b      	ldrb	r3, [r3, #9]
 800f57a:	b2db      	uxtb	r3, r3
 800f57c:	461a      	mov	r2, r3
 800f57e:	4b13      	ldr	r3, [pc, #76]	@ (800f5cc <FATFS_LinkDriverEx+0x94>)
 800f580:	4413      	add	r3, r2
 800f582:	79fa      	ldrb	r2, [r7, #7]
 800f584:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f586:	4b11      	ldr	r3, [pc, #68]	@ (800f5cc <FATFS_LinkDriverEx+0x94>)
 800f588:	7a5b      	ldrb	r3, [r3, #9]
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	1c5a      	adds	r2, r3, #1
 800f58e:	b2d1      	uxtb	r1, r2
 800f590:	4a0e      	ldr	r2, [pc, #56]	@ (800f5cc <FATFS_LinkDriverEx+0x94>)
 800f592:	7251      	strb	r1, [r2, #9]
 800f594:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f596:	7dbb      	ldrb	r3, [r7, #22]
 800f598:	3330      	adds	r3, #48	@ 0x30
 800f59a:	b2da      	uxtb	r2, r3
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	223a      	movs	r2, #58	@ 0x3a
 800f5a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	3302      	adds	r3, #2
 800f5ac:	222f      	movs	r2, #47	@ 0x2f
 800f5ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	3303      	adds	r3, #3
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f5bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	371c      	adds	r7, #28
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop
 800f5cc:	2000114c 	.word	0x2000114c

0800f5d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f5da:	2200      	movs	r2, #0
 800f5dc:	6839      	ldr	r1, [r7, #0]
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f7ff ffaa 	bl	800f538 <FATFS_LinkDriverEx>
 800f5e4:	4603      	mov	r3, r0
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
	...

0800f5f0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b085      	sub	sp, #20
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	6039      	str	r1, [r7, #0]
 800f5fa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f5fc:	88fb      	ldrh	r3, [r7, #6]
 800f5fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800f600:	d802      	bhi.n	800f608 <ff_convert+0x18>
		c = chr;
 800f602:	88fb      	ldrh	r3, [r7, #6]
 800f604:	81fb      	strh	r3, [r7, #14]
 800f606:	e025      	b.n	800f654 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00b      	beq.n	800f626 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f60e:	88fb      	ldrh	r3, [r7, #6]
 800f610:	2bff      	cmp	r3, #255	@ 0xff
 800f612:	d805      	bhi.n	800f620 <ff_convert+0x30>
 800f614:	88fb      	ldrh	r3, [r7, #6]
 800f616:	3b80      	subs	r3, #128	@ 0x80
 800f618:	4a12      	ldr	r2, [pc, #72]	@ (800f664 <ff_convert+0x74>)
 800f61a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f61e:	e000      	b.n	800f622 <ff_convert+0x32>
 800f620:	2300      	movs	r3, #0
 800f622:	81fb      	strh	r3, [r7, #14]
 800f624:	e016      	b.n	800f654 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f626:	2300      	movs	r3, #0
 800f628:	81fb      	strh	r3, [r7, #14]
 800f62a:	e009      	b.n	800f640 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f62c:	89fb      	ldrh	r3, [r7, #14]
 800f62e:	4a0d      	ldr	r2, [pc, #52]	@ (800f664 <ff_convert+0x74>)
 800f630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f634:	88fa      	ldrh	r2, [r7, #6]
 800f636:	429a      	cmp	r2, r3
 800f638:	d006      	beq.n	800f648 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f63a:	89fb      	ldrh	r3, [r7, #14]
 800f63c:	3301      	adds	r3, #1
 800f63e:	81fb      	strh	r3, [r7, #14]
 800f640:	89fb      	ldrh	r3, [r7, #14]
 800f642:	2b7f      	cmp	r3, #127	@ 0x7f
 800f644:	d9f2      	bls.n	800f62c <ff_convert+0x3c>
 800f646:	e000      	b.n	800f64a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f648:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f64a:	89fb      	ldrh	r3, [r7, #14]
 800f64c:	3380      	adds	r3, #128	@ 0x80
 800f64e:	b29b      	uxth	r3, r3
 800f650:	b2db      	uxtb	r3, r3
 800f652:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f654:	89fb      	ldrh	r3, [r7, #14]
}
 800f656:	4618      	mov	r0, r3
 800f658:	3714      	adds	r7, #20
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop
 800f664:	08016634 	.word	0x08016634

0800f668 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f668:	b480      	push	{r7}
 800f66a:	b087      	sub	sp, #28
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	4603      	mov	r3, r0
 800f670:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f672:	88fb      	ldrh	r3, [r7, #6]
 800f674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f678:	d201      	bcs.n	800f67e <ff_wtoupper+0x16>
 800f67a:	4b3e      	ldr	r3, [pc, #248]	@ (800f774 <ff_wtoupper+0x10c>)
 800f67c:	e000      	b.n	800f680 <ff_wtoupper+0x18>
 800f67e:	4b3e      	ldr	r3, [pc, #248]	@ (800f778 <ff_wtoupper+0x110>)
 800f680:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	1c9a      	adds	r2, r3, #2
 800f686:	617a      	str	r2, [r7, #20]
 800f688:	881b      	ldrh	r3, [r3, #0]
 800f68a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f68c:	8a7b      	ldrh	r3, [r7, #18]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d068      	beq.n	800f764 <ff_wtoupper+0xfc>
 800f692:	88fa      	ldrh	r2, [r7, #6]
 800f694:	8a7b      	ldrh	r3, [r7, #18]
 800f696:	429a      	cmp	r2, r3
 800f698:	d364      	bcc.n	800f764 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	1c9a      	adds	r2, r3, #2
 800f69e:	617a      	str	r2, [r7, #20]
 800f6a0:	881b      	ldrh	r3, [r3, #0]
 800f6a2:	823b      	strh	r3, [r7, #16]
 800f6a4:	8a3b      	ldrh	r3, [r7, #16]
 800f6a6:	0a1b      	lsrs	r3, r3, #8
 800f6a8:	81fb      	strh	r3, [r7, #14]
 800f6aa:	8a3b      	ldrh	r3, [r7, #16]
 800f6ac:	b2db      	uxtb	r3, r3
 800f6ae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f6b0:	88fa      	ldrh	r2, [r7, #6]
 800f6b2:	8a79      	ldrh	r1, [r7, #18]
 800f6b4:	8a3b      	ldrh	r3, [r7, #16]
 800f6b6:	440b      	add	r3, r1
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	da49      	bge.n	800f750 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f6bc:	89fb      	ldrh	r3, [r7, #14]
 800f6be:	2b08      	cmp	r3, #8
 800f6c0:	d84f      	bhi.n	800f762 <ff_wtoupper+0xfa>
 800f6c2:	a201      	add	r2, pc, #4	@ (adr r2, 800f6c8 <ff_wtoupper+0x60>)
 800f6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c8:	0800f6ed 	.word	0x0800f6ed
 800f6cc:	0800f6ff 	.word	0x0800f6ff
 800f6d0:	0800f715 	.word	0x0800f715
 800f6d4:	0800f71d 	.word	0x0800f71d
 800f6d8:	0800f725 	.word	0x0800f725
 800f6dc:	0800f72d 	.word	0x0800f72d
 800f6e0:	0800f735 	.word	0x0800f735
 800f6e4:	0800f73d 	.word	0x0800f73d
 800f6e8:	0800f745 	.word	0x0800f745
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f6ec:	88fa      	ldrh	r2, [r7, #6]
 800f6ee:	8a7b      	ldrh	r3, [r7, #18]
 800f6f0:	1ad3      	subs	r3, r2, r3
 800f6f2:	005b      	lsls	r3, r3, #1
 800f6f4:	697a      	ldr	r2, [r7, #20]
 800f6f6:	4413      	add	r3, r2
 800f6f8:	881b      	ldrh	r3, [r3, #0]
 800f6fa:	80fb      	strh	r3, [r7, #6]
 800f6fc:	e027      	b.n	800f74e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f6fe:	88fa      	ldrh	r2, [r7, #6]
 800f700:	8a7b      	ldrh	r3, [r7, #18]
 800f702:	1ad3      	subs	r3, r2, r3
 800f704:	b29b      	uxth	r3, r3
 800f706:	f003 0301 	and.w	r3, r3, #1
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	88fa      	ldrh	r2, [r7, #6]
 800f70e:	1ad3      	subs	r3, r2, r3
 800f710:	80fb      	strh	r3, [r7, #6]
 800f712:	e01c      	b.n	800f74e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f714:	88fb      	ldrh	r3, [r7, #6]
 800f716:	3b10      	subs	r3, #16
 800f718:	80fb      	strh	r3, [r7, #6]
 800f71a:	e018      	b.n	800f74e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f71c:	88fb      	ldrh	r3, [r7, #6]
 800f71e:	3b20      	subs	r3, #32
 800f720:	80fb      	strh	r3, [r7, #6]
 800f722:	e014      	b.n	800f74e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f724:	88fb      	ldrh	r3, [r7, #6]
 800f726:	3b30      	subs	r3, #48	@ 0x30
 800f728:	80fb      	strh	r3, [r7, #6]
 800f72a:	e010      	b.n	800f74e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f72c:	88fb      	ldrh	r3, [r7, #6]
 800f72e:	3b1a      	subs	r3, #26
 800f730:	80fb      	strh	r3, [r7, #6]
 800f732:	e00c      	b.n	800f74e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f734:	88fb      	ldrh	r3, [r7, #6]
 800f736:	3308      	adds	r3, #8
 800f738:	80fb      	strh	r3, [r7, #6]
 800f73a:	e008      	b.n	800f74e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f73c:	88fb      	ldrh	r3, [r7, #6]
 800f73e:	3b50      	subs	r3, #80	@ 0x50
 800f740:	80fb      	strh	r3, [r7, #6]
 800f742:	e004      	b.n	800f74e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f744:	88fb      	ldrh	r3, [r7, #6]
 800f746:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f74a:	80fb      	strh	r3, [r7, #6]
 800f74c:	bf00      	nop
			}
			break;
 800f74e:	e008      	b.n	800f762 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f750:	89fb      	ldrh	r3, [r7, #14]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d195      	bne.n	800f682 <ff_wtoupper+0x1a>
 800f756:	8a3b      	ldrh	r3, [r7, #16]
 800f758:	005b      	lsls	r3, r3, #1
 800f75a:	697a      	ldr	r2, [r7, #20]
 800f75c:	4413      	add	r3, r2
 800f75e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f760:	e78f      	b.n	800f682 <ff_wtoupper+0x1a>
			break;
 800f762:	bf00      	nop
	}

	return chr;
 800f764:	88fb      	ldrh	r3, [r7, #6]
}
 800f766:	4618      	mov	r0, r3
 800f768:	371c      	adds	r7, #28
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop
 800f774:	08016734 	.word	0x08016734
 800f778:	08016928 	.word	0x08016928

0800f77c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b086      	sub	sp, #24
 800f780:	af00      	add	r7, sp, #0
 800f782:	4603      	mov	r3, r0
 800f784:	6039      	str	r1, [r7, #0]
 800f786:	71fb      	strb	r3, [r7, #7]

    int ret;
#if _USE_MUTEX

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
 800f788:	2300      	movs	r3, #0
 800f78a:	60fb      	str	r3, [r7, #12]
 800f78c:	2300      	movs	r3, #0
 800f78e:	613b      	str	r3, [r7, #16]
    *sobj = osMutexCreate(osMutex(MTX));
 800f790:	f107 030c 	add.w	r3, r7, #12
 800f794:	4618      	mov	r0, r3
 800f796:	f000 f8e9 	bl	800f96c <osMutexCreate>
 800f79a:	4602      	mov	r2, r0
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	bf14      	ite	ne
 800f7a8:	2301      	movne	r3, #1
 800f7aa:	2300      	moveq	r3, #0
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	617b      	str	r3, [r7, #20]

    return ret;
 800f7b0:	697b      	ldr	r3, [r7, #20]
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3718      	adds	r7, #24
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b082      	sub	sp, #8
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f000 f96e 	bl	800faa4 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800f7c8:	2301      	movs	r3, #1
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b084      	sub	sp, #16
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
 800f7de:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 f8da 	bl	800f99c <osMutexWait>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d101      	bne.n	800f7f2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3710      	adds	r7, #16
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f000 f917 	bl	800fa38 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800f80a:	bf00      	nop
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}

0800f812 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f812:	b480      	push	{r7}
 800f814:	b085      	sub	sp, #20
 800f816:	af00      	add	r7, sp, #0
 800f818:	4603      	mov	r3, r0
 800f81a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f81c:	2300      	movs	r3, #0
 800f81e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f824:	2b84      	cmp	r3, #132	@ 0x84
 800f826:	d005      	beq.n	800f834 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f828:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	4413      	add	r3, r2
 800f830:	3303      	adds	r3, #3
 800f832:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f834:	68fb      	ldr	r3, [r7, #12]
}
 800f836:	4618      	mov	r0, r3
 800f838:	3714      	adds	r7, #20
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr

0800f842 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f842:	b480      	push	{r7}
 800f844:	b083      	sub	sp, #12
 800f846:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f848:	f3ef 8305 	mrs	r3, IPSR
 800f84c:	607b      	str	r3, [r7, #4]
  return(result);
 800f84e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f850:	2b00      	cmp	r3, #0
 800f852:	bf14      	ite	ne
 800f854:	2301      	movne	r3, #1
 800f856:	2300      	moveq	r3, #0
 800f858:	b2db      	uxtb	r3, r3
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	370c      	adds	r7, #12
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr

0800f866 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f866:	b580      	push	{r7, lr}
 800f868:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f86a:	f001 fcdd 	bl	8011228 <vTaskStartScheduler>
  
  return osOK;
 800f86e:	2300      	movs	r3, #0
}
 800f870:	4618      	mov	r0, r3
 800f872:	bd80      	pop	{r7, pc}

0800f874 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800f878:	f002 f922 	bl	8011ac0 <xTaskGetSchedulerState>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d101      	bne.n	800f886 <osKernelRunning+0x12>
    return 0;
 800f882:	2300      	movs	r3, #0
 800f884:	e000      	b.n	800f888 <osKernelRunning+0x14>
  else
    return 1;
 800f886:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800f888:	4618      	mov	r0, r3
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f890:	f7ff ffd7 	bl	800f842 <inHandlerMode>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d003      	beq.n	800f8a2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f89a:	f001 fdeb 	bl	8011474 <xTaskGetTickCountFromISR>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	e002      	b.n	800f8a8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f8a2:	f001 fdd7 	bl	8011454 <xTaskGetTickCount>
 800f8a6:	4603      	mov	r3, r0
  }
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ae:	b089      	sub	sp, #36	@ 0x24
 800f8b0:	af04      	add	r7, sp, #16
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	695b      	ldr	r3, [r3, #20]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d020      	beq.n	800f900 <osThreadCreate+0x54>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	699b      	ldr	r3, [r3, #24]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d01c      	beq.n	800f900 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	685c      	ldr	r4, [r3, #4]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	691e      	ldr	r6, [r3, #16]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7ff ff9a 	bl	800f812 <makeFreeRtosPriority>
 800f8de:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	695b      	ldr	r3, [r3, #20]
 800f8e4:	687a      	ldr	r2, [r7, #4]
 800f8e6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f8e8:	9202      	str	r2, [sp, #8]
 800f8ea:	9301      	str	r3, [sp, #4]
 800f8ec:	9100      	str	r1, [sp, #0]
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	4632      	mov	r2, r6
 800f8f2:	4629      	mov	r1, r5
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	f001 fa21 	bl	8010d3c <xTaskCreateStatic>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	60fb      	str	r3, [r7, #12]
 800f8fe:	e01c      	b.n	800f93a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	685c      	ldr	r4, [r3, #4]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f90c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f914:	4618      	mov	r0, r3
 800f916:	f7ff ff7c 	bl	800f812 <makeFreeRtosPriority>
 800f91a:	4602      	mov	r2, r0
 800f91c:	f107 030c 	add.w	r3, r7, #12
 800f920:	9301      	str	r3, [sp, #4]
 800f922:	9200      	str	r2, [sp, #0]
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	4632      	mov	r2, r6
 800f928:	4629      	mov	r1, r5
 800f92a:	4620      	mov	r0, r4
 800f92c:	f001 fa66 	bl	8010dfc <xTaskCreate>
 800f930:	4603      	mov	r3, r0
 800f932:	2b01      	cmp	r3, #1
 800f934:	d001      	beq.n	800f93a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f936:	2300      	movs	r3, #0
 800f938:	e000      	b.n	800f93c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f93a:	68fb      	ldr	r3, [r7, #12]
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3714      	adds	r7, #20
 800f940:	46bd      	mov	sp, r7
 800f942:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f944 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d001      	beq.n	800f95a <osDelay+0x16>
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	e000      	b.n	800f95c <osDelay+0x18>
 800f95a:	2301      	movs	r3, #1
 800f95c:	4618      	mov	r0, r3
 800f95e:	f001 fc2d 	bl	80111bc <vTaskDelay>
  
  return osOK;
 800f962:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f964:	4618      	mov	r0, r3
 800f966:	3710      	adds	r7, #16
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}

0800f96c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b082      	sub	sp, #8
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d007      	beq.n	800f98c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	685b      	ldr	r3, [r3, #4]
 800f980:	4619      	mov	r1, r3
 800f982:	2001      	movs	r0, #1
 800f984:	f000 fba5 	bl	80100d2 <xQueueCreateMutexStatic>
 800f988:	4603      	mov	r3, r0
 800f98a:	e003      	b.n	800f994 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800f98c:	2001      	movs	r0, #1
 800f98e:	f000 fb88 	bl	80100a2 <xQueueCreateMutex>
 800f992:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800f994:	4618      	mov	r0, r3
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d101      	bne.n	800f9b4 <osMutexWait+0x18>
    return osErrorParameter;
 800f9b0:	2380      	movs	r3, #128	@ 0x80
 800f9b2:	e03a      	b.n	800fa2a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9be:	d103      	bne.n	800f9c8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800f9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9c4:	60fb      	str	r3, [r7, #12]
 800f9c6:	e009      	b.n	800f9dc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d006      	beq.n	800f9dc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d101      	bne.n	800f9dc <osMutexWait+0x40>
      ticks = 1;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f9dc:	f7ff ff31 	bl	800f842 <inHandlerMode>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d017      	beq.n	800fa16 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f9e6:	f107 0308 	add.w	r3, r7, #8
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	2100      	movs	r1, #0
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f000 ffac 	bl	801094c <xQueueReceiveFromISR>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	2b01      	cmp	r3, #1
 800f9f8:	d001      	beq.n	800f9fe <osMutexWait+0x62>
      return osErrorOS;
 800f9fa:	23ff      	movs	r3, #255	@ 0xff
 800f9fc:	e015      	b.n	800fa2a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d011      	beq.n	800fa28 <osMutexWait+0x8c>
 800fa04:	4b0b      	ldr	r3, [pc, #44]	@ (800fa34 <osMutexWait+0x98>)
 800fa06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa0a:	601a      	str	r2, [r3, #0]
 800fa0c:	f3bf 8f4f 	dsb	sy
 800fa10:	f3bf 8f6f 	isb	sy
 800fa14:	e008      	b.n	800fa28 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800fa16:	68f9      	ldr	r1, [r7, #12]
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f000 fe87 	bl	801072c <xQueueSemaphoreTake>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d001      	beq.n	800fa28 <osMutexWait+0x8c>
    return osErrorOS;
 800fa24:	23ff      	movs	r3, #255	@ 0xff
 800fa26:	e000      	b.n	800fa2a <osMutexWait+0x8e>
  }
  
  return osOK;
 800fa28:	2300      	movs	r3, #0
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3710      	adds	r7, #16
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	bf00      	nop
 800fa34:	e000ed04 	.word	0xe000ed04

0800fa38 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fa40:	2300      	movs	r3, #0
 800fa42:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fa44:	2300      	movs	r3, #0
 800fa46:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800fa48:	f7ff fefb 	bl	800f842 <inHandlerMode>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d016      	beq.n	800fa80 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800fa52:	f107 0308 	add.w	r3, r7, #8
 800fa56:	4619      	mov	r1, r3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f000 fcf5 	bl	8010448 <xQueueGiveFromISR>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d001      	beq.n	800fa68 <osMutexRelease+0x30>
      return osErrorOS;
 800fa64:	23ff      	movs	r3, #255	@ 0xff
 800fa66:	e017      	b.n	800fa98 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d013      	beq.n	800fa96 <osMutexRelease+0x5e>
 800fa6e:	4b0c      	ldr	r3, [pc, #48]	@ (800faa0 <osMutexRelease+0x68>)
 800fa70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa74:	601a      	str	r2, [r3, #0]
 800fa76:	f3bf 8f4f 	dsb	sy
 800fa7a:	f3bf 8f6f 	isb	sy
 800fa7e:	e00a      	b.n	800fa96 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800fa80:	2300      	movs	r3, #0
 800fa82:	2200      	movs	r2, #0
 800fa84:	2100      	movs	r1, #0
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f000 fb3e 	bl	8010108 <xQueueGenericSend>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d001      	beq.n	800fa96 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800fa92:	23ff      	movs	r3, #255	@ 0xff
 800fa94:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800fa96:	68fb      	ldr	r3, [r7, #12]
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3710      	adds	r7, #16
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	e000ed04 	.word	0xe000ed04

0800faa4 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800faac:	f7ff fec9 	bl	800f842 <inHandlerMode>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d001      	beq.n	800faba <osMutexDelete+0x16>
    return osErrorISR;
 800fab6:	2382      	movs	r3, #130	@ 0x82
 800fab8:	e003      	b.n	800fac2 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 ffc8 	bl	8010a50 <vQueueDelete>

  return osOK;
 800fac0:	2300      	movs	r3, #0
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3708      	adds	r7, #8
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800faca:	b590      	push	{r4, r7, lr}
 800facc:	b085      	sub	sp, #20
 800face:	af02      	add	r7, sp, #8
 800fad0:	6078      	str	r0, [r7, #4]
 800fad2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	689b      	ldr	r3, [r3, #8]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d011      	beq.n	800fb00 <osMessageCreate+0x36>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	68db      	ldr	r3, [r3, #12]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d00d      	beq.n	800fb00 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6818      	ldr	r0, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6859      	ldr	r1, [r3, #4]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	689a      	ldr	r2, [r3, #8]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	2400      	movs	r4, #0
 800faf6:	9400      	str	r4, [sp, #0]
 800faf8:	f000 f9e2 	bl	800fec0 <xQueueGenericCreateStatic>
 800fafc:	4603      	mov	r3, r0
 800fafe:	e008      	b.n	800fb12 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6818      	ldr	r0, [r3, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	f000 fa55 	bl	800ffba <xQueueGenericCreate>
 800fb10:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	370c      	adds	r7, #12
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd90      	pop	{r4, r7, pc}
	...

0800fb1c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b086      	sub	sp, #24
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d101      	bne.n	800fb3a <osMessagePut+0x1e>
    ticks = 1;
 800fb36:	2301      	movs	r3, #1
 800fb38:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fb3a:	f7ff fe82 	bl	800f842 <inHandlerMode>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d018      	beq.n	800fb76 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fb44:	f107 0210 	add.w	r2, r7, #16
 800fb48:	f107 0108 	add.w	r1, r7, #8
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	f000 fbdc 	bl	801030c <xQueueGenericSendFromISR>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d001      	beq.n	800fb5e <osMessagePut+0x42>
      return osErrorOS;
 800fb5a:	23ff      	movs	r3, #255	@ 0xff
 800fb5c:	e018      	b.n	800fb90 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d014      	beq.n	800fb8e <osMessagePut+0x72>
 800fb64:	4b0c      	ldr	r3, [pc, #48]	@ (800fb98 <osMessagePut+0x7c>)
 800fb66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb6a:	601a      	str	r2, [r3, #0]
 800fb6c:	f3bf 8f4f 	dsb	sy
 800fb70:	f3bf 8f6f 	isb	sy
 800fb74:	e00b      	b.n	800fb8e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fb76:	f107 0108 	add.w	r1, r7, #8
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	697a      	ldr	r2, [r7, #20]
 800fb7e:	68f8      	ldr	r0, [r7, #12]
 800fb80:	f000 fac2 	bl	8010108 <xQueueGenericSend>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d001      	beq.n	800fb8e <osMessagePut+0x72>
      return osErrorOS;
 800fb8a:	23ff      	movs	r3, #255	@ 0xff
 800fb8c:	e000      	b.n	800fb90 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fb8e:	2300      	movs	r3, #0
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3718      	adds	r7, #24
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	e000ed04 	.word	0xe000ed04

0800fb9c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fb9c:	b590      	push	{r4, r7, lr}
 800fb9e:	b08b      	sub	sp, #44	@ 0x2c
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fbac:	2300      	movs	r3, #0
 800fbae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d10a      	bne.n	800fbcc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fbb6:	2380      	movs	r3, #128	@ 0x80
 800fbb8:	617b      	str	r3, [r7, #20]
    return event;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	461c      	mov	r4, r3
 800fbbe:	f107 0314 	add.w	r3, r7, #20
 800fbc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fbc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fbca:	e054      	b.n	800fc76 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbda:	d103      	bne.n	800fbe4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fbdc:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe0:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbe2:	e009      	b.n	800fbf8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d006      	beq.n	800fbf8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800fbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d101      	bne.n	800fbf8 <osMessageGet+0x5c>
      ticks = 1;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fbf8:	f7ff fe23 	bl	800f842 <inHandlerMode>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d01c      	beq.n	800fc3c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fc02:	f107 0220 	add.w	r2, r7, #32
 800fc06:	f107 0314 	add.w	r3, r7, #20
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	68b8      	ldr	r0, [r7, #8]
 800fc10:	f000 fe9c 	bl	801094c <xQueueReceiveFromISR>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d102      	bne.n	800fc20 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fc1a:	2310      	movs	r3, #16
 800fc1c:	617b      	str	r3, [r7, #20]
 800fc1e:	e001      	b.n	800fc24 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fc24:	6a3b      	ldr	r3, [r7, #32]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d01d      	beq.n	800fc66 <osMessageGet+0xca>
 800fc2a:	4b15      	ldr	r3, [pc, #84]	@ (800fc80 <osMessageGet+0xe4>)
 800fc2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc30:	601a      	str	r2, [r3, #0]
 800fc32:	f3bf 8f4f 	dsb	sy
 800fc36:	f3bf 8f6f 	isb	sy
 800fc3a:	e014      	b.n	800fc66 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fc3c:	f107 0314 	add.w	r3, r7, #20
 800fc40:	3304      	adds	r3, #4
 800fc42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc44:	4619      	mov	r1, r3
 800fc46:	68b8      	ldr	r0, [r7, #8]
 800fc48:	f000 fc8e 	bl	8010568 <xQueueReceive>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b01      	cmp	r3, #1
 800fc50:	d102      	bne.n	800fc58 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fc52:	2310      	movs	r3, #16
 800fc54:	617b      	str	r3, [r7, #20]
 800fc56:	e006      	b.n	800fc66 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d101      	bne.n	800fc62 <osMessageGet+0xc6>
 800fc5e:	2300      	movs	r3, #0
 800fc60:	e000      	b.n	800fc64 <osMessageGet+0xc8>
 800fc62:	2340      	movs	r3, #64	@ 0x40
 800fc64:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	461c      	mov	r4, r3
 800fc6a:	f107 0314 	add.w	r3, r7, #20
 800fc6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fc76:	68f8      	ldr	r0, [r7, #12]
 800fc78:	372c      	adds	r7, #44	@ 0x2c
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd90      	pop	{r4, r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	e000ed04 	.word	0xe000ed04

0800fc84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fc84:	b480      	push	{r7}
 800fc86:	b083      	sub	sp, #12
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f103 0208 	add.w	r2, r3, #8
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f04f 32ff 	mov.w	r2, #4294967295
 800fc9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f103 0208 	add.w	r2, r3, #8
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f103 0208 	add.w	r2, r3, #8
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fcb8:	bf00      	nop
 800fcba:	370c      	adds	r7, #12
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr

0800fcc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fcd2:	bf00      	nop
 800fcd4:	370c      	adds	r7, #12
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr

0800fcde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fcde:	b480      	push	{r7}
 800fce0:	b085      	sub	sp, #20
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
 800fce6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	685b      	ldr	r3, [r3, #4]
 800fcec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	68fa      	ldr	r2, [r7, #12]
 800fcf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	689a      	ldr	r2, [r3, #8]
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	689b      	ldr	r3, [r3, #8]
 800fd00:	683a      	ldr	r2, [r7, #0]
 800fd02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	683a      	ldr	r2, [r7, #0]
 800fd08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	687a      	ldr	r2, [r7, #4]
 800fd0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	1c5a      	adds	r2, r3, #1
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	601a      	str	r2, [r3, #0]
}
 800fd1a:	bf00      	nop
 800fd1c:	3714      	adds	r7, #20
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd24:	4770      	bx	lr

0800fd26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fd26:	b480      	push	{r7}
 800fd28:	b085      	sub	sp, #20
 800fd2a:	af00      	add	r7, sp, #0
 800fd2c:	6078      	str	r0, [r7, #4]
 800fd2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd3c:	d103      	bne.n	800fd46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	691b      	ldr	r3, [r3, #16]
 800fd42:	60fb      	str	r3, [r7, #12]
 800fd44:	e00c      	b.n	800fd60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	3308      	adds	r3, #8
 800fd4a:	60fb      	str	r3, [r7, #12]
 800fd4c:	e002      	b.n	800fd54 <vListInsert+0x2e>
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	60fb      	str	r3, [r7, #12]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	685b      	ldr	r3, [r3, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	68ba      	ldr	r2, [r7, #8]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d2f6      	bcs.n	800fd4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	685a      	ldr	r2, [r3, #4]
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	683a      	ldr	r2, [r7, #0]
 800fd6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	68fa      	ldr	r2, [r7, #12]
 800fd74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	683a      	ldr	r2, [r7, #0]
 800fd7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	1c5a      	adds	r2, r3, #1
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	601a      	str	r2, [r3, #0]
}
 800fd8c:	bf00      	nop
 800fd8e:	3714      	adds	r7, #20
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr

0800fd98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b085      	sub	sp, #20
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	691b      	ldr	r3, [r3, #16]
 800fda4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	6892      	ldr	r2, [r2, #8]
 800fdae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	689b      	ldr	r3, [r3, #8]
 800fdb4:	687a      	ldr	r2, [r7, #4]
 800fdb6:	6852      	ldr	r2, [r2, #4]
 800fdb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d103      	bne.n	800fdcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	689a      	ldr	r2, [r3, #8]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	1e5a      	subs	r2, r3, #1
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	681b      	ldr	r3, [r3, #0]
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3714      	adds	r7, #20
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr

0800fdec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b084      	sub	sp, #16
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d10b      	bne.n	800fe18 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fe00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe04:	f383 8811 	msr	BASEPRI, r3
 800fe08:	f3bf 8f6f 	isb	sy
 800fe0c:	f3bf 8f4f 	dsb	sy
 800fe10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fe12:	bf00      	nop
 800fe14:	bf00      	nop
 800fe16:	e7fd      	b.n	800fe14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fe18:	f002 f9a6 	bl	8012168 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681a      	ldr	r2, [r3, #0]
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe24:	68f9      	ldr	r1, [r7, #12]
 800fe26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fe28:	fb01 f303 	mul.w	r3, r1, r3
 800fe2c:	441a      	add	r2, r3
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2200      	movs	r2, #0
 800fe36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681a      	ldr	r2, [r3, #0]
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe48:	3b01      	subs	r3, #1
 800fe4a:	68f9      	ldr	r1, [r7, #12]
 800fe4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fe4e:	fb01 f303 	mul.w	r3, r1, r3
 800fe52:	441a      	add	r2, r3
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	22ff      	movs	r2, #255	@ 0xff
 800fe5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	22ff      	movs	r2, #255	@ 0xff
 800fe64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d114      	bne.n	800fe98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	691b      	ldr	r3, [r3, #16]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d01a      	beq.n	800feac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	3310      	adds	r3, #16
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f001 fc58 	bl	8011730 <xTaskRemoveFromEventList>
 800fe80:	4603      	mov	r3, r0
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d012      	beq.n	800feac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fe86:	4b0d      	ldr	r3, [pc, #52]	@ (800febc <xQueueGenericReset+0xd0>)
 800fe88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe8c:	601a      	str	r2, [r3, #0]
 800fe8e:	f3bf 8f4f 	dsb	sy
 800fe92:	f3bf 8f6f 	isb	sy
 800fe96:	e009      	b.n	800feac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	3310      	adds	r3, #16
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7ff fef1 	bl	800fc84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	3324      	adds	r3, #36	@ 0x24
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7ff feec 	bl	800fc84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800feac:	f002 f98e 	bl	80121cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800feb0:	2301      	movs	r3, #1
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	e000ed04 	.word	0xe000ed04

0800fec0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b08e      	sub	sp, #56	@ 0x38
 800fec4:	af02      	add	r7, sp, #8
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	607a      	str	r2, [r7, #4]
 800fecc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d10b      	bne.n	800feec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800fed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fed8:	f383 8811 	msr	BASEPRI, r3
 800fedc:	f3bf 8f6f 	isb	sy
 800fee0:	f3bf 8f4f 	dsb	sy
 800fee4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fee6:	bf00      	nop
 800fee8:	bf00      	nop
 800feea:	e7fd      	b.n	800fee8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d10b      	bne.n	800ff0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800fef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fef6:	f383 8811 	msr	BASEPRI, r3
 800fefa:	f3bf 8f6f 	isb	sy
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ff04:	bf00      	nop
 800ff06:	bf00      	nop
 800ff08:	e7fd      	b.n	800ff06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d002      	beq.n	800ff16 <xQueueGenericCreateStatic+0x56>
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <xQueueGenericCreateStatic+0x5a>
 800ff16:	2301      	movs	r3, #1
 800ff18:	e000      	b.n	800ff1c <xQueueGenericCreateStatic+0x5c>
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d10b      	bne.n	800ff38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ff20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff24:	f383 8811 	msr	BASEPRI, r3
 800ff28:	f3bf 8f6f 	isb	sy
 800ff2c:	f3bf 8f4f 	dsb	sy
 800ff30:	623b      	str	r3, [r7, #32]
}
 800ff32:	bf00      	nop
 800ff34:	bf00      	nop
 800ff36:	e7fd      	b.n	800ff34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d102      	bne.n	800ff44 <xQueueGenericCreateStatic+0x84>
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d101      	bne.n	800ff48 <xQueueGenericCreateStatic+0x88>
 800ff44:	2301      	movs	r3, #1
 800ff46:	e000      	b.n	800ff4a <xQueueGenericCreateStatic+0x8a>
 800ff48:	2300      	movs	r3, #0
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d10b      	bne.n	800ff66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ff4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	61fb      	str	r3, [r7, #28]
}
 800ff60:	bf00      	nop
 800ff62:	bf00      	nop
 800ff64:	e7fd      	b.n	800ff62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ff66:	2348      	movs	r3, #72	@ 0x48
 800ff68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	2b48      	cmp	r3, #72	@ 0x48
 800ff6e:	d00b      	beq.n	800ff88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ff70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff74:	f383 8811 	msr	BASEPRI, r3
 800ff78:	f3bf 8f6f 	isb	sy
 800ff7c:	f3bf 8f4f 	dsb	sy
 800ff80:	61bb      	str	r3, [r7, #24]
}
 800ff82:	bf00      	nop
 800ff84:	bf00      	nop
 800ff86:	e7fd      	b.n	800ff84 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ff88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ff8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d00d      	beq.n	800ffb0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ff94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff96:	2201      	movs	r2, #1
 800ff98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ffa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffa2:	9300      	str	r3, [sp, #0]
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	68b9      	ldr	r1, [r7, #8]
 800ffaa:	68f8      	ldr	r0, [r7, #12]
 800ffac:	f000 f840 	bl	8010030 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ffb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3730      	adds	r7, #48	@ 0x30
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b08a      	sub	sp, #40	@ 0x28
 800ffbe:	af02      	add	r7, sp, #8
 800ffc0:	60f8      	str	r0, [r7, #12]
 800ffc2:	60b9      	str	r1, [r7, #8]
 800ffc4:	4613      	mov	r3, r2
 800ffc6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d10b      	bne.n	800ffe6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ffce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffd2:	f383 8811 	msr	BASEPRI, r3
 800ffd6:	f3bf 8f6f 	isb	sy
 800ffda:	f3bf 8f4f 	dsb	sy
 800ffde:	613b      	str	r3, [r7, #16]
}
 800ffe0:	bf00      	nop
 800ffe2:	bf00      	nop
 800ffe4:	e7fd      	b.n	800ffe2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	68ba      	ldr	r2, [r7, #8]
 800ffea:	fb02 f303 	mul.w	r3, r2, r3
 800ffee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fff0:	69fb      	ldr	r3, [r7, #28]
 800fff2:	3348      	adds	r3, #72	@ 0x48
 800fff4:	4618      	mov	r0, r3
 800fff6:	f002 f9d9 	bl	80123ac <pvPortMalloc>
 800fffa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fffc:	69bb      	ldr	r3, [r7, #24]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d011      	beq.n	8010026 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	3348      	adds	r3, #72	@ 0x48
 801000a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801000c:	69bb      	ldr	r3, [r7, #24]
 801000e:	2200      	movs	r2, #0
 8010010:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010014:	79fa      	ldrb	r2, [r7, #7]
 8010016:	69bb      	ldr	r3, [r7, #24]
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	4613      	mov	r3, r2
 801001c:	697a      	ldr	r2, [r7, #20]
 801001e:	68b9      	ldr	r1, [r7, #8]
 8010020:	68f8      	ldr	r0, [r7, #12]
 8010022:	f000 f805 	bl	8010030 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010026:	69bb      	ldr	r3, [r7, #24]
	}
 8010028:	4618      	mov	r0, r3
 801002a:	3720      	adds	r7, #32
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	60b9      	str	r1, [r7, #8]
 801003a:	607a      	str	r2, [r7, #4]
 801003c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d103      	bne.n	801004c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	69ba      	ldr	r2, [r7, #24]
 8010048:	601a      	str	r2, [r3, #0]
 801004a:	e002      	b.n	8010052 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010052:	69bb      	ldr	r3, [r7, #24]
 8010054:	68fa      	ldr	r2, [r7, #12]
 8010056:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010058:	69bb      	ldr	r3, [r7, #24]
 801005a:	68ba      	ldr	r2, [r7, #8]
 801005c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801005e:	2101      	movs	r1, #1
 8010060:	69b8      	ldr	r0, [r7, #24]
 8010062:	f7ff fec3 	bl	800fdec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010066:	bf00      	nop
 8010068:	3710      	adds	r7, #16
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}

0801006e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801006e:	b580      	push	{r7, lr}
 8010070:	b082      	sub	sp, #8
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00e      	beq.n	801009a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2200      	movs	r2, #0
 8010086:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801008e:	2300      	movs	r3, #0
 8010090:	2200      	movs	r2, #0
 8010092:	2100      	movs	r1, #0
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 f837 	bl	8010108 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801009a:	bf00      	nop
 801009c:	3708      	adds	r7, #8
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b086      	sub	sp, #24
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	4603      	mov	r3, r0
 80100aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80100ac:	2301      	movs	r3, #1
 80100ae:	617b      	str	r3, [r7, #20]
 80100b0:	2300      	movs	r3, #0
 80100b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80100b4:	79fb      	ldrb	r3, [r7, #7]
 80100b6:	461a      	mov	r2, r3
 80100b8:	6939      	ldr	r1, [r7, #16]
 80100ba:	6978      	ldr	r0, [r7, #20]
 80100bc:	f7ff ff7d 	bl	800ffba <xQueueGenericCreate>
 80100c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80100c2:	68f8      	ldr	r0, [r7, #12]
 80100c4:	f7ff ffd3 	bl	801006e <prvInitialiseMutex>

		return xNewQueue;
 80100c8:	68fb      	ldr	r3, [r7, #12]
	}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3718      	adds	r7, #24
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b088      	sub	sp, #32
 80100d6:	af02      	add	r7, sp, #8
 80100d8:	4603      	mov	r3, r0
 80100da:	6039      	str	r1, [r7, #0]
 80100dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80100de:	2301      	movs	r3, #1
 80100e0:	617b      	str	r3, [r7, #20]
 80100e2:	2300      	movs	r3, #0
 80100e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80100e6:	79fb      	ldrb	r3, [r7, #7]
 80100e8:	9300      	str	r3, [sp, #0]
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	2200      	movs	r2, #0
 80100ee:	6939      	ldr	r1, [r7, #16]
 80100f0:	6978      	ldr	r0, [r7, #20]
 80100f2:	f7ff fee5 	bl	800fec0 <xQueueGenericCreateStatic>
 80100f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80100f8:	68f8      	ldr	r0, [r7, #12]
 80100fa:	f7ff ffb8 	bl	801006e <prvInitialiseMutex>

		return xNewQueue;
 80100fe:	68fb      	ldr	r3, [r7, #12]
	}
 8010100:	4618      	mov	r0, r3
 8010102:	3718      	adds	r7, #24
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b08e      	sub	sp, #56	@ 0x38
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]
 8010114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010116:	2300      	movs	r3, #0
 8010118:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801011e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010120:	2b00      	cmp	r3, #0
 8010122:	d10b      	bne.n	801013c <xQueueGenericSend+0x34>
	__asm volatile
 8010124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010128:	f383 8811 	msr	BASEPRI, r3
 801012c:	f3bf 8f6f 	isb	sy
 8010130:	f3bf 8f4f 	dsb	sy
 8010134:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010136:	bf00      	nop
 8010138:	bf00      	nop
 801013a:	e7fd      	b.n	8010138 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d103      	bne.n	801014a <xQueueGenericSend+0x42>
 8010142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010146:	2b00      	cmp	r3, #0
 8010148:	d101      	bne.n	801014e <xQueueGenericSend+0x46>
 801014a:	2301      	movs	r3, #1
 801014c:	e000      	b.n	8010150 <xQueueGenericSend+0x48>
 801014e:	2300      	movs	r3, #0
 8010150:	2b00      	cmp	r3, #0
 8010152:	d10b      	bne.n	801016c <xQueueGenericSend+0x64>
	__asm volatile
 8010154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010158:	f383 8811 	msr	BASEPRI, r3
 801015c:	f3bf 8f6f 	isb	sy
 8010160:	f3bf 8f4f 	dsb	sy
 8010164:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010166:	bf00      	nop
 8010168:	bf00      	nop
 801016a:	e7fd      	b.n	8010168 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	2b02      	cmp	r3, #2
 8010170:	d103      	bne.n	801017a <xQueueGenericSend+0x72>
 8010172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010176:	2b01      	cmp	r3, #1
 8010178:	d101      	bne.n	801017e <xQueueGenericSend+0x76>
 801017a:	2301      	movs	r3, #1
 801017c:	e000      	b.n	8010180 <xQueueGenericSend+0x78>
 801017e:	2300      	movs	r3, #0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d10b      	bne.n	801019c <xQueueGenericSend+0x94>
	__asm volatile
 8010184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010188:	f383 8811 	msr	BASEPRI, r3
 801018c:	f3bf 8f6f 	isb	sy
 8010190:	f3bf 8f4f 	dsb	sy
 8010194:	623b      	str	r3, [r7, #32]
}
 8010196:	bf00      	nop
 8010198:	bf00      	nop
 801019a:	e7fd      	b.n	8010198 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801019c:	f001 fc90 	bl	8011ac0 <xTaskGetSchedulerState>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d102      	bne.n	80101ac <xQueueGenericSend+0xa4>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d101      	bne.n	80101b0 <xQueueGenericSend+0xa8>
 80101ac:	2301      	movs	r3, #1
 80101ae:	e000      	b.n	80101b2 <xQueueGenericSend+0xaa>
 80101b0:	2300      	movs	r3, #0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d10b      	bne.n	80101ce <xQueueGenericSend+0xc6>
	__asm volatile
 80101b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ba:	f383 8811 	msr	BASEPRI, r3
 80101be:	f3bf 8f6f 	isb	sy
 80101c2:	f3bf 8f4f 	dsb	sy
 80101c6:	61fb      	str	r3, [r7, #28]
}
 80101c8:	bf00      	nop
 80101ca:	bf00      	nop
 80101cc:	e7fd      	b.n	80101ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80101ce:	f001 ffcb 	bl	8012168 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80101d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101da:	429a      	cmp	r2, r3
 80101dc:	d302      	bcc.n	80101e4 <xQueueGenericSend+0xdc>
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	2b02      	cmp	r3, #2
 80101e2:	d129      	bne.n	8010238 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101e4:	683a      	ldr	r2, [r7, #0]
 80101e6:	68b9      	ldr	r1, [r7, #8]
 80101e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80101ea:	f000 fc6d 	bl	8010ac8 <prvCopyDataToQueue>
 80101ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d010      	beq.n	801021a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101fa:	3324      	adds	r3, #36	@ 0x24
 80101fc:	4618      	mov	r0, r3
 80101fe:	f001 fa97 	bl	8011730 <xTaskRemoveFromEventList>
 8010202:	4603      	mov	r3, r0
 8010204:	2b00      	cmp	r3, #0
 8010206:	d013      	beq.n	8010230 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010208:	4b3f      	ldr	r3, [pc, #252]	@ (8010308 <xQueueGenericSend+0x200>)
 801020a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801020e:	601a      	str	r2, [r3, #0]
 8010210:	f3bf 8f4f 	dsb	sy
 8010214:	f3bf 8f6f 	isb	sy
 8010218:	e00a      	b.n	8010230 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801021a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801021c:	2b00      	cmp	r3, #0
 801021e:	d007      	beq.n	8010230 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010220:	4b39      	ldr	r3, [pc, #228]	@ (8010308 <xQueueGenericSend+0x200>)
 8010222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010226:	601a      	str	r2, [r3, #0]
 8010228:	f3bf 8f4f 	dsb	sy
 801022c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010230:	f001 ffcc 	bl	80121cc <vPortExitCritical>
				return pdPASS;
 8010234:	2301      	movs	r3, #1
 8010236:	e063      	b.n	8010300 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d103      	bne.n	8010246 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801023e:	f001 ffc5 	bl	80121cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010242:	2300      	movs	r3, #0
 8010244:	e05c      	b.n	8010300 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010248:	2b00      	cmp	r3, #0
 801024a:	d106      	bne.n	801025a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801024c:	f107 0314 	add.w	r3, r7, #20
 8010250:	4618      	mov	r0, r3
 8010252:	f001 fad1 	bl	80117f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010256:	2301      	movs	r3, #1
 8010258:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801025a:	f001 ffb7 	bl	80121cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801025e:	f001 f84d 	bl	80112fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010262:	f001 ff81 	bl	8012168 <vPortEnterCritical>
 8010266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010268:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801026c:	b25b      	sxtb	r3, r3
 801026e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010272:	d103      	bne.n	801027c <xQueueGenericSend+0x174>
 8010274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010276:	2200      	movs	r2, #0
 8010278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801027c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801027e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010282:	b25b      	sxtb	r3, r3
 8010284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010288:	d103      	bne.n	8010292 <xQueueGenericSend+0x18a>
 801028a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801028c:	2200      	movs	r2, #0
 801028e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010292:	f001 ff9b 	bl	80121cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010296:	1d3a      	adds	r2, r7, #4
 8010298:	f107 0314 	add.w	r3, r7, #20
 801029c:	4611      	mov	r1, r2
 801029e:	4618      	mov	r0, r3
 80102a0:	f001 fac0 	bl	8011824 <xTaskCheckForTimeOut>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d124      	bne.n	80102f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80102aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80102ac:	f000 fd04 	bl	8010cb8 <prvIsQueueFull>
 80102b0:	4603      	mov	r3, r0
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d018      	beq.n	80102e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80102b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102b8:	3310      	adds	r3, #16
 80102ba:	687a      	ldr	r2, [r7, #4]
 80102bc:	4611      	mov	r1, r2
 80102be:	4618      	mov	r0, r3
 80102c0:	f001 fa10 	bl	80116e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80102c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80102c6:	f000 fc8f 	bl	8010be8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80102ca:	f001 f825 	bl	8011318 <xTaskResumeAll>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	f47f af7c 	bne.w	80101ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80102d6:	4b0c      	ldr	r3, [pc, #48]	@ (8010308 <xQueueGenericSend+0x200>)
 80102d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102dc:	601a      	str	r2, [r3, #0]
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	f3bf 8f6f 	isb	sy
 80102e6:	e772      	b.n	80101ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80102e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80102ea:	f000 fc7d 	bl	8010be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80102ee:	f001 f813 	bl	8011318 <xTaskResumeAll>
 80102f2:	e76c      	b.n	80101ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80102f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80102f6:	f000 fc77 	bl	8010be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80102fa:	f001 f80d 	bl	8011318 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80102fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010300:	4618      	mov	r0, r3
 8010302:	3738      	adds	r7, #56	@ 0x38
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	e000ed04 	.word	0xe000ed04

0801030c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b090      	sub	sp, #64	@ 0x40
 8010310:	af00      	add	r7, sp, #0
 8010312:	60f8      	str	r0, [r7, #12]
 8010314:	60b9      	str	r1, [r7, #8]
 8010316:	607a      	str	r2, [r7, #4]
 8010318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801031e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010320:	2b00      	cmp	r3, #0
 8010322:	d10b      	bne.n	801033c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8010324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010328:	f383 8811 	msr	BASEPRI, r3
 801032c:	f3bf 8f6f 	isb	sy
 8010330:	f3bf 8f4f 	dsb	sy
 8010334:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010336:	bf00      	nop
 8010338:	bf00      	nop
 801033a:	e7fd      	b.n	8010338 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d103      	bne.n	801034a <xQueueGenericSendFromISR+0x3e>
 8010342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010346:	2b00      	cmp	r3, #0
 8010348:	d101      	bne.n	801034e <xQueueGenericSendFromISR+0x42>
 801034a:	2301      	movs	r3, #1
 801034c:	e000      	b.n	8010350 <xQueueGenericSendFromISR+0x44>
 801034e:	2300      	movs	r3, #0
 8010350:	2b00      	cmp	r3, #0
 8010352:	d10b      	bne.n	801036c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8010354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010358:	f383 8811 	msr	BASEPRI, r3
 801035c:	f3bf 8f6f 	isb	sy
 8010360:	f3bf 8f4f 	dsb	sy
 8010364:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010366:	bf00      	nop
 8010368:	bf00      	nop
 801036a:	e7fd      	b.n	8010368 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	2b02      	cmp	r3, #2
 8010370:	d103      	bne.n	801037a <xQueueGenericSendFromISR+0x6e>
 8010372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010376:	2b01      	cmp	r3, #1
 8010378:	d101      	bne.n	801037e <xQueueGenericSendFromISR+0x72>
 801037a:	2301      	movs	r3, #1
 801037c:	e000      	b.n	8010380 <xQueueGenericSendFromISR+0x74>
 801037e:	2300      	movs	r3, #0
 8010380:	2b00      	cmp	r3, #0
 8010382:	d10b      	bne.n	801039c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8010384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010388:	f383 8811 	msr	BASEPRI, r3
 801038c:	f3bf 8f6f 	isb	sy
 8010390:	f3bf 8f4f 	dsb	sy
 8010394:	623b      	str	r3, [r7, #32]
}
 8010396:	bf00      	nop
 8010398:	bf00      	nop
 801039a:	e7fd      	b.n	8010398 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801039c:	f001 ffc4 	bl	8012328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80103a0:	f3ef 8211 	mrs	r2, BASEPRI
 80103a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103a8:	f383 8811 	msr	BASEPRI, r3
 80103ac:	f3bf 8f6f 	isb	sy
 80103b0:	f3bf 8f4f 	dsb	sy
 80103b4:	61fa      	str	r2, [r7, #28]
 80103b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80103b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80103ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80103bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d302      	bcc.n	80103ce <xQueueGenericSendFromISR+0xc2>
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	2b02      	cmp	r3, #2
 80103cc:	d12f      	bne.n	801042e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80103ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80103d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103de:	683a      	ldr	r2, [r7, #0]
 80103e0:	68b9      	ldr	r1, [r7, #8]
 80103e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80103e4:	f000 fb70 	bl	8010ac8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80103e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80103ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103f0:	d112      	bne.n	8010418 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d016      	beq.n	8010428 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103fc:	3324      	adds	r3, #36	@ 0x24
 80103fe:	4618      	mov	r0, r3
 8010400:	f001 f996 	bl	8011730 <xTaskRemoveFromEventList>
 8010404:	4603      	mov	r3, r0
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00e      	beq.n	8010428 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d00b      	beq.n	8010428 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2201      	movs	r2, #1
 8010414:	601a      	str	r2, [r3, #0]
 8010416:	e007      	b.n	8010428 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010418:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801041c:	3301      	adds	r3, #1
 801041e:	b2db      	uxtb	r3, r3
 8010420:	b25a      	sxtb	r2, r3
 8010422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010428:	2301      	movs	r3, #1
 801042a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 801042c:	e001      	b.n	8010432 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801042e:	2300      	movs	r3, #0
 8010430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010434:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801043c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801043e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010440:	4618      	mov	r0, r3
 8010442:	3740      	adds	r7, #64	@ 0x40
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b08e      	sub	sp, #56	@ 0x38
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010458:	2b00      	cmp	r3, #0
 801045a:	d10b      	bne.n	8010474 <xQueueGiveFromISR+0x2c>
	__asm volatile
 801045c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010460:	f383 8811 	msr	BASEPRI, r3
 8010464:	f3bf 8f6f 	isb	sy
 8010468:	f3bf 8f4f 	dsb	sy
 801046c:	623b      	str	r3, [r7, #32]
}
 801046e:	bf00      	nop
 8010470:	bf00      	nop
 8010472:	e7fd      	b.n	8010470 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010478:	2b00      	cmp	r3, #0
 801047a:	d00b      	beq.n	8010494 <xQueueGiveFromISR+0x4c>
	__asm volatile
 801047c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010480:	f383 8811 	msr	BASEPRI, r3
 8010484:	f3bf 8f6f 	isb	sy
 8010488:	f3bf 8f4f 	dsb	sy
 801048c:	61fb      	str	r3, [r7, #28]
}
 801048e:	bf00      	nop
 8010490:	bf00      	nop
 8010492:	e7fd      	b.n	8010490 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d103      	bne.n	80104a4 <xQueueGiveFromISR+0x5c>
 801049c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801049e:	689b      	ldr	r3, [r3, #8]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d101      	bne.n	80104a8 <xQueueGiveFromISR+0x60>
 80104a4:	2301      	movs	r3, #1
 80104a6:	e000      	b.n	80104aa <xQueueGiveFromISR+0x62>
 80104a8:	2300      	movs	r3, #0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d10b      	bne.n	80104c6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80104ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104b2:	f383 8811 	msr	BASEPRI, r3
 80104b6:	f3bf 8f6f 	isb	sy
 80104ba:	f3bf 8f4f 	dsb	sy
 80104be:	61bb      	str	r3, [r7, #24]
}
 80104c0:	bf00      	nop
 80104c2:	bf00      	nop
 80104c4:	e7fd      	b.n	80104c2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80104c6:	f001 ff2f 	bl	8012328 <vPortValidateInterruptPriority>
	__asm volatile
 80104ca:	f3ef 8211 	mrs	r2, BASEPRI
 80104ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104d2:	f383 8811 	msr	BASEPRI, r3
 80104d6:	f3bf 8f6f 	isb	sy
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	617a      	str	r2, [r7, #20]
 80104e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80104e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80104e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80104ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d22b      	bcs.n	801054e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80104f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80104fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010502:	1c5a      	adds	r2, r3, #1
 8010504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010506:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010508:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801050c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010510:	d112      	bne.n	8010538 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010516:	2b00      	cmp	r3, #0
 8010518:	d016      	beq.n	8010548 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801051a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801051c:	3324      	adds	r3, #36	@ 0x24
 801051e:	4618      	mov	r0, r3
 8010520:	f001 f906 	bl	8011730 <xTaskRemoveFromEventList>
 8010524:	4603      	mov	r3, r0
 8010526:	2b00      	cmp	r3, #0
 8010528:	d00e      	beq.n	8010548 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d00b      	beq.n	8010548 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	2201      	movs	r2, #1
 8010534:	601a      	str	r2, [r3, #0]
 8010536:	e007      	b.n	8010548 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801053c:	3301      	adds	r3, #1
 801053e:	b2db      	uxtb	r3, r3
 8010540:	b25a      	sxtb	r2, r3
 8010542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010548:	2301      	movs	r3, #1
 801054a:	637b      	str	r3, [r7, #52]	@ 0x34
 801054c:	e001      	b.n	8010552 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801054e:	2300      	movs	r3, #0
 8010550:	637b      	str	r3, [r7, #52]	@ 0x34
 8010552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010554:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f383 8811 	msr	BASEPRI, r3
}
 801055c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801055e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010560:	4618      	mov	r0, r3
 8010562:	3738      	adds	r7, #56	@ 0x38
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b08c      	sub	sp, #48	@ 0x30
 801056c:	af00      	add	r7, sp, #0
 801056e:	60f8      	str	r0, [r7, #12]
 8010570:	60b9      	str	r1, [r7, #8]
 8010572:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010574:	2300      	movs	r3, #0
 8010576:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801057c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801057e:	2b00      	cmp	r3, #0
 8010580:	d10b      	bne.n	801059a <xQueueReceive+0x32>
	__asm volatile
 8010582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010586:	f383 8811 	msr	BASEPRI, r3
 801058a:	f3bf 8f6f 	isb	sy
 801058e:	f3bf 8f4f 	dsb	sy
 8010592:	623b      	str	r3, [r7, #32]
}
 8010594:	bf00      	nop
 8010596:	bf00      	nop
 8010598:	e7fd      	b.n	8010596 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d103      	bne.n	80105a8 <xQueueReceive+0x40>
 80105a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d101      	bne.n	80105ac <xQueueReceive+0x44>
 80105a8:	2301      	movs	r3, #1
 80105aa:	e000      	b.n	80105ae <xQueueReceive+0x46>
 80105ac:	2300      	movs	r3, #0
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d10b      	bne.n	80105ca <xQueueReceive+0x62>
	__asm volatile
 80105b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105b6:	f383 8811 	msr	BASEPRI, r3
 80105ba:	f3bf 8f6f 	isb	sy
 80105be:	f3bf 8f4f 	dsb	sy
 80105c2:	61fb      	str	r3, [r7, #28]
}
 80105c4:	bf00      	nop
 80105c6:	bf00      	nop
 80105c8:	e7fd      	b.n	80105c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105ca:	f001 fa79 	bl	8011ac0 <xTaskGetSchedulerState>
 80105ce:	4603      	mov	r3, r0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d102      	bne.n	80105da <xQueueReceive+0x72>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d101      	bne.n	80105de <xQueueReceive+0x76>
 80105da:	2301      	movs	r3, #1
 80105dc:	e000      	b.n	80105e0 <xQueueReceive+0x78>
 80105de:	2300      	movs	r3, #0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d10b      	bne.n	80105fc <xQueueReceive+0x94>
	__asm volatile
 80105e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105e8:	f383 8811 	msr	BASEPRI, r3
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	f3bf 8f4f 	dsb	sy
 80105f4:	61bb      	str	r3, [r7, #24]
}
 80105f6:	bf00      	nop
 80105f8:	bf00      	nop
 80105fa:	e7fd      	b.n	80105f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80105fc:	f001 fdb4 	bl	8012168 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010604:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010608:	2b00      	cmp	r3, #0
 801060a:	d01f      	beq.n	801064c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801060c:	68b9      	ldr	r1, [r7, #8]
 801060e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010610:	f000 fac4 	bl	8010b9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010616:	1e5a      	subs	r2, r3, #1
 8010618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801061a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801061c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801061e:	691b      	ldr	r3, [r3, #16]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d00f      	beq.n	8010644 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010626:	3310      	adds	r3, #16
 8010628:	4618      	mov	r0, r3
 801062a:	f001 f881 	bl	8011730 <xTaskRemoveFromEventList>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d007      	beq.n	8010644 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010634:	4b3c      	ldr	r3, [pc, #240]	@ (8010728 <xQueueReceive+0x1c0>)
 8010636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801063a:	601a      	str	r2, [r3, #0]
 801063c:	f3bf 8f4f 	dsb	sy
 8010640:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010644:	f001 fdc2 	bl	80121cc <vPortExitCritical>
				return pdPASS;
 8010648:	2301      	movs	r3, #1
 801064a:	e069      	b.n	8010720 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d103      	bne.n	801065a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010652:	f001 fdbb 	bl	80121cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010656:	2300      	movs	r3, #0
 8010658:	e062      	b.n	8010720 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801065a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801065c:	2b00      	cmp	r3, #0
 801065e:	d106      	bne.n	801066e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010660:	f107 0310 	add.w	r3, r7, #16
 8010664:	4618      	mov	r0, r3
 8010666:	f001 f8c7 	bl	80117f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801066a:	2301      	movs	r3, #1
 801066c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801066e:	f001 fdad 	bl	80121cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010672:	f000 fe43 	bl	80112fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010676:	f001 fd77 	bl	8012168 <vPortEnterCritical>
 801067a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801067c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010680:	b25b      	sxtb	r3, r3
 8010682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010686:	d103      	bne.n	8010690 <xQueueReceive+0x128>
 8010688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801068a:	2200      	movs	r2, #0
 801068c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010692:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010696:	b25b      	sxtb	r3, r3
 8010698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801069c:	d103      	bne.n	80106a6 <xQueueReceive+0x13e>
 801069e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106a0:	2200      	movs	r2, #0
 80106a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80106a6:	f001 fd91 	bl	80121cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80106aa:	1d3a      	adds	r2, r7, #4
 80106ac:	f107 0310 	add.w	r3, r7, #16
 80106b0:	4611      	mov	r1, r2
 80106b2:	4618      	mov	r0, r3
 80106b4:	f001 f8b6 	bl	8011824 <xTaskCheckForTimeOut>
 80106b8:	4603      	mov	r3, r0
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d123      	bne.n	8010706 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80106c0:	f000 fae4 	bl	8010c8c <prvIsQueueEmpty>
 80106c4:	4603      	mov	r3, r0
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d017      	beq.n	80106fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80106ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106cc:	3324      	adds	r3, #36	@ 0x24
 80106ce:	687a      	ldr	r2, [r7, #4]
 80106d0:	4611      	mov	r1, r2
 80106d2:	4618      	mov	r0, r3
 80106d4:	f001 f806 	bl	80116e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80106d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80106da:	f000 fa85 	bl	8010be8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80106de:	f000 fe1b 	bl	8011318 <xTaskResumeAll>
 80106e2:	4603      	mov	r3, r0
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d189      	bne.n	80105fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80106e8:	4b0f      	ldr	r3, [pc, #60]	@ (8010728 <xQueueReceive+0x1c0>)
 80106ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106ee:	601a      	str	r2, [r3, #0]
 80106f0:	f3bf 8f4f 	dsb	sy
 80106f4:	f3bf 8f6f 	isb	sy
 80106f8:	e780      	b.n	80105fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80106fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80106fc:	f000 fa74 	bl	8010be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010700:	f000 fe0a 	bl	8011318 <xTaskResumeAll>
 8010704:	e77a      	b.n	80105fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010708:	f000 fa6e 	bl	8010be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801070c:	f000 fe04 	bl	8011318 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010712:	f000 fabb 	bl	8010c8c <prvIsQueueEmpty>
 8010716:	4603      	mov	r3, r0
 8010718:	2b00      	cmp	r3, #0
 801071a:	f43f af6f 	beq.w	80105fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801071e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010720:	4618      	mov	r0, r3
 8010722:	3730      	adds	r7, #48	@ 0x30
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}
 8010728:	e000ed04 	.word	0xe000ed04

0801072c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b08e      	sub	sp, #56	@ 0x38
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010736:	2300      	movs	r3, #0
 8010738:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801073e:	2300      	movs	r3, #0
 8010740:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010744:	2b00      	cmp	r3, #0
 8010746:	d10b      	bne.n	8010760 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801074c:	f383 8811 	msr	BASEPRI, r3
 8010750:	f3bf 8f6f 	isb	sy
 8010754:	f3bf 8f4f 	dsb	sy
 8010758:	623b      	str	r3, [r7, #32]
}
 801075a:	bf00      	nop
 801075c:	bf00      	nop
 801075e:	e7fd      	b.n	801075c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010764:	2b00      	cmp	r3, #0
 8010766:	d00b      	beq.n	8010780 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801076c:	f383 8811 	msr	BASEPRI, r3
 8010770:	f3bf 8f6f 	isb	sy
 8010774:	f3bf 8f4f 	dsb	sy
 8010778:	61fb      	str	r3, [r7, #28]
}
 801077a:	bf00      	nop
 801077c:	bf00      	nop
 801077e:	e7fd      	b.n	801077c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010780:	f001 f99e 	bl	8011ac0 <xTaskGetSchedulerState>
 8010784:	4603      	mov	r3, r0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d102      	bne.n	8010790 <xQueueSemaphoreTake+0x64>
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d101      	bne.n	8010794 <xQueueSemaphoreTake+0x68>
 8010790:	2301      	movs	r3, #1
 8010792:	e000      	b.n	8010796 <xQueueSemaphoreTake+0x6a>
 8010794:	2300      	movs	r3, #0
 8010796:	2b00      	cmp	r3, #0
 8010798:	d10b      	bne.n	80107b2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801079a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801079e:	f383 8811 	msr	BASEPRI, r3
 80107a2:	f3bf 8f6f 	isb	sy
 80107a6:	f3bf 8f4f 	dsb	sy
 80107aa:	61bb      	str	r3, [r7, #24]
}
 80107ac:	bf00      	nop
 80107ae:	bf00      	nop
 80107b0:	e7fd      	b.n	80107ae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80107b2:	f001 fcd9 	bl	8012168 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80107b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80107bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d024      	beq.n	801080c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80107c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c4:	1e5a      	subs	r2, r3, #1
 80107c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80107ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d104      	bne.n	80107dc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80107d2:	f001 fb21 	bl	8011e18 <pvTaskIncrementMutexHeldCount>
 80107d6:	4602      	mov	r2, r0
 80107d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107de:	691b      	ldr	r3, [r3, #16]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d00f      	beq.n	8010804 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e6:	3310      	adds	r3, #16
 80107e8:	4618      	mov	r0, r3
 80107ea:	f000 ffa1 	bl	8011730 <xTaskRemoveFromEventList>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d007      	beq.n	8010804 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80107f4:	4b54      	ldr	r3, [pc, #336]	@ (8010948 <xQueueSemaphoreTake+0x21c>)
 80107f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107fa:	601a      	str	r2, [r3, #0]
 80107fc:	f3bf 8f4f 	dsb	sy
 8010800:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010804:	f001 fce2 	bl	80121cc <vPortExitCritical>
				return pdPASS;
 8010808:	2301      	movs	r3, #1
 801080a:	e098      	b.n	801093e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d112      	bne.n	8010838 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010814:	2b00      	cmp	r3, #0
 8010816:	d00b      	beq.n	8010830 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8010818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801081c:	f383 8811 	msr	BASEPRI, r3
 8010820:	f3bf 8f6f 	isb	sy
 8010824:	f3bf 8f4f 	dsb	sy
 8010828:	617b      	str	r3, [r7, #20]
}
 801082a:	bf00      	nop
 801082c:	bf00      	nop
 801082e:	e7fd      	b.n	801082c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010830:	f001 fccc 	bl	80121cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010834:	2300      	movs	r3, #0
 8010836:	e082      	b.n	801093e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801083a:	2b00      	cmp	r3, #0
 801083c:	d106      	bne.n	801084c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801083e:	f107 030c 	add.w	r3, r7, #12
 8010842:	4618      	mov	r0, r3
 8010844:	f000 ffd8 	bl	80117f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010848:	2301      	movs	r3, #1
 801084a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801084c:	f001 fcbe 	bl	80121cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010850:	f000 fd54 	bl	80112fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010854:	f001 fc88 	bl	8012168 <vPortEnterCritical>
 8010858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801085a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801085e:	b25b      	sxtb	r3, r3
 8010860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010864:	d103      	bne.n	801086e <xQueueSemaphoreTake+0x142>
 8010866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010868:	2200      	movs	r2, #0
 801086a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801086e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010870:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010874:	b25b      	sxtb	r3, r3
 8010876:	f1b3 3fff 	cmp.w	r3, #4294967295
 801087a:	d103      	bne.n	8010884 <xQueueSemaphoreTake+0x158>
 801087c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801087e:	2200      	movs	r2, #0
 8010880:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010884:	f001 fca2 	bl	80121cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010888:	463a      	mov	r2, r7
 801088a:	f107 030c 	add.w	r3, r7, #12
 801088e:	4611      	mov	r1, r2
 8010890:	4618      	mov	r0, r3
 8010892:	f000 ffc7 	bl	8011824 <xTaskCheckForTimeOut>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d132      	bne.n	8010902 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801089c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801089e:	f000 f9f5 	bl	8010c8c <prvIsQueueEmpty>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d026      	beq.n	80108f6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80108a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d109      	bne.n	80108c4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80108b0:	f001 fc5a 	bl	8012168 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80108b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b6:	689b      	ldr	r3, [r3, #8]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f001 f91f 	bl	8011afc <xTaskPriorityInherit>
 80108be:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80108c0:	f001 fc84 	bl	80121cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80108c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c6:	3324      	adds	r3, #36	@ 0x24
 80108c8:	683a      	ldr	r2, [r7, #0]
 80108ca:	4611      	mov	r1, r2
 80108cc:	4618      	mov	r0, r3
 80108ce:	f000 ff09 	bl	80116e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80108d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108d4:	f000 f988 	bl	8010be8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80108d8:	f000 fd1e 	bl	8011318 <xTaskResumeAll>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b00      	cmp	r3, #0
 80108e0:	f47f af67 	bne.w	80107b2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80108e4:	4b18      	ldr	r3, [pc, #96]	@ (8010948 <xQueueSemaphoreTake+0x21c>)
 80108e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108ea:	601a      	str	r2, [r3, #0]
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	f3bf 8f6f 	isb	sy
 80108f4:	e75d      	b.n	80107b2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80108f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108f8:	f000 f976 	bl	8010be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108fc:	f000 fd0c 	bl	8011318 <xTaskResumeAll>
 8010900:	e757      	b.n	80107b2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010902:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010904:	f000 f970 	bl	8010be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010908:	f000 fd06 	bl	8011318 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801090c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801090e:	f000 f9bd 	bl	8010c8c <prvIsQueueEmpty>
 8010912:	4603      	mov	r3, r0
 8010914:	2b00      	cmp	r3, #0
 8010916:	f43f af4c 	beq.w	80107b2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801091a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801091c:	2b00      	cmp	r3, #0
 801091e:	d00d      	beq.n	801093c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010920:	f001 fc22 	bl	8012168 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010924:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010926:	f000 f8b7 	bl	8010a98 <prvGetDisinheritPriorityAfterTimeout>
 801092a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801092c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801092e:	689b      	ldr	r3, [r3, #8]
 8010930:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010932:	4618      	mov	r0, r3
 8010934:	f001 f9e0 	bl	8011cf8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010938:	f001 fc48 	bl	80121cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801093c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801093e:	4618      	mov	r0, r3
 8010940:	3738      	adds	r7, #56	@ 0x38
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	e000ed04 	.word	0xe000ed04

0801094c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b08e      	sub	sp, #56	@ 0x38
 8010950:	af00      	add	r7, sp, #0
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801095c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801095e:	2b00      	cmp	r3, #0
 8010960:	d10b      	bne.n	801097a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8010962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010966:	f383 8811 	msr	BASEPRI, r3
 801096a:	f3bf 8f6f 	isb	sy
 801096e:	f3bf 8f4f 	dsb	sy
 8010972:	623b      	str	r3, [r7, #32]
}
 8010974:	bf00      	nop
 8010976:	bf00      	nop
 8010978:	e7fd      	b.n	8010976 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d103      	bne.n	8010988 <xQueueReceiveFromISR+0x3c>
 8010980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010984:	2b00      	cmp	r3, #0
 8010986:	d101      	bne.n	801098c <xQueueReceiveFromISR+0x40>
 8010988:	2301      	movs	r3, #1
 801098a:	e000      	b.n	801098e <xQueueReceiveFromISR+0x42>
 801098c:	2300      	movs	r3, #0
 801098e:	2b00      	cmp	r3, #0
 8010990:	d10b      	bne.n	80109aa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8010992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010996:	f383 8811 	msr	BASEPRI, r3
 801099a:	f3bf 8f6f 	isb	sy
 801099e:	f3bf 8f4f 	dsb	sy
 80109a2:	61fb      	str	r3, [r7, #28]
}
 80109a4:	bf00      	nop
 80109a6:	bf00      	nop
 80109a8:	e7fd      	b.n	80109a6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109aa:	f001 fcbd 	bl	8012328 <vPortValidateInterruptPriority>
	__asm volatile
 80109ae:	f3ef 8211 	mrs	r2, BASEPRI
 80109b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109b6:	f383 8811 	msr	BASEPRI, r3
 80109ba:	f3bf 8f6f 	isb	sy
 80109be:	f3bf 8f4f 	dsb	sy
 80109c2:	61ba      	str	r2, [r7, #24]
 80109c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80109c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80109c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109ce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80109d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d02f      	beq.n	8010a36 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80109d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80109dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80109e0:	68b9      	ldr	r1, [r7, #8]
 80109e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80109e4:	f000 f8da 	bl	8010b9c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80109e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ea:	1e5a      	subs	r2, r3, #1
 80109ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80109f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80109f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109f8:	d112      	bne.n	8010a20 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109fc:	691b      	ldr	r3, [r3, #16]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d016      	beq.n	8010a30 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a04:	3310      	adds	r3, #16
 8010a06:	4618      	mov	r0, r3
 8010a08:	f000 fe92 	bl	8011730 <xTaskRemoveFromEventList>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d00e      	beq.n	8010a30 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d00b      	beq.n	8010a30 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	601a      	str	r2, [r3, #0]
 8010a1e:	e007      	b.n	8010a30 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010a20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a24:	3301      	adds	r3, #1
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	b25a      	sxtb	r2, r3
 8010a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8010a30:	2301      	movs	r3, #1
 8010a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a34:	e001      	b.n	8010a3a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8010a36:	2300      	movs	r3, #0
 8010a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	f383 8811 	msr	BASEPRI, r3
}
 8010a44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3738      	adds	r7, #56	@ 0x38
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}

08010a50 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d10b      	bne.n	8010a7a <vQueueDelete+0x2a>
	__asm volatile
 8010a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a66:	f383 8811 	msr	BASEPRI, r3
 8010a6a:	f3bf 8f6f 	isb	sy
 8010a6e:	f3bf 8f4f 	dsb	sy
 8010a72:	60bb      	str	r3, [r7, #8]
}
 8010a74:	bf00      	nop
 8010a76:	bf00      	nop
 8010a78:	e7fd      	b.n	8010a76 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010a7a:	68f8      	ldr	r0, [r7, #12]
 8010a7c:	f000 f934 	bl	8010ce8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d102      	bne.n	8010a90 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8010a8a:	68f8      	ldr	r0, [r7, #12]
 8010a8c:	f001 fd62 	bl	8012554 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010a90:	bf00      	nop
 8010a92:	3710      	adds	r7, #16
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010a98:	b480      	push	{r7}
 8010a9a:	b085      	sub	sp, #20
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d006      	beq.n	8010ab6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	f1c3 0307 	rsb	r3, r3, #7
 8010ab2:	60fb      	str	r3, [r7, #12]
 8010ab4:	e001      	b.n	8010aba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010aba:	68fb      	ldr	r3, [r7, #12]
	}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3714      	adds	r7, #20
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr

08010ac8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b086      	sub	sp, #24
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010adc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d10d      	bne.n	8010b02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d14d      	bne.n	8010b8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	689b      	ldr	r3, [r3, #8]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f001 f878 	bl	8011be8 <xTaskPriorityDisinherit>
 8010af8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2200      	movs	r2, #0
 8010afe:	609a      	str	r2, [r3, #8]
 8010b00:	e043      	b.n	8010b8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d119      	bne.n	8010b3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	6858      	ldr	r0, [r3, #4]
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b10:	461a      	mov	r2, r3
 8010b12:	68b9      	ldr	r1, [r7, #8]
 8010b14:	f002 fdb1 	bl	801367a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	685a      	ldr	r2, [r3, #4]
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b20:	441a      	add	r2, r3
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	685a      	ldr	r2, [r3, #4]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	689b      	ldr	r3, [r3, #8]
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d32b      	bcc.n	8010b8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681a      	ldr	r2, [r3, #0]
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	605a      	str	r2, [r3, #4]
 8010b3a:	e026      	b.n	8010b8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	68d8      	ldr	r0, [r3, #12]
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b44:	461a      	mov	r2, r3
 8010b46:	68b9      	ldr	r1, [r7, #8]
 8010b48:	f002 fd97 	bl	801367a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	68da      	ldr	r2, [r3, #12]
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b54:	425b      	negs	r3, r3
 8010b56:	441a      	add	r2, r3
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	68da      	ldr	r2, [r3, #12]
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d207      	bcs.n	8010b78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	689a      	ldr	r2, [r3, #8]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b70:	425b      	negs	r3, r3
 8010b72:	441a      	add	r2, r3
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2b02      	cmp	r3, #2
 8010b7c:	d105      	bne.n	8010b8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d002      	beq.n	8010b8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	3b01      	subs	r3, #1
 8010b88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	1c5a      	adds	r2, r3, #1
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010b92:	697b      	ldr	r3, [r7, #20]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3718      	adds	r7, #24
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d018      	beq.n	8010be0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	68da      	ldr	r2, [r3, #12]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bb6:	441a      	add	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	68da      	ldr	r2, [r3, #12]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	689b      	ldr	r3, [r3, #8]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d303      	bcc.n	8010bd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681a      	ldr	r2, [r3, #0]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	68d9      	ldr	r1, [r3, #12]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bd8:	461a      	mov	r2, r3
 8010bda:	6838      	ldr	r0, [r7, #0]
 8010bdc:	f002 fd4d 	bl	801367a <memcpy>
	}
}
 8010be0:	bf00      	nop
 8010be2:	3708      	adds	r7, #8
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010bf0:	f001 faba 	bl	8012168 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010bfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010bfc:	e011      	b.n	8010c22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d012      	beq.n	8010c2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	3324      	adds	r3, #36	@ 0x24
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f000 fd90 	bl	8011730 <xTaskRemoveFromEventList>
 8010c10:	4603      	mov	r3, r0
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d001      	beq.n	8010c1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010c16:	f000 fe69 	bl	80118ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010c1a:	7bfb      	ldrb	r3, [r7, #15]
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	dce9      	bgt.n	8010bfe <prvUnlockQueue+0x16>
 8010c2a:	e000      	b.n	8010c2e <prvUnlockQueue+0x46>
					break;
 8010c2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	22ff      	movs	r2, #255	@ 0xff
 8010c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010c36:	f001 fac9 	bl	80121cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010c3a:	f001 fa95 	bl	8012168 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010c44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c46:	e011      	b.n	8010c6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	691b      	ldr	r3, [r3, #16]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d012      	beq.n	8010c76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	3310      	adds	r3, #16
 8010c54:	4618      	mov	r0, r3
 8010c56:	f000 fd6b 	bl	8011730 <xTaskRemoveFromEventList>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d001      	beq.n	8010c64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010c60:	f000 fe44 	bl	80118ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010c64:	7bbb      	ldrb	r3, [r7, #14]
 8010c66:	3b01      	subs	r3, #1
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	dce9      	bgt.n	8010c48 <prvUnlockQueue+0x60>
 8010c74:	e000      	b.n	8010c78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010c76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	22ff      	movs	r2, #255	@ 0xff
 8010c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010c80:	f001 faa4 	bl	80121cc <vPortExitCritical>
}
 8010c84:	bf00      	nop
 8010c86:	3710      	adds	r7, #16
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c94:	f001 fa68 	bl	8012168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d102      	bne.n	8010ca6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	60fb      	str	r3, [r7, #12]
 8010ca4:	e001      	b.n	8010caa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010caa:	f001 fa8f 	bl	80121cc <vPortExitCritical>

	return xReturn;
 8010cae:	68fb      	ldr	r3, [r7, #12]
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3710      	adds	r7, #16
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010cc0:	f001 fa52 	bl	8012168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d102      	bne.n	8010cd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	60fb      	str	r3, [r7, #12]
 8010cd4:	e001      	b.n	8010cda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010cda:	f001 fa77 	bl	80121cc <vPortExitCritical>

	return xReturn;
 8010cde:	68fb      	ldr	r3, [r7, #12]
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3710      	adds	r7, #16
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010ce8:	b480      	push	{r7}
 8010cea:	b085      	sub	sp, #20
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	60fb      	str	r3, [r7, #12]
 8010cf4:	e016      	b.n	8010d24 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010cf6:	4a10      	ldr	r2, [pc, #64]	@ (8010d38 <vQueueUnregisterQueue+0x50>)
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	00db      	lsls	r3, r3, #3
 8010cfc:	4413      	add	r3, r2
 8010cfe:	685b      	ldr	r3, [r3, #4]
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d10b      	bne.n	8010d1e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010d06:	4a0c      	ldr	r2, [pc, #48]	@ (8010d38 <vQueueUnregisterQueue+0x50>)
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010d10:	4a09      	ldr	r2, [pc, #36]	@ (8010d38 <vQueueUnregisterQueue+0x50>)
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	00db      	lsls	r3, r3, #3
 8010d16:	4413      	add	r3, r2
 8010d18:	2200      	movs	r2, #0
 8010d1a:	605a      	str	r2, [r3, #4]
				break;
 8010d1c:	e006      	b.n	8010d2c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	3301      	adds	r3, #1
 8010d22:	60fb      	str	r3, [r7, #12]
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	2b07      	cmp	r3, #7
 8010d28:	d9e5      	bls.n	8010cf6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010d2a:	bf00      	nop
 8010d2c:	bf00      	nop
 8010d2e:	3714      	adds	r7, #20
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr
 8010d38:	20001158 	.word	0x20001158

08010d3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b08e      	sub	sp, #56	@ 0x38
 8010d40:	af04      	add	r7, sp, #16
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	607a      	str	r2, [r7, #4]
 8010d48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d10b      	bne.n	8010d68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8010d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d54:	f383 8811 	msr	BASEPRI, r3
 8010d58:	f3bf 8f6f 	isb	sy
 8010d5c:	f3bf 8f4f 	dsb	sy
 8010d60:	623b      	str	r3, [r7, #32]
}
 8010d62:	bf00      	nop
 8010d64:	bf00      	nop
 8010d66:	e7fd      	b.n	8010d64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d10b      	bne.n	8010d86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8010d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d72:	f383 8811 	msr	BASEPRI, r3
 8010d76:	f3bf 8f6f 	isb	sy
 8010d7a:	f3bf 8f4f 	dsb	sy
 8010d7e:	61fb      	str	r3, [r7, #28]
}
 8010d80:	bf00      	nop
 8010d82:	bf00      	nop
 8010d84:	e7fd      	b.n	8010d82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010d86:	23a0      	movs	r3, #160	@ 0xa0
 8010d88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	2ba0      	cmp	r3, #160	@ 0xa0
 8010d8e:	d00b      	beq.n	8010da8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8010d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d94:	f383 8811 	msr	BASEPRI, r3
 8010d98:	f3bf 8f6f 	isb	sy
 8010d9c:	f3bf 8f4f 	dsb	sy
 8010da0:	61bb      	str	r3, [r7, #24]
}
 8010da2:	bf00      	nop
 8010da4:	bf00      	nop
 8010da6:	e7fd      	b.n	8010da4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010da8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d01e      	beq.n	8010dee <xTaskCreateStatic+0xb2>
 8010db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d01b      	beq.n	8010dee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010dbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc2:	2202      	movs	r2, #2
 8010dc4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010dc8:	2300      	movs	r3, #0
 8010dca:	9303      	str	r3, [sp, #12]
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dce:	9302      	str	r3, [sp, #8]
 8010dd0:	f107 0314 	add.w	r3, r7, #20
 8010dd4:	9301      	str	r3, [sp, #4]
 8010dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	68b9      	ldr	r1, [r7, #8]
 8010de0:	68f8      	ldr	r0, [r7, #12]
 8010de2:	f000 f851 	bl	8010e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010de6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010de8:	f000 f8ee 	bl	8010fc8 <prvAddNewTaskToReadyList>
 8010dec:	e001      	b.n	8010df2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010dee:	2300      	movs	r3, #0
 8010df0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010df2:	697b      	ldr	r3, [r7, #20]
	}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3728      	adds	r7, #40	@ 0x28
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b08c      	sub	sp, #48	@ 0x30
 8010e00:	af04      	add	r7, sp, #16
 8010e02:	60f8      	str	r0, [r7, #12]
 8010e04:	60b9      	str	r1, [r7, #8]
 8010e06:	603b      	str	r3, [r7, #0]
 8010e08:	4613      	mov	r3, r2
 8010e0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010e0c:	88fb      	ldrh	r3, [r7, #6]
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	4618      	mov	r0, r3
 8010e12:	f001 facb 	bl	80123ac <pvPortMalloc>
 8010e16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d00e      	beq.n	8010e3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010e1e:	20a0      	movs	r0, #160	@ 0xa0
 8010e20:	f001 fac4 	bl	80123ac <pvPortMalloc>
 8010e24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d003      	beq.n	8010e34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	697a      	ldr	r2, [r7, #20]
 8010e30:	631a      	str	r2, [r3, #48]	@ 0x30
 8010e32:	e005      	b.n	8010e40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010e34:	6978      	ldr	r0, [r7, #20]
 8010e36:	f001 fb8d 	bl	8012554 <vPortFree>
 8010e3a:	e001      	b.n	8010e40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d017      	beq.n	8010e76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010e4e:	88fa      	ldrh	r2, [r7, #6]
 8010e50:	2300      	movs	r3, #0
 8010e52:	9303      	str	r3, [sp, #12]
 8010e54:	69fb      	ldr	r3, [r7, #28]
 8010e56:	9302      	str	r3, [sp, #8]
 8010e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e5a:	9301      	str	r3, [sp, #4]
 8010e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e5e:	9300      	str	r3, [sp, #0]
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	68b9      	ldr	r1, [r7, #8]
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	f000 f80f 	bl	8010e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e6a:	69f8      	ldr	r0, [r7, #28]
 8010e6c:	f000 f8ac 	bl	8010fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010e70:	2301      	movs	r3, #1
 8010e72:	61bb      	str	r3, [r7, #24]
 8010e74:	e002      	b.n	8010e7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010e76:	f04f 33ff 	mov.w	r3, #4294967295
 8010e7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010e7c:	69bb      	ldr	r3, [r7, #24]
	}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3720      	adds	r7, #32
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
	...

08010e88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b088      	sub	sp, #32
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	607a      	str	r2, [r7, #4]
 8010e94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010ea0:	3b01      	subs	r3, #1
 8010ea2:	009b      	lsls	r3, r3, #2
 8010ea4:	4413      	add	r3, r2
 8010ea6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	f023 0307 	bic.w	r3, r3, #7
 8010eae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	f003 0307 	and.w	r3, r3, #7
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00b      	beq.n	8010ed2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8010eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ebe:	f383 8811 	msr	BASEPRI, r3
 8010ec2:	f3bf 8f6f 	isb	sy
 8010ec6:	f3bf 8f4f 	dsb	sy
 8010eca:	617b      	str	r3, [r7, #20]
}
 8010ecc:	bf00      	nop
 8010ece:	bf00      	nop
 8010ed0:	e7fd      	b.n	8010ece <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d01f      	beq.n	8010f18 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ed8:	2300      	movs	r3, #0
 8010eda:	61fb      	str	r3, [r7, #28]
 8010edc:	e012      	b.n	8010f04 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010ede:	68ba      	ldr	r2, [r7, #8]
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	4413      	add	r3, r2
 8010ee4:	7819      	ldrb	r1, [r3, #0]
 8010ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	4413      	add	r3, r2
 8010eec:	3334      	adds	r3, #52	@ 0x34
 8010eee:	460a      	mov	r2, r1
 8010ef0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010ef2:	68ba      	ldr	r2, [r7, #8]
 8010ef4:	69fb      	ldr	r3, [r7, #28]
 8010ef6:	4413      	add	r3, r2
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d006      	beq.n	8010f0c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	3301      	adds	r3, #1
 8010f02:	61fb      	str	r3, [r7, #28]
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	2b0f      	cmp	r3, #15
 8010f08:	d9e9      	bls.n	8010ede <prvInitialiseNewTask+0x56>
 8010f0a:	e000      	b.n	8010f0e <prvInitialiseNewTask+0x86>
			{
				break;
 8010f0c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f10:	2200      	movs	r2, #0
 8010f12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010f16:	e003      	b.n	8010f20 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f22:	2b06      	cmp	r3, #6
 8010f24:	d901      	bls.n	8010f2a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010f26:	2306      	movs	r3, #6
 8010f28:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f34:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f38:	2200      	movs	r2, #0
 8010f3a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f3e:	3304      	adds	r3, #4
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fe febf 	bl	800fcc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f48:	3318      	adds	r3, #24
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7fe feba 	bl	800fcc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f58:	f1c3 0207 	rsb	r2, r3, #7
 8010f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f64:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f68:	2200      	movs	r2, #0
 8010f6a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f70:	2200      	movs	r2, #0
 8010f72:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f78:	334c      	adds	r3, #76	@ 0x4c
 8010f7a:	224c      	movs	r2, #76	@ 0x4c
 8010f7c:	2100      	movs	r1, #0
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f002 fa9e 	bl	80134c0 <memset>
 8010f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f86:	4a0d      	ldr	r2, [pc, #52]	@ (8010fbc <prvInitialiseNewTask+0x134>)
 8010f88:	651a      	str	r2, [r3, #80]	@ 0x50
 8010f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8010fc0 <prvInitialiseNewTask+0x138>)
 8010f8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8010f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f92:	4a0c      	ldr	r2, [pc, #48]	@ (8010fc4 <prvInitialiseNewTask+0x13c>)
 8010f94:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010f96:	683a      	ldr	r2, [r7, #0]
 8010f98:	68f9      	ldr	r1, [r7, #12]
 8010f9a:	69b8      	ldr	r0, [r7, #24]
 8010f9c:	f000 ffb6 	bl	8011f0c <pxPortInitialiseStack>
 8010fa0:	4602      	mov	r2, r0
 8010fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d002      	beq.n	8010fb2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010fb2:	bf00      	nop
 8010fb4:	3720      	adds	r7, #32
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	20004eec 	.word	0x20004eec
 8010fc0:	20004f54 	.word	0x20004f54
 8010fc4:	20004fbc 	.word	0x20004fbc

08010fc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010fd0:	f001 f8ca 	bl	8012168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8011080 <prvAddNewTaskToReadyList+0xb8>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	3301      	adds	r3, #1
 8010fda:	4a29      	ldr	r2, [pc, #164]	@ (8011080 <prvAddNewTaskToReadyList+0xb8>)
 8010fdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010fde:	4b29      	ldr	r3, [pc, #164]	@ (8011084 <prvAddNewTaskToReadyList+0xbc>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d109      	bne.n	8010ffa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010fe6:	4a27      	ldr	r2, [pc, #156]	@ (8011084 <prvAddNewTaskToReadyList+0xbc>)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010fec:	4b24      	ldr	r3, [pc, #144]	@ (8011080 <prvAddNewTaskToReadyList+0xb8>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d110      	bne.n	8011016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010ff4:	f000 fca0 	bl	8011938 <prvInitialiseTaskLists>
 8010ff8:	e00d      	b.n	8011016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010ffa:	4b23      	ldr	r3, [pc, #140]	@ (8011088 <prvAddNewTaskToReadyList+0xc0>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d109      	bne.n	8011016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011002:	4b20      	ldr	r3, [pc, #128]	@ (8011084 <prvAddNewTaskToReadyList+0xbc>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801100c:	429a      	cmp	r2, r3
 801100e:	d802      	bhi.n	8011016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011010:	4a1c      	ldr	r2, [pc, #112]	@ (8011084 <prvAddNewTaskToReadyList+0xbc>)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011016:	4b1d      	ldr	r3, [pc, #116]	@ (801108c <prvAddNewTaskToReadyList+0xc4>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	3301      	adds	r3, #1
 801101c:	4a1b      	ldr	r2, [pc, #108]	@ (801108c <prvAddNewTaskToReadyList+0xc4>)
 801101e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011024:	2201      	movs	r2, #1
 8011026:	409a      	lsls	r2, r3
 8011028:	4b19      	ldr	r3, [pc, #100]	@ (8011090 <prvAddNewTaskToReadyList+0xc8>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	4313      	orrs	r3, r2
 801102e:	4a18      	ldr	r2, [pc, #96]	@ (8011090 <prvAddNewTaskToReadyList+0xc8>)
 8011030:	6013      	str	r3, [r2, #0]
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011036:	4613      	mov	r3, r2
 8011038:	009b      	lsls	r3, r3, #2
 801103a:	4413      	add	r3, r2
 801103c:	009b      	lsls	r3, r3, #2
 801103e:	4a15      	ldr	r2, [pc, #84]	@ (8011094 <prvAddNewTaskToReadyList+0xcc>)
 8011040:	441a      	add	r2, r3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	3304      	adds	r3, #4
 8011046:	4619      	mov	r1, r3
 8011048:	4610      	mov	r0, r2
 801104a:	f7fe fe48 	bl	800fcde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801104e:	f001 f8bd 	bl	80121cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011052:	4b0d      	ldr	r3, [pc, #52]	@ (8011088 <prvAddNewTaskToReadyList+0xc0>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d00e      	beq.n	8011078 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801105a:	4b0a      	ldr	r3, [pc, #40]	@ (8011084 <prvAddNewTaskToReadyList+0xbc>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011064:	429a      	cmp	r2, r3
 8011066:	d207      	bcs.n	8011078 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011068:	4b0b      	ldr	r3, [pc, #44]	@ (8011098 <prvAddNewTaskToReadyList+0xd0>)
 801106a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801106e:	601a      	str	r2, [r3, #0]
 8011070:	f3bf 8f4f 	dsb	sy
 8011074:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011078:	bf00      	nop
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	20001298 	.word	0x20001298
 8011084:	20001198 	.word	0x20001198
 8011088:	200012a4 	.word	0x200012a4
 801108c:	200012b4 	.word	0x200012b4
 8011090:	200012a0 	.word	0x200012a0
 8011094:	2000119c 	.word	0x2000119c
 8011098:	e000ed04 	.word	0xe000ed04

0801109c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80110a4:	f001 f860 	bl	8012168 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d102      	bne.n	80110b4 <vTaskDelete+0x18>
 80110ae:	4b39      	ldr	r3, [pc, #228]	@ (8011194 <vTaskDelete+0xf8>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	e000      	b.n	80110b6 <vTaskDelete+0x1a>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	3304      	adds	r3, #4
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fe fe6b 	bl	800fd98 <uxListRemove>
 80110c2:	4603      	mov	r3, r0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d115      	bne.n	80110f4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110cc:	4932      	ldr	r1, [pc, #200]	@ (8011198 <vTaskDelete+0xfc>)
 80110ce:	4613      	mov	r3, r2
 80110d0:	009b      	lsls	r3, r3, #2
 80110d2:	4413      	add	r3, r2
 80110d4:	009b      	lsls	r3, r3, #2
 80110d6:	440b      	add	r3, r1
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d10a      	bne.n	80110f4 <vTaskDelete+0x58>
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110e2:	2201      	movs	r2, #1
 80110e4:	fa02 f303 	lsl.w	r3, r2, r3
 80110e8:	43da      	mvns	r2, r3
 80110ea:	4b2c      	ldr	r3, [pc, #176]	@ (801119c <vTaskDelete+0x100>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	4013      	ands	r3, r2
 80110f0:	4a2a      	ldr	r2, [pc, #168]	@ (801119c <vTaskDelete+0x100>)
 80110f2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d004      	beq.n	8011106 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	3318      	adds	r3, #24
 8011100:	4618      	mov	r0, r3
 8011102:	f7fe fe49 	bl	800fd98 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8011106:	4b26      	ldr	r3, [pc, #152]	@ (80111a0 <vTaskDelete+0x104>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	3301      	adds	r3, #1
 801110c:	4a24      	ldr	r2, [pc, #144]	@ (80111a0 <vTaskDelete+0x104>)
 801110e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8011110:	4b20      	ldr	r3, [pc, #128]	@ (8011194 <vTaskDelete+0xf8>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	68fa      	ldr	r2, [r7, #12]
 8011116:	429a      	cmp	r2, r3
 8011118:	d10b      	bne.n	8011132 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	3304      	adds	r3, #4
 801111e:	4619      	mov	r1, r3
 8011120:	4820      	ldr	r0, [pc, #128]	@ (80111a4 <vTaskDelete+0x108>)
 8011122:	f7fe fddc 	bl	800fcde <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8011126:	4b20      	ldr	r3, [pc, #128]	@ (80111a8 <vTaskDelete+0x10c>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	3301      	adds	r3, #1
 801112c:	4a1e      	ldr	r2, [pc, #120]	@ (80111a8 <vTaskDelete+0x10c>)
 801112e:	6013      	str	r3, [r2, #0]
 8011130:	e009      	b.n	8011146 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011132:	4b1e      	ldr	r3, [pc, #120]	@ (80111ac <vTaskDelete+0x110>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	3b01      	subs	r3, #1
 8011138:	4a1c      	ldr	r2, [pc, #112]	@ (80111ac <vTaskDelete+0x110>)
 801113a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801113c:	68f8      	ldr	r0, [r7, #12]
 801113e:	f000 fc69 	bl	8011a14 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011142:	f000 fc9d 	bl	8011a80 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8011146:	f001 f841 	bl	80121cc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801114a:	4b19      	ldr	r3, [pc, #100]	@ (80111b0 <vTaskDelete+0x114>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d01c      	beq.n	801118c <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8011152:	4b10      	ldr	r3, [pc, #64]	@ (8011194 <vTaskDelete+0xf8>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	68fa      	ldr	r2, [r7, #12]
 8011158:	429a      	cmp	r2, r3
 801115a:	d117      	bne.n	801118c <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801115c:	4b15      	ldr	r3, [pc, #84]	@ (80111b4 <vTaskDelete+0x118>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d00b      	beq.n	801117c <vTaskDelete+0xe0>
	__asm volatile
 8011164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011168:	f383 8811 	msr	BASEPRI, r3
 801116c:	f3bf 8f6f 	isb	sy
 8011170:	f3bf 8f4f 	dsb	sy
 8011174:	60bb      	str	r3, [r7, #8]
}
 8011176:	bf00      	nop
 8011178:	bf00      	nop
 801117a:	e7fd      	b.n	8011178 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 801117c:	4b0e      	ldr	r3, [pc, #56]	@ (80111b8 <vTaskDelete+0x11c>)
 801117e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011182:	601a      	str	r2, [r3, #0]
 8011184:	f3bf 8f4f 	dsb	sy
 8011188:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801118c:	bf00      	nop
 801118e:	3710      	adds	r7, #16
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	20001198 	.word	0x20001198
 8011198:	2000119c 	.word	0x2000119c
 801119c:	200012a0 	.word	0x200012a0
 80111a0:	200012b4 	.word	0x200012b4
 80111a4:	2000126c 	.word	0x2000126c
 80111a8:	20001280 	.word	0x20001280
 80111ac:	20001298 	.word	0x20001298
 80111b0:	200012a4 	.word	0x200012a4
 80111b4:	200012c0 	.word	0x200012c0
 80111b8:	e000ed04 	.word	0xe000ed04

080111bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b084      	sub	sp, #16
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80111c4:	2300      	movs	r3, #0
 80111c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d018      	beq.n	8011200 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80111ce:	4b14      	ldr	r3, [pc, #80]	@ (8011220 <vTaskDelay+0x64>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d00b      	beq.n	80111ee <vTaskDelay+0x32>
	__asm volatile
 80111d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111da:	f383 8811 	msr	BASEPRI, r3
 80111de:	f3bf 8f6f 	isb	sy
 80111e2:	f3bf 8f4f 	dsb	sy
 80111e6:	60bb      	str	r3, [r7, #8]
}
 80111e8:	bf00      	nop
 80111ea:	bf00      	nop
 80111ec:	e7fd      	b.n	80111ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80111ee:	f000 f885 	bl	80112fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80111f2:	2100      	movs	r1, #0
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f000 fe23 	bl	8011e40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80111fa:	f000 f88d 	bl	8011318 <xTaskResumeAll>
 80111fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d107      	bne.n	8011216 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8011206:	4b07      	ldr	r3, [pc, #28]	@ (8011224 <vTaskDelay+0x68>)
 8011208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801120c:	601a      	str	r2, [r3, #0]
 801120e:	f3bf 8f4f 	dsb	sy
 8011212:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011216:	bf00      	nop
 8011218:	3710      	adds	r7, #16
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	200012c0 	.word	0x200012c0
 8011224:	e000ed04 	.word	0xe000ed04

08011228 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b08a      	sub	sp, #40	@ 0x28
 801122c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801122e:	2300      	movs	r3, #0
 8011230:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011232:	2300      	movs	r3, #0
 8011234:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011236:	463a      	mov	r2, r7
 8011238:	1d39      	adds	r1, r7, #4
 801123a:	f107 0308 	add.w	r3, r7, #8
 801123e:	4618      	mov	r0, r3
 8011240:	f7f1 fee2 	bl	8003008 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011244:	6839      	ldr	r1, [r7, #0]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	68ba      	ldr	r2, [r7, #8]
 801124a:	9202      	str	r2, [sp, #8]
 801124c:	9301      	str	r3, [sp, #4]
 801124e:	2300      	movs	r3, #0
 8011250:	9300      	str	r3, [sp, #0]
 8011252:	2300      	movs	r3, #0
 8011254:	460a      	mov	r2, r1
 8011256:	4921      	ldr	r1, [pc, #132]	@ (80112dc <vTaskStartScheduler+0xb4>)
 8011258:	4821      	ldr	r0, [pc, #132]	@ (80112e0 <vTaskStartScheduler+0xb8>)
 801125a:	f7ff fd6f 	bl	8010d3c <xTaskCreateStatic>
 801125e:	4603      	mov	r3, r0
 8011260:	4a20      	ldr	r2, [pc, #128]	@ (80112e4 <vTaskStartScheduler+0xbc>)
 8011262:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011264:	4b1f      	ldr	r3, [pc, #124]	@ (80112e4 <vTaskStartScheduler+0xbc>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d002      	beq.n	8011272 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801126c:	2301      	movs	r3, #1
 801126e:	617b      	str	r3, [r7, #20]
 8011270:	e001      	b.n	8011276 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011272:	2300      	movs	r3, #0
 8011274:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	2b01      	cmp	r3, #1
 801127a:	d11b      	bne.n	80112b4 <vTaskStartScheduler+0x8c>
	__asm volatile
 801127c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011280:	f383 8811 	msr	BASEPRI, r3
 8011284:	f3bf 8f6f 	isb	sy
 8011288:	f3bf 8f4f 	dsb	sy
 801128c:	613b      	str	r3, [r7, #16]
}
 801128e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011290:	4b15      	ldr	r3, [pc, #84]	@ (80112e8 <vTaskStartScheduler+0xc0>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	334c      	adds	r3, #76	@ 0x4c
 8011296:	4a15      	ldr	r2, [pc, #84]	@ (80112ec <vTaskStartScheduler+0xc4>)
 8011298:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801129a:	4b15      	ldr	r3, [pc, #84]	@ (80112f0 <vTaskStartScheduler+0xc8>)
 801129c:	f04f 32ff 	mov.w	r2, #4294967295
 80112a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80112a2:	4b14      	ldr	r3, [pc, #80]	@ (80112f4 <vTaskStartScheduler+0xcc>)
 80112a4:	2201      	movs	r2, #1
 80112a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80112a8:	4b13      	ldr	r3, [pc, #76]	@ (80112f8 <vTaskStartScheduler+0xd0>)
 80112aa:	2200      	movs	r2, #0
 80112ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80112ae:	f000 feb7 	bl	8012020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80112b2:	e00f      	b.n	80112d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ba:	d10b      	bne.n	80112d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80112bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112c0:	f383 8811 	msr	BASEPRI, r3
 80112c4:	f3bf 8f6f 	isb	sy
 80112c8:	f3bf 8f4f 	dsb	sy
 80112cc:	60fb      	str	r3, [r7, #12]
}
 80112ce:	bf00      	nop
 80112d0:	bf00      	nop
 80112d2:	e7fd      	b.n	80112d0 <vTaskStartScheduler+0xa8>
}
 80112d4:	bf00      	nop
 80112d6:	3718      	adds	r7, #24
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}
 80112dc:	08016568 	.word	0x08016568
 80112e0:	08011905 	.word	0x08011905
 80112e4:	200012bc 	.word	0x200012bc
 80112e8:	20001198 	.word	0x20001198
 80112ec:	2000001c 	.word	0x2000001c
 80112f0:	200012b8 	.word	0x200012b8
 80112f4:	200012a4 	.word	0x200012a4
 80112f8:	2000129c 	.word	0x2000129c

080112fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80112fc:	b480      	push	{r7}
 80112fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011300:	4b04      	ldr	r3, [pc, #16]	@ (8011314 <vTaskSuspendAll+0x18>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	3301      	adds	r3, #1
 8011306:	4a03      	ldr	r2, [pc, #12]	@ (8011314 <vTaskSuspendAll+0x18>)
 8011308:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801130a:	bf00      	nop
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr
 8011314:	200012c0 	.word	0x200012c0

08011318 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801131e:	2300      	movs	r3, #0
 8011320:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011322:	2300      	movs	r3, #0
 8011324:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011326:	4b42      	ldr	r3, [pc, #264]	@ (8011430 <xTaskResumeAll+0x118>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d10b      	bne.n	8011346 <xTaskResumeAll+0x2e>
	__asm volatile
 801132e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011332:	f383 8811 	msr	BASEPRI, r3
 8011336:	f3bf 8f6f 	isb	sy
 801133a:	f3bf 8f4f 	dsb	sy
 801133e:	603b      	str	r3, [r7, #0]
}
 8011340:	bf00      	nop
 8011342:	bf00      	nop
 8011344:	e7fd      	b.n	8011342 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011346:	f000 ff0f 	bl	8012168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801134a:	4b39      	ldr	r3, [pc, #228]	@ (8011430 <xTaskResumeAll+0x118>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	3b01      	subs	r3, #1
 8011350:	4a37      	ldr	r2, [pc, #220]	@ (8011430 <xTaskResumeAll+0x118>)
 8011352:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011354:	4b36      	ldr	r3, [pc, #216]	@ (8011430 <xTaskResumeAll+0x118>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d161      	bne.n	8011420 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801135c:	4b35      	ldr	r3, [pc, #212]	@ (8011434 <xTaskResumeAll+0x11c>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d05d      	beq.n	8011420 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011364:	e02e      	b.n	80113c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011366:	4b34      	ldr	r3, [pc, #208]	@ (8011438 <xTaskResumeAll+0x120>)
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	3318      	adds	r3, #24
 8011372:	4618      	mov	r0, r3
 8011374:	f7fe fd10 	bl	800fd98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	3304      	adds	r3, #4
 801137c:	4618      	mov	r0, r3
 801137e:	f7fe fd0b 	bl	800fd98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011386:	2201      	movs	r2, #1
 8011388:	409a      	lsls	r2, r3
 801138a:	4b2c      	ldr	r3, [pc, #176]	@ (801143c <xTaskResumeAll+0x124>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	4313      	orrs	r3, r2
 8011390:	4a2a      	ldr	r2, [pc, #168]	@ (801143c <xTaskResumeAll+0x124>)
 8011392:	6013      	str	r3, [r2, #0]
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011398:	4613      	mov	r3, r2
 801139a:	009b      	lsls	r3, r3, #2
 801139c:	4413      	add	r3, r2
 801139e:	009b      	lsls	r3, r3, #2
 80113a0:	4a27      	ldr	r2, [pc, #156]	@ (8011440 <xTaskResumeAll+0x128>)
 80113a2:	441a      	add	r2, r3
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	3304      	adds	r3, #4
 80113a8:	4619      	mov	r1, r3
 80113aa:	4610      	mov	r0, r2
 80113ac:	f7fe fc97 	bl	800fcde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113b4:	4b23      	ldr	r3, [pc, #140]	@ (8011444 <xTaskResumeAll+0x12c>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113ba:	429a      	cmp	r2, r3
 80113bc:	d302      	bcc.n	80113c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80113be:	4b22      	ldr	r3, [pc, #136]	@ (8011448 <xTaskResumeAll+0x130>)
 80113c0:	2201      	movs	r2, #1
 80113c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80113c4:	4b1c      	ldr	r3, [pc, #112]	@ (8011438 <xTaskResumeAll+0x120>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d1cc      	bne.n	8011366 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d001      	beq.n	80113d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80113d2:	f000 fb55 	bl	8011a80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80113d6:	4b1d      	ldr	r3, [pc, #116]	@ (801144c <xTaskResumeAll+0x134>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d010      	beq.n	8011404 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80113e2:	f000 f859 	bl	8011498 <xTaskIncrementTick>
 80113e6:	4603      	mov	r3, r0
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d002      	beq.n	80113f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80113ec:	4b16      	ldr	r3, [pc, #88]	@ (8011448 <xTaskResumeAll+0x130>)
 80113ee:	2201      	movs	r2, #1
 80113f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	3b01      	subs	r3, #1
 80113f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d1f1      	bne.n	80113e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80113fe:	4b13      	ldr	r3, [pc, #76]	@ (801144c <xTaskResumeAll+0x134>)
 8011400:	2200      	movs	r2, #0
 8011402:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011404:	4b10      	ldr	r3, [pc, #64]	@ (8011448 <xTaskResumeAll+0x130>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d009      	beq.n	8011420 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801140c:	2301      	movs	r3, #1
 801140e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011410:	4b0f      	ldr	r3, [pc, #60]	@ (8011450 <xTaskResumeAll+0x138>)
 8011412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011416:	601a      	str	r2, [r3, #0]
 8011418:	f3bf 8f4f 	dsb	sy
 801141c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011420:	f000 fed4 	bl	80121cc <vPortExitCritical>

	return xAlreadyYielded;
 8011424:	68bb      	ldr	r3, [r7, #8]
}
 8011426:	4618      	mov	r0, r3
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	200012c0 	.word	0x200012c0
 8011434:	20001298 	.word	0x20001298
 8011438:	20001258 	.word	0x20001258
 801143c:	200012a0 	.word	0x200012a0
 8011440:	2000119c 	.word	0x2000119c
 8011444:	20001198 	.word	0x20001198
 8011448:	200012ac 	.word	0x200012ac
 801144c:	200012a8 	.word	0x200012a8
 8011450:	e000ed04 	.word	0xe000ed04

08011454 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011454:	b480      	push	{r7}
 8011456:	b083      	sub	sp, #12
 8011458:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801145a:	4b05      	ldr	r3, [pc, #20]	@ (8011470 <xTaskGetTickCount+0x1c>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011460:	687b      	ldr	r3, [r7, #4]
}
 8011462:	4618      	mov	r0, r3
 8011464:	370c      	adds	r7, #12
 8011466:	46bd      	mov	sp, r7
 8011468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146c:	4770      	bx	lr
 801146e:	bf00      	nop
 8011470:	2000129c 	.word	0x2000129c

08011474 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801147a:	f000 ff55 	bl	8012328 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801147e:	2300      	movs	r3, #0
 8011480:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011482:	4b04      	ldr	r3, [pc, #16]	@ (8011494 <xTaskGetTickCountFromISR+0x20>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011488:	683b      	ldr	r3, [r7, #0]
}
 801148a:	4618      	mov	r0, r3
 801148c:	3708      	adds	r7, #8
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	2000129c 	.word	0x2000129c

08011498 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b086      	sub	sp, #24
 801149c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801149e:	2300      	movs	r3, #0
 80114a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114a2:	4b53      	ldr	r3, [pc, #332]	@ (80115f0 <xTaskIncrementTick+0x158>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	f040 8095 	bne.w	80115d6 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80114ac:	4b51      	ldr	r3, [pc, #324]	@ (80115f4 <xTaskIncrementTick+0x15c>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	3301      	adds	r3, #1
 80114b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80114b4:	4a4f      	ldr	r2, [pc, #316]	@ (80115f4 <xTaskIncrementTick+0x15c>)
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d121      	bne.n	8011504 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80114c0:	4b4d      	ldr	r3, [pc, #308]	@ (80115f8 <xTaskIncrementTick+0x160>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d00b      	beq.n	80114e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80114ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114ce:	f383 8811 	msr	BASEPRI, r3
 80114d2:	f3bf 8f6f 	isb	sy
 80114d6:	f3bf 8f4f 	dsb	sy
 80114da:	603b      	str	r3, [r7, #0]
}
 80114dc:	bf00      	nop
 80114de:	bf00      	nop
 80114e0:	e7fd      	b.n	80114de <xTaskIncrementTick+0x46>
 80114e2:	4b45      	ldr	r3, [pc, #276]	@ (80115f8 <xTaskIncrementTick+0x160>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	60fb      	str	r3, [r7, #12]
 80114e8:	4b44      	ldr	r3, [pc, #272]	@ (80115fc <xTaskIncrementTick+0x164>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4a42      	ldr	r2, [pc, #264]	@ (80115f8 <xTaskIncrementTick+0x160>)
 80114ee:	6013      	str	r3, [r2, #0]
 80114f0:	4a42      	ldr	r2, [pc, #264]	@ (80115fc <xTaskIncrementTick+0x164>)
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	6013      	str	r3, [r2, #0]
 80114f6:	4b42      	ldr	r3, [pc, #264]	@ (8011600 <xTaskIncrementTick+0x168>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	3301      	adds	r3, #1
 80114fc:	4a40      	ldr	r2, [pc, #256]	@ (8011600 <xTaskIncrementTick+0x168>)
 80114fe:	6013      	str	r3, [r2, #0]
 8011500:	f000 fabe 	bl	8011a80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011504:	4b3f      	ldr	r3, [pc, #252]	@ (8011604 <xTaskIncrementTick+0x16c>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	693a      	ldr	r2, [r7, #16]
 801150a:	429a      	cmp	r2, r3
 801150c:	d348      	bcc.n	80115a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801150e:	4b3a      	ldr	r3, [pc, #232]	@ (80115f8 <xTaskIncrementTick+0x160>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d104      	bne.n	8011522 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011518:	4b3a      	ldr	r3, [pc, #232]	@ (8011604 <xTaskIncrementTick+0x16c>)
 801151a:	f04f 32ff 	mov.w	r2, #4294967295
 801151e:	601a      	str	r2, [r3, #0]
					break;
 8011520:	e03e      	b.n	80115a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011522:	4b35      	ldr	r3, [pc, #212]	@ (80115f8 <xTaskIncrementTick+0x160>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	68db      	ldr	r3, [r3, #12]
 8011528:	68db      	ldr	r3, [r3, #12]
 801152a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011532:	693a      	ldr	r2, [r7, #16]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	429a      	cmp	r2, r3
 8011538:	d203      	bcs.n	8011542 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801153a:	4a32      	ldr	r2, [pc, #200]	@ (8011604 <xTaskIncrementTick+0x16c>)
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011540:	e02e      	b.n	80115a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	3304      	adds	r3, #4
 8011546:	4618      	mov	r0, r3
 8011548:	f7fe fc26 	bl	800fd98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011550:	2b00      	cmp	r3, #0
 8011552:	d004      	beq.n	801155e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	3318      	adds	r3, #24
 8011558:	4618      	mov	r0, r3
 801155a:	f7fe fc1d 	bl	800fd98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011562:	2201      	movs	r2, #1
 8011564:	409a      	lsls	r2, r3
 8011566:	4b28      	ldr	r3, [pc, #160]	@ (8011608 <xTaskIncrementTick+0x170>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	4313      	orrs	r3, r2
 801156c:	4a26      	ldr	r2, [pc, #152]	@ (8011608 <xTaskIncrementTick+0x170>)
 801156e:	6013      	str	r3, [r2, #0]
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011574:	4613      	mov	r3, r2
 8011576:	009b      	lsls	r3, r3, #2
 8011578:	4413      	add	r3, r2
 801157a:	009b      	lsls	r3, r3, #2
 801157c:	4a23      	ldr	r2, [pc, #140]	@ (801160c <xTaskIncrementTick+0x174>)
 801157e:	441a      	add	r2, r3
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	3304      	adds	r3, #4
 8011584:	4619      	mov	r1, r3
 8011586:	4610      	mov	r0, r2
 8011588:	f7fe fba9 	bl	800fcde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011590:	4b1f      	ldr	r3, [pc, #124]	@ (8011610 <xTaskIncrementTick+0x178>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011596:	429a      	cmp	r2, r3
 8011598:	d3b9      	bcc.n	801150e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801159a:	2301      	movs	r3, #1
 801159c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801159e:	e7b6      	b.n	801150e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80115a0:	4b1b      	ldr	r3, [pc, #108]	@ (8011610 <xTaskIncrementTick+0x178>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115a6:	4919      	ldr	r1, [pc, #100]	@ (801160c <xTaskIncrementTick+0x174>)
 80115a8:	4613      	mov	r3, r2
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	4413      	add	r3, r2
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	440b      	add	r3, r1
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	2b01      	cmp	r3, #1
 80115b6:	d901      	bls.n	80115bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80115b8:	2301      	movs	r3, #1
 80115ba:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80115bc:	4b15      	ldr	r3, [pc, #84]	@ (8011614 <xTaskIncrementTick+0x17c>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d101      	bne.n	80115c8 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80115c4:	f7f1 fd11 	bl	8002fea <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80115c8:	4b13      	ldr	r3, [pc, #76]	@ (8011618 <xTaskIncrementTick+0x180>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d009      	beq.n	80115e4 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80115d0:	2301      	movs	r3, #1
 80115d2:	617b      	str	r3, [r7, #20]
 80115d4:	e006      	b.n	80115e4 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80115d6:	4b0f      	ldr	r3, [pc, #60]	@ (8011614 <xTaskIncrementTick+0x17c>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	3301      	adds	r3, #1
 80115dc:	4a0d      	ldr	r2, [pc, #52]	@ (8011614 <xTaskIncrementTick+0x17c>)
 80115de:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80115e0:	f7f1 fd03 	bl	8002fea <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80115e4:	697b      	ldr	r3, [r7, #20]
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3718      	adds	r7, #24
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	200012c0 	.word	0x200012c0
 80115f4:	2000129c 	.word	0x2000129c
 80115f8:	20001250 	.word	0x20001250
 80115fc:	20001254 	.word	0x20001254
 8011600:	200012b0 	.word	0x200012b0
 8011604:	200012b8 	.word	0x200012b8
 8011608:	200012a0 	.word	0x200012a0
 801160c:	2000119c 	.word	0x2000119c
 8011610:	20001198 	.word	0x20001198
 8011614:	200012a8 	.word	0x200012a8
 8011618:	200012ac 	.word	0x200012ac

0801161c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801161c:	b480      	push	{r7}
 801161e:	b087      	sub	sp, #28
 8011620:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011622:	4b2a      	ldr	r3, [pc, #168]	@ (80116cc <vTaskSwitchContext+0xb0>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d003      	beq.n	8011632 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801162a:	4b29      	ldr	r3, [pc, #164]	@ (80116d0 <vTaskSwitchContext+0xb4>)
 801162c:	2201      	movs	r2, #1
 801162e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011630:	e045      	b.n	80116be <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8011632:	4b27      	ldr	r3, [pc, #156]	@ (80116d0 <vTaskSwitchContext+0xb4>)
 8011634:	2200      	movs	r2, #0
 8011636:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011638:	4b26      	ldr	r3, [pc, #152]	@ (80116d4 <vTaskSwitchContext+0xb8>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	fab3 f383 	clz	r3, r3
 8011644:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011646:	7afb      	ldrb	r3, [r7, #11]
 8011648:	f1c3 031f 	rsb	r3, r3, #31
 801164c:	617b      	str	r3, [r7, #20]
 801164e:	4922      	ldr	r1, [pc, #136]	@ (80116d8 <vTaskSwitchContext+0xbc>)
 8011650:	697a      	ldr	r2, [r7, #20]
 8011652:	4613      	mov	r3, r2
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	4413      	add	r3, r2
 8011658:	009b      	lsls	r3, r3, #2
 801165a:	440b      	add	r3, r1
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d10b      	bne.n	801167a <vTaskSwitchContext+0x5e>
	__asm volatile
 8011662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011666:	f383 8811 	msr	BASEPRI, r3
 801166a:	f3bf 8f6f 	isb	sy
 801166e:	f3bf 8f4f 	dsb	sy
 8011672:	607b      	str	r3, [r7, #4]
}
 8011674:	bf00      	nop
 8011676:	bf00      	nop
 8011678:	e7fd      	b.n	8011676 <vTaskSwitchContext+0x5a>
 801167a:	697a      	ldr	r2, [r7, #20]
 801167c:	4613      	mov	r3, r2
 801167e:	009b      	lsls	r3, r3, #2
 8011680:	4413      	add	r3, r2
 8011682:	009b      	lsls	r3, r3, #2
 8011684:	4a14      	ldr	r2, [pc, #80]	@ (80116d8 <vTaskSwitchContext+0xbc>)
 8011686:	4413      	add	r3, r2
 8011688:	613b      	str	r3, [r7, #16]
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	685a      	ldr	r2, [r3, #4]
 8011690:	693b      	ldr	r3, [r7, #16]
 8011692:	605a      	str	r2, [r3, #4]
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	685a      	ldr	r2, [r3, #4]
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	3308      	adds	r3, #8
 801169c:	429a      	cmp	r2, r3
 801169e:	d104      	bne.n	80116aa <vTaskSwitchContext+0x8e>
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	685a      	ldr	r2, [r3, #4]
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	605a      	str	r2, [r3, #4]
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	4a0a      	ldr	r2, [pc, #40]	@ (80116dc <vTaskSwitchContext+0xc0>)
 80116b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80116b4:	4b09      	ldr	r3, [pc, #36]	@ (80116dc <vTaskSwitchContext+0xc0>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	334c      	adds	r3, #76	@ 0x4c
 80116ba:	4a09      	ldr	r2, [pc, #36]	@ (80116e0 <vTaskSwitchContext+0xc4>)
 80116bc:	6013      	str	r3, [r2, #0]
}
 80116be:	bf00      	nop
 80116c0:	371c      	adds	r7, #28
 80116c2:	46bd      	mov	sp, r7
 80116c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c8:	4770      	bx	lr
 80116ca:	bf00      	nop
 80116cc:	200012c0 	.word	0x200012c0
 80116d0:	200012ac 	.word	0x200012ac
 80116d4:	200012a0 	.word	0x200012a0
 80116d8:	2000119c 	.word	0x2000119c
 80116dc:	20001198 	.word	0x20001198
 80116e0:	2000001c 	.word	0x2000001c

080116e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d10b      	bne.n	801170c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80116f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116f8:	f383 8811 	msr	BASEPRI, r3
 80116fc:	f3bf 8f6f 	isb	sy
 8011700:	f3bf 8f4f 	dsb	sy
 8011704:	60fb      	str	r3, [r7, #12]
}
 8011706:	bf00      	nop
 8011708:	bf00      	nop
 801170a:	e7fd      	b.n	8011708 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801170c:	4b07      	ldr	r3, [pc, #28]	@ (801172c <vTaskPlaceOnEventList+0x48>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	3318      	adds	r3, #24
 8011712:	4619      	mov	r1, r3
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f7fe fb06 	bl	800fd26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801171a:	2101      	movs	r1, #1
 801171c:	6838      	ldr	r0, [r7, #0]
 801171e:	f000 fb8f 	bl	8011e40 <prvAddCurrentTaskToDelayedList>
}
 8011722:	bf00      	nop
 8011724:	3710      	adds	r7, #16
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
 801172a:	bf00      	nop
 801172c:	20001198 	.word	0x20001198

08011730 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b086      	sub	sp, #24
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	68db      	ldr	r3, [r3, #12]
 801173e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d10b      	bne.n	801175e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801174a:	f383 8811 	msr	BASEPRI, r3
 801174e:	f3bf 8f6f 	isb	sy
 8011752:	f3bf 8f4f 	dsb	sy
 8011756:	60fb      	str	r3, [r7, #12]
}
 8011758:	bf00      	nop
 801175a:	bf00      	nop
 801175c:	e7fd      	b.n	801175a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801175e:	693b      	ldr	r3, [r7, #16]
 8011760:	3318      	adds	r3, #24
 8011762:	4618      	mov	r0, r3
 8011764:	f7fe fb18 	bl	800fd98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011768:	4b1d      	ldr	r3, [pc, #116]	@ (80117e0 <xTaskRemoveFromEventList+0xb0>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d11c      	bne.n	80117aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	3304      	adds	r3, #4
 8011774:	4618      	mov	r0, r3
 8011776:	f7fe fb0f 	bl	800fd98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801177e:	2201      	movs	r2, #1
 8011780:	409a      	lsls	r2, r3
 8011782:	4b18      	ldr	r3, [pc, #96]	@ (80117e4 <xTaskRemoveFromEventList+0xb4>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	4313      	orrs	r3, r2
 8011788:	4a16      	ldr	r2, [pc, #88]	@ (80117e4 <xTaskRemoveFromEventList+0xb4>)
 801178a:	6013      	str	r3, [r2, #0]
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011790:	4613      	mov	r3, r2
 8011792:	009b      	lsls	r3, r3, #2
 8011794:	4413      	add	r3, r2
 8011796:	009b      	lsls	r3, r3, #2
 8011798:	4a13      	ldr	r2, [pc, #76]	@ (80117e8 <xTaskRemoveFromEventList+0xb8>)
 801179a:	441a      	add	r2, r3
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	3304      	adds	r3, #4
 80117a0:	4619      	mov	r1, r3
 80117a2:	4610      	mov	r0, r2
 80117a4:	f7fe fa9b 	bl	800fcde <vListInsertEnd>
 80117a8:	e005      	b.n	80117b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	3318      	adds	r3, #24
 80117ae:	4619      	mov	r1, r3
 80117b0:	480e      	ldr	r0, [pc, #56]	@ (80117ec <xTaskRemoveFromEventList+0xbc>)
 80117b2:	f7fe fa94 	bl	800fcde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117ba:	4b0d      	ldr	r3, [pc, #52]	@ (80117f0 <xTaskRemoveFromEventList+0xc0>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d905      	bls.n	80117d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80117c4:	2301      	movs	r3, #1
 80117c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80117c8:	4b0a      	ldr	r3, [pc, #40]	@ (80117f4 <xTaskRemoveFromEventList+0xc4>)
 80117ca:	2201      	movs	r2, #1
 80117cc:	601a      	str	r2, [r3, #0]
 80117ce:	e001      	b.n	80117d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80117d0:	2300      	movs	r3, #0
 80117d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80117d4:	697b      	ldr	r3, [r7, #20]
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3718      	adds	r7, #24
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	200012c0 	.word	0x200012c0
 80117e4:	200012a0 	.word	0x200012a0
 80117e8:	2000119c 	.word	0x2000119c
 80117ec:	20001258 	.word	0x20001258
 80117f0:	20001198 	.word	0x20001198
 80117f4:	200012ac 	.word	0x200012ac

080117f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80117f8:	b480      	push	{r7}
 80117fa:	b083      	sub	sp, #12
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011800:	4b06      	ldr	r3, [pc, #24]	@ (801181c <vTaskInternalSetTimeOutState+0x24>)
 8011802:	681a      	ldr	r2, [r3, #0]
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011808:	4b05      	ldr	r3, [pc, #20]	@ (8011820 <vTaskInternalSetTimeOutState+0x28>)
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	605a      	str	r2, [r3, #4]
}
 8011810:	bf00      	nop
 8011812:	370c      	adds	r7, #12
 8011814:	46bd      	mov	sp, r7
 8011816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181a:	4770      	bx	lr
 801181c:	200012b0 	.word	0x200012b0
 8011820:	2000129c 	.word	0x2000129c

08011824 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b088      	sub	sp, #32
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d10b      	bne.n	801184c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011838:	f383 8811 	msr	BASEPRI, r3
 801183c:	f3bf 8f6f 	isb	sy
 8011840:	f3bf 8f4f 	dsb	sy
 8011844:	613b      	str	r3, [r7, #16]
}
 8011846:	bf00      	nop
 8011848:	bf00      	nop
 801184a:	e7fd      	b.n	8011848 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d10b      	bne.n	801186a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011856:	f383 8811 	msr	BASEPRI, r3
 801185a:	f3bf 8f6f 	isb	sy
 801185e:	f3bf 8f4f 	dsb	sy
 8011862:	60fb      	str	r3, [r7, #12]
}
 8011864:	bf00      	nop
 8011866:	bf00      	nop
 8011868:	e7fd      	b.n	8011866 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801186a:	f000 fc7d 	bl	8012168 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801186e:	4b1d      	ldr	r3, [pc, #116]	@ (80118e4 <xTaskCheckForTimeOut+0xc0>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	69ba      	ldr	r2, [r7, #24]
 801187a:	1ad3      	subs	r3, r2, r3
 801187c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011886:	d102      	bne.n	801188e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011888:	2300      	movs	r3, #0
 801188a:	61fb      	str	r3, [r7, #28]
 801188c:	e023      	b.n	80118d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	4b15      	ldr	r3, [pc, #84]	@ (80118e8 <xTaskCheckForTimeOut+0xc4>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	429a      	cmp	r2, r3
 8011898:	d007      	beq.n	80118aa <xTaskCheckForTimeOut+0x86>
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	69ba      	ldr	r2, [r7, #24]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d302      	bcc.n	80118aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80118a4:	2301      	movs	r3, #1
 80118a6:	61fb      	str	r3, [r7, #28]
 80118a8:	e015      	b.n	80118d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	697a      	ldr	r2, [r7, #20]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d20b      	bcs.n	80118cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	1ad2      	subs	r2, r2, r3
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f7ff ff99 	bl	80117f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80118c6:	2300      	movs	r3, #0
 80118c8:	61fb      	str	r3, [r7, #28]
 80118ca:	e004      	b.n	80118d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	2200      	movs	r2, #0
 80118d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80118d2:	2301      	movs	r3, #1
 80118d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80118d6:	f000 fc79 	bl	80121cc <vPortExitCritical>

	return xReturn;
 80118da:	69fb      	ldr	r3, [r7, #28]
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3720      	adds	r7, #32
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	2000129c 	.word	0x2000129c
 80118e8:	200012b0 	.word	0x200012b0

080118ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80118ec:	b480      	push	{r7}
 80118ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80118f0:	4b03      	ldr	r3, [pc, #12]	@ (8011900 <vTaskMissedYield+0x14>)
 80118f2:	2201      	movs	r2, #1
 80118f4:	601a      	str	r2, [r3, #0]
}
 80118f6:	bf00      	nop
 80118f8:	46bd      	mov	sp, r7
 80118fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fe:	4770      	bx	lr
 8011900:	200012ac 	.word	0x200012ac

08011904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b082      	sub	sp, #8
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801190c:	f000 f854 	bl	80119b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011910:	4b07      	ldr	r3, [pc, #28]	@ (8011930 <prvIdleTask+0x2c>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	2b01      	cmp	r3, #1
 8011916:	d907      	bls.n	8011928 <prvIdleTask+0x24>
			{
				taskYIELD();
 8011918:	4b06      	ldr	r3, [pc, #24]	@ (8011934 <prvIdleTask+0x30>)
 801191a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801191e:	601a      	str	r2, [r3, #0]
 8011920:	f3bf 8f4f 	dsb	sy
 8011924:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8011928:	f7f1 fb58 	bl	8002fdc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801192c:	e7ee      	b.n	801190c <prvIdleTask+0x8>
 801192e:	bf00      	nop
 8011930:	2000119c 	.word	0x2000119c
 8011934:	e000ed04 	.word	0xe000ed04

08011938 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801193e:	2300      	movs	r3, #0
 8011940:	607b      	str	r3, [r7, #4]
 8011942:	e00c      	b.n	801195e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011944:	687a      	ldr	r2, [r7, #4]
 8011946:	4613      	mov	r3, r2
 8011948:	009b      	lsls	r3, r3, #2
 801194a:	4413      	add	r3, r2
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	4a12      	ldr	r2, [pc, #72]	@ (8011998 <prvInitialiseTaskLists+0x60>)
 8011950:	4413      	add	r3, r2
 8011952:	4618      	mov	r0, r3
 8011954:	f7fe f996 	bl	800fc84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	3301      	adds	r3, #1
 801195c:	607b      	str	r3, [r7, #4]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2b06      	cmp	r3, #6
 8011962:	d9ef      	bls.n	8011944 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011964:	480d      	ldr	r0, [pc, #52]	@ (801199c <prvInitialiseTaskLists+0x64>)
 8011966:	f7fe f98d 	bl	800fc84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801196a:	480d      	ldr	r0, [pc, #52]	@ (80119a0 <prvInitialiseTaskLists+0x68>)
 801196c:	f7fe f98a 	bl	800fc84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011970:	480c      	ldr	r0, [pc, #48]	@ (80119a4 <prvInitialiseTaskLists+0x6c>)
 8011972:	f7fe f987 	bl	800fc84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011976:	480c      	ldr	r0, [pc, #48]	@ (80119a8 <prvInitialiseTaskLists+0x70>)
 8011978:	f7fe f984 	bl	800fc84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801197c:	480b      	ldr	r0, [pc, #44]	@ (80119ac <prvInitialiseTaskLists+0x74>)
 801197e:	f7fe f981 	bl	800fc84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011982:	4b0b      	ldr	r3, [pc, #44]	@ (80119b0 <prvInitialiseTaskLists+0x78>)
 8011984:	4a05      	ldr	r2, [pc, #20]	@ (801199c <prvInitialiseTaskLists+0x64>)
 8011986:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011988:	4b0a      	ldr	r3, [pc, #40]	@ (80119b4 <prvInitialiseTaskLists+0x7c>)
 801198a:	4a05      	ldr	r2, [pc, #20]	@ (80119a0 <prvInitialiseTaskLists+0x68>)
 801198c:	601a      	str	r2, [r3, #0]
}
 801198e:	bf00      	nop
 8011990:	3708      	adds	r7, #8
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	2000119c 	.word	0x2000119c
 801199c:	20001228 	.word	0x20001228
 80119a0:	2000123c 	.word	0x2000123c
 80119a4:	20001258 	.word	0x20001258
 80119a8:	2000126c 	.word	0x2000126c
 80119ac:	20001284 	.word	0x20001284
 80119b0:	20001250 	.word	0x20001250
 80119b4:	20001254 	.word	0x20001254

080119b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80119be:	e019      	b.n	80119f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80119c0:	f000 fbd2 	bl	8012168 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119c4:	4b10      	ldr	r3, [pc, #64]	@ (8011a08 <prvCheckTasksWaitingTermination+0x50>)
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	68db      	ldr	r3, [r3, #12]
 80119ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	3304      	adds	r3, #4
 80119d0:	4618      	mov	r0, r3
 80119d2:	f7fe f9e1 	bl	800fd98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80119d6:	4b0d      	ldr	r3, [pc, #52]	@ (8011a0c <prvCheckTasksWaitingTermination+0x54>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	3b01      	subs	r3, #1
 80119dc:	4a0b      	ldr	r2, [pc, #44]	@ (8011a0c <prvCheckTasksWaitingTermination+0x54>)
 80119de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80119e0:	4b0b      	ldr	r3, [pc, #44]	@ (8011a10 <prvCheckTasksWaitingTermination+0x58>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	3b01      	subs	r3, #1
 80119e6:	4a0a      	ldr	r2, [pc, #40]	@ (8011a10 <prvCheckTasksWaitingTermination+0x58>)
 80119e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80119ea:	f000 fbef 	bl	80121cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 f810 	bl	8011a14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80119f4:	4b06      	ldr	r3, [pc, #24]	@ (8011a10 <prvCheckTasksWaitingTermination+0x58>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d1e1      	bne.n	80119c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80119fc:	bf00      	nop
 80119fe:	bf00      	nop
 8011a00:	3708      	adds	r7, #8
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	2000126c 	.word	0x2000126c
 8011a0c:	20001298 	.word	0x20001298
 8011a10:	20001280 	.word	0x20001280

08011a14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b084      	sub	sp, #16
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	334c      	adds	r3, #76	@ 0x4c
 8011a20:	4618      	mov	r0, r3
 8011a22:	f001 fd69 	bl	80134f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d108      	bne.n	8011a42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a34:	4618      	mov	r0, r3
 8011a36:	f000 fd8d 	bl	8012554 <vPortFree>
				vPortFree( pxTCB );
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f000 fd8a 	bl	8012554 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011a40:	e019      	b.n	8011a76 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011a48:	2b01      	cmp	r3, #1
 8011a4a:	d103      	bne.n	8011a54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f000 fd81 	bl	8012554 <vPortFree>
	}
 8011a52:	e010      	b.n	8011a76 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011a5a:	2b02      	cmp	r3, #2
 8011a5c:	d00b      	beq.n	8011a76 <prvDeleteTCB+0x62>
	__asm volatile
 8011a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a62:	f383 8811 	msr	BASEPRI, r3
 8011a66:	f3bf 8f6f 	isb	sy
 8011a6a:	f3bf 8f4f 	dsb	sy
 8011a6e:	60fb      	str	r3, [r7, #12]
}
 8011a70:	bf00      	nop
 8011a72:	bf00      	nop
 8011a74:	e7fd      	b.n	8011a72 <prvDeleteTCB+0x5e>
	}
 8011a76:	bf00      	nop
 8011a78:	3710      	adds	r7, #16
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}
	...

08011a80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011a80:	b480      	push	{r7}
 8011a82:	b083      	sub	sp, #12
 8011a84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a86:	4b0c      	ldr	r3, [pc, #48]	@ (8011ab8 <prvResetNextTaskUnblockTime+0x38>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d104      	bne.n	8011a9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011a90:	4b0a      	ldr	r3, [pc, #40]	@ (8011abc <prvResetNextTaskUnblockTime+0x3c>)
 8011a92:	f04f 32ff 	mov.w	r2, #4294967295
 8011a96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011a98:	e008      	b.n	8011aac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a9a:	4b07      	ldr	r3, [pc, #28]	@ (8011ab8 <prvResetNextTaskUnblockTime+0x38>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	68db      	ldr	r3, [r3, #12]
 8011aa0:	68db      	ldr	r3, [r3, #12]
 8011aa2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	685b      	ldr	r3, [r3, #4]
 8011aa8:	4a04      	ldr	r2, [pc, #16]	@ (8011abc <prvResetNextTaskUnblockTime+0x3c>)
 8011aaa:	6013      	str	r3, [r2, #0]
}
 8011aac:	bf00      	nop
 8011aae:	370c      	adds	r7, #12
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr
 8011ab8:	20001250 	.word	0x20001250
 8011abc:	200012b8 	.word	0x200012b8

08011ac0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8011af4 <xTaskGetSchedulerState+0x34>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d102      	bne.n	8011ad4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011ace:	2301      	movs	r3, #1
 8011ad0:	607b      	str	r3, [r7, #4]
 8011ad2:	e008      	b.n	8011ae6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ad4:	4b08      	ldr	r3, [pc, #32]	@ (8011af8 <xTaskGetSchedulerState+0x38>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d102      	bne.n	8011ae2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011adc:	2302      	movs	r3, #2
 8011ade:	607b      	str	r3, [r7, #4]
 8011ae0:	e001      	b.n	8011ae6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011ae6:	687b      	ldr	r3, [r7, #4]
	}
 8011ae8:	4618      	mov	r0, r3
 8011aea:	370c      	adds	r7, #12
 8011aec:	46bd      	mov	sp, r7
 8011aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af2:	4770      	bx	lr
 8011af4:	200012a4 	.word	0x200012a4
 8011af8:	200012c0 	.word	0x200012c0

08011afc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d05e      	beq.n	8011bd0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b16:	4b31      	ldr	r3, [pc, #196]	@ (8011bdc <xTaskPriorityInherit+0xe0>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d24e      	bcs.n	8011bbe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	699b      	ldr	r3, [r3, #24]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	db06      	blt.n	8011b36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b28:	4b2c      	ldr	r3, [pc, #176]	@ (8011bdc <xTaskPriorityInherit+0xe0>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b2e:	f1c3 0207 	rsb	r2, r3, #7
 8011b32:	68bb      	ldr	r3, [r7, #8]
 8011b34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	6959      	ldr	r1, [r3, #20]
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b3e:	4613      	mov	r3, r2
 8011b40:	009b      	lsls	r3, r3, #2
 8011b42:	4413      	add	r3, r2
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	4a26      	ldr	r2, [pc, #152]	@ (8011be0 <xTaskPriorityInherit+0xe4>)
 8011b48:	4413      	add	r3, r2
 8011b4a:	4299      	cmp	r1, r3
 8011b4c:	d12f      	bne.n	8011bae <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	3304      	adds	r3, #4
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7fe f920 	bl	800fd98 <uxListRemove>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d10a      	bne.n	8011b74 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b62:	2201      	movs	r2, #1
 8011b64:	fa02 f303 	lsl.w	r3, r2, r3
 8011b68:	43da      	mvns	r2, r3
 8011b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8011be4 <xTaskPriorityInherit+0xe8>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	4013      	ands	r3, r2
 8011b70:	4a1c      	ldr	r2, [pc, #112]	@ (8011be4 <xTaskPriorityInherit+0xe8>)
 8011b72:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b74:	4b19      	ldr	r3, [pc, #100]	@ (8011bdc <xTaskPriorityInherit+0xe0>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b82:	2201      	movs	r2, #1
 8011b84:	409a      	lsls	r2, r3
 8011b86:	4b17      	ldr	r3, [pc, #92]	@ (8011be4 <xTaskPriorityInherit+0xe8>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	4a15      	ldr	r2, [pc, #84]	@ (8011be4 <xTaskPriorityInherit+0xe8>)
 8011b8e:	6013      	str	r3, [r2, #0]
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b94:	4613      	mov	r3, r2
 8011b96:	009b      	lsls	r3, r3, #2
 8011b98:	4413      	add	r3, r2
 8011b9a:	009b      	lsls	r3, r3, #2
 8011b9c:	4a10      	ldr	r2, [pc, #64]	@ (8011be0 <xTaskPriorityInherit+0xe4>)
 8011b9e:	441a      	add	r2, r3
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	3304      	adds	r3, #4
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	4610      	mov	r0, r2
 8011ba8:	f7fe f899 	bl	800fcde <vListInsertEnd>
 8011bac:	e004      	b.n	8011bb8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011bae:	4b0b      	ldr	r3, [pc, #44]	@ (8011bdc <xTaskPriorityInherit+0xe0>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	60fb      	str	r3, [r7, #12]
 8011bbc:	e008      	b.n	8011bd0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011bc2:	4b06      	ldr	r3, [pc, #24]	@ (8011bdc <xTaskPriorityInherit+0xe0>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d201      	bcs.n	8011bd0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011bcc:	2301      	movs	r3, #1
 8011bce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
	}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3710      	adds	r7, #16
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	20001198 	.word	0x20001198
 8011be0:	2000119c 	.word	0x2000119c
 8011be4:	200012a0 	.word	0x200012a0

08011be8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b086      	sub	sp, #24
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d070      	beq.n	8011ce0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8011cec <xTaskPriorityDisinherit+0x104>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	693a      	ldr	r2, [r7, #16]
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d00b      	beq.n	8011c20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c0c:	f383 8811 	msr	BASEPRI, r3
 8011c10:	f3bf 8f6f 	isb	sy
 8011c14:	f3bf 8f4f 	dsb	sy
 8011c18:	60fb      	str	r3, [r7, #12]
}
 8011c1a:	bf00      	nop
 8011c1c:	bf00      	nop
 8011c1e:	e7fd      	b.n	8011c1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d10b      	bne.n	8011c40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c2c:	f383 8811 	msr	BASEPRI, r3
 8011c30:	f3bf 8f6f 	isb	sy
 8011c34:	f3bf 8f4f 	dsb	sy
 8011c38:	60bb      	str	r3, [r7, #8]
}
 8011c3a:	bf00      	nop
 8011c3c:	bf00      	nop
 8011c3e:	e7fd      	b.n	8011c3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011c44:	1e5a      	subs	r2, r3, #1
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d044      	beq.n	8011ce0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d140      	bne.n	8011ce0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	3304      	adds	r3, #4
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7fe f898 	bl	800fd98 <uxListRemove>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d115      	bne.n	8011c9a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c72:	491f      	ldr	r1, [pc, #124]	@ (8011cf0 <xTaskPriorityDisinherit+0x108>)
 8011c74:	4613      	mov	r3, r2
 8011c76:	009b      	lsls	r3, r3, #2
 8011c78:	4413      	add	r3, r2
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	440b      	add	r3, r1
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d10a      	bne.n	8011c9a <xTaskPriorityDisinherit+0xb2>
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c88:	2201      	movs	r2, #1
 8011c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8011c8e:	43da      	mvns	r2, r3
 8011c90:	4b18      	ldr	r3, [pc, #96]	@ (8011cf4 <xTaskPriorityDisinherit+0x10c>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	4013      	ands	r3, r2
 8011c96:	4a17      	ldr	r2, [pc, #92]	@ (8011cf4 <xTaskPriorityDisinherit+0x10c>)
 8011c98:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011c9a:	693b      	ldr	r3, [r7, #16]
 8011c9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ca6:	f1c3 0207 	rsb	r2, r3, #7
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cb2:	2201      	movs	r2, #1
 8011cb4:	409a      	lsls	r2, r3
 8011cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8011cf4 <xTaskPriorityDisinherit+0x10c>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	4313      	orrs	r3, r2
 8011cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8011cf4 <xTaskPriorityDisinherit+0x10c>)
 8011cbe:	6013      	str	r3, [r2, #0]
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	4413      	add	r3, r2
 8011cca:	009b      	lsls	r3, r3, #2
 8011ccc:	4a08      	ldr	r2, [pc, #32]	@ (8011cf0 <xTaskPriorityDisinherit+0x108>)
 8011cce:	441a      	add	r2, r3
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	3304      	adds	r3, #4
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	4610      	mov	r0, r2
 8011cd8:	f7fe f801 	bl	800fcde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011cdc:	2301      	movs	r3, #1
 8011cde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ce0:	697b      	ldr	r3, [r7, #20]
	}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3718      	adds	r7, #24
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	20001198 	.word	0x20001198
 8011cf0:	2000119c 	.word	0x2000119c
 8011cf4:	200012a0 	.word	0x200012a0

08011cf8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b088      	sub	sp, #32
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011d06:	2301      	movs	r3, #1
 8011d08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d079      	beq.n	8011e04 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011d10:	69bb      	ldr	r3, [r7, #24]
 8011d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d10b      	bne.n	8011d30 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d1c:	f383 8811 	msr	BASEPRI, r3
 8011d20:	f3bf 8f6f 	isb	sy
 8011d24:	f3bf 8f4f 	dsb	sy
 8011d28:	60fb      	str	r3, [r7, #12]
}
 8011d2a:	bf00      	nop
 8011d2c:	bf00      	nop
 8011d2e:	e7fd      	b.n	8011d2c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011d30:	69bb      	ldr	r3, [r7, #24]
 8011d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d34:	683a      	ldr	r2, [r7, #0]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d902      	bls.n	8011d40 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	61fb      	str	r3, [r7, #28]
 8011d3e:	e002      	b.n	8011d46 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011d40:	69bb      	ldr	r3, [r7, #24]
 8011d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d44:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011d46:	69bb      	ldr	r3, [r7, #24]
 8011d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d4a:	69fa      	ldr	r2, [r7, #28]
 8011d4c:	429a      	cmp	r2, r3
 8011d4e:	d059      	beq.n	8011e04 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011d50:	69bb      	ldr	r3, [r7, #24]
 8011d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011d54:	697a      	ldr	r2, [r7, #20]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d154      	bne.n	8011e04 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8011e0c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	69ba      	ldr	r2, [r7, #24]
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d10b      	bne.n	8011d7c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d68:	f383 8811 	msr	BASEPRI, r3
 8011d6c:	f3bf 8f6f 	isb	sy
 8011d70:	f3bf 8f4f 	dsb	sy
 8011d74:	60bb      	str	r3, [r7, #8]
}
 8011d76:	bf00      	nop
 8011d78:	bf00      	nop
 8011d7a:	e7fd      	b.n	8011d78 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011d82:	69bb      	ldr	r3, [r7, #24]
 8011d84:	69fa      	ldr	r2, [r7, #28]
 8011d86:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	699b      	ldr	r3, [r3, #24]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	db04      	blt.n	8011d9a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	f1c3 0207 	rsb	r2, r3, #7
 8011d96:	69bb      	ldr	r3, [r7, #24]
 8011d98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011d9a:	69bb      	ldr	r3, [r7, #24]
 8011d9c:	6959      	ldr	r1, [r3, #20]
 8011d9e:	693a      	ldr	r2, [r7, #16]
 8011da0:	4613      	mov	r3, r2
 8011da2:	009b      	lsls	r3, r3, #2
 8011da4:	4413      	add	r3, r2
 8011da6:	009b      	lsls	r3, r3, #2
 8011da8:	4a19      	ldr	r2, [pc, #100]	@ (8011e10 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011daa:	4413      	add	r3, r2
 8011dac:	4299      	cmp	r1, r3
 8011dae:	d129      	bne.n	8011e04 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011db0:	69bb      	ldr	r3, [r7, #24]
 8011db2:	3304      	adds	r3, #4
 8011db4:	4618      	mov	r0, r3
 8011db6:	f7fd ffef 	bl	800fd98 <uxListRemove>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d10a      	bne.n	8011dd6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011dc0:	69bb      	ldr	r3, [r7, #24]
 8011dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8011dca:	43da      	mvns	r2, r3
 8011dcc:	4b11      	ldr	r3, [pc, #68]	@ (8011e14 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	4013      	ands	r3, r2
 8011dd2:	4a10      	ldr	r2, [pc, #64]	@ (8011e14 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011dd4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011dd6:	69bb      	ldr	r3, [r7, #24]
 8011dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dda:	2201      	movs	r2, #1
 8011ddc:	409a      	lsls	r2, r3
 8011dde:	4b0d      	ldr	r3, [pc, #52]	@ (8011e14 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	4313      	orrs	r3, r2
 8011de4:	4a0b      	ldr	r2, [pc, #44]	@ (8011e14 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011de6:	6013      	str	r3, [r2, #0]
 8011de8:	69bb      	ldr	r3, [r7, #24]
 8011dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011dec:	4613      	mov	r3, r2
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	4413      	add	r3, r2
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	4a06      	ldr	r2, [pc, #24]	@ (8011e10 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011df6:	441a      	add	r2, r3
 8011df8:	69bb      	ldr	r3, [r7, #24]
 8011dfa:	3304      	adds	r3, #4
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	4610      	mov	r0, r2
 8011e00:	f7fd ff6d 	bl	800fcde <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011e04:	bf00      	nop
 8011e06:	3720      	adds	r7, #32
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	20001198 	.word	0x20001198
 8011e10:	2000119c 	.word	0x2000119c
 8011e14:	200012a0 	.word	0x200012a0

08011e18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011e18:	b480      	push	{r7}
 8011e1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011e1c:	4b07      	ldr	r3, [pc, #28]	@ (8011e3c <pvTaskIncrementMutexHeldCount+0x24>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d004      	beq.n	8011e2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011e24:	4b05      	ldr	r3, [pc, #20]	@ (8011e3c <pvTaskIncrementMutexHeldCount+0x24>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011e2a:	3201      	adds	r2, #1
 8011e2c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8011e2e:	4b03      	ldr	r3, [pc, #12]	@ (8011e3c <pvTaskIncrementMutexHeldCount+0x24>)
 8011e30:	681b      	ldr	r3, [r3, #0]
	}
 8011e32:	4618      	mov	r0, r3
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr
 8011e3c:	20001198 	.word	0x20001198

08011e40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011e4a:	4b29      	ldr	r3, [pc, #164]	@ (8011ef0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e50:	4b28      	ldr	r3, [pc, #160]	@ (8011ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	3304      	adds	r3, #4
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7fd ff9e 	bl	800fd98 <uxListRemove>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d10b      	bne.n	8011e7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011e62:	4b24      	ldr	r3, [pc, #144]	@ (8011ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e68:	2201      	movs	r2, #1
 8011e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8011e6e:	43da      	mvns	r2, r3
 8011e70:	4b21      	ldr	r3, [pc, #132]	@ (8011ef8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	4013      	ands	r3, r2
 8011e76:	4a20      	ldr	r2, [pc, #128]	@ (8011ef8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011e78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e80:	d10a      	bne.n	8011e98 <prvAddCurrentTaskToDelayedList+0x58>
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d007      	beq.n	8011e98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e88:	4b1a      	ldr	r3, [pc, #104]	@ (8011ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	3304      	adds	r3, #4
 8011e8e:	4619      	mov	r1, r3
 8011e90:	481a      	ldr	r0, [pc, #104]	@ (8011efc <prvAddCurrentTaskToDelayedList+0xbc>)
 8011e92:	f7fd ff24 	bl	800fcde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011e96:	e026      	b.n	8011ee6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011e98:	68fa      	ldr	r2, [r7, #12]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	4413      	add	r3, r2
 8011e9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011ea0:	4b14      	ldr	r3, [pc, #80]	@ (8011ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	68ba      	ldr	r2, [r7, #8]
 8011ea6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011ea8:	68ba      	ldr	r2, [r7, #8]
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d209      	bcs.n	8011ec4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011eb0:	4b13      	ldr	r3, [pc, #76]	@ (8011f00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011eb2:	681a      	ldr	r2, [r3, #0]
 8011eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8011ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	3304      	adds	r3, #4
 8011eba:	4619      	mov	r1, r3
 8011ebc:	4610      	mov	r0, r2
 8011ebe:	f7fd ff32 	bl	800fd26 <vListInsert>
}
 8011ec2:	e010      	b.n	8011ee6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8011f04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8011ef4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	3304      	adds	r3, #4
 8011ece:	4619      	mov	r1, r3
 8011ed0:	4610      	mov	r0, r2
 8011ed2:	f7fd ff28 	bl	800fd26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8011f08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	68ba      	ldr	r2, [r7, #8]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d202      	bcs.n	8011ee6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011ee0:	4a09      	ldr	r2, [pc, #36]	@ (8011f08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	6013      	str	r3, [r2, #0]
}
 8011ee6:	bf00      	nop
 8011ee8:	3710      	adds	r7, #16
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	2000129c 	.word	0x2000129c
 8011ef4:	20001198 	.word	0x20001198
 8011ef8:	200012a0 	.word	0x200012a0
 8011efc:	20001284 	.word	0x20001284
 8011f00:	20001254 	.word	0x20001254
 8011f04:	20001250 	.word	0x20001250
 8011f08:	200012b8 	.word	0x200012b8

08011f0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b085      	sub	sp, #20
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	3b04      	subs	r3, #4
 8011f1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	3b04      	subs	r3, #4
 8011f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	f023 0201 	bic.w	r2, r3, #1
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	3b04      	subs	r3, #4
 8011f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8011f70 <pxPortInitialiseStack+0x64>)
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	3b14      	subs	r3, #20
 8011f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011f48:	687a      	ldr	r2, [r7, #4]
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	3b04      	subs	r3, #4
 8011f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	f06f 0202 	mvn.w	r2, #2
 8011f5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	3b20      	subs	r3, #32
 8011f60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011f62:	68fb      	ldr	r3, [r7, #12]
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3714      	adds	r7, #20
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr
 8011f70:	08011f75 	.word	0x08011f75

08011f74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011f74:	b480      	push	{r7}
 8011f76:	b085      	sub	sp, #20
 8011f78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011f7e:	4b13      	ldr	r3, [pc, #76]	@ (8011fcc <prvTaskExitError+0x58>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f86:	d00b      	beq.n	8011fa0 <prvTaskExitError+0x2c>
	__asm volatile
 8011f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f8c:	f383 8811 	msr	BASEPRI, r3
 8011f90:	f3bf 8f6f 	isb	sy
 8011f94:	f3bf 8f4f 	dsb	sy
 8011f98:	60fb      	str	r3, [r7, #12]
}
 8011f9a:	bf00      	nop
 8011f9c:	bf00      	nop
 8011f9e:	e7fd      	b.n	8011f9c <prvTaskExitError+0x28>
	__asm volatile
 8011fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fa4:	f383 8811 	msr	BASEPRI, r3
 8011fa8:	f3bf 8f6f 	isb	sy
 8011fac:	f3bf 8f4f 	dsb	sy
 8011fb0:	60bb      	str	r3, [r7, #8]
}
 8011fb2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011fb4:	bf00      	nop
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d0fc      	beq.n	8011fb6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011fbc:	bf00      	nop
 8011fbe:	bf00      	nop
 8011fc0:	3714      	adds	r7, #20
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr
 8011fca:	bf00      	nop
 8011fcc:	2000000c 	.word	0x2000000c

08011fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011fd0:	4b07      	ldr	r3, [pc, #28]	@ (8011ff0 <pxCurrentTCBConst2>)
 8011fd2:	6819      	ldr	r1, [r3, #0]
 8011fd4:	6808      	ldr	r0, [r1, #0]
 8011fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fda:	f380 8809 	msr	PSP, r0
 8011fde:	f3bf 8f6f 	isb	sy
 8011fe2:	f04f 0000 	mov.w	r0, #0
 8011fe6:	f380 8811 	msr	BASEPRI, r0
 8011fea:	4770      	bx	lr
 8011fec:	f3af 8000 	nop.w

08011ff0 <pxCurrentTCBConst2>:
 8011ff0:	20001198 	.word	0x20001198
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011ff4:	bf00      	nop
 8011ff6:	bf00      	nop

08011ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011ff8:	4808      	ldr	r0, [pc, #32]	@ (801201c <prvPortStartFirstTask+0x24>)
 8011ffa:	6800      	ldr	r0, [r0, #0]
 8011ffc:	6800      	ldr	r0, [r0, #0]
 8011ffe:	f380 8808 	msr	MSP, r0
 8012002:	f04f 0000 	mov.w	r0, #0
 8012006:	f380 8814 	msr	CONTROL, r0
 801200a:	b662      	cpsie	i
 801200c:	b661      	cpsie	f
 801200e:	f3bf 8f4f 	dsb	sy
 8012012:	f3bf 8f6f 	isb	sy
 8012016:	df00      	svc	0
 8012018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801201a:	bf00      	nop
 801201c:	e000ed08 	.word	0xe000ed08

08012020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b086      	sub	sp, #24
 8012024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012026:	4b47      	ldr	r3, [pc, #284]	@ (8012144 <xPortStartScheduler+0x124>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	4a47      	ldr	r2, [pc, #284]	@ (8012148 <xPortStartScheduler+0x128>)
 801202c:	4293      	cmp	r3, r2
 801202e:	d10b      	bne.n	8012048 <xPortStartScheduler+0x28>
	__asm volatile
 8012030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012034:	f383 8811 	msr	BASEPRI, r3
 8012038:	f3bf 8f6f 	isb	sy
 801203c:	f3bf 8f4f 	dsb	sy
 8012040:	60fb      	str	r3, [r7, #12]
}
 8012042:	bf00      	nop
 8012044:	bf00      	nop
 8012046:	e7fd      	b.n	8012044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012048:	4b3e      	ldr	r3, [pc, #248]	@ (8012144 <xPortStartScheduler+0x124>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	4a3f      	ldr	r2, [pc, #252]	@ (801214c <xPortStartScheduler+0x12c>)
 801204e:	4293      	cmp	r3, r2
 8012050:	d10b      	bne.n	801206a <xPortStartScheduler+0x4a>
	__asm volatile
 8012052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012056:	f383 8811 	msr	BASEPRI, r3
 801205a:	f3bf 8f6f 	isb	sy
 801205e:	f3bf 8f4f 	dsb	sy
 8012062:	613b      	str	r3, [r7, #16]
}
 8012064:	bf00      	nop
 8012066:	bf00      	nop
 8012068:	e7fd      	b.n	8012066 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801206a:	4b39      	ldr	r3, [pc, #228]	@ (8012150 <xPortStartScheduler+0x130>)
 801206c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	b2db      	uxtb	r3, r3
 8012074:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	22ff      	movs	r2, #255	@ 0xff
 801207a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	b2db      	uxtb	r3, r3
 8012082:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012084:	78fb      	ldrb	r3, [r7, #3]
 8012086:	b2db      	uxtb	r3, r3
 8012088:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801208c:	b2da      	uxtb	r2, r3
 801208e:	4b31      	ldr	r3, [pc, #196]	@ (8012154 <xPortStartScheduler+0x134>)
 8012090:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012092:	4b31      	ldr	r3, [pc, #196]	@ (8012158 <xPortStartScheduler+0x138>)
 8012094:	2207      	movs	r2, #7
 8012096:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012098:	e009      	b.n	80120ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801209a:	4b2f      	ldr	r3, [pc, #188]	@ (8012158 <xPortStartScheduler+0x138>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	3b01      	subs	r3, #1
 80120a0:	4a2d      	ldr	r2, [pc, #180]	@ (8012158 <xPortStartScheduler+0x138>)
 80120a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80120a4:	78fb      	ldrb	r3, [r7, #3]
 80120a6:	b2db      	uxtb	r3, r3
 80120a8:	005b      	lsls	r3, r3, #1
 80120aa:	b2db      	uxtb	r3, r3
 80120ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80120ae:	78fb      	ldrb	r3, [r7, #3]
 80120b0:	b2db      	uxtb	r3, r3
 80120b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80120b6:	2b80      	cmp	r3, #128	@ 0x80
 80120b8:	d0ef      	beq.n	801209a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80120ba:	4b27      	ldr	r3, [pc, #156]	@ (8012158 <xPortStartScheduler+0x138>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	f1c3 0307 	rsb	r3, r3, #7
 80120c2:	2b04      	cmp	r3, #4
 80120c4:	d00b      	beq.n	80120de <xPortStartScheduler+0xbe>
	__asm volatile
 80120c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120ca:	f383 8811 	msr	BASEPRI, r3
 80120ce:	f3bf 8f6f 	isb	sy
 80120d2:	f3bf 8f4f 	dsb	sy
 80120d6:	60bb      	str	r3, [r7, #8]
}
 80120d8:	bf00      	nop
 80120da:	bf00      	nop
 80120dc:	e7fd      	b.n	80120da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80120de:	4b1e      	ldr	r3, [pc, #120]	@ (8012158 <xPortStartScheduler+0x138>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	021b      	lsls	r3, r3, #8
 80120e4:	4a1c      	ldr	r2, [pc, #112]	@ (8012158 <xPortStartScheduler+0x138>)
 80120e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80120e8:	4b1b      	ldr	r3, [pc, #108]	@ (8012158 <xPortStartScheduler+0x138>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80120f0:	4a19      	ldr	r2, [pc, #100]	@ (8012158 <xPortStartScheduler+0x138>)
 80120f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	b2da      	uxtb	r2, r3
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80120fc:	4b17      	ldr	r3, [pc, #92]	@ (801215c <xPortStartScheduler+0x13c>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	4a16      	ldr	r2, [pc, #88]	@ (801215c <xPortStartScheduler+0x13c>)
 8012102:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012106:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012108:	4b14      	ldr	r3, [pc, #80]	@ (801215c <xPortStartScheduler+0x13c>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	4a13      	ldr	r2, [pc, #76]	@ (801215c <xPortStartScheduler+0x13c>)
 801210e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012112:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012114:	f000 f8da 	bl	80122cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012118:	4b11      	ldr	r3, [pc, #68]	@ (8012160 <xPortStartScheduler+0x140>)
 801211a:	2200      	movs	r2, #0
 801211c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801211e:	f000 f8f9 	bl	8012314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012122:	4b10      	ldr	r3, [pc, #64]	@ (8012164 <xPortStartScheduler+0x144>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	4a0f      	ldr	r2, [pc, #60]	@ (8012164 <xPortStartScheduler+0x144>)
 8012128:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801212c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801212e:	f7ff ff63 	bl	8011ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012132:	f7ff fa73 	bl	801161c <vTaskSwitchContext>
	prvTaskExitError();
 8012136:	f7ff ff1d 	bl	8011f74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801213a:	2300      	movs	r3, #0
}
 801213c:	4618      	mov	r0, r3
 801213e:	3718      	adds	r7, #24
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	e000ed00 	.word	0xe000ed00
 8012148:	410fc271 	.word	0x410fc271
 801214c:	410fc270 	.word	0x410fc270
 8012150:	e000e400 	.word	0xe000e400
 8012154:	200012c4 	.word	0x200012c4
 8012158:	200012c8 	.word	0x200012c8
 801215c:	e000ed20 	.word	0xe000ed20
 8012160:	2000000c 	.word	0x2000000c
 8012164:	e000ef34 	.word	0xe000ef34

08012168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012168:	b480      	push	{r7}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
	__asm volatile
 801216e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012172:	f383 8811 	msr	BASEPRI, r3
 8012176:	f3bf 8f6f 	isb	sy
 801217a:	f3bf 8f4f 	dsb	sy
 801217e:	607b      	str	r3, [r7, #4]
}
 8012180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012182:	4b10      	ldr	r3, [pc, #64]	@ (80121c4 <vPortEnterCritical+0x5c>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	3301      	adds	r3, #1
 8012188:	4a0e      	ldr	r2, [pc, #56]	@ (80121c4 <vPortEnterCritical+0x5c>)
 801218a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801218c:	4b0d      	ldr	r3, [pc, #52]	@ (80121c4 <vPortEnterCritical+0x5c>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b01      	cmp	r3, #1
 8012192:	d110      	bne.n	80121b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012194:	4b0c      	ldr	r3, [pc, #48]	@ (80121c8 <vPortEnterCritical+0x60>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	b2db      	uxtb	r3, r3
 801219a:	2b00      	cmp	r3, #0
 801219c:	d00b      	beq.n	80121b6 <vPortEnterCritical+0x4e>
	__asm volatile
 801219e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121a2:	f383 8811 	msr	BASEPRI, r3
 80121a6:	f3bf 8f6f 	isb	sy
 80121aa:	f3bf 8f4f 	dsb	sy
 80121ae:	603b      	str	r3, [r7, #0]
}
 80121b0:	bf00      	nop
 80121b2:	bf00      	nop
 80121b4:	e7fd      	b.n	80121b2 <vPortEnterCritical+0x4a>
	}
}
 80121b6:	bf00      	nop
 80121b8:	370c      	adds	r7, #12
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop
 80121c4:	2000000c 	.word	0x2000000c
 80121c8:	e000ed04 	.word	0xe000ed04

080121cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80121cc:	b480      	push	{r7}
 80121ce:	b083      	sub	sp, #12
 80121d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80121d2:	4b12      	ldr	r3, [pc, #72]	@ (801221c <vPortExitCritical+0x50>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d10b      	bne.n	80121f2 <vPortExitCritical+0x26>
	__asm volatile
 80121da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121de:	f383 8811 	msr	BASEPRI, r3
 80121e2:	f3bf 8f6f 	isb	sy
 80121e6:	f3bf 8f4f 	dsb	sy
 80121ea:	607b      	str	r3, [r7, #4]
}
 80121ec:	bf00      	nop
 80121ee:	bf00      	nop
 80121f0:	e7fd      	b.n	80121ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80121f2:	4b0a      	ldr	r3, [pc, #40]	@ (801221c <vPortExitCritical+0x50>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	3b01      	subs	r3, #1
 80121f8:	4a08      	ldr	r2, [pc, #32]	@ (801221c <vPortExitCritical+0x50>)
 80121fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80121fc:	4b07      	ldr	r3, [pc, #28]	@ (801221c <vPortExitCritical+0x50>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d105      	bne.n	8012210 <vPortExitCritical+0x44>
 8012204:	2300      	movs	r3, #0
 8012206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	f383 8811 	msr	BASEPRI, r3
}
 801220e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012210:	bf00      	nop
 8012212:	370c      	adds	r7, #12
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr
 801221c:	2000000c 	.word	0x2000000c

08012220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012220:	f3ef 8009 	mrs	r0, PSP
 8012224:	f3bf 8f6f 	isb	sy
 8012228:	4b15      	ldr	r3, [pc, #84]	@ (8012280 <pxCurrentTCBConst>)
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	f01e 0f10 	tst.w	lr, #16
 8012230:	bf08      	it	eq
 8012232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801223a:	6010      	str	r0, [r2, #0]
 801223c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012240:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012244:	f380 8811 	msr	BASEPRI, r0
 8012248:	f3bf 8f4f 	dsb	sy
 801224c:	f3bf 8f6f 	isb	sy
 8012250:	f7ff f9e4 	bl	801161c <vTaskSwitchContext>
 8012254:	f04f 0000 	mov.w	r0, #0
 8012258:	f380 8811 	msr	BASEPRI, r0
 801225c:	bc09      	pop	{r0, r3}
 801225e:	6819      	ldr	r1, [r3, #0]
 8012260:	6808      	ldr	r0, [r1, #0]
 8012262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012266:	f01e 0f10 	tst.w	lr, #16
 801226a:	bf08      	it	eq
 801226c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012270:	f380 8809 	msr	PSP, r0
 8012274:	f3bf 8f6f 	isb	sy
 8012278:	4770      	bx	lr
 801227a:	bf00      	nop
 801227c:	f3af 8000 	nop.w

08012280 <pxCurrentTCBConst>:
 8012280:	20001198 	.word	0x20001198
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012284:	bf00      	nop
 8012286:	bf00      	nop

08012288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
	__asm volatile
 801228e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012292:	f383 8811 	msr	BASEPRI, r3
 8012296:	f3bf 8f6f 	isb	sy
 801229a:	f3bf 8f4f 	dsb	sy
 801229e:	607b      	str	r3, [r7, #4]
}
 80122a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80122a2:	f7ff f8f9 	bl	8011498 <xTaskIncrementTick>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d003      	beq.n	80122b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80122ac:	4b06      	ldr	r3, [pc, #24]	@ (80122c8 <SysTick_Handler+0x40>)
 80122ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80122b2:	601a      	str	r2, [r3, #0]
 80122b4:	2300      	movs	r3, #0
 80122b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	f383 8811 	msr	BASEPRI, r3
}
 80122be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80122c0:	bf00      	nop
 80122c2:	3708      	adds	r7, #8
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}
 80122c8:	e000ed04 	.word	0xe000ed04

080122cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80122cc:	b480      	push	{r7}
 80122ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80122d0:	4b0b      	ldr	r3, [pc, #44]	@ (8012300 <vPortSetupTimerInterrupt+0x34>)
 80122d2:	2200      	movs	r2, #0
 80122d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80122d6:	4b0b      	ldr	r3, [pc, #44]	@ (8012304 <vPortSetupTimerInterrupt+0x38>)
 80122d8:	2200      	movs	r2, #0
 80122da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80122dc:	4b0a      	ldr	r3, [pc, #40]	@ (8012308 <vPortSetupTimerInterrupt+0x3c>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	4a0a      	ldr	r2, [pc, #40]	@ (801230c <vPortSetupTimerInterrupt+0x40>)
 80122e2:	fba2 2303 	umull	r2, r3, r2, r3
 80122e6:	099b      	lsrs	r3, r3, #6
 80122e8:	4a09      	ldr	r2, [pc, #36]	@ (8012310 <vPortSetupTimerInterrupt+0x44>)
 80122ea:	3b01      	subs	r3, #1
 80122ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80122ee:	4b04      	ldr	r3, [pc, #16]	@ (8012300 <vPortSetupTimerInterrupt+0x34>)
 80122f0:	2207      	movs	r2, #7
 80122f2:	601a      	str	r2, [r3, #0]
}
 80122f4:	bf00      	nop
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop
 8012300:	e000e010 	.word	0xe000e010
 8012304:	e000e018 	.word	0xe000e018
 8012308:	20000000 	.word	0x20000000
 801230c:	10624dd3 	.word	0x10624dd3
 8012310:	e000e014 	.word	0xe000e014

08012314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012314:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012324 <vPortEnableVFP+0x10>
 8012318:	6801      	ldr	r1, [r0, #0]
 801231a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801231e:	6001      	str	r1, [r0, #0]
 8012320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012322:	bf00      	nop
 8012324:	e000ed88 	.word	0xe000ed88

08012328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012328:	b480      	push	{r7}
 801232a:	b085      	sub	sp, #20
 801232c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801232e:	f3ef 8305 	mrs	r3, IPSR
 8012332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2b0f      	cmp	r3, #15
 8012338:	d915      	bls.n	8012366 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801233a:	4a18      	ldr	r2, [pc, #96]	@ (801239c <vPortValidateInterruptPriority+0x74>)
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	4413      	add	r3, r2
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012344:	4b16      	ldr	r3, [pc, #88]	@ (80123a0 <vPortValidateInterruptPriority+0x78>)
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	7afa      	ldrb	r2, [r7, #11]
 801234a:	429a      	cmp	r2, r3
 801234c:	d20b      	bcs.n	8012366 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801234e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012352:	f383 8811 	msr	BASEPRI, r3
 8012356:	f3bf 8f6f 	isb	sy
 801235a:	f3bf 8f4f 	dsb	sy
 801235e:	607b      	str	r3, [r7, #4]
}
 8012360:	bf00      	nop
 8012362:	bf00      	nop
 8012364:	e7fd      	b.n	8012362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012366:	4b0f      	ldr	r3, [pc, #60]	@ (80123a4 <vPortValidateInterruptPriority+0x7c>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801236e:	4b0e      	ldr	r3, [pc, #56]	@ (80123a8 <vPortValidateInterruptPriority+0x80>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	429a      	cmp	r2, r3
 8012374:	d90b      	bls.n	801238e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801237a:	f383 8811 	msr	BASEPRI, r3
 801237e:	f3bf 8f6f 	isb	sy
 8012382:	f3bf 8f4f 	dsb	sy
 8012386:	603b      	str	r3, [r7, #0]
}
 8012388:	bf00      	nop
 801238a:	bf00      	nop
 801238c:	e7fd      	b.n	801238a <vPortValidateInterruptPriority+0x62>
	}
 801238e:	bf00      	nop
 8012390:	3714      	adds	r7, #20
 8012392:	46bd      	mov	sp, r7
 8012394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012398:	4770      	bx	lr
 801239a:	bf00      	nop
 801239c:	e000e3f0 	.word	0xe000e3f0
 80123a0:	200012c4 	.word	0x200012c4
 80123a4:	e000ed0c 	.word	0xe000ed0c
 80123a8:	200012c8 	.word	0x200012c8

080123ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b08a      	sub	sp, #40	@ 0x28
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80123b4:	2300      	movs	r3, #0
 80123b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80123b8:	f7fe ffa0 	bl	80112fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80123bc:	4b5f      	ldr	r3, [pc, #380]	@ (801253c <pvPortMalloc+0x190>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d101      	bne.n	80123c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80123c4:	f000 f92a 	bl	801261c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80123c8:	4b5d      	ldr	r3, [pc, #372]	@ (8012540 <pvPortMalloc+0x194>)
 80123ca:	681a      	ldr	r2, [r3, #0]
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	4013      	ands	r3, r2
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f040 8095 	bne.w	8012500 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d01e      	beq.n	801241a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80123dc:	2208      	movs	r2, #8
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	4413      	add	r3, r2
 80123e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f003 0307 	and.w	r3, r3, #7
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d015      	beq.n	801241a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f023 0307 	bic.w	r3, r3, #7
 80123f4:	3308      	adds	r3, #8
 80123f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f003 0307 	and.w	r3, r3, #7
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d00b      	beq.n	801241a <pvPortMalloc+0x6e>
	__asm volatile
 8012402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012406:	f383 8811 	msr	BASEPRI, r3
 801240a:	f3bf 8f6f 	isb	sy
 801240e:	f3bf 8f4f 	dsb	sy
 8012412:	617b      	str	r3, [r7, #20]
}
 8012414:	bf00      	nop
 8012416:	bf00      	nop
 8012418:	e7fd      	b.n	8012416 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d06f      	beq.n	8012500 <pvPortMalloc+0x154>
 8012420:	4b48      	ldr	r3, [pc, #288]	@ (8012544 <pvPortMalloc+0x198>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	687a      	ldr	r2, [r7, #4]
 8012426:	429a      	cmp	r2, r3
 8012428:	d86a      	bhi.n	8012500 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801242a:	4b47      	ldr	r3, [pc, #284]	@ (8012548 <pvPortMalloc+0x19c>)
 801242c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801242e:	4b46      	ldr	r3, [pc, #280]	@ (8012548 <pvPortMalloc+0x19c>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012434:	e004      	b.n	8012440 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012438:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	687a      	ldr	r2, [r7, #4]
 8012446:	429a      	cmp	r2, r3
 8012448:	d903      	bls.n	8012452 <pvPortMalloc+0xa6>
 801244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d1f1      	bne.n	8012436 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012452:	4b3a      	ldr	r3, [pc, #232]	@ (801253c <pvPortMalloc+0x190>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012458:	429a      	cmp	r2, r3
 801245a:	d051      	beq.n	8012500 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801245c:	6a3b      	ldr	r3, [r7, #32]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	2208      	movs	r2, #8
 8012462:	4413      	add	r3, r2
 8012464:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	6a3b      	ldr	r3, [r7, #32]
 801246c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012470:	685a      	ldr	r2, [r3, #4]
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	1ad2      	subs	r2, r2, r3
 8012476:	2308      	movs	r3, #8
 8012478:	005b      	lsls	r3, r3, #1
 801247a:	429a      	cmp	r2, r3
 801247c:	d920      	bls.n	80124c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801247e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	4413      	add	r3, r2
 8012484:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012486:	69bb      	ldr	r3, [r7, #24]
 8012488:	f003 0307 	and.w	r3, r3, #7
 801248c:	2b00      	cmp	r3, #0
 801248e:	d00b      	beq.n	80124a8 <pvPortMalloc+0xfc>
	__asm volatile
 8012490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012494:	f383 8811 	msr	BASEPRI, r3
 8012498:	f3bf 8f6f 	isb	sy
 801249c:	f3bf 8f4f 	dsb	sy
 80124a0:	613b      	str	r3, [r7, #16]
}
 80124a2:	bf00      	nop
 80124a4:	bf00      	nop
 80124a6:	e7fd      	b.n	80124a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80124a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124aa:	685a      	ldr	r2, [r3, #4]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	1ad2      	subs	r2, r2, r3
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80124b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80124ba:	69b8      	ldr	r0, [r7, #24]
 80124bc:	f000 f910 	bl	80126e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80124c0:	4b20      	ldr	r3, [pc, #128]	@ (8012544 <pvPortMalloc+0x198>)
 80124c2:	681a      	ldr	r2, [r3, #0]
 80124c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	1ad3      	subs	r3, r2, r3
 80124ca:	4a1e      	ldr	r2, [pc, #120]	@ (8012544 <pvPortMalloc+0x198>)
 80124cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80124ce:	4b1d      	ldr	r3, [pc, #116]	@ (8012544 <pvPortMalloc+0x198>)
 80124d0:	681a      	ldr	r2, [r3, #0]
 80124d2:	4b1e      	ldr	r3, [pc, #120]	@ (801254c <pvPortMalloc+0x1a0>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d203      	bcs.n	80124e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80124da:	4b1a      	ldr	r3, [pc, #104]	@ (8012544 <pvPortMalloc+0x198>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	4a1b      	ldr	r2, [pc, #108]	@ (801254c <pvPortMalloc+0x1a0>)
 80124e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80124e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124e4:	685a      	ldr	r2, [r3, #4]
 80124e6:	4b16      	ldr	r3, [pc, #88]	@ (8012540 <pvPortMalloc+0x194>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	431a      	orrs	r2, r3
 80124ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80124f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124f2:	2200      	movs	r2, #0
 80124f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80124f6:	4b16      	ldr	r3, [pc, #88]	@ (8012550 <pvPortMalloc+0x1a4>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	3301      	adds	r3, #1
 80124fc:	4a14      	ldr	r2, [pc, #80]	@ (8012550 <pvPortMalloc+0x1a4>)
 80124fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012500:	f7fe ff0a 	bl	8011318 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d101      	bne.n	801250e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801250a:	f7f0 fd75 	bl	8002ff8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801250e:	69fb      	ldr	r3, [r7, #28]
 8012510:	f003 0307 	and.w	r3, r3, #7
 8012514:	2b00      	cmp	r3, #0
 8012516:	d00b      	beq.n	8012530 <pvPortMalloc+0x184>
	__asm volatile
 8012518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801251c:	f383 8811 	msr	BASEPRI, r3
 8012520:	f3bf 8f6f 	isb	sy
 8012524:	f3bf 8f4f 	dsb	sy
 8012528:	60fb      	str	r3, [r7, #12]
}
 801252a:	bf00      	nop
 801252c:	bf00      	nop
 801252e:	e7fd      	b.n	801252c <pvPortMalloc+0x180>
	return pvReturn;
 8012530:	69fb      	ldr	r3, [r7, #28]
}
 8012532:	4618      	mov	r0, r3
 8012534:	3728      	adds	r7, #40	@ 0x28
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}
 801253a:	bf00      	nop
 801253c:	20004ed4 	.word	0x20004ed4
 8012540:	20004ee8 	.word	0x20004ee8
 8012544:	20004ed8 	.word	0x20004ed8
 8012548:	20004ecc 	.word	0x20004ecc
 801254c:	20004edc 	.word	0x20004edc
 8012550:	20004ee0 	.word	0x20004ee0

08012554 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b086      	sub	sp, #24
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d04f      	beq.n	8012606 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012566:	2308      	movs	r3, #8
 8012568:	425b      	negs	r3, r3
 801256a:	697a      	ldr	r2, [r7, #20]
 801256c:	4413      	add	r3, r2
 801256e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	685a      	ldr	r2, [r3, #4]
 8012578:	4b25      	ldr	r3, [pc, #148]	@ (8012610 <vPortFree+0xbc>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	4013      	ands	r3, r2
 801257e:	2b00      	cmp	r3, #0
 8012580:	d10b      	bne.n	801259a <vPortFree+0x46>
	__asm volatile
 8012582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012586:	f383 8811 	msr	BASEPRI, r3
 801258a:	f3bf 8f6f 	isb	sy
 801258e:	f3bf 8f4f 	dsb	sy
 8012592:	60fb      	str	r3, [r7, #12]
}
 8012594:	bf00      	nop
 8012596:	bf00      	nop
 8012598:	e7fd      	b.n	8012596 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d00b      	beq.n	80125ba <vPortFree+0x66>
	__asm volatile
 80125a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125a6:	f383 8811 	msr	BASEPRI, r3
 80125aa:	f3bf 8f6f 	isb	sy
 80125ae:	f3bf 8f4f 	dsb	sy
 80125b2:	60bb      	str	r3, [r7, #8]
}
 80125b4:	bf00      	nop
 80125b6:	bf00      	nop
 80125b8:	e7fd      	b.n	80125b6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80125ba:	693b      	ldr	r3, [r7, #16]
 80125bc:	685a      	ldr	r2, [r3, #4]
 80125be:	4b14      	ldr	r3, [pc, #80]	@ (8012610 <vPortFree+0xbc>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	4013      	ands	r3, r2
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d01e      	beq.n	8012606 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d11a      	bne.n	8012606 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	685a      	ldr	r2, [r3, #4]
 80125d4:	4b0e      	ldr	r3, [pc, #56]	@ (8012610 <vPortFree+0xbc>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	43db      	mvns	r3, r3
 80125da:	401a      	ands	r2, r3
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80125e0:	f7fe fe8c 	bl	80112fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	685a      	ldr	r2, [r3, #4]
 80125e8:	4b0a      	ldr	r3, [pc, #40]	@ (8012614 <vPortFree+0xc0>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	4413      	add	r3, r2
 80125ee:	4a09      	ldr	r2, [pc, #36]	@ (8012614 <vPortFree+0xc0>)
 80125f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80125f2:	6938      	ldr	r0, [r7, #16]
 80125f4:	f000 f874 	bl	80126e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80125f8:	4b07      	ldr	r3, [pc, #28]	@ (8012618 <vPortFree+0xc4>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	3301      	adds	r3, #1
 80125fe:	4a06      	ldr	r2, [pc, #24]	@ (8012618 <vPortFree+0xc4>)
 8012600:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012602:	f7fe fe89 	bl	8011318 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012606:	bf00      	nop
 8012608:	3718      	adds	r7, #24
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	20004ee8 	.word	0x20004ee8
 8012614:	20004ed8 	.word	0x20004ed8
 8012618:	20004ee4 	.word	0x20004ee4

0801261c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801261c:	b480      	push	{r7}
 801261e:	b085      	sub	sp, #20
 8012620:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012622:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8012626:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012628:	4b27      	ldr	r3, [pc, #156]	@ (80126c8 <prvHeapInit+0xac>)
 801262a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	f003 0307 	and.w	r3, r3, #7
 8012632:	2b00      	cmp	r3, #0
 8012634:	d00c      	beq.n	8012650 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	3307      	adds	r3, #7
 801263a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	f023 0307 	bic.w	r3, r3, #7
 8012642:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012644:	68ba      	ldr	r2, [r7, #8]
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	1ad3      	subs	r3, r2, r3
 801264a:	4a1f      	ldr	r2, [pc, #124]	@ (80126c8 <prvHeapInit+0xac>)
 801264c:	4413      	add	r3, r2
 801264e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012654:	4a1d      	ldr	r2, [pc, #116]	@ (80126cc <prvHeapInit+0xb0>)
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801265a:	4b1c      	ldr	r3, [pc, #112]	@ (80126cc <prvHeapInit+0xb0>)
 801265c:	2200      	movs	r2, #0
 801265e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	68ba      	ldr	r2, [r7, #8]
 8012664:	4413      	add	r3, r2
 8012666:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012668:	2208      	movs	r2, #8
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	1a9b      	subs	r3, r3, r2
 801266e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	f023 0307 	bic.w	r3, r3, #7
 8012676:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	4a15      	ldr	r2, [pc, #84]	@ (80126d0 <prvHeapInit+0xb4>)
 801267c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801267e:	4b14      	ldr	r3, [pc, #80]	@ (80126d0 <prvHeapInit+0xb4>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	2200      	movs	r2, #0
 8012684:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012686:	4b12      	ldr	r3, [pc, #72]	@ (80126d0 <prvHeapInit+0xb4>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	2200      	movs	r2, #0
 801268c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	68fa      	ldr	r2, [r7, #12]
 8012696:	1ad2      	subs	r2, r2, r3
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801269c:	4b0c      	ldr	r3, [pc, #48]	@ (80126d0 <prvHeapInit+0xb4>)
 801269e:	681a      	ldr	r2, [r3, #0]
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	4a0a      	ldr	r2, [pc, #40]	@ (80126d4 <prvHeapInit+0xb8>)
 80126aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	4a09      	ldr	r2, [pc, #36]	@ (80126d8 <prvHeapInit+0xbc>)
 80126b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80126b4:	4b09      	ldr	r3, [pc, #36]	@ (80126dc <prvHeapInit+0xc0>)
 80126b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80126ba:	601a      	str	r2, [r3, #0]
}
 80126bc:	bf00      	nop
 80126be:	3714      	adds	r7, #20
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr
 80126c8:	200012cc 	.word	0x200012cc
 80126cc:	20004ecc 	.word	0x20004ecc
 80126d0:	20004ed4 	.word	0x20004ed4
 80126d4:	20004edc 	.word	0x20004edc
 80126d8:	20004ed8 	.word	0x20004ed8
 80126dc:	20004ee8 	.word	0x20004ee8

080126e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80126e0:	b480      	push	{r7}
 80126e2:	b085      	sub	sp, #20
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80126e8:	4b28      	ldr	r3, [pc, #160]	@ (801278c <prvInsertBlockIntoFreeList+0xac>)
 80126ea:	60fb      	str	r3, [r7, #12]
 80126ec:	e002      	b.n	80126f4 <prvInsertBlockIntoFreeList+0x14>
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	60fb      	str	r3, [r7, #12]
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d8f7      	bhi.n	80126ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	68ba      	ldr	r2, [r7, #8]
 8012708:	4413      	add	r3, r2
 801270a:	687a      	ldr	r2, [r7, #4]
 801270c:	429a      	cmp	r2, r3
 801270e:	d108      	bne.n	8012722 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	685a      	ldr	r2, [r3, #4]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	685b      	ldr	r3, [r3, #4]
 8012718:	441a      	add	r2, r3
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	68ba      	ldr	r2, [r7, #8]
 801272c:	441a      	add	r2, r3
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	429a      	cmp	r2, r3
 8012734:	d118      	bne.n	8012768 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	681a      	ldr	r2, [r3, #0]
 801273a:	4b15      	ldr	r3, [pc, #84]	@ (8012790 <prvInsertBlockIntoFreeList+0xb0>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	429a      	cmp	r2, r3
 8012740:	d00d      	beq.n	801275e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	685a      	ldr	r2, [r3, #4]
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	441a      	add	r2, r3
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	681a      	ldr	r2, [r3, #0]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	601a      	str	r2, [r3, #0]
 801275c:	e008      	b.n	8012770 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801275e:	4b0c      	ldr	r3, [pc, #48]	@ (8012790 <prvInsertBlockIntoFreeList+0xb0>)
 8012760:	681a      	ldr	r2, [r3, #0]
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	601a      	str	r2, [r3, #0]
 8012766:	e003      	b.n	8012770 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012770:	68fa      	ldr	r2, [r7, #12]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	429a      	cmp	r2, r3
 8012776:	d002      	beq.n	801277e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	687a      	ldr	r2, [r7, #4]
 801277c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801277e:	bf00      	nop
 8012780:	3714      	adds	r7, #20
 8012782:	46bd      	mov	sp, r7
 8012784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012788:	4770      	bx	lr
 801278a:	bf00      	nop
 801278c:	20004ecc 	.word	0x20004ecc
 8012790:	20004ed4 	.word	0x20004ed4

08012794 <__cvt>:
 8012794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012798:	ec57 6b10 	vmov	r6, r7, d0
 801279c:	2f00      	cmp	r7, #0
 801279e:	460c      	mov	r4, r1
 80127a0:	4619      	mov	r1, r3
 80127a2:	463b      	mov	r3, r7
 80127a4:	bfbb      	ittet	lt
 80127a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80127aa:	461f      	movlt	r7, r3
 80127ac:	2300      	movge	r3, #0
 80127ae:	232d      	movlt	r3, #45	@ 0x2d
 80127b0:	700b      	strb	r3, [r1, #0]
 80127b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80127b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80127b8:	4691      	mov	r9, r2
 80127ba:	f023 0820 	bic.w	r8, r3, #32
 80127be:	bfbc      	itt	lt
 80127c0:	4632      	movlt	r2, r6
 80127c2:	4616      	movlt	r6, r2
 80127c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80127c8:	d005      	beq.n	80127d6 <__cvt+0x42>
 80127ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80127ce:	d100      	bne.n	80127d2 <__cvt+0x3e>
 80127d0:	3401      	adds	r4, #1
 80127d2:	2102      	movs	r1, #2
 80127d4:	e000      	b.n	80127d8 <__cvt+0x44>
 80127d6:	2103      	movs	r1, #3
 80127d8:	ab03      	add	r3, sp, #12
 80127da:	9301      	str	r3, [sp, #4]
 80127dc:	ab02      	add	r3, sp, #8
 80127de:	9300      	str	r3, [sp, #0]
 80127e0:	ec47 6b10 	vmov	d0, r6, r7
 80127e4:	4653      	mov	r3, sl
 80127e6:	4622      	mov	r2, r4
 80127e8:	f000 ffde 	bl	80137a8 <_dtoa_r>
 80127ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80127f0:	4605      	mov	r5, r0
 80127f2:	d119      	bne.n	8012828 <__cvt+0x94>
 80127f4:	f019 0f01 	tst.w	r9, #1
 80127f8:	d00e      	beq.n	8012818 <__cvt+0x84>
 80127fa:	eb00 0904 	add.w	r9, r0, r4
 80127fe:	2200      	movs	r2, #0
 8012800:	2300      	movs	r3, #0
 8012802:	4630      	mov	r0, r6
 8012804:	4639      	mov	r1, r7
 8012806:	f7ee f97f 	bl	8000b08 <__aeabi_dcmpeq>
 801280a:	b108      	cbz	r0, 8012810 <__cvt+0x7c>
 801280c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012810:	2230      	movs	r2, #48	@ 0x30
 8012812:	9b03      	ldr	r3, [sp, #12]
 8012814:	454b      	cmp	r3, r9
 8012816:	d31e      	bcc.n	8012856 <__cvt+0xc2>
 8012818:	9b03      	ldr	r3, [sp, #12]
 801281a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801281c:	1b5b      	subs	r3, r3, r5
 801281e:	4628      	mov	r0, r5
 8012820:	6013      	str	r3, [r2, #0]
 8012822:	b004      	add	sp, #16
 8012824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012828:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801282c:	eb00 0904 	add.w	r9, r0, r4
 8012830:	d1e5      	bne.n	80127fe <__cvt+0x6a>
 8012832:	7803      	ldrb	r3, [r0, #0]
 8012834:	2b30      	cmp	r3, #48	@ 0x30
 8012836:	d10a      	bne.n	801284e <__cvt+0xba>
 8012838:	2200      	movs	r2, #0
 801283a:	2300      	movs	r3, #0
 801283c:	4630      	mov	r0, r6
 801283e:	4639      	mov	r1, r7
 8012840:	f7ee f962 	bl	8000b08 <__aeabi_dcmpeq>
 8012844:	b918      	cbnz	r0, 801284e <__cvt+0xba>
 8012846:	f1c4 0401 	rsb	r4, r4, #1
 801284a:	f8ca 4000 	str.w	r4, [sl]
 801284e:	f8da 3000 	ldr.w	r3, [sl]
 8012852:	4499      	add	r9, r3
 8012854:	e7d3      	b.n	80127fe <__cvt+0x6a>
 8012856:	1c59      	adds	r1, r3, #1
 8012858:	9103      	str	r1, [sp, #12]
 801285a:	701a      	strb	r2, [r3, #0]
 801285c:	e7d9      	b.n	8012812 <__cvt+0x7e>

0801285e <__exponent>:
 801285e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012860:	2900      	cmp	r1, #0
 8012862:	bfba      	itte	lt
 8012864:	4249      	neglt	r1, r1
 8012866:	232d      	movlt	r3, #45	@ 0x2d
 8012868:	232b      	movge	r3, #43	@ 0x2b
 801286a:	2909      	cmp	r1, #9
 801286c:	7002      	strb	r2, [r0, #0]
 801286e:	7043      	strb	r3, [r0, #1]
 8012870:	dd29      	ble.n	80128c6 <__exponent+0x68>
 8012872:	f10d 0307 	add.w	r3, sp, #7
 8012876:	461d      	mov	r5, r3
 8012878:	270a      	movs	r7, #10
 801287a:	461a      	mov	r2, r3
 801287c:	fbb1 f6f7 	udiv	r6, r1, r7
 8012880:	fb07 1416 	mls	r4, r7, r6, r1
 8012884:	3430      	adds	r4, #48	@ 0x30
 8012886:	f802 4c01 	strb.w	r4, [r2, #-1]
 801288a:	460c      	mov	r4, r1
 801288c:	2c63      	cmp	r4, #99	@ 0x63
 801288e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012892:	4631      	mov	r1, r6
 8012894:	dcf1      	bgt.n	801287a <__exponent+0x1c>
 8012896:	3130      	adds	r1, #48	@ 0x30
 8012898:	1e94      	subs	r4, r2, #2
 801289a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801289e:	1c41      	adds	r1, r0, #1
 80128a0:	4623      	mov	r3, r4
 80128a2:	42ab      	cmp	r3, r5
 80128a4:	d30a      	bcc.n	80128bc <__exponent+0x5e>
 80128a6:	f10d 0309 	add.w	r3, sp, #9
 80128aa:	1a9b      	subs	r3, r3, r2
 80128ac:	42ac      	cmp	r4, r5
 80128ae:	bf88      	it	hi
 80128b0:	2300      	movhi	r3, #0
 80128b2:	3302      	adds	r3, #2
 80128b4:	4403      	add	r3, r0
 80128b6:	1a18      	subs	r0, r3, r0
 80128b8:	b003      	add	sp, #12
 80128ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80128c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80128c4:	e7ed      	b.n	80128a2 <__exponent+0x44>
 80128c6:	2330      	movs	r3, #48	@ 0x30
 80128c8:	3130      	adds	r1, #48	@ 0x30
 80128ca:	7083      	strb	r3, [r0, #2]
 80128cc:	70c1      	strb	r1, [r0, #3]
 80128ce:	1d03      	adds	r3, r0, #4
 80128d0:	e7f1      	b.n	80128b6 <__exponent+0x58>
	...

080128d4 <_printf_float>:
 80128d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128d8:	b08d      	sub	sp, #52	@ 0x34
 80128da:	460c      	mov	r4, r1
 80128dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80128e0:	4616      	mov	r6, r2
 80128e2:	461f      	mov	r7, r3
 80128e4:	4605      	mov	r5, r0
 80128e6:	f000 fdf3 	bl	80134d0 <_localeconv_r>
 80128ea:	6803      	ldr	r3, [r0, #0]
 80128ec:	9304      	str	r3, [sp, #16]
 80128ee:	4618      	mov	r0, r3
 80128f0:	f7ed fcde 	bl	80002b0 <strlen>
 80128f4:	2300      	movs	r3, #0
 80128f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80128f8:	f8d8 3000 	ldr.w	r3, [r8]
 80128fc:	9005      	str	r0, [sp, #20]
 80128fe:	3307      	adds	r3, #7
 8012900:	f023 0307 	bic.w	r3, r3, #7
 8012904:	f103 0208 	add.w	r2, r3, #8
 8012908:	f894 a018 	ldrb.w	sl, [r4, #24]
 801290c:	f8d4 b000 	ldr.w	fp, [r4]
 8012910:	f8c8 2000 	str.w	r2, [r8]
 8012914:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012918:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801291c:	9307      	str	r3, [sp, #28]
 801291e:	f8cd 8018 	str.w	r8, [sp, #24]
 8012922:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801292a:	4b9c      	ldr	r3, [pc, #624]	@ (8012b9c <_printf_float+0x2c8>)
 801292c:	f04f 32ff 	mov.w	r2, #4294967295
 8012930:	f7ee f91c 	bl	8000b6c <__aeabi_dcmpun>
 8012934:	bb70      	cbnz	r0, 8012994 <_printf_float+0xc0>
 8012936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801293a:	4b98      	ldr	r3, [pc, #608]	@ (8012b9c <_printf_float+0x2c8>)
 801293c:	f04f 32ff 	mov.w	r2, #4294967295
 8012940:	f7ee f8f6 	bl	8000b30 <__aeabi_dcmple>
 8012944:	bb30      	cbnz	r0, 8012994 <_printf_float+0xc0>
 8012946:	2200      	movs	r2, #0
 8012948:	2300      	movs	r3, #0
 801294a:	4640      	mov	r0, r8
 801294c:	4649      	mov	r1, r9
 801294e:	f7ee f8e5 	bl	8000b1c <__aeabi_dcmplt>
 8012952:	b110      	cbz	r0, 801295a <_printf_float+0x86>
 8012954:	232d      	movs	r3, #45	@ 0x2d
 8012956:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801295a:	4a91      	ldr	r2, [pc, #580]	@ (8012ba0 <_printf_float+0x2cc>)
 801295c:	4b91      	ldr	r3, [pc, #580]	@ (8012ba4 <_printf_float+0x2d0>)
 801295e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012962:	bf8c      	ite	hi
 8012964:	4690      	movhi	r8, r2
 8012966:	4698      	movls	r8, r3
 8012968:	2303      	movs	r3, #3
 801296a:	6123      	str	r3, [r4, #16]
 801296c:	f02b 0304 	bic.w	r3, fp, #4
 8012970:	6023      	str	r3, [r4, #0]
 8012972:	f04f 0900 	mov.w	r9, #0
 8012976:	9700      	str	r7, [sp, #0]
 8012978:	4633      	mov	r3, r6
 801297a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801297c:	4621      	mov	r1, r4
 801297e:	4628      	mov	r0, r5
 8012980:	f000 f9d2 	bl	8012d28 <_printf_common>
 8012984:	3001      	adds	r0, #1
 8012986:	f040 808d 	bne.w	8012aa4 <_printf_float+0x1d0>
 801298a:	f04f 30ff 	mov.w	r0, #4294967295
 801298e:	b00d      	add	sp, #52	@ 0x34
 8012990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012994:	4642      	mov	r2, r8
 8012996:	464b      	mov	r3, r9
 8012998:	4640      	mov	r0, r8
 801299a:	4649      	mov	r1, r9
 801299c:	f7ee f8e6 	bl	8000b6c <__aeabi_dcmpun>
 80129a0:	b140      	cbz	r0, 80129b4 <_printf_float+0xe0>
 80129a2:	464b      	mov	r3, r9
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	bfbc      	itt	lt
 80129a8:	232d      	movlt	r3, #45	@ 0x2d
 80129aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80129ae:	4a7e      	ldr	r2, [pc, #504]	@ (8012ba8 <_printf_float+0x2d4>)
 80129b0:	4b7e      	ldr	r3, [pc, #504]	@ (8012bac <_printf_float+0x2d8>)
 80129b2:	e7d4      	b.n	801295e <_printf_float+0x8a>
 80129b4:	6863      	ldr	r3, [r4, #4]
 80129b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80129ba:	9206      	str	r2, [sp, #24]
 80129bc:	1c5a      	adds	r2, r3, #1
 80129be:	d13b      	bne.n	8012a38 <_printf_float+0x164>
 80129c0:	2306      	movs	r3, #6
 80129c2:	6063      	str	r3, [r4, #4]
 80129c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80129c8:	2300      	movs	r3, #0
 80129ca:	6022      	str	r2, [r4, #0]
 80129cc:	9303      	str	r3, [sp, #12]
 80129ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80129d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80129d4:	ab09      	add	r3, sp, #36	@ 0x24
 80129d6:	9300      	str	r3, [sp, #0]
 80129d8:	6861      	ldr	r1, [r4, #4]
 80129da:	ec49 8b10 	vmov	d0, r8, r9
 80129de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80129e2:	4628      	mov	r0, r5
 80129e4:	f7ff fed6 	bl	8012794 <__cvt>
 80129e8:	9b06      	ldr	r3, [sp, #24]
 80129ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80129ec:	2b47      	cmp	r3, #71	@ 0x47
 80129ee:	4680      	mov	r8, r0
 80129f0:	d129      	bne.n	8012a46 <_printf_float+0x172>
 80129f2:	1cc8      	adds	r0, r1, #3
 80129f4:	db02      	blt.n	80129fc <_printf_float+0x128>
 80129f6:	6863      	ldr	r3, [r4, #4]
 80129f8:	4299      	cmp	r1, r3
 80129fa:	dd41      	ble.n	8012a80 <_printf_float+0x1ac>
 80129fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8012a00:	fa5f fa8a 	uxtb.w	sl, sl
 8012a04:	3901      	subs	r1, #1
 8012a06:	4652      	mov	r2, sl
 8012a08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012a0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8012a0e:	f7ff ff26 	bl	801285e <__exponent>
 8012a12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012a14:	1813      	adds	r3, r2, r0
 8012a16:	2a01      	cmp	r2, #1
 8012a18:	4681      	mov	r9, r0
 8012a1a:	6123      	str	r3, [r4, #16]
 8012a1c:	dc02      	bgt.n	8012a24 <_printf_float+0x150>
 8012a1e:	6822      	ldr	r2, [r4, #0]
 8012a20:	07d2      	lsls	r2, r2, #31
 8012a22:	d501      	bpl.n	8012a28 <_printf_float+0x154>
 8012a24:	3301      	adds	r3, #1
 8012a26:	6123      	str	r3, [r4, #16]
 8012a28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d0a2      	beq.n	8012976 <_printf_float+0xa2>
 8012a30:	232d      	movs	r3, #45	@ 0x2d
 8012a32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a36:	e79e      	b.n	8012976 <_printf_float+0xa2>
 8012a38:	9a06      	ldr	r2, [sp, #24]
 8012a3a:	2a47      	cmp	r2, #71	@ 0x47
 8012a3c:	d1c2      	bne.n	80129c4 <_printf_float+0xf0>
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d1c0      	bne.n	80129c4 <_printf_float+0xf0>
 8012a42:	2301      	movs	r3, #1
 8012a44:	e7bd      	b.n	80129c2 <_printf_float+0xee>
 8012a46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012a4a:	d9db      	bls.n	8012a04 <_printf_float+0x130>
 8012a4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012a50:	d118      	bne.n	8012a84 <_printf_float+0x1b0>
 8012a52:	2900      	cmp	r1, #0
 8012a54:	6863      	ldr	r3, [r4, #4]
 8012a56:	dd0b      	ble.n	8012a70 <_printf_float+0x19c>
 8012a58:	6121      	str	r1, [r4, #16]
 8012a5a:	b913      	cbnz	r3, 8012a62 <_printf_float+0x18e>
 8012a5c:	6822      	ldr	r2, [r4, #0]
 8012a5e:	07d0      	lsls	r0, r2, #31
 8012a60:	d502      	bpl.n	8012a68 <_printf_float+0x194>
 8012a62:	3301      	adds	r3, #1
 8012a64:	440b      	add	r3, r1
 8012a66:	6123      	str	r3, [r4, #16]
 8012a68:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012a6a:	f04f 0900 	mov.w	r9, #0
 8012a6e:	e7db      	b.n	8012a28 <_printf_float+0x154>
 8012a70:	b913      	cbnz	r3, 8012a78 <_printf_float+0x1a4>
 8012a72:	6822      	ldr	r2, [r4, #0]
 8012a74:	07d2      	lsls	r2, r2, #31
 8012a76:	d501      	bpl.n	8012a7c <_printf_float+0x1a8>
 8012a78:	3302      	adds	r3, #2
 8012a7a:	e7f4      	b.n	8012a66 <_printf_float+0x192>
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	e7f2      	b.n	8012a66 <_printf_float+0x192>
 8012a80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a86:	4299      	cmp	r1, r3
 8012a88:	db05      	blt.n	8012a96 <_printf_float+0x1c2>
 8012a8a:	6823      	ldr	r3, [r4, #0]
 8012a8c:	6121      	str	r1, [r4, #16]
 8012a8e:	07d8      	lsls	r0, r3, #31
 8012a90:	d5ea      	bpl.n	8012a68 <_printf_float+0x194>
 8012a92:	1c4b      	adds	r3, r1, #1
 8012a94:	e7e7      	b.n	8012a66 <_printf_float+0x192>
 8012a96:	2900      	cmp	r1, #0
 8012a98:	bfd4      	ite	le
 8012a9a:	f1c1 0202 	rsble	r2, r1, #2
 8012a9e:	2201      	movgt	r2, #1
 8012aa0:	4413      	add	r3, r2
 8012aa2:	e7e0      	b.n	8012a66 <_printf_float+0x192>
 8012aa4:	6823      	ldr	r3, [r4, #0]
 8012aa6:	055a      	lsls	r2, r3, #21
 8012aa8:	d407      	bmi.n	8012aba <_printf_float+0x1e6>
 8012aaa:	6923      	ldr	r3, [r4, #16]
 8012aac:	4642      	mov	r2, r8
 8012aae:	4631      	mov	r1, r6
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	47b8      	blx	r7
 8012ab4:	3001      	adds	r0, #1
 8012ab6:	d12b      	bne.n	8012b10 <_printf_float+0x23c>
 8012ab8:	e767      	b.n	801298a <_printf_float+0xb6>
 8012aba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012abe:	f240 80dd 	bls.w	8012c7c <_printf_float+0x3a8>
 8012ac2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	2300      	movs	r3, #0
 8012aca:	f7ee f81d 	bl	8000b08 <__aeabi_dcmpeq>
 8012ace:	2800      	cmp	r0, #0
 8012ad0:	d033      	beq.n	8012b3a <_printf_float+0x266>
 8012ad2:	4a37      	ldr	r2, [pc, #220]	@ (8012bb0 <_printf_float+0x2dc>)
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	4631      	mov	r1, r6
 8012ad8:	4628      	mov	r0, r5
 8012ada:	47b8      	blx	r7
 8012adc:	3001      	adds	r0, #1
 8012ade:	f43f af54 	beq.w	801298a <_printf_float+0xb6>
 8012ae2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012ae6:	4543      	cmp	r3, r8
 8012ae8:	db02      	blt.n	8012af0 <_printf_float+0x21c>
 8012aea:	6823      	ldr	r3, [r4, #0]
 8012aec:	07d8      	lsls	r0, r3, #31
 8012aee:	d50f      	bpl.n	8012b10 <_printf_float+0x23c>
 8012af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012af4:	4631      	mov	r1, r6
 8012af6:	4628      	mov	r0, r5
 8012af8:	47b8      	blx	r7
 8012afa:	3001      	adds	r0, #1
 8012afc:	f43f af45 	beq.w	801298a <_printf_float+0xb6>
 8012b00:	f04f 0900 	mov.w	r9, #0
 8012b04:	f108 38ff 	add.w	r8, r8, #4294967295
 8012b08:	f104 0a1a 	add.w	sl, r4, #26
 8012b0c:	45c8      	cmp	r8, r9
 8012b0e:	dc09      	bgt.n	8012b24 <_printf_float+0x250>
 8012b10:	6823      	ldr	r3, [r4, #0]
 8012b12:	079b      	lsls	r3, r3, #30
 8012b14:	f100 8103 	bmi.w	8012d1e <_printf_float+0x44a>
 8012b18:	68e0      	ldr	r0, [r4, #12]
 8012b1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b1c:	4298      	cmp	r0, r3
 8012b1e:	bfb8      	it	lt
 8012b20:	4618      	movlt	r0, r3
 8012b22:	e734      	b.n	801298e <_printf_float+0xba>
 8012b24:	2301      	movs	r3, #1
 8012b26:	4652      	mov	r2, sl
 8012b28:	4631      	mov	r1, r6
 8012b2a:	4628      	mov	r0, r5
 8012b2c:	47b8      	blx	r7
 8012b2e:	3001      	adds	r0, #1
 8012b30:	f43f af2b 	beq.w	801298a <_printf_float+0xb6>
 8012b34:	f109 0901 	add.w	r9, r9, #1
 8012b38:	e7e8      	b.n	8012b0c <_printf_float+0x238>
 8012b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	dc39      	bgt.n	8012bb4 <_printf_float+0x2e0>
 8012b40:	4a1b      	ldr	r2, [pc, #108]	@ (8012bb0 <_printf_float+0x2dc>)
 8012b42:	2301      	movs	r3, #1
 8012b44:	4631      	mov	r1, r6
 8012b46:	4628      	mov	r0, r5
 8012b48:	47b8      	blx	r7
 8012b4a:	3001      	adds	r0, #1
 8012b4c:	f43f af1d 	beq.w	801298a <_printf_float+0xb6>
 8012b50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012b54:	ea59 0303 	orrs.w	r3, r9, r3
 8012b58:	d102      	bne.n	8012b60 <_printf_float+0x28c>
 8012b5a:	6823      	ldr	r3, [r4, #0]
 8012b5c:	07d9      	lsls	r1, r3, #31
 8012b5e:	d5d7      	bpl.n	8012b10 <_printf_float+0x23c>
 8012b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b64:	4631      	mov	r1, r6
 8012b66:	4628      	mov	r0, r5
 8012b68:	47b8      	blx	r7
 8012b6a:	3001      	adds	r0, #1
 8012b6c:	f43f af0d 	beq.w	801298a <_printf_float+0xb6>
 8012b70:	f04f 0a00 	mov.w	sl, #0
 8012b74:	f104 0b1a 	add.w	fp, r4, #26
 8012b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b7a:	425b      	negs	r3, r3
 8012b7c:	4553      	cmp	r3, sl
 8012b7e:	dc01      	bgt.n	8012b84 <_printf_float+0x2b0>
 8012b80:	464b      	mov	r3, r9
 8012b82:	e793      	b.n	8012aac <_printf_float+0x1d8>
 8012b84:	2301      	movs	r3, #1
 8012b86:	465a      	mov	r2, fp
 8012b88:	4631      	mov	r1, r6
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	47b8      	blx	r7
 8012b8e:	3001      	adds	r0, #1
 8012b90:	f43f aefb 	beq.w	801298a <_printf_float+0xb6>
 8012b94:	f10a 0a01 	add.w	sl, sl, #1
 8012b98:	e7ee      	b.n	8012b78 <_printf_float+0x2a4>
 8012b9a:	bf00      	nop
 8012b9c:	7fefffff 	.word	0x7fefffff
 8012ba0:	080169e8 	.word	0x080169e8
 8012ba4:	080169e4 	.word	0x080169e4
 8012ba8:	080169f0 	.word	0x080169f0
 8012bac:	080169ec 	.word	0x080169ec
 8012bb0:	080169f4 	.word	0x080169f4
 8012bb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012bb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012bba:	4553      	cmp	r3, sl
 8012bbc:	bfa8      	it	ge
 8012bbe:	4653      	movge	r3, sl
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	4699      	mov	r9, r3
 8012bc4:	dc36      	bgt.n	8012c34 <_printf_float+0x360>
 8012bc6:	f04f 0b00 	mov.w	fp, #0
 8012bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012bce:	f104 021a 	add.w	r2, r4, #26
 8012bd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012bd4:	9306      	str	r3, [sp, #24]
 8012bd6:	eba3 0309 	sub.w	r3, r3, r9
 8012bda:	455b      	cmp	r3, fp
 8012bdc:	dc31      	bgt.n	8012c42 <_printf_float+0x36e>
 8012bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012be0:	459a      	cmp	sl, r3
 8012be2:	dc3a      	bgt.n	8012c5a <_printf_float+0x386>
 8012be4:	6823      	ldr	r3, [r4, #0]
 8012be6:	07da      	lsls	r2, r3, #31
 8012be8:	d437      	bmi.n	8012c5a <_printf_float+0x386>
 8012bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bec:	ebaa 0903 	sub.w	r9, sl, r3
 8012bf0:	9b06      	ldr	r3, [sp, #24]
 8012bf2:	ebaa 0303 	sub.w	r3, sl, r3
 8012bf6:	4599      	cmp	r9, r3
 8012bf8:	bfa8      	it	ge
 8012bfa:	4699      	movge	r9, r3
 8012bfc:	f1b9 0f00 	cmp.w	r9, #0
 8012c00:	dc33      	bgt.n	8012c6a <_printf_float+0x396>
 8012c02:	f04f 0800 	mov.w	r8, #0
 8012c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c0a:	f104 0b1a 	add.w	fp, r4, #26
 8012c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c10:	ebaa 0303 	sub.w	r3, sl, r3
 8012c14:	eba3 0309 	sub.w	r3, r3, r9
 8012c18:	4543      	cmp	r3, r8
 8012c1a:	f77f af79 	ble.w	8012b10 <_printf_float+0x23c>
 8012c1e:	2301      	movs	r3, #1
 8012c20:	465a      	mov	r2, fp
 8012c22:	4631      	mov	r1, r6
 8012c24:	4628      	mov	r0, r5
 8012c26:	47b8      	blx	r7
 8012c28:	3001      	adds	r0, #1
 8012c2a:	f43f aeae 	beq.w	801298a <_printf_float+0xb6>
 8012c2e:	f108 0801 	add.w	r8, r8, #1
 8012c32:	e7ec      	b.n	8012c0e <_printf_float+0x33a>
 8012c34:	4642      	mov	r2, r8
 8012c36:	4631      	mov	r1, r6
 8012c38:	4628      	mov	r0, r5
 8012c3a:	47b8      	blx	r7
 8012c3c:	3001      	adds	r0, #1
 8012c3e:	d1c2      	bne.n	8012bc6 <_printf_float+0x2f2>
 8012c40:	e6a3      	b.n	801298a <_printf_float+0xb6>
 8012c42:	2301      	movs	r3, #1
 8012c44:	4631      	mov	r1, r6
 8012c46:	4628      	mov	r0, r5
 8012c48:	9206      	str	r2, [sp, #24]
 8012c4a:	47b8      	blx	r7
 8012c4c:	3001      	adds	r0, #1
 8012c4e:	f43f ae9c 	beq.w	801298a <_printf_float+0xb6>
 8012c52:	9a06      	ldr	r2, [sp, #24]
 8012c54:	f10b 0b01 	add.w	fp, fp, #1
 8012c58:	e7bb      	b.n	8012bd2 <_printf_float+0x2fe>
 8012c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c5e:	4631      	mov	r1, r6
 8012c60:	4628      	mov	r0, r5
 8012c62:	47b8      	blx	r7
 8012c64:	3001      	adds	r0, #1
 8012c66:	d1c0      	bne.n	8012bea <_printf_float+0x316>
 8012c68:	e68f      	b.n	801298a <_printf_float+0xb6>
 8012c6a:	9a06      	ldr	r2, [sp, #24]
 8012c6c:	464b      	mov	r3, r9
 8012c6e:	4442      	add	r2, r8
 8012c70:	4631      	mov	r1, r6
 8012c72:	4628      	mov	r0, r5
 8012c74:	47b8      	blx	r7
 8012c76:	3001      	adds	r0, #1
 8012c78:	d1c3      	bne.n	8012c02 <_printf_float+0x32e>
 8012c7a:	e686      	b.n	801298a <_printf_float+0xb6>
 8012c7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012c80:	f1ba 0f01 	cmp.w	sl, #1
 8012c84:	dc01      	bgt.n	8012c8a <_printf_float+0x3b6>
 8012c86:	07db      	lsls	r3, r3, #31
 8012c88:	d536      	bpl.n	8012cf8 <_printf_float+0x424>
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	4642      	mov	r2, r8
 8012c8e:	4631      	mov	r1, r6
 8012c90:	4628      	mov	r0, r5
 8012c92:	47b8      	blx	r7
 8012c94:	3001      	adds	r0, #1
 8012c96:	f43f ae78 	beq.w	801298a <_printf_float+0xb6>
 8012c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c9e:	4631      	mov	r1, r6
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	47b8      	blx	r7
 8012ca4:	3001      	adds	r0, #1
 8012ca6:	f43f ae70 	beq.w	801298a <_printf_float+0xb6>
 8012caa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012cae:	2200      	movs	r2, #0
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012cb6:	f7ed ff27 	bl	8000b08 <__aeabi_dcmpeq>
 8012cba:	b9c0      	cbnz	r0, 8012cee <_printf_float+0x41a>
 8012cbc:	4653      	mov	r3, sl
 8012cbe:	f108 0201 	add.w	r2, r8, #1
 8012cc2:	4631      	mov	r1, r6
 8012cc4:	4628      	mov	r0, r5
 8012cc6:	47b8      	blx	r7
 8012cc8:	3001      	adds	r0, #1
 8012cca:	d10c      	bne.n	8012ce6 <_printf_float+0x412>
 8012ccc:	e65d      	b.n	801298a <_printf_float+0xb6>
 8012cce:	2301      	movs	r3, #1
 8012cd0:	465a      	mov	r2, fp
 8012cd2:	4631      	mov	r1, r6
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	47b8      	blx	r7
 8012cd8:	3001      	adds	r0, #1
 8012cda:	f43f ae56 	beq.w	801298a <_printf_float+0xb6>
 8012cde:	f108 0801 	add.w	r8, r8, #1
 8012ce2:	45d0      	cmp	r8, sl
 8012ce4:	dbf3      	blt.n	8012cce <_printf_float+0x3fa>
 8012ce6:	464b      	mov	r3, r9
 8012ce8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012cec:	e6df      	b.n	8012aae <_printf_float+0x1da>
 8012cee:	f04f 0800 	mov.w	r8, #0
 8012cf2:	f104 0b1a 	add.w	fp, r4, #26
 8012cf6:	e7f4      	b.n	8012ce2 <_printf_float+0x40e>
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	4642      	mov	r2, r8
 8012cfc:	e7e1      	b.n	8012cc2 <_printf_float+0x3ee>
 8012cfe:	2301      	movs	r3, #1
 8012d00:	464a      	mov	r2, r9
 8012d02:	4631      	mov	r1, r6
 8012d04:	4628      	mov	r0, r5
 8012d06:	47b8      	blx	r7
 8012d08:	3001      	adds	r0, #1
 8012d0a:	f43f ae3e 	beq.w	801298a <_printf_float+0xb6>
 8012d0e:	f108 0801 	add.w	r8, r8, #1
 8012d12:	68e3      	ldr	r3, [r4, #12]
 8012d14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012d16:	1a5b      	subs	r3, r3, r1
 8012d18:	4543      	cmp	r3, r8
 8012d1a:	dcf0      	bgt.n	8012cfe <_printf_float+0x42a>
 8012d1c:	e6fc      	b.n	8012b18 <_printf_float+0x244>
 8012d1e:	f04f 0800 	mov.w	r8, #0
 8012d22:	f104 0919 	add.w	r9, r4, #25
 8012d26:	e7f4      	b.n	8012d12 <_printf_float+0x43e>

08012d28 <_printf_common>:
 8012d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d2c:	4616      	mov	r6, r2
 8012d2e:	4698      	mov	r8, r3
 8012d30:	688a      	ldr	r2, [r1, #8]
 8012d32:	690b      	ldr	r3, [r1, #16]
 8012d34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012d38:	4293      	cmp	r3, r2
 8012d3a:	bfb8      	it	lt
 8012d3c:	4613      	movlt	r3, r2
 8012d3e:	6033      	str	r3, [r6, #0]
 8012d40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012d44:	4607      	mov	r7, r0
 8012d46:	460c      	mov	r4, r1
 8012d48:	b10a      	cbz	r2, 8012d4e <_printf_common+0x26>
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	6033      	str	r3, [r6, #0]
 8012d4e:	6823      	ldr	r3, [r4, #0]
 8012d50:	0699      	lsls	r1, r3, #26
 8012d52:	bf42      	ittt	mi
 8012d54:	6833      	ldrmi	r3, [r6, #0]
 8012d56:	3302      	addmi	r3, #2
 8012d58:	6033      	strmi	r3, [r6, #0]
 8012d5a:	6825      	ldr	r5, [r4, #0]
 8012d5c:	f015 0506 	ands.w	r5, r5, #6
 8012d60:	d106      	bne.n	8012d70 <_printf_common+0x48>
 8012d62:	f104 0a19 	add.w	sl, r4, #25
 8012d66:	68e3      	ldr	r3, [r4, #12]
 8012d68:	6832      	ldr	r2, [r6, #0]
 8012d6a:	1a9b      	subs	r3, r3, r2
 8012d6c:	42ab      	cmp	r3, r5
 8012d6e:	dc26      	bgt.n	8012dbe <_printf_common+0x96>
 8012d70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012d74:	6822      	ldr	r2, [r4, #0]
 8012d76:	3b00      	subs	r3, #0
 8012d78:	bf18      	it	ne
 8012d7a:	2301      	movne	r3, #1
 8012d7c:	0692      	lsls	r2, r2, #26
 8012d7e:	d42b      	bmi.n	8012dd8 <_printf_common+0xb0>
 8012d80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012d84:	4641      	mov	r1, r8
 8012d86:	4638      	mov	r0, r7
 8012d88:	47c8      	blx	r9
 8012d8a:	3001      	adds	r0, #1
 8012d8c:	d01e      	beq.n	8012dcc <_printf_common+0xa4>
 8012d8e:	6823      	ldr	r3, [r4, #0]
 8012d90:	6922      	ldr	r2, [r4, #16]
 8012d92:	f003 0306 	and.w	r3, r3, #6
 8012d96:	2b04      	cmp	r3, #4
 8012d98:	bf02      	ittt	eq
 8012d9a:	68e5      	ldreq	r5, [r4, #12]
 8012d9c:	6833      	ldreq	r3, [r6, #0]
 8012d9e:	1aed      	subeq	r5, r5, r3
 8012da0:	68a3      	ldr	r3, [r4, #8]
 8012da2:	bf0c      	ite	eq
 8012da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012da8:	2500      	movne	r5, #0
 8012daa:	4293      	cmp	r3, r2
 8012dac:	bfc4      	itt	gt
 8012dae:	1a9b      	subgt	r3, r3, r2
 8012db0:	18ed      	addgt	r5, r5, r3
 8012db2:	2600      	movs	r6, #0
 8012db4:	341a      	adds	r4, #26
 8012db6:	42b5      	cmp	r5, r6
 8012db8:	d11a      	bne.n	8012df0 <_printf_common+0xc8>
 8012dba:	2000      	movs	r0, #0
 8012dbc:	e008      	b.n	8012dd0 <_printf_common+0xa8>
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	4652      	mov	r2, sl
 8012dc2:	4641      	mov	r1, r8
 8012dc4:	4638      	mov	r0, r7
 8012dc6:	47c8      	blx	r9
 8012dc8:	3001      	adds	r0, #1
 8012dca:	d103      	bne.n	8012dd4 <_printf_common+0xac>
 8012dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8012dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dd4:	3501      	adds	r5, #1
 8012dd6:	e7c6      	b.n	8012d66 <_printf_common+0x3e>
 8012dd8:	18e1      	adds	r1, r4, r3
 8012dda:	1c5a      	adds	r2, r3, #1
 8012ddc:	2030      	movs	r0, #48	@ 0x30
 8012dde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012de2:	4422      	add	r2, r4
 8012de4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012de8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012dec:	3302      	adds	r3, #2
 8012dee:	e7c7      	b.n	8012d80 <_printf_common+0x58>
 8012df0:	2301      	movs	r3, #1
 8012df2:	4622      	mov	r2, r4
 8012df4:	4641      	mov	r1, r8
 8012df6:	4638      	mov	r0, r7
 8012df8:	47c8      	blx	r9
 8012dfa:	3001      	adds	r0, #1
 8012dfc:	d0e6      	beq.n	8012dcc <_printf_common+0xa4>
 8012dfe:	3601      	adds	r6, #1
 8012e00:	e7d9      	b.n	8012db6 <_printf_common+0x8e>
	...

08012e04 <_printf_i>:
 8012e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e08:	7e0f      	ldrb	r7, [r1, #24]
 8012e0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012e0c:	2f78      	cmp	r7, #120	@ 0x78
 8012e0e:	4691      	mov	r9, r2
 8012e10:	4680      	mov	r8, r0
 8012e12:	460c      	mov	r4, r1
 8012e14:	469a      	mov	sl, r3
 8012e16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012e1a:	d807      	bhi.n	8012e2c <_printf_i+0x28>
 8012e1c:	2f62      	cmp	r7, #98	@ 0x62
 8012e1e:	d80a      	bhi.n	8012e36 <_printf_i+0x32>
 8012e20:	2f00      	cmp	r7, #0
 8012e22:	f000 80d1 	beq.w	8012fc8 <_printf_i+0x1c4>
 8012e26:	2f58      	cmp	r7, #88	@ 0x58
 8012e28:	f000 80b8 	beq.w	8012f9c <_printf_i+0x198>
 8012e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012e30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012e34:	e03a      	b.n	8012eac <_printf_i+0xa8>
 8012e36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012e3a:	2b15      	cmp	r3, #21
 8012e3c:	d8f6      	bhi.n	8012e2c <_printf_i+0x28>
 8012e3e:	a101      	add	r1, pc, #4	@ (adr r1, 8012e44 <_printf_i+0x40>)
 8012e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012e44:	08012e9d 	.word	0x08012e9d
 8012e48:	08012eb1 	.word	0x08012eb1
 8012e4c:	08012e2d 	.word	0x08012e2d
 8012e50:	08012e2d 	.word	0x08012e2d
 8012e54:	08012e2d 	.word	0x08012e2d
 8012e58:	08012e2d 	.word	0x08012e2d
 8012e5c:	08012eb1 	.word	0x08012eb1
 8012e60:	08012e2d 	.word	0x08012e2d
 8012e64:	08012e2d 	.word	0x08012e2d
 8012e68:	08012e2d 	.word	0x08012e2d
 8012e6c:	08012e2d 	.word	0x08012e2d
 8012e70:	08012faf 	.word	0x08012faf
 8012e74:	08012edb 	.word	0x08012edb
 8012e78:	08012f69 	.word	0x08012f69
 8012e7c:	08012e2d 	.word	0x08012e2d
 8012e80:	08012e2d 	.word	0x08012e2d
 8012e84:	08012fd1 	.word	0x08012fd1
 8012e88:	08012e2d 	.word	0x08012e2d
 8012e8c:	08012edb 	.word	0x08012edb
 8012e90:	08012e2d 	.word	0x08012e2d
 8012e94:	08012e2d 	.word	0x08012e2d
 8012e98:	08012f71 	.word	0x08012f71
 8012e9c:	6833      	ldr	r3, [r6, #0]
 8012e9e:	1d1a      	adds	r2, r3, #4
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	6032      	str	r2, [r6, #0]
 8012ea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ea8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012eac:	2301      	movs	r3, #1
 8012eae:	e09c      	b.n	8012fea <_printf_i+0x1e6>
 8012eb0:	6833      	ldr	r3, [r6, #0]
 8012eb2:	6820      	ldr	r0, [r4, #0]
 8012eb4:	1d19      	adds	r1, r3, #4
 8012eb6:	6031      	str	r1, [r6, #0]
 8012eb8:	0606      	lsls	r6, r0, #24
 8012eba:	d501      	bpl.n	8012ec0 <_printf_i+0xbc>
 8012ebc:	681d      	ldr	r5, [r3, #0]
 8012ebe:	e003      	b.n	8012ec8 <_printf_i+0xc4>
 8012ec0:	0645      	lsls	r5, r0, #25
 8012ec2:	d5fb      	bpl.n	8012ebc <_printf_i+0xb8>
 8012ec4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012ec8:	2d00      	cmp	r5, #0
 8012eca:	da03      	bge.n	8012ed4 <_printf_i+0xd0>
 8012ecc:	232d      	movs	r3, #45	@ 0x2d
 8012ece:	426d      	negs	r5, r5
 8012ed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ed4:	4858      	ldr	r0, [pc, #352]	@ (8013038 <_printf_i+0x234>)
 8012ed6:	230a      	movs	r3, #10
 8012ed8:	e011      	b.n	8012efe <_printf_i+0xfa>
 8012eda:	6821      	ldr	r1, [r4, #0]
 8012edc:	6833      	ldr	r3, [r6, #0]
 8012ede:	0608      	lsls	r0, r1, #24
 8012ee0:	f853 5b04 	ldr.w	r5, [r3], #4
 8012ee4:	d402      	bmi.n	8012eec <_printf_i+0xe8>
 8012ee6:	0649      	lsls	r1, r1, #25
 8012ee8:	bf48      	it	mi
 8012eea:	b2ad      	uxthmi	r5, r5
 8012eec:	2f6f      	cmp	r7, #111	@ 0x6f
 8012eee:	4852      	ldr	r0, [pc, #328]	@ (8013038 <_printf_i+0x234>)
 8012ef0:	6033      	str	r3, [r6, #0]
 8012ef2:	bf14      	ite	ne
 8012ef4:	230a      	movne	r3, #10
 8012ef6:	2308      	moveq	r3, #8
 8012ef8:	2100      	movs	r1, #0
 8012efa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012efe:	6866      	ldr	r6, [r4, #4]
 8012f00:	60a6      	str	r6, [r4, #8]
 8012f02:	2e00      	cmp	r6, #0
 8012f04:	db05      	blt.n	8012f12 <_printf_i+0x10e>
 8012f06:	6821      	ldr	r1, [r4, #0]
 8012f08:	432e      	orrs	r6, r5
 8012f0a:	f021 0104 	bic.w	r1, r1, #4
 8012f0e:	6021      	str	r1, [r4, #0]
 8012f10:	d04b      	beq.n	8012faa <_printf_i+0x1a6>
 8012f12:	4616      	mov	r6, r2
 8012f14:	fbb5 f1f3 	udiv	r1, r5, r3
 8012f18:	fb03 5711 	mls	r7, r3, r1, r5
 8012f1c:	5dc7      	ldrb	r7, [r0, r7]
 8012f1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012f22:	462f      	mov	r7, r5
 8012f24:	42bb      	cmp	r3, r7
 8012f26:	460d      	mov	r5, r1
 8012f28:	d9f4      	bls.n	8012f14 <_printf_i+0x110>
 8012f2a:	2b08      	cmp	r3, #8
 8012f2c:	d10b      	bne.n	8012f46 <_printf_i+0x142>
 8012f2e:	6823      	ldr	r3, [r4, #0]
 8012f30:	07df      	lsls	r7, r3, #31
 8012f32:	d508      	bpl.n	8012f46 <_printf_i+0x142>
 8012f34:	6923      	ldr	r3, [r4, #16]
 8012f36:	6861      	ldr	r1, [r4, #4]
 8012f38:	4299      	cmp	r1, r3
 8012f3a:	bfde      	ittt	le
 8012f3c:	2330      	movle	r3, #48	@ 0x30
 8012f3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012f42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012f46:	1b92      	subs	r2, r2, r6
 8012f48:	6122      	str	r2, [r4, #16]
 8012f4a:	f8cd a000 	str.w	sl, [sp]
 8012f4e:	464b      	mov	r3, r9
 8012f50:	aa03      	add	r2, sp, #12
 8012f52:	4621      	mov	r1, r4
 8012f54:	4640      	mov	r0, r8
 8012f56:	f7ff fee7 	bl	8012d28 <_printf_common>
 8012f5a:	3001      	adds	r0, #1
 8012f5c:	d14a      	bne.n	8012ff4 <_printf_i+0x1f0>
 8012f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f62:	b004      	add	sp, #16
 8012f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f68:	6823      	ldr	r3, [r4, #0]
 8012f6a:	f043 0320 	orr.w	r3, r3, #32
 8012f6e:	6023      	str	r3, [r4, #0]
 8012f70:	4832      	ldr	r0, [pc, #200]	@ (801303c <_printf_i+0x238>)
 8012f72:	2778      	movs	r7, #120	@ 0x78
 8012f74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012f78:	6823      	ldr	r3, [r4, #0]
 8012f7a:	6831      	ldr	r1, [r6, #0]
 8012f7c:	061f      	lsls	r7, r3, #24
 8012f7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8012f82:	d402      	bmi.n	8012f8a <_printf_i+0x186>
 8012f84:	065f      	lsls	r7, r3, #25
 8012f86:	bf48      	it	mi
 8012f88:	b2ad      	uxthmi	r5, r5
 8012f8a:	6031      	str	r1, [r6, #0]
 8012f8c:	07d9      	lsls	r1, r3, #31
 8012f8e:	bf44      	itt	mi
 8012f90:	f043 0320 	orrmi.w	r3, r3, #32
 8012f94:	6023      	strmi	r3, [r4, #0]
 8012f96:	b11d      	cbz	r5, 8012fa0 <_printf_i+0x19c>
 8012f98:	2310      	movs	r3, #16
 8012f9a:	e7ad      	b.n	8012ef8 <_printf_i+0xf4>
 8012f9c:	4826      	ldr	r0, [pc, #152]	@ (8013038 <_printf_i+0x234>)
 8012f9e:	e7e9      	b.n	8012f74 <_printf_i+0x170>
 8012fa0:	6823      	ldr	r3, [r4, #0]
 8012fa2:	f023 0320 	bic.w	r3, r3, #32
 8012fa6:	6023      	str	r3, [r4, #0]
 8012fa8:	e7f6      	b.n	8012f98 <_printf_i+0x194>
 8012faa:	4616      	mov	r6, r2
 8012fac:	e7bd      	b.n	8012f2a <_printf_i+0x126>
 8012fae:	6833      	ldr	r3, [r6, #0]
 8012fb0:	6825      	ldr	r5, [r4, #0]
 8012fb2:	6961      	ldr	r1, [r4, #20]
 8012fb4:	1d18      	adds	r0, r3, #4
 8012fb6:	6030      	str	r0, [r6, #0]
 8012fb8:	062e      	lsls	r6, r5, #24
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	d501      	bpl.n	8012fc2 <_printf_i+0x1be>
 8012fbe:	6019      	str	r1, [r3, #0]
 8012fc0:	e002      	b.n	8012fc8 <_printf_i+0x1c4>
 8012fc2:	0668      	lsls	r0, r5, #25
 8012fc4:	d5fb      	bpl.n	8012fbe <_printf_i+0x1ba>
 8012fc6:	8019      	strh	r1, [r3, #0]
 8012fc8:	2300      	movs	r3, #0
 8012fca:	6123      	str	r3, [r4, #16]
 8012fcc:	4616      	mov	r6, r2
 8012fce:	e7bc      	b.n	8012f4a <_printf_i+0x146>
 8012fd0:	6833      	ldr	r3, [r6, #0]
 8012fd2:	1d1a      	adds	r2, r3, #4
 8012fd4:	6032      	str	r2, [r6, #0]
 8012fd6:	681e      	ldr	r6, [r3, #0]
 8012fd8:	6862      	ldr	r2, [r4, #4]
 8012fda:	2100      	movs	r1, #0
 8012fdc:	4630      	mov	r0, r6
 8012fde:	f7ed f917 	bl	8000210 <memchr>
 8012fe2:	b108      	cbz	r0, 8012fe8 <_printf_i+0x1e4>
 8012fe4:	1b80      	subs	r0, r0, r6
 8012fe6:	6060      	str	r0, [r4, #4]
 8012fe8:	6863      	ldr	r3, [r4, #4]
 8012fea:	6123      	str	r3, [r4, #16]
 8012fec:	2300      	movs	r3, #0
 8012fee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ff2:	e7aa      	b.n	8012f4a <_printf_i+0x146>
 8012ff4:	6923      	ldr	r3, [r4, #16]
 8012ff6:	4632      	mov	r2, r6
 8012ff8:	4649      	mov	r1, r9
 8012ffa:	4640      	mov	r0, r8
 8012ffc:	47d0      	blx	sl
 8012ffe:	3001      	adds	r0, #1
 8013000:	d0ad      	beq.n	8012f5e <_printf_i+0x15a>
 8013002:	6823      	ldr	r3, [r4, #0]
 8013004:	079b      	lsls	r3, r3, #30
 8013006:	d413      	bmi.n	8013030 <_printf_i+0x22c>
 8013008:	68e0      	ldr	r0, [r4, #12]
 801300a:	9b03      	ldr	r3, [sp, #12]
 801300c:	4298      	cmp	r0, r3
 801300e:	bfb8      	it	lt
 8013010:	4618      	movlt	r0, r3
 8013012:	e7a6      	b.n	8012f62 <_printf_i+0x15e>
 8013014:	2301      	movs	r3, #1
 8013016:	4632      	mov	r2, r6
 8013018:	4649      	mov	r1, r9
 801301a:	4640      	mov	r0, r8
 801301c:	47d0      	blx	sl
 801301e:	3001      	adds	r0, #1
 8013020:	d09d      	beq.n	8012f5e <_printf_i+0x15a>
 8013022:	3501      	adds	r5, #1
 8013024:	68e3      	ldr	r3, [r4, #12]
 8013026:	9903      	ldr	r1, [sp, #12]
 8013028:	1a5b      	subs	r3, r3, r1
 801302a:	42ab      	cmp	r3, r5
 801302c:	dcf2      	bgt.n	8013014 <_printf_i+0x210>
 801302e:	e7eb      	b.n	8013008 <_printf_i+0x204>
 8013030:	2500      	movs	r5, #0
 8013032:	f104 0619 	add.w	r6, r4, #25
 8013036:	e7f5      	b.n	8013024 <_printf_i+0x220>
 8013038:	080169f6 	.word	0x080169f6
 801303c:	08016a07 	.word	0x08016a07

08013040 <std>:
 8013040:	2300      	movs	r3, #0
 8013042:	b510      	push	{r4, lr}
 8013044:	4604      	mov	r4, r0
 8013046:	e9c0 3300 	strd	r3, r3, [r0]
 801304a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801304e:	6083      	str	r3, [r0, #8]
 8013050:	8181      	strh	r1, [r0, #12]
 8013052:	6643      	str	r3, [r0, #100]	@ 0x64
 8013054:	81c2      	strh	r2, [r0, #14]
 8013056:	6183      	str	r3, [r0, #24]
 8013058:	4619      	mov	r1, r3
 801305a:	2208      	movs	r2, #8
 801305c:	305c      	adds	r0, #92	@ 0x5c
 801305e:	f000 fa2f 	bl	80134c0 <memset>
 8013062:	4b0d      	ldr	r3, [pc, #52]	@ (8013098 <std+0x58>)
 8013064:	6263      	str	r3, [r4, #36]	@ 0x24
 8013066:	4b0d      	ldr	r3, [pc, #52]	@ (801309c <std+0x5c>)
 8013068:	62a3      	str	r3, [r4, #40]	@ 0x28
 801306a:	4b0d      	ldr	r3, [pc, #52]	@ (80130a0 <std+0x60>)
 801306c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801306e:	4b0d      	ldr	r3, [pc, #52]	@ (80130a4 <std+0x64>)
 8013070:	6323      	str	r3, [r4, #48]	@ 0x30
 8013072:	4b0d      	ldr	r3, [pc, #52]	@ (80130a8 <std+0x68>)
 8013074:	6224      	str	r4, [r4, #32]
 8013076:	429c      	cmp	r4, r3
 8013078:	d006      	beq.n	8013088 <std+0x48>
 801307a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801307e:	4294      	cmp	r4, r2
 8013080:	d002      	beq.n	8013088 <std+0x48>
 8013082:	33d0      	adds	r3, #208	@ 0xd0
 8013084:	429c      	cmp	r4, r3
 8013086:	d105      	bne.n	8013094 <std+0x54>
 8013088:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801308c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013090:	f000 baf0 	b.w	8013674 <__retarget_lock_init_recursive>
 8013094:	bd10      	pop	{r4, pc}
 8013096:	bf00      	nop
 8013098:	08013311 	.word	0x08013311
 801309c:	08013333 	.word	0x08013333
 80130a0:	0801336b 	.word	0x0801336b
 80130a4:	0801338f 	.word	0x0801338f
 80130a8:	20004eec 	.word	0x20004eec

080130ac <stdio_exit_handler>:
 80130ac:	4a02      	ldr	r2, [pc, #8]	@ (80130b8 <stdio_exit_handler+0xc>)
 80130ae:	4903      	ldr	r1, [pc, #12]	@ (80130bc <stdio_exit_handler+0x10>)
 80130b0:	4803      	ldr	r0, [pc, #12]	@ (80130c0 <stdio_exit_handler+0x14>)
 80130b2:	f000 b869 	b.w	8013188 <_fwalk_sglue>
 80130b6:	bf00      	nop
 80130b8:	20000010 	.word	0x20000010
 80130bc:	08015279 	.word	0x08015279
 80130c0:	20000020 	.word	0x20000020

080130c4 <cleanup_stdio>:
 80130c4:	6841      	ldr	r1, [r0, #4]
 80130c6:	4b0c      	ldr	r3, [pc, #48]	@ (80130f8 <cleanup_stdio+0x34>)
 80130c8:	4299      	cmp	r1, r3
 80130ca:	b510      	push	{r4, lr}
 80130cc:	4604      	mov	r4, r0
 80130ce:	d001      	beq.n	80130d4 <cleanup_stdio+0x10>
 80130d0:	f002 f8d2 	bl	8015278 <_fflush_r>
 80130d4:	68a1      	ldr	r1, [r4, #8]
 80130d6:	4b09      	ldr	r3, [pc, #36]	@ (80130fc <cleanup_stdio+0x38>)
 80130d8:	4299      	cmp	r1, r3
 80130da:	d002      	beq.n	80130e2 <cleanup_stdio+0x1e>
 80130dc:	4620      	mov	r0, r4
 80130de:	f002 f8cb 	bl	8015278 <_fflush_r>
 80130e2:	68e1      	ldr	r1, [r4, #12]
 80130e4:	4b06      	ldr	r3, [pc, #24]	@ (8013100 <cleanup_stdio+0x3c>)
 80130e6:	4299      	cmp	r1, r3
 80130e8:	d004      	beq.n	80130f4 <cleanup_stdio+0x30>
 80130ea:	4620      	mov	r0, r4
 80130ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130f0:	f002 b8c2 	b.w	8015278 <_fflush_r>
 80130f4:	bd10      	pop	{r4, pc}
 80130f6:	bf00      	nop
 80130f8:	20004eec 	.word	0x20004eec
 80130fc:	20004f54 	.word	0x20004f54
 8013100:	20004fbc 	.word	0x20004fbc

08013104 <global_stdio_init.part.0>:
 8013104:	b510      	push	{r4, lr}
 8013106:	4b0b      	ldr	r3, [pc, #44]	@ (8013134 <global_stdio_init.part.0+0x30>)
 8013108:	4c0b      	ldr	r4, [pc, #44]	@ (8013138 <global_stdio_init.part.0+0x34>)
 801310a:	4a0c      	ldr	r2, [pc, #48]	@ (801313c <global_stdio_init.part.0+0x38>)
 801310c:	601a      	str	r2, [r3, #0]
 801310e:	4620      	mov	r0, r4
 8013110:	2200      	movs	r2, #0
 8013112:	2104      	movs	r1, #4
 8013114:	f7ff ff94 	bl	8013040 <std>
 8013118:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801311c:	2201      	movs	r2, #1
 801311e:	2109      	movs	r1, #9
 8013120:	f7ff ff8e 	bl	8013040 <std>
 8013124:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013128:	2202      	movs	r2, #2
 801312a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801312e:	2112      	movs	r1, #18
 8013130:	f7ff bf86 	b.w	8013040 <std>
 8013134:	20005024 	.word	0x20005024
 8013138:	20004eec 	.word	0x20004eec
 801313c:	080130ad 	.word	0x080130ad

08013140 <__sfp_lock_acquire>:
 8013140:	4801      	ldr	r0, [pc, #4]	@ (8013148 <__sfp_lock_acquire+0x8>)
 8013142:	f000 ba98 	b.w	8013676 <__retarget_lock_acquire_recursive>
 8013146:	bf00      	nop
 8013148:	2000502d 	.word	0x2000502d

0801314c <__sfp_lock_release>:
 801314c:	4801      	ldr	r0, [pc, #4]	@ (8013154 <__sfp_lock_release+0x8>)
 801314e:	f000 ba93 	b.w	8013678 <__retarget_lock_release_recursive>
 8013152:	bf00      	nop
 8013154:	2000502d 	.word	0x2000502d

08013158 <__sinit>:
 8013158:	b510      	push	{r4, lr}
 801315a:	4604      	mov	r4, r0
 801315c:	f7ff fff0 	bl	8013140 <__sfp_lock_acquire>
 8013160:	6a23      	ldr	r3, [r4, #32]
 8013162:	b11b      	cbz	r3, 801316c <__sinit+0x14>
 8013164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013168:	f7ff bff0 	b.w	801314c <__sfp_lock_release>
 801316c:	4b04      	ldr	r3, [pc, #16]	@ (8013180 <__sinit+0x28>)
 801316e:	6223      	str	r3, [r4, #32]
 8013170:	4b04      	ldr	r3, [pc, #16]	@ (8013184 <__sinit+0x2c>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d1f5      	bne.n	8013164 <__sinit+0xc>
 8013178:	f7ff ffc4 	bl	8013104 <global_stdio_init.part.0>
 801317c:	e7f2      	b.n	8013164 <__sinit+0xc>
 801317e:	bf00      	nop
 8013180:	080130c5 	.word	0x080130c5
 8013184:	20005024 	.word	0x20005024

08013188 <_fwalk_sglue>:
 8013188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801318c:	4607      	mov	r7, r0
 801318e:	4688      	mov	r8, r1
 8013190:	4614      	mov	r4, r2
 8013192:	2600      	movs	r6, #0
 8013194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013198:	f1b9 0901 	subs.w	r9, r9, #1
 801319c:	d505      	bpl.n	80131aa <_fwalk_sglue+0x22>
 801319e:	6824      	ldr	r4, [r4, #0]
 80131a0:	2c00      	cmp	r4, #0
 80131a2:	d1f7      	bne.n	8013194 <_fwalk_sglue+0xc>
 80131a4:	4630      	mov	r0, r6
 80131a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131aa:	89ab      	ldrh	r3, [r5, #12]
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	d907      	bls.n	80131c0 <_fwalk_sglue+0x38>
 80131b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131b4:	3301      	adds	r3, #1
 80131b6:	d003      	beq.n	80131c0 <_fwalk_sglue+0x38>
 80131b8:	4629      	mov	r1, r5
 80131ba:	4638      	mov	r0, r7
 80131bc:	47c0      	blx	r8
 80131be:	4306      	orrs	r6, r0
 80131c0:	3568      	adds	r5, #104	@ 0x68
 80131c2:	e7e9      	b.n	8013198 <_fwalk_sglue+0x10>

080131c4 <iprintf>:
 80131c4:	b40f      	push	{r0, r1, r2, r3}
 80131c6:	b507      	push	{r0, r1, r2, lr}
 80131c8:	4906      	ldr	r1, [pc, #24]	@ (80131e4 <iprintf+0x20>)
 80131ca:	ab04      	add	r3, sp, #16
 80131cc:	6808      	ldr	r0, [r1, #0]
 80131ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80131d2:	6881      	ldr	r1, [r0, #8]
 80131d4:	9301      	str	r3, [sp, #4]
 80131d6:	f001 feb3 	bl	8014f40 <_vfiprintf_r>
 80131da:	b003      	add	sp, #12
 80131dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80131e0:	b004      	add	sp, #16
 80131e2:	4770      	bx	lr
 80131e4:	2000001c 	.word	0x2000001c

080131e8 <_puts_r>:
 80131e8:	6a03      	ldr	r3, [r0, #32]
 80131ea:	b570      	push	{r4, r5, r6, lr}
 80131ec:	6884      	ldr	r4, [r0, #8]
 80131ee:	4605      	mov	r5, r0
 80131f0:	460e      	mov	r6, r1
 80131f2:	b90b      	cbnz	r3, 80131f8 <_puts_r+0x10>
 80131f4:	f7ff ffb0 	bl	8013158 <__sinit>
 80131f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80131fa:	07db      	lsls	r3, r3, #31
 80131fc:	d405      	bmi.n	801320a <_puts_r+0x22>
 80131fe:	89a3      	ldrh	r3, [r4, #12]
 8013200:	0598      	lsls	r0, r3, #22
 8013202:	d402      	bmi.n	801320a <_puts_r+0x22>
 8013204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013206:	f000 fa36 	bl	8013676 <__retarget_lock_acquire_recursive>
 801320a:	89a3      	ldrh	r3, [r4, #12]
 801320c:	0719      	lsls	r1, r3, #28
 801320e:	d502      	bpl.n	8013216 <_puts_r+0x2e>
 8013210:	6923      	ldr	r3, [r4, #16]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d135      	bne.n	8013282 <_puts_r+0x9a>
 8013216:	4621      	mov	r1, r4
 8013218:	4628      	mov	r0, r5
 801321a:	f000 f8fb 	bl	8013414 <__swsetup_r>
 801321e:	b380      	cbz	r0, 8013282 <_puts_r+0x9a>
 8013220:	f04f 35ff 	mov.w	r5, #4294967295
 8013224:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013226:	07da      	lsls	r2, r3, #31
 8013228:	d405      	bmi.n	8013236 <_puts_r+0x4e>
 801322a:	89a3      	ldrh	r3, [r4, #12]
 801322c:	059b      	lsls	r3, r3, #22
 801322e:	d402      	bmi.n	8013236 <_puts_r+0x4e>
 8013230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013232:	f000 fa21 	bl	8013678 <__retarget_lock_release_recursive>
 8013236:	4628      	mov	r0, r5
 8013238:	bd70      	pop	{r4, r5, r6, pc}
 801323a:	2b00      	cmp	r3, #0
 801323c:	da04      	bge.n	8013248 <_puts_r+0x60>
 801323e:	69a2      	ldr	r2, [r4, #24]
 8013240:	429a      	cmp	r2, r3
 8013242:	dc17      	bgt.n	8013274 <_puts_r+0x8c>
 8013244:	290a      	cmp	r1, #10
 8013246:	d015      	beq.n	8013274 <_puts_r+0x8c>
 8013248:	6823      	ldr	r3, [r4, #0]
 801324a:	1c5a      	adds	r2, r3, #1
 801324c:	6022      	str	r2, [r4, #0]
 801324e:	7019      	strb	r1, [r3, #0]
 8013250:	68a3      	ldr	r3, [r4, #8]
 8013252:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013256:	3b01      	subs	r3, #1
 8013258:	60a3      	str	r3, [r4, #8]
 801325a:	2900      	cmp	r1, #0
 801325c:	d1ed      	bne.n	801323a <_puts_r+0x52>
 801325e:	2b00      	cmp	r3, #0
 8013260:	da11      	bge.n	8013286 <_puts_r+0x9e>
 8013262:	4622      	mov	r2, r4
 8013264:	210a      	movs	r1, #10
 8013266:	4628      	mov	r0, r5
 8013268:	f000 f895 	bl	8013396 <__swbuf_r>
 801326c:	3001      	adds	r0, #1
 801326e:	d0d7      	beq.n	8013220 <_puts_r+0x38>
 8013270:	250a      	movs	r5, #10
 8013272:	e7d7      	b.n	8013224 <_puts_r+0x3c>
 8013274:	4622      	mov	r2, r4
 8013276:	4628      	mov	r0, r5
 8013278:	f000 f88d 	bl	8013396 <__swbuf_r>
 801327c:	3001      	adds	r0, #1
 801327e:	d1e7      	bne.n	8013250 <_puts_r+0x68>
 8013280:	e7ce      	b.n	8013220 <_puts_r+0x38>
 8013282:	3e01      	subs	r6, #1
 8013284:	e7e4      	b.n	8013250 <_puts_r+0x68>
 8013286:	6823      	ldr	r3, [r4, #0]
 8013288:	1c5a      	adds	r2, r3, #1
 801328a:	6022      	str	r2, [r4, #0]
 801328c:	220a      	movs	r2, #10
 801328e:	701a      	strb	r2, [r3, #0]
 8013290:	e7ee      	b.n	8013270 <_puts_r+0x88>
	...

08013294 <puts>:
 8013294:	4b02      	ldr	r3, [pc, #8]	@ (80132a0 <puts+0xc>)
 8013296:	4601      	mov	r1, r0
 8013298:	6818      	ldr	r0, [r3, #0]
 801329a:	f7ff bfa5 	b.w	80131e8 <_puts_r>
 801329e:	bf00      	nop
 80132a0:	2000001c 	.word	0x2000001c

080132a4 <sniprintf>:
 80132a4:	b40c      	push	{r2, r3}
 80132a6:	b530      	push	{r4, r5, lr}
 80132a8:	4b18      	ldr	r3, [pc, #96]	@ (801330c <sniprintf+0x68>)
 80132aa:	1e0c      	subs	r4, r1, #0
 80132ac:	681d      	ldr	r5, [r3, #0]
 80132ae:	b09d      	sub	sp, #116	@ 0x74
 80132b0:	da08      	bge.n	80132c4 <sniprintf+0x20>
 80132b2:	238b      	movs	r3, #139	@ 0x8b
 80132b4:	602b      	str	r3, [r5, #0]
 80132b6:	f04f 30ff 	mov.w	r0, #4294967295
 80132ba:	b01d      	add	sp, #116	@ 0x74
 80132bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132c0:	b002      	add	sp, #8
 80132c2:	4770      	bx	lr
 80132c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80132c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80132cc:	f04f 0300 	mov.w	r3, #0
 80132d0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80132d2:	bf14      	ite	ne
 80132d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80132d8:	4623      	moveq	r3, r4
 80132da:	9304      	str	r3, [sp, #16]
 80132dc:	9307      	str	r3, [sp, #28]
 80132de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80132e2:	9002      	str	r0, [sp, #8]
 80132e4:	9006      	str	r0, [sp, #24]
 80132e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80132ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80132ec:	ab21      	add	r3, sp, #132	@ 0x84
 80132ee:	a902      	add	r1, sp, #8
 80132f0:	4628      	mov	r0, r5
 80132f2:	9301      	str	r3, [sp, #4]
 80132f4:	f001 fcfe 	bl	8014cf4 <_svfiprintf_r>
 80132f8:	1c43      	adds	r3, r0, #1
 80132fa:	bfbc      	itt	lt
 80132fc:	238b      	movlt	r3, #139	@ 0x8b
 80132fe:	602b      	strlt	r3, [r5, #0]
 8013300:	2c00      	cmp	r4, #0
 8013302:	d0da      	beq.n	80132ba <sniprintf+0x16>
 8013304:	9b02      	ldr	r3, [sp, #8]
 8013306:	2200      	movs	r2, #0
 8013308:	701a      	strb	r2, [r3, #0]
 801330a:	e7d6      	b.n	80132ba <sniprintf+0x16>
 801330c:	2000001c 	.word	0x2000001c

08013310 <__sread>:
 8013310:	b510      	push	{r4, lr}
 8013312:	460c      	mov	r4, r1
 8013314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013318:	f000 f95e 	bl	80135d8 <_read_r>
 801331c:	2800      	cmp	r0, #0
 801331e:	bfab      	itete	ge
 8013320:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013322:	89a3      	ldrhlt	r3, [r4, #12]
 8013324:	181b      	addge	r3, r3, r0
 8013326:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801332a:	bfac      	ite	ge
 801332c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801332e:	81a3      	strhlt	r3, [r4, #12]
 8013330:	bd10      	pop	{r4, pc}

08013332 <__swrite>:
 8013332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013336:	461f      	mov	r7, r3
 8013338:	898b      	ldrh	r3, [r1, #12]
 801333a:	05db      	lsls	r3, r3, #23
 801333c:	4605      	mov	r5, r0
 801333e:	460c      	mov	r4, r1
 8013340:	4616      	mov	r6, r2
 8013342:	d505      	bpl.n	8013350 <__swrite+0x1e>
 8013344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013348:	2302      	movs	r3, #2
 801334a:	2200      	movs	r2, #0
 801334c:	f000 f932 	bl	80135b4 <_lseek_r>
 8013350:	89a3      	ldrh	r3, [r4, #12]
 8013352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013356:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801335a:	81a3      	strh	r3, [r4, #12]
 801335c:	4632      	mov	r2, r6
 801335e:	463b      	mov	r3, r7
 8013360:	4628      	mov	r0, r5
 8013362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013366:	f000 b949 	b.w	80135fc <_write_r>

0801336a <__sseek>:
 801336a:	b510      	push	{r4, lr}
 801336c:	460c      	mov	r4, r1
 801336e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013372:	f000 f91f 	bl	80135b4 <_lseek_r>
 8013376:	1c43      	adds	r3, r0, #1
 8013378:	89a3      	ldrh	r3, [r4, #12]
 801337a:	bf15      	itete	ne
 801337c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801337e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013382:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013386:	81a3      	strheq	r3, [r4, #12]
 8013388:	bf18      	it	ne
 801338a:	81a3      	strhne	r3, [r4, #12]
 801338c:	bd10      	pop	{r4, pc}

0801338e <__sclose>:
 801338e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013392:	f000 b8a1 	b.w	80134d8 <_close_r>

08013396 <__swbuf_r>:
 8013396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013398:	460e      	mov	r6, r1
 801339a:	4614      	mov	r4, r2
 801339c:	4605      	mov	r5, r0
 801339e:	b118      	cbz	r0, 80133a8 <__swbuf_r+0x12>
 80133a0:	6a03      	ldr	r3, [r0, #32]
 80133a2:	b90b      	cbnz	r3, 80133a8 <__swbuf_r+0x12>
 80133a4:	f7ff fed8 	bl	8013158 <__sinit>
 80133a8:	69a3      	ldr	r3, [r4, #24]
 80133aa:	60a3      	str	r3, [r4, #8]
 80133ac:	89a3      	ldrh	r3, [r4, #12]
 80133ae:	071a      	lsls	r2, r3, #28
 80133b0:	d501      	bpl.n	80133b6 <__swbuf_r+0x20>
 80133b2:	6923      	ldr	r3, [r4, #16]
 80133b4:	b943      	cbnz	r3, 80133c8 <__swbuf_r+0x32>
 80133b6:	4621      	mov	r1, r4
 80133b8:	4628      	mov	r0, r5
 80133ba:	f000 f82b 	bl	8013414 <__swsetup_r>
 80133be:	b118      	cbz	r0, 80133c8 <__swbuf_r+0x32>
 80133c0:	f04f 37ff 	mov.w	r7, #4294967295
 80133c4:	4638      	mov	r0, r7
 80133c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133c8:	6823      	ldr	r3, [r4, #0]
 80133ca:	6922      	ldr	r2, [r4, #16]
 80133cc:	1a98      	subs	r0, r3, r2
 80133ce:	6963      	ldr	r3, [r4, #20]
 80133d0:	b2f6      	uxtb	r6, r6
 80133d2:	4283      	cmp	r3, r0
 80133d4:	4637      	mov	r7, r6
 80133d6:	dc05      	bgt.n	80133e4 <__swbuf_r+0x4e>
 80133d8:	4621      	mov	r1, r4
 80133da:	4628      	mov	r0, r5
 80133dc:	f001 ff4c 	bl	8015278 <_fflush_r>
 80133e0:	2800      	cmp	r0, #0
 80133e2:	d1ed      	bne.n	80133c0 <__swbuf_r+0x2a>
 80133e4:	68a3      	ldr	r3, [r4, #8]
 80133e6:	3b01      	subs	r3, #1
 80133e8:	60a3      	str	r3, [r4, #8]
 80133ea:	6823      	ldr	r3, [r4, #0]
 80133ec:	1c5a      	adds	r2, r3, #1
 80133ee:	6022      	str	r2, [r4, #0]
 80133f0:	701e      	strb	r6, [r3, #0]
 80133f2:	6962      	ldr	r2, [r4, #20]
 80133f4:	1c43      	adds	r3, r0, #1
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d004      	beq.n	8013404 <__swbuf_r+0x6e>
 80133fa:	89a3      	ldrh	r3, [r4, #12]
 80133fc:	07db      	lsls	r3, r3, #31
 80133fe:	d5e1      	bpl.n	80133c4 <__swbuf_r+0x2e>
 8013400:	2e0a      	cmp	r6, #10
 8013402:	d1df      	bne.n	80133c4 <__swbuf_r+0x2e>
 8013404:	4621      	mov	r1, r4
 8013406:	4628      	mov	r0, r5
 8013408:	f001 ff36 	bl	8015278 <_fflush_r>
 801340c:	2800      	cmp	r0, #0
 801340e:	d0d9      	beq.n	80133c4 <__swbuf_r+0x2e>
 8013410:	e7d6      	b.n	80133c0 <__swbuf_r+0x2a>
	...

08013414 <__swsetup_r>:
 8013414:	b538      	push	{r3, r4, r5, lr}
 8013416:	4b29      	ldr	r3, [pc, #164]	@ (80134bc <__swsetup_r+0xa8>)
 8013418:	4605      	mov	r5, r0
 801341a:	6818      	ldr	r0, [r3, #0]
 801341c:	460c      	mov	r4, r1
 801341e:	b118      	cbz	r0, 8013428 <__swsetup_r+0x14>
 8013420:	6a03      	ldr	r3, [r0, #32]
 8013422:	b90b      	cbnz	r3, 8013428 <__swsetup_r+0x14>
 8013424:	f7ff fe98 	bl	8013158 <__sinit>
 8013428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801342c:	0719      	lsls	r1, r3, #28
 801342e:	d422      	bmi.n	8013476 <__swsetup_r+0x62>
 8013430:	06da      	lsls	r2, r3, #27
 8013432:	d407      	bmi.n	8013444 <__swsetup_r+0x30>
 8013434:	2209      	movs	r2, #9
 8013436:	602a      	str	r2, [r5, #0]
 8013438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801343c:	81a3      	strh	r3, [r4, #12]
 801343e:	f04f 30ff 	mov.w	r0, #4294967295
 8013442:	e033      	b.n	80134ac <__swsetup_r+0x98>
 8013444:	0758      	lsls	r0, r3, #29
 8013446:	d512      	bpl.n	801346e <__swsetup_r+0x5a>
 8013448:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801344a:	b141      	cbz	r1, 801345e <__swsetup_r+0x4a>
 801344c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013450:	4299      	cmp	r1, r3
 8013452:	d002      	beq.n	801345a <__swsetup_r+0x46>
 8013454:	4628      	mov	r0, r5
 8013456:	f000 ff77 	bl	8014348 <_free_r>
 801345a:	2300      	movs	r3, #0
 801345c:	6363      	str	r3, [r4, #52]	@ 0x34
 801345e:	89a3      	ldrh	r3, [r4, #12]
 8013460:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013464:	81a3      	strh	r3, [r4, #12]
 8013466:	2300      	movs	r3, #0
 8013468:	6063      	str	r3, [r4, #4]
 801346a:	6923      	ldr	r3, [r4, #16]
 801346c:	6023      	str	r3, [r4, #0]
 801346e:	89a3      	ldrh	r3, [r4, #12]
 8013470:	f043 0308 	orr.w	r3, r3, #8
 8013474:	81a3      	strh	r3, [r4, #12]
 8013476:	6923      	ldr	r3, [r4, #16]
 8013478:	b94b      	cbnz	r3, 801348e <__swsetup_r+0x7a>
 801347a:	89a3      	ldrh	r3, [r4, #12]
 801347c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013484:	d003      	beq.n	801348e <__swsetup_r+0x7a>
 8013486:	4621      	mov	r1, r4
 8013488:	4628      	mov	r0, r5
 801348a:	f001 ff43 	bl	8015314 <__smakebuf_r>
 801348e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013492:	f013 0201 	ands.w	r2, r3, #1
 8013496:	d00a      	beq.n	80134ae <__swsetup_r+0x9a>
 8013498:	2200      	movs	r2, #0
 801349a:	60a2      	str	r2, [r4, #8]
 801349c:	6962      	ldr	r2, [r4, #20]
 801349e:	4252      	negs	r2, r2
 80134a0:	61a2      	str	r2, [r4, #24]
 80134a2:	6922      	ldr	r2, [r4, #16]
 80134a4:	b942      	cbnz	r2, 80134b8 <__swsetup_r+0xa4>
 80134a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80134aa:	d1c5      	bne.n	8013438 <__swsetup_r+0x24>
 80134ac:	bd38      	pop	{r3, r4, r5, pc}
 80134ae:	0799      	lsls	r1, r3, #30
 80134b0:	bf58      	it	pl
 80134b2:	6962      	ldrpl	r2, [r4, #20]
 80134b4:	60a2      	str	r2, [r4, #8]
 80134b6:	e7f4      	b.n	80134a2 <__swsetup_r+0x8e>
 80134b8:	2000      	movs	r0, #0
 80134ba:	e7f7      	b.n	80134ac <__swsetup_r+0x98>
 80134bc:	2000001c 	.word	0x2000001c

080134c0 <memset>:
 80134c0:	4402      	add	r2, r0
 80134c2:	4603      	mov	r3, r0
 80134c4:	4293      	cmp	r3, r2
 80134c6:	d100      	bne.n	80134ca <memset+0xa>
 80134c8:	4770      	bx	lr
 80134ca:	f803 1b01 	strb.w	r1, [r3], #1
 80134ce:	e7f9      	b.n	80134c4 <memset+0x4>

080134d0 <_localeconv_r>:
 80134d0:	4800      	ldr	r0, [pc, #0]	@ (80134d4 <_localeconv_r+0x4>)
 80134d2:	4770      	bx	lr
 80134d4:	2000015c 	.word	0x2000015c

080134d8 <_close_r>:
 80134d8:	b538      	push	{r3, r4, r5, lr}
 80134da:	4d06      	ldr	r5, [pc, #24]	@ (80134f4 <_close_r+0x1c>)
 80134dc:	2300      	movs	r3, #0
 80134de:	4604      	mov	r4, r0
 80134e0:	4608      	mov	r0, r1
 80134e2:	602b      	str	r3, [r5, #0]
 80134e4:	f7f0 fea6 	bl	8004234 <_close>
 80134e8:	1c43      	adds	r3, r0, #1
 80134ea:	d102      	bne.n	80134f2 <_close_r+0x1a>
 80134ec:	682b      	ldr	r3, [r5, #0]
 80134ee:	b103      	cbz	r3, 80134f2 <_close_r+0x1a>
 80134f0:	6023      	str	r3, [r4, #0]
 80134f2:	bd38      	pop	{r3, r4, r5, pc}
 80134f4:	20005028 	.word	0x20005028

080134f8 <_reclaim_reent>:
 80134f8:	4b2d      	ldr	r3, [pc, #180]	@ (80135b0 <_reclaim_reent+0xb8>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	4283      	cmp	r3, r0
 80134fe:	b570      	push	{r4, r5, r6, lr}
 8013500:	4604      	mov	r4, r0
 8013502:	d053      	beq.n	80135ac <_reclaim_reent+0xb4>
 8013504:	69c3      	ldr	r3, [r0, #28]
 8013506:	b31b      	cbz	r3, 8013550 <_reclaim_reent+0x58>
 8013508:	68db      	ldr	r3, [r3, #12]
 801350a:	b163      	cbz	r3, 8013526 <_reclaim_reent+0x2e>
 801350c:	2500      	movs	r5, #0
 801350e:	69e3      	ldr	r3, [r4, #28]
 8013510:	68db      	ldr	r3, [r3, #12]
 8013512:	5959      	ldr	r1, [r3, r5]
 8013514:	b9b1      	cbnz	r1, 8013544 <_reclaim_reent+0x4c>
 8013516:	3504      	adds	r5, #4
 8013518:	2d80      	cmp	r5, #128	@ 0x80
 801351a:	d1f8      	bne.n	801350e <_reclaim_reent+0x16>
 801351c:	69e3      	ldr	r3, [r4, #28]
 801351e:	4620      	mov	r0, r4
 8013520:	68d9      	ldr	r1, [r3, #12]
 8013522:	f000 ff11 	bl	8014348 <_free_r>
 8013526:	69e3      	ldr	r3, [r4, #28]
 8013528:	6819      	ldr	r1, [r3, #0]
 801352a:	b111      	cbz	r1, 8013532 <_reclaim_reent+0x3a>
 801352c:	4620      	mov	r0, r4
 801352e:	f000 ff0b 	bl	8014348 <_free_r>
 8013532:	69e3      	ldr	r3, [r4, #28]
 8013534:	689d      	ldr	r5, [r3, #8]
 8013536:	b15d      	cbz	r5, 8013550 <_reclaim_reent+0x58>
 8013538:	4629      	mov	r1, r5
 801353a:	4620      	mov	r0, r4
 801353c:	682d      	ldr	r5, [r5, #0]
 801353e:	f000 ff03 	bl	8014348 <_free_r>
 8013542:	e7f8      	b.n	8013536 <_reclaim_reent+0x3e>
 8013544:	680e      	ldr	r6, [r1, #0]
 8013546:	4620      	mov	r0, r4
 8013548:	f000 fefe 	bl	8014348 <_free_r>
 801354c:	4631      	mov	r1, r6
 801354e:	e7e1      	b.n	8013514 <_reclaim_reent+0x1c>
 8013550:	6961      	ldr	r1, [r4, #20]
 8013552:	b111      	cbz	r1, 801355a <_reclaim_reent+0x62>
 8013554:	4620      	mov	r0, r4
 8013556:	f000 fef7 	bl	8014348 <_free_r>
 801355a:	69e1      	ldr	r1, [r4, #28]
 801355c:	b111      	cbz	r1, 8013564 <_reclaim_reent+0x6c>
 801355e:	4620      	mov	r0, r4
 8013560:	f000 fef2 	bl	8014348 <_free_r>
 8013564:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013566:	b111      	cbz	r1, 801356e <_reclaim_reent+0x76>
 8013568:	4620      	mov	r0, r4
 801356a:	f000 feed 	bl	8014348 <_free_r>
 801356e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013570:	b111      	cbz	r1, 8013578 <_reclaim_reent+0x80>
 8013572:	4620      	mov	r0, r4
 8013574:	f000 fee8 	bl	8014348 <_free_r>
 8013578:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801357a:	b111      	cbz	r1, 8013582 <_reclaim_reent+0x8a>
 801357c:	4620      	mov	r0, r4
 801357e:	f000 fee3 	bl	8014348 <_free_r>
 8013582:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013584:	b111      	cbz	r1, 801358c <_reclaim_reent+0x94>
 8013586:	4620      	mov	r0, r4
 8013588:	f000 fede 	bl	8014348 <_free_r>
 801358c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801358e:	b111      	cbz	r1, 8013596 <_reclaim_reent+0x9e>
 8013590:	4620      	mov	r0, r4
 8013592:	f000 fed9 	bl	8014348 <_free_r>
 8013596:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013598:	b111      	cbz	r1, 80135a0 <_reclaim_reent+0xa8>
 801359a:	4620      	mov	r0, r4
 801359c:	f000 fed4 	bl	8014348 <_free_r>
 80135a0:	6a23      	ldr	r3, [r4, #32]
 80135a2:	b11b      	cbz	r3, 80135ac <_reclaim_reent+0xb4>
 80135a4:	4620      	mov	r0, r4
 80135a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135aa:	4718      	bx	r3
 80135ac:	bd70      	pop	{r4, r5, r6, pc}
 80135ae:	bf00      	nop
 80135b0:	2000001c 	.word	0x2000001c

080135b4 <_lseek_r>:
 80135b4:	b538      	push	{r3, r4, r5, lr}
 80135b6:	4d07      	ldr	r5, [pc, #28]	@ (80135d4 <_lseek_r+0x20>)
 80135b8:	4604      	mov	r4, r0
 80135ba:	4608      	mov	r0, r1
 80135bc:	4611      	mov	r1, r2
 80135be:	2200      	movs	r2, #0
 80135c0:	602a      	str	r2, [r5, #0]
 80135c2:	461a      	mov	r2, r3
 80135c4:	f7f0 fe5d 	bl	8004282 <_lseek>
 80135c8:	1c43      	adds	r3, r0, #1
 80135ca:	d102      	bne.n	80135d2 <_lseek_r+0x1e>
 80135cc:	682b      	ldr	r3, [r5, #0]
 80135ce:	b103      	cbz	r3, 80135d2 <_lseek_r+0x1e>
 80135d0:	6023      	str	r3, [r4, #0]
 80135d2:	bd38      	pop	{r3, r4, r5, pc}
 80135d4:	20005028 	.word	0x20005028

080135d8 <_read_r>:
 80135d8:	b538      	push	{r3, r4, r5, lr}
 80135da:	4d07      	ldr	r5, [pc, #28]	@ (80135f8 <_read_r+0x20>)
 80135dc:	4604      	mov	r4, r0
 80135de:	4608      	mov	r0, r1
 80135e0:	4611      	mov	r1, r2
 80135e2:	2200      	movs	r2, #0
 80135e4:	602a      	str	r2, [r5, #0]
 80135e6:	461a      	mov	r2, r3
 80135e8:	f7f0 fdeb 	bl	80041c2 <_read>
 80135ec:	1c43      	adds	r3, r0, #1
 80135ee:	d102      	bne.n	80135f6 <_read_r+0x1e>
 80135f0:	682b      	ldr	r3, [r5, #0]
 80135f2:	b103      	cbz	r3, 80135f6 <_read_r+0x1e>
 80135f4:	6023      	str	r3, [r4, #0]
 80135f6:	bd38      	pop	{r3, r4, r5, pc}
 80135f8:	20005028 	.word	0x20005028

080135fc <_write_r>:
 80135fc:	b538      	push	{r3, r4, r5, lr}
 80135fe:	4d07      	ldr	r5, [pc, #28]	@ (801361c <_write_r+0x20>)
 8013600:	4604      	mov	r4, r0
 8013602:	4608      	mov	r0, r1
 8013604:	4611      	mov	r1, r2
 8013606:	2200      	movs	r2, #0
 8013608:	602a      	str	r2, [r5, #0]
 801360a:	461a      	mov	r2, r3
 801360c:	f7f0 fdf6 	bl	80041fc <_write>
 8013610:	1c43      	adds	r3, r0, #1
 8013612:	d102      	bne.n	801361a <_write_r+0x1e>
 8013614:	682b      	ldr	r3, [r5, #0]
 8013616:	b103      	cbz	r3, 801361a <_write_r+0x1e>
 8013618:	6023      	str	r3, [r4, #0]
 801361a:	bd38      	pop	{r3, r4, r5, pc}
 801361c:	20005028 	.word	0x20005028

08013620 <__errno>:
 8013620:	4b01      	ldr	r3, [pc, #4]	@ (8013628 <__errno+0x8>)
 8013622:	6818      	ldr	r0, [r3, #0]
 8013624:	4770      	bx	lr
 8013626:	bf00      	nop
 8013628:	2000001c 	.word	0x2000001c

0801362c <__libc_init_array>:
 801362c:	b570      	push	{r4, r5, r6, lr}
 801362e:	4d0d      	ldr	r5, [pc, #52]	@ (8013664 <__libc_init_array+0x38>)
 8013630:	4c0d      	ldr	r4, [pc, #52]	@ (8013668 <__libc_init_array+0x3c>)
 8013632:	1b64      	subs	r4, r4, r5
 8013634:	10a4      	asrs	r4, r4, #2
 8013636:	2600      	movs	r6, #0
 8013638:	42a6      	cmp	r6, r4
 801363a:	d109      	bne.n	8013650 <__libc_init_array+0x24>
 801363c:	4d0b      	ldr	r5, [pc, #44]	@ (801366c <__libc_init_array+0x40>)
 801363e:	4c0c      	ldr	r4, [pc, #48]	@ (8013670 <__libc_init_array+0x44>)
 8013640:	f002 fd32 	bl	80160a8 <_init>
 8013644:	1b64      	subs	r4, r4, r5
 8013646:	10a4      	asrs	r4, r4, #2
 8013648:	2600      	movs	r6, #0
 801364a:	42a6      	cmp	r6, r4
 801364c:	d105      	bne.n	801365a <__libc_init_array+0x2e>
 801364e:	bd70      	pop	{r4, r5, r6, pc}
 8013650:	f855 3b04 	ldr.w	r3, [r5], #4
 8013654:	4798      	blx	r3
 8013656:	3601      	adds	r6, #1
 8013658:	e7ee      	b.n	8013638 <__libc_init_array+0xc>
 801365a:	f855 3b04 	ldr.w	r3, [r5], #4
 801365e:	4798      	blx	r3
 8013660:	3601      	adds	r6, #1
 8013662:	e7f2      	b.n	801364a <__libc_init_array+0x1e>
 8013664:	08016db4 	.word	0x08016db4
 8013668:	08016db4 	.word	0x08016db4
 801366c:	08016db4 	.word	0x08016db4
 8013670:	08016db8 	.word	0x08016db8

08013674 <__retarget_lock_init_recursive>:
 8013674:	4770      	bx	lr

08013676 <__retarget_lock_acquire_recursive>:
 8013676:	4770      	bx	lr

08013678 <__retarget_lock_release_recursive>:
 8013678:	4770      	bx	lr

0801367a <memcpy>:
 801367a:	440a      	add	r2, r1
 801367c:	4291      	cmp	r1, r2
 801367e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013682:	d100      	bne.n	8013686 <memcpy+0xc>
 8013684:	4770      	bx	lr
 8013686:	b510      	push	{r4, lr}
 8013688:	f811 4b01 	ldrb.w	r4, [r1], #1
 801368c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013690:	4291      	cmp	r1, r2
 8013692:	d1f9      	bne.n	8013688 <memcpy+0xe>
 8013694:	bd10      	pop	{r4, pc}

08013696 <quorem>:
 8013696:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801369a:	6903      	ldr	r3, [r0, #16]
 801369c:	690c      	ldr	r4, [r1, #16]
 801369e:	42a3      	cmp	r3, r4
 80136a0:	4607      	mov	r7, r0
 80136a2:	db7e      	blt.n	80137a2 <quorem+0x10c>
 80136a4:	3c01      	subs	r4, #1
 80136a6:	f101 0814 	add.w	r8, r1, #20
 80136aa:	00a3      	lsls	r3, r4, #2
 80136ac:	f100 0514 	add.w	r5, r0, #20
 80136b0:	9300      	str	r3, [sp, #0]
 80136b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80136b6:	9301      	str	r3, [sp, #4]
 80136b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80136bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80136c0:	3301      	adds	r3, #1
 80136c2:	429a      	cmp	r2, r3
 80136c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80136c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80136cc:	d32e      	bcc.n	801372c <quorem+0x96>
 80136ce:	f04f 0a00 	mov.w	sl, #0
 80136d2:	46c4      	mov	ip, r8
 80136d4:	46ae      	mov	lr, r5
 80136d6:	46d3      	mov	fp, sl
 80136d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80136dc:	b298      	uxth	r0, r3
 80136de:	fb06 a000 	mla	r0, r6, r0, sl
 80136e2:	0c02      	lsrs	r2, r0, #16
 80136e4:	0c1b      	lsrs	r3, r3, #16
 80136e6:	fb06 2303 	mla	r3, r6, r3, r2
 80136ea:	f8de 2000 	ldr.w	r2, [lr]
 80136ee:	b280      	uxth	r0, r0
 80136f0:	b292      	uxth	r2, r2
 80136f2:	1a12      	subs	r2, r2, r0
 80136f4:	445a      	add	r2, fp
 80136f6:	f8de 0000 	ldr.w	r0, [lr]
 80136fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80136fe:	b29b      	uxth	r3, r3
 8013700:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013704:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013708:	b292      	uxth	r2, r2
 801370a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801370e:	45e1      	cmp	r9, ip
 8013710:	f84e 2b04 	str.w	r2, [lr], #4
 8013714:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013718:	d2de      	bcs.n	80136d8 <quorem+0x42>
 801371a:	9b00      	ldr	r3, [sp, #0]
 801371c:	58eb      	ldr	r3, [r5, r3]
 801371e:	b92b      	cbnz	r3, 801372c <quorem+0x96>
 8013720:	9b01      	ldr	r3, [sp, #4]
 8013722:	3b04      	subs	r3, #4
 8013724:	429d      	cmp	r5, r3
 8013726:	461a      	mov	r2, r3
 8013728:	d32f      	bcc.n	801378a <quorem+0xf4>
 801372a:	613c      	str	r4, [r7, #16]
 801372c:	4638      	mov	r0, r7
 801372e:	f001 f97d 	bl	8014a2c <__mcmp>
 8013732:	2800      	cmp	r0, #0
 8013734:	db25      	blt.n	8013782 <quorem+0xec>
 8013736:	4629      	mov	r1, r5
 8013738:	2000      	movs	r0, #0
 801373a:	f858 2b04 	ldr.w	r2, [r8], #4
 801373e:	f8d1 c000 	ldr.w	ip, [r1]
 8013742:	fa1f fe82 	uxth.w	lr, r2
 8013746:	fa1f f38c 	uxth.w	r3, ip
 801374a:	eba3 030e 	sub.w	r3, r3, lr
 801374e:	4403      	add	r3, r0
 8013750:	0c12      	lsrs	r2, r2, #16
 8013752:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013756:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801375a:	b29b      	uxth	r3, r3
 801375c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013760:	45c1      	cmp	r9, r8
 8013762:	f841 3b04 	str.w	r3, [r1], #4
 8013766:	ea4f 4022 	mov.w	r0, r2, asr #16
 801376a:	d2e6      	bcs.n	801373a <quorem+0xa4>
 801376c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013770:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013774:	b922      	cbnz	r2, 8013780 <quorem+0xea>
 8013776:	3b04      	subs	r3, #4
 8013778:	429d      	cmp	r5, r3
 801377a:	461a      	mov	r2, r3
 801377c:	d30b      	bcc.n	8013796 <quorem+0x100>
 801377e:	613c      	str	r4, [r7, #16]
 8013780:	3601      	adds	r6, #1
 8013782:	4630      	mov	r0, r6
 8013784:	b003      	add	sp, #12
 8013786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801378a:	6812      	ldr	r2, [r2, #0]
 801378c:	3b04      	subs	r3, #4
 801378e:	2a00      	cmp	r2, #0
 8013790:	d1cb      	bne.n	801372a <quorem+0x94>
 8013792:	3c01      	subs	r4, #1
 8013794:	e7c6      	b.n	8013724 <quorem+0x8e>
 8013796:	6812      	ldr	r2, [r2, #0]
 8013798:	3b04      	subs	r3, #4
 801379a:	2a00      	cmp	r2, #0
 801379c:	d1ef      	bne.n	801377e <quorem+0xe8>
 801379e:	3c01      	subs	r4, #1
 80137a0:	e7ea      	b.n	8013778 <quorem+0xe2>
 80137a2:	2000      	movs	r0, #0
 80137a4:	e7ee      	b.n	8013784 <quorem+0xee>
	...

080137a8 <_dtoa_r>:
 80137a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ac:	69c7      	ldr	r7, [r0, #28]
 80137ae:	b097      	sub	sp, #92	@ 0x5c
 80137b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80137b4:	ec55 4b10 	vmov	r4, r5, d0
 80137b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80137ba:	9107      	str	r1, [sp, #28]
 80137bc:	4681      	mov	r9, r0
 80137be:	920c      	str	r2, [sp, #48]	@ 0x30
 80137c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80137c2:	b97f      	cbnz	r7, 80137e4 <_dtoa_r+0x3c>
 80137c4:	2010      	movs	r0, #16
 80137c6:	f000 fe09 	bl	80143dc <malloc>
 80137ca:	4602      	mov	r2, r0
 80137cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80137d0:	b920      	cbnz	r0, 80137dc <_dtoa_r+0x34>
 80137d2:	4ba9      	ldr	r3, [pc, #676]	@ (8013a78 <_dtoa_r+0x2d0>)
 80137d4:	21ef      	movs	r1, #239	@ 0xef
 80137d6:	48a9      	ldr	r0, [pc, #676]	@ (8013a7c <_dtoa_r+0x2d4>)
 80137d8:	f001 fe24 	bl	8015424 <__assert_func>
 80137dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80137e0:	6007      	str	r7, [r0, #0]
 80137e2:	60c7      	str	r7, [r0, #12]
 80137e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80137e8:	6819      	ldr	r1, [r3, #0]
 80137ea:	b159      	cbz	r1, 8013804 <_dtoa_r+0x5c>
 80137ec:	685a      	ldr	r2, [r3, #4]
 80137ee:	604a      	str	r2, [r1, #4]
 80137f0:	2301      	movs	r3, #1
 80137f2:	4093      	lsls	r3, r2
 80137f4:	608b      	str	r3, [r1, #8]
 80137f6:	4648      	mov	r0, r9
 80137f8:	f000 fee6 	bl	80145c8 <_Bfree>
 80137fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013800:	2200      	movs	r2, #0
 8013802:	601a      	str	r2, [r3, #0]
 8013804:	1e2b      	subs	r3, r5, #0
 8013806:	bfb9      	ittee	lt
 8013808:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801380c:	9305      	strlt	r3, [sp, #20]
 801380e:	2300      	movge	r3, #0
 8013810:	6033      	strge	r3, [r6, #0]
 8013812:	9f05      	ldr	r7, [sp, #20]
 8013814:	4b9a      	ldr	r3, [pc, #616]	@ (8013a80 <_dtoa_r+0x2d8>)
 8013816:	bfbc      	itt	lt
 8013818:	2201      	movlt	r2, #1
 801381a:	6032      	strlt	r2, [r6, #0]
 801381c:	43bb      	bics	r3, r7
 801381e:	d112      	bne.n	8013846 <_dtoa_r+0x9e>
 8013820:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013822:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013826:	6013      	str	r3, [r2, #0]
 8013828:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801382c:	4323      	orrs	r3, r4
 801382e:	f000 855a 	beq.w	80142e6 <_dtoa_r+0xb3e>
 8013832:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013834:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8013a94 <_dtoa_r+0x2ec>
 8013838:	2b00      	cmp	r3, #0
 801383a:	f000 855c 	beq.w	80142f6 <_dtoa_r+0xb4e>
 801383e:	f10a 0303 	add.w	r3, sl, #3
 8013842:	f000 bd56 	b.w	80142f2 <_dtoa_r+0xb4a>
 8013846:	ed9d 7b04 	vldr	d7, [sp, #16]
 801384a:	2200      	movs	r2, #0
 801384c:	ec51 0b17 	vmov	r0, r1, d7
 8013850:	2300      	movs	r3, #0
 8013852:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8013856:	f7ed f957 	bl	8000b08 <__aeabi_dcmpeq>
 801385a:	4680      	mov	r8, r0
 801385c:	b158      	cbz	r0, 8013876 <_dtoa_r+0xce>
 801385e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013860:	2301      	movs	r3, #1
 8013862:	6013      	str	r3, [r2, #0]
 8013864:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013866:	b113      	cbz	r3, 801386e <_dtoa_r+0xc6>
 8013868:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801386a:	4b86      	ldr	r3, [pc, #536]	@ (8013a84 <_dtoa_r+0x2dc>)
 801386c:	6013      	str	r3, [r2, #0]
 801386e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8013a98 <_dtoa_r+0x2f0>
 8013872:	f000 bd40 	b.w	80142f6 <_dtoa_r+0xb4e>
 8013876:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801387a:	aa14      	add	r2, sp, #80	@ 0x50
 801387c:	a915      	add	r1, sp, #84	@ 0x54
 801387e:	4648      	mov	r0, r9
 8013880:	f001 f984 	bl	8014b8c <__d2b>
 8013884:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013888:	9002      	str	r0, [sp, #8]
 801388a:	2e00      	cmp	r6, #0
 801388c:	d078      	beq.n	8013980 <_dtoa_r+0x1d8>
 801388e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013890:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8013894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013898:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801389c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80138a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80138a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80138a8:	4619      	mov	r1, r3
 80138aa:	2200      	movs	r2, #0
 80138ac:	4b76      	ldr	r3, [pc, #472]	@ (8013a88 <_dtoa_r+0x2e0>)
 80138ae:	f7ec fd0b 	bl	80002c8 <__aeabi_dsub>
 80138b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8013a60 <_dtoa_r+0x2b8>)
 80138b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138b8:	f7ec febe 	bl	8000638 <__aeabi_dmul>
 80138bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8013a68 <_dtoa_r+0x2c0>)
 80138be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138c2:	f7ec fd03 	bl	80002cc <__adddf3>
 80138c6:	4604      	mov	r4, r0
 80138c8:	4630      	mov	r0, r6
 80138ca:	460d      	mov	r5, r1
 80138cc:	f7ec fe4a 	bl	8000564 <__aeabi_i2d>
 80138d0:	a367      	add	r3, pc, #412	@ (adr r3, 8013a70 <_dtoa_r+0x2c8>)
 80138d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d6:	f7ec feaf 	bl	8000638 <__aeabi_dmul>
 80138da:	4602      	mov	r2, r0
 80138dc:	460b      	mov	r3, r1
 80138de:	4620      	mov	r0, r4
 80138e0:	4629      	mov	r1, r5
 80138e2:	f7ec fcf3 	bl	80002cc <__adddf3>
 80138e6:	4604      	mov	r4, r0
 80138e8:	460d      	mov	r5, r1
 80138ea:	f7ed f955 	bl	8000b98 <__aeabi_d2iz>
 80138ee:	2200      	movs	r2, #0
 80138f0:	4607      	mov	r7, r0
 80138f2:	2300      	movs	r3, #0
 80138f4:	4620      	mov	r0, r4
 80138f6:	4629      	mov	r1, r5
 80138f8:	f7ed f910 	bl	8000b1c <__aeabi_dcmplt>
 80138fc:	b140      	cbz	r0, 8013910 <_dtoa_r+0x168>
 80138fe:	4638      	mov	r0, r7
 8013900:	f7ec fe30 	bl	8000564 <__aeabi_i2d>
 8013904:	4622      	mov	r2, r4
 8013906:	462b      	mov	r3, r5
 8013908:	f7ed f8fe 	bl	8000b08 <__aeabi_dcmpeq>
 801390c:	b900      	cbnz	r0, 8013910 <_dtoa_r+0x168>
 801390e:	3f01      	subs	r7, #1
 8013910:	2f16      	cmp	r7, #22
 8013912:	d852      	bhi.n	80139ba <_dtoa_r+0x212>
 8013914:	4b5d      	ldr	r3, [pc, #372]	@ (8013a8c <_dtoa_r+0x2e4>)
 8013916:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801391e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013922:	f7ed f8fb 	bl	8000b1c <__aeabi_dcmplt>
 8013926:	2800      	cmp	r0, #0
 8013928:	d049      	beq.n	80139be <_dtoa_r+0x216>
 801392a:	3f01      	subs	r7, #1
 801392c:	2300      	movs	r3, #0
 801392e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013930:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013932:	1b9b      	subs	r3, r3, r6
 8013934:	1e5a      	subs	r2, r3, #1
 8013936:	bf45      	ittet	mi
 8013938:	f1c3 0301 	rsbmi	r3, r3, #1
 801393c:	9300      	strmi	r3, [sp, #0]
 801393e:	2300      	movpl	r3, #0
 8013940:	2300      	movmi	r3, #0
 8013942:	9206      	str	r2, [sp, #24]
 8013944:	bf54      	ite	pl
 8013946:	9300      	strpl	r3, [sp, #0]
 8013948:	9306      	strmi	r3, [sp, #24]
 801394a:	2f00      	cmp	r7, #0
 801394c:	db39      	blt.n	80139c2 <_dtoa_r+0x21a>
 801394e:	9b06      	ldr	r3, [sp, #24]
 8013950:	970d      	str	r7, [sp, #52]	@ 0x34
 8013952:	443b      	add	r3, r7
 8013954:	9306      	str	r3, [sp, #24]
 8013956:	2300      	movs	r3, #0
 8013958:	9308      	str	r3, [sp, #32]
 801395a:	9b07      	ldr	r3, [sp, #28]
 801395c:	2b09      	cmp	r3, #9
 801395e:	d863      	bhi.n	8013a28 <_dtoa_r+0x280>
 8013960:	2b05      	cmp	r3, #5
 8013962:	bfc4      	itt	gt
 8013964:	3b04      	subgt	r3, #4
 8013966:	9307      	strgt	r3, [sp, #28]
 8013968:	9b07      	ldr	r3, [sp, #28]
 801396a:	f1a3 0302 	sub.w	r3, r3, #2
 801396e:	bfcc      	ite	gt
 8013970:	2400      	movgt	r4, #0
 8013972:	2401      	movle	r4, #1
 8013974:	2b03      	cmp	r3, #3
 8013976:	d863      	bhi.n	8013a40 <_dtoa_r+0x298>
 8013978:	e8df f003 	tbb	[pc, r3]
 801397c:	2b375452 	.word	0x2b375452
 8013980:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8013984:	441e      	add	r6, r3
 8013986:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801398a:	2b20      	cmp	r3, #32
 801398c:	bfc1      	itttt	gt
 801398e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013992:	409f      	lslgt	r7, r3
 8013994:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013998:	fa24 f303 	lsrgt.w	r3, r4, r3
 801399c:	bfd6      	itet	le
 801399e:	f1c3 0320 	rsble	r3, r3, #32
 80139a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80139a6:	fa04 f003 	lslle.w	r0, r4, r3
 80139aa:	f7ec fdcb 	bl	8000544 <__aeabi_ui2d>
 80139ae:	2201      	movs	r2, #1
 80139b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80139b4:	3e01      	subs	r6, #1
 80139b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80139b8:	e776      	b.n	80138a8 <_dtoa_r+0x100>
 80139ba:	2301      	movs	r3, #1
 80139bc:	e7b7      	b.n	801392e <_dtoa_r+0x186>
 80139be:	9010      	str	r0, [sp, #64]	@ 0x40
 80139c0:	e7b6      	b.n	8013930 <_dtoa_r+0x188>
 80139c2:	9b00      	ldr	r3, [sp, #0]
 80139c4:	1bdb      	subs	r3, r3, r7
 80139c6:	9300      	str	r3, [sp, #0]
 80139c8:	427b      	negs	r3, r7
 80139ca:	9308      	str	r3, [sp, #32]
 80139cc:	2300      	movs	r3, #0
 80139ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80139d0:	e7c3      	b.n	801395a <_dtoa_r+0x1b2>
 80139d2:	2301      	movs	r3, #1
 80139d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80139d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139d8:	eb07 0b03 	add.w	fp, r7, r3
 80139dc:	f10b 0301 	add.w	r3, fp, #1
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	9303      	str	r3, [sp, #12]
 80139e4:	bfb8      	it	lt
 80139e6:	2301      	movlt	r3, #1
 80139e8:	e006      	b.n	80139f8 <_dtoa_r+0x250>
 80139ea:	2301      	movs	r3, #1
 80139ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80139ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	dd28      	ble.n	8013a46 <_dtoa_r+0x29e>
 80139f4:	469b      	mov	fp, r3
 80139f6:	9303      	str	r3, [sp, #12]
 80139f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80139fc:	2100      	movs	r1, #0
 80139fe:	2204      	movs	r2, #4
 8013a00:	f102 0514 	add.w	r5, r2, #20
 8013a04:	429d      	cmp	r5, r3
 8013a06:	d926      	bls.n	8013a56 <_dtoa_r+0x2ae>
 8013a08:	6041      	str	r1, [r0, #4]
 8013a0a:	4648      	mov	r0, r9
 8013a0c:	f000 fd9c 	bl	8014548 <_Balloc>
 8013a10:	4682      	mov	sl, r0
 8013a12:	2800      	cmp	r0, #0
 8013a14:	d142      	bne.n	8013a9c <_dtoa_r+0x2f4>
 8013a16:	4b1e      	ldr	r3, [pc, #120]	@ (8013a90 <_dtoa_r+0x2e8>)
 8013a18:	4602      	mov	r2, r0
 8013a1a:	f240 11af 	movw	r1, #431	@ 0x1af
 8013a1e:	e6da      	b.n	80137d6 <_dtoa_r+0x2e>
 8013a20:	2300      	movs	r3, #0
 8013a22:	e7e3      	b.n	80139ec <_dtoa_r+0x244>
 8013a24:	2300      	movs	r3, #0
 8013a26:	e7d5      	b.n	80139d4 <_dtoa_r+0x22c>
 8013a28:	2401      	movs	r4, #1
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	9307      	str	r3, [sp, #28]
 8013a2e:	9409      	str	r4, [sp, #36]	@ 0x24
 8013a30:	f04f 3bff 	mov.w	fp, #4294967295
 8013a34:	2200      	movs	r2, #0
 8013a36:	f8cd b00c 	str.w	fp, [sp, #12]
 8013a3a:	2312      	movs	r3, #18
 8013a3c:	920c      	str	r2, [sp, #48]	@ 0x30
 8013a3e:	e7db      	b.n	80139f8 <_dtoa_r+0x250>
 8013a40:	2301      	movs	r3, #1
 8013a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a44:	e7f4      	b.n	8013a30 <_dtoa_r+0x288>
 8013a46:	f04f 0b01 	mov.w	fp, #1
 8013a4a:	f8cd b00c 	str.w	fp, [sp, #12]
 8013a4e:	465b      	mov	r3, fp
 8013a50:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8013a54:	e7d0      	b.n	80139f8 <_dtoa_r+0x250>
 8013a56:	3101      	adds	r1, #1
 8013a58:	0052      	lsls	r2, r2, #1
 8013a5a:	e7d1      	b.n	8013a00 <_dtoa_r+0x258>
 8013a5c:	f3af 8000 	nop.w
 8013a60:	636f4361 	.word	0x636f4361
 8013a64:	3fd287a7 	.word	0x3fd287a7
 8013a68:	8b60c8b3 	.word	0x8b60c8b3
 8013a6c:	3fc68a28 	.word	0x3fc68a28
 8013a70:	509f79fb 	.word	0x509f79fb
 8013a74:	3fd34413 	.word	0x3fd34413
 8013a78:	08016a25 	.word	0x08016a25
 8013a7c:	08016a3c 	.word	0x08016a3c
 8013a80:	7ff00000 	.word	0x7ff00000
 8013a84:	080169f5 	.word	0x080169f5
 8013a88:	3ff80000 	.word	0x3ff80000
 8013a8c:	08016b90 	.word	0x08016b90
 8013a90:	08016a94 	.word	0x08016a94
 8013a94:	08016a21 	.word	0x08016a21
 8013a98:	080169f4 	.word	0x080169f4
 8013a9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013aa0:	6018      	str	r0, [r3, #0]
 8013aa2:	9b03      	ldr	r3, [sp, #12]
 8013aa4:	2b0e      	cmp	r3, #14
 8013aa6:	f200 80a1 	bhi.w	8013bec <_dtoa_r+0x444>
 8013aaa:	2c00      	cmp	r4, #0
 8013aac:	f000 809e 	beq.w	8013bec <_dtoa_r+0x444>
 8013ab0:	2f00      	cmp	r7, #0
 8013ab2:	dd33      	ble.n	8013b1c <_dtoa_r+0x374>
 8013ab4:	4b9c      	ldr	r3, [pc, #624]	@ (8013d28 <_dtoa_r+0x580>)
 8013ab6:	f007 020f 	and.w	r2, r7, #15
 8013aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013abe:	ed93 7b00 	vldr	d7, [r3]
 8013ac2:	05f8      	lsls	r0, r7, #23
 8013ac4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8013ac8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013acc:	d516      	bpl.n	8013afc <_dtoa_r+0x354>
 8013ace:	4b97      	ldr	r3, [pc, #604]	@ (8013d2c <_dtoa_r+0x584>)
 8013ad0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013ad4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013ad8:	f7ec fed8 	bl	800088c <__aeabi_ddiv>
 8013adc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ae0:	f004 040f 	and.w	r4, r4, #15
 8013ae4:	2603      	movs	r6, #3
 8013ae6:	4d91      	ldr	r5, [pc, #580]	@ (8013d2c <_dtoa_r+0x584>)
 8013ae8:	b954      	cbnz	r4, 8013b00 <_dtoa_r+0x358>
 8013aea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013aee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013af2:	f7ec fecb 	bl	800088c <__aeabi_ddiv>
 8013af6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013afa:	e028      	b.n	8013b4e <_dtoa_r+0x3a6>
 8013afc:	2602      	movs	r6, #2
 8013afe:	e7f2      	b.n	8013ae6 <_dtoa_r+0x33e>
 8013b00:	07e1      	lsls	r1, r4, #31
 8013b02:	d508      	bpl.n	8013b16 <_dtoa_r+0x36e>
 8013b04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013b08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b0c:	f7ec fd94 	bl	8000638 <__aeabi_dmul>
 8013b10:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013b14:	3601      	adds	r6, #1
 8013b16:	1064      	asrs	r4, r4, #1
 8013b18:	3508      	adds	r5, #8
 8013b1a:	e7e5      	b.n	8013ae8 <_dtoa_r+0x340>
 8013b1c:	f000 80af 	beq.w	8013c7e <_dtoa_r+0x4d6>
 8013b20:	427c      	negs	r4, r7
 8013b22:	4b81      	ldr	r3, [pc, #516]	@ (8013d28 <_dtoa_r+0x580>)
 8013b24:	4d81      	ldr	r5, [pc, #516]	@ (8013d2c <_dtoa_r+0x584>)
 8013b26:	f004 020f 	and.w	r2, r4, #15
 8013b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013b36:	f7ec fd7f 	bl	8000638 <__aeabi_dmul>
 8013b3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b3e:	1124      	asrs	r4, r4, #4
 8013b40:	2300      	movs	r3, #0
 8013b42:	2602      	movs	r6, #2
 8013b44:	2c00      	cmp	r4, #0
 8013b46:	f040 808f 	bne.w	8013c68 <_dtoa_r+0x4c0>
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d1d3      	bne.n	8013af6 <_dtoa_r+0x34e>
 8013b4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013b50:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	f000 8094 	beq.w	8013c82 <_dtoa_r+0x4da>
 8013b5a:	4b75      	ldr	r3, [pc, #468]	@ (8013d30 <_dtoa_r+0x588>)
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	4620      	mov	r0, r4
 8013b60:	4629      	mov	r1, r5
 8013b62:	f7ec ffdb 	bl	8000b1c <__aeabi_dcmplt>
 8013b66:	2800      	cmp	r0, #0
 8013b68:	f000 808b 	beq.w	8013c82 <_dtoa_r+0x4da>
 8013b6c:	9b03      	ldr	r3, [sp, #12]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	f000 8087 	beq.w	8013c82 <_dtoa_r+0x4da>
 8013b74:	f1bb 0f00 	cmp.w	fp, #0
 8013b78:	dd34      	ble.n	8013be4 <_dtoa_r+0x43c>
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	4b6d      	ldr	r3, [pc, #436]	@ (8013d34 <_dtoa_r+0x58c>)
 8013b7e:	2200      	movs	r2, #0
 8013b80:	4629      	mov	r1, r5
 8013b82:	f7ec fd59 	bl	8000638 <__aeabi_dmul>
 8013b86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b8a:	f107 38ff 	add.w	r8, r7, #4294967295
 8013b8e:	3601      	adds	r6, #1
 8013b90:	465c      	mov	r4, fp
 8013b92:	4630      	mov	r0, r6
 8013b94:	f7ec fce6 	bl	8000564 <__aeabi_i2d>
 8013b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b9c:	f7ec fd4c 	bl	8000638 <__aeabi_dmul>
 8013ba0:	4b65      	ldr	r3, [pc, #404]	@ (8013d38 <_dtoa_r+0x590>)
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	f7ec fb92 	bl	80002cc <__adddf3>
 8013ba8:	4605      	mov	r5, r0
 8013baa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013bae:	2c00      	cmp	r4, #0
 8013bb0:	d16a      	bne.n	8013c88 <_dtoa_r+0x4e0>
 8013bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013bb6:	4b61      	ldr	r3, [pc, #388]	@ (8013d3c <_dtoa_r+0x594>)
 8013bb8:	2200      	movs	r2, #0
 8013bba:	f7ec fb85 	bl	80002c8 <__aeabi_dsub>
 8013bbe:	4602      	mov	r2, r0
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013bc6:	462a      	mov	r2, r5
 8013bc8:	4633      	mov	r3, r6
 8013bca:	f7ec ffc5 	bl	8000b58 <__aeabi_dcmpgt>
 8013bce:	2800      	cmp	r0, #0
 8013bd0:	f040 8298 	bne.w	8014104 <_dtoa_r+0x95c>
 8013bd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013bd8:	462a      	mov	r2, r5
 8013bda:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013bde:	f7ec ff9d 	bl	8000b1c <__aeabi_dcmplt>
 8013be2:	bb38      	cbnz	r0, 8013c34 <_dtoa_r+0x48c>
 8013be4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8013be8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013bec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	f2c0 8157 	blt.w	8013ea2 <_dtoa_r+0x6fa>
 8013bf4:	2f0e      	cmp	r7, #14
 8013bf6:	f300 8154 	bgt.w	8013ea2 <_dtoa_r+0x6fa>
 8013bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8013d28 <_dtoa_r+0x580>)
 8013bfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013c00:	ed93 7b00 	vldr	d7, [r3]
 8013c04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	ed8d 7b00 	vstr	d7, [sp]
 8013c0c:	f280 80e5 	bge.w	8013dda <_dtoa_r+0x632>
 8013c10:	9b03      	ldr	r3, [sp, #12]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	f300 80e1 	bgt.w	8013dda <_dtoa_r+0x632>
 8013c18:	d10c      	bne.n	8013c34 <_dtoa_r+0x48c>
 8013c1a:	4b48      	ldr	r3, [pc, #288]	@ (8013d3c <_dtoa_r+0x594>)
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	ec51 0b17 	vmov	r0, r1, d7
 8013c22:	f7ec fd09 	bl	8000638 <__aeabi_dmul>
 8013c26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c2a:	f7ec ff8b 	bl	8000b44 <__aeabi_dcmpge>
 8013c2e:	2800      	cmp	r0, #0
 8013c30:	f000 8266 	beq.w	8014100 <_dtoa_r+0x958>
 8013c34:	2400      	movs	r4, #0
 8013c36:	4625      	mov	r5, r4
 8013c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013c3a:	4656      	mov	r6, sl
 8013c3c:	ea6f 0803 	mvn.w	r8, r3
 8013c40:	2700      	movs	r7, #0
 8013c42:	4621      	mov	r1, r4
 8013c44:	4648      	mov	r0, r9
 8013c46:	f000 fcbf 	bl	80145c8 <_Bfree>
 8013c4a:	2d00      	cmp	r5, #0
 8013c4c:	f000 80bd 	beq.w	8013dca <_dtoa_r+0x622>
 8013c50:	b12f      	cbz	r7, 8013c5e <_dtoa_r+0x4b6>
 8013c52:	42af      	cmp	r7, r5
 8013c54:	d003      	beq.n	8013c5e <_dtoa_r+0x4b6>
 8013c56:	4639      	mov	r1, r7
 8013c58:	4648      	mov	r0, r9
 8013c5a:	f000 fcb5 	bl	80145c8 <_Bfree>
 8013c5e:	4629      	mov	r1, r5
 8013c60:	4648      	mov	r0, r9
 8013c62:	f000 fcb1 	bl	80145c8 <_Bfree>
 8013c66:	e0b0      	b.n	8013dca <_dtoa_r+0x622>
 8013c68:	07e2      	lsls	r2, r4, #31
 8013c6a:	d505      	bpl.n	8013c78 <_dtoa_r+0x4d0>
 8013c6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013c70:	f7ec fce2 	bl	8000638 <__aeabi_dmul>
 8013c74:	3601      	adds	r6, #1
 8013c76:	2301      	movs	r3, #1
 8013c78:	1064      	asrs	r4, r4, #1
 8013c7a:	3508      	adds	r5, #8
 8013c7c:	e762      	b.n	8013b44 <_dtoa_r+0x39c>
 8013c7e:	2602      	movs	r6, #2
 8013c80:	e765      	b.n	8013b4e <_dtoa_r+0x3a6>
 8013c82:	9c03      	ldr	r4, [sp, #12]
 8013c84:	46b8      	mov	r8, r7
 8013c86:	e784      	b.n	8013b92 <_dtoa_r+0x3ea>
 8013c88:	4b27      	ldr	r3, [pc, #156]	@ (8013d28 <_dtoa_r+0x580>)
 8013c8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013c8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013c90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013c94:	4454      	add	r4, sl
 8013c96:	2900      	cmp	r1, #0
 8013c98:	d054      	beq.n	8013d44 <_dtoa_r+0x59c>
 8013c9a:	4929      	ldr	r1, [pc, #164]	@ (8013d40 <_dtoa_r+0x598>)
 8013c9c:	2000      	movs	r0, #0
 8013c9e:	f7ec fdf5 	bl	800088c <__aeabi_ddiv>
 8013ca2:	4633      	mov	r3, r6
 8013ca4:	462a      	mov	r2, r5
 8013ca6:	f7ec fb0f 	bl	80002c8 <__aeabi_dsub>
 8013caa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013cae:	4656      	mov	r6, sl
 8013cb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013cb4:	f7ec ff70 	bl	8000b98 <__aeabi_d2iz>
 8013cb8:	4605      	mov	r5, r0
 8013cba:	f7ec fc53 	bl	8000564 <__aeabi_i2d>
 8013cbe:	4602      	mov	r2, r0
 8013cc0:	460b      	mov	r3, r1
 8013cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013cc6:	f7ec faff 	bl	80002c8 <__aeabi_dsub>
 8013cca:	3530      	adds	r5, #48	@ 0x30
 8013ccc:	4602      	mov	r2, r0
 8013cce:	460b      	mov	r3, r1
 8013cd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013cd4:	f806 5b01 	strb.w	r5, [r6], #1
 8013cd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013cdc:	f7ec ff1e 	bl	8000b1c <__aeabi_dcmplt>
 8013ce0:	2800      	cmp	r0, #0
 8013ce2:	d172      	bne.n	8013dca <_dtoa_r+0x622>
 8013ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ce8:	4911      	ldr	r1, [pc, #68]	@ (8013d30 <_dtoa_r+0x588>)
 8013cea:	2000      	movs	r0, #0
 8013cec:	f7ec faec 	bl	80002c8 <__aeabi_dsub>
 8013cf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013cf4:	f7ec ff12 	bl	8000b1c <__aeabi_dcmplt>
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	f040 80b4 	bne.w	8013e66 <_dtoa_r+0x6be>
 8013cfe:	42a6      	cmp	r6, r4
 8013d00:	f43f af70 	beq.w	8013be4 <_dtoa_r+0x43c>
 8013d04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013d08:	4b0a      	ldr	r3, [pc, #40]	@ (8013d34 <_dtoa_r+0x58c>)
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	f7ec fc94 	bl	8000638 <__aeabi_dmul>
 8013d10:	4b08      	ldr	r3, [pc, #32]	@ (8013d34 <_dtoa_r+0x58c>)
 8013d12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013d16:	2200      	movs	r2, #0
 8013d18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d1c:	f7ec fc8c 	bl	8000638 <__aeabi_dmul>
 8013d20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013d24:	e7c4      	b.n	8013cb0 <_dtoa_r+0x508>
 8013d26:	bf00      	nop
 8013d28:	08016b90 	.word	0x08016b90
 8013d2c:	08016b68 	.word	0x08016b68
 8013d30:	3ff00000 	.word	0x3ff00000
 8013d34:	40240000 	.word	0x40240000
 8013d38:	401c0000 	.word	0x401c0000
 8013d3c:	40140000 	.word	0x40140000
 8013d40:	3fe00000 	.word	0x3fe00000
 8013d44:	4631      	mov	r1, r6
 8013d46:	4628      	mov	r0, r5
 8013d48:	f7ec fc76 	bl	8000638 <__aeabi_dmul>
 8013d4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013d50:	9413      	str	r4, [sp, #76]	@ 0x4c
 8013d52:	4656      	mov	r6, sl
 8013d54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d58:	f7ec ff1e 	bl	8000b98 <__aeabi_d2iz>
 8013d5c:	4605      	mov	r5, r0
 8013d5e:	f7ec fc01 	bl	8000564 <__aeabi_i2d>
 8013d62:	4602      	mov	r2, r0
 8013d64:	460b      	mov	r3, r1
 8013d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d6a:	f7ec faad 	bl	80002c8 <__aeabi_dsub>
 8013d6e:	3530      	adds	r5, #48	@ 0x30
 8013d70:	f806 5b01 	strb.w	r5, [r6], #1
 8013d74:	4602      	mov	r2, r0
 8013d76:	460b      	mov	r3, r1
 8013d78:	42a6      	cmp	r6, r4
 8013d7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013d7e:	f04f 0200 	mov.w	r2, #0
 8013d82:	d124      	bne.n	8013dce <_dtoa_r+0x626>
 8013d84:	4baf      	ldr	r3, [pc, #700]	@ (8014044 <_dtoa_r+0x89c>)
 8013d86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013d8a:	f7ec fa9f 	bl	80002cc <__adddf3>
 8013d8e:	4602      	mov	r2, r0
 8013d90:	460b      	mov	r3, r1
 8013d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d96:	f7ec fedf 	bl	8000b58 <__aeabi_dcmpgt>
 8013d9a:	2800      	cmp	r0, #0
 8013d9c:	d163      	bne.n	8013e66 <_dtoa_r+0x6be>
 8013d9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013da2:	49a8      	ldr	r1, [pc, #672]	@ (8014044 <_dtoa_r+0x89c>)
 8013da4:	2000      	movs	r0, #0
 8013da6:	f7ec fa8f 	bl	80002c8 <__aeabi_dsub>
 8013daa:	4602      	mov	r2, r0
 8013dac:	460b      	mov	r3, r1
 8013dae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013db2:	f7ec feb3 	bl	8000b1c <__aeabi_dcmplt>
 8013db6:	2800      	cmp	r0, #0
 8013db8:	f43f af14 	beq.w	8013be4 <_dtoa_r+0x43c>
 8013dbc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8013dbe:	1e73      	subs	r3, r6, #1
 8013dc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013dc2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013dc6:	2b30      	cmp	r3, #48	@ 0x30
 8013dc8:	d0f8      	beq.n	8013dbc <_dtoa_r+0x614>
 8013dca:	4647      	mov	r7, r8
 8013dcc:	e03b      	b.n	8013e46 <_dtoa_r+0x69e>
 8013dce:	4b9e      	ldr	r3, [pc, #632]	@ (8014048 <_dtoa_r+0x8a0>)
 8013dd0:	f7ec fc32 	bl	8000638 <__aeabi_dmul>
 8013dd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013dd8:	e7bc      	b.n	8013d54 <_dtoa_r+0x5ac>
 8013dda:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013dde:	4656      	mov	r6, sl
 8013de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013de4:	4620      	mov	r0, r4
 8013de6:	4629      	mov	r1, r5
 8013de8:	f7ec fd50 	bl	800088c <__aeabi_ddiv>
 8013dec:	f7ec fed4 	bl	8000b98 <__aeabi_d2iz>
 8013df0:	4680      	mov	r8, r0
 8013df2:	f7ec fbb7 	bl	8000564 <__aeabi_i2d>
 8013df6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013dfa:	f7ec fc1d 	bl	8000638 <__aeabi_dmul>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	460b      	mov	r3, r1
 8013e02:	4620      	mov	r0, r4
 8013e04:	4629      	mov	r1, r5
 8013e06:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013e0a:	f7ec fa5d 	bl	80002c8 <__aeabi_dsub>
 8013e0e:	f806 4b01 	strb.w	r4, [r6], #1
 8013e12:	9d03      	ldr	r5, [sp, #12]
 8013e14:	eba6 040a 	sub.w	r4, r6, sl
 8013e18:	42a5      	cmp	r5, r4
 8013e1a:	4602      	mov	r2, r0
 8013e1c:	460b      	mov	r3, r1
 8013e1e:	d133      	bne.n	8013e88 <_dtoa_r+0x6e0>
 8013e20:	f7ec fa54 	bl	80002cc <__adddf3>
 8013e24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e28:	4604      	mov	r4, r0
 8013e2a:	460d      	mov	r5, r1
 8013e2c:	f7ec fe94 	bl	8000b58 <__aeabi_dcmpgt>
 8013e30:	b9c0      	cbnz	r0, 8013e64 <_dtoa_r+0x6bc>
 8013e32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e36:	4620      	mov	r0, r4
 8013e38:	4629      	mov	r1, r5
 8013e3a:	f7ec fe65 	bl	8000b08 <__aeabi_dcmpeq>
 8013e3e:	b110      	cbz	r0, 8013e46 <_dtoa_r+0x69e>
 8013e40:	f018 0f01 	tst.w	r8, #1
 8013e44:	d10e      	bne.n	8013e64 <_dtoa_r+0x6bc>
 8013e46:	9902      	ldr	r1, [sp, #8]
 8013e48:	4648      	mov	r0, r9
 8013e4a:	f000 fbbd 	bl	80145c8 <_Bfree>
 8013e4e:	2300      	movs	r3, #0
 8013e50:	7033      	strb	r3, [r6, #0]
 8013e52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013e54:	3701      	adds	r7, #1
 8013e56:	601f      	str	r7, [r3, #0]
 8013e58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	f000 824b 	beq.w	80142f6 <_dtoa_r+0xb4e>
 8013e60:	601e      	str	r6, [r3, #0]
 8013e62:	e248      	b.n	80142f6 <_dtoa_r+0xb4e>
 8013e64:	46b8      	mov	r8, r7
 8013e66:	4633      	mov	r3, r6
 8013e68:	461e      	mov	r6, r3
 8013e6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e6e:	2a39      	cmp	r2, #57	@ 0x39
 8013e70:	d106      	bne.n	8013e80 <_dtoa_r+0x6d8>
 8013e72:	459a      	cmp	sl, r3
 8013e74:	d1f8      	bne.n	8013e68 <_dtoa_r+0x6c0>
 8013e76:	2230      	movs	r2, #48	@ 0x30
 8013e78:	f108 0801 	add.w	r8, r8, #1
 8013e7c:	f88a 2000 	strb.w	r2, [sl]
 8013e80:	781a      	ldrb	r2, [r3, #0]
 8013e82:	3201      	adds	r2, #1
 8013e84:	701a      	strb	r2, [r3, #0]
 8013e86:	e7a0      	b.n	8013dca <_dtoa_r+0x622>
 8013e88:	4b6f      	ldr	r3, [pc, #444]	@ (8014048 <_dtoa_r+0x8a0>)
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	f7ec fbd4 	bl	8000638 <__aeabi_dmul>
 8013e90:	2200      	movs	r2, #0
 8013e92:	2300      	movs	r3, #0
 8013e94:	4604      	mov	r4, r0
 8013e96:	460d      	mov	r5, r1
 8013e98:	f7ec fe36 	bl	8000b08 <__aeabi_dcmpeq>
 8013e9c:	2800      	cmp	r0, #0
 8013e9e:	d09f      	beq.n	8013de0 <_dtoa_r+0x638>
 8013ea0:	e7d1      	b.n	8013e46 <_dtoa_r+0x69e>
 8013ea2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ea4:	2a00      	cmp	r2, #0
 8013ea6:	f000 80ea 	beq.w	801407e <_dtoa_r+0x8d6>
 8013eaa:	9a07      	ldr	r2, [sp, #28]
 8013eac:	2a01      	cmp	r2, #1
 8013eae:	f300 80cd 	bgt.w	801404c <_dtoa_r+0x8a4>
 8013eb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013eb4:	2a00      	cmp	r2, #0
 8013eb6:	f000 80c1 	beq.w	801403c <_dtoa_r+0x894>
 8013eba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013ebe:	9c08      	ldr	r4, [sp, #32]
 8013ec0:	9e00      	ldr	r6, [sp, #0]
 8013ec2:	9a00      	ldr	r2, [sp, #0]
 8013ec4:	441a      	add	r2, r3
 8013ec6:	9200      	str	r2, [sp, #0]
 8013ec8:	9a06      	ldr	r2, [sp, #24]
 8013eca:	2101      	movs	r1, #1
 8013ecc:	441a      	add	r2, r3
 8013ece:	4648      	mov	r0, r9
 8013ed0:	9206      	str	r2, [sp, #24]
 8013ed2:	f000 fc2d 	bl	8014730 <__i2b>
 8013ed6:	4605      	mov	r5, r0
 8013ed8:	b166      	cbz	r6, 8013ef4 <_dtoa_r+0x74c>
 8013eda:	9b06      	ldr	r3, [sp, #24]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	dd09      	ble.n	8013ef4 <_dtoa_r+0x74c>
 8013ee0:	42b3      	cmp	r3, r6
 8013ee2:	9a00      	ldr	r2, [sp, #0]
 8013ee4:	bfa8      	it	ge
 8013ee6:	4633      	movge	r3, r6
 8013ee8:	1ad2      	subs	r2, r2, r3
 8013eea:	9200      	str	r2, [sp, #0]
 8013eec:	9a06      	ldr	r2, [sp, #24]
 8013eee:	1af6      	subs	r6, r6, r3
 8013ef0:	1ad3      	subs	r3, r2, r3
 8013ef2:	9306      	str	r3, [sp, #24]
 8013ef4:	9b08      	ldr	r3, [sp, #32]
 8013ef6:	b30b      	cbz	r3, 8013f3c <_dtoa_r+0x794>
 8013ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	f000 80c6 	beq.w	801408c <_dtoa_r+0x8e4>
 8013f00:	2c00      	cmp	r4, #0
 8013f02:	f000 80c0 	beq.w	8014086 <_dtoa_r+0x8de>
 8013f06:	4629      	mov	r1, r5
 8013f08:	4622      	mov	r2, r4
 8013f0a:	4648      	mov	r0, r9
 8013f0c:	f000 fcc8 	bl	80148a0 <__pow5mult>
 8013f10:	9a02      	ldr	r2, [sp, #8]
 8013f12:	4601      	mov	r1, r0
 8013f14:	4605      	mov	r5, r0
 8013f16:	4648      	mov	r0, r9
 8013f18:	f000 fc20 	bl	801475c <__multiply>
 8013f1c:	9902      	ldr	r1, [sp, #8]
 8013f1e:	4680      	mov	r8, r0
 8013f20:	4648      	mov	r0, r9
 8013f22:	f000 fb51 	bl	80145c8 <_Bfree>
 8013f26:	9b08      	ldr	r3, [sp, #32]
 8013f28:	1b1b      	subs	r3, r3, r4
 8013f2a:	9308      	str	r3, [sp, #32]
 8013f2c:	f000 80b1 	beq.w	8014092 <_dtoa_r+0x8ea>
 8013f30:	9a08      	ldr	r2, [sp, #32]
 8013f32:	4641      	mov	r1, r8
 8013f34:	4648      	mov	r0, r9
 8013f36:	f000 fcb3 	bl	80148a0 <__pow5mult>
 8013f3a:	9002      	str	r0, [sp, #8]
 8013f3c:	2101      	movs	r1, #1
 8013f3e:	4648      	mov	r0, r9
 8013f40:	f000 fbf6 	bl	8014730 <__i2b>
 8013f44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013f46:	4604      	mov	r4, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	f000 81d8 	beq.w	80142fe <_dtoa_r+0xb56>
 8013f4e:	461a      	mov	r2, r3
 8013f50:	4601      	mov	r1, r0
 8013f52:	4648      	mov	r0, r9
 8013f54:	f000 fca4 	bl	80148a0 <__pow5mult>
 8013f58:	9b07      	ldr	r3, [sp, #28]
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	4604      	mov	r4, r0
 8013f5e:	f300 809f 	bgt.w	80140a0 <_dtoa_r+0x8f8>
 8013f62:	9b04      	ldr	r3, [sp, #16]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	f040 8097 	bne.w	8014098 <_dtoa_r+0x8f0>
 8013f6a:	9b05      	ldr	r3, [sp, #20]
 8013f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	f040 8093 	bne.w	801409c <_dtoa_r+0x8f4>
 8013f76:	9b05      	ldr	r3, [sp, #20]
 8013f78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013f7c:	0d1b      	lsrs	r3, r3, #20
 8013f7e:	051b      	lsls	r3, r3, #20
 8013f80:	b133      	cbz	r3, 8013f90 <_dtoa_r+0x7e8>
 8013f82:	9b00      	ldr	r3, [sp, #0]
 8013f84:	3301      	adds	r3, #1
 8013f86:	9300      	str	r3, [sp, #0]
 8013f88:	9b06      	ldr	r3, [sp, #24]
 8013f8a:	3301      	adds	r3, #1
 8013f8c:	9306      	str	r3, [sp, #24]
 8013f8e:	2301      	movs	r3, #1
 8013f90:	9308      	str	r3, [sp, #32]
 8013f92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	f000 81b8 	beq.w	801430a <_dtoa_r+0xb62>
 8013f9a:	6923      	ldr	r3, [r4, #16]
 8013f9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013fa0:	6918      	ldr	r0, [r3, #16]
 8013fa2:	f000 fb79 	bl	8014698 <__hi0bits>
 8013fa6:	f1c0 0020 	rsb	r0, r0, #32
 8013faa:	9b06      	ldr	r3, [sp, #24]
 8013fac:	4418      	add	r0, r3
 8013fae:	f010 001f 	ands.w	r0, r0, #31
 8013fb2:	f000 8082 	beq.w	80140ba <_dtoa_r+0x912>
 8013fb6:	f1c0 0320 	rsb	r3, r0, #32
 8013fba:	2b04      	cmp	r3, #4
 8013fbc:	dd73      	ble.n	80140a6 <_dtoa_r+0x8fe>
 8013fbe:	9b00      	ldr	r3, [sp, #0]
 8013fc0:	f1c0 001c 	rsb	r0, r0, #28
 8013fc4:	4403      	add	r3, r0
 8013fc6:	9300      	str	r3, [sp, #0]
 8013fc8:	9b06      	ldr	r3, [sp, #24]
 8013fca:	4403      	add	r3, r0
 8013fcc:	4406      	add	r6, r0
 8013fce:	9306      	str	r3, [sp, #24]
 8013fd0:	9b00      	ldr	r3, [sp, #0]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	dd05      	ble.n	8013fe2 <_dtoa_r+0x83a>
 8013fd6:	9902      	ldr	r1, [sp, #8]
 8013fd8:	461a      	mov	r2, r3
 8013fda:	4648      	mov	r0, r9
 8013fdc:	f000 fcba 	bl	8014954 <__lshift>
 8013fe0:	9002      	str	r0, [sp, #8]
 8013fe2:	9b06      	ldr	r3, [sp, #24]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	dd05      	ble.n	8013ff4 <_dtoa_r+0x84c>
 8013fe8:	4621      	mov	r1, r4
 8013fea:	461a      	mov	r2, r3
 8013fec:	4648      	mov	r0, r9
 8013fee:	f000 fcb1 	bl	8014954 <__lshift>
 8013ff2:	4604      	mov	r4, r0
 8013ff4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d061      	beq.n	80140be <_dtoa_r+0x916>
 8013ffa:	9802      	ldr	r0, [sp, #8]
 8013ffc:	4621      	mov	r1, r4
 8013ffe:	f000 fd15 	bl	8014a2c <__mcmp>
 8014002:	2800      	cmp	r0, #0
 8014004:	da5b      	bge.n	80140be <_dtoa_r+0x916>
 8014006:	2300      	movs	r3, #0
 8014008:	9902      	ldr	r1, [sp, #8]
 801400a:	220a      	movs	r2, #10
 801400c:	4648      	mov	r0, r9
 801400e:	f000 fafd 	bl	801460c <__multadd>
 8014012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014014:	9002      	str	r0, [sp, #8]
 8014016:	f107 38ff 	add.w	r8, r7, #4294967295
 801401a:	2b00      	cmp	r3, #0
 801401c:	f000 8177 	beq.w	801430e <_dtoa_r+0xb66>
 8014020:	4629      	mov	r1, r5
 8014022:	2300      	movs	r3, #0
 8014024:	220a      	movs	r2, #10
 8014026:	4648      	mov	r0, r9
 8014028:	f000 faf0 	bl	801460c <__multadd>
 801402c:	f1bb 0f00 	cmp.w	fp, #0
 8014030:	4605      	mov	r5, r0
 8014032:	dc6f      	bgt.n	8014114 <_dtoa_r+0x96c>
 8014034:	9b07      	ldr	r3, [sp, #28]
 8014036:	2b02      	cmp	r3, #2
 8014038:	dc49      	bgt.n	80140ce <_dtoa_r+0x926>
 801403a:	e06b      	b.n	8014114 <_dtoa_r+0x96c>
 801403c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801403e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014042:	e73c      	b.n	8013ebe <_dtoa_r+0x716>
 8014044:	3fe00000 	.word	0x3fe00000
 8014048:	40240000 	.word	0x40240000
 801404c:	9b03      	ldr	r3, [sp, #12]
 801404e:	1e5c      	subs	r4, r3, #1
 8014050:	9b08      	ldr	r3, [sp, #32]
 8014052:	42a3      	cmp	r3, r4
 8014054:	db09      	blt.n	801406a <_dtoa_r+0x8c2>
 8014056:	1b1c      	subs	r4, r3, r4
 8014058:	9b03      	ldr	r3, [sp, #12]
 801405a:	2b00      	cmp	r3, #0
 801405c:	f6bf af30 	bge.w	8013ec0 <_dtoa_r+0x718>
 8014060:	9b00      	ldr	r3, [sp, #0]
 8014062:	9a03      	ldr	r2, [sp, #12]
 8014064:	1a9e      	subs	r6, r3, r2
 8014066:	2300      	movs	r3, #0
 8014068:	e72b      	b.n	8013ec2 <_dtoa_r+0x71a>
 801406a:	9b08      	ldr	r3, [sp, #32]
 801406c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801406e:	9408      	str	r4, [sp, #32]
 8014070:	1ae3      	subs	r3, r4, r3
 8014072:	441a      	add	r2, r3
 8014074:	9e00      	ldr	r6, [sp, #0]
 8014076:	9b03      	ldr	r3, [sp, #12]
 8014078:	920d      	str	r2, [sp, #52]	@ 0x34
 801407a:	2400      	movs	r4, #0
 801407c:	e721      	b.n	8013ec2 <_dtoa_r+0x71a>
 801407e:	9c08      	ldr	r4, [sp, #32]
 8014080:	9e00      	ldr	r6, [sp, #0]
 8014082:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8014084:	e728      	b.n	8013ed8 <_dtoa_r+0x730>
 8014086:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801408a:	e751      	b.n	8013f30 <_dtoa_r+0x788>
 801408c:	9a08      	ldr	r2, [sp, #32]
 801408e:	9902      	ldr	r1, [sp, #8]
 8014090:	e750      	b.n	8013f34 <_dtoa_r+0x78c>
 8014092:	f8cd 8008 	str.w	r8, [sp, #8]
 8014096:	e751      	b.n	8013f3c <_dtoa_r+0x794>
 8014098:	2300      	movs	r3, #0
 801409a:	e779      	b.n	8013f90 <_dtoa_r+0x7e8>
 801409c:	9b04      	ldr	r3, [sp, #16]
 801409e:	e777      	b.n	8013f90 <_dtoa_r+0x7e8>
 80140a0:	2300      	movs	r3, #0
 80140a2:	9308      	str	r3, [sp, #32]
 80140a4:	e779      	b.n	8013f9a <_dtoa_r+0x7f2>
 80140a6:	d093      	beq.n	8013fd0 <_dtoa_r+0x828>
 80140a8:	9a00      	ldr	r2, [sp, #0]
 80140aa:	331c      	adds	r3, #28
 80140ac:	441a      	add	r2, r3
 80140ae:	9200      	str	r2, [sp, #0]
 80140b0:	9a06      	ldr	r2, [sp, #24]
 80140b2:	441a      	add	r2, r3
 80140b4:	441e      	add	r6, r3
 80140b6:	9206      	str	r2, [sp, #24]
 80140b8:	e78a      	b.n	8013fd0 <_dtoa_r+0x828>
 80140ba:	4603      	mov	r3, r0
 80140bc:	e7f4      	b.n	80140a8 <_dtoa_r+0x900>
 80140be:	9b03      	ldr	r3, [sp, #12]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	46b8      	mov	r8, r7
 80140c4:	dc20      	bgt.n	8014108 <_dtoa_r+0x960>
 80140c6:	469b      	mov	fp, r3
 80140c8:	9b07      	ldr	r3, [sp, #28]
 80140ca:	2b02      	cmp	r3, #2
 80140cc:	dd1e      	ble.n	801410c <_dtoa_r+0x964>
 80140ce:	f1bb 0f00 	cmp.w	fp, #0
 80140d2:	f47f adb1 	bne.w	8013c38 <_dtoa_r+0x490>
 80140d6:	4621      	mov	r1, r4
 80140d8:	465b      	mov	r3, fp
 80140da:	2205      	movs	r2, #5
 80140dc:	4648      	mov	r0, r9
 80140de:	f000 fa95 	bl	801460c <__multadd>
 80140e2:	4601      	mov	r1, r0
 80140e4:	4604      	mov	r4, r0
 80140e6:	9802      	ldr	r0, [sp, #8]
 80140e8:	f000 fca0 	bl	8014a2c <__mcmp>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	f77f ada3 	ble.w	8013c38 <_dtoa_r+0x490>
 80140f2:	4656      	mov	r6, sl
 80140f4:	2331      	movs	r3, #49	@ 0x31
 80140f6:	f806 3b01 	strb.w	r3, [r6], #1
 80140fa:	f108 0801 	add.w	r8, r8, #1
 80140fe:	e59f      	b.n	8013c40 <_dtoa_r+0x498>
 8014100:	9c03      	ldr	r4, [sp, #12]
 8014102:	46b8      	mov	r8, r7
 8014104:	4625      	mov	r5, r4
 8014106:	e7f4      	b.n	80140f2 <_dtoa_r+0x94a>
 8014108:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801410c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801410e:	2b00      	cmp	r3, #0
 8014110:	f000 8101 	beq.w	8014316 <_dtoa_r+0xb6e>
 8014114:	2e00      	cmp	r6, #0
 8014116:	dd05      	ble.n	8014124 <_dtoa_r+0x97c>
 8014118:	4629      	mov	r1, r5
 801411a:	4632      	mov	r2, r6
 801411c:	4648      	mov	r0, r9
 801411e:	f000 fc19 	bl	8014954 <__lshift>
 8014122:	4605      	mov	r5, r0
 8014124:	9b08      	ldr	r3, [sp, #32]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d05c      	beq.n	80141e4 <_dtoa_r+0xa3c>
 801412a:	6869      	ldr	r1, [r5, #4]
 801412c:	4648      	mov	r0, r9
 801412e:	f000 fa0b 	bl	8014548 <_Balloc>
 8014132:	4606      	mov	r6, r0
 8014134:	b928      	cbnz	r0, 8014142 <_dtoa_r+0x99a>
 8014136:	4b82      	ldr	r3, [pc, #520]	@ (8014340 <_dtoa_r+0xb98>)
 8014138:	4602      	mov	r2, r0
 801413a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801413e:	f7ff bb4a 	b.w	80137d6 <_dtoa_r+0x2e>
 8014142:	692a      	ldr	r2, [r5, #16]
 8014144:	3202      	adds	r2, #2
 8014146:	0092      	lsls	r2, r2, #2
 8014148:	f105 010c 	add.w	r1, r5, #12
 801414c:	300c      	adds	r0, #12
 801414e:	f7ff fa94 	bl	801367a <memcpy>
 8014152:	2201      	movs	r2, #1
 8014154:	4631      	mov	r1, r6
 8014156:	4648      	mov	r0, r9
 8014158:	f000 fbfc 	bl	8014954 <__lshift>
 801415c:	f10a 0301 	add.w	r3, sl, #1
 8014160:	9300      	str	r3, [sp, #0]
 8014162:	eb0a 030b 	add.w	r3, sl, fp
 8014166:	9308      	str	r3, [sp, #32]
 8014168:	9b04      	ldr	r3, [sp, #16]
 801416a:	f003 0301 	and.w	r3, r3, #1
 801416e:	462f      	mov	r7, r5
 8014170:	9306      	str	r3, [sp, #24]
 8014172:	4605      	mov	r5, r0
 8014174:	9b00      	ldr	r3, [sp, #0]
 8014176:	9802      	ldr	r0, [sp, #8]
 8014178:	4621      	mov	r1, r4
 801417a:	f103 3bff 	add.w	fp, r3, #4294967295
 801417e:	f7ff fa8a 	bl	8013696 <quorem>
 8014182:	4603      	mov	r3, r0
 8014184:	3330      	adds	r3, #48	@ 0x30
 8014186:	9003      	str	r0, [sp, #12]
 8014188:	4639      	mov	r1, r7
 801418a:	9802      	ldr	r0, [sp, #8]
 801418c:	9309      	str	r3, [sp, #36]	@ 0x24
 801418e:	f000 fc4d 	bl	8014a2c <__mcmp>
 8014192:	462a      	mov	r2, r5
 8014194:	9004      	str	r0, [sp, #16]
 8014196:	4621      	mov	r1, r4
 8014198:	4648      	mov	r0, r9
 801419a:	f000 fc63 	bl	8014a64 <__mdiff>
 801419e:	68c2      	ldr	r2, [r0, #12]
 80141a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141a2:	4606      	mov	r6, r0
 80141a4:	bb02      	cbnz	r2, 80141e8 <_dtoa_r+0xa40>
 80141a6:	4601      	mov	r1, r0
 80141a8:	9802      	ldr	r0, [sp, #8]
 80141aa:	f000 fc3f 	bl	8014a2c <__mcmp>
 80141ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141b0:	4602      	mov	r2, r0
 80141b2:	4631      	mov	r1, r6
 80141b4:	4648      	mov	r0, r9
 80141b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80141b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80141ba:	f000 fa05 	bl	80145c8 <_Bfree>
 80141be:	9b07      	ldr	r3, [sp, #28]
 80141c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80141c2:	9e00      	ldr	r6, [sp, #0]
 80141c4:	ea42 0103 	orr.w	r1, r2, r3
 80141c8:	9b06      	ldr	r3, [sp, #24]
 80141ca:	4319      	orrs	r1, r3
 80141cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141ce:	d10d      	bne.n	80141ec <_dtoa_r+0xa44>
 80141d0:	2b39      	cmp	r3, #57	@ 0x39
 80141d2:	d027      	beq.n	8014224 <_dtoa_r+0xa7c>
 80141d4:	9a04      	ldr	r2, [sp, #16]
 80141d6:	2a00      	cmp	r2, #0
 80141d8:	dd01      	ble.n	80141de <_dtoa_r+0xa36>
 80141da:	9b03      	ldr	r3, [sp, #12]
 80141dc:	3331      	adds	r3, #49	@ 0x31
 80141de:	f88b 3000 	strb.w	r3, [fp]
 80141e2:	e52e      	b.n	8013c42 <_dtoa_r+0x49a>
 80141e4:	4628      	mov	r0, r5
 80141e6:	e7b9      	b.n	801415c <_dtoa_r+0x9b4>
 80141e8:	2201      	movs	r2, #1
 80141ea:	e7e2      	b.n	80141b2 <_dtoa_r+0xa0a>
 80141ec:	9904      	ldr	r1, [sp, #16]
 80141ee:	2900      	cmp	r1, #0
 80141f0:	db04      	blt.n	80141fc <_dtoa_r+0xa54>
 80141f2:	9807      	ldr	r0, [sp, #28]
 80141f4:	4301      	orrs	r1, r0
 80141f6:	9806      	ldr	r0, [sp, #24]
 80141f8:	4301      	orrs	r1, r0
 80141fa:	d120      	bne.n	801423e <_dtoa_r+0xa96>
 80141fc:	2a00      	cmp	r2, #0
 80141fe:	ddee      	ble.n	80141de <_dtoa_r+0xa36>
 8014200:	9902      	ldr	r1, [sp, #8]
 8014202:	9300      	str	r3, [sp, #0]
 8014204:	2201      	movs	r2, #1
 8014206:	4648      	mov	r0, r9
 8014208:	f000 fba4 	bl	8014954 <__lshift>
 801420c:	4621      	mov	r1, r4
 801420e:	9002      	str	r0, [sp, #8]
 8014210:	f000 fc0c 	bl	8014a2c <__mcmp>
 8014214:	2800      	cmp	r0, #0
 8014216:	9b00      	ldr	r3, [sp, #0]
 8014218:	dc02      	bgt.n	8014220 <_dtoa_r+0xa78>
 801421a:	d1e0      	bne.n	80141de <_dtoa_r+0xa36>
 801421c:	07da      	lsls	r2, r3, #31
 801421e:	d5de      	bpl.n	80141de <_dtoa_r+0xa36>
 8014220:	2b39      	cmp	r3, #57	@ 0x39
 8014222:	d1da      	bne.n	80141da <_dtoa_r+0xa32>
 8014224:	2339      	movs	r3, #57	@ 0x39
 8014226:	f88b 3000 	strb.w	r3, [fp]
 801422a:	4633      	mov	r3, r6
 801422c:	461e      	mov	r6, r3
 801422e:	3b01      	subs	r3, #1
 8014230:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014234:	2a39      	cmp	r2, #57	@ 0x39
 8014236:	d04e      	beq.n	80142d6 <_dtoa_r+0xb2e>
 8014238:	3201      	adds	r2, #1
 801423a:	701a      	strb	r2, [r3, #0]
 801423c:	e501      	b.n	8013c42 <_dtoa_r+0x49a>
 801423e:	2a00      	cmp	r2, #0
 8014240:	dd03      	ble.n	801424a <_dtoa_r+0xaa2>
 8014242:	2b39      	cmp	r3, #57	@ 0x39
 8014244:	d0ee      	beq.n	8014224 <_dtoa_r+0xa7c>
 8014246:	3301      	adds	r3, #1
 8014248:	e7c9      	b.n	80141de <_dtoa_r+0xa36>
 801424a:	9a00      	ldr	r2, [sp, #0]
 801424c:	9908      	ldr	r1, [sp, #32]
 801424e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014252:	428a      	cmp	r2, r1
 8014254:	d028      	beq.n	80142a8 <_dtoa_r+0xb00>
 8014256:	9902      	ldr	r1, [sp, #8]
 8014258:	2300      	movs	r3, #0
 801425a:	220a      	movs	r2, #10
 801425c:	4648      	mov	r0, r9
 801425e:	f000 f9d5 	bl	801460c <__multadd>
 8014262:	42af      	cmp	r7, r5
 8014264:	9002      	str	r0, [sp, #8]
 8014266:	f04f 0300 	mov.w	r3, #0
 801426a:	f04f 020a 	mov.w	r2, #10
 801426e:	4639      	mov	r1, r7
 8014270:	4648      	mov	r0, r9
 8014272:	d107      	bne.n	8014284 <_dtoa_r+0xadc>
 8014274:	f000 f9ca 	bl	801460c <__multadd>
 8014278:	4607      	mov	r7, r0
 801427a:	4605      	mov	r5, r0
 801427c:	9b00      	ldr	r3, [sp, #0]
 801427e:	3301      	adds	r3, #1
 8014280:	9300      	str	r3, [sp, #0]
 8014282:	e777      	b.n	8014174 <_dtoa_r+0x9cc>
 8014284:	f000 f9c2 	bl	801460c <__multadd>
 8014288:	4629      	mov	r1, r5
 801428a:	4607      	mov	r7, r0
 801428c:	2300      	movs	r3, #0
 801428e:	220a      	movs	r2, #10
 8014290:	4648      	mov	r0, r9
 8014292:	f000 f9bb 	bl	801460c <__multadd>
 8014296:	4605      	mov	r5, r0
 8014298:	e7f0      	b.n	801427c <_dtoa_r+0xad4>
 801429a:	f1bb 0f00 	cmp.w	fp, #0
 801429e:	bfcc      	ite	gt
 80142a0:	465e      	movgt	r6, fp
 80142a2:	2601      	movle	r6, #1
 80142a4:	4456      	add	r6, sl
 80142a6:	2700      	movs	r7, #0
 80142a8:	9902      	ldr	r1, [sp, #8]
 80142aa:	9300      	str	r3, [sp, #0]
 80142ac:	2201      	movs	r2, #1
 80142ae:	4648      	mov	r0, r9
 80142b0:	f000 fb50 	bl	8014954 <__lshift>
 80142b4:	4621      	mov	r1, r4
 80142b6:	9002      	str	r0, [sp, #8]
 80142b8:	f000 fbb8 	bl	8014a2c <__mcmp>
 80142bc:	2800      	cmp	r0, #0
 80142be:	dcb4      	bgt.n	801422a <_dtoa_r+0xa82>
 80142c0:	d102      	bne.n	80142c8 <_dtoa_r+0xb20>
 80142c2:	9b00      	ldr	r3, [sp, #0]
 80142c4:	07db      	lsls	r3, r3, #31
 80142c6:	d4b0      	bmi.n	801422a <_dtoa_r+0xa82>
 80142c8:	4633      	mov	r3, r6
 80142ca:	461e      	mov	r6, r3
 80142cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80142d0:	2a30      	cmp	r2, #48	@ 0x30
 80142d2:	d0fa      	beq.n	80142ca <_dtoa_r+0xb22>
 80142d4:	e4b5      	b.n	8013c42 <_dtoa_r+0x49a>
 80142d6:	459a      	cmp	sl, r3
 80142d8:	d1a8      	bne.n	801422c <_dtoa_r+0xa84>
 80142da:	2331      	movs	r3, #49	@ 0x31
 80142dc:	f108 0801 	add.w	r8, r8, #1
 80142e0:	f88a 3000 	strb.w	r3, [sl]
 80142e4:	e4ad      	b.n	8013c42 <_dtoa_r+0x49a>
 80142e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80142e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8014344 <_dtoa_r+0xb9c>
 80142ec:	b11b      	cbz	r3, 80142f6 <_dtoa_r+0xb4e>
 80142ee:	f10a 0308 	add.w	r3, sl, #8
 80142f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80142f4:	6013      	str	r3, [r2, #0]
 80142f6:	4650      	mov	r0, sl
 80142f8:	b017      	add	sp, #92	@ 0x5c
 80142fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142fe:	9b07      	ldr	r3, [sp, #28]
 8014300:	2b01      	cmp	r3, #1
 8014302:	f77f ae2e 	ble.w	8013f62 <_dtoa_r+0x7ba>
 8014306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014308:	9308      	str	r3, [sp, #32]
 801430a:	2001      	movs	r0, #1
 801430c:	e64d      	b.n	8013faa <_dtoa_r+0x802>
 801430e:	f1bb 0f00 	cmp.w	fp, #0
 8014312:	f77f aed9 	ble.w	80140c8 <_dtoa_r+0x920>
 8014316:	4656      	mov	r6, sl
 8014318:	9802      	ldr	r0, [sp, #8]
 801431a:	4621      	mov	r1, r4
 801431c:	f7ff f9bb 	bl	8013696 <quorem>
 8014320:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8014324:	f806 3b01 	strb.w	r3, [r6], #1
 8014328:	eba6 020a 	sub.w	r2, r6, sl
 801432c:	4593      	cmp	fp, r2
 801432e:	ddb4      	ble.n	801429a <_dtoa_r+0xaf2>
 8014330:	9902      	ldr	r1, [sp, #8]
 8014332:	2300      	movs	r3, #0
 8014334:	220a      	movs	r2, #10
 8014336:	4648      	mov	r0, r9
 8014338:	f000 f968 	bl	801460c <__multadd>
 801433c:	9002      	str	r0, [sp, #8]
 801433e:	e7eb      	b.n	8014318 <_dtoa_r+0xb70>
 8014340:	08016a94 	.word	0x08016a94
 8014344:	08016a18 	.word	0x08016a18

08014348 <_free_r>:
 8014348:	b538      	push	{r3, r4, r5, lr}
 801434a:	4605      	mov	r5, r0
 801434c:	2900      	cmp	r1, #0
 801434e:	d041      	beq.n	80143d4 <_free_r+0x8c>
 8014350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014354:	1f0c      	subs	r4, r1, #4
 8014356:	2b00      	cmp	r3, #0
 8014358:	bfb8      	it	lt
 801435a:	18e4      	addlt	r4, r4, r3
 801435c:	f000 f8e8 	bl	8014530 <__malloc_lock>
 8014360:	4a1d      	ldr	r2, [pc, #116]	@ (80143d8 <_free_r+0x90>)
 8014362:	6813      	ldr	r3, [r2, #0]
 8014364:	b933      	cbnz	r3, 8014374 <_free_r+0x2c>
 8014366:	6063      	str	r3, [r4, #4]
 8014368:	6014      	str	r4, [r2, #0]
 801436a:	4628      	mov	r0, r5
 801436c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014370:	f000 b8e4 	b.w	801453c <__malloc_unlock>
 8014374:	42a3      	cmp	r3, r4
 8014376:	d908      	bls.n	801438a <_free_r+0x42>
 8014378:	6820      	ldr	r0, [r4, #0]
 801437a:	1821      	adds	r1, r4, r0
 801437c:	428b      	cmp	r3, r1
 801437e:	bf01      	itttt	eq
 8014380:	6819      	ldreq	r1, [r3, #0]
 8014382:	685b      	ldreq	r3, [r3, #4]
 8014384:	1809      	addeq	r1, r1, r0
 8014386:	6021      	streq	r1, [r4, #0]
 8014388:	e7ed      	b.n	8014366 <_free_r+0x1e>
 801438a:	461a      	mov	r2, r3
 801438c:	685b      	ldr	r3, [r3, #4]
 801438e:	b10b      	cbz	r3, 8014394 <_free_r+0x4c>
 8014390:	42a3      	cmp	r3, r4
 8014392:	d9fa      	bls.n	801438a <_free_r+0x42>
 8014394:	6811      	ldr	r1, [r2, #0]
 8014396:	1850      	adds	r0, r2, r1
 8014398:	42a0      	cmp	r0, r4
 801439a:	d10b      	bne.n	80143b4 <_free_r+0x6c>
 801439c:	6820      	ldr	r0, [r4, #0]
 801439e:	4401      	add	r1, r0
 80143a0:	1850      	adds	r0, r2, r1
 80143a2:	4283      	cmp	r3, r0
 80143a4:	6011      	str	r1, [r2, #0]
 80143a6:	d1e0      	bne.n	801436a <_free_r+0x22>
 80143a8:	6818      	ldr	r0, [r3, #0]
 80143aa:	685b      	ldr	r3, [r3, #4]
 80143ac:	6053      	str	r3, [r2, #4]
 80143ae:	4408      	add	r0, r1
 80143b0:	6010      	str	r0, [r2, #0]
 80143b2:	e7da      	b.n	801436a <_free_r+0x22>
 80143b4:	d902      	bls.n	80143bc <_free_r+0x74>
 80143b6:	230c      	movs	r3, #12
 80143b8:	602b      	str	r3, [r5, #0]
 80143ba:	e7d6      	b.n	801436a <_free_r+0x22>
 80143bc:	6820      	ldr	r0, [r4, #0]
 80143be:	1821      	adds	r1, r4, r0
 80143c0:	428b      	cmp	r3, r1
 80143c2:	bf04      	itt	eq
 80143c4:	6819      	ldreq	r1, [r3, #0]
 80143c6:	685b      	ldreq	r3, [r3, #4]
 80143c8:	6063      	str	r3, [r4, #4]
 80143ca:	bf04      	itt	eq
 80143cc:	1809      	addeq	r1, r1, r0
 80143ce:	6021      	streq	r1, [r4, #0]
 80143d0:	6054      	str	r4, [r2, #4]
 80143d2:	e7ca      	b.n	801436a <_free_r+0x22>
 80143d4:	bd38      	pop	{r3, r4, r5, pc}
 80143d6:	bf00      	nop
 80143d8:	20005034 	.word	0x20005034

080143dc <malloc>:
 80143dc:	4b02      	ldr	r3, [pc, #8]	@ (80143e8 <malloc+0xc>)
 80143de:	4601      	mov	r1, r0
 80143e0:	6818      	ldr	r0, [r3, #0]
 80143e2:	f000 b825 	b.w	8014430 <_malloc_r>
 80143e6:	bf00      	nop
 80143e8:	2000001c 	.word	0x2000001c

080143ec <sbrk_aligned>:
 80143ec:	b570      	push	{r4, r5, r6, lr}
 80143ee:	4e0f      	ldr	r6, [pc, #60]	@ (801442c <sbrk_aligned+0x40>)
 80143f0:	460c      	mov	r4, r1
 80143f2:	6831      	ldr	r1, [r6, #0]
 80143f4:	4605      	mov	r5, r0
 80143f6:	b911      	cbnz	r1, 80143fe <sbrk_aligned+0x12>
 80143f8:	f001 f804 	bl	8015404 <_sbrk_r>
 80143fc:	6030      	str	r0, [r6, #0]
 80143fe:	4621      	mov	r1, r4
 8014400:	4628      	mov	r0, r5
 8014402:	f000 ffff 	bl	8015404 <_sbrk_r>
 8014406:	1c43      	adds	r3, r0, #1
 8014408:	d103      	bne.n	8014412 <sbrk_aligned+0x26>
 801440a:	f04f 34ff 	mov.w	r4, #4294967295
 801440e:	4620      	mov	r0, r4
 8014410:	bd70      	pop	{r4, r5, r6, pc}
 8014412:	1cc4      	adds	r4, r0, #3
 8014414:	f024 0403 	bic.w	r4, r4, #3
 8014418:	42a0      	cmp	r0, r4
 801441a:	d0f8      	beq.n	801440e <sbrk_aligned+0x22>
 801441c:	1a21      	subs	r1, r4, r0
 801441e:	4628      	mov	r0, r5
 8014420:	f000 fff0 	bl	8015404 <_sbrk_r>
 8014424:	3001      	adds	r0, #1
 8014426:	d1f2      	bne.n	801440e <sbrk_aligned+0x22>
 8014428:	e7ef      	b.n	801440a <sbrk_aligned+0x1e>
 801442a:	bf00      	nop
 801442c:	20005030 	.word	0x20005030

08014430 <_malloc_r>:
 8014430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014434:	1ccd      	adds	r5, r1, #3
 8014436:	f025 0503 	bic.w	r5, r5, #3
 801443a:	3508      	adds	r5, #8
 801443c:	2d0c      	cmp	r5, #12
 801443e:	bf38      	it	cc
 8014440:	250c      	movcc	r5, #12
 8014442:	2d00      	cmp	r5, #0
 8014444:	4606      	mov	r6, r0
 8014446:	db01      	blt.n	801444c <_malloc_r+0x1c>
 8014448:	42a9      	cmp	r1, r5
 801444a:	d904      	bls.n	8014456 <_malloc_r+0x26>
 801444c:	230c      	movs	r3, #12
 801444e:	6033      	str	r3, [r6, #0]
 8014450:	2000      	movs	r0, #0
 8014452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014456:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801452c <_malloc_r+0xfc>
 801445a:	f000 f869 	bl	8014530 <__malloc_lock>
 801445e:	f8d8 3000 	ldr.w	r3, [r8]
 8014462:	461c      	mov	r4, r3
 8014464:	bb44      	cbnz	r4, 80144b8 <_malloc_r+0x88>
 8014466:	4629      	mov	r1, r5
 8014468:	4630      	mov	r0, r6
 801446a:	f7ff ffbf 	bl	80143ec <sbrk_aligned>
 801446e:	1c43      	adds	r3, r0, #1
 8014470:	4604      	mov	r4, r0
 8014472:	d158      	bne.n	8014526 <_malloc_r+0xf6>
 8014474:	f8d8 4000 	ldr.w	r4, [r8]
 8014478:	4627      	mov	r7, r4
 801447a:	2f00      	cmp	r7, #0
 801447c:	d143      	bne.n	8014506 <_malloc_r+0xd6>
 801447e:	2c00      	cmp	r4, #0
 8014480:	d04b      	beq.n	801451a <_malloc_r+0xea>
 8014482:	6823      	ldr	r3, [r4, #0]
 8014484:	4639      	mov	r1, r7
 8014486:	4630      	mov	r0, r6
 8014488:	eb04 0903 	add.w	r9, r4, r3
 801448c:	f000 ffba 	bl	8015404 <_sbrk_r>
 8014490:	4581      	cmp	r9, r0
 8014492:	d142      	bne.n	801451a <_malloc_r+0xea>
 8014494:	6821      	ldr	r1, [r4, #0]
 8014496:	1a6d      	subs	r5, r5, r1
 8014498:	4629      	mov	r1, r5
 801449a:	4630      	mov	r0, r6
 801449c:	f7ff ffa6 	bl	80143ec <sbrk_aligned>
 80144a0:	3001      	adds	r0, #1
 80144a2:	d03a      	beq.n	801451a <_malloc_r+0xea>
 80144a4:	6823      	ldr	r3, [r4, #0]
 80144a6:	442b      	add	r3, r5
 80144a8:	6023      	str	r3, [r4, #0]
 80144aa:	f8d8 3000 	ldr.w	r3, [r8]
 80144ae:	685a      	ldr	r2, [r3, #4]
 80144b0:	bb62      	cbnz	r2, 801450c <_malloc_r+0xdc>
 80144b2:	f8c8 7000 	str.w	r7, [r8]
 80144b6:	e00f      	b.n	80144d8 <_malloc_r+0xa8>
 80144b8:	6822      	ldr	r2, [r4, #0]
 80144ba:	1b52      	subs	r2, r2, r5
 80144bc:	d420      	bmi.n	8014500 <_malloc_r+0xd0>
 80144be:	2a0b      	cmp	r2, #11
 80144c0:	d917      	bls.n	80144f2 <_malloc_r+0xc2>
 80144c2:	1961      	adds	r1, r4, r5
 80144c4:	42a3      	cmp	r3, r4
 80144c6:	6025      	str	r5, [r4, #0]
 80144c8:	bf18      	it	ne
 80144ca:	6059      	strne	r1, [r3, #4]
 80144cc:	6863      	ldr	r3, [r4, #4]
 80144ce:	bf08      	it	eq
 80144d0:	f8c8 1000 	streq.w	r1, [r8]
 80144d4:	5162      	str	r2, [r4, r5]
 80144d6:	604b      	str	r3, [r1, #4]
 80144d8:	4630      	mov	r0, r6
 80144da:	f000 f82f 	bl	801453c <__malloc_unlock>
 80144de:	f104 000b 	add.w	r0, r4, #11
 80144e2:	1d23      	adds	r3, r4, #4
 80144e4:	f020 0007 	bic.w	r0, r0, #7
 80144e8:	1ac2      	subs	r2, r0, r3
 80144ea:	bf1c      	itt	ne
 80144ec:	1a1b      	subne	r3, r3, r0
 80144ee:	50a3      	strne	r3, [r4, r2]
 80144f0:	e7af      	b.n	8014452 <_malloc_r+0x22>
 80144f2:	6862      	ldr	r2, [r4, #4]
 80144f4:	42a3      	cmp	r3, r4
 80144f6:	bf0c      	ite	eq
 80144f8:	f8c8 2000 	streq.w	r2, [r8]
 80144fc:	605a      	strne	r2, [r3, #4]
 80144fe:	e7eb      	b.n	80144d8 <_malloc_r+0xa8>
 8014500:	4623      	mov	r3, r4
 8014502:	6864      	ldr	r4, [r4, #4]
 8014504:	e7ae      	b.n	8014464 <_malloc_r+0x34>
 8014506:	463c      	mov	r4, r7
 8014508:	687f      	ldr	r7, [r7, #4]
 801450a:	e7b6      	b.n	801447a <_malloc_r+0x4a>
 801450c:	461a      	mov	r2, r3
 801450e:	685b      	ldr	r3, [r3, #4]
 8014510:	42a3      	cmp	r3, r4
 8014512:	d1fb      	bne.n	801450c <_malloc_r+0xdc>
 8014514:	2300      	movs	r3, #0
 8014516:	6053      	str	r3, [r2, #4]
 8014518:	e7de      	b.n	80144d8 <_malloc_r+0xa8>
 801451a:	230c      	movs	r3, #12
 801451c:	6033      	str	r3, [r6, #0]
 801451e:	4630      	mov	r0, r6
 8014520:	f000 f80c 	bl	801453c <__malloc_unlock>
 8014524:	e794      	b.n	8014450 <_malloc_r+0x20>
 8014526:	6005      	str	r5, [r0, #0]
 8014528:	e7d6      	b.n	80144d8 <_malloc_r+0xa8>
 801452a:	bf00      	nop
 801452c:	20005034 	.word	0x20005034

08014530 <__malloc_lock>:
 8014530:	4801      	ldr	r0, [pc, #4]	@ (8014538 <__malloc_lock+0x8>)
 8014532:	f7ff b8a0 	b.w	8013676 <__retarget_lock_acquire_recursive>
 8014536:	bf00      	nop
 8014538:	2000502c 	.word	0x2000502c

0801453c <__malloc_unlock>:
 801453c:	4801      	ldr	r0, [pc, #4]	@ (8014544 <__malloc_unlock+0x8>)
 801453e:	f7ff b89b 	b.w	8013678 <__retarget_lock_release_recursive>
 8014542:	bf00      	nop
 8014544:	2000502c 	.word	0x2000502c

08014548 <_Balloc>:
 8014548:	b570      	push	{r4, r5, r6, lr}
 801454a:	69c6      	ldr	r6, [r0, #28]
 801454c:	4604      	mov	r4, r0
 801454e:	460d      	mov	r5, r1
 8014550:	b976      	cbnz	r6, 8014570 <_Balloc+0x28>
 8014552:	2010      	movs	r0, #16
 8014554:	f7ff ff42 	bl	80143dc <malloc>
 8014558:	4602      	mov	r2, r0
 801455a:	61e0      	str	r0, [r4, #28]
 801455c:	b920      	cbnz	r0, 8014568 <_Balloc+0x20>
 801455e:	4b18      	ldr	r3, [pc, #96]	@ (80145c0 <_Balloc+0x78>)
 8014560:	4818      	ldr	r0, [pc, #96]	@ (80145c4 <_Balloc+0x7c>)
 8014562:	216b      	movs	r1, #107	@ 0x6b
 8014564:	f000 ff5e 	bl	8015424 <__assert_func>
 8014568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801456c:	6006      	str	r6, [r0, #0]
 801456e:	60c6      	str	r6, [r0, #12]
 8014570:	69e6      	ldr	r6, [r4, #28]
 8014572:	68f3      	ldr	r3, [r6, #12]
 8014574:	b183      	cbz	r3, 8014598 <_Balloc+0x50>
 8014576:	69e3      	ldr	r3, [r4, #28]
 8014578:	68db      	ldr	r3, [r3, #12]
 801457a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801457e:	b9b8      	cbnz	r0, 80145b0 <_Balloc+0x68>
 8014580:	2101      	movs	r1, #1
 8014582:	fa01 f605 	lsl.w	r6, r1, r5
 8014586:	1d72      	adds	r2, r6, #5
 8014588:	0092      	lsls	r2, r2, #2
 801458a:	4620      	mov	r0, r4
 801458c:	f000 ff68 	bl	8015460 <_calloc_r>
 8014590:	b160      	cbz	r0, 80145ac <_Balloc+0x64>
 8014592:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014596:	e00e      	b.n	80145b6 <_Balloc+0x6e>
 8014598:	2221      	movs	r2, #33	@ 0x21
 801459a:	2104      	movs	r1, #4
 801459c:	4620      	mov	r0, r4
 801459e:	f000 ff5f 	bl	8015460 <_calloc_r>
 80145a2:	69e3      	ldr	r3, [r4, #28]
 80145a4:	60f0      	str	r0, [r6, #12]
 80145a6:	68db      	ldr	r3, [r3, #12]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d1e4      	bne.n	8014576 <_Balloc+0x2e>
 80145ac:	2000      	movs	r0, #0
 80145ae:	bd70      	pop	{r4, r5, r6, pc}
 80145b0:	6802      	ldr	r2, [r0, #0]
 80145b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80145b6:	2300      	movs	r3, #0
 80145b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80145bc:	e7f7      	b.n	80145ae <_Balloc+0x66>
 80145be:	bf00      	nop
 80145c0:	08016a25 	.word	0x08016a25
 80145c4:	08016aa5 	.word	0x08016aa5

080145c8 <_Bfree>:
 80145c8:	b570      	push	{r4, r5, r6, lr}
 80145ca:	69c6      	ldr	r6, [r0, #28]
 80145cc:	4605      	mov	r5, r0
 80145ce:	460c      	mov	r4, r1
 80145d0:	b976      	cbnz	r6, 80145f0 <_Bfree+0x28>
 80145d2:	2010      	movs	r0, #16
 80145d4:	f7ff ff02 	bl	80143dc <malloc>
 80145d8:	4602      	mov	r2, r0
 80145da:	61e8      	str	r0, [r5, #28]
 80145dc:	b920      	cbnz	r0, 80145e8 <_Bfree+0x20>
 80145de:	4b09      	ldr	r3, [pc, #36]	@ (8014604 <_Bfree+0x3c>)
 80145e0:	4809      	ldr	r0, [pc, #36]	@ (8014608 <_Bfree+0x40>)
 80145e2:	218f      	movs	r1, #143	@ 0x8f
 80145e4:	f000 ff1e 	bl	8015424 <__assert_func>
 80145e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80145ec:	6006      	str	r6, [r0, #0]
 80145ee:	60c6      	str	r6, [r0, #12]
 80145f0:	b13c      	cbz	r4, 8014602 <_Bfree+0x3a>
 80145f2:	69eb      	ldr	r3, [r5, #28]
 80145f4:	6862      	ldr	r2, [r4, #4]
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80145fc:	6021      	str	r1, [r4, #0]
 80145fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014602:	bd70      	pop	{r4, r5, r6, pc}
 8014604:	08016a25 	.word	0x08016a25
 8014608:	08016aa5 	.word	0x08016aa5

0801460c <__multadd>:
 801460c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014610:	690d      	ldr	r5, [r1, #16]
 8014612:	4607      	mov	r7, r0
 8014614:	460c      	mov	r4, r1
 8014616:	461e      	mov	r6, r3
 8014618:	f101 0c14 	add.w	ip, r1, #20
 801461c:	2000      	movs	r0, #0
 801461e:	f8dc 3000 	ldr.w	r3, [ip]
 8014622:	b299      	uxth	r1, r3
 8014624:	fb02 6101 	mla	r1, r2, r1, r6
 8014628:	0c1e      	lsrs	r6, r3, #16
 801462a:	0c0b      	lsrs	r3, r1, #16
 801462c:	fb02 3306 	mla	r3, r2, r6, r3
 8014630:	b289      	uxth	r1, r1
 8014632:	3001      	adds	r0, #1
 8014634:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014638:	4285      	cmp	r5, r0
 801463a:	f84c 1b04 	str.w	r1, [ip], #4
 801463e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014642:	dcec      	bgt.n	801461e <__multadd+0x12>
 8014644:	b30e      	cbz	r6, 801468a <__multadd+0x7e>
 8014646:	68a3      	ldr	r3, [r4, #8]
 8014648:	42ab      	cmp	r3, r5
 801464a:	dc19      	bgt.n	8014680 <__multadd+0x74>
 801464c:	6861      	ldr	r1, [r4, #4]
 801464e:	4638      	mov	r0, r7
 8014650:	3101      	adds	r1, #1
 8014652:	f7ff ff79 	bl	8014548 <_Balloc>
 8014656:	4680      	mov	r8, r0
 8014658:	b928      	cbnz	r0, 8014666 <__multadd+0x5a>
 801465a:	4602      	mov	r2, r0
 801465c:	4b0c      	ldr	r3, [pc, #48]	@ (8014690 <__multadd+0x84>)
 801465e:	480d      	ldr	r0, [pc, #52]	@ (8014694 <__multadd+0x88>)
 8014660:	21ba      	movs	r1, #186	@ 0xba
 8014662:	f000 fedf 	bl	8015424 <__assert_func>
 8014666:	6922      	ldr	r2, [r4, #16]
 8014668:	3202      	adds	r2, #2
 801466a:	f104 010c 	add.w	r1, r4, #12
 801466e:	0092      	lsls	r2, r2, #2
 8014670:	300c      	adds	r0, #12
 8014672:	f7ff f802 	bl	801367a <memcpy>
 8014676:	4621      	mov	r1, r4
 8014678:	4638      	mov	r0, r7
 801467a:	f7ff ffa5 	bl	80145c8 <_Bfree>
 801467e:	4644      	mov	r4, r8
 8014680:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014684:	3501      	adds	r5, #1
 8014686:	615e      	str	r6, [r3, #20]
 8014688:	6125      	str	r5, [r4, #16]
 801468a:	4620      	mov	r0, r4
 801468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014690:	08016a94 	.word	0x08016a94
 8014694:	08016aa5 	.word	0x08016aa5

08014698 <__hi0bits>:
 8014698:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801469c:	4603      	mov	r3, r0
 801469e:	bf36      	itet	cc
 80146a0:	0403      	lslcc	r3, r0, #16
 80146a2:	2000      	movcs	r0, #0
 80146a4:	2010      	movcc	r0, #16
 80146a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80146aa:	bf3c      	itt	cc
 80146ac:	021b      	lslcc	r3, r3, #8
 80146ae:	3008      	addcc	r0, #8
 80146b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80146b4:	bf3c      	itt	cc
 80146b6:	011b      	lslcc	r3, r3, #4
 80146b8:	3004      	addcc	r0, #4
 80146ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80146be:	bf3c      	itt	cc
 80146c0:	009b      	lslcc	r3, r3, #2
 80146c2:	3002      	addcc	r0, #2
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	db05      	blt.n	80146d4 <__hi0bits+0x3c>
 80146c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80146cc:	f100 0001 	add.w	r0, r0, #1
 80146d0:	bf08      	it	eq
 80146d2:	2020      	moveq	r0, #32
 80146d4:	4770      	bx	lr

080146d6 <__lo0bits>:
 80146d6:	6803      	ldr	r3, [r0, #0]
 80146d8:	4602      	mov	r2, r0
 80146da:	f013 0007 	ands.w	r0, r3, #7
 80146de:	d00b      	beq.n	80146f8 <__lo0bits+0x22>
 80146e0:	07d9      	lsls	r1, r3, #31
 80146e2:	d421      	bmi.n	8014728 <__lo0bits+0x52>
 80146e4:	0798      	lsls	r0, r3, #30
 80146e6:	bf49      	itett	mi
 80146e8:	085b      	lsrmi	r3, r3, #1
 80146ea:	089b      	lsrpl	r3, r3, #2
 80146ec:	2001      	movmi	r0, #1
 80146ee:	6013      	strmi	r3, [r2, #0]
 80146f0:	bf5c      	itt	pl
 80146f2:	6013      	strpl	r3, [r2, #0]
 80146f4:	2002      	movpl	r0, #2
 80146f6:	4770      	bx	lr
 80146f8:	b299      	uxth	r1, r3
 80146fa:	b909      	cbnz	r1, 8014700 <__lo0bits+0x2a>
 80146fc:	0c1b      	lsrs	r3, r3, #16
 80146fe:	2010      	movs	r0, #16
 8014700:	b2d9      	uxtb	r1, r3
 8014702:	b909      	cbnz	r1, 8014708 <__lo0bits+0x32>
 8014704:	3008      	adds	r0, #8
 8014706:	0a1b      	lsrs	r3, r3, #8
 8014708:	0719      	lsls	r1, r3, #28
 801470a:	bf04      	itt	eq
 801470c:	091b      	lsreq	r3, r3, #4
 801470e:	3004      	addeq	r0, #4
 8014710:	0799      	lsls	r1, r3, #30
 8014712:	bf04      	itt	eq
 8014714:	089b      	lsreq	r3, r3, #2
 8014716:	3002      	addeq	r0, #2
 8014718:	07d9      	lsls	r1, r3, #31
 801471a:	d403      	bmi.n	8014724 <__lo0bits+0x4e>
 801471c:	085b      	lsrs	r3, r3, #1
 801471e:	f100 0001 	add.w	r0, r0, #1
 8014722:	d003      	beq.n	801472c <__lo0bits+0x56>
 8014724:	6013      	str	r3, [r2, #0]
 8014726:	4770      	bx	lr
 8014728:	2000      	movs	r0, #0
 801472a:	4770      	bx	lr
 801472c:	2020      	movs	r0, #32
 801472e:	4770      	bx	lr

08014730 <__i2b>:
 8014730:	b510      	push	{r4, lr}
 8014732:	460c      	mov	r4, r1
 8014734:	2101      	movs	r1, #1
 8014736:	f7ff ff07 	bl	8014548 <_Balloc>
 801473a:	4602      	mov	r2, r0
 801473c:	b928      	cbnz	r0, 801474a <__i2b+0x1a>
 801473e:	4b05      	ldr	r3, [pc, #20]	@ (8014754 <__i2b+0x24>)
 8014740:	4805      	ldr	r0, [pc, #20]	@ (8014758 <__i2b+0x28>)
 8014742:	f240 1145 	movw	r1, #325	@ 0x145
 8014746:	f000 fe6d 	bl	8015424 <__assert_func>
 801474a:	2301      	movs	r3, #1
 801474c:	6144      	str	r4, [r0, #20]
 801474e:	6103      	str	r3, [r0, #16]
 8014750:	bd10      	pop	{r4, pc}
 8014752:	bf00      	nop
 8014754:	08016a94 	.word	0x08016a94
 8014758:	08016aa5 	.word	0x08016aa5

0801475c <__multiply>:
 801475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014760:	4617      	mov	r7, r2
 8014762:	690a      	ldr	r2, [r1, #16]
 8014764:	693b      	ldr	r3, [r7, #16]
 8014766:	429a      	cmp	r2, r3
 8014768:	bfa8      	it	ge
 801476a:	463b      	movge	r3, r7
 801476c:	4689      	mov	r9, r1
 801476e:	bfa4      	itt	ge
 8014770:	460f      	movge	r7, r1
 8014772:	4699      	movge	r9, r3
 8014774:	693d      	ldr	r5, [r7, #16]
 8014776:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	6879      	ldr	r1, [r7, #4]
 801477e:	eb05 060a 	add.w	r6, r5, sl
 8014782:	42b3      	cmp	r3, r6
 8014784:	b085      	sub	sp, #20
 8014786:	bfb8      	it	lt
 8014788:	3101      	addlt	r1, #1
 801478a:	f7ff fedd 	bl	8014548 <_Balloc>
 801478e:	b930      	cbnz	r0, 801479e <__multiply+0x42>
 8014790:	4602      	mov	r2, r0
 8014792:	4b41      	ldr	r3, [pc, #260]	@ (8014898 <__multiply+0x13c>)
 8014794:	4841      	ldr	r0, [pc, #260]	@ (801489c <__multiply+0x140>)
 8014796:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801479a:	f000 fe43 	bl	8015424 <__assert_func>
 801479e:	f100 0414 	add.w	r4, r0, #20
 80147a2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80147a6:	4623      	mov	r3, r4
 80147a8:	2200      	movs	r2, #0
 80147aa:	4573      	cmp	r3, lr
 80147ac:	d320      	bcc.n	80147f0 <__multiply+0x94>
 80147ae:	f107 0814 	add.w	r8, r7, #20
 80147b2:	f109 0114 	add.w	r1, r9, #20
 80147b6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80147ba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80147be:	9302      	str	r3, [sp, #8]
 80147c0:	1beb      	subs	r3, r5, r7
 80147c2:	3b15      	subs	r3, #21
 80147c4:	f023 0303 	bic.w	r3, r3, #3
 80147c8:	3304      	adds	r3, #4
 80147ca:	3715      	adds	r7, #21
 80147cc:	42bd      	cmp	r5, r7
 80147ce:	bf38      	it	cc
 80147d0:	2304      	movcc	r3, #4
 80147d2:	9301      	str	r3, [sp, #4]
 80147d4:	9b02      	ldr	r3, [sp, #8]
 80147d6:	9103      	str	r1, [sp, #12]
 80147d8:	428b      	cmp	r3, r1
 80147da:	d80c      	bhi.n	80147f6 <__multiply+0x9a>
 80147dc:	2e00      	cmp	r6, #0
 80147de:	dd03      	ble.n	80147e8 <__multiply+0x8c>
 80147e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d055      	beq.n	8014894 <__multiply+0x138>
 80147e8:	6106      	str	r6, [r0, #16]
 80147ea:	b005      	add	sp, #20
 80147ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147f0:	f843 2b04 	str.w	r2, [r3], #4
 80147f4:	e7d9      	b.n	80147aa <__multiply+0x4e>
 80147f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80147fa:	f1ba 0f00 	cmp.w	sl, #0
 80147fe:	d01f      	beq.n	8014840 <__multiply+0xe4>
 8014800:	46c4      	mov	ip, r8
 8014802:	46a1      	mov	r9, r4
 8014804:	2700      	movs	r7, #0
 8014806:	f85c 2b04 	ldr.w	r2, [ip], #4
 801480a:	f8d9 3000 	ldr.w	r3, [r9]
 801480e:	fa1f fb82 	uxth.w	fp, r2
 8014812:	b29b      	uxth	r3, r3
 8014814:	fb0a 330b 	mla	r3, sl, fp, r3
 8014818:	443b      	add	r3, r7
 801481a:	f8d9 7000 	ldr.w	r7, [r9]
 801481e:	0c12      	lsrs	r2, r2, #16
 8014820:	0c3f      	lsrs	r7, r7, #16
 8014822:	fb0a 7202 	mla	r2, sl, r2, r7
 8014826:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801482a:	b29b      	uxth	r3, r3
 801482c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014830:	4565      	cmp	r5, ip
 8014832:	f849 3b04 	str.w	r3, [r9], #4
 8014836:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801483a:	d8e4      	bhi.n	8014806 <__multiply+0xaa>
 801483c:	9b01      	ldr	r3, [sp, #4]
 801483e:	50e7      	str	r7, [r4, r3]
 8014840:	9b03      	ldr	r3, [sp, #12]
 8014842:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014846:	3104      	adds	r1, #4
 8014848:	f1b9 0f00 	cmp.w	r9, #0
 801484c:	d020      	beq.n	8014890 <__multiply+0x134>
 801484e:	6823      	ldr	r3, [r4, #0]
 8014850:	4647      	mov	r7, r8
 8014852:	46a4      	mov	ip, r4
 8014854:	f04f 0a00 	mov.w	sl, #0
 8014858:	f8b7 b000 	ldrh.w	fp, [r7]
 801485c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014860:	fb09 220b 	mla	r2, r9, fp, r2
 8014864:	4452      	add	r2, sl
 8014866:	b29b      	uxth	r3, r3
 8014868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801486c:	f84c 3b04 	str.w	r3, [ip], #4
 8014870:	f857 3b04 	ldr.w	r3, [r7], #4
 8014874:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014878:	f8bc 3000 	ldrh.w	r3, [ip]
 801487c:	fb09 330a 	mla	r3, r9, sl, r3
 8014880:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014884:	42bd      	cmp	r5, r7
 8014886:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801488a:	d8e5      	bhi.n	8014858 <__multiply+0xfc>
 801488c:	9a01      	ldr	r2, [sp, #4]
 801488e:	50a3      	str	r3, [r4, r2]
 8014890:	3404      	adds	r4, #4
 8014892:	e79f      	b.n	80147d4 <__multiply+0x78>
 8014894:	3e01      	subs	r6, #1
 8014896:	e7a1      	b.n	80147dc <__multiply+0x80>
 8014898:	08016a94 	.word	0x08016a94
 801489c:	08016aa5 	.word	0x08016aa5

080148a0 <__pow5mult>:
 80148a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148a4:	4615      	mov	r5, r2
 80148a6:	f012 0203 	ands.w	r2, r2, #3
 80148aa:	4607      	mov	r7, r0
 80148ac:	460e      	mov	r6, r1
 80148ae:	d007      	beq.n	80148c0 <__pow5mult+0x20>
 80148b0:	4c25      	ldr	r4, [pc, #148]	@ (8014948 <__pow5mult+0xa8>)
 80148b2:	3a01      	subs	r2, #1
 80148b4:	2300      	movs	r3, #0
 80148b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80148ba:	f7ff fea7 	bl	801460c <__multadd>
 80148be:	4606      	mov	r6, r0
 80148c0:	10ad      	asrs	r5, r5, #2
 80148c2:	d03d      	beq.n	8014940 <__pow5mult+0xa0>
 80148c4:	69fc      	ldr	r4, [r7, #28]
 80148c6:	b97c      	cbnz	r4, 80148e8 <__pow5mult+0x48>
 80148c8:	2010      	movs	r0, #16
 80148ca:	f7ff fd87 	bl	80143dc <malloc>
 80148ce:	4602      	mov	r2, r0
 80148d0:	61f8      	str	r0, [r7, #28]
 80148d2:	b928      	cbnz	r0, 80148e0 <__pow5mult+0x40>
 80148d4:	4b1d      	ldr	r3, [pc, #116]	@ (801494c <__pow5mult+0xac>)
 80148d6:	481e      	ldr	r0, [pc, #120]	@ (8014950 <__pow5mult+0xb0>)
 80148d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80148dc:	f000 fda2 	bl	8015424 <__assert_func>
 80148e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80148e4:	6004      	str	r4, [r0, #0]
 80148e6:	60c4      	str	r4, [r0, #12]
 80148e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80148ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80148f0:	b94c      	cbnz	r4, 8014906 <__pow5mult+0x66>
 80148f2:	f240 2171 	movw	r1, #625	@ 0x271
 80148f6:	4638      	mov	r0, r7
 80148f8:	f7ff ff1a 	bl	8014730 <__i2b>
 80148fc:	2300      	movs	r3, #0
 80148fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8014902:	4604      	mov	r4, r0
 8014904:	6003      	str	r3, [r0, #0]
 8014906:	f04f 0900 	mov.w	r9, #0
 801490a:	07eb      	lsls	r3, r5, #31
 801490c:	d50a      	bpl.n	8014924 <__pow5mult+0x84>
 801490e:	4631      	mov	r1, r6
 8014910:	4622      	mov	r2, r4
 8014912:	4638      	mov	r0, r7
 8014914:	f7ff ff22 	bl	801475c <__multiply>
 8014918:	4631      	mov	r1, r6
 801491a:	4680      	mov	r8, r0
 801491c:	4638      	mov	r0, r7
 801491e:	f7ff fe53 	bl	80145c8 <_Bfree>
 8014922:	4646      	mov	r6, r8
 8014924:	106d      	asrs	r5, r5, #1
 8014926:	d00b      	beq.n	8014940 <__pow5mult+0xa0>
 8014928:	6820      	ldr	r0, [r4, #0]
 801492a:	b938      	cbnz	r0, 801493c <__pow5mult+0x9c>
 801492c:	4622      	mov	r2, r4
 801492e:	4621      	mov	r1, r4
 8014930:	4638      	mov	r0, r7
 8014932:	f7ff ff13 	bl	801475c <__multiply>
 8014936:	6020      	str	r0, [r4, #0]
 8014938:	f8c0 9000 	str.w	r9, [r0]
 801493c:	4604      	mov	r4, r0
 801493e:	e7e4      	b.n	801490a <__pow5mult+0x6a>
 8014940:	4630      	mov	r0, r6
 8014942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014946:	bf00      	nop
 8014948:	08016b58 	.word	0x08016b58
 801494c:	08016a25 	.word	0x08016a25
 8014950:	08016aa5 	.word	0x08016aa5

08014954 <__lshift>:
 8014954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014958:	460c      	mov	r4, r1
 801495a:	6849      	ldr	r1, [r1, #4]
 801495c:	6923      	ldr	r3, [r4, #16]
 801495e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014962:	68a3      	ldr	r3, [r4, #8]
 8014964:	4607      	mov	r7, r0
 8014966:	4691      	mov	r9, r2
 8014968:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801496c:	f108 0601 	add.w	r6, r8, #1
 8014970:	42b3      	cmp	r3, r6
 8014972:	db0b      	blt.n	801498c <__lshift+0x38>
 8014974:	4638      	mov	r0, r7
 8014976:	f7ff fde7 	bl	8014548 <_Balloc>
 801497a:	4605      	mov	r5, r0
 801497c:	b948      	cbnz	r0, 8014992 <__lshift+0x3e>
 801497e:	4602      	mov	r2, r0
 8014980:	4b28      	ldr	r3, [pc, #160]	@ (8014a24 <__lshift+0xd0>)
 8014982:	4829      	ldr	r0, [pc, #164]	@ (8014a28 <__lshift+0xd4>)
 8014984:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014988:	f000 fd4c 	bl	8015424 <__assert_func>
 801498c:	3101      	adds	r1, #1
 801498e:	005b      	lsls	r3, r3, #1
 8014990:	e7ee      	b.n	8014970 <__lshift+0x1c>
 8014992:	2300      	movs	r3, #0
 8014994:	f100 0114 	add.w	r1, r0, #20
 8014998:	f100 0210 	add.w	r2, r0, #16
 801499c:	4618      	mov	r0, r3
 801499e:	4553      	cmp	r3, sl
 80149a0:	db33      	blt.n	8014a0a <__lshift+0xb6>
 80149a2:	6920      	ldr	r0, [r4, #16]
 80149a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80149a8:	f104 0314 	add.w	r3, r4, #20
 80149ac:	f019 091f 	ands.w	r9, r9, #31
 80149b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80149b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80149b8:	d02b      	beq.n	8014a12 <__lshift+0xbe>
 80149ba:	f1c9 0e20 	rsb	lr, r9, #32
 80149be:	468a      	mov	sl, r1
 80149c0:	2200      	movs	r2, #0
 80149c2:	6818      	ldr	r0, [r3, #0]
 80149c4:	fa00 f009 	lsl.w	r0, r0, r9
 80149c8:	4310      	orrs	r0, r2
 80149ca:	f84a 0b04 	str.w	r0, [sl], #4
 80149ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80149d2:	459c      	cmp	ip, r3
 80149d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80149d8:	d8f3      	bhi.n	80149c2 <__lshift+0x6e>
 80149da:	ebac 0304 	sub.w	r3, ip, r4
 80149de:	3b15      	subs	r3, #21
 80149e0:	f023 0303 	bic.w	r3, r3, #3
 80149e4:	3304      	adds	r3, #4
 80149e6:	f104 0015 	add.w	r0, r4, #21
 80149ea:	4560      	cmp	r0, ip
 80149ec:	bf88      	it	hi
 80149ee:	2304      	movhi	r3, #4
 80149f0:	50ca      	str	r2, [r1, r3]
 80149f2:	b10a      	cbz	r2, 80149f8 <__lshift+0xa4>
 80149f4:	f108 0602 	add.w	r6, r8, #2
 80149f8:	3e01      	subs	r6, #1
 80149fa:	4638      	mov	r0, r7
 80149fc:	612e      	str	r6, [r5, #16]
 80149fe:	4621      	mov	r1, r4
 8014a00:	f7ff fde2 	bl	80145c8 <_Bfree>
 8014a04:	4628      	mov	r0, r5
 8014a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014a0e:	3301      	adds	r3, #1
 8014a10:	e7c5      	b.n	801499e <__lshift+0x4a>
 8014a12:	3904      	subs	r1, #4
 8014a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a18:	f841 2f04 	str.w	r2, [r1, #4]!
 8014a1c:	459c      	cmp	ip, r3
 8014a1e:	d8f9      	bhi.n	8014a14 <__lshift+0xc0>
 8014a20:	e7ea      	b.n	80149f8 <__lshift+0xa4>
 8014a22:	bf00      	nop
 8014a24:	08016a94 	.word	0x08016a94
 8014a28:	08016aa5 	.word	0x08016aa5

08014a2c <__mcmp>:
 8014a2c:	690a      	ldr	r2, [r1, #16]
 8014a2e:	4603      	mov	r3, r0
 8014a30:	6900      	ldr	r0, [r0, #16]
 8014a32:	1a80      	subs	r0, r0, r2
 8014a34:	b530      	push	{r4, r5, lr}
 8014a36:	d10e      	bne.n	8014a56 <__mcmp+0x2a>
 8014a38:	3314      	adds	r3, #20
 8014a3a:	3114      	adds	r1, #20
 8014a3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014a40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014a44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014a48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014a4c:	4295      	cmp	r5, r2
 8014a4e:	d003      	beq.n	8014a58 <__mcmp+0x2c>
 8014a50:	d205      	bcs.n	8014a5e <__mcmp+0x32>
 8014a52:	f04f 30ff 	mov.w	r0, #4294967295
 8014a56:	bd30      	pop	{r4, r5, pc}
 8014a58:	42a3      	cmp	r3, r4
 8014a5a:	d3f3      	bcc.n	8014a44 <__mcmp+0x18>
 8014a5c:	e7fb      	b.n	8014a56 <__mcmp+0x2a>
 8014a5e:	2001      	movs	r0, #1
 8014a60:	e7f9      	b.n	8014a56 <__mcmp+0x2a>
	...

08014a64 <__mdiff>:
 8014a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a68:	4689      	mov	r9, r1
 8014a6a:	4606      	mov	r6, r0
 8014a6c:	4611      	mov	r1, r2
 8014a6e:	4648      	mov	r0, r9
 8014a70:	4614      	mov	r4, r2
 8014a72:	f7ff ffdb 	bl	8014a2c <__mcmp>
 8014a76:	1e05      	subs	r5, r0, #0
 8014a78:	d112      	bne.n	8014aa0 <__mdiff+0x3c>
 8014a7a:	4629      	mov	r1, r5
 8014a7c:	4630      	mov	r0, r6
 8014a7e:	f7ff fd63 	bl	8014548 <_Balloc>
 8014a82:	4602      	mov	r2, r0
 8014a84:	b928      	cbnz	r0, 8014a92 <__mdiff+0x2e>
 8014a86:	4b3f      	ldr	r3, [pc, #252]	@ (8014b84 <__mdiff+0x120>)
 8014a88:	f240 2137 	movw	r1, #567	@ 0x237
 8014a8c:	483e      	ldr	r0, [pc, #248]	@ (8014b88 <__mdiff+0x124>)
 8014a8e:	f000 fcc9 	bl	8015424 <__assert_func>
 8014a92:	2301      	movs	r3, #1
 8014a94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014a98:	4610      	mov	r0, r2
 8014a9a:	b003      	add	sp, #12
 8014a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aa0:	bfbc      	itt	lt
 8014aa2:	464b      	movlt	r3, r9
 8014aa4:	46a1      	movlt	r9, r4
 8014aa6:	4630      	mov	r0, r6
 8014aa8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014aac:	bfba      	itte	lt
 8014aae:	461c      	movlt	r4, r3
 8014ab0:	2501      	movlt	r5, #1
 8014ab2:	2500      	movge	r5, #0
 8014ab4:	f7ff fd48 	bl	8014548 <_Balloc>
 8014ab8:	4602      	mov	r2, r0
 8014aba:	b918      	cbnz	r0, 8014ac4 <__mdiff+0x60>
 8014abc:	4b31      	ldr	r3, [pc, #196]	@ (8014b84 <__mdiff+0x120>)
 8014abe:	f240 2145 	movw	r1, #581	@ 0x245
 8014ac2:	e7e3      	b.n	8014a8c <__mdiff+0x28>
 8014ac4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014ac8:	6926      	ldr	r6, [r4, #16]
 8014aca:	60c5      	str	r5, [r0, #12]
 8014acc:	f109 0310 	add.w	r3, r9, #16
 8014ad0:	f109 0514 	add.w	r5, r9, #20
 8014ad4:	f104 0e14 	add.w	lr, r4, #20
 8014ad8:	f100 0b14 	add.w	fp, r0, #20
 8014adc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014ae0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014ae4:	9301      	str	r3, [sp, #4]
 8014ae6:	46d9      	mov	r9, fp
 8014ae8:	f04f 0c00 	mov.w	ip, #0
 8014aec:	9b01      	ldr	r3, [sp, #4]
 8014aee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014af2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014af6:	9301      	str	r3, [sp, #4]
 8014af8:	fa1f f38a 	uxth.w	r3, sl
 8014afc:	4619      	mov	r1, r3
 8014afe:	b283      	uxth	r3, r0
 8014b00:	1acb      	subs	r3, r1, r3
 8014b02:	0c00      	lsrs	r0, r0, #16
 8014b04:	4463      	add	r3, ip
 8014b06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014b0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014b0e:	b29b      	uxth	r3, r3
 8014b10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014b14:	4576      	cmp	r6, lr
 8014b16:	f849 3b04 	str.w	r3, [r9], #4
 8014b1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014b1e:	d8e5      	bhi.n	8014aec <__mdiff+0x88>
 8014b20:	1b33      	subs	r3, r6, r4
 8014b22:	3b15      	subs	r3, #21
 8014b24:	f023 0303 	bic.w	r3, r3, #3
 8014b28:	3415      	adds	r4, #21
 8014b2a:	3304      	adds	r3, #4
 8014b2c:	42a6      	cmp	r6, r4
 8014b2e:	bf38      	it	cc
 8014b30:	2304      	movcc	r3, #4
 8014b32:	441d      	add	r5, r3
 8014b34:	445b      	add	r3, fp
 8014b36:	461e      	mov	r6, r3
 8014b38:	462c      	mov	r4, r5
 8014b3a:	4544      	cmp	r4, r8
 8014b3c:	d30e      	bcc.n	8014b5c <__mdiff+0xf8>
 8014b3e:	f108 0103 	add.w	r1, r8, #3
 8014b42:	1b49      	subs	r1, r1, r5
 8014b44:	f021 0103 	bic.w	r1, r1, #3
 8014b48:	3d03      	subs	r5, #3
 8014b4a:	45a8      	cmp	r8, r5
 8014b4c:	bf38      	it	cc
 8014b4e:	2100      	movcc	r1, #0
 8014b50:	440b      	add	r3, r1
 8014b52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014b56:	b191      	cbz	r1, 8014b7e <__mdiff+0x11a>
 8014b58:	6117      	str	r7, [r2, #16]
 8014b5a:	e79d      	b.n	8014a98 <__mdiff+0x34>
 8014b5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014b60:	46e6      	mov	lr, ip
 8014b62:	0c08      	lsrs	r0, r1, #16
 8014b64:	fa1c fc81 	uxtah	ip, ip, r1
 8014b68:	4471      	add	r1, lr
 8014b6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014b6e:	b289      	uxth	r1, r1
 8014b70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014b74:	f846 1b04 	str.w	r1, [r6], #4
 8014b78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014b7c:	e7dd      	b.n	8014b3a <__mdiff+0xd6>
 8014b7e:	3f01      	subs	r7, #1
 8014b80:	e7e7      	b.n	8014b52 <__mdiff+0xee>
 8014b82:	bf00      	nop
 8014b84:	08016a94 	.word	0x08016a94
 8014b88:	08016aa5 	.word	0x08016aa5

08014b8c <__d2b>:
 8014b8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014b90:	460f      	mov	r7, r1
 8014b92:	2101      	movs	r1, #1
 8014b94:	ec59 8b10 	vmov	r8, r9, d0
 8014b98:	4616      	mov	r6, r2
 8014b9a:	f7ff fcd5 	bl	8014548 <_Balloc>
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	b930      	cbnz	r0, 8014bb0 <__d2b+0x24>
 8014ba2:	4602      	mov	r2, r0
 8014ba4:	4b23      	ldr	r3, [pc, #140]	@ (8014c34 <__d2b+0xa8>)
 8014ba6:	4824      	ldr	r0, [pc, #144]	@ (8014c38 <__d2b+0xac>)
 8014ba8:	f240 310f 	movw	r1, #783	@ 0x30f
 8014bac:	f000 fc3a 	bl	8015424 <__assert_func>
 8014bb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014bb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014bb8:	b10d      	cbz	r5, 8014bbe <__d2b+0x32>
 8014bba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014bbe:	9301      	str	r3, [sp, #4]
 8014bc0:	f1b8 0300 	subs.w	r3, r8, #0
 8014bc4:	d023      	beq.n	8014c0e <__d2b+0x82>
 8014bc6:	4668      	mov	r0, sp
 8014bc8:	9300      	str	r3, [sp, #0]
 8014bca:	f7ff fd84 	bl	80146d6 <__lo0bits>
 8014bce:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014bd2:	b1d0      	cbz	r0, 8014c0a <__d2b+0x7e>
 8014bd4:	f1c0 0320 	rsb	r3, r0, #32
 8014bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8014bdc:	430b      	orrs	r3, r1
 8014bde:	40c2      	lsrs	r2, r0
 8014be0:	6163      	str	r3, [r4, #20]
 8014be2:	9201      	str	r2, [sp, #4]
 8014be4:	9b01      	ldr	r3, [sp, #4]
 8014be6:	61a3      	str	r3, [r4, #24]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	bf0c      	ite	eq
 8014bec:	2201      	moveq	r2, #1
 8014bee:	2202      	movne	r2, #2
 8014bf0:	6122      	str	r2, [r4, #16]
 8014bf2:	b1a5      	cbz	r5, 8014c1e <__d2b+0x92>
 8014bf4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014bf8:	4405      	add	r5, r0
 8014bfa:	603d      	str	r5, [r7, #0]
 8014bfc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014c00:	6030      	str	r0, [r6, #0]
 8014c02:	4620      	mov	r0, r4
 8014c04:	b003      	add	sp, #12
 8014c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c0a:	6161      	str	r1, [r4, #20]
 8014c0c:	e7ea      	b.n	8014be4 <__d2b+0x58>
 8014c0e:	a801      	add	r0, sp, #4
 8014c10:	f7ff fd61 	bl	80146d6 <__lo0bits>
 8014c14:	9b01      	ldr	r3, [sp, #4]
 8014c16:	6163      	str	r3, [r4, #20]
 8014c18:	3020      	adds	r0, #32
 8014c1a:	2201      	movs	r2, #1
 8014c1c:	e7e8      	b.n	8014bf0 <__d2b+0x64>
 8014c1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014c22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014c26:	6038      	str	r0, [r7, #0]
 8014c28:	6918      	ldr	r0, [r3, #16]
 8014c2a:	f7ff fd35 	bl	8014698 <__hi0bits>
 8014c2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014c32:	e7e5      	b.n	8014c00 <__d2b+0x74>
 8014c34:	08016a94 	.word	0x08016a94
 8014c38:	08016aa5 	.word	0x08016aa5

08014c3c <__ssputs_r>:
 8014c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c40:	688e      	ldr	r6, [r1, #8]
 8014c42:	461f      	mov	r7, r3
 8014c44:	42be      	cmp	r6, r7
 8014c46:	680b      	ldr	r3, [r1, #0]
 8014c48:	4682      	mov	sl, r0
 8014c4a:	460c      	mov	r4, r1
 8014c4c:	4690      	mov	r8, r2
 8014c4e:	d82d      	bhi.n	8014cac <__ssputs_r+0x70>
 8014c50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014c54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014c58:	d026      	beq.n	8014ca8 <__ssputs_r+0x6c>
 8014c5a:	6965      	ldr	r5, [r4, #20]
 8014c5c:	6909      	ldr	r1, [r1, #16]
 8014c5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c62:	eba3 0901 	sub.w	r9, r3, r1
 8014c66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014c6a:	1c7b      	adds	r3, r7, #1
 8014c6c:	444b      	add	r3, r9
 8014c6e:	106d      	asrs	r5, r5, #1
 8014c70:	429d      	cmp	r5, r3
 8014c72:	bf38      	it	cc
 8014c74:	461d      	movcc	r5, r3
 8014c76:	0553      	lsls	r3, r2, #21
 8014c78:	d527      	bpl.n	8014cca <__ssputs_r+0x8e>
 8014c7a:	4629      	mov	r1, r5
 8014c7c:	f7ff fbd8 	bl	8014430 <_malloc_r>
 8014c80:	4606      	mov	r6, r0
 8014c82:	b360      	cbz	r0, 8014cde <__ssputs_r+0xa2>
 8014c84:	6921      	ldr	r1, [r4, #16]
 8014c86:	464a      	mov	r2, r9
 8014c88:	f7fe fcf7 	bl	801367a <memcpy>
 8014c8c:	89a3      	ldrh	r3, [r4, #12]
 8014c8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014c96:	81a3      	strh	r3, [r4, #12]
 8014c98:	6126      	str	r6, [r4, #16]
 8014c9a:	6165      	str	r5, [r4, #20]
 8014c9c:	444e      	add	r6, r9
 8014c9e:	eba5 0509 	sub.w	r5, r5, r9
 8014ca2:	6026      	str	r6, [r4, #0]
 8014ca4:	60a5      	str	r5, [r4, #8]
 8014ca6:	463e      	mov	r6, r7
 8014ca8:	42be      	cmp	r6, r7
 8014caa:	d900      	bls.n	8014cae <__ssputs_r+0x72>
 8014cac:	463e      	mov	r6, r7
 8014cae:	6820      	ldr	r0, [r4, #0]
 8014cb0:	4632      	mov	r2, r6
 8014cb2:	4641      	mov	r1, r8
 8014cb4:	f000 fb6a 	bl	801538c <memmove>
 8014cb8:	68a3      	ldr	r3, [r4, #8]
 8014cba:	1b9b      	subs	r3, r3, r6
 8014cbc:	60a3      	str	r3, [r4, #8]
 8014cbe:	6823      	ldr	r3, [r4, #0]
 8014cc0:	4433      	add	r3, r6
 8014cc2:	6023      	str	r3, [r4, #0]
 8014cc4:	2000      	movs	r0, #0
 8014cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cca:	462a      	mov	r2, r5
 8014ccc:	f000 fbee 	bl	80154ac <_realloc_r>
 8014cd0:	4606      	mov	r6, r0
 8014cd2:	2800      	cmp	r0, #0
 8014cd4:	d1e0      	bne.n	8014c98 <__ssputs_r+0x5c>
 8014cd6:	6921      	ldr	r1, [r4, #16]
 8014cd8:	4650      	mov	r0, sl
 8014cda:	f7ff fb35 	bl	8014348 <_free_r>
 8014cde:	230c      	movs	r3, #12
 8014ce0:	f8ca 3000 	str.w	r3, [sl]
 8014ce4:	89a3      	ldrh	r3, [r4, #12]
 8014ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014cea:	81a3      	strh	r3, [r4, #12]
 8014cec:	f04f 30ff 	mov.w	r0, #4294967295
 8014cf0:	e7e9      	b.n	8014cc6 <__ssputs_r+0x8a>
	...

08014cf4 <_svfiprintf_r>:
 8014cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cf8:	4698      	mov	r8, r3
 8014cfa:	898b      	ldrh	r3, [r1, #12]
 8014cfc:	061b      	lsls	r3, r3, #24
 8014cfe:	b09d      	sub	sp, #116	@ 0x74
 8014d00:	4607      	mov	r7, r0
 8014d02:	460d      	mov	r5, r1
 8014d04:	4614      	mov	r4, r2
 8014d06:	d510      	bpl.n	8014d2a <_svfiprintf_r+0x36>
 8014d08:	690b      	ldr	r3, [r1, #16]
 8014d0a:	b973      	cbnz	r3, 8014d2a <_svfiprintf_r+0x36>
 8014d0c:	2140      	movs	r1, #64	@ 0x40
 8014d0e:	f7ff fb8f 	bl	8014430 <_malloc_r>
 8014d12:	6028      	str	r0, [r5, #0]
 8014d14:	6128      	str	r0, [r5, #16]
 8014d16:	b930      	cbnz	r0, 8014d26 <_svfiprintf_r+0x32>
 8014d18:	230c      	movs	r3, #12
 8014d1a:	603b      	str	r3, [r7, #0]
 8014d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d20:	b01d      	add	sp, #116	@ 0x74
 8014d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d26:	2340      	movs	r3, #64	@ 0x40
 8014d28:	616b      	str	r3, [r5, #20]
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d2e:	2320      	movs	r3, #32
 8014d30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d38:	2330      	movs	r3, #48	@ 0x30
 8014d3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014ed8 <_svfiprintf_r+0x1e4>
 8014d3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014d42:	f04f 0901 	mov.w	r9, #1
 8014d46:	4623      	mov	r3, r4
 8014d48:	469a      	mov	sl, r3
 8014d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d4e:	b10a      	cbz	r2, 8014d54 <_svfiprintf_r+0x60>
 8014d50:	2a25      	cmp	r2, #37	@ 0x25
 8014d52:	d1f9      	bne.n	8014d48 <_svfiprintf_r+0x54>
 8014d54:	ebba 0b04 	subs.w	fp, sl, r4
 8014d58:	d00b      	beq.n	8014d72 <_svfiprintf_r+0x7e>
 8014d5a:	465b      	mov	r3, fp
 8014d5c:	4622      	mov	r2, r4
 8014d5e:	4629      	mov	r1, r5
 8014d60:	4638      	mov	r0, r7
 8014d62:	f7ff ff6b 	bl	8014c3c <__ssputs_r>
 8014d66:	3001      	adds	r0, #1
 8014d68:	f000 80a7 	beq.w	8014eba <_svfiprintf_r+0x1c6>
 8014d6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d6e:	445a      	add	r2, fp
 8014d70:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d72:	f89a 3000 	ldrb.w	r3, [sl]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	f000 809f 	beq.w	8014eba <_svfiprintf_r+0x1c6>
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8014d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d86:	f10a 0a01 	add.w	sl, sl, #1
 8014d8a:	9304      	str	r3, [sp, #16]
 8014d8c:	9307      	str	r3, [sp, #28]
 8014d8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014d92:	931a      	str	r3, [sp, #104]	@ 0x68
 8014d94:	4654      	mov	r4, sl
 8014d96:	2205      	movs	r2, #5
 8014d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d9c:	484e      	ldr	r0, [pc, #312]	@ (8014ed8 <_svfiprintf_r+0x1e4>)
 8014d9e:	f7eb fa37 	bl	8000210 <memchr>
 8014da2:	9a04      	ldr	r2, [sp, #16]
 8014da4:	b9d8      	cbnz	r0, 8014dde <_svfiprintf_r+0xea>
 8014da6:	06d0      	lsls	r0, r2, #27
 8014da8:	bf44      	itt	mi
 8014daa:	2320      	movmi	r3, #32
 8014dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014db0:	0711      	lsls	r1, r2, #28
 8014db2:	bf44      	itt	mi
 8014db4:	232b      	movmi	r3, #43	@ 0x2b
 8014db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014dba:	f89a 3000 	ldrb.w	r3, [sl]
 8014dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8014dc0:	d015      	beq.n	8014dee <_svfiprintf_r+0xfa>
 8014dc2:	9a07      	ldr	r2, [sp, #28]
 8014dc4:	4654      	mov	r4, sl
 8014dc6:	2000      	movs	r0, #0
 8014dc8:	f04f 0c0a 	mov.w	ip, #10
 8014dcc:	4621      	mov	r1, r4
 8014dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014dd2:	3b30      	subs	r3, #48	@ 0x30
 8014dd4:	2b09      	cmp	r3, #9
 8014dd6:	d94b      	bls.n	8014e70 <_svfiprintf_r+0x17c>
 8014dd8:	b1b0      	cbz	r0, 8014e08 <_svfiprintf_r+0x114>
 8014dda:	9207      	str	r2, [sp, #28]
 8014ddc:	e014      	b.n	8014e08 <_svfiprintf_r+0x114>
 8014dde:	eba0 0308 	sub.w	r3, r0, r8
 8014de2:	fa09 f303 	lsl.w	r3, r9, r3
 8014de6:	4313      	orrs	r3, r2
 8014de8:	9304      	str	r3, [sp, #16]
 8014dea:	46a2      	mov	sl, r4
 8014dec:	e7d2      	b.n	8014d94 <_svfiprintf_r+0xa0>
 8014dee:	9b03      	ldr	r3, [sp, #12]
 8014df0:	1d19      	adds	r1, r3, #4
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	9103      	str	r1, [sp, #12]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	bfbb      	ittet	lt
 8014dfa:	425b      	neglt	r3, r3
 8014dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8014e00:	9307      	strge	r3, [sp, #28]
 8014e02:	9307      	strlt	r3, [sp, #28]
 8014e04:	bfb8      	it	lt
 8014e06:	9204      	strlt	r2, [sp, #16]
 8014e08:	7823      	ldrb	r3, [r4, #0]
 8014e0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8014e0c:	d10a      	bne.n	8014e24 <_svfiprintf_r+0x130>
 8014e0e:	7863      	ldrb	r3, [r4, #1]
 8014e10:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e12:	d132      	bne.n	8014e7a <_svfiprintf_r+0x186>
 8014e14:	9b03      	ldr	r3, [sp, #12]
 8014e16:	1d1a      	adds	r2, r3, #4
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	9203      	str	r2, [sp, #12]
 8014e1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014e20:	3402      	adds	r4, #2
 8014e22:	9305      	str	r3, [sp, #20]
 8014e24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014ee8 <_svfiprintf_r+0x1f4>
 8014e28:	7821      	ldrb	r1, [r4, #0]
 8014e2a:	2203      	movs	r2, #3
 8014e2c:	4650      	mov	r0, sl
 8014e2e:	f7eb f9ef 	bl	8000210 <memchr>
 8014e32:	b138      	cbz	r0, 8014e44 <_svfiprintf_r+0x150>
 8014e34:	9b04      	ldr	r3, [sp, #16]
 8014e36:	eba0 000a 	sub.w	r0, r0, sl
 8014e3a:	2240      	movs	r2, #64	@ 0x40
 8014e3c:	4082      	lsls	r2, r0
 8014e3e:	4313      	orrs	r3, r2
 8014e40:	3401      	adds	r4, #1
 8014e42:	9304      	str	r3, [sp, #16]
 8014e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e48:	4824      	ldr	r0, [pc, #144]	@ (8014edc <_svfiprintf_r+0x1e8>)
 8014e4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014e4e:	2206      	movs	r2, #6
 8014e50:	f7eb f9de 	bl	8000210 <memchr>
 8014e54:	2800      	cmp	r0, #0
 8014e56:	d036      	beq.n	8014ec6 <_svfiprintf_r+0x1d2>
 8014e58:	4b21      	ldr	r3, [pc, #132]	@ (8014ee0 <_svfiprintf_r+0x1ec>)
 8014e5a:	bb1b      	cbnz	r3, 8014ea4 <_svfiprintf_r+0x1b0>
 8014e5c:	9b03      	ldr	r3, [sp, #12]
 8014e5e:	3307      	adds	r3, #7
 8014e60:	f023 0307 	bic.w	r3, r3, #7
 8014e64:	3308      	adds	r3, #8
 8014e66:	9303      	str	r3, [sp, #12]
 8014e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e6a:	4433      	add	r3, r6
 8014e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e6e:	e76a      	b.n	8014d46 <_svfiprintf_r+0x52>
 8014e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e74:	460c      	mov	r4, r1
 8014e76:	2001      	movs	r0, #1
 8014e78:	e7a8      	b.n	8014dcc <_svfiprintf_r+0xd8>
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	3401      	adds	r4, #1
 8014e7e:	9305      	str	r3, [sp, #20]
 8014e80:	4619      	mov	r1, r3
 8014e82:	f04f 0c0a 	mov.w	ip, #10
 8014e86:	4620      	mov	r0, r4
 8014e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e8c:	3a30      	subs	r2, #48	@ 0x30
 8014e8e:	2a09      	cmp	r2, #9
 8014e90:	d903      	bls.n	8014e9a <_svfiprintf_r+0x1a6>
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d0c6      	beq.n	8014e24 <_svfiprintf_r+0x130>
 8014e96:	9105      	str	r1, [sp, #20]
 8014e98:	e7c4      	b.n	8014e24 <_svfiprintf_r+0x130>
 8014e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e9e:	4604      	mov	r4, r0
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	e7f0      	b.n	8014e86 <_svfiprintf_r+0x192>
 8014ea4:	ab03      	add	r3, sp, #12
 8014ea6:	9300      	str	r3, [sp, #0]
 8014ea8:	462a      	mov	r2, r5
 8014eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8014ee4 <_svfiprintf_r+0x1f0>)
 8014eac:	a904      	add	r1, sp, #16
 8014eae:	4638      	mov	r0, r7
 8014eb0:	f7fd fd10 	bl	80128d4 <_printf_float>
 8014eb4:	1c42      	adds	r2, r0, #1
 8014eb6:	4606      	mov	r6, r0
 8014eb8:	d1d6      	bne.n	8014e68 <_svfiprintf_r+0x174>
 8014eba:	89ab      	ldrh	r3, [r5, #12]
 8014ebc:	065b      	lsls	r3, r3, #25
 8014ebe:	f53f af2d 	bmi.w	8014d1c <_svfiprintf_r+0x28>
 8014ec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ec4:	e72c      	b.n	8014d20 <_svfiprintf_r+0x2c>
 8014ec6:	ab03      	add	r3, sp, #12
 8014ec8:	9300      	str	r3, [sp, #0]
 8014eca:	462a      	mov	r2, r5
 8014ecc:	4b05      	ldr	r3, [pc, #20]	@ (8014ee4 <_svfiprintf_r+0x1f0>)
 8014ece:	a904      	add	r1, sp, #16
 8014ed0:	4638      	mov	r0, r7
 8014ed2:	f7fd ff97 	bl	8012e04 <_printf_i>
 8014ed6:	e7ed      	b.n	8014eb4 <_svfiprintf_r+0x1c0>
 8014ed8:	08016afe 	.word	0x08016afe
 8014edc:	08016b08 	.word	0x08016b08
 8014ee0:	080128d5 	.word	0x080128d5
 8014ee4:	08014c3d 	.word	0x08014c3d
 8014ee8:	08016b04 	.word	0x08016b04

08014eec <__sfputc_r>:
 8014eec:	6893      	ldr	r3, [r2, #8]
 8014eee:	3b01      	subs	r3, #1
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	b410      	push	{r4}
 8014ef4:	6093      	str	r3, [r2, #8]
 8014ef6:	da08      	bge.n	8014f0a <__sfputc_r+0x1e>
 8014ef8:	6994      	ldr	r4, [r2, #24]
 8014efa:	42a3      	cmp	r3, r4
 8014efc:	db01      	blt.n	8014f02 <__sfputc_r+0x16>
 8014efe:	290a      	cmp	r1, #10
 8014f00:	d103      	bne.n	8014f0a <__sfputc_r+0x1e>
 8014f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f06:	f7fe ba46 	b.w	8013396 <__swbuf_r>
 8014f0a:	6813      	ldr	r3, [r2, #0]
 8014f0c:	1c58      	adds	r0, r3, #1
 8014f0e:	6010      	str	r0, [r2, #0]
 8014f10:	7019      	strb	r1, [r3, #0]
 8014f12:	4608      	mov	r0, r1
 8014f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f18:	4770      	bx	lr

08014f1a <__sfputs_r>:
 8014f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f1c:	4606      	mov	r6, r0
 8014f1e:	460f      	mov	r7, r1
 8014f20:	4614      	mov	r4, r2
 8014f22:	18d5      	adds	r5, r2, r3
 8014f24:	42ac      	cmp	r4, r5
 8014f26:	d101      	bne.n	8014f2c <__sfputs_r+0x12>
 8014f28:	2000      	movs	r0, #0
 8014f2a:	e007      	b.n	8014f3c <__sfputs_r+0x22>
 8014f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f30:	463a      	mov	r2, r7
 8014f32:	4630      	mov	r0, r6
 8014f34:	f7ff ffda 	bl	8014eec <__sfputc_r>
 8014f38:	1c43      	adds	r3, r0, #1
 8014f3a:	d1f3      	bne.n	8014f24 <__sfputs_r+0xa>
 8014f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014f40 <_vfiprintf_r>:
 8014f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f44:	460d      	mov	r5, r1
 8014f46:	b09d      	sub	sp, #116	@ 0x74
 8014f48:	4614      	mov	r4, r2
 8014f4a:	4698      	mov	r8, r3
 8014f4c:	4606      	mov	r6, r0
 8014f4e:	b118      	cbz	r0, 8014f58 <_vfiprintf_r+0x18>
 8014f50:	6a03      	ldr	r3, [r0, #32]
 8014f52:	b90b      	cbnz	r3, 8014f58 <_vfiprintf_r+0x18>
 8014f54:	f7fe f900 	bl	8013158 <__sinit>
 8014f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f5a:	07d9      	lsls	r1, r3, #31
 8014f5c:	d405      	bmi.n	8014f6a <_vfiprintf_r+0x2a>
 8014f5e:	89ab      	ldrh	r3, [r5, #12]
 8014f60:	059a      	lsls	r2, r3, #22
 8014f62:	d402      	bmi.n	8014f6a <_vfiprintf_r+0x2a>
 8014f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f66:	f7fe fb86 	bl	8013676 <__retarget_lock_acquire_recursive>
 8014f6a:	89ab      	ldrh	r3, [r5, #12]
 8014f6c:	071b      	lsls	r3, r3, #28
 8014f6e:	d501      	bpl.n	8014f74 <_vfiprintf_r+0x34>
 8014f70:	692b      	ldr	r3, [r5, #16]
 8014f72:	b99b      	cbnz	r3, 8014f9c <_vfiprintf_r+0x5c>
 8014f74:	4629      	mov	r1, r5
 8014f76:	4630      	mov	r0, r6
 8014f78:	f7fe fa4c 	bl	8013414 <__swsetup_r>
 8014f7c:	b170      	cbz	r0, 8014f9c <_vfiprintf_r+0x5c>
 8014f7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f80:	07dc      	lsls	r4, r3, #31
 8014f82:	d504      	bpl.n	8014f8e <_vfiprintf_r+0x4e>
 8014f84:	f04f 30ff 	mov.w	r0, #4294967295
 8014f88:	b01d      	add	sp, #116	@ 0x74
 8014f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f8e:	89ab      	ldrh	r3, [r5, #12]
 8014f90:	0598      	lsls	r0, r3, #22
 8014f92:	d4f7      	bmi.n	8014f84 <_vfiprintf_r+0x44>
 8014f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f96:	f7fe fb6f 	bl	8013678 <__retarget_lock_release_recursive>
 8014f9a:	e7f3      	b.n	8014f84 <_vfiprintf_r+0x44>
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fa0:	2320      	movs	r3, #32
 8014fa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014faa:	2330      	movs	r3, #48	@ 0x30
 8014fac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801515c <_vfiprintf_r+0x21c>
 8014fb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014fb4:	f04f 0901 	mov.w	r9, #1
 8014fb8:	4623      	mov	r3, r4
 8014fba:	469a      	mov	sl, r3
 8014fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fc0:	b10a      	cbz	r2, 8014fc6 <_vfiprintf_r+0x86>
 8014fc2:	2a25      	cmp	r2, #37	@ 0x25
 8014fc4:	d1f9      	bne.n	8014fba <_vfiprintf_r+0x7a>
 8014fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8014fca:	d00b      	beq.n	8014fe4 <_vfiprintf_r+0xa4>
 8014fcc:	465b      	mov	r3, fp
 8014fce:	4622      	mov	r2, r4
 8014fd0:	4629      	mov	r1, r5
 8014fd2:	4630      	mov	r0, r6
 8014fd4:	f7ff ffa1 	bl	8014f1a <__sfputs_r>
 8014fd8:	3001      	adds	r0, #1
 8014fda:	f000 80a7 	beq.w	801512c <_vfiprintf_r+0x1ec>
 8014fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014fe0:	445a      	add	r2, fp
 8014fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	f000 809f 	beq.w	801512c <_vfiprintf_r+0x1ec>
 8014fee:	2300      	movs	r3, #0
 8014ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8014ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ff8:	f10a 0a01 	add.w	sl, sl, #1
 8014ffc:	9304      	str	r3, [sp, #16]
 8014ffe:	9307      	str	r3, [sp, #28]
 8015000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015004:	931a      	str	r3, [sp, #104]	@ 0x68
 8015006:	4654      	mov	r4, sl
 8015008:	2205      	movs	r2, #5
 801500a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801500e:	4853      	ldr	r0, [pc, #332]	@ (801515c <_vfiprintf_r+0x21c>)
 8015010:	f7eb f8fe 	bl	8000210 <memchr>
 8015014:	9a04      	ldr	r2, [sp, #16]
 8015016:	b9d8      	cbnz	r0, 8015050 <_vfiprintf_r+0x110>
 8015018:	06d1      	lsls	r1, r2, #27
 801501a:	bf44      	itt	mi
 801501c:	2320      	movmi	r3, #32
 801501e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015022:	0713      	lsls	r3, r2, #28
 8015024:	bf44      	itt	mi
 8015026:	232b      	movmi	r3, #43	@ 0x2b
 8015028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801502c:	f89a 3000 	ldrb.w	r3, [sl]
 8015030:	2b2a      	cmp	r3, #42	@ 0x2a
 8015032:	d015      	beq.n	8015060 <_vfiprintf_r+0x120>
 8015034:	9a07      	ldr	r2, [sp, #28]
 8015036:	4654      	mov	r4, sl
 8015038:	2000      	movs	r0, #0
 801503a:	f04f 0c0a 	mov.w	ip, #10
 801503e:	4621      	mov	r1, r4
 8015040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015044:	3b30      	subs	r3, #48	@ 0x30
 8015046:	2b09      	cmp	r3, #9
 8015048:	d94b      	bls.n	80150e2 <_vfiprintf_r+0x1a2>
 801504a:	b1b0      	cbz	r0, 801507a <_vfiprintf_r+0x13a>
 801504c:	9207      	str	r2, [sp, #28]
 801504e:	e014      	b.n	801507a <_vfiprintf_r+0x13a>
 8015050:	eba0 0308 	sub.w	r3, r0, r8
 8015054:	fa09 f303 	lsl.w	r3, r9, r3
 8015058:	4313      	orrs	r3, r2
 801505a:	9304      	str	r3, [sp, #16]
 801505c:	46a2      	mov	sl, r4
 801505e:	e7d2      	b.n	8015006 <_vfiprintf_r+0xc6>
 8015060:	9b03      	ldr	r3, [sp, #12]
 8015062:	1d19      	adds	r1, r3, #4
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	9103      	str	r1, [sp, #12]
 8015068:	2b00      	cmp	r3, #0
 801506a:	bfbb      	ittet	lt
 801506c:	425b      	neglt	r3, r3
 801506e:	f042 0202 	orrlt.w	r2, r2, #2
 8015072:	9307      	strge	r3, [sp, #28]
 8015074:	9307      	strlt	r3, [sp, #28]
 8015076:	bfb8      	it	lt
 8015078:	9204      	strlt	r2, [sp, #16]
 801507a:	7823      	ldrb	r3, [r4, #0]
 801507c:	2b2e      	cmp	r3, #46	@ 0x2e
 801507e:	d10a      	bne.n	8015096 <_vfiprintf_r+0x156>
 8015080:	7863      	ldrb	r3, [r4, #1]
 8015082:	2b2a      	cmp	r3, #42	@ 0x2a
 8015084:	d132      	bne.n	80150ec <_vfiprintf_r+0x1ac>
 8015086:	9b03      	ldr	r3, [sp, #12]
 8015088:	1d1a      	adds	r2, r3, #4
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	9203      	str	r2, [sp, #12]
 801508e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015092:	3402      	adds	r4, #2
 8015094:	9305      	str	r3, [sp, #20]
 8015096:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801516c <_vfiprintf_r+0x22c>
 801509a:	7821      	ldrb	r1, [r4, #0]
 801509c:	2203      	movs	r2, #3
 801509e:	4650      	mov	r0, sl
 80150a0:	f7eb f8b6 	bl	8000210 <memchr>
 80150a4:	b138      	cbz	r0, 80150b6 <_vfiprintf_r+0x176>
 80150a6:	9b04      	ldr	r3, [sp, #16]
 80150a8:	eba0 000a 	sub.w	r0, r0, sl
 80150ac:	2240      	movs	r2, #64	@ 0x40
 80150ae:	4082      	lsls	r2, r0
 80150b0:	4313      	orrs	r3, r2
 80150b2:	3401      	adds	r4, #1
 80150b4:	9304      	str	r3, [sp, #16]
 80150b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150ba:	4829      	ldr	r0, [pc, #164]	@ (8015160 <_vfiprintf_r+0x220>)
 80150bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80150c0:	2206      	movs	r2, #6
 80150c2:	f7eb f8a5 	bl	8000210 <memchr>
 80150c6:	2800      	cmp	r0, #0
 80150c8:	d03f      	beq.n	801514a <_vfiprintf_r+0x20a>
 80150ca:	4b26      	ldr	r3, [pc, #152]	@ (8015164 <_vfiprintf_r+0x224>)
 80150cc:	bb1b      	cbnz	r3, 8015116 <_vfiprintf_r+0x1d6>
 80150ce:	9b03      	ldr	r3, [sp, #12]
 80150d0:	3307      	adds	r3, #7
 80150d2:	f023 0307 	bic.w	r3, r3, #7
 80150d6:	3308      	adds	r3, #8
 80150d8:	9303      	str	r3, [sp, #12]
 80150da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150dc:	443b      	add	r3, r7
 80150de:	9309      	str	r3, [sp, #36]	@ 0x24
 80150e0:	e76a      	b.n	8014fb8 <_vfiprintf_r+0x78>
 80150e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80150e6:	460c      	mov	r4, r1
 80150e8:	2001      	movs	r0, #1
 80150ea:	e7a8      	b.n	801503e <_vfiprintf_r+0xfe>
 80150ec:	2300      	movs	r3, #0
 80150ee:	3401      	adds	r4, #1
 80150f0:	9305      	str	r3, [sp, #20]
 80150f2:	4619      	mov	r1, r3
 80150f4:	f04f 0c0a 	mov.w	ip, #10
 80150f8:	4620      	mov	r0, r4
 80150fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150fe:	3a30      	subs	r2, #48	@ 0x30
 8015100:	2a09      	cmp	r2, #9
 8015102:	d903      	bls.n	801510c <_vfiprintf_r+0x1cc>
 8015104:	2b00      	cmp	r3, #0
 8015106:	d0c6      	beq.n	8015096 <_vfiprintf_r+0x156>
 8015108:	9105      	str	r1, [sp, #20]
 801510a:	e7c4      	b.n	8015096 <_vfiprintf_r+0x156>
 801510c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015110:	4604      	mov	r4, r0
 8015112:	2301      	movs	r3, #1
 8015114:	e7f0      	b.n	80150f8 <_vfiprintf_r+0x1b8>
 8015116:	ab03      	add	r3, sp, #12
 8015118:	9300      	str	r3, [sp, #0]
 801511a:	462a      	mov	r2, r5
 801511c:	4b12      	ldr	r3, [pc, #72]	@ (8015168 <_vfiprintf_r+0x228>)
 801511e:	a904      	add	r1, sp, #16
 8015120:	4630      	mov	r0, r6
 8015122:	f7fd fbd7 	bl	80128d4 <_printf_float>
 8015126:	4607      	mov	r7, r0
 8015128:	1c78      	adds	r0, r7, #1
 801512a:	d1d6      	bne.n	80150da <_vfiprintf_r+0x19a>
 801512c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801512e:	07d9      	lsls	r1, r3, #31
 8015130:	d405      	bmi.n	801513e <_vfiprintf_r+0x1fe>
 8015132:	89ab      	ldrh	r3, [r5, #12]
 8015134:	059a      	lsls	r2, r3, #22
 8015136:	d402      	bmi.n	801513e <_vfiprintf_r+0x1fe>
 8015138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801513a:	f7fe fa9d 	bl	8013678 <__retarget_lock_release_recursive>
 801513e:	89ab      	ldrh	r3, [r5, #12]
 8015140:	065b      	lsls	r3, r3, #25
 8015142:	f53f af1f 	bmi.w	8014f84 <_vfiprintf_r+0x44>
 8015146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015148:	e71e      	b.n	8014f88 <_vfiprintf_r+0x48>
 801514a:	ab03      	add	r3, sp, #12
 801514c:	9300      	str	r3, [sp, #0]
 801514e:	462a      	mov	r2, r5
 8015150:	4b05      	ldr	r3, [pc, #20]	@ (8015168 <_vfiprintf_r+0x228>)
 8015152:	a904      	add	r1, sp, #16
 8015154:	4630      	mov	r0, r6
 8015156:	f7fd fe55 	bl	8012e04 <_printf_i>
 801515a:	e7e4      	b.n	8015126 <_vfiprintf_r+0x1e6>
 801515c:	08016afe 	.word	0x08016afe
 8015160:	08016b08 	.word	0x08016b08
 8015164:	080128d5 	.word	0x080128d5
 8015168:	08014f1b 	.word	0x08014f1b
 801516c:	08016b04 	.word	0x08016b04

08015170 <__sflush_r>:
 8015170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015178:	0716      	lsls	r6, r2, #28
 801517a:	4605      	mov	r5, r0
 801517c:	460c      	mov	r4, r1
 801517e:	d454      	bmi.n	801522a <__sflush_r+0xba>
 8015180:	684b      	ldr	r3, [r1, #4]
 8015182:	2b00      	cmp	r3, #0
 8015184:	dc02      	bgt.n	801518c <__sflush_r+0x1c>
 8015186:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015188:	2b00      	cmp	r3, #0
 801518a:	dd48      	ble.n	801521e <__sflush_r+0xae>
 801518c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801518e:	2e00      	cmp	r6, #0
 8015190:	d045      	beq.n	801521e <__sflush_r+0xae>
 8015192:	2300      	movs	r3, #0
 8015194:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015198:	682f      	ldr	r7, [r5, #0]
 801519a:	6a21      	ldr	r1, [r4, #32]
 801519c:	602b      	str	r3, [r5, #0]
 801519e:	d030      	beq.n	8015202 <__sflush_r+0x92>
 80151a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80151a2:	89a3      	ldrh	r3, [r4, #12]
 80151a4:	0759      	lsls	r1, r3, #29
 80151a6:	d505      	bpl.n	80151b4 <__sflush_r+0x44>
 80151a8:	6863      	ldr	r3, [r4, #4]
 80151aa:	1ad2      	subs	r2, r2, r3
 80151ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80151ae:	b10b      	cbz	r3, 80151b4 <__sflush_r+0x44>
 80151b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80151b2:	1ad2      	subs	r2, r2, r3
 80151b4:	2300      	movs	r3, #0
 80151b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80151b8:	6a21      	ldr	r1, [r4, #32]
 80151ba:	4628      	mov	r0, r5
 80151bc:	47b0      	blx	r6
 80151be:	1c43      	adds	r3, r0, #1
 80151c0:	89a3      	ldrh	r3, [r4, #12]
 80151c2:	d106      	bne.n	80151d2 <__sflush_r+0x62>
 80151c4:	6829      	ldr	r1, [r5, #0]
 80151c6:	291d      	cmp	r1, #29
 80151c8:	d82b      	bhi.n	8015222 <__sflush_r+0xb2>
 80151ca:	4a2a      	ldr	r2, [pc, #168]	@ (8015274 <__sflush_r+0x104>)
 80151cc:	40ca      	lsrs	r2, r1
 80151ce:	07d6      	lsls	r6, r2, #31
 80151d0:	d527      	bpl.n	8015222 <__sflush_r+0xb2>
 80151d2:	2200      	movs	r2, #0
 80151d4:	6062      	str	r2, [r4, #4]
 80151d6:	04d9      	lsls	r1, r3, #19
 80151d8:	6922      	ldr	r2, [r4, #16]
 80151da:	6022      	str	r2, [r4, #0]
 80151dc:	d504      	bpl.n	80151e8 <__sflush_r+0x78>
 80151de:	1c42      	adds	r2, r0, #1
 80151e0:	d101      	bne.n	80151e6 <__sflush_r+0x76>
 80151e2:	682b      	ldr	r3, [r5, #0]
 80151e4:	b903      	cbnz	r3, 80151e8 <__sflush_r+0x78>
 80151e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80151e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80151ea:	602f      	str	r7, [r5, #0]
 80151ec:	b1b9      	cbz	r1, 801521e <__sflush_r+0xae>
 80151ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80151f2:	4299      	cmp	r1, r3
 80151f4:	d002      	beq.n	80151fc <__sflush_r+0x8c>
 80151f6:	4628      	mov	r0, r5
 80151f8:	f7ff f8a6 	bl	8014348 <_free_r>
 80151fc:	2300      	movs	r3, #0
 80151fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8015200:	e00d      	b.n	801521e <__sflush_r+0xae>
 8015202:	2301      	movs	r3, #1
 8015204:	4628      	mov	r0, r5
 8015206:	47b0      	blx	r6
 8015208:	4602      	mov	r2, r0
 801520a:	1c50      	adds	r0, r2, #1
 801520c:	d1c9      	bne.n	80151a2 <__sflush_r+0x32>
 801520e:	682b      	ldr	r3, [r5, #0]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d0c6      	beq.n	80151a2 <__sflush_r+0x32>
 8015214:	2b1d      	cmp	r3, #29
 8015216:	d001      	beq.n	801521c <__sflush_r+0xac>
 8015218:	2b16      	cmp	r3, #22
 801521a:	d11e      	bne.n	801525a <__sflush_r+0xea>
 801521c:	602f      	str	r7, [r5, #0]
 801521e:	2000      	movs	r0, #0
 8015220:	e022      	b.n	8015268 <__sflush_r+0xf8>
 8015222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015226:	b21b      	sxth	r3, r3
 8015228:	e01b      	b.n	8015262 <__sflush_r+0xf2>
 801522a:	690f      	ldr	r7, [r1, #16]
 801522c:	2f00      	cmp	r7, #0
 801522e:	d0f6      	beq.n	801521e <__sflush_r+0xae>
 8015230:	0793      	lsls	r3, r2, #30
 8015232:	680e      	ldr	r6, [r1, #0]
 8015234:	bf08      	it	eq
 8015236:	694b      	ldreq	r3, [r1, #20]
 8015238:	600f      	str	r7, [r1, #0]
 801523a:	bf18      	it	ne
 801523c:	2300      	movne	r3, #0
 801523e:	eba6 0807 	sub.w	r8, r6, r7
 8015242:	608b      	str	r3, [r1, #8]
 8015244:	f1b8 0f00 	cmp.w	r8, #0
 8015248:	dde9      	ble.n	801521e <__sflush_r+0xae>
 801524a:	6a21      	ldr	r1, [r4, #32]
 801524c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801524e:	4643      	mov	r3, r8
 8015250:	463a      	mov	r2, r7
 8015252:	4628      	mov	r0, r5
 8015254:	47b0      	blx	r6
 8015256:	2800      	cmp	r0, #0
 8015258:	dc08      	bgt.n	801526c <__sflush_r+0xfc>
 801525a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801525e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015262:	81a3      	strh	r3, [r4, #12]
 8015264:	f04f 30ff 	mov.w	r0, #4294967295
 8015268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801526c:	4407      	add	r7, r0
 801526e:	eba8 0800 	sub.w	r8, r8, r0
 8015272:	e7e7      	b.n	8015244 <__sflush_r+0xd4>
 8015274:	20400001 	.word	0x20400001

08015278 <_fflush_r>:
 8015278:	b538      	push	{r3, r4, r5, lr}
 801527a:	690b      	ldr	r3, [r1, #16]
 801527c:	4605      	mov	r5, r0
 801527e:	460c      	mov	r4, r1
 8015280:	b913      	cbnz	r3, 8015288 <_fflush_r+0x10>
 8015282:	2500      	movs	r5, #0
 8015284:	4628      	mov	r0, r5
 8015286:	bd38      	pop	{r3, r4, r5, pc}
 8015288:	b118      	cbz	r0, 8015292 <_fflush_r+0x1a>
 801528a:	6a03      	ldr	r3, [r0, #32]
 801528c:	b90b      	cbnz	r3, 8015292 <_fflush_r+0x1a>
 801528e:	f7fd ff63 	bl	8013158 <__sinit>
 8015292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d0f3      	beq.n	8015282 <_fflush_r+0xa>
 801529a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801529c:	07d0      	lsls	r0, r2, #31
 801529e:	d404      	bmi.n	80152aa <_fflush_r+0x32>
 80152a0:	0599      	lsls	r1, r3, #22
 80152a2:	d402      	bmi.n	80152aa <_fflush_r+0x32>
 80152a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80152a6:	f7fe f9e6 	bl	8013676 <__retarget_lock_acquire_recursive>
 80152aa:	4628      	mov	r0, r5
 80152ac:	4621      	mov	r1, r4
 80152ae:	f7ff ff5f 	bl	8015170 <__sflush_r>
 80152b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80152b4:	07da      	lsls	r2, r3, #31
 80152b6:	4605      	mov	r5, r0
 80152b8:	d4e4      	bmi.n	8015284 <_fflush_r+0xc>
 80152ba:	89a3      	ldrh	r3, [r4, #12]
 80152bc:	059b      	lsls	r3, r3, #22
 80152be:	d4e1      	bmi.n	8015284 <_fflush_r+0xc>
 80152c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80152c2:	f7fe f9d9 	bl	8013678 <__retarget_lock_release_recursive>
 80152c6:	e7dd      	b.n	8015284 <_fflush_r+0xc>

080152c8 <__swhatbuf_r>:
 80152c8:	b570      	push	{r4, r5, r6, lr}
 80152ca:	460c      	mov	r4, r1
 80152cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152d0:	2900      	cmp	r1, #0
 80152d2:	b096      	sub	sp, #88	@ 0x58
 80152d4:	4615      	mov	r5, r2
 80152d6:	461e      	mov	r6, r3
 80152d8:	da0d      	bge.n	80152f6 <__swhatbuf_r+0x2e>
 80152da:	89a3      	ldrh	r3, [r4, #12]
 80152dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80152e0:	f04f 0100 	mov.w	r1, #0
 80152e4:	bf14      	ite	ne
 80152e6:	2340      	movne	r3, #64	@ 0x40
 80152e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80152ec:	2000      	movs	r0, #0
 80152ee:	6031      	str	r1, [r6, #0]
 80152f0:	602b      	str	r3, [r5, #0]
 80152f2:	b016      	add	sp, #88	@ 0x58
 80152f4:	bd70      	pop	{r4, r5, r6, pc}
 80152f6:	466a      	mov	r2, sp
 80152f8:	f000 f862 	bl	80153c0 <_fstat_r>
 80152fc:	2800      	cmp	r0, #0
 80152fe:	dbec      	blt.n	80152da <__swhatbuf_r+0x12>
 8015300:	9901      	ldr	r1, [sp, #4]
 8015302:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015306:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801530a:	4259      	negs	r1, r3
 801530c:	4159      	adcs	r1, r3
 801530e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015312:	e7eb      	b.n	80152ec <__swhatbuf_r+0x24>

08015314 <__smakebuf_r>:
 8015314:	898b      	ldrh	r3, [r1, #12]
 8015316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015318:	079d      	lsls	r5, r3, #30
 801531a:	4606      	mov	r6, r0
 801531c:	460c      	mov	r4, r1
 801531e:	d507      	bpl.n	8015330 <__smakebuf_r+0x1c>
 8015320:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015324:	6023      	str	r3, [r4, #0]
 8015326:	6123      	str	r3, [r4, #16]
 8015328:	2301      	movs	r3, #1
 801532a:	6163      	str	r3, [r4, #20]
 801532c:	b003      	add	sp, #12
 801532e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015330:	ab01      	add	r3, sp, #4
 8015332:	466a      	mov	r2, sp
 8015334:	f7ff ffc8 	bl	80152c8 <__swhatbuf_r>
 8015338:	9f00      	ldr	r7, [sp, #0]
 801533a:	4605      	mov	r5, r0
 801533c:	4639      	mov	r1, r7
 801533e:	4630      	mov	r0, r6
 8015340:	f7ff f876 	bl	8014430 <_malloc_r>
 8015344:	b948      	cbnz	r0, 801535a <__smakebuf_r+0x46>
 8015346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801534a:	059a      	lsls	r2, r3, #22
 801534c:	d4ee      	bmi.n	801532c <__smakebuf_r+0x18>
 801534e:	f023 0303 	bic.w	r3, r3, #3
 8015352:	f043 0302 	orr.w	r3, r3, #2
 8015356:	81a3      	strh	r3, [r4, #12]
 8015358:	e7e2      	b.n	8015320 <__smakebuf_r+0xc>
 801535a:	89a3      	ldrh	r3, [r4, #12]
 801535c:	6020      	str	r0, [r4, #0]
 801535e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015362:	81a3      	strh	r3, [r4, #12]
 8015364:	9b01      	ldr	r3, [sp, #4]
 8015366:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801536a:	b15b      	cbz	r3, 8015384 <__smakebuf_r+0x70>
 801536c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015370:	4630      	mov	r0, r6
 8015372:	f000 f837 	bl	80153e4 <_isatty_r>
 8015376:	b128      	cbz	r0, 8015384 <__smakebuf_r+0x70>
 8015378:	89a3      	ldrh	r3, [r4, #12]
 801537a:	f023 0303 	bic.w	r3, r3, #3
 801537e:	f043 0301 	orr.w	r3, r3, #1
 8015382:	81a3      	strh	r3, [r4, #12]
 8015384:	89a3      	ldrh	r3, [r4, #12]
 8015386:	431d      	orrs	r5, r3
 8015388:	81a5      	strh	r5, [r4, #12]
 801538a:	e7cf      	b.n	801532c <__smakebuf_r+0x18>

0801538c <memmove>:
 801538c:	4288      	cmp	r0, r1
 801538e:	b510      	push	{r4, lr}
 8015390:	eb01 0402 	add.w	r4, r1, r2
 8015394:	d902      	bls.n	801539c <memmove+0x10>
 8015396:	4284      	cmp	r4, r0
 8015398:	4623      	mov	r3, r4
 801539a:	d807      	bhi.n	80153ac <memmove+0x20>
 801539c:	1e43      	subs	r3, r0, #1
 801539e:	42a1      	cmp	r1, r4
 80153a0:	d008      	beq.n	80153b4 <memmove+0x28>
 80153a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80153a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80153aa:	e7f8      	b.n	801539e <memmove+0x12>
 80153ac:	4402      	add	r2, r0
 80153ae:	4601      	mov	r1, r0
 80153b0:	428a      	cmp	r2, r1
 80153b2:	d100      	bne.n	80153b6 <memmove+0x2a>
 80153b4:	bd10      	pop	{r4, pc}
 80153b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80153ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80153be:	e7f7      	b.n	80153b0 <memmove+0x24>

080153c0 <_fstat_r>:
 80153c0:	b538      	push	{r3, r4, r5, lr}
 80153c2:	4d07      	ldr	r5, [pc, #28]	@ (80153e0 <_fstat_r+0x20>)
 80153c4:	2300      	movs	r3, #0
 80153c6:	4604      	mov	r4, r0
 80153c8:	4608      	mov	r0, r1
 80153ca:	4611      	mov	r1, r2
 80153cc:	602b      	str	r3, [r5, #0]
 80153ce:	f7ee ff3d 	bl	800424c <_fstat>
 80153d2:	1c43      	adds	r3, r0, #1
 80153d4:	d102      	bne.n	80153dc <_fstat_r+0x1c>
 80153d6:	682b      	ldr	r3, [r5, #0]
 80153d8:	b103      	cbz	r3, 80153dc <_fstat_r+0x1c>
 80153da:	6023      	str	r3, [r4, #0]
 80153dc:	bd38      	pop	{r3, r4, r5, pc}
 80153de:	bf00      	nop
 80153e0:	20005028 	.word	0x20005028

080153e4 <_isatty_r>:
 80153e4:	b538      	push	{r3, r4, r5, lr}
 80153e6:	4d06      	ldr	r5, [pc, #24]	@ (8015400 <_isatty_r+0x1c>)
 80153e8:	2300      	movs	r3, #0
 80153ea:	4604      	mov	r4, r0
 80153ec:	4608      	mov	r0, r1
 80153ee:	602b      	str	r3, [r5, #0]
 80153f0:	f7ee ff3c 	bl	800426c <_isatty>
 80153f4:	1c43      	adds	r3, r0, #1
 80153f6:	d102      	bne.n	80153fe <_isatty_r+0x1a>
 80153f8:	682b      	ldr	r3, [r5, #0]
 80153fa:	b103      	cbz	r3, 80153fe <_isatty_r+0x1a>
 80153fc:	6023      	str	r3, [r4, #0]
 80153fe:	bd38      	pop	{r3, r4, r5, pc}
 8015400:	20005028 	.word	0x20005028

08015404 <_sbrk_r>:
 8015404:	b538      	push	{r3, r4, r5, lr}
 8015406:	4d06      	ldr	r5, [pc, #24]	@ (8015420 <_sbrk_r+0x1c>)
 8015408:	2300      	movs	r3, #0
 801540a:	4604      	mov	r4, r0
 801540c:	4608      	mov	r0, r1
 801540e:	602b      	str	r3, [r5, #0]
 8015410:	f7ee ff44 	bl	800429c <_sbrk>
 8015414:	1c43      	adds	r3, r0, #1
 8015416:	d102      	bne.n	801541e <_sbrk_r+0x1a>
 8015418:	682b      	ldr	r3, [r5, #0]
 801541a:	b103      	cbz	r3, 801541e <_sbrk_r+0x1a>
 801541c:	6023      	str	r3, [r4, #0]
 801541e:	bd38      	pop	{r3, r4, r5, pc}
 8015420:	20005028 	.word	0x20005028

08015424 <__assert_func>:
 8015424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015426:	4614      	mov	r4, r2
 8015428:	461a      	mov	r2, r3
 801542a:	4b09      	ldr	r3, [pc, #36]	@ (8015450 <__assert_func+0x2c>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	4605      	mov	r5, r0
 8015430:	68d8      	ldr	r0, [r3, #12]
 8015432:	b14c      	cbz	r4, 8015448 <__assert_func+0x24>
 8015434:	4b07      	ldr	r3, [pc, #28]	@ (8015454 <__assert_func+0x30>)
 8015436:	9100      	str	r1, [sp, #0]
 8015438:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801543c:	4906      	ldr	r1, [pc, #24]	@ (8015458 <__assert_func+0x34>)
 801543e:	462b      	mov	r3, r5
 8015440:	f000 f870 	bl	8015524 <fiprintf>
 8015444:	f000 f880 	bl	8015548 <abort>
 8015448:	4b04      	ldr	r3, [pc, #16]	@ (801545c <__assert_func+0x38>)
 801544a:	461c      	mov	r4, r3
 801544c:	e7f3      	b.n	8015436 <__assert_func+0x12>
 801544e:	bf00      	nop
 8015450:	2000001c 	.word	0x2000001c
 8015454:	08016b19 	.word	0x08016b19
 8015458:	08016b26 	.word	0x08016b26
 801545c:	08016b54 	.word	0x08016b54

08015460 <_calloc_r>:
 8015460:	b570      	push	{r4, r5, r6, lr}
 8015462:	fba1 5402 	umull	r5, r4, r1, r2
 8015466:	b934      	cbnz	r4, 8015476 <_calloc_r+0x16>
 8015468:	4629      	mov	r1, r5
 801546a:	f7fe ffe1 	bl	8014430 <_malloc_r>
 801546e:	4606      	mov	r6, r0
 8015470:	b928      	cbnz	r0, 801547e <_calloc_r+0x1e>
 8015472:	4630      	mov	r0, r6
 8015474:	bd70      	pop	{r4, r5, r6, pc}
 8015476:	220c      	movs	r2, #12
 8015478:	6002      	str	r2, [r0, #0]
 801547a:	2600      	movs	r6, #0
 801547c:	e7f9      	b.n	8015472 <_calloc_r+0x12>
 801547e:	462a      	mov	r2, r5
 8015480:	4621      	mov	r1, r4
 8015482:	f7fe f81d 	bl	80134c0 <memset>
 8015486:	e7f4      	b.n	8015472 <_calloc_r+0x12>

08015488 <__ascii_mbtowc>:
 8015488:	b082      	sub	sp, #8
 801548a:	b901      	cbnz	r1, 801548e <__ascii_mbtowc+0x6>
 801548c:	a901      	add	r1, sp, #4
 801548e:	b142      	cbz	r2, 80154a2 <__ascii_mbtowc+0x1a>
 8015490:	b14b      	cbz	r3, 80154a6 <__ascii_mbtowc+0x1e>
 8015492:	7813      	ldrb	r3, [r2, #0]
 8015494:	600b      	str	r3, [r1, #0]
 8015496:	7812      	ldrb	r2, [r2, #0]
 8015498:	1e10      	subs	r0, r2, #0
 801549a:	bf18      	it	ne
 801549c:	2001      	movne	r0, #1
 801549e:	b002      	add	sp, #8
 80154a0:	4770      	bx	lr
 80154a2:	4610      	mov	r0, r2
 80154a4:	e7fb      	b.n	801549e <__ascii_mbtowc+0x16>
 80154a6:	f06f 0001 	mvn.w	r0, #1
 80154aa:	e7f8      	b.n	801549e <__ascii_mbtowc+0x16>

080154ac <_realloc_r>:
 80154ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154b0:	4607      	mov	r7, r0
 80154b2:	4614      	mov	r4, r2
 80154b4:	460d      	mov	r5, r1
 80154b6:	b921      	cbnz	r1, 80154c2 <_realloc_r+0x16>
 80154b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154bc:	4611      	mov	r1, r2
 80154be:	f7fe bfb7 	b.w	8014430 <_malloc_r>
 80154c2:	b92a      	cbnz	r2, 80154d0 <_realloc_r+0x24>
 80154c4:	f7fe ff40 	bl	8014348 <_free_r>
 80154c8:	4625      	mov	r5, r4
 80154ca:	4628      	mov	r0, r5
 80154cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154d0:	f000 f841 	bl	8015556 <_malloc_usable_size_r>
 80154d4:	4284      	cmp	r4, r0
 80154d6:	4606      	mov	r6, r0
 80154d8:	d802      	bhi.n	80154e0 <_realloc_r+0x34>
 80154da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80154de:	d8f4      	bhi.n	80154ca <_realloc_r+0x1e>
 80154e0:	4621      	mov	r1, r4
 80154e2:	4638      	mov	r0, r7
 80154e4:	f7fe ffa4 	bl	8014430 <_malloc_r>
 80154e8:	4680      	mov	r8, r0
 80154ea:	b908      	cbnz	r0, 80154f0 <_realloc_r+0x44>
 80154ec:	4645      	mov	r5, r8
 80154ee:	e7ec      	b.n	80154ca <_realloc_r+0x1e>
 80154f0:	42b4      	cmp	r4, r6
 80154f2:	4622      	mov	r2, r4
 80154f4:	4629      	mov	r1, r5
 80154f6:	bf28      	it	cs
 80154f8:	4632      	movcs	r2, r6
 80154fa:	f7fe f8be 	bl	801367a <memcpy>
 80154fe:	4629      	mov	r1, r5
 8015500:	4638      	mov	r0, r7
 8015502:	f7fe ff21 	bl	8014348 <_free_r>
 8015506:	e7f1      	b.n	80154ec <_realloc_r+0x40>

08015508 <__ascii_wctomb>:
 8015508:	4603      	mov	r3, r0
 801550a:	4608      	mov	r0, r1
 801550c:	b141      	cbz	r1, 8015520 <__ascii_wctomb+0x18>
 801550e:	2aff      	cmp	r2, #255	@ 0xff
 8015510:	d904      	bls.n	801551c <__ascii_wctomb+0x14>
 8015512:	228a      	movs	r2, #138	@ 0x8a
 8015514:	601a      	str	r2, [r3, #0]
 8015516:	f04f 30ff 	mov.w	r0, #4294967295
 801551a:	4770      	bx	lr
 801551c:	700a      	strb	r2, [r1, #0]
 801551e:	2001      	movs	r0, #1
 8015520:	4770      	bx	lr
	...

08015524 <fiprintf>:
 8015524:	b40e      	push	{r1, r2, r3}
 8015526:	b503      	push	{r0, r1, lr}
 8015528:	4601      	mov	r1, r0
 801552a:	ab03      	add	r3, sp, #12
 801552c:	4805      	ldr	r0, [pc, #20]	@ (8015544 <fiprintf+0x20>)
 801552e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015532:	6800      	ldr	r0, [r0, #0]
 8015534:	9301      	str	r3, [sp, #4]
 8015536:	f7ff fd03 	bl	8014f40 <_vfiprintf_r>
 801553a:	b002      	add	sp, #8
 801553c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015540:	b003      	add	sp, #12
 8015542:	4770      	bx	lr
 8015544:	2000001c 	.word	0x2000001c

08015548 <abort>:
 8015548:	b508      	push	{r3, lr}
 801554a:	2006      	movs	r0, #6
 801554c:	f000 f834 	bl	80155b8 <raise>
 8015550:	2001      	movs	r0, #1
 8015552:	f7ee fe2b 	bl	80041ac <_exit>

08015556 <_malloc_usable_size_r>:
 8015556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801555a:	1f18      	subs	r0, r3, #4
 801555c:	2b00      	cmp	r3, #0
 801555e:	bfbc      	itt	lt
 8015560:	580b      	ldrlt	r3, [r1, r0]
 8015562:	18c0      	addlt	r0, r0, r3
 8015564:	4770      	bx	lr

08015566 <_raise_r>:
 8015566:	291f      	cmp	r1, #31
 8015568:	b538      	push	{r3, r4, r5, lr}
 801556a:	4605      	mov	r5, r0
 801556c:	460c      	mov	r4, r1
 801556e:	d904      	bls.n	801557a <_raise_r+0x14>
 8015570:	2316      	movs	r3, #22
 8015572:	6003      	str	r3, [r0, #0]
 8015574:	f04f 30ff 	mov.w	r0, #4294967295
 8015578:	bd38      	pop	{r3, r4, r5, pc}
 801557a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801557c:	b112      	cbz	r2, 8015584 <_raise_r+0x1e>
 801557e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015582:	b94b      	cbnz	r3, 8015598 <_raise_r+0x32>
 8015584:	4628      	mov	r0, r5
 8015586:	f000 f831 	bl	80155ec <_getpid_r>
 801558a:	4622      	mov	r2, r4
 801558c:	4601      	mov	r1, r0
 801558e:	4628      	mov	r0, r5
 8015590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015594:	f000 b818 	b.w	80155c8 <_kill_r>
 8015598:	2b01      	cmp	r3, #1
 801559a:	d00a      	beq.n	80155b2 <_raise_r+0x4c>
 801559c:	1c59      	adds	r1, r3, #1
 801559e:	d103      	bne.n	80155a8 <_raise_r+0x42>
 80155a0:	2316      	movs	r3, #22
 80155a2:	6003      	str	r3, [r0, #0]
 80155a4:	2001      	movs	r0, #1
 80155a6:	e7e7      	b.n	8015578 <_raise_r+0x12>
 80155a8:	2100      	movs	r1, #0
 80155aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80155ae:	4620      	mov	r0, r4
 80155b0:	4798      	blx	r3
 80155b2:	2000      	movs	r0, #0
 80155b4:	e7e0      	b.n	8015578 <_raise_r+0x12>
	...

080155b8 <raise>:
 80155b8:	4b02      	ldr	r3, [pc, #8]	@ (80155c4 <raise+0xc>)
 80155ba:	4601      	mov	r1, r0
 80155bc:	6818      	ldr	r0, [r3, #0]
 80155be:	f7ff bfd2 	b.w	8015566 <_raise_r>
 80155c2:	bf00      	nop
 80155c4:	2000001c 	.word	0x2000001c

080155c8 <_kill_r>:
 80155c8:	b538      	push	{r3, r4, r5, lr}
 80155ca:	4d07      	ldr	r5, [pc, #28]	@ (80155e8 <_kill_r+0x20>)
 80155cc:	2300      	movs	r3, #0
 80155ce:	4604      	mov	r4, r0
 80155d0:	4608      	mov	r0, r1
 80155d2:	4611      	mov	r1, r2
 80155d4:	602b      	str	r3, [r5, #0]
 80155d6:	f7ee fdd9 	bl	800418c <_kill>
 80155da:	1c43      	adds	r3, r0, #1
 80155dc:	d102      	bne.n	80155e4 <_kill_r+0x1c>
 80155de:	682b      	ldr	r3, [r5, #0]
 80155e0:	b103      	cbz	r3, 80155e4 <_kill_r+0x1c>
 80155e2:	6023      	str	r3, [r4, #0]
 80155e4:	bd38      	pop	{r3, r4, r5, pc}
 80155e6:	bf00      	nop
 80155e8:	20005028 	.word	0x20005028

080155ec <_getpid_r>:
 80155ec:	f7ee bdc6 	b.w	800417c <_getpid>

080155f0 <atan2f>:
 80155f0:	f000 b884 	b.w	80156fc <__ieee754_atan2f>

080155f4 <powf>:
 80155f4:	b508      	push	{r3, lr}
 80155f6:	ed2d 8b04 	vpush	{d8-d9}
 80155fa:	eeb0 8a60 	vmov.f32	s16, s1
 80155fe:	eeb0 9a40 	vmov.f32	s18, s0
 8015602:	f000 f91b 	bl	801583c <__ieee754_powf>
 8015606:	eeb4 8a48 	vcmp.f32	s16, s16
 801560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801560e:	eef0 8a40 	vmov.f32	s17, s0
 8015612:	d63e      	bvs.n	8015692 <powf+0x9e>
 8015614:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8015618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801561c:	d112      	bne.n	8015644 <powf+0x50>
 801561e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015626:	d039      	beq.n	801569c <powf+0xa8>
 8015628:	eeb0 0a48 	vmov.f32	s0, s16
 801562c:	f000 f858 	bl	80156e0 <finitef>
 8015630:	b378      	cbz	r0, 8015692 <powf+0x9e>
 8015632:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801563a:	d52a      	bpl.n	8015692 <powf+0x9e>
 801563c:	f7fd fff0 	bl	8013620 <__errno>
 8015640:	2322      	movs	r3, #34	@ 0x22
 8015642:	e014      	b.n	801566e <powf+0x7a>
 8015644:	f000 f84c 	bl	80156e0 <finitef>
 8015648:	b998      	cbnz	r0, 8015672 <powf+0x7e>
 801564a:	eeb0 0a49 	vmov.f32	s0, s18
 801564e:	f000 f847 	bl	80156e0 <finitef>
 8015652:	b170      	cbz	r0, 8015672 <powf+0x7e>
 8015654:	eeb0 0a48 	vmov.f32	s0, s16
 8015658:	f000 f842 	bl	80156e0 <finitef>
 801565c:	b148      	cbz	r0, 8015672 <powf+0x7e>
 801565e:	eef4 8a68 	vcmp.f32	s17, s17
 8015662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015666:	d7e9      	bvc.n	801563c <powf+0x48>
 8015668:	f7fd ffda 	bl	8013620 <__errno>
 801566c:	2321      	movs	r3, #33	@ 0x21
 801566e:	6003      	str	r3, [r0, #0]
 8015670:	e00f      	b.n	8015692 <powf+0x9e>
 8015672:	eef5 8a40 	vcmp.f32	s17, #0.0
 8015676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801567a:	d10a      	bne.n	8015692 <powf+0x9e>
 801567c:	eeb0 0a49 	vmov.f32	s0, s18
 8015680:	f000 f82e 	bl	80156e0 <finitef>
 8015684:	b128      	cbz	r0, 8015692 <powf+0x9e>
 8015686:	eeb0 0a48 	vmov.f32	s0, s16
 801568a:	f000 f829 	bl	80156e0 <finitef>
 801568e:	2800      	cmp	r0, #0
 8015690:	d1d4      	bne.n	801563c <powf+0x48>
 8015692:	eeb0 0a68 	vmov.f32	s0, s17
 8015696:	ecbd 8b04 	vpop	{d8-d9}
 801569a:	bd08      	pop	{r3, pc}
 801569c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80156a0:	e7f7      	b.n	8015692 <powf+0x9e>
	...

080156a4 <sqrtf>:
 80156a4:	b508      	push	{r3, lr}
 80156a6:	ed2d 8b02 	vpush	{d8}
 80156aa:	eeb0 8a40 	vmov.f32	s16, s0
 80156ae:	f000 f821 	bl	80156f4 <__ieee754_sqrtf>
 80156b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80156b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ba:	d60c      	bvs.n	80156d6 <sqrtf+0x32>
 80156bc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80156dc <sqrtf+0x38>
 80156c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80156c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c8:	d505      	bpl.n	80156d6 <sqrtf+0x32>
 80156ca:	f7fd ffa9 	bl	8013620 <__errno>
 80156ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80156d2:	2321      	movs	r3, #33	@ 0x21
 80156d4:	6003      	str	r3, [r0, #0]
 80156d6:	ecbd 8b02 	vpop	{d8}
 80156da:	bd08      	pop	{r3, pc}
 80156dc:	00000000 	.word	0x00000000

080156e0 <finitef>:
 80156e0:	ee10 3a10 	vmov	r3, s0
 80156e4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80156e8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80156ec:	bfac      	ite	ge
 80156ee:	2000      	movge	r0, #0
 80156f0:	2001      	movlt	r0, #1
 80156f2:	4770      	bx	lr

080156f4 <__ieee754_sqrtf>:
 80156f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80156f8:	4770      	bx	lr
	...

080156fc <__ieee754_atan2f>:
 80156fc:	ee10 2a90 	vmov	r2, s1
 8015700:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8015704:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8015708:	b510      	push	{r4, lr}
 801570a:	eef0 7a40 	vmov.f32	s15, s0
 801570e:	d806      	bhi.n	801571e <__ieee754_atan2f+0x22>
 8015710:	ee10 0a10 	vmov	r0, s0
 8015714:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8015718:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801571c:	d904      	bls.n	8015728 <__ieee754_atan2f+0x2c>
 801571e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8015722:	eeb0 0a67 	vmov.f32	s0, s15
 8015726:	bd10      	pop	{r4, pc}
 8015728:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801572c:	d103      	bne.n	8015736 <__ieee754_atan2f+0x3a>
 801572e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015732:	f000 bb51 	b.w	8015dd8 <atanf>
 8015736:	1794      	asrs	r4, r2, #30
 8015738:	f004 0402 	and.w	r4, r4, #2
 801573c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8015740:	b943      	cbnz	r3, 8015754 <__ieee754_atan2f+0x58>
 8015742:	2c02      	cmp	r4, #2
 8015744:	d05e      	beq.n	8015804 <__ieee754_atan2f+0x108>
 8015746:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8015818 <__ieee754_atan2f+0x11c>
 801574a:	2c03      	cmp	r4, #3
 801574c:	bf08      	it	eq
 801574e:	eef0 7a47 	vmoveq.f32	s15, s14
 8015752:	e7e6      	b.n	8015722 <__ieee754_atan2f+0x26>
 8015754:	b941      	cbnz	r1, 8015768 <__ieee754_atan2f+0x6c>
 8015756:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801581c <__ieee754_atan2f+0x120>
 801575a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8015820 <__ieee754_atan2f+0x124>
 801575e:	2800      	cmp	r0, #0
 8015760:	bfa8      	it	ge
 8015762:	eef0 7a47 	vmovge.f32	s15, s14
 8015766:	e7dc      	b.n	8015722 <__ieee754_atan2f+0x26>
 8015768:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801576c:	d110      	bne.n	8015790 <__ieee754_atan2f+0x94>
 801576e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015772:	f104 34ff 	add.w	r4, r4, #4294967295
 8015776:	d107      	bne.n	8015788 <__ieee754_atan2f+0x8c>
 8015778:	2c02      	cmp	r4, #2
 801577a:	d846      	bhi.n	801580a <__ieee754_atan2f+0x10e>
 801577c:	4b29      	ldr	r3, [pc, #164]	@ (8015824 <__ieee754_atan2f+0x128>)
 801577e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015782:	edd3 7a00 	vldr	s15, [r3]
 8015786:	e7cc      	b.n	8015722 <__ieee754_atan2f+0x26>
 8015788:	2c02      	cmp	r4, #2
 801578a:	d841      	bhi.n	8015810 <__ieee754_atan2f+0x114>
 801578c:	4b26      	ldr	r3, [pc, #152]	@ (8015828 <__ieee754_atan2f+0x12c>)
 801578e:	e7f6      	b.n	801577e <__ieee754_atan2f+0x82>
 8015790:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015794:	d0df      	beq.n	8015756 <__ieee754_atan2f+0x5a>
 8015796:	1a5b      	subs	r3, r3, r1
 8015798:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801579c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80157a0:	da1a      	bge.n	80157d8 <__ieee754_atan2f+0xdc>
 80157a2:	2a00      	cmp	r2, #0
 80157a4:	da01      	bge.n	80157aa <__ieee754_atan2f+0xae>
 80157a6:	313c      	adds	r1, #60	@ 0x3c
 80157a8:	db19      	blt.n	80157de <__ieee754_atan2f+0xe2>
 80157aa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80157ae:	f000 fbe7 	bl	8015f80 <fabsf>
 80157b2:	f000 fb11 	bl	8015dd8 <atanf>
 80157b6:	eef0 7a40 	vmov.f32	s15, s0
 80157ba:	2c01      	cmp	r4, #1
 80157bc:	d012      	beq.n	80157e4 <__ieee754_atan2f+0xe8>
 80157be:	2c02      	cmp	r4, #2
 80157c0:	d017      	beq.n	80157f2 <__ieee754_atan2f+0xf6>
 80157c2:	2c00      	cmp	r4, #0
 80157c4:	d0ad      	beq.n	8015722 <__ieee754_atan2f+0x26>
 80157c6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801582c <__ieee754_atan2f+0x130>
 80157ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80157ce:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8015830 <__ieee754_atan2f+0x134>
 80157d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80157d6:	e7a4      	b.n	8015722 <__ieee754_atan2f+0x26>
 80157d8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8015820 <__ieee754_atan2f+0x124>
 80157dc:	e7ed      	b.n	80157ba <__ieee754_atan2f+0xbe>
 80157de:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8015834 <__ieee754_atan2f+0x138>
 80157e2:	e7ea      	b.n	80157ba <__ieee754_atan2f+0xbe>
 80157e4:	ee17 3a90 	vmov	r3, s15
 80157e8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80157ec:	ee07 3a90 	vmov	s15, r3
 80157f0:	e797      	b.n	8015722 <__ieee754_atan2f+0x26>
 80157f2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801582c <__ieee754_atan2f+0x130>
 80157f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80157fa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8015830 <__ieee754_atan2f+0x134>
 80157fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015802:	e78e      	b.n	8015722 <__ieee754_atan2f+0x26>
 8015804:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8015830 <__ieee754_atan2f+0x134>
 8015808:	e78b      	b.n	8015722 <__ieee754_atan2f+0x26>
 801580a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8015838 <__ieee754_atan2f+0x13c>
 801580e:	e788      	b.n	8015722 <__ieee754_atan2f+0x26>
 8015810:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8015834 <__ieee754_atan2f+0x138>
 8015814:	e785      	b.n	8015722 <__ieee754_atan2f+0x26>
 8015816:	bf00      	nop
 8015818:	c0490fdb 	.word	0xc0490fdb
 801581c:	bfc90fdb 	.word	0xbfc90fdb
 8015820:	3fc90fdb 	.word	0x3fc90fdb
 8015824:	08016d68 	.word	0x08016d68
 8015828:	08016d5c 	.word	0x08016d5c
 801582c:	33bbbd2e 	.word	0x33bbbd2e
 8015830:	40490fdb 	.word	0x40490fdb
 8015834:	00000000 	.word	0x00000000
 8015838:	3f490fdb 	.word	0x3f490fdb

0801583c <__ieee754_powf>:
 801583c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015840:	ee10 4a90 	vmov	r4, s1
 8015844:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8015848:	ed2d 8b02 	vpush	{d8}
 801584c:	ee10 6a10 	vmov	r6, s0
 8015850:	eeb0 8a40 	vmov.f32	s16, s0
 8015854:	eef0 8a60 	vmov.f32	s17, s1
 8015858:	d10c      	bne.n	8015874 <__ieee754_powf+0x38>
 801585a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801585e:	0076      	lsls	r6, r6, #1
 8015860:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8015864:	f240 8274 	bls.w	8015d50 <__ieee754_powf+0x514>
 8015868:	ee38 0a28 	vadd.f32	s0, s16, s17
 801586c:	ecbd 8b02 	vpop	{d8}
 8015870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015874:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8015878:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801587c:	d802      	bhi.n	8015884 <__ieee754_powf+0x48>
 801587e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8015882:	d908      	bls.n	8015896 <__ieee754_powf+0x5a>
 8015884:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8015888:	d1ee      	bne.n	8015868 <__ieee754_powf+0x2c>
 801588a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801588e:	0064      	lsls	r4, r4, #1
 8015890:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8015894:	e7e6      	b.n	8015864 <__ieee754_powf+0x28>
 8015896:	2e00      	cmp	r6, #0
 8015898:	da1f      	bge.n	80158da <__ieee754_powf+0x9e>
 801589a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801589e:	f080 8260 	bcs.w	8015d62 <__ieee754_powf+0x526>
 80158a2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80158a6:	d32f      	bcc.n	8015908 <__ieee754_powf+0xcc>
 80158a8:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80158ac:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80158b0:	fa49 f503 	asr.w	r5, r9, r3
 80158b4:	fa05 f303 	lsl.w	r3, r5, r3
 80158b8:	454b      	cmp	r3, r9
 80158ba:	d123      	bne.n	8015904 <__ieee754_powf+0xc8>
 80158bc:	f005 0501 	and.w	r5, r5, #1
 80158c0:	f1c5 0502 	rsb	r5, r5, #2
 80158c4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80158c8:	d11f      	bne.n	801590a <__ieee754_powf+0xce>
 80158ca:	2c00      	cmp	r4, #0
 80158cc:	f280 8246 	bge.w	8015d5c <__ieee754_powf+0x520>
 80158d0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80158d4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80158d8:	e7c8      	b.n	801586c <__ieee754_powf+0x30>
 80158da:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80158de:	d111      	bne.n	8015904 <__ieee754_powf+0xc8>
 80158e0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80158e4:	f000 8234 	beq.w	8015d50 <__ieee754_powf+0x514>
 80158e8:	d906      	bls.n	80158f8 <__ieee754_powf+0xbc>
 80158ea:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8015c00 <__ieee754_powf+0x3c4>
 80158ee:	2c00      	cmp	r4, #0
 80158f0:	bfa8      	it	ge
 80158f2:	eeb0 0a68 	vmovge.f32	s0, s17
 80158f6:	e7b9      	b.n	801586c <__ieee754_powf+0x30>
 80158f8:	2c00      	cmp	r4, #0
 80158fa:	f280 822c 	bge.w	8015d56 <__ieee754_powf+0x51a>
 80158fe:	eeb1 0a68 	vneg.f32	s0, s17
 8015902:	e7b3      	b.n	801586c <__ieee754_powf+0x30>
 8015904:	2500      	movs	r5, #0
 8015906:	e7dd      	b.n	80158c4 <__ieee754_powf+0x88>
 8015908:	2500      	movs	r5, #0
 801590a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801590e:	d102      	bne.n	8015916 <__ieee754_powf+0xda>
 8015910:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015914:	e7aa      	b.n	801586c <__ieee754_powf+0x30>
 8015916:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801591a:	f040 8227 	bne.w	8015d6c <__ieee754_powf+0x530>
 801591e:	2e00      	cmp	r6, #0
 8015920:	f2c0 8224 	blt.w	8015d6c <__ieee754_powf+0x530>
 8015924:	eeb0 0a48 	vmov.f32	s0, s16
 8015928:	ecbd 8b02 	vpop	{d8}
 801592c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015930:	f7ff bee0 	b.w	80156f4 <__ieee754_sqrtf>
 8015934:	2d01      	cmp	r5, #1
 8015936:	d199      	bne.n	801586c <__ieee754_powf+0x30>
 8015938:	eeb1 0a40 	vneg.f32	s0, s0
 801593c:	e796      	b.n	801586c <__ieee754_powf+0x30>
 801593e:	0ff0      	lsrs	r0, r6, #31
 8015940:	3801      	subs	r0, #1
 8015942:	ea55 0300 	orrs.w	r3, r5, r0
 8015946:	d104      	bne.n	8015952 <__ieee754_powf+0x116>
 8015948:	ee38 8a48 	vsub.f32	s16, s16, s16
 801594c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015950:	e78c      	b.n	801586c <__ieee754_powf+0x30>
 8015952:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8015956:	d96d      	bls.n	8015a34 <__ieee754_powf+0x1f8>
 8015958:	4baa      	ldr	r3, [pc, #680]	@ (8015c04 <__ieee754_powf+0x3c8>)
 801595a:	4598      	cmp	r8, r3
 801595c:	d808      	bhi.n	8015970 <__ieee754_powf+0x134>
 801595e:	2c00      	cmp	r4, #0
 8015960:	da0b      	bge.n	801597a <__ieee754_powf+0x13e>
 8015962:	2000      	movs	r0, #0
 8015964:	ecbd 8b02 	vpop	{d8}
 8015968:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801596c:	f000 bb96 	b.w	801609c <__math_oflowf>
 8015970:	4ba5      	ldr	r3, [pc, #660]	@ (8015c08 <__ieee754_powf+0x3cc>)
 8015972:	4598      	cmp	r8, r3
 8015974:	d908      	bls.n	8015988 <__ieee754_powf+0x14c>
 8015976:	2c00      	cmp	r4, #0
 8015978:	dcf3      	bgt.n	8015962 <__ieee754_powf+0x126>
 801597a:	2000      	movs	r0, #0
 801597c:	ecbd 8b02 	vpop	{d8}
 8015980:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015984:	f000 bb84 	b.w	8016090 <__math_uflowf>
 8015988:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801598c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015990:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8015c0c <__ieee754_powf+0x3d0>
 8015994:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8015998:	eee0 6a67 	vfms.f32	s13, s0, s15
 801599c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80159a0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80159a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80159a8:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8015c10 <__ieee754_powf+0x3d4>
 80159ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80159b0:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8015c14 <__ieee754_powf+0x3d8>
 80159b4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80159b8:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8015c18 <__ieee754_powf+0x3dc>
 80159bc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80159c0:	eeb0 7a67 	vmov.f32	s14, s15
 80159c4:	eea0 7a26 	vfma.f32	s14, s0, s13
 80159c8:	ee17 3a10 	vmov	r3, s14
 80159cc:	f36f 030b 	bfc	r3, #0, #12
 80159d0:	ee07 3a10 	vmov	s14, r3
 80159d4:	eeb0 6a47 	vmov.f32	s12, s14
 80159d8:	eea0 6a66 	vfms.f32	s12, s0, s13
 80159dc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80159e0:	3d01      	subs	r5, #1
 80159e2:	4305      	orrs	r5, r0
 80159e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80159e8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80159ec:	f36f 040b 	bfc	r4, #0, #12
 80159f0:	bf18      	it	ne
 80159f2:	eeb0 8a66 	vmovne.f32	s16, s13
 80159f6:	ee06 4a90 	vmov	s13, r4
 80159fa:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80159fe:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8015a02:	ee67 7a26 	vmul.f32	s15, s14, s13
 8015a06:	eee6 0a07 	vfma.f32	s1, s12, s14
 8015a0a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8015a0e:	ee17 1a10 	vmov	r1, s14
 8015a12:	2900      	cmp	r1, #0
 8015a14:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015a18:	f340 80dd 	ble.w	8015bd6 <__ieee754_powf+0x39a>
 8015a1c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8015a20:	f240 80ca 	bls.w	8015bb8 <__ieee754_powf+0x37c>
 8015a24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a2c:	bf4c      	ite	mi
 8015a2e:	2001      	movmi	r0, #1
 8015a30:	2000      	movpl	r0, #0
 8015a32:	e797      	b.n	8015964 <__ieee754_powf+0x128>
 8015a34:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8015a38:	bf01      	itttt	eq
 8015a3a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8015c1c <__ieee754_powf+0x3e0>
 8015a3e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8015a42:	f06f 0317 	mvneq.w	r3, #23
 8015a46:	ee17 7a90 	vmoveq	r7, s15
 8015a4a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8015a4e:	bf18      	it	ne
 8015a50:	2300      	movne	r3, #0
 8015a52:	3a7f      	subs	r2, #127	@ 0x7f
 8015a54:	441a      	add	r2, r3
 8015a56:	4b72      	ldr	r3, [pc, #456]	@ (8015c20 <__ieee754_powf+0x3e4>)
 8015a58:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8015a5c:	429f      	cmp	r7, r3
 8015a5e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8015a62:	dd06      	ble.n	8015a72 <__ieee754_powf+0x236>
 8015a64:	4b6f      	ldr	r3, [pc, #444]	@ (8015c24 <__ieee754_powf+0x3e8>)
 8015a66:	429f      	cmp	r7, r3
 8015a68:	f340 80a4 	ble.w	8015bb4 <__ieee754_powf+0x378>
 8015a6c:	3201      	adds	r2, #1
 8015a6e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8015a72:	2600      	movs	r6, #0
 8015a74:	4b6c      	ldr	r3, [pc, #432]	@ (8015c28 <__ieee754_powf+0x3ec>)
 8015a76:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8015a7a:	ee07 1a10 	vmov	s14, r1
 8015a7e:	edd3 5a00 	vldr	s11, [r3]
 8015a82:	4b6a      	ldr	r3, [pc, #424]	@ (8015c2c <__ieee754_powf+0x3f0>)
 8015a84:	ee75 7a87 	vadd.f32	s15, s11, s14
 8015a88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015a8c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8015a90:	1049      	asrs	r1, r1, #1
 8015a92:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8015a96:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8015a9a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8015a9e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8015aa2:	ee07 1a90 	vmov	s15, r1
 8015aa6:	ee26 5a24 	vmul.f32	s10, s12, s9
 8015aaa:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8015aae:	ee15 7a10 	vmov	r7, s10
 8015ab2:	401f      	ands	r7, r3
 8015ab4:	ee06 7a90 	vmov	s13, r7
 8015ab8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8015abc:	ee37 7a65 	vsub.f32	s14, s14, s11
 8015ac0:	ee65 7a05 	vmul.f32	s15, s10, s10
 8015ac4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8015ac8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8015c30 <__ieee754_powf+0x3f4>
 8015acc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8015c34 <__ieee754_powf+0x3f8>
 8015ad0:	eee7 5a87 	vfma.f32	s11, s15, s14
 8015ad4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8015c38 <__ieee754_powf+0x3fc>
 8015ad8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8015adc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8015c0c <__ieee754_powf+0x3d0>
 8015ae0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8015ae4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8015c3c <__ieee754_powf+0x400>
 8015ae8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8015aec:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8015c40 <__ieee754_powf+0x404>
 8015af0:	ee26 6a24 	vmul.f32	s12, s12, s9
 8015af4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8015af8:	ee35 7a26 	vadd.f32	s14, s10, s13
 8015afc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8015b00:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015b04:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8015b08:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8015b0c:	eef0 5a67 	vmov.f32	s11, s15
 8015b10:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8015b14:	ee75 5a87 	vadd.f32	s11, s11, s14
 8015b18:	ee15 1a90 	vmov	r1, s11
 8015b1c:	4019      	ands	r1, r3
 8015b1e:	ee05 1a90 	vmov	s11, r1
 8015b22:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8015b26:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8015b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b2e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8015b32:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015b36:	eeb0 6a67 	vmov.f32	s12, s15
 8015b3a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015b3e:	ee16 1a10 	vmov	r1, s12
 8015b42:	4019      	ands	r1, r3
 8015b44:	ee06 1a10 	vmov	s12, r1
 8015b48:	eeb0 7a46 	vmov.f32	s14, s12
 8015b4c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8015b50:	493c      	ldr	r1, [pc, #240]	@ (8015c44 <__ieee754_powf+0x408>)
 8015b52:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8015b56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015b5a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8015c48 <__ieee754_powf+0x40c>
 8015b5e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8015c4c <__ieee754_powf+0x410>
 8015b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015b66:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8015c50 <__ieee754_powf+0x414>
 8015b6a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015b6e:	ed91 7a00 	vldr	s14, [r1]
 8015b72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015b76:	ee07 2a10 	vmov	s14, r2
 8015b7a:	4a36      	ldr	r2, [pc, #216]	@ (8015c54 <__ieee754_powf+0x418>)
 8015b7c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015b80:	eeb0 7a67 	vmov.f32	s14, s15
 8015b84:	eea6 7a25 	vfma.f32	s14, s12, s11
 8015b88:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8015b8c:	ed92 5a00 	vldr	s10, [r2]
 8015b90:	ee37 7a05 	vadd.f32	s14, s14, s10
 8015b94:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015b98:	ee17 2a10 	vmov	r2, s14
 8015b9c:	401a      	ands	r2, r3
 8015b9e:	ee07 2a10 	vmov	s14, r2
 8015ba2:	ee77 6a66 	vsub.f32	s13, s14, s13
 8015ba6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8015baa:	eee6 6a65 	vfms.f32	s13, s12, s11
 8015bae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015bb2:	e715      	b.n	80159e0 <__ieee754_powf+0x1a4>
 8015bb4:	2601      	movs	r6, #1
 8015bb6:	e75d      	b.n	8015a74 <__ieee754_powf+0x238>
 8015bb8:	d152      	bne.n	8015c60 <__ieee754_powf+0x424>
 8015bba:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8015c58 <__ieee754_powf+0x41c>
 8015bbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015bc2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8015bc6:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bce:	f73f af29 	bgt.w	8015a24 <__ieee754_powf+0x1e8>
 8015bd2:	2386      	movs	r3, #134	@ 0x86
 8015bd4:	e048      	b.n	8015c68 <__ieee754_powf+0x42c>
 8015bd6:	4a21      	ldr	r2, [pc, #132]	@ (8015c5c <__ieee754_powf+0x420>)
 8015bd8:	4293      	cmp	r3, r2
 8015bda:	d907      	bls.n	8015bec <__ieee754_powf+0x3b0>
 8015bdc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015be4:	bf4c      	ite	mi
 8015be6:	2001      	movmi	r0, #1
 8015be8:	2000      	movpl	r0, #0
 8015bea:	e6c7      	b.n	801597c <__ieee754_powf+0x140>
 8015bec:	d138      	bne.n	8015c60 <__ieee754_powf+0x424>
 8015bee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015bf2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8015bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bfa:	dbea      	blt.n	8015bd2 <__ieee754_powf+0x396>
 8015bfc:	e7ee      	b.n	8015bdc <__ieee754_powf+0x3a0>
 8015bfe:	bf00      	nop
 8015c00:	00000000 	.word	0x00000000
 8015c04:	3f7ffff3 	.word	0x3f7ffff3
 8015c08:	3f800007 	.word	0x3f800007
 8015c0c:	3eaaaaab 	.word	0x3eaaaaab
 8015c10:	3fb8aa00 	.word	0x3fb8aa00
 8015c14:	3fb8aa3b 	.word	0x3fb8aa3b
 8015c18:	36eca570 	.word	0x36eca570
 8015c1c:	4b800000 	.word	0x4b800000
 8015c20:	001cc471 	.word	0x001cc471
 8015c24:	005db3d6 	.word	0x005db3d6
 8015c28:	08016d84 	.word	0x08016d84
 8015c2c:	fffff000 	.word	0xfffff000
 8015c30:	3e6c3255 	.word	0x3e6c3255
 8015c34:	3e53f142 	.word	0x3e53f142
 8015c38:	3e8ba305 	.word	0x3e8ba305
 8015c3c:	3edb6db7 	.word	0x3edb6db7
 8015c40:	3f19999a 	.word	0x3f19999a
 8015c44:	08016d74 	.word	0x08016d74
 8015c48:	3f76384f 	.word	0x3f76384f
 8015c4c:	3f763800 	.word	0x3f763800
 8015c50:	369dc3a0 	.word	0x369dc3a0
 8015c54:	08016d7c 	.word	0x08016d7c
 8015c58:	3338aa3c 	.word	0x3338aa3c
 8015c5c:	43160000 	.word	0x43160000
 8015c60:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8015c64:	d96f      	bls.n	8015d46 <__ieee754_powf+0x50a>
 8015c66:	15db      	asrs	r3, r3, #23
 8015c68:	3b7e      	subs	r3, #126	@ 0x7e
 8015c6a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8015c6e:	4118      	asrs	r0, r3
 8015c70:	4408      	add	r0, r1
 8015c72:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015c76:	4a4e      	ldr	r2, [pc, #312]	@ (8015db0 <__ieee754_powf+0x574>)
 8015c78:	3b7f      	subs	r3, #127	@ 0x7f
 8015c7a:	411a      	asrs	r2, r3
 8015c7c:	4002      	ands	r2, r0
 8015c7e:	ee07 2a10 	vmov	s14, r2
 8015c82:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8015c86:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8015c8a:	f1c3 0317 	rsb	r3, r3, #23
 8015c8e:	4118      	asrs	r0, r3
 8015c90:	2900      	cmp	r1, #0
 8015c92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c96:	bfb8      	it	lt
 8015c98:	4240      	neglt	r0, r0
 8015c9a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8015c9e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8015db4 <__ieee754_powf+0x578>
 8015ca2:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8015db8 <__ieee754_powf+0x57c>
 8015ca6:	ee16 3a90 	vmov	r3, s13
 8015caa:	f36f 030b 	bfc	r3, #0, #12
 8015cae:	ee06 3a90 	vmov	s13, r3
 8015cb2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015cb6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015cba:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8015cbe:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8015dbc <__ieee754_powf+0x580>
 8015cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015cc6:	eee0 7a87 	vfma.f32	s15, s1, s14
 8015cca:	eeb0 7a67 	vmov.f32	s14, s15
 8015cce:	eea6 7a86 	vfma.f32	s14, s13, s12
 8015cd2:	eef0 5a47 	vmov.f32	s11, s14
 8015cd6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8015cda:	ee67 6a07 	vmul.f32	s13, s14, s14
 8015cde:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8015ce2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8015dc0 <__ieee754_powf+0x584>
 8015ce6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8015dc4 <__ieee754_powf+0x588>
 8015cea:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015cee:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8015dc8 <__ieee754_powf+0x58c>
 8015cf2:	eee6 5a26 	vfma.f32	s11, s12, s13
 8015cf6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8015dcc <__ieee754_powf+0x590>
 8015cfa:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8015cfe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8015dd0 <__ieee754_powf+0x594>
 8015d02:	eee6 5a26 	vfma.f32	s11, s12, s13
 8015d06:	eeb0 6a47 	vmov.f32	s12, s14
 8015d0a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8015d0e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8015d12:	ee67 5a06 	vmul.f32	s11, s14, s12
 8015d16:	ee36 6a66 	vsub.f32	s12, s12, s13
 8015d1a:	eee7 7a27 	vfma.f32	s15, s14, s15
 8015d1e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8015d22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015d26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015d2e:	ee10 3a10 	vmov	r3, s0
 8015d32:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8015d36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015d3a:	da06      	bge.n	8015d4a <__ieee754_powf+0x50e>
 8015d3c:	f000 f928 	bl	8015f90 <scalbnf>
 8015d40:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015d44:	e592      	b.n	801586c <__ieee754_powf+0x30>
 8015d46:	2000      	movs	r0, #0
 8015d48:	e7a7      	b.n	8015c9a <__ieee754_powf+0x45e>
 8015d4a:	ee00 3a10 	vmov	s0, r3
 8015d4e:	e7f7      	b.n	8015d40 <__ieee754_powf+0x504>
 8015d50:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015d54:	e58a      	b.n	801586c <__ieee754_powf+0x30>
 8015d56:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8015dd4 <__ieee754_powf+0x598>
 8015d5a:	e587      	b.n	801586c <__ieee754_powf+0x30>
 8015d5c:	eeb0 0a48 	vmov.f32	s0, s16
 8015d60:	e584      	b.n	801586c <__ieee754_powf+0x30>
 8015d62:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8015d66:	f43f adbb 	beq.w	80158e0 <__ieee754_powf+0xa4>
 8015d6a:	2502      	movs	r5, #2
 8015d6c:	eeb0 0a48 	vmov.f32	s0, s16
 8015d70:	f000 f906 	bl	8015f80 <fabsf>
 8015d74:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8015d78:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8015d7c:	4647      	mov	r7, r8
 8015d7e:	d003      	beq.n	8015d88 <__ieee754_powf+0x54c>
 8015d80:	f1b8 0f00 	cmp.w	r8, #0
 8015d84:	f47f addb 	bne.w	801593e <__ieee754_powf+0x102>
 8015d88:	2c00      	cmp	r4, #0
 8015d8a:	bfbc      	itt	lt
 8015d8c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8015d90:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8015d94:	2e00      	cmp	r6, #0
 8015d96:	f6bf ad69 	bge.w	801586c <__ieee754_powf+0x30>
 8015d9a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8015d9e:	ea58 0805 	orrs.w	r8, r8, r5
 8015da2:	f47f adc7 	bne.w	8015934 <__ieee754_powf+0xf8>
 8015da6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015daa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015dae:	e55d      	b.n	801586c <__ieee754_powf+0x30>
 8015db0:	ff800000 	.word	0xff800000
 8015db4:	3f317218 	.word	0x3f317218
 8015db8:	3f317200 	.word	0x3f317200
 8015dbc:	35bfbe8c 	.word	0x35bfbe8c
 8015dc0:	b5ddea0e 	.word	0xb5ddea0e
 8015dc4:	3331bb4c 	.word	0x3331bb4c
 8015dc8:	388ab355 	.word	0x388ab355
 8015dcc:	bb360b61 	.word	0xbb360b61
 8015dd0:	3e2aaaab 	.word	0x3e2aaaab
 8015dd4:	00000000 	.word	0x00000000

08015dd8 <atanf>:
 8015dd8:	b538      	push	{r3, r4, r5, lr}
 8015dda:	ee10 5a10 	vmov	r5, s0
 8015dde:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8015de2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8015de6:	eef0 7a40 	vmov.f32	s15, s0
 8015dea:	d310      	bcc.n	8015e0e <atanf+0x36>
 8015dec:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8015df0:	d904      	bls.n	8015dfc <atanf+0x24>
 8015df2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015df6:	eeb0 0a67 	vmov.f32	s0, s15
 8015dfa:	bd38      	pop	{r3, r4, r5, pc}
 8015dfc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8015f34 <atanf+0x15c>
 8015e00:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8015f38 <atanf+0x160>
 8015e04:	2d00      	cmp	r5, #0
 8015e06:	bfc8      	it	gt
 8015e08:	eef0 7a47 	vmovgt.f32	s15, s14
 8015e0c:	e7f3      	b.n	8015df6 <atanf+0x1e>
 8015e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8015f3c <atanf+0x164>)
 8015e10:	429c      	cmp	r4, r3
 8015e12:	d810      	bhi.n	8015e36 <atanf+0x5e>
 8015e14:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8015e18:	d20a      	bcs.n	8015e30 <atanf+0x58>
 8015e1a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8015f40 <atanf+0x168>
 8015e1e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015e26:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e2e:	dce2      	bgt.n	8015df6 <atanf+0x1e>
 8015e30:	f04f 33ff 	mov.w	r3, #4294967295
 8015e34:	e013      	b.n	8015e5e <atanf+0x86>
 8015e36:	f000 f8a3 	bl	8015f80 <fabsf>
 8015e3a:	4b42      	ldr	r3, [pc, #264]	@ (8015f44 <atanf+0x16c>)
 8015e3c:	429c      	cmp	r4, r3
 8015e3e:	d84f      	bhi.n	8015ee0 <atanf+0x108>
 8015e40:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8015e44:	429c      	cmp	r4, r3
 8015e46:	d841      	bhi.n	8015ecc <atanf+0xf4>
 8015e48:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8015e4c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8015e50:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015e54:	2300      	movs	r3, #0
 8015e56:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015e5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015e5e:	1c5a      	adds	r2, r3, #1
 8015e60:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015e64:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8015f48 <atanf+0x170>
 8015e68:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8015f4c <atanf+0x174>
 8015e6c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8015f50 <atanf+0x178>
 8015e70:	ee66 6a06 	vmul.f32	s13, s12, s12
 8015e74:	eee6 5a87 	vfma.f32	s11, s13, s14
 8015e78:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8015f54 <atanf+0x17c>
 8015e7c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015e80:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8015f58 <atanf+0x180>
 8015e84:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015e88:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8015f5c <atanf+0x184>
 8015e8c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015e90:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8015f60 <atanf+0x188>
 8015e94:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015e98:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8015f64 <atanf+0x18c>
 8015e9c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015ea0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8015f68 <atanf+0x190>
 8015ea4:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015ea8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8015f6c <atanf+0x194>
 8015eac:	eea7 5a26 	vfma.f32	s10, s14, s13
 8015eb0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8015f70 <atanf+0x198>
 8015eb4:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015eb8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015ebc:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015ec0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015ec4:	d121      	bne.n	8015f0a <atanf+0x132>
 8015ec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015eca:	e794      	b.n	8015df6 <atanf+0x1e>
 8015ecc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015ed0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015ed4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015ed8:	2301      	movs	r3, #1
 8015eda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015ede:	e7be      	b.n	8015e5e <atanf+0x86>
 8015ee0:	4b24      	ldr	r3, [pc, #144]	@ (8015f74 <atanf+0x19c>)
 8015ee2:	429c      	cmp	r4, r3
 8015ee4:	d80b      	bhi.n	8015efe <atanf+0x126>
 8015ee6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8015eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015eee:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015ef2:	2302      	movs	r3, #2
 8015ef4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015efc:	e7af      	b.n	8015e5e <atanf+0x86>
 8015efe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8015f02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015f06:	2303      	movs	r3, #3
 8015f08:	e7a9      	b.n	8015e5e <atanf+0x86>
 8015f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8015f78 <atanf+0x1a0>)
 8015f0c:	491b      	ldr	r1, [pc, #108]	@ (8015f7c <atanf+0x1a4>)
 8015f0e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015f12:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015f16:	edd3 6a00 	vldr	s13, [r3]
 8015f1a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015f1e:	2d00      	cmp	r5, #0
 8015f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015f24:	edd2 7a00 	vldr	s15, [r2]
 8015f28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015f2c:	bfb8      	it	lt
 8015f2e:	eef1 7a67 	vneglt.f32	s15, s15
 8015f32:	e760      	b.n	8015df6 <atanf+0x1e>
 8015f34:	bfc90fdb 	.word	0xbfc90fdb
 8015f38:	3fc90fdb 	.word	0x3fc90fdb
 8015f3c:	3edfffff 	.word	0x3edfffff
 8015f40:	7149f2ca 	.word	0x7149f2ca
 8015f44:	3f97ffff 	.word	0x3f97ffff
 8015f48:	3c8569d7 	.word	0x3c8569d7
 8015f4c:	3d4bda59 	.word	0x3d4bda59
 8015f50:	bd6ef16b 	.word	0xbd6ef16b
 8015f54:	3d886b35 	.word	0x3d886b35
 8015f58:	3dba2e6e 	.word	0x3dba2e6e
 8015f5c:	3e124925 	.word	0x3e124925
 8015f60:	3eaaaaab 	.word	0x3eaaaaab
 8015f64:	bd15a221 	.word	0xbd15a221
 8015f68:	bd9d8795 	.word	0xbd9d8795
 8015f6c:	bde38e38 	.word	0xbde38e38
 8015f70:	be4ccccd 	.word	0xbe4ccccd
 8015f74:	401bffff 	.word	0x401bffff
 8015f78:	08016d9c 	.word	0x08016d9c
 8015f7c:	08016d8c 	.word	0x08016d8c

08015f80 <fabsf>:
 8015f80:	ee10 3a10 	vmov	r3, s0
 8015f84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015f88:	ee00 3a10 	vmov	s0, r3
 8015f8c:	4770      	bx	lr
	...

08015f90 <scalbnf>:
 8015f90:	ee10 3a10 	vmov	r3, s0
 8015f94:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8015f98:	d02b      	beq.n	8015ff2 <scalbnf+0x62>
 8015f9a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8015f9e:	d302      	bcc.n	8015fa6 <scalbnf+0x16>
 8015fa0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015fa4:	4770      	bx	lr
 8015fa6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8015faa:	d123      	bne.n	8015ff4 <scalbnf+0x64>
 8015fac:	4b24      	ldr	r3, [pc, #144]	@ (8016040 <scalbnf+0xb0>)
 8015fae:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8016044 <scalbnf+0xb4>
 8015fb2:	4298      	cmp	r0, r3
 8015fb4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015fb8:	db17      	blt.n	8015fea <scalbnf+0x5a>
 8015fba:	ee10 3a10 	vmov	r3, s0
 8015fbe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015fc2:	3a19      	subs	r2, #25
 8015fc4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015fc8:	4288      	cmp	r0, r1
 8015fca:	dd15      	ble.n	8015ff8 <scalbnf+0x68>
 8015fcc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8016048 <scalbnf+0xb8>
 8015fd0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801604c <scalbnf+0xbc>
 8015fd4:	ee10 3a10 	vmov	r3, s0
 8015fd8:	eeb0 7a67 	vmov.f32	s14, s15
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	bfb8      	it	lt
 8015fe0:	eef0 7a66 	vmovlt.f32	s15, s13
 8015fe4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8015fe8:	4770      	bx	lr
 8015fea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016050 <scalbnf+0xc0>
 8015fee:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015ff2:	4770      	bx	lr
 8015ff4:	0dd2      	lsrs	r2, r2, #23
 8015ff6:	e7e5      	b.n	8015fc4 <scalbnf+0x34>
 8015ff8:	4410      	add	r0, r2
 8015ffa:	28fe      	cmp	r0, #254	@ 0xfe
 8015ffc:	dce6      	bgt.n	8015fcc <scalbnf+0x3c>
 8015ffe:	2800      	cmp	r0, #0
 8016000:	dd06      	ble.n	8016010 <scalbnf+0x80>
 8016002:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016006:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801600a:	ee00 3a10 	vmov	s0, r3
 801600e:	4770      	bx	lr
 8016010:	f110 0f16 	cmn.w	r0, #22
 8016014:	da09      	bge.n	801602a <scalbnf+0x9a>
 8016016:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8016050 <scalbnf+0xc0>
 801601a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8016054 <scalbnf+0xc4>
 801601e:	ee10 3a10 	vmov	r3, s0
 8016022:	eeb0 7a67 	vmov.f32	s14, s15
 8016026:	2b00      	cmp	r3, #0
 8016028:	e7d9      	b.n	8015fde <scalbnf+0x4e>
 801602a:	3019      	adds	r0, #25
 801602c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016030:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8016034:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8016058 <scalbnf+0xc8>
 8016038:	ee07 3a90 	vmov	s15, r3
 801603c:	e7d7      	b.n	8015fee <scalbnf+0x5e>
 801603e:	bf00      	nop
 8016040:	ffff3cb0 	.word	0xffff3cb0
 8016044:	4c000000 	.word	0x4c000000
 8016048:	7149f2ca 	.word	0x7149f2ca
 801604c:	f149f2ca 	.word	0xf149f2ca
 8016050:	0da24260 	.word	0x0da24260
 8016054:	8da24260 	.word	0x8da24260
 8016058:	33000000 	.word	0x33000000

0801605c <with_errnof>:
 801605c:	b510      	push	{r4, lr}
 801605e:	ed2d 8b02 	vpush	{d8}
 8016062:	eeb0 8a40 	vmov.f32	s16, s0
 8016066:	4604      	mov	r4, r0
 8016068:	f7fd fada 	bl	8013620 <__errno>
 801606c:	eeb0 0a48 	vmov.f32	s0, s16
 8016070:	ecbd 8b02 	vpop	{d8}
 8016074:	6004      	str	r4, [r0, #0]
 8016076:	bd10      	pop	{r4, pc}

08016078 <xflowf>:
 8016078:	b130      	cbz	r0, 8016088 <xflowf+0x10>
 801607a:	eef1 7a40 	vneg.f32	s15, s0
 801607e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016082:	2022      	movs	r0, #34	@ 0x22
 8016084:	f7ff bfea 	b.w	801605c <with_errnof>
 8016088:	eef0 7a40 	vmov.f32	s15, s0
 801608c:	e7f7      	b.n	801607e <xflowf+0x6>
	...

08016090 <__math_uflowf>:
 8016090:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8016098 <__math_uflowf+0x8>
 8016094:	f7ff bff0 	b.w	8016078 <xflowf>
 8016098:	10000000 	.word	0x10000000

0801609c <__math_oflowf>:
 801609c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80160a4 <__math_oflowf+0x8>
 80160a0:	f7ff bfea 	b.w	8016078 <xflowf>
 80160a4:	70000000 	.word	0x70000000

080160a8 <_init>:
 80160a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160aa:	bf00      	nop
 80160ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160ae:	bc08      	pop	{r3}
 80160b0:	469e      	mov	lr, r3
 80160b2:	4770      	bx	lr

080160b4 <_fini>:
 80160b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160b6:	bf00      	nop
 80160b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160ba:	bc08      	pop	{r3}
 80160bc:	469e      	mov	lr, r3
 80160be:	4770      	bx	lr
